{
    "special_type": [
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "enum zprimality\n{\n  NONPRIME = 0,\n  PROBABLY_PRIME,\n  PRIME\n}",
            "name": "zprimality",
            "names": []
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "enum zranddev\n{\n  FAST_RANDOM = 0,\n  SECURE_RANDOM\n}",
            "name": "zranddev",
            "names": []
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "enum zranddist\n{\n  QUASIUNIFORM = 0,\n  UNIFORM\n}",
            "name": "zranddist",
            "names": []
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "enum zerror\n{\n  ZERROR_ERRNO_SET = 0\n}",
            "name": "zerror",
            "names": []
        }
    ],
    "global_variable": [
        {
            "path": null,
            "name": "libzahl_tmp_cmp",
            "type": "z_t",
            "definition": [
                "extern z_t libzahl_tmp_cmp"
            ]
        },
        {
            "path": null,
            "name": "libzahl_tmp_str_num",
            "type": "z_t",
            "definition": [
                "extern z_t libzahl_tmp_str_num"
            ]
        },
        {
            "path": null,
            "name": "libzahl_tmp_str_mag",
            "type": "z_t",
            "definition": [
                "extern z_t libzahl_tmp_str_mag"
            ]
        },
        {
            "path": null,
            "name": "libzahl_tmp_str_div",
            "type": "z_t",
            "definition": [
                "extern z_t libzahl_tmp_str_div"
            ]
        },
        {
            "path": null,
            "name": "libzahl_tmp_str_rem",
            "type": "z_t",
            "definition": [
                "extern z_t libzahl_tmp_str_rem"
            ]
        },
        {
            "path": null,
            "name": "libzahl_tmp_gcd_u",
            "type": "z_t",
            "definition": [
                "extern z_t libzahl_tmp_gcd_u"
            ]
        },
        {
            "path": null,
            "name": "libzahl_tmp_gcd_v",
            "type": "z_t",
            "definition": [
                "extern z_t libzahl_tmp_gcd_v"
            ]
        },
        {
            "path": null,
            "name": "libzahl_tmp_sub",
            "type": "z_t",
            "definition": [
                "extern z_t libzahl_tmp_sub"
            ]
        },
        {
            "path": null,
            "name": "libzahl_tmp_modmul",
            "type": "z_t",
            "definition": [
                "extern z_t libzahl_tmp_modmul"
            ]
        },
        {
            "path": null,
            "name": "libzahl_tmp_div",
            "type": "z_t",
            "definition": [
                "extern z_t libzahl_tmp_div"
            ]
        },
        {
            "path": null,
            "name": "libzahl_tmp_mod",
            "type": "z_t",
            "definition": [
                "extern z_t libzahl_tmp_mod"
            ]
        },
        {
            "path": null,
            "name": "libzahl_tmp_pow_b",
            "type": "z_t",
            "definition": [
                "extern z_t libzahl_tmp_pow_b"
            ]
        },
        {
            "path": null,
            "name": "libzahl_tmp_pow_c",
            "type": "z_t",
            "definition": [
                "extern z_t libzahl_tmp_pow_c"
            ]
        },
        {
            "path": null,
            "name": "libzahl_tmp_pow_d",
            "type": "z_t",
            "definition": [
                "extern z_t libzahl_tmp_pow_d"
            ]
        },
        {
            "path": null,
            "name": "libzahl_tmp_modsqr",
            "type": "z_t",
            "definition": [
                "extern z_t libzahl_tmp_modsqr"
            ]
        },
        {
            "path": null,
            "name": "libzahl_tmp_divmod_a",
            "type": "z_t",
            "definition": [
                "extern z_t libzahl_tmp_divmod_a"
            ]
        },
        {
            "path": null,
            "name": "libzahl_tmp_divmod_b",
            "type": "z_t",
            "definition": [
                "extern z_t libzahl_tmp_divmod_b"
            ]
        },
        {
            "path": null,
            "name": "libzahl_tmp_divmod_d",
            "type": "z_t",
            "definition": [
                "extern z_t libzahl_tmp_divmod_d"
            ]
        },
        {
            "path": null,
            "name": "libzahl_tmp_ptest_x",
            "type": "z_t",
            "definition": [
                "extern z_t libzahl_tmp_ptest_x"
            ]
        },
        {
            "path": null,
            "name": "libzahl_tmp_ptest_a",
            "type": "z_t",
            "definition": [
                "extern z_t libzahl_tmp_ptest_a"
            ]
        },
        {
            "path": null,
            "name": "libzahl_tmp_ptest_d",
            "type": "z_t",
            "definition": [
                "extern z_t libzahl_tmp_ptest_d"
            ]
        },
        {
            "path": null,
            "name": "libzahl_tmp_ptest_n1",
            "type": "z_t",
            "definition": [
                "extern z_t libzahl_tmp_ptest_n1"
            ]
        },
        {
            "path": null,
            "name": "libzahl_tmp_ptest_n4",
            "type": "z_t",
            "definition": [
                "extern z_t libzahl_tmp_ptest_n4"
            ]
        },
        {
            "path": null,
            "name": "libzahl_const_1e19",
            "type": "z_t",
            "definition": [
                "extern z_t libzahl_const_1e19"
            ]
        },
        {
            "path": null,
            "name": "libzahl_const_1e9",
            "type": "z_t",
            "definition": [
                "extern z_t libzahl_const_1e9"
            ]
        },
        {
            "path": null,
            "name": "libzahl_const_1",
            "type": "z_t",
            "definition": [
                "extern z_t libzahl_const_1"
            ]
        },
        {
            "path": null,
            "name": "libzahl_const_2",
            "type": "z_t",
            "definition": [
                "extern z_t libzahl_const_2"
            ]
        },
        {
            "path": null,
            "name": "libzahl_const_4",
            "type": "z_t",
            "definition": [
                "extern z_t libzahl_const_4"
            ]
        },
        {
            "path": null,
            "name": "libzahl_tmp_divmod_ds",
            "type": "z_t [32]",
            "definition": [
                "extern z_t libzahl_tmp_divmod_ds[32]"
            ]
        },
        {
            "path": null,
            "name": "libzahl_jmp_buf",
            "type": "jmp_buf",
            "definition": [
                "extern jmp_buf libzahl_jmp_buf"
            ]
        },
        {
            "path": null,
            "name": "libzahl_set_up",
            "type": "int",
            "definition": [
                "extern int libzahl_set_up"
            ]
        },
        {
            "path": null,
            "name": "libzahl_error",
            "type": "int",
            "definition": [
                "extern int libzahl_error"
            ]
        },
        {
            "path": null,
            "name": "libzahl_pool",
            "type": "zahl_char_t **[(sizeof(size_t)) * 8]",
            "definition": [
                "extern zahl_char_t **libzahl_pool[(sizeof(size_t)) * 8]"
            ]
        },
        {
            "path": null,
            "name": "libzahl_pool_n",
            "type": "size_t [(sizeof(size_t)) * 8]",
            "definition": [
                "extern size_t libzahl_pool_n[(sizeof(size_t)) * 8]"
            ]
        },
        {
            "path": null,
            "name": "libzahl_pool_alloc",
            "type": "size_t [(sizeof(size_t)) * 8]",
            "definition": [
                "extern size_t libzahl_pool_alloc[(sizeof(size_t)) * 8]"
            ]
        }
    ],
    "function": [
        {
            "path": null,
            "name": "zabs",
            "header": "void zabs(z_t, z_t)",
            "params": [
                "z_t a",
                "z_t b"
            ],
            "definition": "void zabs(z_t a, z_t b)\n{\n  do\n  {\n    if (a != b)\n    {\n      zset(a, b);\n    }\n  }\n  while (0);\n  a->sign = !zzero(a);\n}\n\n",
            "calle": [
                "zset",
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zinit",
            "header": "",
            "params": [
                "z_t a"
            ],
            "definition": "inline static void zinit(z_t a)\n{\n  a->alloced = 0;\n  a->chars = 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zeven",
            "header": "",
            "params": [
                "z_t a"
            ],
            "definition": "inline static int zeven(z_t a)\n{\n  return (!a->sign) || (!(a->chars[0] & 1));\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zodd",
            "header": "",
            "params": [
                "z_t a"
            ],
            "definition": "inline static int zodd(z_t a)\n{\n  return a->sign && (a->chars[0] & 1);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zeven_nonzero",
            "header": "",
            "params": [
                "z_t a"
            ],
            "definition": "inline static int zeven_nonzero(z_t a)\n{\n  return !(a->chars[0] & 1);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zodd_nonzero",
            "header": "",
            "params": [
                "z_t a"
            ],
            "definition": "inline static int zodd_nonzero(z_t a)\n{\n  return a->chars[0] & 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zzero",
            "header": "",
            "params": [
                "z_t a"
            ],
            "definition": "inline static int zzero(z_t a)\n{\n  return !a->sign;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zsignum",
            "header": "",
            "params": [
                "z_t a"
            ],
            "definition": "inline static int zsignum(z_t a)\n{\n  return a->sign;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zadd",
            "header": "void zadd(z_t, z_t, z_t)",
            "params": [
                "z_t a",
                "z_t b",
                "z_t c"
            ],
            "definition": "void zadd(z_t a, z_t b, z_t c)\n{\n  if (zzero(b))\n  {\n    do\n    {\n      if (a != c)\n      {\n        zset(a, c);\n      }\n    }\n    while (0);\n  }\n  else\n    if (zzero(c))\n  {\n    do\n    {\n      if (a != b)\n      {\n        zset(a, b);\n      }\n    }\n    while (0);\n  }\n  else\n    if (b == c)\n  {\n    zlsh(a, b, 1);\n  }\n  else\n    if ((zsignum(b) | zsignum(c)) < 0)\n  {\n    if (zsignum(b) < 0)\n    {\n      if (zsignum(c) < 0)\n      {\n        zadd_unsigned(a, b, c);\n        a->sign = -zsignum(a);\n      }\n      else\n      {\n        zsub_unsigned(a, c, b);\n      }\n    }\n    else\n    {\n      zsub_unsigned(a, b, c);\n    }\n  }\n  else\n  {\n    zadd_unsigned(a, b, c);\n  }\n}\n\n",
            "calle": [
                "zadd_unsigned",
                "zlsh",
                "zset",
                "zsignum",
                "zsub_unsigned",
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "z_t",
                        "definition": [
                            "z_t c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zadd_unsigned",
            "header": "void zadd_unsigned(z_t, z_t, z_t)",
            "params": [
                "z_t a",
                "z_t b",
                "z_t c"
            ],
            "definition": "void zadd_unsigned(z_t a, z_t b, z_t c)\n{\n  size_t i;\n  size_t size;\n  size_t n;\n  uint32_t carry[] = {0, 0};\n  zahl_char_t *addend;\n  unsigned int addend_idx = 0;\n  if (zzero(b))\n  {\n    zabs(a, c);\n    return;\n  }\n  else\n    if (zzero(c))\n  {\n    zabs(a, b);\n    return;\n  }\n  size = (b->used > c->used) ? (b->used) : (c->used);\n  n = (b->used + c->used) - size;\n  do\n  {\n    if (a->alloced < (size + 1))\n    {\n      libzahl_realloc(a, size + 1);\n    }\n  }\n  while (0);\n  a->chars[size] = 0;\n  if (a == b)\n  {\n    if (a->used < c->used)\n    {\n      n = c->used;\n      memset(a->chars + a->used, 0, (n - a->used) * (sizeof(zahl_char_t)));\n    }\n    addend_idx = c->chars;\n  }\n  else\n    if (a == c)\n  {\n    if (a->used < b->used)\n    {\n      n = b->used;\n      memset(a->chars + a->used, 0, (n - a->used) * (sizeof(zahl_char_t)));\n    }\n    addend_idx = b->chars;\n  }\n  else\n    if (b->used > c->used)\n  {\n    memcpy(a->chars, b->chars, b->used * (sizeof(zahl_char_t)));\n    a->used = b->used;\n    addend_idx = c->chars;\n  }\n  else\n  {\n    memcpy(a->chars, c->chars, c->used * (sizeof(zahl_char_t)));\n    a->used = c->used;\n    addend_idx = b->chars;\n  }\n  for (i = 0; i < n; i += 1)\n  {\n    if (carry[i & 1])\n    {\n      carry[(~i) & 1] = (UINT32_MAX - a->chars[i]) <= addend[i + addend_idx];\n    }\n    else\n      carry[(~i) & 1] = (UINT32_MAX - a->chars[i]) < addend[i + addend_idx];\n    a->chars[i] += addend[i + addend_idx] + carry[i & 1];\n  }\n\n  while (carry[i & 1])\n  {\n    carry[(~i) & 1] = a->chars[i] == UINT32_MAX;\n    a->chars[i] += 1;\n    i += 1;\n  }\n\n  if (a->used < i)\n  {\n    a->used = i;\n  }\n  a->sign = 1;\n}\n\n",
            "calle": [
                "libzahl_realloc",
                "memcpy",
                "memset",
                "zabs",
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "z_t",
                        "definition": [
                            "z_t c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "size_t",
                        "definition": [
                            "size_t n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "carry",
                        "type": "uint32_t []",
                        "definition": [
                            "uint32_t carry[] = {0, 0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "addend",
                        "type": "zahl_char_t *",
                        "definition": [
                            "zahl_char_t *addend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "addend_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int addend_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zand",
            "header": "void zand(z_t, z_t, z_t)",
            "params": [
                "z_t a",
                "z_t b",
                "z_t c"
            ],
            "definition": "void zand(z_t a, z_t b, z_t c)\n{\n  size_t n;\n  if (zzero(b) || zzero(c))\n  {\n    a->sign = 0;\n    return;\n  }\n  n = (b->used < c->used) ? (b->used) : (c->used);\n  while (n--)\n    if (b->chars[n] & c->chars[n])\n  {\n    goto found_highest;\n  }\n\n  a->sign = 0;\n  return;\n  n += 1;\n  found_highest:\n  a->used = n;\n\n  if (a == b)\n  {\n    while (n--)\n      a->chars[n] &= c->chars[n];\n\n  }\n  else\n    if (a == c)\n  {\n    while (n--)\n      a->chars[n] &= b->chars[n];\n\n  }\n  else\n  {\n    do\n    {\n      if (a->alloced < a->used)\n      {\n        libzahl_realloc(a, a->used);\n      }\n    }\n    while (0);\n    memcpy(a->chars, c->chars, a->used * (sizeof(zahl_char_t)));\n    while (n--)\n      a->chars[n] &= b->chars[n];\n\n  }\n  a->sign = (((zsignum(b) > 0) || (zsignum(c) > 0)) * 2) - 1;\n}\n\n",
            "calle": [
                "libzahl_realloc",
                "memcpy",
                "zsignum",
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "z_t",
                        "definition": [
                            "z_t c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "size_t",
                        "definition": [
                            "size_t n"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zbits",
            "header": "size_t zbits(z_t)",
            "params": [
                "z_t a"
            ],
            "definition": "size_t zbits(z_t a)\n{\n  size_t i;\n  zahl_char_t x;\n  if (zzero(a))\n  {\n    return 1;\n  }\n  for (i = a->used - 1;; i -= 1)\n  {\n    x = a->chars[i];\n    if (x)\n    {\n      a->used = i + 1;\n      for (i *= 32; x; x >>= 1, i += 1)\n        ;\n\n      return i;\n    }\n  }\n\n}\n\n",
            "calle": [
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "zahl_char_t",
                        "definition": [
                            "zahl_char_t x"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zbset",
            "header": "void zbset(z_t, z_t, size_t, int)",
            "params": [
                "z_t a",
                "z_t b",
                "size_t bit",
                "int action"
            ],
            "definition": "void zbset(z_t a, z_t b, size_t bit, int action)\n{\n  zahl_char_t mask = 1;\n  size_t chars;\n  chars = bit >> 5;\n  bit = bit & (32 - 1);\n  mask <<= bit;\n  do\n  {\n    if (a != b)\n    {\n      zset(a, b);\n    }\n  }\n  while (0);\n  if (action)\n  {\n    helper_zbset_1(&a, chars);\n  }\n  if (action > 0)\n  {\n    a->chars[chars] |= mask;\n    return;\n  }\n  else\n    if (action < 0)\n  {\n    a->chars[chars] ^= mask;\n  }\n  else\n    if (chars < a->used)\n  {\n    a->chars[chars] &= ~mask;\n  }\n  while (a->used && (!a->chars[a->used - 1]))\n    a->used--;\n\n  if (!a->used)\n  {\n    a->sign = 0;\n  }\n}\n\n",
            "calle": [
                "helper_zbset_1",
                "zset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bit",
                        "type": "size_t",
                        "definition": [
                            "size_t bit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "action",
                        "type": "int",
                        "definition": [
                            "int action"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask",
                        "type": "zahl_char_t",
                        "definition": [
                            "zahl_char_t mask = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chars",
                        "type": "size_t",
                        "definition": [
                            "size_t chars"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_zbset_1",
            "header": "",
            "params": [
                "z_t * const a_ref",
                "size_t chars"
            ],
            "definition": "void helper_zbset_1(z_t * const a_ref, size_t chars)\n{\n  z_t a = *a_ref;\n  if (zzero(a))\n  {\n    a->used = 0;\n    a->sign = 1;\n  }\n  if (a->used <= chars)\n  {\n    do\n    {\n      if (a->alloced < (chars + 1))\n      {\n        libzahl_realloc(a, chars + 1);\n      }\n    }\n    while (0);\n    memset(a->chars + a->used, 0, ((chars + 1) - a->used) * (sizeof(zahl_char_t)));\n    a->used = chars + 1;\n  }\n  *a_ref = a;\n}\n\n",
            "calle": [
                "libzahl_realloc",
                "memset",
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a_ref",
                        "type": "z_t * const",
                        "definition": [
                            "z_t * const a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chars",
                        "type": "size_t",
                        "definition": [
                            "size_t chars"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a = *a_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zbtest",
            "header": "int zbtest(z_t, size_t)",
            "params": [
                "z_t a",
                "size_t bit"
            ],
            "definition": "int zbtest(z_t a, size_t bit)\n{\n  size_t chars;\n  if (zzero(a))\n  {\n    return 0;\n  }\n  chars = bit >> 5;\n  if (chars >= a->used)\n  {\n    return 0;\n  }\n  bit = bit & (32 - 1);\n  return (a->chars[chars] >> bit) & 1;\n}\n\n",
            "calle": [
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bit",
                        "type": "size_t",
                        "definition": [
                            "size_t bit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chars",
                        "type": "size_t",
                        "definition": [
                            "size_t chars"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zcmp",
            "header": "int zcmp(z_t, z_t)",
            "params": [
                "z_t a",
                "z_t b"
            ],
            "definition": "int zcmp(z_t a, z_t b)\n{\n  if (zsignum(a) != zsignum(b))\n  {\n    return (zsignum(a) < zsignum(b)) ? (-1) : (zsignum(a) > zsignum(b));\n  }\n  return zsignum(a) * zcmpmag(a, b);\n}\n\n",
            "calle": [
                "zcmpmag",
                "zsignum"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zcmpi",
            "header": "int zcmpi(z_t, long long int)",
            "params": [
                "z_t a",
                "long long int b"
            ],
            "definition": "int zcmpi(z_t a, long long int b)\n{\n  if (!b)\n  {\n    return zsignum(a);\n  }\n  if (zzero(a))\n  {\n    return (b > 0) ? (-1) : (b < 0);\n  }\n  zseti(libzahl_tmp_cmp, b);\n  return zcmp(a, libzahl_tmp_cmp);\n}\n\n",
            "calle": [
                "zcmp",
                "zseti",
                "zsignum",
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "long long int",
                        "definition": [
                            "long long int b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_cmp",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zcmpmag",
            "header": "int zcmpmag(z_t, z_t)",
            "params": [
                "z_t a",
                "z_t b"
            ],
            "definition": "int zcmpmag(z_t a, z_t b)\n{\n  size_t i;\n  size_t j;\n  if (zzero(a))\n  {\n    return -(!zzero(b));\n  }\n  if (zzero(b))\n  {\n    return 1;\n  }\n  i = a->used - 1;\n  j = b->used - 1;\n  for (; i > j; i -= 1)\n  {\n    if (a->chars[i])\n    {\n      return +1;\n    }\n    a->used -= 1;\n  }\n\n  for (; j > i; j -= 1)\n  {\n    if (b->chars[j])\n    {\n      return -1;\n    }\n    b->used -= 1;\n  }\n\n  for (; i; i -= 1)\n    if (a->chars[i] != b->chars[i])\n  {\n    return ((a->chars[i] > b->chars[i]) * 2) - 1;\n  }\n\n  return (a->chars[0] < b->chars[0]) ? (-1) : (a->chars[0] > b->chars[0]);\n}\n\n",
            "calle": [
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zcmpu",
            "header": "int zcmpu(z_t, unsigned long long int)",
            "params": [
                "z_t a",
                "unsigned long long int b"
            ],
            "definition": "int zcmpu(z_t a, unsigned long long int b)\n{\n  if (!b)\n  {\n    return zsignum(a);\n  }\n  if (zsignum(a) <= 0)\n  {\n    return -1;\n  }\n  zsetu(libzahl_tmp_cmp, b);\n  return zcmp(a, libzahl_tmp_cmp);\n}\n\n",
            "calle": [
                "zcmp",
                "zsetu",
                "zsignum"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "unsigned long long int",
                        "definition": [
                            "unsigned long long int b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_cmp",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zdiv",
            "header": "void zdiv(z_t, z_t, z_t)",
            "params": [
                "z_t a",
                "z_t b",
                "z_t c"
            ],
            "definition": "void zdiv(z_t a, z_t b, z_t c)\n{\n  zdivmod(a, libzahl_tmp_div, b, c);\n}\n\n",
            "calle": [
                "zdivmod"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "z_t",
                        "definition": [
                            "z_t c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_div",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zdivmod",
            "header": "void zdivmod(z_t, z_t, z_t, z_t)",
            "params": [
                "z_t a",
                "z_t b",
                "z_t c",
                "z_t d"
            ],
            "definition": "void zdivmod(z_t a, z_t b, z_t c, z_t d)\n{\n  size_t c_bits;\n  size_t d_bits;\n  size_t bit;\n  int sign;\n  int cmpmag;\n  sign = zsignum(c) * zsignum(d);\n  if (!sign)\n  {\n    helper_zdivmod_1(&a, &b, c, d);\n  }\n  else\n    if ((cmpmag = zcmpmag(c, d)) <= 0)\n  {\n    helper_zdivmod_3(&a, &b, &sign, c, cmpmag);\n  }\n  c_bits = zbits(c);\n  d_bits = zbits(d);\n  bit = c_bits - d_bits;\n  zlsh(libzahl_tmp_divmod_d, d, bit);\n  libzahl_tmp_divmod_d->sign = 1;\n  if (zcmpmag(libzahl_tmp_divmod_d, c) > 0)\n  {\n    zrsh(libzahl_tmp_divmod_d, libzahl_tmp_divmod_d, 1);\n    bit -= 1;\n  }\n  libzahl_tmp_divmod_a->sign = 0;\n  zabs(libzahl_tmp_divmod_b, c);\n  if (bit < 32)\n  {\n    helper_zdivmod_2(bit);\n  }\n  else\n  {\n    helper_zdivmod_4(bit);\n  }\n  done:\n  zswap(a, libzahl_tmp_divmod_a);\n\n  zswap(b, libzahl_tmp_divmod_b);\n  a->sign = sign;\n}\n\n",
            "calle": [
                "helper_zdivmod_1",
                "helper_zdivmod_2",
                "helper_zdivmod_3",
                "helper_zdivmod_4",
                "zabs",
                "zbits",
                "zcmpmag",
                "zlsh",
                "zrsh",
                "zsignum",
                "zswap"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "z_t",
                        "definition": [
                            "z_t c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "z_t",
                        "definition": [
                            "z_t d"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_bits",
                        "type": "size_t",
                        "definition": [
                            "size_t c_bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_bits",
                        "type": "size_t",
                        "definition": [
                            "size_t d_bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bit",
                        "type": "size_t",
                        "definition": [
                            "size_t bit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sign",
                        "type": "int",
                        "definition": [
                            "int sign"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cmpmag",
                        "type": "int",
                        "definition": [
                            "int cmpmag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_divmod_d",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_divmod_a",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_divmod_b",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_zdivmod_1",
            "header": "",
            "params": [
                "z_t * const a_ref",
                "z_t * const b_ref",
                "z_t c",
                "z_t d"
            ],
            "definition": "void helper_zdivmod_1(z_t * const a_ref, z_t * const b_ref, z_t c, z_t d)\n{\n  z_t a = *a_ref;\n  z_t b = *b_ref;\n  if (zzero(c))\n  {\n    if (zzero(d))\n    {\n      libzahl_error = EDOM, longjmp(libzahl_jmp_buf, 1);\n    }\n    else\n    {\n      a->sign = 0;\n      b->sign = 0;\n    }\n  }\n  else\n  {\n    libzahl_error = EDOM, longjmp(libzahl_jmp_buf, 1);\n  }\n  return;\n  *a_ref = a;\n  *b_ref = b;\n}\n\n",
            "calle": [
                "longjmp",
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a_ref",
                        "type": "z_t * const",
                        "definition": [
                            "z_t * const a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b_ref",
                        "type": "z_t * const",
                        "definition": [
                            "z_t * const b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "z_t",
                        "definition": [
                            "z_t c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "z_t",
                        "definition": [
                            "z_t d"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a = *a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b = *b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_error",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_jmp_buf",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_zdivmod_2",
            "header": "",
            "params": [
                "size_t bit"
            ],
            "definition": "void helper_zdivmod_2(size_t bit)\n{\n  for (;;)\n  {\n    if (zcmpmag(libzahl_tmp_divmod_d, libzahl_tmp_divmod_b) <= 0)\n    {\n      zsub(libzahl_tmp_divmod_b, libzahl_tmp_divmod_b, libzahl_tmp_divmod_d);\n      zbset(libzahl_tmp_divmod_a, libzahl_tmp_divmod_a, bit, 1);\n    }\n    if ((!(bit--)) || zzero(libzahl_tmp_divmod_b))\n    {\n      goto done;\n    }\n    zrsh(libzahl_tmp_divmod_d, libzahl_tmp_divmod_d, 1);\n  }\n\n}\n\n",
            "calle": [
                "zbset",
                "zcmpmag",
                "zrsh",
                "zsub",
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bit",
                        "type": "size_t",
                        "definition": [
                            "size_t bit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_divmod_d",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_divmod_b",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_divmod_a",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_zdivmod_3",
            "header": "",
            "params": [
                "z_t * const a_ref",
                "z_t * const b_ref",
                "int * const sign_ref",
                "z_t c",
                "int cmpmag"
            ],
            "definition": "void helper_zdivmod_3(z_t * const a_ref, z_t * const b_ref, int * const sign_ref, z_t c, int cmpmag)\n{\n  z_t a = *a_ref;\n  z_t b = *b_ref;\n  int sign = *sign_ref;\n  if (cmpmag == 0)\n  {\n    zseti(a, sign);\n    b->sign = 0;\n    return;\n  }\n  else\n  {\n    do\n    {\n      if (b != c)\n      {\n        zset(b, c);\n      }\n    }\n    while (0);\n  }\n  b->sign = 1;\n  a->sign = 0;\n  return;\n  *a_ref = a;\n  *b_ref = b;\n  *sign_ref = sign;\n}\n\n",
            "calle": [
                "zset",
                "zseti"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a_ref",
                        "type": "z_t * const",
                        "definition": [
                            "z_t * const a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b_ref",
                        "type": "z_t * const",
                        "definition": [
                            "z_t * const b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sign_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const sign_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "z_t",
                        "definition": [
                            "z_t c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cmpmag",
                        "type": "int",
                        "definition": [
                            "int cmpmag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a = *a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b = *b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sign",
                        "type": "int",
                        "definition": [
                            "int sign = *sign_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_zdivmod_4",
            "header": "",
            "params": [
                "size_t bit"
            ],
            "definition": "void helper_zdivmod_4(size_t bit)\n{\n  size_t i;\n  for (i = 0; i < 32; i += 1)\n    zrsh(libzahl_tmp_divmod_ds[i], libzahl_tmp_divmod_d, i);\n\n  for (;;)\n  {\n    for (i = 0; i < 32; i += 1)\n    {\n      if (zcmpmag(libzahl_tmp_divmod_ds[i], libzahl_tmp_divmod_b) <= 0)\n      {\n        zsub(libzahl_tmp_divmod_b, libzahl_tmp_divmod_b, libzahl_tmp_divmod_ds[i]);\n        zbset(libzahl_tmp_divmod_a, libzahl_tmp_divmod_a, bit, 1);\n      }\n      if ((!(bit--)) || zzero(libzahl_tmp_divmod_b))\n      {\n        goto done;\n      }\n    }\n\n    for (i = ((bit < (32 - 1)) ? (bit) : (32 - 1)) + 1; i--;)\n      zrsh(libzahl_tmp_divmod_ds[i], libzahl_tmp_divmod_ds[i], 32);\n\n  }\n\n}\n\n",
            "calle": [
                "zbset",
                "zcmpmag",
                "zrsh",
                "zsub",
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bit",
                        "type": "size_t",
                        "definition": [
                            "size_t bit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_divmod_ds",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_divmod_d",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_divmod_b",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_divmod_a",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zerror",
            "header": "enum zerror zerror(const char **)",
            "params": [
                "const char **desc"
            ],
            "definition": "enum zerror zerror(const char **desc)\n{\n  if (libzahl_error >= 0)\n  {\n    if (desc)\n    {\n      *desc = strerror(libzahl_error);\n    }\n    errno = libzahl_error;\n    return ZERROR_ERRNO_SET;\n  }\n  else\n  {\n    if (desc)\n    {\n      abort();\n    }\n    return -libzahl_error;\n  }\n}\n\n",
            "calle": [
                "abort",
                "strerror"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "desc",
                        "type": "const char **",
                        "definition": [
                            "const char **desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_error",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zfree",
            "header": "void zfree(z_t)",
            "params": [
                "z_t a"
            ],
            "definition": "void zfree(z_t a)\n{\n  size_t i = 0;\n  size_t x;\n  size_t j;\n  zahl_char_t **new;\n  unsigned int new_idx = 0;\n  if (!a->chars)\n  {\n    return;\n  }\n  for (x = a->alloced; x; x >>= 1)\n    i += 1;\n\n  j = libzahl_pool_n[i]++;\n  if (j == libzahl_pool_alloc[i])\n  {\n    x = (j) ? ((j * 3) >> 1) : (128);\n    new_idx = realloc(libzahl_pool[i], x * (sizeof(zahl_char_t *)));\n    if (!(&new[new_idx]))\n    {\n      free(a->chars);\n      free(libzahl_pool[i]);\n      libzahl_pool_n[i] = 0;\n      libzahl_pool[i] = 0;\n      libzahl_pool_alloc[i] = 0;\n      return;\n    }\n    libzahl_pool[i] = &new[new_idx];\n    libzahl_pool_alloc[i] = x;\n  }\n  libzahl_pool[i][j] = a->chars;\n}\n\n",
            "calle": [
                "free",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "size_t",
                        "definition": [
                            "size_t x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new",
                        "type": "zahl_char_t **",
                        "definition": [
                            "zahl_char_t **new"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int new_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_pool_n",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_pool_alloc",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_pool",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zgcd",
            "header": "void zgcd(z_t, z_t, z_t)",
            "params": [
                "z_t a",
                "z_t b",
                "z_t c"
            ],
            "definition": "void zgcd(z_t a, z_t b, z_t c)\n{\n  size_t shifts = 0;\n  size_t i = 0;\n  size_t min;\n  zahl_char_t uv;\n  zahl_char_t bit;\n  int neg;\n  if (!zcmp(b, c))\n  {\n    do\n    {\n      if (a != b)\n      {\n        zset(a, b);\n      }\n    }\n    while (0);\n    return;\n  }\n  if (zzero(b))\n  {\n    do\n    {\n      if (a != c)\n      {\n        zset(a, c);\n      }\n    }\n    while (0);\n    return;\n  }\n  if (zzero(c))\n  {\n    do\n    {\n      if (a != b)\n      {\n        zset(a, b);\n      }\n    }\n    while (0);\n    return;\n  }\n  zabs(libzahl_tmp_gcd_u, b);\n  zabs(libzahl_tmp_gcd_v, c);\n  neg = (zsignum(b) < 0) && (zsignum(c) < 0);\n  min = (libzahl_tmp_gcd_u->used < libzahl_tmp_gcd_v->used) ? (libzahl_tmp_gcd_u->used) : (libzahl_tmp_gcd_v->used);\n  for (; i < min; i += 1)\n  {\n    uv = libzahl_tmp_gcd_u->chars[i] | libzahl_tmp_gcd_v->chars[i];\n    for (bit = 1; bit; bit <<= 1, shifts += 1)\n      if (uv & bit)\n    {\n      goto loop_done;\n    }\n\n  }\n\n  for (; i < libzahl_tmp_gcd_u->used; i += 1)\n    for (bit = 1; bit; bit <<= 1, shifts += 1)\n    if (libzahl_tmp_gcd_u->chars[i] & bit)\n  {\n    goto loop_done;\n  }\n\n\n  for (; i < libzahl_tmp_gcd_v->used; i += 1)\n    for (bit = 1; bit; bit <<= 1, shifts += 1)\n    if (libzahl_tmp_gcd_v->chars[i] & bit)\n  {\n    goto loop_done;\n  }\n\n\n  loop_done:\n  zrsh(libzahl_tmp_gcd_u, libzahl_tmp_gcd_u, shifts);\n\n  zrsh(libzahl_tmp_gcd_v, libzahl_tmp_gcd_v, shifts);\n  zrsh(libzahl_tmp_gcd_u, libzahl_tmp_gcd_u, zlsb(libzahl_tmp_gcd_u));\n  do\n  {\n    zrsh(libzahl_tmp_gcd_v, libzahl_tmp_gcd_v, zlsb(libzahl_tmp_gcd_v));\n    if (zcmpmag(libzahl_tmp_gcd_u, libzahl_tmp_gcd_v) > 0)\n    {\n      zswap(libzahl_tmp_gcd_u, libzahl_tmp_gcd_v);\n    }\n    zsub_unsigned(libzahl_tmp_gcd_v, libzahl_tmp_gcd_v, libzahl_tmp_gcd_u);\n  }\n  while (!zzero(libzahl_tmp_gcd_v));\n  zlsh(a, libzahl_tmp_gcd_u, shifts);\n  a->sign = (neg) ? (-1) : (1);\n}\n\n",
            "calle": [
                "zabs",
                "zcmp",
                "zcmpmag",
                "zlsb",
                "zlsh",
                "zrsh",
                "zset",
                "zsignum",
                "zsub_unsigned",
                "zswap",
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "z_t",
                        "definition": [
                            "z_t c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "shifts",
                        "type": "size_t",
                        "definition": [
                            "size_t shifts = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min",
                        "type": "size_t",
                        "definition": [
                            "size_t min"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uv",
                        "type": "zahl_char_t",
                        "definition": [
                            "zahl_char_t uv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bit",
                        "type": "zahl_char_t",
                        "definition": [
                            "zahl_char_t bit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "neg",
                        "type": "int",
                        "definition": [
                            "int neg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_gcd_u",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_gcd_v",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zload",
            "header": "size_t zload(z_t, const void *)",
            "params": [
                "z_t a",
                "const void *buffer"
            ],
            "definition": "size_t zload(z_t a, const void *buffer)\n{\n  const char *buf = buffer;\n  unsigned int buf_idx = 0;\n  a->sign = *((const int *) buf), buf_idx += sizeof(int);\n  a->used = *((const size_t *) buf), buf_idx += sizeof(size_t);\n  if (a->sign)\n  {\n    do\n    {\n      if (a->alloced < a->used)\n      {\n        libzahl_realloc(a, a->used);\n      }\n    }\n    while (0);\n    memcpy(a->chars, buf, a->used * (sizeof(zahl_char_t)));\n  }\n  return ((sizeof(int)) + (sizeof(size_t))) + ((zzero(a)) ? (0) : (a->used * (sizeof(zahl_char_t))));\n}\n\n",
            "calle": [
                "libzahl_realloc",
                "memcpy",
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "const void *",
                        "definition": [
                            "const void *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "const char *",
                        "definition": [
                            "const char *buf = buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int buf_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zlsb",
            "header": "size_t zlsb(z_t)",
            "params": [
                "z_t a"
            ],
            "definition": "size_t zlsb(z_t a)\n{\n  size_t i = 0;\n  zahl_char_t x;\n  if (zzero(a))\n  {\n    return SIZE_MAX;\n  }\n  for (;; i += 1)\n  {\n    x = a->chars[i];\n    if (x)\n    {\n      x = ~x;\n      for (i *= 32; x & 1; x >>= 1, i += 1)\n        ;\n\n      return i;\n    }\n  }\n\n}\n\n",
            "calle": [
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "zahl_char_t",
                        "definition": [
                            "zahl_char_t x"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zlsh",
            "header": "void zlsh(z_t, z_t, size_t)",
            "params": [
                "z_t a",
                "z_t b",
                "size_t bits"
            ],
            "definition": "void zlsh(z_t a, z_t b, size_t bits)\n{\n  size_t i;\n  size_t chars;\n  size_t cbits;\n  zahl_char_t carry[] = {0, 0};\n  if (zzero(b))\n  {\n    a->sign = 0;\n    return;\n  }\n  if (!bits)\n  {\n    do\n    {\n      if (a != b)\n      {\n        zset(a, b);\n      }\n    }\n    while (0);\n    return;\n  }\n  chars = bits >> 5;\n  bits = bits & (32 - 1);\n  cbits = 32 - bits;\n  do\n  {\n    if (a->alloced < (b->used + chars))\n    {\n      libzahl_realloc(a, b->used + chars);\n    }\n  }\n  while (0);\n  if (a == b)\n  {\n    memmove(a->chars + chars, b->chars, b->used * (sizeof(zahl_char_t)));\n  }\n  else\n    memcpy(a->chars + chars, b->chars, b->used * (sizeof(zahl_char_t)));\n  memset(a->chars, 0, chars * (sizeof(zahl_char_t)));\n  a->used = b->used + chars;\n  if (bits)\n  {\n    helper_zlsh_1(&a, &i, &chars, bits, cbits, carry);\n  }\n  a->sign = zsignum(b);\n}\n\n",
            "calle": [
                "helper_zlsh_1",
                "libzahl_realloc",
                "memcpy",
                "memmove",
                "memset",
                "zset",
                "zsignum",
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "size_t",
                        "definition": [
                            "size_t bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chars",
                        "type": "size_t",
                        "definition": [
                            "size_t chars"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cbits",
                        "type": "size_t",
                        "definition": [
                            "size_t cbits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "carry",
                        "type": "zahl_char_t []",
                        "definition": [
                            "zahl_char_t carry[] = {0, 0}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_zlsh_1",
            "header": "",
            "params": [
                "z_t * const a_ref",
                "size_t * const i_ref",
                "size_t * const chars_ref",
                "size_t bits",
                "size_t cbits",
                "zahl_char_t carry[]"
            ],
            "definition": "void helper_zlsh_1(z_t * const a_ref, size_t * const i_ref, size_t * const chars_ref, size_t bits, size_t cbits, zahl_char_t carry[])\n{\n  z_t a = *a_ref;\n  size_t i = *i_ref;\n  size_t chars = *chars_ref;\n  for (i = chars; i < a->used; i += 1)\n  {\n    carry[(~i) & 1] = a->chars[i] >> cbits;\n    a->chars[i] <<= bits;\n    a->chars[i] |= carry[i & 1];\n  }\n\n  if (carry[i & 1])\n  {\n    do\n    {\n      if (a->alloced < (a->used + 1))\n      {\n        libzahl_realloc(a, a->used + 1);\n      }\n    }\n    while (0);\n    a->chars[i] = carry[i & 1];\n    a->used += 1;\n  }\n  *a_ref = a;\n  *i_ref = i;\n  *chars_ref = chars;\n}\n\n",
            "calle": [
                "libzahl_realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a_ref",
                        "type": "z_t * const",
                        "definition": [
                            "z_t * const a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chars_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const chars_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "size_t",
                        "definition": [
                            "size_t bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cbits",
                        "type": "size_t",
                        "definition": [
                            "size_t cbits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "carry",
                        "type": "zahl_char_t []",
                        "definition": [
                            "zahl_char_t carry[]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a = *a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chars",
                        "type": "size_t",
                        "definition": [
                            "size_t chars = *chars_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zmod",
            "header": "void zmod(z_t, z_t, z_t)",
            "params": [
                "z_t a",
                "z_t b",
                "z_t c"
            ],
            "definition": "void zmod(z_t a, z_t b, z_t c)\n{\n  zdivmod(libzahl_tmp_mod, a, b, c);\n}\n\n",
            "calle": [
                "zdivmod"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "z_t",
                        "definition": [
                            "z_t c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_mod",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zmodmul",
            "header": "void zmodmul(z_t, z_t, z_t, z_t)",
            "params": [
                "z_t a",
                "z_t b",
                "z_t c",
                "z_t d"
            ],
            "definition": "void zmodmul(z_t a, z_t b, z_t c, z_t d)\n{\n  if (a == d)\n  {\n    zset(libzahl_tmp_modmul, d);\n    zmul(a, b, c);\n    zmod(a, a, libzahl_tmp_modmul);\n  }\n  else\n  {\n    zmul(a, b, c);\n    zmod(a, a, d);\n  }\n}\n\n",
            "calle": [
                "zmod",
                "zmul",
                "zset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "z_t",
                        "definition": [
                            "z_t c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "z_t",
                        "definition": [
                            "z_t d"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_modmul",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zmodpow",
            "header": "void zmodpow(z_t, z_t, z_t, z_t)",
            "params": [
                "z_t a",
                "z_t b",
                "z_t c",
                "z_t d"
            ],
            "definition": "void zmodpow(z_t a, z_t b, z_t c, z_t d)\n{\n  size_t i;\n  size_t j;\n  size_t n;\n  size_t bits;\n  zahl_char_t x;\n  if (zsignum(c) <= 0)\n  {\n    helper_zmodpow_1(&a, b, c, d);\n  }\n  else\n    if (zzero(d))\n  {\n    libzahl_error = EDOM, longjmp(libzahl_jmp_buf, 1);\n  }\n  else\n    if (zzero(b))\n  {\n    a->sign = 0;\n    return;\n  }\n  bits = zbits(c);\n  n = bits >> 5;\n  zmod(libzahl_tmp_pow_b, b, d);\n  zset(libzahl_tmp_pow_c, c);\n  zset(libzahl_tmp_pow_d, d);\n  zsetu(a, 1);\n  for (i = 0; i < n; i += 1)\n  {\n    x = libzahl_tmp_pow_c->chars[i];\n    for (j = 32; j--; x >>= 1)\n    {\n      if (x & 1)\n      {\n        zmodmul(a, a, libzahl_tmp_pow_b, libzahl_tmp_pow_d);\n      }\n      zmodsqr(libzahl_tmp_pow_b, libzahl_tmp_pow_b, libzahl_tmp_pow_d);\n    }\n\n  }\n\n  x = libzahl_tmp_pow_c->chars[i];\n  for (; x; x >>= 1)\n  {\n    if (x & 1)\n    {\n      zmodmul(a, a, libzahl_tmp_pow_b, libzahl_tmp_pow_d);\n    }\n    zmodsqr(libzahl_tmp_pow_b, libzahl_tmp_pow_b, libzahl_tmp_pow_d);\n  }\n\n}\n\n",
            "calle": [
                "helper_zmodpow_1",
                "longjmp",
                "zbits",
                "zmod",
                "zmodmul",
                "zmodsqr",
                "zset",
                "zsetu",
                "zsignum",
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "z_t",
                        "definition": [
                            "z_t c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "z_t",
                        "definition": [
                            "z_t d"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "size_t",
                        "definition": [
                            "size_t n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "size_t",
                        "definition": [
                            "size_t bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "zahl_char_t",
                        "definition": [
                            "zahl_char_t x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_error",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_jmp_buf",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_pow_b",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_pow_c",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_pow_d",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_zmodpow_1",
            "header": "",
            "params": [
                "z_t * const a_ref",
                "z_t b",
                "z_t c",
                "z_t d"
            ],
            "definition": "void helper_zmodpow_1(z_t * const a_ref, z_t b, z_t c, z_t d)\n{\n  z_t a = *a_ref;\n  if (zzero(c))\n  {\n    if (zzero(b))\n    {\n      libzahl_error = EDOM, longjmp(libzahl_jmp_buf, 1);\n    }\n    else\n      if (zzero(d))\n    {\n      libzahl_error = EDOM, longjmp(libzahl_jmp_buf, 1);\n    }\n    zsetu(a, 1);\n  }\n  else\n    if (zzero(b) || zzero(d))\n  {\n    libzahl_error = EDOM, longjmp(libzahl_jmp_buf, 1);\n  }\n  else\n  {\n    a->sign = 0;\n  }\n  return;\n  *a_ref = a;\n}\n\n",
            "calle": [
                "longjmp",
                "zsetu",
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a_ref",
                        "type": "z_t * const",
                        "definition": [
                            "z_t * const a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "z_t",
                        "definition": [
                            "z_t c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "z_t",
                        "definition": [
                            "z_t d"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a = *a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_error",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_jmp_buf",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zmodpowu",
            "header": "void zmodpowu(z_t, z_t, unsigned long long int, z_t)",
            "params": [
                "z_t a",
                "z_t b",
                "unsigned long long int c",
                "z_t d"
            ],
            "definition": "void zmodpowu(z_t a, z_t b, unsigned long long int c, z_t d)\n{\n  if (!c)\n  {\n    if (zzero(b))\n    {\n      libzahl_error = EDOM, longjmp(libzahl_jmp_buf, 1);\n    }\n    else\n      if (zzero(d))\n    {\n      libzahl_error = EDOM, longjmp(libzahl_jmp_buf, 1);\n    }\n    else\n      zsetu(a, 1);\n    return;\n  }\n  else\n    if (zzero(d))\n  {\n    libzahl_error = EDOM, longjmp(libzahl_jmp_buf, 1);\n  }\n  else\n    if (zzero(b))\n  {\n    a->sign = 0;\n    return;\n  }\n  zmod(libzahl_tmp_pow_b, b, d);\n  zset(libzahl_tmp_pow_d, d);\n  zsetu(a, 1);\n  for (; c; c >>= 1)\n  {\n    if (c & 1)\n    {\n      zmodmul(a, a, libzahl_tmp_pow_b, libzahl_tmp_pow_d);\n    }\n    zmodsqr(libzahl_tmp_pow_b, libzahl_tmp_pow_b, libzahl_tmp_pow_d);\n  }\n\n}\n\n",
            "calle": [
                "longjmp",
                "zmod",
                "zmodmul",
                "zmodsqr",
                "zset",
                "zsetu",
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "unsigned long long int",
                        "definition": [
                            "unsigned long long int c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "z_t",
                        "definition": [
                            "z_t d"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_error",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_jmp_buf",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_pow_b",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_pow_d",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zmodsqr",
            "header": "void zmodsqr(z_t, z_t, z_t)",
            "params": [
                "z_t a",
                "z_t b",
                "z_t c"
            ],
            "definition": "void zmodsqr(z_t a, z_t b, z_t c)\n{\n  if (a == c)\n  {\n    zset(libzahl_tmp_modsqr, c);\n    zsqr(a, b);\n    zmod(a, a, libzahl_tmp_modsqr);\n  }\n  else\n  {\n    zsqr(a, b);\n    zmod(a, a, c);\n  }\n}\n\n",
            "calle": [
                "zmod",
                "zset",
                "zsqr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "z_t",
                        "definition": [
                            "z_t c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_modsqr",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zmul",
            "header": "void zmul(z_t, z_t, z_t)",
            "params": [
                "z_t a",
                "z_t b",
                "z_t c"
            ],
            "definition": "void zmul(z_t a, z_t b, z_t c)\n{\n  size_t m;\n  size_t m2;\n  z_t z0;\n  z_t z1;\n  z_t z2;\n  z_t b_high;\n  z_t b_low;\n  z_t c_high;\n  z_t c_low;\n  int b_sign;\n  int c_sign;\n  b_sign = zsignum(b);\n  c_sign = zsignum(c);\n  if ((!b_sign) || (!c_sign))\n  {\n    a->sign = 0;\n    return;\n  }\n  m = zbits(b);\n  m2 = (b == c) ? (m) : (zbits(c));\n  if ((m + m2) <= 32)\n  {\n    helper_zmul_1(&a, b, c, b_sign, c_sign);\n  }\n  b->sign = 1;\n  c->sign = 1;\n  m = (m > m2) ? (m) : (m2);\n  m2 = m >> 1;\n  zinit(z0);\n  zinit(z1);\n  zinit(z2);\n  zinit(b_high);\n  zinit(b_low);\n  zinit(c_high);\n  zinit(c_low);\n  zsplit(b_high, b_low, b, m2);\n  zsplit(c_high, c_low, c, m2);\n  zmul(z0, b_low, c_low);\n  zmul(z2, b_high, c_high);\n  zadd(b_low, b_low, b_high);\n  zadd(c_low, c_low, c_high);\n  zmul(z1, b_low, c_low);\n  zsub(z1, z1, z0);\n  zsub(z1, z1, z2);\n  zlsh(z1, z1, m2);\n  m2 <<= 1;\n  zlsh(z2, z2, m2);\n  zadd(a, z2, z1);\n  zadd(a, a, z0);\n  zfree(z0);\n  zfree(z1);\n  zfree(z2);\n  zfree(b_high);\n  zfree(b_low);\n  zfree(c_high);\n  zfree(c_low);\n  b->sign = b_sign;\n  c->sign = c_sign;\n  a->sign = b_sign * c_sign;\n}\n\n",
            "calle": [
                "helper_zmul_1",
                "zadd",
                "zbits",
                "zfree",
                "zinit",
                "zlsh",
                "zmul",
                "zsignum",
                "zsplit",
                "zsub"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "z_t",
                        "definition": [
                            "z_t c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m",
                        "type": "size_t",
                        "definition": [
                            "size_t m"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m2",
                        "type": "size_t",
                        "definition": [
                            "size_t m2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z0",
                        "type": "z_t",
                        "definition": [
                            "z_t z0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z1",
                        "type": "z_t",
                        "definition": [
                            "z_t z1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z2",
                        "type": "z_t",
                        "definition": [
                            "z_t z2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b_high",
                        "type": "z_t",
                        "definition": [
                            "z_t b_high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b_low",
                        "type": "z_t",
                        "definition": [
                            "z_t b_low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_high",
                        "type": "z_t",
                        "definition": [
                            "z_t c_high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_low",
                        "type": "z_t",
                        "definition": [
                            "z_t c_low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b_sign",
                        "type": "int",
                        "definition": [
                            "int b_sign"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_sign",
                        "type": "int",
                        "definition": [
                            "int c_sign"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_zmul_1",
            "header": "",
            "params": [
                "z_t * const a_ref",
                "z_t b",
                "z_t c",
                "int b_sign",
                "int c_sign"
            ],
            "definition": "void helper_zmul_1(z_t * const a_ref, z_t b, z_t c, int b_sign, int c_sign)\n{\n  z_t a = *a_ref;\n  do\n  {\n    if (a->alloced < 1)\n    {\n      libzahl_realloc(a, 1);\n    }\n  }\n  while (0);\n  a->used = 1;\n  a->chars[0] = b->chars[0] * c->chars[0];\n  a->sign = b_sign * c_sign;\n  return;\n  *a_ref = a;\n}\n\n",
            "calle": [
                "libzahl_realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a_ref",
                        "type": "z_t * const",
                        "definition": [
                            "z_t * const a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "z_t",
                        "definition": [
                            "z_t c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b_sign",
                        "type": "int",
                        "definition": [
                            "int b_sign"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_sign",
                        "type": "int",
                        "definition": [
                            "int c_sign"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a = *a_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zneg",
            "header": "void zneg(z_t, z_t)",
            "params": [
                "z_t a",
                "z_t b"
            ],
            "definition": "void zneg(z_t a, z_t b)\n{\n  do\n  {\n    if (a != b)\n    {\n      zset(a, b);\n    }\n  }\n  while (0);\n  a->sign = -zsignum(a);\n}\n\n",
            "calle": [
                "zset",
                "zsignum"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "znot",
            "header": "void znot(z_t, z_t)",
            "params": [
                "z_t a",
                "z_t b"
            ],
            "definition": "void znot(z_t a, z_t b)\n{\n  size_t bits;\n  size_t n;\n  if (zzero(b))\n  {\n    a->sign = 0;\n    return;\n  }\n  bits = zbits(b);\n  do\n  {\n    if (a != b)\n    {\n      zset(a, b);\n    }\n  }\n  while (0);\n  a->sign = -zsignum(a);\n  for (n = a->used; n--;)\n    a->chars[n] = ~a->chars[n];\n\n  bits = bits & (32 - 1);\n  if (bits)\n  {\n    a->chars[a->used - 1] &= (((zahl_char_t) 1) << bits) - 1;\n  }\n  while (a->used && (!a->chars[a->used - 1]))\n    a->used--;\n\n  if (!a->used)\n  {\n    a->sign = 0;\n  }\n}\n\n",
            "calle": [
                "zbits",
                "zset",
                "zsignum",
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "size_t",
                        "definition": [
                            "size_t bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "size_t",
                        "definition": [
                            "size_t n"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zor",
            "header": "void zor(z_t, z_t, z_t)",
            "params": [
                "z_t a",
                "z_t b",
                "z_t c"
            ],
            "definition": "void zor(z_t a, z_t b, z_t c)\n{\n  size_t n;\n  size_t m;\n  if (zzero(b))\n  {\n    if (zzero(c))\n    {\n      a->sign = 0;\n    }\n    else\n      do\n    {\n      if (a != c)\n      {\n        zset(a, c);\n      }\n    }\n    while (0);\n    return;\n  }\n  else\n    if (zzero(c))\n  {\n    do\n    {\n      if (a != b)\n      {\n        zset(a, b);\n      }\n    }\n    while (0);\n    return;\n  }\n  m = (b->used > c->used) ? (b->used) : (c->used);\n  n = (b->used + c->used) - m;\n  do\n  {\n    if (a->alloced < m)\n    {\n      libzahl_realloc(a, m);\n    }\n  }\n  while (0);\n  if (a == b)\n  {\n    if (b->used < c->used)\n    {\n      memcpy(a->chars + n, c->chars + n, (m - n) * (sizeof(zahl_char_t)));\n    }\n    while (n--)\n      a->chars[n] |= c->chars[n];\n\n  }\n  else\n    if (a == c)\n  {\n    if (c->used < b->used)\n    {\n      memcpy(a->chars + n, b->chars + n, (m - n) * (sizeof(zahl_char_t)));\n    }\n    while (n--)\n      a->chars[n] |= b->chars[n];\n\n  }\n  else\n    if (m == b->used)\n  {\n    memcpy(a->chars, b->chars, m * (sizeof(zahl_char_t)));\n    while (n--)\n      a->chars[n] |= c->chars[n];\n\n  }\n  else\n  {\n    memcpy(a->chars, c->chars, m * (sizeof(zahl_char_t)));\n    while (n--)\n      a->chars[n] |= b->chars[n];\n\n  }\n  a->used = m;\n  a->sign = (((zsignum(b) > 0) && (zsignum(c) > 0)) * 2) - 1;\n}\n\n",
            "calle": [
                "libzahl_realloc",
                "memcpy",
                "zset",
                "zsignum",
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "z_t",
                        "definition": [
                            "z_t c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "size_t",
                        "definition": [
                            "size_t n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m",
                        "type": "size_t",
                        "definition": [
                            "size_t m"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zperror",
            "header": "void zperror(const char *)",
            "params": [
                "const char *prefix"
            ],
            "definition": "void zperror(const char *prefix)\n{\n  if (libzahl_error >= 0)\n  {\n    errno = libzahl_error;\n    perror(prefix);\n  }\n  else\n  {\n    abort();\n  }\n}\n\n",
            "calle": [
                "abort",
                "perror"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "prefix",
                        "type": "const char *",
                        "definition": [
                            "const char *prefix"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_error",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zpow",
            "header": "void zpow(z_t, z_t, z_t)",
            "params": [
                "z_t a",
                "z_t b",
                "z_t c"
            ],
            "definition": "void zpow(z_t a, z_t b, z_t c)\n{\n  size_t i;\n  size_t j;\n  size_t n;\n  size_t bits;\n  zahl_char_t x;\n  if (zsignum(c) <= 0)\n  {\n    helper_zpow_1(&a, b, c);\n  }\n  else\n    if (zzero(b))\n  {\n    a->sign = 0;\n    return;\n  }\n  bits = zbits(c);\n  n = bits >> 5;\n  zset(libzahl_tmp_pow_b, b);\n  zset(libzahl_tmp_pow_c, c);\n  zsetu(a, 1);\n  for (i = 0; i < n; i += 1)\n  {\n    x = libzahl_tmp_pow_c->chars[i];\n    for (j = 32; j--; x >>= 1)\n    {\n      if (x & 1)\n      {\n        zmul(a, a, libzahl_tmp_pow_b);\n      }\n      zsqr(libzahl_tmp_pow_b, libzahl_tmp_pow_b);\n    }\n\n  }\n\n  x = libzahl_tmp_pow_c->chars[i];\n  for (; x; x >>= 1)\n  {\n    if (x & 1)\n    {\n      zmul(a, a, libzahl_tmp_pow_b);\n    }\n    zsqr(libzahl_tmp_pow_b, libzahl_tmp_pow_b);\n  }\n\n}\n\n",
            "calle": [
                "helper_zpow_1",
                "zbits",
                "zmul",
                "zset",
                "zsetu",
                "zsignum",
                "zsqr",
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "z_t",
                        "definition": [
                            "z_t c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "size_t",
                        "definition": [
                            "size_t n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "size_t",
                        "definition": [
                            "size_t bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "zahl_char_t",
                        "definition": [
                            "zahl_char_t x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_pow_b",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_pow_c",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_zpow_1",
            "header": "",
            "params": [
                "z_t * const a_ref",
                "z_t b",
                "z_t c"
            ],
            "definition": "void helper_zpow_1(z_t * const a_ref, z_t b, z_t c)\n{\n  z_t a = *a_ref;\n  if (zzero(c))\n  {\n    if (zzero(b))\n    {\n      libzahl_error = EDOM, longjmp(libzahl_jmp_buf, 1);\n    }\n    zsetu(a, 1);\n  }\n  else\n    if (zzero(b))\n  {\n    libzahl_error = EDOM, longjmp(libzahl_jmp_buf, 1);\n  }\n  else\n  {\n    a->sign = 0;\n  }\n  return;\n  *a_ref = a;\n}\n\n",
            "calle": [
                "longjmp",
                "zsetu",
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a_ref",
                        "type": "z_t * const",
                        "definition": [
                            "z_t * const a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "z_t",
                        "definition": [
                            "z_t c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a = *a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_error",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_jmp_buf",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zpowu",
            "header": "void zpowu(z_t, z_t, unsigned long long int)",
            "params": [
                "z_t a",
                "z_t b",
                "unsigned long long int c"
            ],
            "definition": "void zpowu(z_t a, z_t b, unsigned long long int c)\n{\n  if (!c)\n  {\n    if (zzero(b))\n    {\n      libzahl_error = EDOM, longjmp(libzahl_jmp_buf, 1);\n    }\n    zsetu(a, 1);\n    return;\n  }\n  else\n    if (zzero(b))\n  {\n    a->sign = 0;\n    return;\n  }\n  zset(libzahl_tmp_pow_b, b);\n  zsetu(a, 1);\n  for (; c; c >>= 1)\n  {\n    if (c & 1)\n    {\n      zmul(a, a, libzahl_tmp_pow_b);\n    }\n    zsqr(libzahl_tmp_pow_b, libzahl_tmp_pow_b);\n  }\n\n}\n\n",
            "calle": [
                "longjmp",
                "zmul",
                "zset",
                "zsetu",
                "zsqr",
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "unsigned long long int",
                        "definition": [
                            "unsigned long long int c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_error",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_jmp_buf",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_pow_b",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zptest",
            "header": "enum zprimality zptest(z_t, z_t, int)",
            "params": [
                "z_t witness",
                "z_t n",
                "int t"
            ],
            "definition": "enum zprimality zptest(z_t witness, z_t n, int t)\n{\n  size_t i;\n  size_t r;\n  if (zcmpu(n, 3) <= 0)\n  {\n    helper_zptest_1(witness, n);\n  }\n  if (zeven(n))\n  {\n    if (witness)\n    {\n      do\n      {\n        if (witness != n)\n        {\n          zset(witness, n);\n        }\n      }\n      while (0);\n    }\n    return NONPRIME;\n  }\n  zsub_unsigned(libzahl_tmp_ptest_n1, n, libzahl_const_1);\n  zsub_unsigned(libzahl_tmp_ptest_n4, n, libzahl_const_4);\n  r = zlsb(libzahl_tmp_ptest_n1);\n  zrsh(libzahl_tmp_ptest_d, libzahl_tmp_ptest_n1, r);\n  while (t--)\n  {\n    helper_zptest_2(&i, witness, n, r);\n  }\n\n  return PROBABLY_PRIME;\n}\n\n",
            "calle": [
                "helper_zptest_1",
                "helper_zptest_2",
                "zcmpu",
                "zeven",
                "zlsb",
                "zrsh",
                "zset",
                "zsub_unsigned"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "witness",
                        "type": "z_t",
                        "definition": [
                            "z_t witness"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "z_t",
                        "definition": [
                            "z_t n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "int",
                        "definition": [
                            "int t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "size_t",
                        "definition": [
                            "size_t r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_ptest_n1",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_const_1",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_ptest_n4",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_const_4",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_ptest_d",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_zptest_1",
            "header": "",
            "params": [
                "z_t witness",
                "z_t n"
            ],
            "definition": "enum zprimality helper_zptest_1(z_t witness, z_t n)\n{\n  if (zcmpu(n, 1) <= 0)\n  {\n    if (witness)\n    {\n      do\n      {\n        if (witness != n)\n        {\n          zset(witness, n);\n        }\n      }\n      while (0);\n    }\n    return NONPRIME;\n  }\n  else\n  {\n    return PRIME;\n  }\n}\n\n",
            "calle": [
                "zcmpu",
                "zset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "witness",
                        "type": "z_t",
                        "definition": [
                            "z_t witness"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "z_t",
                        "definition": [
                            "z_t n"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_zptest_2",
            "header": "",
            "params": [
                "size_t * const i_ref",
                "z_t witness",
                "z_t n",
                "size_t r"
            ],
            "definition": "enum zprimality helper_zptest_2(size_t * const i_ref, z_t witness, z_t n, size_t r)\n{\n  size_t i = *i_ref;\n  zrand(libzahl_tmp_ptest_a, FAST_RANDOM, UNIFORM, libzahl_tmp_ptest_n4);\n  zadd_unsigned(libzahl_tmp_ptest_a, libzahl_tmp_ptest_a, libzahl_const_2);\n  zmodpow(libzahl_tmp_ptest_x, libzahl_tmp_ptest_a, libzahl_tmp_ptest_d, n);\n  if ((!zcmp(libzahl_tmp_ptest_x, libzahl_const_1)) || (!zcmp(libzahl_tmp_ptest_x, libzahl_tmp_ptest_n1)))\n  {\n    continue;\n  }\n  for (i = 1; i < r; i += 1)\n  {\n    zsqr(libzahl_tmp_ptest_x, libzahl_tmp_ptest_x);\n    zmod(libzahl_tmp_ptest_x, libzahl_tmp_ptest_x, n);\n    if (!zcmp(libzahl_tmp_ptest_x, libzahl_const_1))\n    {\n      if (witness)\n      {\n        zswap(witness, libzahl_tmp_ptest_a);\n      }\n      return NONPRIME;\n    }\n    if (!zcmp(libzahl_tmp_ptest_x, libzahl_tmp_ptest_n1))\n    {\n      break;\n    }\n  }\n\n  if (i == r)\n  {\n    if (witness)\n    {\n      zswap(witness, libzahl_tmp_ptest_a);\n    }\n    return NONPRIME;\n  }\n  *i_ref = i;\n}\n\n",
            "calle": [
                "zadd_unsigned",
                "zcmp",
                "zmod",
                "zmodpow",
                "zrand",
                "zsqr",
                "zswap"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "witness",
                        "type": "z_t",
                        "definition": [
                            "z_t witness"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "z_t",
                        "definition": [
                            "z_t n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "size_t",
                        "definition": [
                            "size_t r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_ptest_a",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_ptest_n4",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_const_2",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_ptest_x",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_ptest_d",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_const_1",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_ptest_n1",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zrand",
            "header": "void zrand(z_t, enum zranddev, enum zranddist, z_t)",
            "params": [
                "z_t r",
                "enum zranddev dev",
                "enum zranddist dist",
                "z_t n"
            ],
            "definition": "void zrand(z_t r, enum zranddev dev, enum zranddist dist, z_t n)\n{\n  const char *pathname = 0;\n  unsigned int pathname_idx = 0;\n  size_t bits;\n  int fd;\n  switch (dev)\n  {\n    case FAST_RANDOM:\n    {\n      pathname_idx = \"/dev/urandom\";\n      break;\n    }\n\n    case SECURE_RANDOM:\n    {\n      pathname_idx = \"/dev/random\";\n      break;\n    }\n\n    default:\n    {\n      abort();\n    }\n\n  }\n\n  if (zzero(n))\n  {\n    r->sign = 0;\n    return;\n  }\n  fd = open(pathname, O_RDONLY);\n  if (fd < 0)\n  {\n    libzahl_error = errno, longjmp(libzahl_jmp_buf, 1);\n  }\n  switch (dist)\n  {\n    case QUASIUNIFORM:\n    {\n      helper_zrand_1(&bits, r, n, fd);\n    }\n\n    case UNIFORM:\n    {\n      if (zsignum(n) < 0)\n      {\n        libzahl_error = EDOM, longjmp(libzahl_jmp_buf, 1);\n      }\n      bits = zbits(n);\n      do\n        zrand_get_random_bits(r, bits, fd);\n      while (zcmpmag(r, n) > 0);\n      break;\n    }\n\n    default:\n    {\n      abort();\n    }\n\n  }\n\n  close(fd);\n}\n\n",
            "calle": [
                "abort",
                "close",
                "helper_zrand_1",
                "longjmp",
                "open",
                "zbits",
                "zcmpmag",
                "zrand_get_random_bits",
                "zsignum",
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "r",
                        "type": "z_t",
                        "definition": [
                            "z_t r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dev",
                        "type": "enum zranddev",
                        "definition": [
                            "enum zranddev dev"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "enum zranddist",
                        "definition": [
                            "enum zranddist dist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "z_t",
                        "definition": [
                            "z_t n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pathname",
                        "type": "const char *",
                        "definition": [
                            "const char *pathname = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pathname_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pathname_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "size_t",
                        "definition": [
                            "size_t bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fd",
                        "type": "int",
                        "definition": [
                            "int fd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_error",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_jmp_buf",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zrand_get_random_bits",
            "header": "",
            "params": [
                "z_t r",
                "size_t bits",
                "int fd"
            ],
            "definition": "static void zrand_get_random_bits(z_t r, size_t bits, int fd)\n{\n  size_t read_total = 0;\n  size_t n;\n  size_t chars = (bits + (32 - 1)) >> 5;\n  ssize_t read_just;\n  zahl_char_t mask = 1;\n  char *buf;\n  unsigned int buf_idx = 0;\n  do\n  {\n    if (r->alloced < chars)\n    {\n      libzahl_realloc(r, chars);\n    }\n  }\n  while (0);\n  buf_idx = (char *) r->chars;\n  for (n = chars * (sizeof(zahl_char_t)); n;)\n  {\n    read_just = read(fd, (&buf[buf_idx]) + read_total, n);\n    if (read_just < 0)\n    {\n      libzahl_error = errno, longjmp(libzahl_jmp_buf, 1);\n    }\n    read_total += (size_t) read_just;\n    n -= (size_t) read_just;\n  }\n\n  bits = bits & (32 - 1);\n  mask <<= bits;\n  mask -= 1;\n  r->chars[chars - 1] &= mask;\n  for (n = chars; n--;)\n  {\n    if (r->chars[n])\n    {\n      r->used = n + 1;\n      r->sign = 1;\n      return;\n    }\n  }\n\n  r->sign = 0;\n}\n\n",
            "calle": [
                "libzahl_realloc",
                "longjmp",
                "read"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "r",
                        "type": "z_t",
                        "definition": [
                            "z_t r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "size_t",
                        "definition": [
                            "size_t bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fd",
                        "type": "int",
                        "definition": [
                            "int fd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "read_total",
                        "type": "size_t",
                        "definition": [
                            "size_t read_total = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "size_t",
                        "definition": [
                            "size_t n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chars",
                        "type": "size_t",
                        "definition": [
                            "size_t chars = (bits + (32 - 1)) >> 5"
                        ]
                    },
                    {
                        "path": null,
                        "name": "read_just",
                        "type": "ssize_t",
                        "definition": [
                            "ssize_t read_just"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask",
                        "type": "zahl_char_t",
                        "definition": [
                            "zahl_char_t mask = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char *",
                        "definition": [
                            "char *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int buf_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_error",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_jmp_buf",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_zrand_1",
            "header": "",
            "params": [
                "size_t * const bits_ref",
                "z_t r",
                "z_t n",
                "int fd"
            ],
            "definition": "void helper_zrand_1(size_t * const bits_ref, z_t r, z_t n, int fd)\n{\n  size_t bits = *bits_ref;\n  if (zsignum(n) < 0)\n  {\n    libzahl_error = EDOM, longjmp(libzahl_jmp_buf, 1);\n  }\n  bits = zbits(n);\n  zrand_get_random_bits(r, bits, fd);\n  zadd(r, r, libzahl_const_1);\n  zmul(r, r, n);\n  zrsh(r, r, bits);\n  break;\n  *bits_ref = bits;\n}\n\n",
            "calle": [
                "longjmp",
                "zadd",
                "zbits",
                "zmul",
                "zrand_get_random_bits",
                "zrsh",
                "zsignum"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "z_t",
                        "definition": [
                            "z_t r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "z_t",
                        "definition": [
                            "z_t n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fd",
                        "type": "int",
                        "definition": [
                            "int fd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "size_t",
                        "definition": [
                            "size_t bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_error",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_jmp_buf",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_const_1",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zrsh",
            "header": "void zrsh(z_t, z_t, size_t)",
            "params": [
                "z_t a",
                "z_t b",
                "size_t bits"
            ],
            "definition": "void zrsh(z_t a, z_t b, size_t bits)\n{\n  size_t i;\n  size_t chars;\n  size_t cbits;\n  if (!bits)\n  {\n    do\n    {\n      if (a != b)\n      {\n        zset(a, b);\n      }\n    }\n    while (0);\n    return;\n  }\n  chars = bits >> 5;\n  if ((zzero(b) || (chars >= b->used)) || (zbits(b) <= bits))\n  {\n    a->sign = 0;\n    return;\n  }\n  bits = bits & (32 - 1);\n  cbits = 32 - bits;\n  if (chars && (a == b))\n  {\n    a->used -= chars;\n    memmove(a->chars, a->chars + chars, a->used * (sizeof(zahl_char_t)));\n  }\n  else\n    if (a != b)\n  {\n    a->used = b->used - chars;\n    do\n    {\n      if (a->alloced < a->used)\n      {\n        libzahl_realloc(a, a->used);\n      }\n    }\n    while (0);\n    memcpy(a->chars, b->chars + chars, a->used * (sizeof(zahl_char_t)));\n  }\n  if (bits)\n  {\n    a->chars[0] >>= bits;\n    for (i = 1; i < a->used; i += 1)\n    {\n      a->chars[i - 1] |= a->chars[i] << cbits;\n      a->chars[i] >>= bits;\n    }\n\n    while (!a->chars[a->used - 1])\n      a->used--;\n\n  }\n  a->sign = zsignum(b);\n}\n\n",
            "calle": [
                "libzahl_realloc",
                "memcpy",
                "memmove",
                "zbits",
                "zset",
                "zsignum",
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "size_t",
                        "definition": [
                            "size_t bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chars",
                        "type": "size_t",
                        "definition": [
                            "size_t chars"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cbits",
                        "type": "size_t",
                        "definition": [
                            "size_t cbits"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zsave",
            "header": "size_t zsave(z_t, void *)",
            "params": [
                "z_t a",
                "void *buffer"
            ],
            "definition": "size_t zsave(z_t a, void *buffer)\n{\n  if (buffer)\n  {\n    char *buf = buffer;\n    unsigned int buf_idx = 0;\n    *((int *) buf) = a->sign, buf_idx += sizeof(int);\n    *((size_t *) buf) = a->used, buf_idx += sizeof(size_t);\n    if (!zzero(a))\n    {\n      memcpy(buf, a->chars, a->used * (sizeof(zahl_char_t)));\n    }\n  }\n  return ((sizeof(int)) + (sizeof(size_t))) + ((zzero(a)) ? (0) : (a->used * (sizeof(zahl_char_t))));\n}\n\n",
            "calle": [
                "memcpy",
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "void *",
                        "definition": [
                            "void *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char *",
                        "definition": [
                            "char *buf = buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int buf_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zset",
            "header": "void zset(z_t, z_t)",
            "params": [
                "z_t a",
                "z_t b"
            ],
            "definition": "void zset(z_t a, z_t b)\n{\n  if (zzero(b))\n  {\n    a->sign = 0;\n  }\n  else\n  {\n    do\n    {\n      if (a->alloced < b->used)\n      {\n        libzahl_realloc(a, b->used);\n      }\n    }\n    while (0);\n    a->sign = b->sign;\n    a->used = b->used;\n    memcpy(a->chars, b->chars, b->used * (sizeof(zahl_char_t)));\n  }\n}\n\n",
            "calle": [
                "libzahl_realloc",
                "memcpy",
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zseti",
            "header": "void zseti(z_t, long long int)",
            "params": [
                "z_t a",
                "long long int b"
            ],
            "definition": "void zseti(z_t a, long long int b)\n{\n  if (b >= 0)\n  {\n    zsetu(a, (unsigned long long int) b);\n  }\n  else\n  {\n    zsetu(a, (unsigned long long int) (-b));\n    a->sign = -1;\n  }\n}\n\n",
            "calle": [
                "zsetu"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "long long int",
                        "definition": [
                            "long long int b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zsets",
            "header": "int zsets(z_t, const char *)",
            "params": [
                "z_t a",
                "const char *str"
            ],
            "definition": "int zsets(z_t a, const char *str)\n{\n  unsigned int str_idx = 0;\n  unsigned long long int temp = 0;\n  int neg = str[str_idx] == '-';\n  const char *str_end;\n  unsigned int str_end_idx = 0;\n  str_idx += neg || ((*str_idx) == '+');\n  if (!(*(&str[str_idx])))\n  {\n    errno = EINVAL;\n    return -1;\n  }\n  for (str_end_idx = &str[str_idx]; str_end[str_end_idx]; str_end_idx += 1)\n  {\n    if (!isdigit(*(&str_end[str_end_idx])))\n    {\n      errno = EINVAL;\n      return -1;\n    }\n  }\n\n  a->sign = 0;\n  zset(libzahl_tmp_str_num, libzahl_const_1e19);\n  switch (((&str_end[str_end_idx]) - (&str[str_idx])) % 19)\n  {\n    while (str[str_idx])\n    {\n      zmul(a, a, libzahl_const_1e19);\n      temp = 0;\n      case 0:\n        temp *= 10, temp += str[str_idx] & 15;\n        str_idx += 1;\n\n      case 18:\n        temp *= 10, temp += str[str_idx] & 15;\n        str_idx += 1;\n\n      case 17:\n        temp *= 10, temp += str[str_idx] & 15;\n        str_idx += 1;\n\n      case 16:\n        temp *= 10, temp += str[str_idx] & 15;\n        str_idx += 1;\n\n      case 15:\n        temp *= 10, temp += str[str_idx] & 15;\n        str_idx += 1;\n\n      case 14:\n        temp *= 10, temp += str[str_idx] & 15;\n        str_idx += 1;\n\n      case 13:\n        temp *= 10, temp += str[str_idx] & 15;\n        str_idx += 1;\n\n      case 12:\n        temp *= 10, temp += str[str_idx] & 15;\n        str_idx += 1;\n\n      case 11:\n        temp *= 10, temp += str[str_idx] & 15;\n        str_idx += 1;\n\n      case 10:\n        temp *= 10, temp += str[str_idx] & 15;\n        str_idx += 1;\n\n      case 9:\n        temp *= 10, temp += str[str_idx] & 15;\n        str_idx += 1;\n\n      case 8:\n        temp *= 10, temp += str[str_idx] & 15;\n        str_idx += 1;\n\n      case 7:\n        temp *= 10, temp += str[str_idx] & 15;\n        str_idx += 1;\n\n      case 6:\n        temp *= 10, temp += str[str_idx] & 15;\n        str_idx += 1;\n\n      case 5:\n        temp *= 10, temp += str[str_idx] & 15;\n        str_idx += 1;\n\n      case 4:\n        temp *= 10, temp += str[str_idx] & 15;\n        str_idx += 1;\n\n      case 3:\n        temp *= 10, temp += str[str_idx] & 15;\n        str_idx += 1;\n\n      case 2:\n        temp *= 10, temp += str[str_idx] & 15;\n        str_idx += 1;\n\n      case 1:\n        temp *= 10, temp += str[str_idx] & 15;\n        str_idx += 1;\n\n      if (!temp)\n      {\n        continue;\n      }\n      libzahl_tmp_str_num->chars[0] = (zahl_char_t) temp;\n      temp >>= 32;\n      libzahl_tmp_str_num->chars[1] = (zahl_char_t) temp;\n      libzahl_tmp_str_num->used = 1 + (!(!temp));\n      zadd(a, a, libzahl_tmp_str_num);\n    }\n\n  }\n\n  if (neg)\n  {\n    a->sign = -zsignum(a);\n  }\n  return 0;\n}\n\n",
            "calle": [
                "isdigit",
                "zadd",
                "zmul",
                "zset",
                "zsignum"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char *",
                        "definition": [
                            "const char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "temp",
                        "type": "unsigned long long int",
                        "definition": [
                            "unsigned long long int temp = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "neg",
                        "type": "int",
                        "definition": [
                            "int neg = str[str_idx] == '-'"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_end",
                        "type": "const char *",
                        "definition": [
                            "const char *str_end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_end_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_end_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_str_num",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_const_1e19",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zsetu",
            "header": "void zsetu(z_t, unsigned long long int)",
            "params": [
                "z_t a",
                "unsigned long long int b"
            ],
            "definition": "void zsetu(z_t a, unsigned long long int b)\n{\n  if (!b)\n  {\n    a->sign = 0;\n    return;\n  }\n  do\n  {\n    if (a->alloced < ((((sizeof(b)) + (sizeof(*a->chars))) - 1) / (sizeof(*a->chars))))\n    {\n      libzahl_realloc(a, (((sizeof(b)) + (sizeof(*a->chars))) - 1) / (sizeof(*a->chars)));\n    }\n  }\n  while (0);\n  a->sign = 1;\n  a->used = 0;\n  while (b)\n  {\n    a->chars[a->used++] = (zahl_char_t) b;\n    b >>= 32;\n  }\n\n}\n\n",
            "calle": [
                "libzahl_realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "unsigned long long int",
                        "definition": [
                            "unsigned long long int b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zsetup",
            "header": "void zsetup(jmp_buf)",
            "params": [
                "jmp_buf env"
            ],
            "definition": "void zsetup(jmp_buf env)\n{\n  size_t i;\n  *libzahl_jmp_buf = *env;\n  if (!libzahl_set_up)\n  {\n    helper_zsetup_1(&i);\n  }\n}\n\n",
            "calle": [
                "helper_zsetup_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "env",
                        "type": "jmp_buf",
                        "definition": [
                            "jmp_buf env"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_jmp_buf",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_set_up",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_zsetup_1",
            "header": "",
            "params": [
                "size_t * const i_ref"
            ],
            "definition": "void helper_zsetup_1(size_t * const i_ref)\n{\n  size_t i = *i_ref;\n  libzahl_set_up = 1;\n  memset(libzahl_pool, 0, sizeof(libzahl_pool));\n  memset(libzahl_pool_n, 0, sizeof(libzahl_pool_n));\n  memset(libzahl_pool_alloc, 0, sizeof(libzahl_pool_alloc));\n  zinit(libzahl_tmp_cmp);\n  zinit(libzahl_tmp_str_num);\n  zinit(libzahl_tmp_str_mag);\n  zinit(libzahl_tmp_str_div);\n  zinit(libzahl_tmp_str_rem);\n  zinit(libzahl_tmp_gcd_u);\n  zinit(libzahl_tmp_gcd_v);\n  zinit(libzahl_tmp_sub);\n  zinit(libzahl_tmp_modmul);\n  zinit(libzahl_tmp_div);\n  zinit(libzahl_tmp_mod);\n  zinit(libzahl_tmp_pow_b);\n  zinit(libzahl_tmp_pow_c);\n  zinit(libzahl_tmp_pow_d);\n  zinit(libzahl_tmp_modsqr);\n  zinit(libzahl_tmp_divmod_a);\n  zinit(libzahl_tmp_divmod_b);\n  zinit(libzahl_tmp_divmod_d);\n  zinit(libzahl_tmp_ptest_x);\n  zinit(libzahl_tmp_ptest_a);\n  zinit(libzahl_tmp_ptest_d);\n  zinit(libzahl_tmp_ptest_n1);\n  zinit(libzahl_tmp_ptest_n4);\n  ;\n  zinit(libzahl_const_1e19), zsetu(libzahl_const_1e19, 10000000000000000000ULL);\n  zinit(libzahl_const_1e9), zsetu(libzahl_const_1e9, 1000000000ULL);\n  zinit(libzahl_const_1), zsetu(libzahl_const_1, 1);\n  zinit(libzahl_const_2), zsetu(libzahl_const_2, 2);\n  zinit(libzahl_const_4), zsetu(libzahl_const_4, 4);\n  ;\n  for (i = 32; i--;)\n    zinit(libzahl_tmp_divmod_ds[i]);\n\n  *i_ref = i;\n}\n\n",
            "calle": [
                "memset",
                "zinit",
                "zsetu"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_set_up",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_pool",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_pool_n",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_pool_alloc",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_cmp",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_str_num",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_str_mag",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_str_div",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_str_rem",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_gcd_u",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_gcd_v",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_sub",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_modmul",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_div",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_mod",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_pow_b",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_pow_c",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_pow_d",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_modsqr",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_divmod_a",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_divmod_b",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_divmod_d",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_ptest_x",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_ptest_a",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_ptest_d",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_ptest_n1",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_ptest_n4",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_const_1e19",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_const_1e9",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_const_1",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_const_2",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_const_4",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_divmod_ds",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zsplit",
            "header": "void zsplit(z_t, z_t, z_t, size_t)",
            "params": [
                "z_t high",
                "z_t low",
                "z_t a",
                "size_t delim"
            ],
            "definition": "void zsplit(z_t high, z_t low, z_t a, size_t delim)\n{\n  if (zzero(a))\n  {\n    high->sign = 0;\n    low->sign = 0;\n    return;\n  }\n  if (high == a)\n  {\n    ztrunc(low, a, delim);\n    zrsh(high, a, delim);\n  }\n  else\n  {\n    zrsh(high, a, delim);\n    ztrunc(low, a, delim);\n  }\n}\n\n",
            "calle": [
                "zrsh",
                "ztrunc",
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "high",
                        "type": "z_t",
                        "definition": [
                            "z_t high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "z_t",
                        "definition": [
                            "z_t low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "delim",
                        "type": "size_t",
                        "definition": [
                            "size_t delim"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zsqr",
            "header": "void zsqr(z_t, z_t)",
            "params": [
                "z_t a",
                "z_t b"
            ],
            "definition": "void zsqr(z_t a, z_t b)\n{\n  size_t m2;\n  z_t z0;\n  z_t z1;\n  z_t z2;\n  z_t high;\n  z_t low;\n  int sign;\n  if (zzero(b))\n  {\n    a->sign = 0;\n    return;\n  }\n  m2 = zbits(b);\n  if (m2 <= (32 / 2))\n  {\n    helper_zsqr_1(&a, b);\n  }\n  sign = zsignum(b);\n  b->sign = 1;\n  m2 >>= 1;\n  zinit(z0);\n  zinit(z1);\n  zinit(z2);\n  zinit(high);\n  zinit(low);\n  zsplit(high, low, b, m2);\n  zsqr(z0, low);\n  zsqr(z2, high);\n  zmul(z1, low, high);\n  zlsh(z1, z1, m2 + 1);\n  m2 <<= 1;\n  zlsh(z2, z2, m2);\n  zadd(a, z2, z1);\n  zadd(a, a, z0);\n  zfree(z0);\n  zfree(z1);\n  zfree(z2);\n  zfree(high);\n  zfree(low);\n  b->sign = sign;\n  a->sign = 1;\n}\n\n",
            "calle": [
                "helper_zsqr_1",
                "zadd",
                "zbits",
                "zfree",
                "zinit",
                "zlsh",
                "zmul",
                "zsignum",
                "zsplit",
                "zsqr",
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m2",
                        "type": "size_t",
                        "definition": [
                            "size_t m2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z0",
                        "type": "z_t",
                        "definition": [
                            "z_t z0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z1",
                        "type": "z_t",
                        "definition": [
                            "z_t z1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z2",
                        "type": "z_t",
                        "definition": [
                            "z_t z2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "z_t",
                        "definition": [
                            "z_t high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "z_t",
                        "definition": [
                            "z_t low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sign",
                        "type": "int",
                        "definition": [
                            "int sign"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_zsqr_1",
            "header": "",
            "params": [
                "z_t * const a_ref",
                "z_t b"
            ],
            "definition": "void helper_zsqr_1(z_t * const a_ref, z_t b)\n{\n  z_t a = *a_ref;\n  do\n  {\n    if (a->alloced < 1)\n    {\n      libzahl_realloc(a, 1);\n    }\n  }\n  while (0);\n  a->used = 1;\n  a->chars[0] = b->chars[0] * b->chars[0];\n  a->sign = 1;\n  return;\n  *a_ref = a;\n}\n\n",
            "calle": [
                "libzahl_realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a_ref",
                        "type": "z_t * const",
                        "definition": [
                            "z_t * const a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a = *a_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zstr",
            "header": "char *zstr(z_t, char *)",
            "params": [
                "z_t a",
                "char *b"
            ],
            "definition": "char *zstr(z_t a, char *b)\n{\n  unsigned int b_idx = 0;\n  char buf[9 + 1];\n  size_t n;\n  size_t len;\n  char overridden = 0;\n  int neg;\n  if (zzero(a))\n  {\n    helper_zstr_1(&b_idx, b);\n  }\n  n = zstr_length(a, 10);\n  if (!(&b[b_idx]))\n  {\n    b_idx = malloc(n + 1);\n    if (!(&b[b_idx]))\n    {\n      libzahl_error = errno, longjmp(libzahl_jmp_buf, 1);\n    }\n  }\n  neg = zsignum(a) < 0;\n  zabs(libzahl_tmp_str_num, a);\n  b[0 + b_idx] = '-';\n  b_idx += neg;\n  n -= neg;\n  n = (n > 9) ? (n - 9) : (0);\n  for (;;)\n  {\n    helper_zstr_2(&b_idx, &n, &len, &overridden, b, buf);\n  }\n\n  return (&b[b_idx]) - neg;\n}\n\n",
            "calle": [
                "helper_zstr_1",
                "helper_zstr_2",
                "longjmp",
                "malloc",
                "zabs",
                "zsignum",
                "zstr_length",
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "char *",
                        "definition": [
                            "char *b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int b_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char [9 + 1]",
                        "definition": [
                            "char buf[9 + 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "size_t",
                        "definition": [
                            "size_t n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "overridden",
                        "type": "char",
                        "definition": [
                            "char overridden = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "neg",
                        "type": "int",
                        "definition": [
                            "int neg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_error",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_jmp_buf",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_str_num",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_zstr_1",
            "header": "",
            "params": [
                "unsigned int * const b_idx_ref",
                "char * const b"
            ],
            "definition": "char *helper_zstr_1(unsigned int * const b_idx_ref, char * const b)\n{\n  unsigned int b_idx = *b_idx_ref;\n  if (!(&b[b_idx]))\n  {\n    b_idx = malloc(2);\n    if (!(&b[b_idx]))\n    {\n      libzahl_error = errno, longjmp(libzahl_jmp_buf, 1);\n    }\n  }\n  b[0 + b_idx] = '0';\n  b[1 + b_idx] = 0;\n  return b;\n  *b_idx_ref = b_idx;\n}\n\n",
            "calle": [
                "longjmp",
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "b_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const b_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "char * const",
                        "definition": [
                            "char * const b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int b_idx = *b_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_error",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_jmp_buf",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_zstr_2",
            "header": "",
            "params": [
                "unsigned int * const b_idx_ref",
                "size_t * const n_ref",
                "size_t * const len_ref",
                "char * const overridden_ref",
                "char * const b",
                "char buf[9 + 1]"
            ],
            "definition": "void helper_zstr_2(unsigned int * const b_idx_ref, size_t * const n_ref, size_t * const len_ref, char * const overridden_ref, char * const b, char buf[9 + 1])\n{\n  unsigned int b_idx = *b_idx_ref;\n  size_t n = *n_ref;\n  size_t len = *len_ref;\n  char overridden = *overridden_ref;\n  zdivmod(libzahl_tmp_str_num, libzahl_tmp_str_rem, libzahl_tmp_str_num, libzahl_const_1e9);\n  if (!zzero(libzahl_tmp_str_num))\n  {\n    sprintf((&b[b_idx]) + n, \"%09lu\", (zzero(libzahl_tmp_str_rem)) ? (0UL) : ((unsigned long) libzahl_tmp_str_rem->chars[0]));\n    b[(n + 9) + b_idx] = overridden;\n    overridden = b[n + b_idx];\n    n = (n > 9) ? (n - 9) : (0);\n  }\n  else\n  {\n    len = (size_t) sprintf(buf, \"%lu\", (unsigned long) libzahl_tmp_str_rem->chars[0]);\n    if (overridden)\n    {\n      buf[len] = b[(n + len) + b_idx];\n    }\n    memcpy((&b[b_idx]) + n, buf, len + 1);\n    break;\n  }\n  *b_idx_ref = b_idx;\n  *n_ref = n;\n  *len_ref = len;\n  *overridden_ref = overridden;\n}\n\n",
            "calle": [
                "memcpy",
                "sprintf",
                "zdivmod",
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "b_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const b_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "overridden_ref",
                        "type": "char * const",
                        "definition": [
                            "char * const overridden_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "char * const",
                        "definition": [
                            "char * const b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char [9 + 1]",
                        "definition": [
                            "char buf[9 + 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int b_idx = *b_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "size_t",
                        "definition": [
                            "size_t n = *n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "overridden",
                        "type": "char",
                        "definition": [
                            "char overridden = *overridden_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_str_num",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_str_rem",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_const_1e9",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zstr_length",
            "header": "size_t zstr_length(z_t, unsigned long long int)",
            "params": [
                "z_t a",
                "unsigned long long int radix"
            ],
            "definition": "size_t zstr_length(z_t a, unsigned long long int radix)\n{\n  size_t size_total = 1;\n  size_t size_temp;\n  zset(libzahl_tmp_str_num, a);\n  while (!zzero(libzahl_tmp_str_num))\n  {\n    zsetu(libzahl_tmp_str_mag, radix);\n    zset(libzahl_tmp_str_div, libzahl_tmp_str_mag);\n    size_temp = 1;\n    while (zcmpmag(libzahl_tmp_str_mag, libzahl_tmp_str_num) <= 0)\n    {\n      zset(libzahl_tmp_str_div, libzahl_tmp_str_mag);\n      zsqr(libzahl_tmp_str_mag, libzahl_tmp_str_mag);\n      size_temp <<= 1;\n    }\n\n    size_temp >>= 1;\n    size_total += size_temp;\n    zdiv(libzahl_tmp_str_num, libzahl_tmp_str_num, libzahl_tmp_str_div);\n  }\n\n  return size_total + (zsignum(a) < 0);\n}\n\n",
            "calle": [
                "zcmpmag",
                "zdiv",
                "zset",
                "zsetu",
                "zsignum",
                "zsqr",
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "radix",
                        "type": "unsigned long long int",
                        "definition": [
                            "unsigned long long int radix"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size_total",
                        "type": "size_t",
                        "definition": [
                            "size_t size_total = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size_temp",
                        "type": "size_t",
                        "definition": [
                            "size_t size_temp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_str_num",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_str_mag",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_str_div",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zsub",
            "header": "void zsub(z_t, z_t, z_t)",
            "params": [
                "z_t a",
                "z_t b",
                "z_t c"
            ],
            "definition": "void zsub(z_t a, z_t b, z_t c)\n{\n  if (b == c)\n  {\n    a->sign = 0;\n  }\n  else\n    if (zzero(b))\n  {\n    zneg(a, c);\n  }\n  else\n    if (zzero(c))\n  {\n    do\n    {\n      if (a != b)\n      {\n        zset(a, b);\n      }\n    }\n    while (0);\n  }\n  else\n    if ((zsignum(b) | zsignum(c)) < 0)\n  {\n    if (zsignum(b) < 0)\n    {\n      if (zsignum(c) < 0)\n      {\n        zsub_unsigned(a, c, b);\n      }\n      else\n      {\n        zadd_unsigned(a, b, c);\n        a->sign = -zsignum(a);\n      }\n    }\n    else\n    {\n      zadd_unsigned(a, b, c);\n    }\n  }\n  else\n  {\n    zsub_unsigned(a, b, c);\n  }\n}\n\n",
            "calle": [
                "zadd_unsigned",
                "zneg",
                "zset",
                "zsignum",
                "zsub_unsigned",
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "z_t",
                        "definition": [
                            "z_t c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zsub_unsigned",
            "header": "void zsub_unsigned(z_t, z_t, z_t)",
            "params": [
                "z_t a",
                "z_t b",
                "z_t c"
            ],
            "definition": "void zsub_unsigned(z_t a, z_t b, z_t c)\n{\n  zahl_char_t carry[] = {0, 0};\n  zahl_char_t *s;\n  unsigned int s_idx = 0;\n  size_t i;\n  size_t n;\n  int magcmp;\n  if (zzero(b))\n  {\n    zabs(a, c);\n    zneg(a, a);\n    return;\n  }\n  else\n    if (zzero(c))\n  {\n    zabs(a, b);\n    return;\n  }\n  magcmp = zcmpmag(b, c);\n  if (magcmp <= 0)\n  {\n    helper_zsub_unsigned_2(&a, &s_idx, &n, b, c, magcmp);\n  }\n  else\n  {\n    helper_zsub_unsigned_1(&s_idx, &n, a, b, c);\n  }\n  for (i = 0; i < n; i += 1)\n  {\n    carry[(~i) & 1] = (carry[i & 1]) ? (a->chars[i] <= s[i + s_idx]) : (a->chars[i] < s[i + s_idx]);\n    a->chars[i] -= s[i + s_idx];\n    a->chars[i] -= carry[i & 1];\n  }\n\n  if (carry[i & 1])\n  {\n    while (!a->chars[i])\n      a->chars[i] = UINT32_MAX;\n\n    i += 1;\n    a->chars[i] -= 1;\n  }\n  a->sign = magcmp;\n}\n\n",
            "calle": [
                "helper_zsub_unsigned_1",
                "helper_zsub_unsigned_2",
                "zabs",
                "zcmpmag",
                "zneg",
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "z_t",
                        "definition": [
                            "z_t c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "carry",
                        "type": "zahl_char_t []",
                        "definition": [
                            "zahl_char_t carry[] = {0, 0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "zahl_char_t *",
                        "definition": [
                            "zahl_char_t *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int s_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "size_t",
                        "definition": [
                            "size_t n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "magcmp",
                        "type": "int",
                        "definition": [
                            "int magcmp"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_zsub_unsigned_1",
            "header": "",
            "params": [
                "unsigned int * const s_idx_ref",
                "size_t * const n_ref",
                "z_t a",
                "z_t b",
                "z_t c"
            ],
            "definition": "void helper_zsub_unsigned_1(unsigned int * const s_idx_ref, size_t * const n_ref, z_t a, z_t b, z_t c)\n{\n  unsigned int s_idx = *s_idx_ref;\n  size_t n = *n_ref;\n  n = (b->used < c->used) ? (b->used) : (c->used);\n  if (a == c)\n  {\n    zset(libzahl_tmp_sub, c);\n    s_idx = libzahl_tmp_sub->chars;\n  }\n  else\n  {\n    s_idx = c->chars;\n  }\n  do\n  {\n    if (a != b)\n    {\n      zset(a, b);\n    }\n  }\n  while (0);\n  *s_idx_ref = s_idx;\n  *n_ref = n;\n}\n\n",
            "calle": [
                "zset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const s_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "z_t",
                        "definition": [
                            "z_t c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int s_idx = *s_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "size_t",
                        "definition": [
                            "size_t n = *n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_sub",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_zsub_unsigned_2",
            "header": "",
            "params": [
                "z_t * const a_ref",
                "unsigned int * const s_idx_ref",
                "size_t * const n_ref",
                "z_t b",
                "z_t c",
                "int magcmp"
            ],
            "definition": "void helper_zsub_unsigned_2(z_t * const a_ref, unsigned int * const s_idx_ref, size_t * const n_ref, z_t b, z_t c, int magcmp)\n{\n  z_t a = *a_ref;\n  unsigned int s_idx = *s_idx_ref;\n  size_t n = *n_ref;\n  if (magcmp == 0)\n  {\n    a->sign = 0;\n    return;\n  }\n  n = (b->used < c->used) ? (b->used) : (c->used);\n  if (a == b)\n  {\n    zset(libzahl_tmp_sub, b);\n    s_idx = libzahl_tmp_sub->chars;\n  }\n  else\n  {\n    s_idx = b->chars;\n  }\n  do\n  {\n    if (a != c)\n    {\n      zset(a, c);\n    }\n  }\n  while (0);\n  *a_ref = a;\n  *s_idx_ref = s_idx;\n  *n_ref = n;\n}\n\n",
            "calle": [
                "zset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a_ref",
                        "type": "z_t * const",
                        "definition": [
                            "z_t * const a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const s_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "z_t",
                        "definition": [
                            "z_t c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "magcmp",
                        "type": "int",
                        "definition": [
                            "int magcmp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a = *a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int s_idx = *s_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "size_t",
                        "definition": [
                            "size_t n = *n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_sub",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zswap",
            "header": "void zswap(z_t, z_t)",
            "params": [
                "z_t a",
                "z_t b"
            ],
            "definition": "void zswap(z_t a, z_t b)\n{\n  z_t t;\n  *t = *a;\n  *a = *b;\n  *b = *t;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "z_t",
                        "definition": [
                            "z_t t"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ztrunc",
            "header": "void ztrunc(z_t, z_t, size_t)",
            "params": [
                "z_t a",
                "z_t b",
                "size_t bits"
            ],
            "definition": "void ztrunc(z_t a, z_t b, size_t bits)\n{\n  zahl_char_t mask = 1;\n  size_t chars;\n  size_t i;\n  if (zzero(b))\n  {\n    a->sign = 0;\n    return;\n  }\n  chars = (bits + (32 - 1)) >> 5;\n  a->sign = b->sign;\n  a->used = (chars < b->used) ? (chars) : (b->used);\n  if (a->used < chars)\n  {\n    bits = 0;\n  }\n  if (a != b)\n  {\n    do\n    {\n      if (a->alloced < a->used)\n      {\n        libzahl_realloc(a, a->used);\n      }\n    }\n    while (0);\n    memcpy(a->chars, b->chars, a->used * (sizeof(zahl_char_t)));\n  }\n  bits = bits & (32 - 1);\n  if (bits)\n  {\n    mask <<= bits;\n    mask -= 1;\n    a->chars[a->used - 1] &= mask;\n  }\n  for (i = a->used; i--;)\n    if (a->chars[i])\n  {\n    return;\n  }\n\n  a->sign = 0;\n}\n\n",
            "calle": [
                "libzahl_realloc",
                "memcpy",
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "size_t",
                        "definition": [
                            "size_t bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask",
                        "type": "zahl_char_t",
                        "definition": [
                            "zahl_char_t mask = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chars",
                        "type": "size_t",
                        "definition": [
                            "size_t chars"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zunsetup",
            "header": "void zunsetup(void)",
            "params": [
                "void"
            ],
            "definition": "void zunsetup(void)\n{\n  size_t i;\n  if (libzahl_set_up)\n  {\n    helper_zunsetup_1(&i);\n  }\n}\n\n",
            "calle": [
                "helper_zunsetup_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_set_up",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_zunsetup_1",
            "header": "",
            "params": [
                "size_t * const i_ref"
            ],
            "definition": "void helper_zunsetup_1(size_t * const i_ref)\n{\n  size_t i = *i_ref;\n  libzahl_set_up = 0;\n  free(libzahl_tmp_cmp->chars);\n  free(libzahl_tmp_str_num->chars);\n  free(libzahl_tmp_str_mag->chars);\n  free(libzahl_tmp_str_div->chars);\n  free(libzahl_tmp_str_rem->chars);\n  free(libzahl_tmp_gcd_u->chars);\n  free(libzahl_tmp_gcd_v->chars);\n  free(libzahl_tmp_sub->chars);\n  free(libzahl_tmp_modmul->chars);\n  free(libzahl_tmp_div->chars);\n  free(libzahl_tmp_mod->chars);\n  free(libzahl_tmp_pow_b->chars);\n  free(libzahl_tmp_pow_c->chars);\n  free(libzahl_tmp_pow_d->chars);\n  free(libzahl_tmp_modsqr->chars);\n  free(libzahl_tmp_divmod_a->chars);\n  free(libzahl_tmp_divmod_b->chars);\n  free(libzahl_tmp_divmod_d->chars);\n  free(libzahl_tmp_ptest_x->chars);\n  free(libzahl_tmp_ptest_a->chars);\n  free(libzahl_tmp_ptest_d->chars);\n  free(libzahl_tmp_ptest_n1->chars);\n  free(libzahl_tmp_ptest_n4->chars);\n  ;\n  free(libzahl_const_1e19->chars);\n  free(libzahl_const_1e9->chars);\n  free(libzahl_const_1->chars);\n  free(libzahl_const_2->chars);\n  free(libzahl_const_4->chars);\n  ;\n  for (i = 32; i--;)\n    free(libzahl_tmp_divmod_ds[i]->chars);\n\n  for (i = (sizeof(libzahl_pool)) / (sizeof(*libzahl_pool)); i--;)\n  {\n    while (libzahl_pool_n[i]--)\n      free(libzahl_pool[i][libzahl_pool_n[i]]);\n\n    free(libzahl_pool[i]);\n  }\n\n  *i_ref = i;\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_set_up",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_cmp",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_str_num",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_str_mag",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_str_div",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_str_rem",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_gcd_u",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_gcd_v",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_sub",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_modmul",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_div",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_mod",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_pow_b",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_pow_c",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_pow_d",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_modsqr",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_divmod_a",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_divmod_b",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_divmod_d",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_ptest_x",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_ptest_a",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_ptest_d",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_ptest_n1",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_ptest_n4",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_const_1e19",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_const_1e9",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_const_1",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_const_2",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_const_4",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_tmp_divmod_ds",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_pool",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_pool_n",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zxor",
            "header": "void zxor(z_t, z_t, z_t)",
            "params": [
                "z_t a",
                "z_t b",
                "z_t c"
            ],
            "definition": "void zxor(z_t a, z_t b, z_t c)\n{\n  size_t n;\n  size_t m;\n  if (zzero(b))\n  {\n    if (zzero(c))\n    {\n      a->sign = 0;\n    }\n    else\n      do\n    {\n      if (a != c)\n      {\n        zset(a, c);\n      }\n    }\n    while (0);\n    return;\n  }\n  else\n    if (zzero(c))\n  {\n    do\n    {\n      if (a != b)\n      {\n        zset(a, b);\n      }\n    }\n    while (0);\n    return;\n  }\n  m = (b->used > c->used) ? (b->used) : (c->used);\n  n = (b->used + c->used) - m;\n  do\n  {\n    if (a->alloced < m)\n    {\n      libzahl_realloc(a, m);\n    }\n  }\n  while (0);\n  if (a == b)\n  {\n    if (b->used < c->used)\n    {\n      memcpy(a->chars + n, c->chars + n, (m - n) * (sizeof(zahl_char_t)));\n    }\n    while (n--)\n      a->chars[n] ^= c->chars[n];\n\n  }\n  else\n    if (a == c)\n  {\n    if (c->used < b->used)\n    {\n      memcpy(a->chars + n, b->chars + n, (m - n) * (sizeof(zahl_char_t)));\n    }\n    while (n--)\n      a->chars[n] ^= b->chars[n];\n\n  }\n  else\n    if (m == b->used)\n  {\n    memcpy(a->chars, b->chars, m * (sizeof(zahl_char_t)));\n    while (n--)\n      a->chars[n] ^= c->chars[n];\n\n  }\n  else\n  {\n    memcpy(a->chars, c->chars, m * (sizeof(zahl_char_t)));\n    while (n--)\n      a->chars[n] ^= b->chars[n];\n\n  }\n  a->used = m;\n  while (a->used && (!a->chars[a->used - 1]))\n    a->used--;\n\n  if (a->used)\n  {\n    a->sign = 1 - (2 * ((zsignum(b) ^ zsignum(c)) < 0));\n  }\n  else\n    a->sign = 0;\n}\n\n",
            "calle": [
                "libzahl_realloc",
                "memcpy",
                "zset",
                "zsignum",
                "zzero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_t",
                        "definition": [
                            "z_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "z_t",
                        "definition": [
                            "z_t c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "size_t",
                        "definition": [
                            "size_t n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m",
                        "type": "size_t",
                        "definition": [
                            "size_t m"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "libzahl_realloc",
            "header": "void libzahl_realloc(z_t a, size_t need)",
            "params": [
                "z_t a",
                "size_t need"
            ],
            "definition": "void libzahl_realloc(z_t a, size_t need)\n{\n  size_t i;\n  size_t x;\n  zahl_char_t *new;\n  unsigned int new_idx = 0;\n  if ((need & ((~need) + 1)) != need)\n  {\n    need |= need >> 1;\n    need |= need >> 2;\n    need |= need >> 4;\n    for (i = sizeof(need), x = 8; i; i >>= 1, x <<= 1)\n      need |= need >> x;\n\n    need += 1;\n  }\n  for (i = 0, x = need; x; x >>= 1)\n    i += 1;\n\n  if (libzahl_pool_n[i])\n  {\n    libzahl_pool_n[i] -= 1;\n    new_idx = libzahl_pool[i][libzahl_pool_n[i]];\n    memcpy(new, a->chars, a->alloced * (sizeof(zahl_char_t)));\n    zfree(a);\n    a->chars = &new[new_idx];\n  }\n  else\n  {\n    a->chars = realloc(a->chars, need * (sizeof(zahl_char_t)));\n    if (!a->chars)\n    {\n      if (!errno)\n      {\n        errno = ENOMEM;\n      }\n      libzahl_error = errno, longjmp(libzahl_jmp_buf, 1);\n    }\n  }\n  a->alloced = need;\n}\n\n",
            "calle": [
                "longjmp",
                "memcpy",
                "realloc",
                "zfree"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_t",
                        "definition": [
                            "z_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "need",
                        "type": "size_t",
                        "definition": [
                            "size_t need"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "size_t",
                        "definition": [
                            "size_t x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new",
                        "type": "zahl_char_t *",
                        "definition": [
                            "zahl_char_t *new"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int new_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "libzahl_pool_n",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_pool",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_error",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "libzahl_jmp_buf",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        }
    ],
    "typedefs": [
        "typedef uint32_t zahl_char_t",
        "typedef struct \n{\n  int sign;\n  size_t used;\n  size_t alloced;\n  zahl_char_t *chars;\n} z_t[1]"
    ]
}