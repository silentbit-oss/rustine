{
    "special_type": [
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct csv_parser\n{\n  int pstate;\n  int quoted;\n  size_t spaces;\n  unsigned char *entry_buf;\n  size_t entry_pos;\n  size_t entry_size;\n  int status;\n  unsigned char options;\n  unsigned char quote_char;\n  unsigned char delim_char;\n  int (*is_space)(unsigned char);\n  int (*is_term)(unsigned char);\n  size_t blk_size;\n  void *(*malloc_func)(size_t);\n  void *(*realloc_func)(void *, size_t);\n  void (*free_func)(void *);\n}",
            "name": "csv_parser",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pstate",
                        "type": "int",
                        "definition": [
                            "int pstate"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quoted",
                        "type": "int",
                        "definition": [
                            "int quoted"
                        ]
                    },
                    {
                        "path": null,
                        "name": "spaces",
                        "type": "size_t",
                        "definition": [
                            "size_t spaces"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_buf",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *entry_buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_pos",
                        "type": "size_t",
                        "definition": [
                            "size_t entry_pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_size",
                        "type": "size_t",
                        "definition": [
                            "size_t entry_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "status",
                        "type": "int",
                        "definition": [
                            "int status"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quote_char",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char quote_char"
                        ]
                    },
                    {
                        "path": null,
                        "name": "delim_char",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char delim_char"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_space",
                        "type": "int (*)(unsigned char)",
                        "definition": [
                            "int (*is_space)(unsigned char)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_term",
                        "type": "int (*)(unsigned char)",
                        "definition": [
                            "int (*is_term)(unsigned char)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blk_size",
                        "type": "size_t",
                        "definition": [
                            "size_t blk_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "malloc_func",
                        "type": "void *(*)(size_t)",
                        "definition": [
                            "void *(*malloc_func)(size_t)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "realloc_func",
                        "type": "void *(*)(void *, size_t)",
                        "definition": [
                            "void *(*realloc_func)(void *, size_t)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "free_func",
                        "type": "void (*)(void *)",
                        "definition": [
                            "void (*free_func)(void *)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct event\n{\n  int event_type;\n  int retval;\n  size_t size;\n  char *data;\n}",
            "name": "event",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "event_type",
                        "type": "int",
                        "definition": [
                            "int event_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval",
                        "type": "int",
                        "definition": [
                            "int retval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "char *",
                        "definition": [
                            "char *data"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        }
    ],
    "global_variable": [
        {
            "path": null,
            "name": "csv_errors",
            "type": "const char *[]",
            "definition": [
                "static const char *csv_errors[] = {\"success\", \"error parsing data while strict checking enabled\", \"memory exhausted while increasing buffer size\", \"data size too large\", \"invalid status code\"}"
            ]
        },
        {
            "path": null,
            "name": "struct event",
            "type": "struct event *",
            "definition": [
                "struct event *event_ptr"
            ]
        },
        {
            "path": null,
            "name": "event_idx",
            "type": "int",
            "definition": [
                "int event_idx"
            ]
        },
        {
            "path": null,
            "name": "row",
            "type": "size_t",
            "definition": [
                "size_t row"
            ]
        },
        {
            "path": null,
            "name": "col",
            "type": "size_t",
            "definition": [
                "size_t col"
            ]
        }
    ],
    "function": [
        {
            "path": null,
            "name": "csv_init",
            "header": "int csv_init(struct csv_parser *p, unsigned char options)",
            "params": [
                "struct csv_parser *p",
                "unsigned char options"
            ],
            "definition": "int csv_init(struct csv_parser *p, unsigned char options)\n{\n  if (p == 0)\n  {\n    return -1;\n  }\n  p->entry_buf = 0;\n  p->pstate = 0;\n  p->quoted = 0;\n  p->spaces = 0;\n  p->entry_pos = 0;\n  p->entry_size = 0;\n  p->status = 0;\n  p->options = options;\n  p->quote_char = 0x22;\n  p->delim_char = 0x2c;\n  p->is_space = 0;\n  p->is_term = 0;\n  p->blk_size = 128;\n  p->malloc_func = 0;\n  p->realloc_func = realloc;\n  p->free_func = free;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct csv_parser",
                        "type": "struct csv_parser *",
                        "definition": [
                            "struct csv_parser *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "csv_fini",
            "header": "int csv_fini(struct csv_parser *p, void (*cb1)(void *, size_t, void *), void (*cb2)(int, void *), void *data)",
            "params": [
                "struct csv_parser *p",
                "void (*cb1)(void *, size_t, void *)",
                "void (*cb2)(int c, void *)",
                "void *data"
            ],
            "definition": "int csv_fini(struct csv_parser *p, void (*cb1)(void *, size_t, void *), void (*cb2)(int c, void *), void *data)\n{\n  if (p == 0)\n  {\n    return -1;\n  }\n  int quoted = p->quoted;\n  int pstate = p->pstate;\n  size_t spaces = p->spaces;\n  size_t entry_pos = p->entry_pos;\n  if ((((pstate == 2) && p->quoted) && (p->options & 1)) && (p->options & 4))\n  {\n    p->status = 1;\n    return -1;\n  }\n  switch (pstate)\n  {\n    case 3:\n    {\n      p->entry_pos -= p->spaces + 1;\n      entry_pos = p->entry_pos;\n    }\n\n    case 1:\n\n    case 2:\n    {\n      helper_csv_fini_1(&pstate, &entry_pos, p, cb1, cb2, data, quoted, spaces);\n    }\n\n    case 0:\n    {\n      ;\n    }\n\n  }\n\n  p->spaces = (p->quoted = (p->entry_pos = (p->status = 0)));\n  p->pstate = 0;\n  return 0;\n}\n\n",
            "calle": [
                "helper_csv_fini_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct csv_parser",
                        "type": "struct csv_parser *",
                        "definition": [
                            "struct csv_parser *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb1",
                        "type": "void (*)(void *, size_t, void *)",
                        "definition": [
                            "void (*cb1)(void *, size_t, void *)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb2",
                        "type": "void (*)(int c, void *)",
                        "definition": [
                            "void (*cb2)(int c, void *)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "void *",
                        "definition": [
                            "void *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quoted",
                        "type": "int",
                        "definition": [
                            "int quoted = p->quoted"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pstate",
                        "type": "int",
                        "definition": [
                            "int pstate = p->pstate"
                        ]
                    },
                    {
                        "path": null,
                        "name": "spaces",
                        "type": "size_t",
                        "definition": [
                            "size_t spaces = p->spaces"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_pos",
                        "type": "size_t",
                        "definition": [
                            "size_t entry_pos = p->entry_pos"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "csv_free",
            "header": "void csv_free(struct csv_parser *p)",
            "params": [
                "struct csv_parser *p"
            ],
            "definition": "void csv_free(struct csv_parser *p)\n{\n  if (p == 0)\n  {\n    return;\n  }\n  if (p->entry_buf && p->free_func)\n  {\n    p->free_func(p->entry_buf);\n  }\n  p->entry_buf = 0;\n  p->entry_size = 0;\n  return;\n}\n\n",
            "calle": [
                "p->free_func"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct csv_parser",
                        "type": "struct csv_parser *",
                        "definition": [
                            "struct csv_parser *p"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "csv_error",
            "header": "int csv_error(const struct csv_parser *p)",
            "params": [
                "const struct csv_parser *p"
            ],
            "definition": "int csv_error(const struct csv_parser *p)\n{\n  assert(p && \"received null csv_parser\");\n  return p->status;\n}\n\n",
            "calle": [
                "assert"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct csv_parser",
                        "type": "const struct csv_parser *",
                        "definition": [
                            "const struct csv_parser *p"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "csv_strerror",
            "header": "const char *csv_strerror(int error)",
            "params": [
                "int status"
            ],
            "definition": "const char *csv_strerror(int status)\n{\n  if ((status >= 4) || (status < 0))\n  {\n    return csv_errors[4];\n  }\n  else\n    return csv_errors[status];\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "status",
                        "type": "int",
                        "definition": [
                            "int status"
                        ]
                    },
                    {
                        "path": null,
                        "name": "csv_errors",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "csv_parse",
            "header": "size_t csv_parse(struct csv_parser *p, const void *s, size_t len, void (*cb1)(void *, size_t, void *), void (*cb2)(int, void *), void *data)",
            "params": [
                "struct csv_parser *p",
                "const void *s",
                "size_t len",
                "void (*cb1)(void *, size_t, void *)",
                "void (*cb2)(int c, void *)",
                "void *data"
            ],
            "definition": "size_t csv_parse(struct csv_parser *p, const void *s, size_t len, void (*cb1)(void *, size_t, void *), void (*cb2)(int c, void *), void *data)\n{\n  assert(p && \"received null csv_parser\");\n  if (s == 0)\n  {\n    return 0;\n  }\n  const unsigned char *us = s;\n  unsigned char c;\n  size_t pos = 0;\n  unsigned char delim = p->delim_char;\n  unsigned char quote = p->quote_char;\n  int (*is_space)(unsigned char) = p->is_space;\n  int (*is_term)(unsigned char) = p->is_term;\n  int quoted = p->quoted;\n  int pstate = p->pstate;\n  size_t spaces = p->spaces;\n  size_t entry_pos = p->entry_pos;\n  if ((!p->entry_buf) && (pos < len))\n  {\n    if (csv_increase_buffer(p) != 0)\n    {\n      p->quoted = quoted, p->pstate = pstate, p->spaces = spaces, p->entry_pos = entry_pos;\n      return pos;\n    }\n  }\n  while (pos < len)\n  {\n    helper_csv_parse_1(&c, &c, &pos, &quoted, &pstate, &spaces, &entry_pos, p, cb1, cb2, data, us, delim, quote, is_space, is_term);\n  }\n\n  p->quoted = quoted, p->pstate = pstate, p->spaces = spaces, p->entry_pos = entry_pos;\n  return pos;\n}\n\n",
            "calle": [
                "assert",
                "csv_increase_buffer",
                "helper_csv_parse_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct csv_parser",
                        "type": "struct csv_parser *",
                        "definition": [
                            "struct csv_parser *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "const void *",
                        "definition": [
                            "const void *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb1",
                        "type": "void (*)(void *, size_t, void *)",
                        "definition": [
                            "void (*cb1)(void *, size_t, void *)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb2",
                        "type": "void (*)(int c, void *)",
                        "definition": [
                            "void (*cb2)(int c, void *)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "void *",
                        "definition": [
                            "void *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "us",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *us = s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "delim",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char delim = p->delim_char"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quote",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char quote = p->quote_char"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_space",
                        "type": "int (*)(unsigned char)",
                        "definition": [
                            "int (*is_space)(unsigned char) = p->is_space"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_term",
                        "type": "int (*)(unsigned char)",
                        "definition": [
                            "int (*is_term)(unsigned char) = p->is_term"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quoted",
                        "type": "int",
                        "definition": [
                            "int quoted = p->quoted"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pstate",
                        "type": "int",
                        "definition": [
                            "int pstate = p->pstate"
                        ]
                    },
                    {
                        "path": null,
                        "name": "spaces",
                        "type": "size_t",
                        "definition": [
                            "size_t spaces = p->spaces"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_pos",
                        "type": "size_t",
                        "definition": [
                            "size_t entry_pos = p->entry_pos"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "csv_write",
            "header": "size_t csv_write(void *dest, size_t dest_size, const void *src, size_t src_size)",
            "params": [
                "void *dest",
                "size_t dest_size",
                "const void *src",
                "size_t src_size"
            ],
            "definition": "size_t csv_write(void *dest, size_t dest_size, const void *src, size_t src_size)\n{\n  return csv_write2(dest, dest_size, src, src_size, 0x22);\n}\n\n",
            "calle": [
                "csv_write2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dest",
                        "type": "void *",
                        "definition": [
                            "void *dest"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_size",
                        "type": "size_t",
                        "definition": [
                            "size_t dest_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "const void *",
                        "definition": [
                            "const void *src"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_size",
                        "type": "size_t",
                        "definition": [
                            "size_t src_size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "csv_fwrite",
            "header": "int csv_fwrite(FILE *fp, const void *src, size_t src_size)",
            "params": [
                "FILE *fp",
                "const void *src",
                "size_t src_size"
            ],
            "definition": "int csv_fwrite(FILE *fp, const void *src, size_t src_size)\n{\n  return csv_fwrite2(fp, src, src_size, 0x22);\n}\n\n",
            "calle": [
                "csv_fwrite2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fp",
                        "type": "FILE *",
                        "definition": [
                            "FILE *fp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "const void *",
                        "definition": [
                            "const void *src"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_size",
                        "type": "size_t",
                        "definition": [
                            "size_t src_size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "csv_write2",
            "header": "size_t csv_write2(void *dest, size_t dest_size, const void *src, size_t src_size, unsigned char quote)",
            "params": [
                "void *dest",
                "size_t dest_size",
                "const void *src",
                "size_t src_size",
                "unsigned char quote"
            ],
            "definition": "size_t csv_write2(void *dest, size_t dest_size, const void *src, size_t src_size, unsigned char quote)\n{\n  unsigned char *cdest = dest;\n  unsigned int cdest_idx = 0;\n  const unsigned char *csrc = src;\n  unsigned int csrc_idx = 0;\n  size_t chars = 0;\n  if (src == 0)\n  {\n    return 0;\n  }\n  if (dest == 0)\n  {\n    dest_size = 0;\n  }\n  if (dest_size > 0)\n  {\n    cdest[cdest_idx] = quote;\n    cdest_idx += 1;\n  }\n  chars += 1;\n  while (src_size)\n  {\n    helper_csv_write2_1(&src_size, &cdest_idx, &csrc_idx, &chars, dest_size, quote, cdest, csrc);\n  }\n\n  if (dest_size > chars)\n  {\n    cdest[cdest_idx] = quote;\n  }\n  if (chars < SIZE_MAX)\n  {\n    chars += 1;\n  }\n  return chars;\n}\n\n",
            "calle": [
                "helper_csv_write2_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dest",
                        "type": "void *",
                        "definition": [
                            "void *dest"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_size",
                        "type": "size_t",
                        "definition": [
                            "size_t dest_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "const void *",
                        "definition": [
                            "const void *src"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_size",
                        "type": "size_t",
                        "definition": [
                            "size_t src_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quote",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char quote"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cdest",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *cdest = dest"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cdest_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int cdest_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "csrc",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *csrc = src"
                        ]
                    },
                    {
                        "path": null,
                        "name": "csrc_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int csrc_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chars",
                        "type": "size_t",
                        "definition": [
                            "size_t chars = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "csv_fwrite2",
            "header": "int csv_fwrite2(FILE *fp, const void *src, size_t src_size, unsigned char quote)",
            "params": [
                "FILE *fp",
                "const void *src",
                "size_t src_size",
                "unsigned char quote"
            ],
            "definition": "int csv_fwrite2(FILE *fp, const void *src, size_t src_size, unsigned char quote)\n{\n  const unsigned char *csrc = src;\n  unsigned int csrc_idx = 0;\n  if ((fp == 0) || (src == 0))\n  {\n    return 0;\n  }\n  if (fputc(quote, fp) == EOF)\n  {\n    return EOF;\n  }\n  while (src_size)\n  {\n    if (csrc[csrc_idx] == quote)\n    {\n      if (fputc(quote, fp) == EOF)\n      {\n        return EOF;\n      }\n    }\n    if (fputc(*(&csrc[csrc_idx]), fp) == EOF)\n    {\n      return EOF;\n    }\n    src_size -= 1;\n    csrc_idx += 1;\n  }\n\n  if (fputc(quote, fp) == EOF)\n  {\n    return EOF;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "fputc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fp",
                        "type": "FILE *",
                        "definition": [
                            "FILE *fp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "const void *",
                        "definition": [
                            "const void *src"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_size",
                        "type": "size_t",
                        "definition": [
                            "size_t src_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quote",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char quote"
                        ]
                    },
                    {
                        "path": null,
                        "name": "csrc",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *csrc = src"
                        ]
                    },
                    {
                        "path": null,
                        "name": "csrc_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int csrc_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "csv_get_opts",
            "header": "int csv_get_opts(const struct csv_parser *p)",
            "params": [
                "const struct csv_parser *p"
            ],
            "definition": "int csv_get_opts(const struct csv_parser *p)\n{\n  if (p == 0)\n  {\n    return -1;\n  }\n  return p->options;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct csv_parser",
                        "type": "const struct csv_parser *",
                        "definition": [
                            "const struct csv_parser *p"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "csv_set_opts",
            "header": "int csv_set_opts(struct csv_parser *p, unsigned char options)",
            "params": [
                "struct csv_parser *p",
                "unsigned char options"
            ],
            "definition": "int csv_set_opts(struct csv_parser *p, unsigned char options)\n{\n  if (p == 0)\n  {\n    return -1;\n  }\n  p->options = options;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct csv_parser",
                        "type": "struct csv_parser *",
                        "definition": [
                            "struct csv_parser *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "csv_set_delim",
            "header": "void csv_set_delim(struct csv_parser *p, unsigned char c)",
            "params": [
                "struct csv_parser *p",
                "unsigned char c"
            ],
            "definition": "void csv_set_delim(struct csv_parser *p, unsigned char c)\n{\n  if (p)\n  {\n    p->delim_char = c;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct csv_parser",
                        "type": "struct csv_parser *",
                        "definition": [
                            "struct csv_parser *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "csv_set_quote",
            "header": "void csv_set_quote(struct csv_parser *p, unsigned char c)",
            "params": [
                "struct csv_parser *p",
                "unsigned char c"
            ],
            "definition": "void csv_set_quote(struct csv_parser *p, unsigned char c)\n{\n  if (p)\n  {\n    p->quote_char = c;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct csv_parser",
                        "type": "struct csv_parser *",
                        "definition": [
                            "struct csv_parser *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "csv_get_delim",
            "header": "unsigned char csv_get_delim(const struct csv_parser *p)",
            "params": [
                "const struct csv_parser *p"
            ],
            "definition": "unsigned char csv_get_delim(const struct csv_parser *p)\n{\n  assert(p && \"received null csv_parser\");\n  return p->delim_char;\n}\n\n",
            "calle": [
                "assert"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct csv_parser",
                        "type": "const struct csv_parser *",
                        "definition": [
                            "const struct csv_parser *p"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "csv_get_quote",
            "header": "unsigned char csv_get_quote(const struct csv_parser *p)",
            "params": [
                "const struct csv_parser *p"
            ],
            "definition": "unsigned char csv_get_quote(const struct csv_parser *p)\n{\n  assert(p && \"received null csv_parser\");\n  return p->quote_char;\n}\n\n",
            "calle": [
                "assert"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct csv_parser",
                        "type": "const struct csv_parser *",
                        "definition": [
                            "const struct csv_parser *p"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "csv_set_space_func",
            "header": "void csv_set_space_func(struct csv_parser *p, int (*f)(unsigned char))",
            "params": [
                "struct csv_parser *p",
                "int (*f)(unsigned char)"
            ],
            "definition": "void csv_set_space_func(struct csv_parser *p, int (*f)(unsigned char))\n{\n  if (p)\n  {\n    p->is_space = f;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct csv_parser",
                        "type": "struct csv_parser *",
                        "definition": [
                            "struct csv_parser *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f",
                        "type": "int (*)(unsigned char)",
                        "definition": [
                            "int (*f)(unsigned char)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "csv_set_term_func",
            "header": "void csv_set_term_func(struct csv_parser *p, int (*f)(unsigned char))",
            "params": [
                "struct csv_parser *p",
                "int (*f)(unsigned char)"
            ],
            "definition": "void csv_set_term_func(struct csv_parser *p, int (*f)(unsigned char))\n{\n  if (p)\n  {\n    p->is_term = f;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct csv_parser",
                        "type": "struct csv_parser *",
                        "definition": [
                            "struct csv_parser *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f",
                        "type": "int (*)(unsigned char)",
                        "definition": [
                            "int (*f)(unsigned char)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "csv_set_realloc_func",
            "header": "void csv_set_realloc_func(struct csv_parser *p, void *(*)(void *, size_t))",
            "params": [
                "struct csv_parser *p",
                "void *(*f)(void *, size_t)"
            ],
            "definition": "void csv_set_realloc_func(struct csv_parser *p, void *(*f)(void *, size_t))\n{\n  if (p && f)\n  {\n    p->realloc_func = f;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct csv_parser",
                        "type": "struct csv_parser *",
                        "definition": [
                            "struct csv_parser *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f",
                        "type": "void *(*)(void *, size_t)",
                        "definition": [
                            "void *(*f)(void *, size_t)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "csv_set_free_func",
            "header": "void csv_set_free_func(struct csv_parser *p, void (*)(void *))",
            "params": [
                "struct csv_parser *p",
                "void (*f)(void *)"
            ],
            "definition": "void csv_set_free_func(struct csv_parser *p, void (*f)(void *))\n{\n  if (p && f)\n  {\n    p->free_func = f;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct csv_parser",
                        "type": "struct csv_parser *",
                        "definition": [
                            "struct csv_parser *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f",
                        "type": "void (*)(void *)",
                        "definition": [
                            "void (*f)(void *)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "csv_set_blk_size",
            "header": "void csv_set_blk_size(struct csv_parser *p, size_t)",
            "params": [
                "struct csv_parser *p",
                "size_t size"
            ],
            "definition": "void csv_set_blk_size(struct csv_parser *p, size_t size)\n{\n  if (p)\n  {\n    p->blk_size = size;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct csv_parser",
                        "type": "struct csv_parser *",
                        "definition": [
                            "struct csv_parser *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "csv_get_buffer_size",
            "header": "size_t csv_get_buffer_size(const struct csv_parser *p)",
            "params": [
                "const struct csv_parser *p"
            ],
            "definition": "size_t csv_get_buffer_size(const struct csv_parser *p)\n{\n  if (p)\n  {\n    return p->entry_size;\n  }\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct csv_parser",
                        "type": "const struct csv_parser *",
                        "definition": [
                            "const struct csv_parser *p"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "csv_increase_buffer",
            "header": "",
            "params": [
                "struct csv_parser *p"
            ],
            "definition": "static int csv_increase_buffer(struct csv_parser *p)\n{\n  if (p == 0)\n  {\n    return 0;\n  }\n  if (p->realloc_func == 0)\n  {\n    return 0;\n  }\n  size_t to_add = p->blk_size;\n  void *vp;\n  unsigned int vp_idx = 0;\n  if (p->entry_size >= (SIZE_MAX - to_add))\n  {\n    to_add = SIZE_MAX - p->entry_size;\n  }\n  if (!to_add)\n  {\n    p->status = 3;\n    return -1;\n  }\n  while ((vp_idx = p->realloc_func(p->entry_buf, p->entry_size + to_add)) == 0)\n  {\n    to_add /= 2;\n    if (!to_add)\n    {\n      p->status = 2;\n      return -1;\n    }\n  }\n\n  p->entry_buf = &vp[vp_idx];\n  p->entry_size += to_add;\n  return 0;\n}\n\n",
            "calle": [
                "p->realloc_func"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct csv_parser",
                        "type": "struct csv_parser *",
                        "definition": [
                            "struct csv_parser *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "to_add",
                        "type": "size_t",
                        "definition": [
                            "size_t to_add = p->blk_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vp",
                        "type": "void *",
                        "definition": [
                            "void *vp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vp_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int vp_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_csv_fini_1",
            "header": "",
            "params": [
                "int * const pstate_ref",
                "size_t * const entry_pos_ref",
                "struct csv_parser * const p",
                "void (* const cb1)(void *, size_t, void *)",
                "void (* const cb2)(int c, void *)",
                "void * const data",
                "int quoted",
                "size_t spaces"
            ],
            "definition": "void helper_csv_fini_1(int * const pstate_ref, size_t * const entry_pos_ref, struct csv_parser * const p, void (* const cb1)(void *, size_t, void *), void (* const cb2)(int c, void *), void * const data, int quoted, size_t spaces)\n{\n  int pstate = *pstate_ref;\n  size_t entry_pos = *entry_pos_ref;\n  do\n  {\n    if (!quoted)\n    {\n      entry_pos -= spaces;\n    }\n    if (p->options & 8)\n    {\n      p->entry_buf[entry_pos] = '\\0';\n    }\n    if (((cb1 && (p->options & 16)) && (!quoted)) && (entry_pos == 0))\n    {\n      cb1(0, entry_pos, data);\n    }\n    else\n      if (cb1)\n    {\n      cb1(p->entry_buf, entry_pos, data);\n    }\n    pstate = 1;\n    entry_pos = (quoted = (spaces = 0));\n  }\n  while (0);\n  do\n  {\n    if (cb2)\n    {\n      cb2(-1, data);\n    }\n    pstate = 0;\n    entry_pos = (quoted = (spaces = 0));\n  }\n  while (0);\n  break;\n  *pstate_ref = pstate;\n  *entry_pos_ref = entry_pos;\n}\n\n",
            "calle": [
                "cb1",
                "cb2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pstate_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const pstate_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_pos_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const entry_pos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct csv_parser",
                        "type": "struct csv_parser * const",
                        "definition": [
                            "struct csv_parser * const p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb1",
                        "type": "void (* const)(void *, size_t, void *)",
                        "definition": [
                            "void (* const cb1)(void *, size_t, void *)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb2",
                        "type": "void (* const)(int c, void *)",
                        "definition": [
                            "void (* const cb2)(int c, void *)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "void * const",
                        "definition": [
                            "void * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quoted",
                        "type": "int",
                        "definition": [
                            "int quoted"
                        ]
                    },
                    {
                        "path": null,
                        "name": "spaces",
                        "type": "size_t",
                        "definition": [
                            "size_t spaces"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pstate",
                        "type": "int",
                        "definition": [
                            "int pstate = *pstate_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_pos",
                        "type": "size_t",
                        "definition": [
                            "size_t entry_pos = *entry_pos_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_csv_parse_1",
            "header": "",
            "params": [
                "int * const c_ref",
                "unsigned char * const c_ref",
                "size_t * const pos_ref",
                "int * const quoted_ref",
                "int * const pstate_ref",
                "size_t * const spaces_ref",
                "size_t * const entry_pos_ref",
                "struct csv_parser * const p",
                "void (* const cb1)(void *, size_t, void *)",
                "void (* const cb2)(int c, void *)",
                "void * const data",
                "const unsigned char * const us",
                "unsigned char delim",
                "unsigned char quote",
                "int (* const is_space)(unsigned char)",
                "int (* const is_term)(unsigned char)"
            ],
            "definition": "size_t helper_csv_parse_1(int * const c_ref, unsigned char * const c_ref, size_t * const pos_ref, int * const quoted_ref, int * const pstate_ref, size_t * const spaces_ref, size_t * const entry_pos_ref, struct csv_parser * const p, void (* const cb1)(void *, size_t, void *), void (* const cb2)(int c, void *), void * const data, const unsigned char * const us, unsigned char delim, unsigned char quote, int (* const is_space)(unsigned char), int (* const is_term)(unsigned char))\n{\n  int c = *c_ref;\n  unsigned char c = *c_ref;\n  size_t pos = *pos_ref;\n  int quoted = *quoted_ref;\n  int pstate = *pstate_ref;\n  size_t spaces = *spaces_ref;\n  size_t entry_pos = *entry_pos_ref;\n  if (entry_pos == ((p->options & 8) ? (p->entry_size - 1) : (p->entry_size)))\n  {\n    if (csv_increase_buffer(p) != 0)\n    {\n      p->quoted = quoted, p->pstate = pstate, p->spaces = spaces, p->entry_pos = entry_pos;\n      return pos;\n    }\n  }\n  c = us[pos];\n  pos += 1;\n  switch (pstate)\n  {\n    case 0:\n\n    case 1:\n    {\n      helper_helper_csv_parse_1_1(&quoted, &pstate, &entry_pos, p, cb1, cb2, c, data, delim, quote, is_space, is_term, c, c, spaces);\n    }\n\n    case 2:\n    {\n      helper_helper_csv_parse_1_2(&quoted, &pstate, &spaces, &entry_pos, p, cb1, cb2, c, data, delim, quote, is_space, is_term, c, c, pos);\n    }\n\n    case 3:\n    {\n      helper_helper_csv_parse_1_3(&quoted, &pstate, &spaces, &entry_pos, p, cb1, cb2, c, data, delim, quote, is_space, is_term, c, c, pos);\n    }\n\n    default:\n    {\n      break;\n    }\n\n  }\n\n  *c_ref = c;\n  *c_ref = c;\n  *pos_ref = pos;\n  *quoted_ref = quoted;\n  *pstate_ref = pstate;\n  *spaces_ref = spaces;\n  *entry_pos_ref = entry_pos;\n}\n\n",
            "calle": [
                "csv_increase_buffer",
                "helper_helper_csv_parse_1_1",
                "helper_helper_csv_parse_1_2",
                "helper_helper_csv_parse_1_3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const c_ref",
                            "unsigned char * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const pos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quoted_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const quoted_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pstate_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const pstate_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "spaces_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const spaces_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_pos_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const entry_pos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct csv_parser",
                        "type": "struct csv_parser * const",
                        "definition": [
                            "struct csv_parser * const p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb1",
                        "type": "void (* const)(void *, size_t, void *)",
                        "definition": [
                            "void (* const cb1)(void *, size_t, void *)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb2",
                        "type": "void (* const)(int c, void *)",
                        "definition": [
                            "void (* const cb2)(int c, void *)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "void * const",
                        "definition": [
                            "void * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "us",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const us"
                        ]
                    },
                    {
                        "path": null,
                        "name": "delim",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char delim"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quote",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char quote"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_space",
                        "type": "int (* const)(unsigned char)",
                        "definition": [
                            "int (* const is_space)(unsigned char)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_term",
                        "type": "int (* const)(unsigned char)",
                        "definition": [
                            "int (* const is_term)(unsigned char)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c = *c_ref",
                            "unsigned char c = *c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos = *pos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quoted",
                        "type": "int",
                        "definition": [
                            "int quoted = *quoted_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pstate",
                        "type": "int",
                        "definition": [
                            "int pstate = *pstate_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "spaces",
                        "type": "size_t",
                        "definition": [
                            "size_t spaces = *spaces_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_pos",
                        "type": "size_t",
                        "definition": [
                            "size_t entry_pos = *entry_pos_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_csv_write2_1",
            "header": "",
            "params": [
                "size_t * const src_size_ref",
                "unsigned int * const cdest_idx_ref",
                "unsigned int * const csrc_idx_ref",
                "size_t * const chars_ref",
                "size_t dest_size",
                "unsigned char quote",
                "unsigned char * const cdest",
                "const unsigned char * const csrc"
            ],
            "definition": "void helper_csv_write2_1(size_t * const src_size_ref, unsigned int * const cdest_idx_ref, unsigned int * const csrc_idx_ref, size_t * const chars_ref, size_t dest_size, unsigned char quote, unsigned char * const cdest, const unsigned char * const csrc)\n{\n  size_t src_size = *src_size_ref;\n  unsigned int cdest_idx = *cdest_idx_ref;\n  unsigned int csrc_idx = *csrc_idx_ref;\n  size_t chars = *chars_ref;\n  if (csrc[csrc_idx] == quote)\n  {\n    if (dest_size > chars)\n    {\n      cdest[cdest_idx] = quote;\n      cdest_idx += 1;\n    }\n    if (chars < SIZE_MAX)\n    {\n      chars += 1;\n    }\n  }\n  if (dest_size > chars)\n  {\n    cdest[cdest_idx] = csrc[csrc_idx];\n    cdest_idx += 1;\n  }\n  if (chars < SIZE_MAX)\n  {\n    chars += 1;\n  }\n  src_size -= 1;\n  csrc_idx += 1;\n  *src_size_ref = src_size;\n  *cdest_idx_ref = cdest_idx;\n  *csrc_idx_ref = csrc_idx;\n  *chars_ref = chars;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "src_size_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const src_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cdest_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const cdest_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "csrc_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const csrc_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chars_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const chars_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_size",
                        "type": "size_t",
                        "definition": [
                            "size_t dest_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quote",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char quote"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cdest",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const cdest"
                        ]
                    },
                    {
                        "path": null,
                        "name": "csrc",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const csrc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_size",
                        "type": "size_t",
                        "definition": [
                            "size_t src_size = *src_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cdest_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int cdest_idx = *cdest_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "csrc_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int csrc_idx = *csrc_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chars",
                        "type": "size_t",
                        "definition": [
                            "size_t chars = *chars_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_csv_parse_1_1",
            "header": "",
            "params": [
                "int * const quoted_ref",
                "int * const pstate_ref",
                "size_t * const entry_pos_ref",
                "struct csv_parser * const p",
                "void (* const cb1)(void *, size_t, void *)",
                "void (* const cb2)(int c, void *)",
                "int c",
                "void * const data",
                "unsigned char delim",
                "unsigned char quote",
                "int (* const is_space)(unsigned char)",
                "int (* const is_term)(unsigned char)",
                "int c",
                "unsigned char c",
                "size_t spaces"
            ],
            "definition": "void helper_helper_csv_parse_1_1(int * const quoted_ref, int * const pstate_ref, size_t * const entry_pos_ref, struct csv_parser * const p, void (* const cb1)(void *, size_t, void *), void (* const cb2)(int c, void *), int c, void * const data, unsigned char delim, unsigned char quote, int (* const is_space)(unsigned char), int (* const is_term)(unsigned char), int c, unsigned char c, size_t spaces)\n{\n  int quoted = *quoted_ref;\n  int pstate = *pstate_ref;\n  size_t entry_pos = *entry_pos_ref;\n  if (((is_space) ? (is_space(c)) : ((c == 0x20) || (c == 0x09))) && (c != delim))\n  {\n    continue;\n  }\n  else\n    if ((is_term) ? (is_term(c)) : ((c == 0x0d) || (c == 0x0a)))\n  {\n    helper_helper_helper_csv_parse_1_1_2(&pstate, &entry_pos, p, cb1, cb2, c, c, data, c, c, spaces, quoted);\n  }\n  else\n    if (c == delim)\n  {\n    helper_helper_helper_csv_parse_1_1_1(&pstate, &entry_pos, p, cb1, data, spaces, quoted);\n  }\n  else\n    if (c == quote)\n  {\n    pstate = 2;\n    quoted = 1;\n  }\n  else\n  {\n    pstate = 2;\n    quoted = 0;\n    p->entry_buf[entry_pos++] = c;\n  }\n  break;\n  *quoted_ref = quoted;\n  *pstate_ref = pstate;\n  *entry_pos_ref = entry_pos;\n}\n\n",
            "calle": [
                "helper_helper_helper_csv_parse_1_1_1",
                "helper_helper_helper_csv_parse_1_1_2",
                "is_space",
                "is_term"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "quoted_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const quoted_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pstate_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const pstate_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_pos_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const entry_pos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct csv_parser",
                        "type": "struct csv_parser * const",
                        "definition": [
                            "struct csv_parser * const p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb1",
                        "type": "void (* const)(void *, size_t, void *)",
                        "definition": [
                            "void (* const cb1)(void *, size_t, void *)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb2",
                        "type": "void (* const)(int c, void *)",
                        "definition": [
                            "void (* const cb2)(int c, void *)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c",
                            "unsigned char c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "void * const",
                        "definition": [
                            "void * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "delim",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char delim"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quote",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char quote"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_space",
                        "type": "int (* const)(unsigned char)",
                        "definition": [
                            "int (* const is_space)(unsigned char)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_term",
                        "type": "int (* const)(unsigned char)",
                        "definition": [
                            "int (* const is_term)(unsigned char)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "spaces",
                        "type": "size_t",
                        "definition": [
                            "size_t spaces"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quoted",
                        "type": "int",
                        "definition": [
                            "int quoted = *quoted_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pstate",
                        "type": "int",
                        "definition": [
                            "int pstate = *pstate_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_pos",
                        "type": "size_t",
                        "definition": [
                            "size_t entry_pos = *entry_pos_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_csv_parse_1_2",
            "header": "",
            "params": [
                "int * const quoted_ref",
                "int * const pstate_ref",
                "size_t * const spaces_ref",
                "size_t * const entry_pos_ref",
                "struct csv_parser * const p",
                "void (* const cb1)(void *, size_t, void *)",
                "void (* const cb2)(int c, void *)",
                "int c",
                "void * const data",
                "unsigned char delim",
                "unsigned char quote",
                "int (* const is_space)(unsigned char)",
                "int (* const is_term)(unsigned char)",
                "int c",
                "unsigned char c",
                "size_t pos"
            ],
            "definition": "size_t helper_helper_csv_parse_1_2(int * const quoted_ref, int * const pstate_ref, size_t * const spaces_ref, size_t * const entry_pos_ref, struct csv_parser * const p, void (* const cb1)(void *, size_t, void *), void (* const cb2)(int c, void *), int c, void * const data, unsigned char delim, unsigned char quote, int (* const is_space)(unsigned char), int (* const is_term)(unsigned char), int c, unsigned char c, size_t pos)\n{\n  int quoted = *quoted_ref;\n  int pstate = *pstate_ref;\n  size_t spaces = *spaces_ref;\n  size_t entry_pos = *entry_pos_ref;\n  if (c == quote)\n  {\n    helper_helper_helper_csv_parse_1_2_2(&quoted, &pstate, &spaces, &entry_pos, p, c, c, c, c, pos);\n  }\n  else\n    if (c == delim)\n  {\n    helper_helper_helper_csv_parse_1_2_1(&pstate, &entry_pos, p, cb1, c, c, data, c, c, quoted, spaces);\n  }\n  else\n    if ((is_term) ? (is_term(c)) : ((c == 0x0d) || (c == 0x0a)))\n  {\n    helper_helper_helper_csv_parse_1_2_3(&pstate, &entry_pos, p, cb1, cb2, c, c, data, c, c, quoted, spaces);\n  }\n  else\n    if ((!quoted) && ((is_space) ? (is_space(c)) : ((c == 0x20) || (c == 0x09))))\n  {\n    p->entry_buf[entry_pos++] = c;\n    spaces++;\n  }\n  else\n  {\n    p->entry_buf[entry_pos++] = c;\n    spaces = 0;\n  }\n  break;\n  *quoted_ref = quoted;\n  *pstate_ref = pstate;\n  *spaces_ref = spaces;\n  *entry_pos_ref = entry_pos;\n}\n\n",
            "calle": [
                "helper_helper_helper_csv_parse_1_2_1",
                "helper_helper_helper_csv_parse_1_2_2",
                "helper_helper_helper_csv_parse_1_2_3",
                "is_space",
                "is_term"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "quoted_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const quoted_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pstate_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const pstate_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "spaces_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const spaces_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_pos_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const entry_pos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct csv_parser",
                        "type": "struct csv_parser * const",
                        "definition": [
                            "struct csv_parser * const p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb1",
                        "type": "void (* const)(void *, size_t, void *)",
                        "definition": [
                            "void (* const cb1)(void *, size_t, void *)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb2",
                        "type": "void (* const)(int c, void *)",
                        "definition": [
                            "void (* const cb2)(int c, void *)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c",
                            "unsigned char c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "void * const",
                        "definition": [
                            "void * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "delim",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char delim"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quote",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char quote"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_space",
                        "type": "int (* const)(unsigned char)",
                        "definition": [
                            "int (* const is_space)(unsigned char)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_term",
                        "type": "int (* const)(unsigned char)",
                        "definition": [
                            "int (* const is_term)(unsigned char)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quoted",
                        "type": "int",
                        "definition": [
                            "int quoted = *quoted_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pstate",
                        "type": "int",
                        "definition": [
                            "int pstate = *pstate_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "spaces",
                        "type": "size_t",
                        "definition": [
                            "size_t spaces = *spaces_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_pos",
                        "type": "size_t",
                        "definition": [
                            "size_t entry_pos = *entry_pos_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_csv_parse_1_3",
            "header": "",
            "params": [
                "int * const quoted_ref",
                "int * const pstate_ref",
                "size_t * const spaces_ref",
                "size_t * const entry_pos_ref",
                "struct csv_parser * const p",
                "void (* const cb1)(void *, size_t, void *)",
                "void (* const cb2)(int c, void *)",
                "int c",
                "void * const data",
                "unsigned char delim",
                "unsigned char quote",
                "int (* const is_space)(unsigned char)",
                "int (* const is_term)(unsigned char)",
                "int c",
                "unsigned char c",
                "size_t pos"
            ],
            "definition": "size_t helper_helper_csv_parse_1_3(int * const quoted_ref, int * const pstate_ref, size_t * const spaces_ref, size_t * const entry_pos_ref, struct csv_parser * const p, void (* const cb1)(void *, size_t, void *), void (* const cb2)(int c, void *), int c, void * const data, unsigned char delim, unsigned char quote, int (* const is_space)(unsigned char), int (* const is_term)(unsigned char), int c, unsigned char c, size_t pos)\n{\n  int quoted = *quoted_ref;\n  int pstate = *pstate_ref;\n  size_t spaces = *spaces_ref;\n  size_t entry_pos = *entry_pos_ref;\n  if (c == delim)\n  {\n    helper_helper_helper_csv_parse_1_3_1(&pstate, &entry_pos, p, cb1, data, quoted, spaces);\n  }\n  else\n    if ((is_term) ? (is_term(c)) : ((c == 0x0d) || (c == 0x0a)))\n  {\n    helper_helper_helper_csv_parse_1_3_4(&pstate, &entry_pos, p, cb1, cb2, c, c, data, c, c, quoted, spaces);\n  }\n  else\n    if ((is_space) ? (is_space(c)) : ((c == 0x20) || (c == 0x09)))\n  {\n    p->entry_buf[entry_pos++] = c;\n    spaces++;\n  }\n  else\n    if (c == quote)\n  {\n    helper_helper_helper_csv_parse_1_3_3(&quoted, &pstate, &spaces, &entry_pos, p, c, c, c, c, pos);\n  }\n  else\n  {\n    helper_helper_helper_csv_parse_1_3_2(&quoted, &pstate, &spaces, &entry_pos, p, c, c, c, c, pos);\n  }\n  break;\n  *quoted_ref = quoted;\n  *pstate_ref = pstate;\n  *spaces_ref = spaces;\n  *entry_pos_ref = entry_pos;\n}\n\n",
            "calle": [
                "helper_helper_helper_csv_parse_1_3_1",
                "helper_helper_helper_csv_parse_1_3_2",
                "helper_helper_helper_csv_parse_1_3_3",
                "helper_helper_helper_csv_parse_1_3_4",
                "is_space",
                "is_term"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "quoted_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const quoted_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pstate_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const pstate_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "spaces_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const spaces_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_pos_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const entry_pos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct csv_parser",
                        "type": "struct csv_parser * const",
                        "definition": [
                            "struct csv_parser * const p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb1",
                        "type": "void (* const)(void *, size_t, void *)",
                        "definition": [
                            "void (* const cb1)(void *, size_t, void *)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb2",
                        "type": "void (* const)(int c, void *)",
                        "definition": [
                            "void (* const cb2)(int c, void *)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c",
                            "unsigned char c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "void * const",
                        "definition": [
                            "void * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "delim",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char delim"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quote",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char quote"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_space",
                        "type": "int (* const)(unsigned char)",
                        "definition": [
                            "int (* const is_space)(unsigned char)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_term",
                        "type": "int (* const)(unsigned char)",
                        "definition": [
                            "int (* const is_term)(unsigned char)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quoted",
                        "type": "int",
                        "definition": [
                            "int quoted = *quoted_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pstate",
                        "type": "int",
                        "definition": [
                            "int pstate = *pstate_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "spaces",
                        "type": "size_t",
                        "definition": [
                            "size_t spaces = *spaces_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_pos",
                        "type": "size_t",
                        "definition": [
                            "size_t entry_pos = *entry_pos_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_csv_parse_1_1_1",
            "header": "",
            "params": [
                "int * const pstate_ref",
                "size_t * const entry_pos_ref",
                "struct csv_parser * const p",
                "void (* const cb1)(void *, size_t, void *)",
                "void * const data",
                "size_t spaces",
                "int quoted"
            ],
            "definition": "void helper_helper_helper_csv_parse_1_1_1(int * const pstate_ref, size_t * const entry_pos_ref, struct csv_parser * const p, void (* const cb1)(void *, size_t, void *), void * const data, size_t spaces, int quoted)\n{\n  int pstate = *pstate_ref;\n  size_t entry_pos = *entry_pos_ref;\n  do\n  {\n    if (!quoted)\n      entry_pos -= spaces;\n    if (p->options & 8)\n      p->entry_buf[entry_pos] = '\\0';\n    if (((cb1 && (p->options & 16)) && (!quoted)) && (entry_pos == 0))\n      cb1(0, entry_pos, data);\n    else\n      if (cb1)\n      cb1(p->entry_buf, entry_pos, data);\n    pstate = 1;\n    entry_pos = (quoted = (spaces = 0));\n  }\n  while (0);\n  break;\n  *pstate_ref = pstate;\n  *entry_pos_ref = entry_pos;\n}\n\n",
            "calle": [
                "cb1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pstate_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const pstate_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_pos_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const entry_pos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct csv_parser",
                        "type": "struct csv_parser * const",
                        "definition": [
                            "struct csv_parser * const p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb1",
                        "type": "void (* const)(void *, size_t, void *)",
                        "definition": [
                            "void (* const cb1)(void *, size_t, void *)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "void * const",
                        "definition": [
                            "void * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "spaces",
                        "type": "size_t",
                        "definition": [
                            "size_t spaces"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quoted",
                        "type": "int",
                        "definition": [
                            "int quoted"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pstate",
                        "type": "int",
                        "definition": [
                            "int pstate = *pstate_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_pos",
                        "type": "size_t",
                        "definition": [
                            "size_t entry_pos = *entry_pos_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_csv_parse_1_1_2",
            "header": "",
            "params": [
                "int * const pstate_ref",
                "size_t * const entry_pos_ref",
                "struct csv_parser * const p",
                "void (* const cb1)(void *, size_t, void *)",
                "void (* const cb2)(int c, void *)",
                "int c",
                "int c",
                "void * const data",
                "int c",
                "unsigned char c",
                "size_t spaces",
                "int quoted"
            ],
            "definition": "void helper_helper_helper_csv_parse_1_1_2(int * const pstate_ref, size_t * const entry_pos_ref, struct csv_parser * const p, void (* const cb1)(void *, size_t, void *), void (* const cb2)(int c, void *), int c, int c, void * const data, int c, unsigned char c, size_t spaces, int quoted)\n{\n  int pstate = *pstate_ref;\n  size_t entry_pos = *entry_pos_ref;\n  if (pstate == 1)\n  {\n    do\n    {\n      if (!quoted)\n        entry_pos -= spaces;\n      if (p->options & 8)\n        p->entry_buf[entry_pos] = '\\0';\n      if (((cb1 && (p->options & 16)) && (!quoted)) && (entry_pos == 0))\n        cb1(0, entry_pos, data);\n      else\n        if (cb1)\n        cb1(p->entry_buf, entry_pos, data);\n      pstate = 1;\n      entry_pos = (quoted = (spaces = 0));\n    }\n    while (0);\n    do\n    {\n      if (cb2)\n        cb2(c, data);\n      pstate = 0;\n      entry_pos = (quoted = (spaces = 0));\n    }\n    while (0);\n  }\n  else\n  {\n    if (p->options & 2)\n    {\n      do\n      {\n        if (cb2)\n          cb2(c, data);\n        pstate = 0;\n        entry_pos = (quoted = (spaces = 0));\n      }\n      while (0);\n    }\n  }\n  continue;\n  *pstate_ref = pstate;\n  *entry_pos_ref = entry_pos;\n}\n\n",
            "calle": [
                "cb1",
                "cb2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pstate_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const pstate_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_pos_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const entry_pos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct csv_parser",
                        "type": "struct csv_parser * const",
                        "definition": [
                            "struct csv_parser * const p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb1",
                        "type": "void (* const)(void *, size_t, void *)",
                        "definition": [
                            "void (* const cb1)(void *, size_t, void *)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb2",
                        "type": "void (* const)(int c, void *)",
                        "definition": [
                            "void (* const cb2)(int c, void *)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c",
                            "unsigned char c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "void * const",
                        "definition": [
                            "void * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "spaces",
                        "type": "size_t",
                        "definition": [
                            "size_t spaces"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quoted",
                        "type": "int",
                        "definition": [
                            "int quoted"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pstate",
                        "type": "int",
                        "definition": [
                            "int pstate = *pstate_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_pos",
                        "type": "size_t",
                        "definition": [
                            "size_t entry_pos = *entry_pos_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_csv_parse_1_2_1",
            "header": "",
            "params": [
                "int * const pstate_ref",
                "size_t * const entry_pos_ref",
                "struct csv_parser * const p",
                "void (* const cb1)(void *, size_t, void *)",
                "int c",
                "int c",
                "void * const data",
                "int c",
                "unsigned char c",
                "int quoted",
                "size_t spaces"
            ],
            "definition": "void helper_helper_helper_csv_parse_1_2_1(int * const pstate_ref, size_t * const entry_pos_ref, struct csv_parser * const p, void (* const cb1)(void *, size_t, void *), int c, int c, void * const data, int c, unsigned char c, int quoted, size_t spaces)\n{\n  int pstate = *pstate_ref;\n  size_t entry_pos = *entry_pos_ref;\n  if (quoted)\n  {\n    p->entry_buf[entry_pos++] = c;\n  }\n  else\n  {\n    do\n    {\n      if (!quoted)\n        entry_pos -= spaces;\n      if (p->options & 8)\n        p->entry_buf[entry_pos] = '\\0';\n      if (((cb1 && (p->options & 16)) && (!quoted)) && (entry_pos == 0))\n        cb1(0, entry_pos, data);\n      else\n        if (cb1)\n        cb1(p->entry_buf, entry_pos, data);\n      pstate = 1;\n      entry_pos = (quoted = (spaces = 0));\n    }\n    while (0);\n  }\n  *pstate_ref = pstate;\n  *entry_pos_ref = entry_pos;\n}\n\n",
            "calle": [
                "cb1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pstate_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const pstate_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_pos_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const entry_pos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct csv_parser",
                        "type": "struct csv_parser * const",
                        "definition": [
                            "struct csv_parser * const p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb1",
                        "type": "void (* const)(void *, size_t, void *)",
                        "definition": [
                            "void (* const cb1)(void *, size_t, void *)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c",
                            "unsigned char c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "void * const",
                        "definition": [
                            "void * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quoted",
                        "type": "int",
                        "definition": [
                            "int quoted"
                        ]
                    },
                    {
                        "path": null,
                        "name": "spaces",
                        "type": "size_t",
                        "definition": [
                            "size_t spaces"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pstate",
                        "type": "int",
                        "definition": [
                            "int pstate = *pstate_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_pos",
                        "type": "size_t",
                        "definition": [
                            "size_t entry_pos = *entry_pos_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_csv_parse_1_2_2",
            "header": "",
            "params": [
                "int * const quoted_ref",
                "int * const pstate_ref",
                "size_t * const spaces_ref",
                "size_t * const entry_pos_ref",
                "struct csv_parser * const p",
                "int c",
                "int c",
                "int c",
                "unsigned char c",
                "size_t pos"
            ],
            "definition": "size_t helper_helper_helper_csv_parse_1_2_2(int * const quoted_ref, int * const pstate_ref, size_t * const spaces_ref, size_t * const entry_pos_ref, struct csv_parser * const p, int c, int c, int c, unsigned char c, size_t pos)\n{\n  int quoted = *quoted_ref;\n  int pstate = *pstate_ref;\n  size_t spaces = *spaces_ref;\n  size_t entry_pos = *entry_pos_ref;\n  if (quoted)\n  {\n    p->entry_buf[entry_pos++] = c;\n    pstate = 3;\n  }\n  else\n  {\n    if (p->options & 1)\n    {\n      p->status = 1;\n      p->quoted = quoted, p->pstate = pstate, p->spaces = spaces, p->entry_pos = entry_pos;\n      return pos - 1;\n    }\n    p->entry_buf[entry_pos++] = c;\n    spaces = 0;\n  }\n  *quoted_ref = quoted;\n  *pstate_ref = pstate;\n  *spaces_ref = spaces;\n  *entry_pos_ref = entry_pos;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "quoted_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const quoted_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pstate_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const pstate_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "spaces_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const spaces_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_pos_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const entry_pos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct csv_parser",
                        "type": "struct csv_parser * const",
                        "definition": [
                            "struct csv_parser * const p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c",
                            "unsigned char c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quoted",
                        "type": "int",
                        "definition": [
                            "int quoted = *quoted_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pstate",
                        "type": "int",
                        "definition": [
                            "int pstate = *pstate_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "spaces",
                        "type": "size_t",
                        "definition": [
                            "size_t spaces = *spaces_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_pos",
                        "type": "size_t",
                        "definition": [
                            "size_t entry_pos = *entry_pos_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_csv_parse_1_2_3",
            "header": "",
            "params": [
                "int * const pstate_ref",
                "size_t * const entry_pos_ref",
                "struct csv_parser * const p",
                "void (* const cb1)(void *, size_t, void *)",
                "void (* const cb2)(int c, void *)",
                "int c",
                "int c",
                "void * const data",
                "int c",
                "unsigned char c",
                "int quoted",
                "size_t spaces"
            ],
            "definition": "void helper_helper_helper_csv_parse_1_2_3(int * const pstate_ref, size_t * const entry_pos_ref, struct csv_parser * const p, void (* const cb1)(void *, size_t, void *), void (* const cb2)(int c, void *), int c, int c, void * const data, int c, unsigned char c, int quoted, size_t spaces)\n{\n  int pstate = *pstate_ref;\n  size_t entry_pos = *entry_pos_ref;\n  if (!quoted)\n  {\n    do\n    {\n      if (!quoted)\n        entry_pos -= spaces;\n      if (p->options & 8)\n        p->entry_buf[entry_pos] = '\\0';\n      if (((cb1 && (p->options & 16)) && (!quoted)) && (entry_pos == 0))\n        cb1(0, entry_pos, data);\n      else\n        if (cb1)\n        cb1(p->entry_buf, entry_pos, data);\n      pstate = 1;\n      entry_pos = (quoted = (spaces = 0));\n    }\n    while (0);\n    do\n    {\n      if (cb2)\n        cb2(c, data);\n      pstate = 0;\n      entry_pos = (quoted = (spaces = 0));\n    }\n    while (0);\n  }\n  else\n  {\n    p->entry_buf[entry_pos++] = c;\n  }\n  *pstate_ref = pstate;\n  *entry_pos_ref = entry_pos;\n}\n\n",
            "calle": [
                "cb1",
                "cb2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pstate_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const pstate_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_pos_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const entry_pos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct csv_parser",
                        "type": "struct csv_parser * const",
                        "definition": [
                            "struct csv_parser * const p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb1",
                        "type": "void (* const)(void *, size_t, void *)",
                        "definition": [
                            "void (* const cb1)(void *, size_t, void *)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb2",
                        "type": "void (* const)(int c, void *)",
                        "definition": [
                            "void (* const cb2)(int c, void *)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c",
                            "unsigned char c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "void * const",
                        "definition": [
                            "void * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quoted",
                        "type": "int",
                        "definition": [
                            "int quoted"
                        ]
                    },
                    {
                        "path": null,
                        "name": "spaces",
                        "type": "size_t",
                        "definition": [
                            "size_t spaces"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pstate",
                        "type": "int",
                        "definition": [
                            "int pstate = *pstate_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_pos",
                        "type": "size_t",
                        "definition": [
                            "size_t entry_pos = *entry_pos_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_csv_parse_1_3_1",
            "header": "",
            "params": [
                "int * const pstate_ref",
                "size_t * const entry_pos_ref",
                "struct csv_parser * const p",
                "void (* const cb1)(void *, size_t, void *)",
                "void * const data",
                "int quoted",
                "size_t spaces"
            ],
            "definition": "void helper_helper_helper_csv_parse_1_3_1(int * const pstate_ref, size_t * const entry_pos_ref, struct csv_parser * const p, void (* const cb1)(void *, size_t, void *), void * const data, int quoted, size_t spaces)\n{\n  int pstate = *pstate_ref;\n  size_t entry_pos = *entry_pos_ref;\n  entry_pos -= spaces + 1;\n  do\n  {\n    if (!quoted)\n      entry_pos -= spaces;\n    if (p->options & 8)\n      p->entry_buf[entry_pos] = '\\0';\n    if (((cb1 && (p->options & 16)) && (!quoted)) && (entry_pos == 0))\n      cb1(0, entry_pos, data);\n    else\n      if (cb1)\n      cb1(p->entry_buf, entry_pos, data);\n    pstate = 1;\n    entry_pos = (quoted = (spaces = 0));\n  }\n  while (0);\n  *pstate_ref = pstate;\n  *entry_pos_ref = entry_pos;\n}\n\n",
            "calle": [
                "cb1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pstate_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const pstate_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_pos_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const entry_pos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct csv_parser",
                        "type": "struct csv_parser * const",
                        "definition": [
                            "struct csv_parser * const p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb1",
                        "type": "void (* const)(void *, size_t, void *)",
                        "definition": [
                            "void (* const cb1)(void *, size_t, void *)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "void * const",
                        "definition": [
                            "void * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quoted",
                        "type": "int",
                        "definition": [
                            "int quoted"
                        ]
                    },
                    {
                        "path": null,
                        "name": "spaces",
                        "type": "size_t",
                        "definition": [
                            "size_t spaces"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pstate",
                        "type": "int",
                        "definition": [
                            "int pstate = *pstate_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_pos",
                        "type": "size_t",
                        "definition": [
                            "size_t entry_pos = *entry_pos_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_csv_parse_1_3_2",
            "header": "",
            "params": [
                "int * const quoted_ref",
                "int * const pstate_ref",
                "size_t * const spaces_ref",
                "size_t * const entry_pos_ref",
                "struct csv_parser * const p",
                "int c",
                "int c",
                "int c",
                "unsigned char c",
                "size_t pos"
            ],
            "definition": "size_t helper_helper_helper_csv_parse_1_3_2(int * const quoted_ref, int * const pstate_ref, size_t * const spaces_ref, size_t * const entry_pos_ref, struct csv_parser * const p, int c, int c, int c, unsigned char c, size_t pos)\n{\n  int quoted = *quoted_ref;\n  int pstate = *pstate_ref;\n  size_t spaces = *spaces_ref;\n  size_t entry_pos = *entry_pos_ref;\n  if (p->options & 1)\n  {\n    p->status = 1;\n    p->quoted = quoted, p->pstate = pstate, p->spaces = spaces, p->entry_pos = entry_pos;\n    return pos - 1;\n  }\n  pstate = 2;\n  spaces = 0;\n  p->entry_buf[entry_pos++] = c;\n  *quoted_ref = quoted;\n  *pstate_ref = pstate;\n  *spaces_ref = spaces;\n  *entry_pos_ref = entry_pos;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "quoted_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const quoted_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pstate_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const pstate_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "spaces_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const spaces_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_pos_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const entry_pos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct csv_parser",
                        "type": "struct csv_parser * const",
                        "definition": [
                            "struct csv_parser * const p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c",
                            "unsigned char c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quoted",
                        "type": "int",
                        "definition": [
                            "int quoted = *quoted_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pstate",
                        "type": "int",
                        "definition": [
                            "int pstate = *pstate_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "spaces",
                        "type": "size_t",
                        "definition": [
                            "size_t spaces = *spaces_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_pos",
                        "type": "size_t",
                        "definition": [
                            "size_t entry_pos = *entry_pos_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_csv_parse_1_3_3",
            "header": "",
            "params": [
                "int * const quoted_ref",
                "int * const pstate_ref",
                "size_t * const spaces_ref",
                "size_t * const entry_pos_ref",
                "struct csv_parser * const p",
                "int c",
                "int c",
                "int c",
                "unsigned char c",
                "size_t pos"
            ],
            "definition": "size_t helper_helper_helper_csv_parse_1_3_3(int * const quoted_ref, int * const pstate_ref, size_t * const spaces_ref, size_t * const entry_pos_ref, struct csv_parser * const p, int c, int c, int c, unsigned char c, size_t pos)\n{\n  int quoted = *quoted_ref;\n  int pstate = *pstate_ref;\n  size_t spaces = *spaces_ref;\n  size_t entry_pos = *entry_pos_ref;\n  if (spaces)\n  {\n    if (p->options & 1)\n    {\n      p->status = 1;\n      p->quoted = quoted, p->pstate = pstate, p->spaces = spaces, p->entry_pos = entry_pos;\n      return pos - 1;\n    }\n    spaces = 0;\n    p->entry_buf[entry_pos++] = c;\n  }\n  else\n  {\n    pstate = 2;\n  }\n  *quoted_ref = quoted;\n  *pstate_ref = pstate;\n  *spaces_ref = spaces;\n  *entry_pos_ref = entry_pos;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "quoted_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const quoted_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pstate_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const pstate_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "spaces_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const spaces_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_pos_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const entry_pos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct csv_parser",
                        "type": "struct csv_parser * const",
                        "definition": [
                            "struct csv_parser * const p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c",
                            "unsigned char c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quoted",
                        "type": "int",
                        "definition": [
                            "int quoted = *quoted_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pstate",
                        "type": "int",
                        "definition": [
                            "int pstate = *pstate_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "spaces",
                        "type": "size_t",
                        "definition": [
                            "size_t spaces = *spaces_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_pos",
                        "type": "size_t",
                        "definition": [
                            "size_t entry_pos = *entry_pos_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_csv_parse_1_3_4",
            "header": "",
            "params": [
                "int * const pstate_ref",
                "size_t * const entry_pos_ref",
                "struct csv_parser * const p",
                "void (* const cb1)(void *, size_t, void *)",
                "void (* const cb2)(int c, void *)",
                "int c",
                "int c",
                "void * const data",
                "int c",
                "unsigned char c",
                "int quoted",
                "size_t spaces"
            ],
            "definition": "void helper_helper_helper_csv_parse_1_3_4(int * const pstate_ref, size_t * const entry_pos_ref, struct csv_parser * const p, void (* const cb1)(void *, size_t, void *), void (* const cb2)(int c, void *), int c, int c, void * const data, int c, unsigned char c, int quoted, size_t spaces)\n{\n  int pstate = *pstate_ref;\n  size_t entry_pos = *entry_pos_ref;\n  entry_pos -= spaces + 1;\n  do\n  {\n    if (!quoted)\n      entry_pos -= spaces;\n    if (p->options & 8)\n      p->entry_buf[entry_pos] = '\\0';\n    if (((cb1 && (p->options & 16)) && (!quoted)) && (entry_pos == 0))\n      cb1(0, entry_pos, data);\n    else\n      if (cb1)\n      cb1(p->entry_buf, entry_pos, data);\n    pstate = 1;\n    entry_pos = (quoted = (spaces = 0));\n  }\n  while (0);\n  do\n  {\n    if (cb2)\n      cb2(c, data);\n    pstate = 0;\n    entry_pos = (quoted = (spaces = 0));\n  }\n  while (0);\n  *pstate_ref = pstate;\n  *entry_pos_ref = entry_pos;\n}\n\n",
            "calle": [
                "cb1",
                "cb2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pstate_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const pstate_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_pos_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const entry_pos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct csv_parser",
                        "type": "struct csv_parser * const",
                        "definition": [
                            "struct csv_parser * const p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb1",
                        "type": "void (* const)(void *, size_t, void *)",
                        "definition": [
                            "void (* const cb1)(void *, size_t, void *)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb2",
                        "type": "void (* const)(int c, void *)",
                        "definition": [
                            "void (* const cb2)(int c, void *)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c",
                            "unsigned char c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "void * const",
                        "definition": [
                            "void * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quoted",
                        "type": "int",
                        "definition": [
                            "int quoted"
                        ]
                    },
                    {
                        "path": null,
                        "name": "spaces",
                        "type": "size_t",
                        "definition": [
                            "size_t spaces"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pstate",
                        "type": "int",
                        "definition": [
                            "int pstate = *pstate_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry_pos",
                        "type": "size_t",
                        "definition": [
                            "size_t entry_pos = *entry_pos_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fail_parser",
            "header": "",
            "params": [
                "char *test_name",
                "char *message"
            ],
            "definition": "void fail_parser(char *test_name, char *message)\n{\n  fprintf(stderr, \"Parser test %s failed on event %d: %s\\n\", test_name, event_idx, message);\n  exit(1);\n}\n\n",
            "calle": [
                "exit",
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "test_name",
                        "type": "char *",
                        "definition": [
                            "char *test_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "message",
                        "type": "char *",
                        "definition": [
                            "char *message"
                        ]
                    },
                    {
                        "path": null,
                        "name": "event_idx",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fail_writer",
            "header": "",
            "params": [
                "char *test_name",
                "char *message"
            ],
            "definition": "void fail_writer(char *test_name, char *message)\n{\n  fprintf(stderr, \"Writer test %s failed: %s\\n\", test_name, message);\n  exit(1);\n}\n\n",
            "calle": [
                "exit",
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "test_name",
                        "type": "char *",
                        "definition": [
                            "char *test_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "message",
                        "type": "char *",
                        "definition": [
                            "char *message"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "cb1",
            "header": "",
            "params": [
                "void *data",
                "size_t len",
                "void *t"
            ],
            "definition": "void cb1(void *data, size_t len, void *t)\n{\n  char *test_name = t;\n  if (event_ptr->event_type != 1)\n  {\n    fail_parser(test_name, \"didn't expect a column\");\n  }\n  if (event_ptr->size != len)\n  {\n    fail_parser(test_name, \"actual data length doesn't match expected data length\");\n  }\n  if ((event_ptr->data == 0) || (data == 0))\n  {\n    if (event_ptr->data != data)\n    {\n      fail_parser(test_name, \"actual data doesn't match expected data\");\n    }\n  }\n  else\n    if (memcmp(event_ptr->data, data, len) != 0)\n  {\n    fail_parser(test_name, \"actual data doesn't match expected data\");\n  }\n  event_idx += 1;\n  event_ptr += 1;\n  col += 1;\n}\n\n",
            "calle": [
                "fail_parser",
                "memcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "void *",
                        "definition": [
                            "void *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "void *",
                        "definition": [
                            "void *t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "test_name",
                        "type": "char *",
                        "definition": [
                            "char *test_name = t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "event_idx",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "col",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "cb2",
            "header": "",
            "params": [
                "int c",
                "void *t"
            ],
            "definition": "void cb2(int c, void *t)\n{\n  char *test_name = t;\n  if (event_ptr->event_type != 2)\n  {\n    fail_parser(test_name, \"didn't expect end of row\");\n  }\n  if (event_ptr->retval != c)\n  {\n    fail_parser(test_name, \"row ended with unexpected character\");\n  }\n  event_idx += 1;\n  event_ptr += 1;\n  col = 1;\n  row += 1;\n}\n\n",
            "calle": [
                "fail_parser"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "void *",
                        "definition": [
                            "void *t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "test_name",
                        "type": "char *",
                        "definition": [
                            "char *test_name = t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "event_idx",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "col",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "row",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_parser",
            "header": "",
            "params": [
                "char *test_name",
                "unsigned char options",
                "void *input",
                "size_t len",
                "struct event expected[]",
                "char delimiter",
                "char quote",
                "int (*space_func)(unsigned char)",
                "int (*term_func)(unsigned char)"
            ],
            "definition": "void test_parser(char *test_name, unsigned char options, void *input, size_t len, struct event expected[], char delimiter, char quote, int (*space_func)(unsigned char), int (*term_func)(unsigned char))\n{\n  int result = 0;\n  size_t retval;\n  struct csv_parser p;\n  size_t size;\n  for (size = 1; size <= len; size += 1)\n  {\n    helper_test_parser_1(&result, &retval, test_name, options, input, len, expected, delimiter, quote, space_func, term_func, p, size);\n  }\n\n}\n\n",
            "calle": [
                "helper_test_parser_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "test_name",
                        "type": "char *",
                        "definition": [
                            "char *test_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "void *",
                        "definition": [
                            "void *input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "expected",
                        "type": "struct event []",
                        "definition": [
                            "struct event expected[]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "delimiter",
                        "type": "char",
                        "definition": [
                            "char delimiter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quote",
                        "type": "char",
                        "definition": [
                            "char quote"
                        ]
                    },
                    {
                        "path": null,
                        "name": "space_func",
                        "type": "int (*)(unsigned char)",
                        "definition": [
                            "int (*space_func)(unsigned char)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "term_func",
                        "type": "int (*)(unsigned char)",
                        "definition": [
                            "int (*term_func)(unsigned char)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "int",
                        "definition": [
                            "int result = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval",
                        "type": "size_t",
                        "definition": [
                            "size_t retval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "struct csv_parser",
                        "definition": [
                            "struct csv_parser p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_writer",
            "header": "",
            "params": [
                "char *test_name",
                "char *input",
                "size_t input_len",
                "char *expected",
                "size_t expected_len"
            ],
            "definition": "void test_writer(char *test_name, char *input, size_t input_len, char *expected, size_t expected_len)\n{\n  size_t actual_len;\n  char *temp = malloc((input_len * 2) + 2);\n  if (!temp)\n  {\n    fprintf(stderr, \"Failed to allocate memory in test_writer!\\n\");\n    exit(1);\n  }\n  actual_len = csv_write(temp, (input_len * 2) + 2, input, input_len);\n  if (actual_len != expected_len)\n  {\n    fail_writer(test_name, \"actual length doesn't match expected length\");\n  }\n  if (memcmp(temp, expected, actual_len) != 0)\n  {\n    fail_writer(test_name, \"actual data doesn't match expected data\");\n  }\n}\n\n",
            "calle": [
                "csv_write",
                "exit",
                "fail_writer",
                "fprintf",
                "malloc",
                "memcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "test_name",
                        "type": "char *",
                        "definition": [
                            "char *test_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "char *",
                        "definition": [
                            "char *input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_len",
                        "type": "size_t",
                        "definition": [
                            "size_t input_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "expected",
                        "type": "char *",
                        "definition": [
                            "char *expected"
                        ]
                    },
                    {
                        "path": null,
                        "name": "expected_len",
                        "type": "size_t",
                        "definition": [
                            "size_t expected_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "actual_len",
                        "type": "size_t",
                        "definition": [
                            "size_t actual_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "temp",
                        "type": "char *",
                        "definition": [
                            "char *temp = malloc((input_len * 2) + 2)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_writer2",
            "header": "",
            "params": [
                "char *test_name",
                "char *input",
                "size_t input_len",
                "char *expected",
                "size_t expected_len",
                "char quote"
            ],
            "definition": "void test_writer2(char *test_name, char *input, size_t input_len, char *expected, size_t expected_len, char quote)\n{\n  size_t actual_len;\n  char *temp = malloc((input_len * 2) + 2);\n  if (!temp)\n  {\n    fprintf(stderr, \"Failed to allocate memory in test_writer!\\n\");\n    exit(1);\n  }\n  actual_len = csv_write2(temp, (input_len * 2) + 2, input, input_len, quote);\n  if (actual_len != expected_len)\n  {\n    fail_writer(test_name, \"actual length doesn't match expected length\");\n  }\n  if (memcmp(temp, expected, actual_len) != 0)\n  {\n    fail_writer(test_name, \"actual data doesn't match expected data\");\n  }\n}\n\n",
            "calle": [
                "csv_write2",
                "exit",
                "fail_writer",
                "fprintf",
                "malloc",
                "memcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "test_name",
                        "type": "char *",
                        "definition": [
                            "char *test_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "char *",
                        "definition": [
                            "char *input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_len",
                        "type": "size_t",
                        "definition": [
                            "size_t input_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "expected",
                        "type": "char *",
                        "definition": [
                            "char *expected"
                        ]
                    },
                    {
                        "path": null,
                        "name": "expected_len",
                        "type": "size_t",
                        "definition": [
                            "size_t expected_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quote",
                        "type": "char",
                        "definition": [
                            "char quote"
                        ]
                    },
                    {
                        "path": null,
                        "name": "actual_len",
                        "type": "size_t",
                        "definition": [
                            "size_t actual_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "temp",
                        "type": "char *",
                        "definition": [
                            "char *temp = malloc((input_len * 2) + 2)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#test_csv",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "int main(void)\n{\n  char test01_data[] = \" 1,2 ,  3         ,4,5\\x0d\\x0a\";\n  char test02_data[] = \",,,,,\\x0a\";\n  char test03_data[] = \"\\\",\\\",\\\",\\\",\\\"\\\"\";\n  char test04_data[] = \"\\\"I call our world Flatland,\\x0anot because we call it so,\\x0abut to make its nature clearer\\x0ato you, my happy readers,\\x0awho are privileged to live in Space.\\\"\";\n  char test05_data[] = \"\\\"\\\"\\\"a,b\\\"\\\"\\\",,\\\" \\\"\\\"\\\"\\\" \\\",\\\"\\\"\\\"\\\"\\\" \\\",\\\" \\\"\\\"\\\"\\\"\\\",\\\"\\\"\\\"\\\"\\\"\\\"\";\n  char test06_data[] = \"\\\" a, b ,c \\\", a b  c,\";\n  char test07_data[] = \"\\\" \\\"\\\" \\\" \\\" \\\"\\\" \\\"\";\n  char test07b_data[] = \"\\\" \\\"\\\" \\\" \\\" \\\"\\\" \\\"\";\n  char test08_data[] = \"\\\" abc\\\"                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \\\", \\\"123\\\"\";\n  char test09_data[] = \"\";\n  char test10_data[] = \"a\\x0a\";\n  char test11_data[] = \"1,2 ,3,4\\x0a\";\n  char test12_data[] = \"\\x0a\\x0a\\x0a\\x0a\";\n  char test12b_data[] = \"\\x0a\\x0a\\x0a\\x0a\";\n  char test13_data[] = \"\\\"abc\\\"\";\n  char test14_data[] = \"1, 2, 3,\\x0a\\x0d\\x0a  \\\"4\\\", \\x0d,\";\n  char test15_data[] = \"1, 2, 3,\\x0a\\x0d\\x0a  \\\"4\\\", \\x0d\\\"\\\"\";\n  char test16_data[] = \"\\\"1\\\",\\\"2\\\",\\\" 3 \";\n  char test16b_data[] = \"\\\"1\\\",\\\"2\\\",\\\" 3 \";\n  char test17_data[] = \" a\\0b\\0c \";\n  char test18_data[] = \"12345678901234567890123456789012\";\n  char test19_data[] = \"  , \\\"\\\" ,\";\n  char custom01_data[] = \"'''a;b''';;' '''' ';''''' ';' ''''';''''''\";\n  struct event test01_results[] = {{1, 0, 1, \"1\"}, {1, 0, 1, \"2\"}, {1, 0, 1, \"3\"}, {1, 0, 1, \"4\"}, {1, 0, 1, \"5\"}, {2, '\\x0d', 1, 0}, {0, 0, 0, 0}};\n  struct event test02_results[] = {{1, 0, 0, \"\"}, {1, 0, 0, \"\"}, {1, 0, 0, \"\"}, {1, 0, 0, \"\"}, {1, 0, 0, \"\"}, {1, 0, 0, \"\"}, {2, '\\x0a', 1, 0}, {0, 0, 0, 0}};\n  struct event test03_results[] = {{1, 0, 1, \",\"}, {1, 0, 1, \",\"}, {1, 0, 0, \"\"}, {2, -1, 1, 0}, {0, 0, 0, 0}};\n  struct event test04_results[] = {{1, 0, 147, \"I call our world Flatland,\\x0anot because we call it so,\\x0abut to make its nature clearer\\x0ato you, my happy readers,\\x0awho are privileged to live in Space.\"}, {2, -1, 1, 0}, {0, 0, 0, 0}};\n  struct event test05_results[] = {{1, 0, 5, \"\\\"a,b\\\"\"}, {1, 0, 0, \"\"}, {1, 0, 4, \" \\\"\\\" \"}, {1, 0, 3, \"\\\"\\\" \"}, {1, 0, 3, \" \\\"\\\"\"}, {1, 0, 2, \"\\\"\\\"\"}, {2, -1, 1, 0}, {0, 0, 0, 0}};\n  struct event test06_results[] = {{1, 0, 9, \" a, b ,c \"}, {1, 0, 6, \"a b  c\"}, {1, 0, 0, \"\"}, {2, -1, 1, 0}, {0, 0, 0, 0}};\n  struct event test07_results[] = {{1, 0, 9, \" \\\" \\\" \\\" \\\" \"}, {2, -1, 1, 0}, {0, 0, 0, 0}};\n  struct event test07b_results[] = {{3, 0, 0, 0}};\n  struct event test08_results[] = {{1, 0, 463, \" abc\\\"                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \"}, {1, 0, 3, \"123\"}, {2, -1, 1, 0}, {0, 0, 0, 0}};\n  struct event test09_results[] = {{0, 0, 0, 0}};\n  struct event test10_results[] = {{1, 0, 1, \"a\"}, {2, '\\x0a', 1, 0}, {0, 0, 0, 0}};\n  struct event test11_results[] = {{1, 0, 1, \"1\"}, {1, 0, 1, \"2\"}, {1, 0, 1, \"3\"}, {1, 0, 1, \"4\"}, {2, '\\x0a', 1, 0}, {0, 0, 0, 0}};\n  struct event test12_results[] = {{0, 0, 0, 0}};\n  struct event test12b_results[] = {{2, '\\x0a', 1, 0}, {2, '\\x0a', 1, 0}, {2, '\\x0a', 1, 0}, {2, '\\x0a', 1, 0}, {0, 0, 0, 0}};\n  struct event test13_results[] = {{1, 0, 3, \"abc\"}, {2, -1, 1, 0}, {0, 0, 0, 0}};\n  struct event test14_results[] = {{1, 0, 1, \"1\"}, {1, 0, 1, \"2\"}, {1, 0, 1, \"3\"}, {1, 0, 0, \"\"}, {2, '\\x0a', 1, 0}, {1, 0, 1, \"4\"}, {1, 0, 0, \"\"}, {2, '\\x0d', 1, 0}, {1, 0, 0, \"\"}, {1, 0, 0, \"\"}, {2, -1, 0, 0}, {0, 0, 0, 0}};\n  struct event test15_results[] = {{1, 0, 1, \"1\"}, {1, 0, 1, \"2\"}, {1, 0, 1, \"3\"}, {1, 0, 0, \"\"}, {2, '\\x0a', 1, 0}, {1, 0, 1, \"4\"}, {1, 0, 0, \"\"}, {2, '\\x0d', 1, 0}, {1, 0, 0, \"\"}, {2, -1, 0, 0}, {0, 0, 0, 0}};\n  struct event test16_results[] = {{1, 0, 1, \"1\"}, {1, 0, 1, \"2\"}, {1, 0, 3, \" 3 \"}, {2, -1, 1, 0}, {0, 0, 0, 0}};\n  struct event test16b_results[] = {{1, 0, 1, \"1\"}, {1, 0, 1, \"2\"}, {3, 0, 0, 0}};\n  struct event test17_results[] = {{1, 0, 5, \"a\\0b\\0c\"}, {2, -1, 1, 0}, {0, 0, 0, 0}};\n  struct event test19_results[] = {{1, 0, 0, 0}, {1, 0, 0, \"\"}, {1, 0, 0, 0}, {2, -1, 1, 0}, {0, 0, 0, 0}};\n  struct event custom01_results[] = {{1, 0, 5, \"'a;b'\"}, {1, 0, 0, \"\"}, {1, 0, 4, \" '' \"}, {1, 0, 3, \"'' \"}, {1, 0, 3, \" ''\"}, {1, 0, 2, \"''\"}, {2, -1, 1, 0}, {0, 0, 0, 0}};\n  test_parser(\"test01\", 0, test01_data, (sizeof(test01_data)) - 1, test01_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test01\", 1, test01_data, (sizeof(test01_data)) - 1, test01_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test01\", 1 | 16, test01_data, (sizeof(test01_data)) - 1, test01_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test02\", 0, test02_data, (sizeof(test02_data)) - 1, test02_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test02\", 1, test02_data, (sizeof(test02_data)) - 1, test02_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test03\", 0, test03_data, (sizeof(test03_data)) - 1, test03_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test03\", 1, test03_data, (sizeof(test03_data)) - 1, test03_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test04\", 0, test04_data, (sizeof(test04_data)) - 1, test04_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test04\", 1, test04_data, (sizeof(test04_data)) - 1, test04_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test05\", 0, test05_data, (sizeof(test05_data)) - 1, test05_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test05\", 1, test05_data, (sizeof(test05_data)) - 1, test05_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test05\", 1 | 4, test05_data, (sizeof(test05_data)) - 1, test05_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test06\", 0, test06_data, (sizeof(test06_data)) - 1, test06_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test06\", 1, test06_data, (sizeof(test06_data)) - 1, test06_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test07\", 0, test07_data, (sizeof(test07_data)) - 1, test07_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test07b\", 1, test07b_data, (sizeof(test07b_data)) - 1, test07b_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test08\", 0, test08_data, (sizeof(test08_data)) - 1, test08_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test09\", 0, test09_data, (sizeof(test09_data)) - 1, test09_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test09\", 16, test09_data, (sizeof(test09_data)) - 1, test09_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test10\", 0, test10_data, (sizeof(test10_data)) - 1, test10_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test11\", 0, test11_data, (sizeof(test11_data)) - 1, test11_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test11\", 16, test11_data, (sizeof(test11_data)) - 1, test11_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test12\", 0, test12_data, (sizeof(test12_data)) - 1, test12_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test12\", 16, test12_data, (sizeof(test12_data)) - 1, test12_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test12b\", 2, test12b_data, (sizeof(test12b_data)) - 1, test12b_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test12b\", 2 | 16, test12b_data, (sizeof(test12b_data)) - 1, test12b_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test13\", 0, test13_data, (sizeof(test13_data)) - 1, test13_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test14\", 0, test14_data, (sizeof(test14_data)) - 1, test14_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test14\", 1, test14_data, (sizeof(test14_data)) - 1, test14_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test15\", 0, test15_data, (sizeof(test15_data)) - 1, test15_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test15\", 1, test15_data, (sizeof(test15_data)) - 1, test15_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test16\", 0, test16_data, (sizeof(test16_data)) - 1, test16_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test16\", 1, test16_data, (sizeof(test16_data)) - 1, test16_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test16b\", 1 | 4, test16b_data, (sizeof(test16b_data)) - 1, test16b_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test16\", 0, test16_data, (sizeof(test16_data)) - 1, test16_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test16\", 1, test16_data, (sizeof(test16_data)) - 1, test16_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test17\", 0, test17_data, (sizeof(test17_data)) - 1, test17_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test17\", 1, test17_data, (sizeof(test17_data)) - 1, test17_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test17\", 1 | 16, test17_data, (sizeof(test17_data)) - 1, test17_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"test19\", 16, test19_data, (sizeof(test19_data)) - 1, test19_results, 0x2c, 0x22, 0, 0);\n  test_parser(\"custom01\", 0, custom01_data, (sizeof(custom01_data)) - 1, custom01_results, ';', '\\'', 0, 0);\n  test_writer(\"1\", \"abc\", 3, \"\\\"abc\\\"\", 5);\n  test_writer(\"2\", \"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\", 8, \"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\", 18);\n  test_writer2(\"1\", \"abc\", 3, \"'abc'\", 5, '\\'');\n  test_writer2(\"2\", \"''''''''\", 8, \"''''''''''''''''''\", 18, '\\'');\n  puts(\"All tests passed\");\n  return 0;\n}\n\n",
            "calle": [
                "puts",
                "test_parser",
                "test_writer",
                "test_writer2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "test01_data",
                        "type": "char []",
                        "definition": [
                            "char test01_data[] = \" 1,2 ,  3         ,4,5\\x0d\\x0a\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "test02_data",
                        "type": "char []",
                        "definition": [
                            "char test02_data[] = \",,,,,\\x0a\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "test03_data",
                        "type": "char []",
                        "definition": [
                            "char test03_data[] = \"\\\",\\\",\\\",\\\",\\\"\\\"\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "test04_data",
                        "type": "char []",
                        "definition": [
                            "char test04_data[] = \"\\\"I call our world Flatland,\\x0anot because we call it so,\\x0abut to make its nature clearer\\x0ato you, my happy readers,\\x0awho are privileged to live in Space.\\\"\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "test05_data",
                        "type": "char []",
                        "definition": [
                            "char test05_data[] = \"\\\"\\\"\\\"a,b\\\"\\\"\\\",,\\\" \\\"\\\"\\\"\\\" \\\",\\\"\\\"\\\"\\\"\\\" \\\",\\\" \\\"\\\"\\\"\\\"\\\",\\\"\\\"\\\"\\\"\\\"\\\"\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "test06_data",
                        "type": "char []",
                        "definition": [
                            "char test06_data[] = \"\\\" a, b ,c \\\", a b  c,\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "test07_data",
                        "type": "char []",
                        "definition": [
                            "char test07_data[] = \"\\\" \\\"\\\" \\\" \\\" \\\"\\\" \\\"\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "test07b_data",
                        "type": "char []",
                        "definition": [
                            "char test07b_data[] = \"\\\" \\\"\\\" \\\" \\\" \\\"\\\" \\\"\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "test08_data",
                        "type": "char []",
                        "definition": [
                            "char test08_data[] = \"\\\" abc\\\"                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \\\", \\\"123\\\"\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "test09_data",
                        "type": "char []",
                        "definition": [
                            "char test09_data[] = \"\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "test10_data",
                        "type": "char []",
                        "definition": [
                            "char test10_data[] = \"a\\x0a\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "test11_data",
                        "type": "char []",
                        "definition": [
                            "char test11_data[] = \"1,2 ,3,4\\x0a\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "test12_data",
                        "type": "char []",
                        "definition": [
                            "char test12_data[] = \"\\x0a\\x0a\\x0a\\x0a\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "test12b_data",
                        "type": "char []",
                        "definition": [
                            "char test12b_data[] = \"\\x0a\\x0a\\x0a\\x0a\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "test13_data",
                        "type": "char []",
                        "definition": [
                            "char test13_data[] = \"\\\"abc\\\"\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "test14_data",
                        "type": "char []",
                        "definition": [
                            "char test14_data[] = \"1, 2, 3,\\x0a\\x0d\\x0a  \\\"4\\\", \\x0d,\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "test15_data",
                        "type": "char []",
                        "definition": [
                            "char test15_data[] = \"1, 2, 3,\\x0a\\x0d\\x0a  \\\"4\\\", \\x0d\\\"\\\"\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "test16_data",
                        "type": "char []",
                        "definition": [
                            "char test16_data[] = \"\\\"1\\\",\\\"2\\\",\\\" 3 \""
                        ]
                    },
                    {
                        "path": null,
                        "name": "test16b_data",
                        "type": "char []",
                        "definition": [
                            "char test16b_data[] = \"\\\"1\\\",\\\"2\\\",\\\" 3 \""
                        ]
                    },
                    {
                        "path": null,
                        "name": "test17_data",
                        "type": "char []",
                        "definition": [
                            "char test17_data[] = \" a\\0b\\0c \""
                        ]
                    },
                    {
                        "path": null,
                        "name": "test18_data",
                        "type": "char []",
                        "definition": [
                            "char test18_data[] = \"12345678901234567890123456789012\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "test19_data",
                        "type": "char []",
                        "definition": [
                            "char test19_data[] = \"  , \\\"\\\" ,\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "custom01_data",
                        "type": "char []",
                        "definition": [
                            "char custom01_data[] = \"'''a;b''';;' '''' ';''''' ';' ''''';''''''\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "test01_results",
                        "type": "struct event []",
                        "definition": [
                            "struct event test01_results[] = {{1, 0, 1, \"1\"}, {1, 0, 1, \"2\"}, {1, 0, 1, \"3\"}, {1, 0, 1, \"4\"}, {1, 0, 1, \"5\"}, {2, '\\x0d', 1, 0}, {0, 0, 0, 0}}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "test02_results",
                        "type": "struct event []",
                        "definition": [
                            "struct event test02_results[] = {{1, 0, 0, \"\"}, {1, 0, 0, \"\"}, {1, 0, 0, \"\"}, {1, 0, 0, \"\"}, {1, 0, 0, \"\"}, {1, 0, 0, \"\"}, {2, '\\x0a', 1, 0}, {0, 0, 0, 0}}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "test03_results",
                        "type": "struct event []",
                        "definition": [
                            "struct event test03_results[] = {{1, 0, 1, \",\"}, {1, 0, 1, \",\"}, {1, 0, 0, \"\"}, {2, -1, 1, 0}, {0, 0, 0, 0}}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "test04_results",
                        "type": "struct event []",
                        "definition": [
                            "struct event test04_results[] = {{1, 0, 147, \"I call our world Flatland,\\x0anot because we call it so,\\x0abut to make its nature clearer\\x0ato you, my happy readers,\\x0awho are privileged to live in Space.\"}, {2, -1, 1, 0}, {0, 0, 0, 0}}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "test05_results",
                        "type": "struct event []",
                        "definition": [
                            "struct event test05_results[] = {{1, 0, 5, \"\\\"a,b\\\"\"}, {1, 0, 0, \"\"}, {1, 0, 4, \" \\\"\\\" \"}, {1, 0, 3, \"\\\"\\\" \"}, {1, 0, 3, \" \\\"\\\"\"}, {1, 0, 2, \"\\\"\\\"\"}, {2, -1, 1, 0}, {0, 0, 0, 0}}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "test06_results",
                        "type": "struct event []",
                        "definition": [
                            "struct event test06_results[] = {{1, 0, 9, \" a, b ,c \"}, {1, 0, 6, \"a b  c\"}, {1, 0, 0, \"\"}, {2, -1, 1, 0}, {0, 0, 0, 0}}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "test07_results",
                        "type": "struct event []",
                        "definition": [
                            "struct event test07_results[] = {{1, 0, 9, \" \\\" \\\" \\\" \\\" \"}, {2, -1, 1, 0}, {0, 0, 0, 0}}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "test07b_results",
                        "type": "struct event []",
                        "definition": [
                            "struct event test07b_results[] = {{3, 0, 0, 0}}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "test08_results",
                        "type": "struct event []",
                        "definition": [
                            "struct event test08_results[] = {{1, 0, 463, \" abc\\\"                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \"}, {1, 0, 3, \"123\"}, {2, -1, 1, 0}, {0, 0, 0, 0}}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "test09_results",
                        "type": "struct event []",
                        "definition": [
                            "struct event test09_results[] = {{0, 0, 0, 0}}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "test10_results",
                        "type": "struct event []",
                        "definition": [
                            "struct event test10_results[] = {{1, 0, 1, \"a\"}, {2, '\\x0a', 1, 0}, {0, 0, 0, 0}}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "test11_results",
                        "type": "struct event []",
                        "definition": [
                            "struct event test11_results[] = {{1, 0, 1, \"1\"}, {1, 0, 1, \"2\"}, {1, 0, 1, \"3\"}, {1, 0, 1, \"4\"}, {2, '\\x0a', 1, 0}, {0, 0, 0, 0}}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "test12_results",
                        "type": "struct event []",
                        "definition": [
                            "struct event test12_results[] = {{0, 0, 0, 0}}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "test12b_results",
                        "type": "struct event []",
                        "definition": [
                            "struct event test12b_results[] = {{2, '\\x0a', 1, 0}, {2, '\\x0a', 1, 0}, {2, '\\x0a', 1, 0}, {2, '\\x0a', 1, 0}, {0, 0, 0, 0}}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "test13_results",
                        "type": "struct event []",
                        "definition": [
                            "struct event test13_results[] = {{1, 0, 3, \"abc\"}, {2, -1, 1, 0}, {0, 0, 0, 0}}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "test14_results",
                        "type": "struct event []",
                        "definition": [
                            "struct event test14_results[] = {{1, 0, 1, \"1\"}, {1, 0, 1, \"2\"}, {1, 0, 1, \"3\"}, {1, 0, 0, \"\"}, {2, '\\x0a', 1, 0}, {1, 0, 1, \"4\"}, {1, 0, 0, \"\"}, {2, '\\x0d', 1, 0}, {1, 0, 0, \"\"}, {1, 0, 0, \"\"}, {2, -1, 0, 0}, {0, 0, 0, 0}}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "test15_results",
                        "type": "struct event []",
                        "definition": [
                            "struct event test15_results[] = {{1, 0, 1, \"1\"}, {1, 0, 1, \"2\"}, {1, 0, 1, \"3\"}, {1, 0, 0, \"\"}, {2, '\\x0a', 1, 0}, {1, 0, 1, \"4\"}, {1, 0, 0, \"\"}, {2, '\\x0d', 1, 0}, {1, 0, 0, \"\"}, {2, -1, 0, 0}, {0, 0, 0, 0}}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "test16_results",
                        "type": "struct event []",
                        "definition": [
                            "struct event test16_results[] = {{1, 0, 1, \"1\"}, {1, 0, 1, \"2\"}, {1, 0, 3, \" 3 \"}, {2, -1, 1, 0}, {0, 0, 0, 0}}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "test16b_results",
                        "type": "struct event []",
                        "definition": [
                            "struct event test16b_results[] = {{1, 0, 1, \"1\"}, {1, 0, 1, \"2\"}, {3, 0, 0, 0}}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "test17_results",
                        "type": "struct event []",
                        "definition": [
                            "struct event test17_results[] = {{1, 0, 5, \"a\\0b\\0c\"}, {2, -1, 1, 0}, {0, 0, 0, 0}}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "test19_results",
                        "type": "struct event []",
                        "definition": [
                            "struct event test19_results[] = {{1, 0, 0, 0}, {1, 0, 0, \"\"}, {1, 0, 0, 0}, {2, -1, 1, 0}, {0, 0, 0, 0}}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "custom01_results",
                        "type": "struct event []",
                        "definition": [
                            "struct event custom01_results[] = {{1, 0, 5, \"'a;b'\"}, {1, 0, 0, \"\"}, {1, 0, 4, \" '' \"}, {1, 0, 3, \"'' \"}, {1, 0, 3, \" ''\"}, {1, 0, 2, \"''\"}, {2, -1, 1, 0}, {0, 0, 0, 0}}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_test_parser_1",
            "header": "",
            "params": [
                "int * const result_ref",
                "size_t * const retval_ref",
                "char * const test_name",
                "unsigned char options",
                "void * const input",
                "size_t len",
                "struct event expected[]",
                "char delimiter",
                "char quote",
                "int (* const space_func)(unsigned char)",
                "int (* const term_func)(unsigned char)",
                "struct csv_parser p",
                "size_t size"
            ],
            "definition": "void helper_test_parser_1(int * const result_ref, size_t * const retval_ref, char * const test_name, unsigned char options, void * const input, size_t len, struct event expected[], char delimiter, char quote, int (* const space_func)(unsigned char), int (* const term_func)(unsigned char), struct csv_parser p, size_t size)\n{\n  int result = *result_ref;\n  size_t retval = *retval_ref;\n  size_t bytes_processed = 0;\n  csv_init(&p, options);\n  csv_set_delim(&p, delimiter);\n  csv_set_quote(&p, quote);\n  csv_set_space_func(&p, space_func);\n  csv_set_term_func(&p, term_func);\n  row = (col = 1);\n  event_ptr = &expected[0];\n  event_idx = 1;\n  do\n  {\n    helper_helper_test_parser_1_1(&retval, &bytes_processed, test_name, input, len, p, size);\n  }\n  while (bytes_processed < len);\n  result = csv_fini(&p, cb1, cb2, test_name);\n  if (result != 0)\n  {\n    if (event_ptr->event_type != 3)\n    {\n      fail_parser(test_name, \"unexpected parse error occurred\");\n    }\n    else\n    {\n      csv_free(&p);\n      return;\n    }\n  }\n  csv_free(&p);\n  if (event_ptr->event_type != 0)\n  {\n    fail_parser(test_name, \"unexpected end of input\");\n  }\n  *result_ref = result;\n  *retval_ref = retval;\n}\n\n",
            "calle": [
                "cb1",
                "cb2",
                "csv_fini",
                "csv_free",
                "csv_init",
                "csv_set_delim",
                "csv_set_quote",
                "csv_set_space_func",
                "csv_set_term_func",
                "fail_parser",
                "helper_helper_test_parser_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "result_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const result_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const retval_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "test_name",
                        "type": "char * const",
                        "definition": [
                            "char * const test_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "void * const",
                        "definition": [
                            "void * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "expected",
                        "type": "struct event []",
                        "definition": [
                            "struct event expected[]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "delimiter",
                        "type": "char",
                        "definition": [
                            "char delimiter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quote",
                        "type": "char",
                        "definition": [
                            "char quote"
                        ]
                    },
                    {
                        "path": null,
                        "name": "space_func",
                        "type": "int (* const)(unsigned char)",
                        "definition": [
                            "int (* const space_func)(unsigned char)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "term_func",
                        "type": "int (* const)(unsigned char)",
                        "definition": [
                            "int (* const term_func)(unsigned char)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "struct csv_parser",
                        "definition": [
                            "struct csv_parser p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "int",
                        "definition": [
                            "int result = *result_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval",
                        "type": "size_t",
                        "definition": [
                            "size_t retval = *retval_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bytes_processed",
                        "type": "size_t",
                        "definition": [
                            "size_t bytes_processed = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "col",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "event_idx",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_test_parser_1_1",
            "header": "",
            "params": [
                "size_t * const retval_ref",
                "size_t * const bytes_processed_ref",
                "char * const test_name",
                "void * const input",
                "size_t len",
                "struct csv_parser p",
                "size_t size"
            ],
            "definition": "void helper_helper_test_parser_1_1(size_t * const retval_ref, size_t * const bytes_processed_ref, char * const test_name, void * const input, size_t len, struct csv_parser p, size_t size)\n{\n  size_t retval = *retval_ref;\n  size_t bytes_processed = *bytes_processed_ref;\n  size_t bytes = (size < (len - bytes_processed)) ? (size) : (len - bytes_processed);\n  retval = csv_parse(&p, input + bytes_processed, bytes, cb1, cb2, test_name);\n  if (retval != bytes)\n  {\n    if (event_ptr->event_type != 3)\n    {\n      fail_parser(test_name, \"unexpected parse error occurred\");\n    }\n    else\n    {\n      csv_free(&p);\n      return;\n    }\n  }\n  bytes_processed += bytes;\n  *retval_ref = retval;\n  *bytes_processed_ref = bytes_processed;\n}\n\n",
            "calle": [
                "cb1",
                "cb2",
                "csv_free",
                "csv_parse",
                "fail_parser"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "retval_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const retval_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bytes_processed_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const bytes_processed_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "test_name",
                        "type": "char * const",
                        "definition": [
                            "char * const test_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "void * const",
                        "definition": [
                            "void * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "struct csv_parser",
                        "definition": [
                            "struct csv_parser p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval",
                        "type": "size_t",
                        "definition": [
                            "size_t retval = *retval_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bytes_processed",
                        "type": "size_t",
                        "definition": [
                            "size_t bytes_processed = *bytes_processed_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bytes",
                        "type": "size_t",
                        "definition": [
                            "size_t bytes = (size < (len - bytes_processed)) ? (size) : (len - bytes_processed)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        }
    ],
    "typedefs": []
}