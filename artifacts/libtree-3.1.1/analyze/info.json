{
    "special_type": [
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct \n{\n} glob_t",
            "name": "glob_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct header_64_t\n{\n  uint16_t e_type;\n  uint16_t e_machine;\n  uint32_t e_version;\n  uint64_t e_entry;\n  uint64_t e_phoff;\n  uint64_t e_shoff;\n  uint32_t e_flags;\n  uint16_t e_ehsize;\n  uint16_t e_phentsize;\n  uint16_t e_phnum;\n  uint16_t e_shentsize;\n  uint16_t e_shnum;\n  uint16_t e_shstrndx;\n}",
            "name": "header_64_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "e_type",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t e_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e_machine",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t e_machine"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e_version",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t e_version"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e_entry",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t e_entry"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e_phoff",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t e_phoff"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e_shoff",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t e_shoff"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e_flags",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t e_flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e_ehsize",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t e_ehsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e_phentsize",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t e_phentsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e_phnum",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t e_phnum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e_shentsize",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t e_shentsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e_shnum",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t e_shnum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e_shstrndx",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t e_shstrndx"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct header_32_t\n{\n  uint16_t e_type;\n  uint16_t e_machine;\n  uint32_t e_version;\n  uint32_t e_entry;\n  uint32_t e_phoff;\n  uint32_t e_shoff;\n  uint32_t e_flags;\n  uint16_t e_ehsize;\n  uint16_t e_phentsize;\n  uint16_t e_phnum;\n  uint16_t e_shentsize;\n  uint16_t e_shnum;\n  uint16_t e_shstrndx;\n}",
            "name": "header_32_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "e_type",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t e_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e_machine",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t e_machine"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e_version",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t e_version"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e_entry",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t e_entry"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e_phoff",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t e_phoff"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e_shoff",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t e_shoff"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e_flags",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t e_flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e_ehsize",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t e_ehsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e_phentsize",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t e_phentsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e_phnum",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t e_phnum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e_shentsize",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t e_shentsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e_shnum",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t e_shnum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e_shstrndx",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t e_shstrndx"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct prog_64_t\n{\n  uint32_t p_type;\n  uint32_t p_flags;\n  uint64_t p_offset;\n  uint64_t p_vaddr;\n  uint64_t p_paddr;\n  uint64_t p_filesz;\n  uint64_t p_memsz;\n  uint64_t p_align;\n}",
            "name": "prog_64_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p_type",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t p_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_flags",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t p_flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_offset",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t p_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_vaddr",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t p_vaddr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_paddr",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t p_paddr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_filesz",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t p_filesz"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_memsz",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t p_memsz"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_align",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t p_align"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct prog_32_t\n{\n  uint32_t p_type;\n  uint32_t p_offset;\n  uint32_t p_vaddr;\n  uint32_t p_paddr;\n  uint32_t p_filesz;\n  uint32_t p_memsz;\n  uint32_t p_flags;\n  uint32_t p_align;\n}",
            "name": "prog_32_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p_type",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t p_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_offset",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t p_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_vaddr",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t p_vaddr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_paddr",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t p_paddr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_filesz",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t p_filesz"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_memsz",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t p_memsz"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_flags",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t p_flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_align",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t p_align"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct dyn_64_t\n{\n  int64_t d_tag;\n  uint64_t d_val;\n}",
            "name": "dyn_64_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "d_tag",
                        "type": "int64_t",
                        "definition": [
                            "int64_t d_tag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_val",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t d_val"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct dyn_32_t\n{\n  int32_t d_tag;\n  uint32_t d_val;\n}",
            "name": "dyn_32_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "d_tag",
                        "type": "int32_t",
                        "definition": [
                            "int32_t d_tag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_val",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t d_val"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct compat_t\n{\n  char any;\n  uint8_t class;\n  uint16_t machine;\n}",
            "name": "compat_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "any",
                        "type": "char",
                        "definition": [
                            "char any"
                        ]
                    },
                    {
                        "path": null,
                        "name": "class",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t class"
                        ]
                    },
                    {
                        "path": null,
                        "name": "machine",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t machine"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "typedef enum \n{\n  INPUT,\n  DIRECT,\n  RPATH,\n  LD_LIBRARY_PATH,\n  RUNPATH,\n  LD_SO_CONF,\n  DEFAULT\n} how_t",
            "name": "how_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct found_t\n{\n  how_t how;\n  size_t depth;\n}",
            "name": "found_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "how",
                        "type": "how_t",
                        "definition": [
                            "how_t how"
                        ]
                    },
                    {
                        "path": null,
                        "name": "depth",
                        "type": "size_t",
                        "definition": [
                            "size_t depth"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct string_table_t\n{\n  char *arr;\n  size_t n;\n  size_t capacity;\n}",
            "name": "string_table_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "arr",
                        "type": "char *",
                        "definition": [
                            "char *arr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "size_t",
                        "definition": [
                            "size_t n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "capacity",
                        "type": "size_t",
                        "definition": [
                            "size_t capacity"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct visited_file_t\n{\n  dev_t st_dev;\n  ino_t st_ino;\n}",
            "name": "visited_file_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "st_dev",
                        "type": "dev_t",
                        "definition": [
                            "dev_t st_dev"
                        ]
                    },
                    {
                        "path": null,
                        "name": "st_ino",
                        "type": "ino_t",
                        "definition": [
                            "ino_t st_ino"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct visited_file_array_t\n{\n  struct visited_file_t *arr;\n  size_t n;\n  size_t capacity;\n}",
            "name": "visited_file_array_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct visited_file_t",
                        "type": "struct visited_file_t *",
                        "definition": [
                            "struct visited_file_t *arr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "size_t",
                        "definition": [
                            "size_t n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "capacity",
                        "type": "size_t",
                        "definition": [
                            "size_t capacity"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct libtree_state_t\n{\n  int verbosity;\n  int path;\n  int color;\n  char *ld_conf_file;\n  unsigned long max_depth;\n  struct string_table_t string_table;\n  struct visited_file_array_t visited;\n  char *PLATFORM;\n  char *LIB;\n  char *OSNAME;\n  char *OSREL;\n  size_t rpath_offsets[32];\n  size_t ld_library_path_offset;\n  size_t default_paths_offset;\n  size_t ld_so_conf_offset;\n  char found_all_needed[32];\n}",
            "name": "libtree_state_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "verbosity",
                        "type": "int",
                        "definition": [
                            "int verbosity"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "int",
                        "definition": [
                            "int path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color",
                        "type": "int",
                        "definition": [
                            "int color"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ld_conf_file",
                        "type": "char *",
                        "definition": [
                            "char *ld_conf_file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_depth",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long max_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "string_table",
                        "type": "struct string_table_t",
                        "definition": [
                            "struct string_table_t string_table"
                        ]
                    },
                    {
                        "path": null,
                        "name": "visited",
                        "type": "struct visited_file_array_t",
                        "definition": [
                            "struct visited_file_array_t visited"
                        ]
                    },
                    {
                        "path": null,
                        "name": "PLATFORM",
                        "type": "char *",
                        "definition": [
                            "char *PLATFORM"
                        ]
                    },
                    {
                        "path": null,
                        "name": "LIB",
                        "type": "char *",
                        "definition": [
                            "char *LIB"
                        ]
                    },
                    {
                        "path": null,
                        "name": "OSNAME",
                        "type": "char *",
                        "definition": [
                            "char *OSNAME"
                        ]
                    },
                    {
                        "path": null,
                        "name": "OSREL",
                        "type": "char *",
                        "definition": [
                            "char *OSREL"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rpath_offsets",
                        "type": "size_t [32]",
                        "definition": [
                            "size_t rpath_offsets[32]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ld_library_path_offset",
                        "type": "size_t",
                        "definition": [
                            "size_t ld_library_path_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "default_paths_offset",
                        "type": "size_t",
                        "definition": [
                            "size_t default_paths_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ld_so_conf_offset",
                        "type": "size_t",
                        "definition": [
                            "size_t ld_so_conf_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "found_all_needed",
                        "type": "char [32]",
                        "definition": [
                            "char found_all_needed[32]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct small_vec_u64_t\n{\n  uint64_t buf[16];\n  uint64_t *p;\n  size_t n;\n  size_t capacity;\n}",
            "name": "small_vec_u64_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buf",
                        "type": "uint64_t [16]",
                        "definition": [
                            "uint64_t buf[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "uint64_t *",
                        "definition": [
                            "uint64_t *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "size_t",
                        "definition": [
                            "size_t n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "capacity",
                        "type": "size_t",
                        "definition": [
                            "size_t capacity"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        }
    ],
    "global_variable": [
        {
            "path": null,
            "name": "exclude_list",
            "type": "const char *[]",
            "definition": [
                "const char *exclude_list[] = {\"ld-linux-aarch64.so\", \"ld-linux-armhf.so\", \"ld-linux-x86-64.so\", \"ld-linux.so\", \"ld64.so\", \"libc.musl-aarch64.so\", \"libc.musl-armhf.so\", \"libc.musl-i386.so\", \"libc.musl-x86_64.so\", \"libc.so\", \"libdl.so\", \"libgcc_s.so\", \"libm.so\", \"libstdc++.so\"}"
            ]
        }
    ],
    "function": [
        {
            "path": null,
            "name": "utoa",
            "header": "",
            "params": [
                "char *str",
                "size_t v"
            ],
            "definition": "inline static void utoa(char *str, size_t v)\n{\n  char *p = str;\n  unsigned int p_idx = 0;\n  do\n  {\n    p[p_idx] = '0' + (v % 10);\n    p_idx += 1;\n    v /= 10;\n  }\n  while (v > 0);\n  size_t len = (&p[p_idx]) - str;\n  for (size_t i = 0; i < (len / 2); i += 1)\n  {\n    char tmp = str[i];\n    str[i] = str[(len - i) - 1];\n    str[(len - i) - 1] = tmp;\n  }\n\n  str[len] = '\\0';\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str",
                        "type": "char *",
                        "definition": [
                            "char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "size_t",
                        "definition": [
                            "size_t v"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "char *",
                        "definition": [
                            "char *p = str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len = (&p[p_idx]) - str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "char",
                        "definition": [
                            "char tmp = str[i]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "small_vec_u64_init",
            "header": "",
            "params": [
                "struct small_vec_u64_t *v"
            ],
            "definition": "inline static void small_vec_u64_init(struct small_vec_u64_t *v)\n{\n  memset(v, 0, sizeof(*v));\n  v->p = v->buf;\n}\n\n",
            "calle": [
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct small_vec_u64_t",
                        "type": "struct small_vec_u64_t *",
                        "definition": [
                            "struct small_vec_u64_t *v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "small_vec_u64_append",
            "header": "",
            "params": [
                "struct small_vec_u64_t *v",
                "uint64_t val"
            ],
            "definition": "static void small_vec_u64_append(struct small_vec_u64_t *v, uint64_t val)\n{\n  if (v->n < 16)\n  {\n    v->p[v->n++] = val;\n    return;\n  }\n  if (v->n == 16)\n  {\n    v->capacity = 2 * 16;\n    v->p = malloc(v->capacity * (sizeof(uint64_t)));\n    if (v->p == 0)\n    {\n      exit(1);\n    }\n    memcpy(v->p, v->buf, 16 * (sizeof(uint64_t)));\n  }\n  else\n    if (v->n == v->capacity)\n  {\n    v->capacity *= 2;\n    uint64_t *p = realloc(v->p, v->capacity * (sizeof(uint64_t)));\n    if (p == 0)\n    {\n      exit(1);\n    }\n    v->p = p;\n  }\n  v->p[v->n++] = val;\n}\n\n",
            "calle": [
                "exit",
                "malloc",
                "memcpy",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct small_vec_u64_t",
                        "type": "struct small_vec_u64_t *",
                        "definition": [
                            "struct small_vec_u64_t *v"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "uint64_t *",
                        "definition": [
                            "uint64_t *p = realloc(v->p, v->capacity * (sizeof(uint64_t)))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "small_vec_u64_free",
            "header": "",
            "params": [
                "struct small_vec_u64_t *v"
            ],
            "definition": "static void small_vec_u64_free(struct small_vec_u64_t *v)\n{\n  if (v->n <= 16)\n  {\n    return;\n  }\n  free(v->p);\n  v->p = 0;\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct small_vec_u64_t",
                        "type": "struct small_vec_u64_t *",
                        "definition": [
                            "struct small_vec_u64_t *v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "host_is_little_endian",
            "header": "",
            "params": [],
            "definition": "inline static int host_is_little_endian()\n{\n  int test = 1;\n  char *bytes = (char *) (&test);\n  return bytes[0] == 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "test",
                        "type": "int",
                        "definition": [
                            "int test = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bytes",
                        "type": "char *",
                        "definition": [
                            "char *bytes = (char *) (&test)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "is_ascending_order",
            "header": "",
            "params": [
                "uint64_t *v",
                "size_t n"
            ],
            "definition": "static int is_ascending_order(uint64_t *v, size_t n)\n{\n  for (size_t j = 1; j < n; j += 1)\n    if (v[j - 1] >= v[j])\n  {\n    return 0;\n  }\n\n  return 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "v",
                        "type": "uint64_t *",
                        "definition": [
                            "uint64_t *v"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "size_t",
                        "definition": [
                            "size_t n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j = 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "string_table_maybe_grow",
            "header": "",
            "params": [
                "struct string_table_t *t",
                "size_t n"
            ],
            "definition": "static void string_table_maybe_grow(struct string_table_t *t, size_t n)\n{\n  if ((t->n + n) <= t->capacity)\n  {\n    return;\n  }\n  t->capacity = 2 * (t->n + n);\n  char *arr = realloc(t->arr, t->capacity * (sizeof(char)));\n  if (arr == 0)\n  {\n    exit(1);\n  }\n  t->arr = arr;\n}\n\n",
            "calle": [
                "exit",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct string_table_t",
                        "type": "struct string_table_t *",
                        "definition": [
                            "struct string_table_t *t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "size_t",
                        "definition": [
                            "size_t n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arr",
                        "type": "char *",
                        "definition": [
                            "char *arr = realloc(t->arr, t->capacity * (sizeof(char)))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "string_table_store",
            "header": "",
            "params": [
                "struct string_table_t *t",
                "const char *str"
            ],
            "definition": "static void string_table_store(struct string_table_t *t, const char *str)\n{\n  size_t n = strlen(str) + 1;\n  string_table_maybe_grow(t, n);\n  memcpy(t->arr + t->n, str, n);\n  t->n += n;\n}\n\n",
            "calle": [
                "memcpy",
                "string_table_maybe_grow",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct string_table_t",
                        "type": "struct string_table_t *",
                        "definition": [
                            "struct string_table_t *t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char *",
                        "definition": [
                            "const char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "size_t",
                        "definition": [
                            "size_t n = strlen(str) + 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "string_table_copy_from_file",
            "header": "",
            "params": [
                "struct string_table_t *t",
                "FILE *fptr"
            ],
            "definition": "static void string_table_copy_from_file(struct string_table_t *t, FILE *fptr)\n{\n  int c;\n  while (((c = getc(fptr)) != '\\0') && (c != EOF))\n  {\n    string_table_maybe_grow(t, 1);\n    t->arr[t->n++] = c;\n  }\n\n  string_table_maybe_grow(t, 1);\n  t->arr[t->n++] = '\\0';\n}\n\n",
            "calle": [
                "getc",
                "string_table_maybe_grow"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct string_table_t",
                        "type": "struct string_table_t *",
                        "definition": [
                            "struct string_table_t *t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fptr",
                        "type": "FILE *",
                        "definition": [
                            "FILE *fptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "is_in_exclude_list",
            "header": "",
            "params": [
                "char *soname"
            ],
            "definition": "static int is_in_exclude_list(char *soname)\n{\n  char *start = soname;\n  char *end = strrchr(start, '\\0');\n  unsigned int end_idx = 0;\n  if (start == (&end[end_idx]))\n  {\n    return 0;\n  }\n  end_idx -= 1;\n  while (((&end[end_idx]) != start) && (((end[end_idx] >= '0') && (end[end_idx] <= '9')) || (end[end_idx] == '.')))\n  {\n    end_idx -= 1;\n  }\n\n  for (size_t j = 0; j < ((sizeof(exclude_list)) / (sizeof(char *))); j += 1)\n  {\n    size_t len = strlen(exclude_list[j]);\n    if (strncmp(start, exclude_list[j], len) != 0)\n    {\n      continue;\n    }\n    return 1;\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "strlen",
                "strncmp",
                "strrchr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "soname",
                        "type": "char *",
                        "definition": [
                            "char *soname"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "char *",
                        "definition": [
                            "char *start = soname"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "char *",
                        "definition": [
                            "char *end = strrchr(start, '\\0')"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int end_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len = strlen(exclude_list[j])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exclude_list",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tree_preamble",
            "header": "",
            "params": [
                "struct libtree_state_t *s",
                "size_t depth"
            ],
            "definition": "static void tree_preamble(struct libtree_state_t *s, size_t depth)\n{\n  if (depth == 0)\n  {\n    return;\n  }\n  for (size_t i = 0; i < (depth - 1); i += 1)\n    fputs((s->found_all_needed[i]) ? (\"    \") : (\"\\xe2\\x94\\x82   \"), stdout);\n\n  fputs((s->found_all_needed[depth - 1]) ? (\"\\xe2\\x94\\x94\\xe2\\x94\\x80\\xe2\\x94\\x80 \") : (\"\\xe2\\x94\\x9c\\xe2\\x94\\x80\\xe2\\x94\\x80 \"), stdout);\n}\n\n",
            "calle": [
                "fputs"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct libtree_state_t",
                        "type": "struct libtree_state_t *",
                        "definition": [
                            "struct libtree_state_t *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "depth",
                        "type": "size_t",
                        "definition": [
                            "size_t depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "recurse",
            "header": "static int recurse(char *current_file, size_t depth, struct libtree_state_t *state, struct compat_t compat, struct found_t reason)",
            "params": [
                "char *current_file",
                "size_t depth",
                "struct libtree_state_t *s",
                "struct compat_t compat",
                "struct found_t reason"
            ],
            "definition": "static int recurse(char *current_file, size_t depth, struct libtree_state_t *s, struct compat_t compat, struct found_t reason)\n{\n  FILE *fptr = fopen(current_file, \"rb\");\n  if (fptr == 0)\n  {\n    return 31;\n  }\n  size_t old_buf_size = s->string_table.n;\n  char e_ident[16];\n  if (fread(&e_ident, 16, 1, fptr) != 1)\n  {\n    fclose(fptr);\n    return 11;\n  }\n  if ((((e_ident[0] != 0x7f) || (e_ident[1] != 'E')) || (e_ident[2] != 'L')) || (e_ident[3] != 'F'))\n  {\n    fclose(fptr);\n    return 11;\n  }\n  if ((e_ident[4] != 1) && (e_ident[4] != 2))\n  {\n    fclose(fptr);\n    return 12;\n  }\n  if ((e_ident[5] != '\\x01') && (e_ident[5] != '\\x02'))\n  {\n    fclose(fptr);\n    return 13;\n  }\n  struct compat_t curr_type = {.any = 0, .class = e_ident[4]};\n  int is_little_endian = e_ident[5] == '\\x01';\n  if ((!compat.any) && (compat.class != curr_type.class))\n  {\n    fclose(fptr);\n    return 15;\n  }\n  if (is_little_endian ^ host_is_little_endian())\n  {\n    fclose(fptr);\n    return 16;\n  }\n  union \n  {\n    struct header_64_t h64;\n    struct header_32_t h32;\n  } header;\n  if (curr_type.class == 2)\n  {\n    helper_recurse_8(&curr_type, compat, fptr, header);\n  }\n  else\n  {\n    helper_recurse_9(&curr_type, compat, fptr, header);\n  }\n  union \n  {\n    struct prog_64_t p64;\n    struct prog_32_t p32;\n  } prog;\n  struct small_vec_u64_t pt_load_offset;\n  struct small_vec_u64_t pt_load_vaddr;\n  small_vec_u64_init(&pt_load_offset);\n  small_vec_u64_init(&pt_load_vaddr);\n  uint64_t p_offset = 0xFFFFFFFFFFFFFFFF;\n  if (curr_type.class == 2)\n  {\n    helper_recurse_5(&p_offset, fptr, header, prog, pt_load_offset, pt_load_vaddr);\n  }\n  else\n  {\n    helper_recurse_6(&p_offset, fptr, header, prog, pt_load_offset, pt_load_vaddr);\n  }\n  struct stat finfo;\n  if (stat(current_file, &finfo) != 0)\n  {\n    fclose(fptr);\n    small_vec_u64_free(&pt_load_offset);\n    small_vec_u64_free(&pt_load_vaddr);\n    return 20;\n  }\n  int seen_before = visited_files_contains(&s->visited, &finfo);\n  if (!seen_before)\n  {\n    visited_files_append(&s->visited, &finfo);\n  }\n  if (p_offset == 0xFFFFFFFFFFFFFFFF)\n  {\n    print_line(depth, current_file, \"\\033[1;36m\", \"\\033[0;36m\", 1, reason, s);\n    fclose(fptr);\n    small_vec_u64_free(&pt_load_offset);\n    small_vec_u64_free(&pt_load_vaddr);\n    return 0;\n  }\n  if (pt_load_offset.n == 0)\n  {\n    fclose(fptr);\n    small_vec_u64_free(&pt_load_offset);\n    small_vec_u64_free(&pt_load_vaddr);\n    return 29;\n  }\n  if (fseek(fptr, p_offset, 0) != 0)\n  {\n    fclose(fptr);\n    small_vec_u64_free(&pt_load_offset);\n    small_vec_u64_free(&pt_load_vaddr);\n    return 21;\n  }\n  int no_def_lib = 0;\n  uint64_t strtab = 0xFFFFFFFFFFFFFFFF;\n  uint64_t rpath = 0xFFFFFFFFFFFFFFFF;\n  uint64_t runpath = 0xFFFFFFFFFFFFFFFF;\n  uint64_t soname = 0xFFFFFFFFFFFFFFFF;\n  struct small_vec_u64_t needed;\n  small_vec_u64_init(&needed);\n  for (int cont = 1; cont;)\n  {\n    helper_recurse_10(&no_def_lib, &strtab, &rpath, &runpath, &soname, &cont, fptr, curr_type, pt_load_offset, pt_load_vaddr, needed);\n  }\n\n  if (strtab == 0xFFFFFFFFFFFFFFFF)\n  {\n    fclose(fptr);\n    small_vec_u64_free(&pt_load_offset);\n    small_vec_u64_free(&pt_load_vaddr);\n    small_vec_u64_free(&needed);\n    return 23;\n  }\n  if (!is_ascending_order(pt_load_vaddr.p, pt_load_vaddr.n))\n  {\n    fclose(fptr);\n    small_vec_u64_free(&pt_load_vaddr);\n    small_vec_u64_free(&pt_load_offset);\n    small_vec_u64_free(&needed);\n    return 30;\n  }\n  size_t vaddr_idx = 0;\n  while (((vaddr_idx + 1) != pt_load_vaddr.n) && (strtab >= pt_load_vaddr.p[vaddr_idx + 1]))\n  {\n    vaddr_idx += 1;\n  }\n\n  uint64_t strtab_offset = (pt_load_offset.p[vaddr_idx] + strtab) - pt_load_vaddr.p[vaddr_idx];\n  small_vec_u64_free(&pt_load_vaddr);\n  small_vec_u64_free(&pt_load_offset);\n  size_t soname_buf_offset = s->string_table.n;\n  if (soname != 0xFFFFFFFFFFFFFFFF)\n  {\n    helper_recurse_1(s, fptr, old_buf_size, soname, needed, strtab_offset);\n  }\n  int in_exclude_list = (soname != 0xFFFFFFFFFFFFFFFF) && is_in_exclude_list(s->string_table.arr + soname_buf_offset);\n  int should_recurse = (depth < s->max_depth) && ((((!seen_before) && (!in_exclude_list)) || (((!seen_before) && in_exclude_list) && (s->verbosity >= 2))) || (s->verbosity >= 3));\n  if (!should_recurse)\n  {\n    helper_recurse_3(current_file, depth, s, reason, fptr, old_buf_size, seen_before, soname, needed, soname_buf_offset, in_exclude_list);\n  }\n  char origin[4096];\n  char *last_slash = strrchr(current_file, '/');\n  if (last_slash != 0)\n  {\n    size_t bytes = last_slash - current_file;\n    memcpy(origin, current_file, bytes);\n    origin[bytes] = '\\0';\n  }\n  else\n  {\n    memcpy(origin, \"./\", 3);\n  }\n  if (rpath == 0xFFFFFFFFFFFFFFFF)\n  {\n    s->rpath_offsets[depth] = SIZE_MAX;\n  }\n  else\n  {\n    helper_recurse_7(&depth, s, fptr, old_buf_size, rpath, needed, strtab_offset, origin);\n  }\n  size_t runpath_buf_offset = s->string_table.n;\n  if (runpath != 0xFFFFFFFFFFFFFFFF)\n  {\n    helper_recurse_4(&runpath_buf_offset, s, fptr, old_buf_size, runpath, needed, strtab_offset, origin);\n  }\n  struct small_vec_u64_t needed_buf_offsets;\n  small_vec_u64_init(&needed_buf_offsets);\n  for (size_t i = 0; i < needed.n; i += 1)\n  {\n    helper_recurse_2(s, fptr, old_buf_size, i, i, needed, strtab_offset, needed_buf_offsets, i);\n  }\n\n  fclose(fptr);\n  char *print_name = ((soname == 0xFFFFFFFFFFFFFFFF) || s->path) ? (current_file) : (s->string_table.arr + soname_buf_offset);\n  char *bold_color = (in_exclude_list) ? (\"\\033[0;35m\") : ((seen_before) ? (\"\\033[0;34m\") : (\"\\033[1;36m\"));\n  char *regular_color = (in_exclude_list) ? (\"\\033[0;35m\") : ((seen_before) ? (\"\\033[0;34m\") : (\"\\033[0;36m\"));\n  int highlight = (!seen_before) && (!in_exclude_list);\n  print_line(depth, print_name, bold_color, regular_color, highlight, reason, s);\n  int exit_code = 0;\n  size_t needed_not_found = needed_buf_offsets.n;\n  if (needed_not_found && (s->verbosity == 0))\n  {\n    apply_exclude_list(&needed_not_found, &needed_buf_offsets, s);\n  }\n  if (needed_not_found)\n  {\n    exit_code |= check_absolute_paths(&needed_not_found, &needed_buf_offsets, depth, s, curr_type);\n  }\n  if (runpath == 0xFFFFFFFFFFFFFFFF)\n  {\n    for (int j = depth; (j >= 0) && needed_not_found; j -= 1)\n    {\n      if (s->rpath_offsets[j] == SIZE_MAX)\n      {\n        continue;\n      }\n      exit_code |= check_search_paths((struct found_t){.how = RPATH, .depth = j}, s->rpath_offsets[j], &needed_not_found, &needed_buf_offsets, depth, s, curr_type);\n    }\n\n  }\n  if (needed_not_found && (s->ld_library_path_offset != SIZE_MAX))\n  {\n    exit_code |= check_search_paths((struct found_t){.how = LD_LIBRARY_PATH}, s->ld_library_path_offset, &needed_not_found, &needed_buf_offsets, depth, s, curr_type);\n  }\n  if (needed_not_found && (runpath != 0xFFFFFFFFFFFFFFFF))\n  {\n    exit_code |= check_search_paths((struct found_t){.how = RUNPATH}, runpath_buf_offset, &needed_not_found, &needed_buf_offsets, depth, s, curr_type);\n  }\n  if (needed_not_found && (!no_def_lib))\n  {\n    exit_code |= check_search_paths((struct found_t){.how = LD_SO_CONF}, s->ld_so_conf_offset, &needed_not_found, &needed_buf_offsets, depth, s, curr_type);\n  }\n  if (needed_not_found && (!no_def_lib))\n  {\n    exit_code |= check_search_paths((struct found_t){.how = DEFAULT}, s->default_paths_offset, &needed_not_found, &needed_buf_offsets, depth, s, curr_type);\n  }\n  if (needed_not_found)\n  {\n    print_error(depth, needed_not_found, &needed_buf_offsets, (runpath == 0xFFFFFFFFFFFFFFFF) ? (0) : (s->string_table.arr + runpath_buf_offset), s, no_def_lib);\n    s->string_table.n = old_buf_size;\n    small_vec_u64_free(&needed_buf_offsets);\n    small_vec_u64_free(&needed);\n    return 28;\n  }\n  s->string_table.n = old_buf_size;\n  small_vec_u64_free(&needed_buf_offsets);\n  small_vec_u64_free(&needed);\n  return exit_code;\n}\n\n",
            "calle": [
                "apply_exclude_list",
                "check_absolute_paths",
                "check_search_paths",
                "fclose",
                "fopen",
                "fread",
                "fseek",
                "helper_recurse_1",
                "helper_recurse_10",
                "helper_recurse_2",
                "helper_recurse_3",
                "helper_recurse_4",
                "helper_recurse_5",
                "helper_recurse_6",
                "helper_recurse_7",
                "helper_recurse_8",
                "helper_recurse_9",
                "host_is_little_endian",
                "is_ascending_order",
                "is_in_exclude_list",
                "memcpy",
                "print_error",
                "print_line",
                "small_vec_u64_free",
                "small_vec_u64_init",
                "stat",
                "strrchr",
                "visited_files_append",
                "visited_files_contains"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "current_file",
                        "type": "char *",
                        "definition": [
                            "char *current_file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "depth",
                        "type": "size_t",
                        "definition": [
                            "size_t depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct libtree_state_t",
                        "type": "struct libtree_state_t *",
                        "definition": [
                            "struct libtree_state_t *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compat",
                        "type": "struct compat_t",
                        "definition": [
                            "struct compat_t compat"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reason",
                        "type": "struct found_t",
                        "definition": [
                            "struct found_t reason"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fptr",
                        "type": "FILE *",
                        "definition": [
                            "FILE *fptr = fopen(current_file, \"rb\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "old_buf_size",
                        "type": "size_t",
                        "definition": [
                            "size_t old_buf_size = s->string_table.n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e_ident",
                        "type": "char [16]",
                        "definition": [
                            "char e_ident[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curr_type",
                        "type": "struct compat_t",
                        "definition": [
                            "struct compat_t curr_type = {.any = 0, .class = e_ident[4]}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_little_endian",
                        "type": "int",
                        "definition": [
                            "int is_little_endian = e_ident[5] == '\\x01'"
                        ]
                    },
                    {
                        "path": null,
                        "name": "header",
                        "type": "union \n{\n  struct header_64_t h64;\n  struct header_32_t h32;\n}",
                        "definition": [
                            "union \n{\n  struct header_64_t h64;\n  struct header_32_t h32;\n} header"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prog",
                        "type": "union \n{\n  struct prog_64_t p64;\n  struct prog_32_t p32;\n}",
                        "definition": [
                            "union \n{\n  struct prog_64_t p64;\n  struct prog_32_t p32;\n} prog"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pt_load_offset",
                        "type": "struct small_vec_u64_t",
                        "definition": [
                            "struct small_vec_u64_t pt_load_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pt_load_vaddr",
                        "type": "struct small_vec_u64_t",
                        "definition": [
                            "struct small_vec_u64_t pt_load_vaddr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_offset",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t p_offset = 0xFFFFFFFFFFFFFFFF"
                        ]
                    },
                    {
                        "path": null,
                        "name": "finfo",
                        "type": "struct stat",
                        "definition": [
                            "struct stat finfo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "seen_before",
                        "type": "int",
                        "definition": [
                            "int seen_before = visited_files_contains(&s->visited, &finfo)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "no_def_lib",
                        "type": "int",
                        "definition": [
                            "int no_def_lib = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strtab",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t strtab = 0xFFFFFFFFFFFFFFFF"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rpath",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t rpath = 0xFFFFFFFFFFFFFFFF"
                        ]
                    },
                    {
                        "path": null,
                        "name": "runpath",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t runpath = 0xFFFFFFFFFFFFFFFF"
                        ]
                    },
                    {
                        "path": null,
                        "name": "soname",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t soname = 0xFFFFFFFFFFFFFFFF"
                        ]
                    },
                    {
                        "path": null,
                        "name": "needed",
                        "type": "struct small_vec_u64_t",
                        "definition": [
                            "struct small_vec_u64_t needed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cont",
                        "type": "int",
                        "definition": [
                            "int cont = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vaddr_idx",
                        "type": "size_t",
                        "definition": [
                            "size_t vaddr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strtab_offset",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t strtab_offset = (pt_load_offset.p[vaddr_idx] + strtab) - pt_load_vaddr.p[vaddr_idx]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "soname_buf_offset",
                        "type": "size_t",
                        "definition": [
                            "size_t soname_buf_offset = s->string_table.n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_exclude_list",
                        "type": "int",
                        "definition": [
                            "int in_exclude_list = (soname != 0xFFFFFFFFFFFFFFFF) && is_in_exclude_list(s->string_table.arr + soname_buf_offset)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "should_recurse",
                        "type": "int",
                        "definition": [
                            "int should_recurse = (depth < s->max_depth) && ((((!seen_before) && (!in_exclude_list)) || (((!seen_before) && in_exclude_list) && (s->verbosity >= 2))) || (s->verbosity >= 3))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "origin",
                        "type": "char [4096]",
                        "definition": [
                            "char origin[4096]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last_slash",
                        "type": "char *",
                        "definition": [
                            "char *last_slash = strrchr(current_file, '/')"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bytes",
                        "type": "size_t",
                        "definition": [
                            "size_t bytes = last_slash - current_file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "runpath_buf_offset",
                        "type": "size_t",
                        "definition": [
                            "size_t runpath_buf_offset = s->string_table.n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "needed_buf_offsets",
                        "type": "struct small_vec_u64_t",
                        "definition": [
                            "struct small_vec_u64_t needed_buf_offsets"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "print_name",
                        "type": "char *",
                        "definition": [
                            "char *print_name = ((soname == 0xFFFFFFFFFFFFFFFF) || s->path) ? (current_file) : (s->string_table.arr + soname_buf_offset)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bold_color",
                        "type": "char *",
                        "definition": [
                            "char *bold_color = (in_exclude_list) ? (\"\\033[0;35m\") : ((seen_before) ? (\"\\033[0;34m\") : (\"\\033[1;36m\"))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "regular_color",
                        "type": "char *",
                        "definition": [
                            "char *regular_color = (in_exclude_list) ? (\"\\033[0;35m\") : ((seen_before) ? (\"\\033[0;34m\") : (\"\\033[0;36m\"))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "highlight",
                        "type": "int",
                        "definition": [
                            "int highlight = (!seen_before) && (!in_exclude_list)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exit_code",
                        "type": "int",
                        "definition": [
                            "int exit_code = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "needed_not_found",
                        "type": "size_t",
                        "definition": [
                            "size_t needed_not_found = needed_buf_offsets.n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = depth"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "apply_exclude_list",
            "header": "",
            "params": [
                "size_t *needed_not_found",
                "struct small_vec_u64_t *needed_buf_offsets",
                "struct libtree_state_t *s"
            ],
            "definition": "static void apply_exclude_list(size_t *needed_not_found, struct small_vec_u64_t *needed_buf_offsets, struct libtree_state_t *s)\n{\n  for (size_t i = 0; i < (*needed_not_found);)\n  {\n    if (is_in_exclude_list(s->string_table.arr + needed_buf_offsets->p[i]))\n    {\n      size_t tmp = needed_buf_offsets->p[i];\n      needed_buf_offsets->p[i] = needed_buf_offsets->p[(*needed_not_found) - 1];\n      needed_buf_offsets->p[--(*needed_not_found)] = tmp;\n      continue;\n    }\n    else\n    {\n      i += 1;\n    }\n  }\n\n}\n\n",
            "calle": [
                "is_in_exclude_list"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "needed_not_found",
                        "type": "size_t *",
                        "definition": [
                            "size_t *needed_not_found"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct small_vec_u64_t",
                        "type": "struct small_vec_u64_t *",
                        "definition": [
                            "struct small_vec_u64_t *needed_buf_offsets"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct libtree_state_t",
                        "type": "struct libtree_state_t *",
                        "definition": [
                            "struct libtree_state_t *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "size_t",
                        "definition": [
                            "size_t tmp = needed_buf_offsets->p[i]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "check_absolute_paths",
            "header": "",
            "params": [
                "size_t *needed_not_found",
                "struct small_vec_u64_t *needed_buf_offsets",
                "size_t depth",
                "struct libtree_state_t *s",
                "struct compat_t compat"
            ],
            "definition": "static int check_absolute_paths(size_t *needed_not_found, struct small_vec_u64_t *needed_buf_offsets, size_t depth, struct libtree_state_t *s, struct compat_t compat)\n{\n  int exit_code = 0;\n  for (size_t i = 0; i < (*needed_not_found);)\n  {\n    helper_check_absolute_paths_1(&depth, &exit_code, &i, needed_not_found, needed_buf_offsets, s, compat);\n  }\n\n  return exit_code;\n}\n\n",
            "calle": [
                "helper_check_absolute_paths_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "needed_not_found",
                        "type": "size_t *",
                        "definition": [
                            "size_t *needed_not_found"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct small_vec_u64_t",
                        "type": "struct small_vec_u64_t *",
                        "definition": [
                            "struct small_vec_u64_t *needed_buf_offsets"
                        ]
                    },
                    {
                        "path": null,
                        "name": "depth",
                        "type": "size_t",
                        "definition": [
                            "size_t depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct libtree_state_t",
                        "type": "struct libtree_state_t *",
                        "definition": [
                            "struct libtree_state_t *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compat",
                        "type": "struct compat_t",
                        "definition": [
                            "struct compat_t compat"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exit_code",
                        "type": "int",
                        "definition": [
                            "int exit_code = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "check_search_paths",
            "header": "",
            "params": [
                "struct found_t reason",
                "size_t offset",
                "size_t *needed_not_found",
                "struct small_vec_u64_t *needed_buf_offsets",
                "size_t depth",
                "struct libtree_state_t *s",
                "struct compat_t compat"
            ],
            "definition": "static int check_search_paths(struct found_t reason, size_t offset, size_t *needed_not_found, struct small_vec_u64_t *needed_buf_offsets, size_t depth, struct libtree_state_t *s, struct compat_t compat)\n{\n  int exit_code = 0;\n  char path[4096];\n  char *path_end = path + 4096;\n  const struct string_table_t *st = &s->string_table;\n  while (st->arr[offset] != '\\0')\n  {\n    helper_check_search_paths_1(&offset, &depth, &exit_code, reason, needed_not_found, needed_buf_offsets, s, compat, path, path_end, st);\n  }\n\n  return exit_code;\n}\n\n",
            "calle": [
                "helper_check_search_paths_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "reason",
                        "type": "struct found_t",
                        "definition": [
                            "struct found_t reason"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offset",
                        "type": "size_t",
                        "definition": [
                            "size_t offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "needed_not_found",
                        "type": "size_t *",
                        "definition": [
                            "size_t *needed_not_found"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct small_vec_u64_t",
                        "type": "struct small_vec_u64_t *",
                        "definition": [
                            "struct small_vec_u64_t *needed_buf_offsets"
                        ]
                    },
                    {
                        "path": null,
                        "name": "depth",
                        "type": "size_t",
                        "definition": [
                            "size_t depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct libtree_state_t",
                        "type": "struct libtree_state_t *",
                        "definition": [
                            "struct libtree_state_t *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compat",
                        "type": "struct compat_t",
                        "definition": [
                            "struct compat_t compat"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exit_code",
                        "type": "int",
                        "definition": [
                            "int exit_code = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "char [4096]",
                        "definition": [
                            "char path[4096]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path_end",
                        "type": "char *",
                        "definition": [
                            "char *path_end = path + 4096"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct string_table_t",
                        "type": "const struct string_table_t *",
                        "definition": [
                            "const struct string_table_t *st = &s->string_table"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "interpolate_variables",
            "header": "",
            "params": [
                "struct libtree_state_t *s",
                "size_t src",
                "const char *ORIGIN"
            ],
            "definition": "static int interpolate_variables(struct libtree_state_t *s, size_t src, const char *ORIGIN)\n{\n  size_t prev_src = src;\n  size_t curr_src = src;\n  struct string_table_t *st = &s->string_table;\n  while (1)\n  {\n    helper_interpolate_variables_1(&prev_src, &curr_src, s, ORIGIN, st);\n  }\n\n  if (prev_src != src)\n  {\n    size_t n = strlen(st->arr + prev_src) + 1;\n    string_table_maybe_grow(st, n);\n    memcpy(st->arr + st->n, st->arr + prev_src, n);\n    st->n += n;\n    return 1;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "helper_interpolate_variables_1",
                "memcpy",
                "string_table_maybe_grow",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct libtree_state_t",
                        "type": "struct libtree_state_t *",
                        "definition": [
                            "struct libtree_state_t *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "size_t",
                        "definition": [
                            "size_t src"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ORIGIN",
                        "type": "const char *",
                        "definition": [
                            "const char *ORIGIN"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_src",
                        "type": "size_t",
                        "definition": [
                            "size_t prev_src = src"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curr_src",
                        "type": "size_t",
                        "definition": [
                            "size_t curr_src = src"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct string_table_t",
                        "type": "struct string_table_t *",
                        "definition": [
                            "struct string_table_t *st = &s->string_table"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "size_t",
                        "definition": [
                            "size_t n = strlen(st->arr + prev_src) + 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "print_colon_delimited_paths",
            "header": "",
            "params": [
                "const char *start",
                "const char *indent"
            ],
            "definition": "static void print_colon_delimited_paths(const char *start, const char *indent)\n{\n  unsigned int start_idx = 0;\n  while (1)\n  {\n    if (start[start_idx] == '\\0')\n    {\n      break;\n    }\n    char *next = strchr(start, ':');\n    if ((&start[start_idx]) == next)\n    {\n      start_idx += 1;\n      continue;\n    }\n    fputs(indent, stdout);\n    fputs(\"    \", stdout);\n    if (next == 0)\n    {\n      puts(start);\n    }\n    else\n    {\n      fwrite(start, 1, next - (&start[start_idx]), stdout);\n      putchar('\\n');\n    }\n    if (next == 0)\n    {\n      break;\n    }\n    start_idx = next + 1;\n  }\n\n}\n\n",
            "calle": [
                "fputs",
                "fwrite",
                "putchar",
                "puts",
                "strchr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "start",
                        "type": "const char *",
                        "definition": [
                            "const char *start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "indent",
                        "type": "const char *",
                        "definition": [
                            "const char *indent"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int start_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "char *",
                        "definition": [
                            "char *next = strchr(start, ':')"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "print_line",
            "header": "",
            "params": [
                "size_t depth",
                "char *name",
                "char *color_bold",
                "char *color_regular",
                "int highlight",
                "struct found_t reason",
                "struct libtree_state_t *s"
            ],
            "definition": "static void print_line(size_t depth, char *name, char *color_bold, char *color_regular, int highlight, struct found_t reason, struct libtree_state_t *s)\n{\n  tree_preamble(s, depth);\n  char *slash = 0;\n  unsigned int slash_idx = 0;\n  if ((s->color && highlight) && ((slash_idx = strrchr(name, '/')) != 0))\n  {\n    fputs(color_regular, stdout);\n    fwrite(name, 1, ((&slash[slash_idx]) + 1) - name, stdout);\n    fputs(color_bold, stdout);\n    fputs((&slash[slash_idx]) + 1, stdout);\n  }\n  else\n  {\n    if (s->color)\n    {\n      fputs(color_bold, stdout);\n    }\n    fputs(name, stdout);\n  }\n  if (s->color && highlight)\n  {\n    fputs(\"\\033[0m \\033[33m\", stdout);\n  }\n  else\n    putchar(' ');\n  switch (reason.how)\n  {\n    case RPATH:\n    {\n      helper_print_line_2(depth, reason);\n    }\n\n    case LD_LIBRARY_PATH:\n    {\n      fputs(\"[LD_LIBRARY_PATH]\", stdout);\n      break;\n    }\n\n    case RUNPATH:\n    {\n      fputs(\"[runpath]\", stdout);\n      break;\n    }\n\n    case LD_SO_CONF:\n    {\n      helper_print_line_1(&conf_name_idx, s);\n    }\n\n    unsigned int conf_name_idx = 0;\n    case DIRECT:\n    {\n      fputs(\"[direct]\", stdout);\n      break;\n    }\n\n    case DEFAULT:\n    {\n      fputs(\"[default path]\", stdout);\n      break;\n    }\n\n    default:\n    {\n      break;\n    }\n\n  }\n\n  if (s->color)\n  {\n    fputs(\"\\033[0m\\n\", stdout);\n  }\n  else\n    putchar('\\n');\n}\n\n",
            "calle": [
                "fputs",
                "fwrite",
                "helper_print_line_1",
                "helper_print_line_2",
                "putchar",
                "strrchr",
                "tree_preamble"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "depth",
                        "type": "size_t",
                        "definition": [
                            "size_t depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "char *",
                        "definition": [
                            "char *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color_bold",
                        "type": "char *",
                        "definition": [
                            "char *color_bold"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color_regular",
                        "type": "char *",
                        "definition": [
                            "char *color_regular"
                        ]
                    },
                    {
                        "path": null,
                        "name": "highlight",
                        "type": "int",
                        "definition": [
                            "int highlight"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reason",
                        "type": "struct found_t",
                        "definition": [
                            "struct found_t reason"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct libtree_state_t",
                        "type": "struct libtree_state_t *",
                        "definition": [
                            "struct libtree_state_t *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "slash",
                        "type": "char *",
                        "definition": [
                            "char *slash = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "slash_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int slash_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "conf_name_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int conf_name_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "print_error",
            "header": "",
            "params": [
                "size_t depth",
                "size_t needed_not_found",
                "struct small_vec_u64_t *needed_buf_offsets",
                "char *runpath",
                "struct libtree_state_t *s",
                "int no_def_lib"
            ],
            "definition": "static void print_error(size_t depth, size_t needed_not_found, struct small_vec_u64_t *needed_buf_offsets, char *runpath, struct libtree_state_t *s, int no_def_lib)\n{\n  for (size_t i = 0; i < needed_not_found; i += 1)\n  {\n    helper_print_error_2(&depth, needed_not_found, needed_buf_offsets, s, i, i);\n  }\n\n  char *box_vertical = (s->color) ? (\"    \\033[0;31m\\xe2\\x94\\x8a\\033[0m\") : (\"    \\xe2\\x94\\x8a\");\n  char *indent = malloc((((sizeof(\"\\xe2\\x94\\x82   \")) * depth) + strlen(box_vertical)) + 1);\n  char *p = indent;\n  unsigned int p_idx = 0;\n  for (size_t i = 0; i < depth; i += 1)\n  {\n    helper_print_error_1(&p_idx, s, i, p, i);\n  }\n\n  strcpy(p, box_vertical);\n  fputs(indent, stdout);\n  if (s->color)\n  {\n    fputs(\"\\033[0;90m\", stdout);\n  }\n  fputs(\" Paths considered in this order:\\n\", stdout);\n  if (s->color)\n  {\n    fputs(\"\\033[0m\", stdout);\n  }\n  fputs(indent, stdout);\n  if (runpath != 0)\n  {\n    if (s->color)\n    {\n      fputs(\"\\033[0;90m\", stdout);\n    }\n    fputs(\" 1. rpath is skipped because runpath was set\\n\", stdout);\n    if (s->color)\n    {\n      fputs(\"\\033[0m\", stdout);\n    }\n  }\n  else\n  {\n    helper_print_error_3(depth, s, indent);\n  }\n  fputs(indent, stdout);\n  if (s->color)\n  {\n    fputs(\"\\033[0;90m\", stdout);\n  }\n  fputs((s->ld_library_path_offset == SIZE_MAX) ? (\" 2. LD_LIBRARY_PATH was not set\\n\") : (\" 2. LD_LIBRARY_PATH:\\n\"), stdout);\n  if (s->color)\n  {\n    fputs(\"\\033[0m\", stdout);\n  }\n  if (s->ld_library_path_offset != SIZE_MAX)\n  {\n    print_colon_delimited_paths(s->string_table.arr + s->ld_library_path_offset, indent);\n  }\n  fputs(indent, stdout);\n  if (s->color)\n  {\n    fputs(\"\\033[0;90m\", stdout);\n  }\n  fputs((runpath == 0) ? (\" 3. runpath was not set\\n\") : (\" 3. runpath:\\n\"), stdout);\n  if (s->color)\n  {\n    fputs(\"\\033[0m\", stdout);\n  }\n  if (runpath != 0)\n  {\n    print_colon_delimited_paths(runpath, indent);\n  }\n  fputs(indent, stdout);\n  if (s->color)\n  {\n    fputs(\"\\033[0;90m\", stdout);\n  }\n  fputs((no_def_lib) ? (\" 4. ld config files not considered due to NODEFLIB flag\\n\") : (\" 4. ld config files:\\n\"), stdout);\n  if (s->color)\n  {\n    fputs(\"\\033[0m\", stdout);\n  }\n  print_colon_delimited_paths(s->string_table.arr + s->ld_so_conf_offset, indent);\n  fputs(indent, stdout);\n  if (s->color)\n  {\n    fputs(\"\\033[0;90m\", stdout);\n  }\n  fputs((no_def_lib) ? (\" 5. Standard paths not considered due to NODEFLIB flag\\n\") : (\" 5. Standard paths:\\n\"), stdout);\n  if (s->color)\n  {\n    fputs(\"\\033[0m\", stdout);\n  }\n  print_colon_delimited_paths(s->string_table.arr + s->default_paths_offset, indent);\n  free(indent);\n}\n\n",
            "calle": [
                "fputs",
                "free",
                "helper_print_error_1",
                "helper_print_error_2",
                "helper_print_error_3",
                "malloc",
                "print_colon_delimited_paths",
                "strcpy",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "depth",
                        "type": "size_t",
                        "definition": [
                            "size_t depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "needed_not_found",
                        "type": "size_t",
                        "definition": [
                            "size_t needed_not_found"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct small_vec_u64_t",
                        "type": "struct small_vec_u64_t *",
                        "definition": [
                            "struct small_vec_u64_t *needed_buf_offsets"
                        ]
                    },
                    {
                        "path": null,
                        "name": "runpath",
                        "type": "char *",
                        "definition": [
                            "char *runpath"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct libtree_state_t",
                        "type": "struct libtree_state_t *",
                        "definition": [
                            "struct libtree_state_t *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "no_def_lib",
                        "type": "int",
                        "definition": [
                            "int no_def_lib"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "box_vertical",
                        "type": "char *",
                        "definition": [
                            "char *box_vertical = (s->color) ? (\"    \\033[0;31m\\xe2\\x94\\x8a\\033[0m\") : (\"    \\xe2\\x94\\x8a\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "indent",
                        "type": "char *",
                        "definition": [
                            "char *indent = malloc((((sizeof(\"\\xe2\\x94\\x82   \")) * depth) + strlen(box_vertical)) + 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "char *",
                        "definition": [
                            "char *p = indent"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "visited_files_contains",
            "header": "",
            "params": [
                "struct visited_file_array_t *files",
                "struct stat *needle"
            ],
            "definition": "static int visited_files_contains(struct visited_file_array_t *files, struct stat *needle)\n{\n  for (size_t i = 0; i < files->n; i += 1)\n  {\n    struct visited_file_t *f = &files->arr[i];\n    if ((f->st_dev == needle->st_dev) && (f->st_ino == needle->st_ino))\n    {\n      return 1;\n    }\n  }\n\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct visited_file_array_t",
                        "type": "struct visited_file_array_t *",
                        "definition": [
                            "struct visited_file_array_t *files"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct stat",
                        "type": "struct stat *",
                        "definition": [
                            "struct stat *needle"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct visited_file_t",
                        "type": "struct visited_file_t *",
                        "definition": [
                            "struct visited_file_t *f = &files->arr[i]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "visited_files_append",
            "header": "",
            "params": [
                "struct visited_file_array_t *files",
                "struct stat *new"
            ],
            "definition": "static void visited_files_append(struct visited_file_array_t *files, struct stat *new)\n{\n  if (files->n == files->capacity)\n  {\n    files->capacity *= 2;\n    files->arr = realloc(files->arr, files->capacity * (sizeof(struct visited_file_t)));\n    if (files->arr == 0)\n    {\n      exit(1);\n    }\n  }\n  files->arr[files->n].st_dev = new->st_dev;\n  files->arr[files->n].st_ino = new->st_ino;\n  files->n += 1;\n}\n\n",
            "calle": [
                "exit",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct visited_file_array_t",
                        "type": "struct visited_file_array_t *",
                        "definition": [
                            "struct visited_file_array_t *files"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct stat",
                        "type": "struct stat *",
                        "definition": [
                            "struct stat *new"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "parse_ld_config_file",
            "header": "static int parse_ld_config_file(struct string_table_t *st, char *path)",
            "params": [
                "struct string_table_t *st",
                "char *path"
            ],
            "definition": "static int parse_ld_config_file(struct string_table_t *st, char *path)\n{\n  FILE *fptr = fopen(path, \"r\");\n  if (fptr == 0)\n  {\n    return 1;\n  }\n  int c = 0;\n  char line[4096];\n  char tmp[4096];\n  while (c != EOF)\n  {\n    helper_parse_ld_config_file_1(&c, st, path, fptr, line, tmp);\n  }\n\n  fclose(fptr);\n  return 0;\n}\n\n",
            "calle": [
                "fclose",
                "fopen",
                "helper_parse_ld_config_file_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct string_table_t",
                        "type": "struct string_table_t *",
                        "definition": [
                            "struct string_table_t *st"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "char *",
                        "definition": [
                            "char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fptr",
                        "type": "FILE *",
                        "definition": [
                            "FILE *fptr = fopen(path, \"r\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "line",
                        "type": "char [4096]",
                        "definition": [
                            "char line[4096]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "char [4096]",
                        "definition": [
                            "char tmp[4096]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ld_conf_globbing",
            "header": "",
            "params": [
                "struct string_table_t *st",
                "char *pattern"
            ],
            "definition": "static int ld_conf_globbing(struct string_table_t *st, char *pattern)\n{\n  glob_t result;\n  memset(&result, 0, sizeof(result));\n  int status = glob(pattern, 0, 0, &result);\n  switch (status)\n  {\n    case GLOB_NOSPACE:\n\n    case GLOB_ABORTED:\n    {\n      globfree(&result);\n      return 1;\n    }\n\n    case GLOB_NOMATCH:\n    {\n      globfree(&result);\n      return 0;\n    }\n\n  }\n\n  int code = 0;\n  for (size_t i = 0; i < result.gl_pathc; i += 1)\n    code |= parse_ld_config_file(st, result.gl_pathv[i]);\n\n  globfree(&result);\n  return code;\n}\n\n",
            "calle": [
                "glob",
                "globfree",
                "memset",
                "parse_ld_config_file"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct string_table_t",
                        "type": "struct string_table_t *",
                        "definition": [
                            "struct string_table_t *st"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pattern",
                        "type": "char *",
                        "definition": [
                            "char *pattern"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "glob_t",
                        "definition": [
                            "glob_t result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "status",
                        "type": "int",
                        "definition": [
                            "int status = glob(pattern, 0, 0, &result)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code",
                        "type": "int",
                        "definition": [
                            "int code = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "parse_ld_so_conf",
            "header": "",
            "params": [
                "struct libtree_state_t *s"
            ],
            "definition": "static void parse_ld_so_conf(struct libtree_state_t *s)\n{\n  struct string_table_t *st = &s->string_table;\n  s->ld_so_conf_offset = st->n;\n  parse_ld_config_file(st, s->ld_conf_file);\n  if (st->n > s->ld_so_conf_offset)\n  {\n    st->arr[st->n - 1] = '\\0';\n  }\n  else\n  {\n    string_table_store(st, \"\");\n  }\n}\n\n",
            "calle": [
                "parse_ld_config_file",
                "string_table_store"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct libtree_state_t",
                        "type": "struct libtree_state_t *",
                        "definition": [
                            "struct libtree_state_t *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct string_table_t",
                        "type": "struct string_table_t *",
                        "definition": [
                            "struct string_table_t *st = &s->string_table"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "parse_ld_library_path",
            "header": "",
            "params": [
                "struct libtree_state_t *s"
            ],
            "definition": "static void parse_ld_library_path(struct libtree_state_t *s)\n{\n  s->ld_library_path_offset = SIZE_MAX;\n  char *val = getenv(\"LD_LIBRARY_PATH\");\n  if (val == 0)\n  {\n    return;\n  }\n  s->ld_library_path_offset = s->string_table.n;\n  string_table_store(&s->string_table, val);\n  char *search = s->string_table.arr + s->ld_library_path_offset;\n  unsigned int search_idx = 0;\n  while ((search_idx = strchr(search_idx, ';')) != 0)\n    search[search_idx] = ':';\n\n  search_idx += 1;\n}\n\n",
            "calle": [
                "getenv",
                "strchr",
                "string_table_store"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct libtree_state_t",
                        "type": "struct libtree_state_t *",
                        "definition": [
                            "struct libtree_state_t *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "char *",
                        "definition": [
                            "char *val = getenv(\"LD_LIBRARY_PATH\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "search",
                        "type": "char *",
                        "definition": [
                            "char *search = s->string_table.arr + s->ld_library_path_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "search_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int search_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "set_default_paths",
            "header": "",
            "params": [
                "struct libtree_state_t *s"
            ],
            "definition": "static void set_default_paths(struct libtree_state_t *s)\n{\n  s->default_paths_offset = s->string_table.n;\n  string_table_store(&s->string_table, \"/lib:/lib64:/usr/lib:/usr/lib64\");\n}\n\n",
            "calle": [
                "string_table_store"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct libtree_state_t",
                        "type": "struct libtree_state_t *",
                        "definition": [
                            "struct libtree_state_t *s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "libtree_state_init",
            "header": "",
            "params": [
                "struct libtree_state_t *s"
            ],
            "definition": "static void libtree_state_init(struct libtree_state_t *s)\n{\n  s->string_table.n = 0;\n  s->string_table.capacity = 1024;\n  s->string_table.arr = malloc(s->string_table.capacity * (sizeof(char)));\n  s->visited.n = 0;\n  s->visited.capacity = 256;\n  s->visited.arr = malloc(s->visited.capacity * (sizeof(struct visited_file_t)));\n}\n\n",
            "calle": [
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct libtree_state_t",
                        "type": "struct libtree_state_t *",
                        "definition": [
                            "struct libtree_state_t *s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "libtree_state_free",
            "header": "",
            "params": [
                "struct libtree_state_t *s"
            ],
            "definition": "static void libtree_state_free(struct libtree_state_t *s)\n{\n  free(s->string_table.arr);\n  free(s->visited.arr);\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct libtree_state_t",
                        "type": "struct libtree_state_t *",
                        "definition": [
                            "struct libtree_state_t *s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "print_tree",
            "header": "",
            "params": [
                "int pathc",
                "char **pathv",
                "struct libtree_state_t *s"
            ],
            "definition": "static int print_tree(int pathc, char **pathv, struct libtree_state_t *s)\n{\n  libtree_state_init(s);\n  parse_ld_so_conf(s);\n  parse_ld_library_path(s);\n  set_default_paths(s);\n  int exit_code = 0;\n  for (int i = 0; i < pathc; i += 1)\n  {\n    helper_print_tree_1(&exit_code, pathv, s, i);\n  }\n\n  libtree_state_free(s);\n  return exit_code;\n}\n\n",
            "calle": [
                "helper_print_tree_1",
                "libtree_state_free",
                "libtree_state_init",
                "parse_ld_library_path",
                "parse_ld_so_conf",
                "set_default_paths"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pathc",
                        "type": "int",
                        "definition": [
                            "int pathc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pathv",
                        "type": "char **",
                        "definition": [
                            "char **pathv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct libtree_state_t",
                        "type": "struct libtree_state_t *",
                        "definition": [
                            "struct libtree_state_t *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exit_code",
                        "type": "int",
                        "definition": [
                            "int exit_code = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#libtree",
            "header": "",
            "params": [
                "int argc",
                "char **argv"
            ],
            "definition": "int main(int argc, char **argv)\n{\n  unsigned int argv_idx = 0;\n  struct libtree_state_t s;\n  s.color = (getenv(\"NO_COLOR\") == 0) && isatty(STDOUT_FILENO);\n  s.verbosity = 0;\n  s.path = 0;\n  s.max_depth = 32;\n  int positional = 1;\n  struct utsname uname_val;\n  if (uname(&uname_val) != 0)\n  {\n    return 1;\n  }\n  s.PLATFORM = uname_val.machine;\n  s.OSNAME = uname_val.sysname;\n  s.OSREL = uname_val.release;\n  s.ld_conf_file = \"/etc/ld.so.conf\";\n  if (strcmp(uname_val.sysname, \"FreeBSD\") == 0)\n  {\n    s.ld_conf_file = \"/etc/ld-elf.so.conf\";\n  }\n  s.LIB = \"lib\";\n  int opt_help = 0;\n  int opt_version = 0;\n  int opt_raw = 0;\n  for (int i = 1; i < argc; i += 1)\n  {\n    helper_main_2(&argv_idx, &s, &positional, &opt_help, &opt_version, &opt_raw, &i, argc, argv);\n  }\n\n  argv_idx += 1;\n  positional -= 1;\n  if (opt_help || ((!opt_version) && (positional == 0)))\n  {\n    helper_main_1(s, opt_help);\n  }\n  if (opt_version)\n  {\n    puts(\"3.1.1\");\n    return 0;\n  }\n  return print_tree(positional, argv, &s);\n}\n\n",
            "calle": [
                "getenv",
                "helper_main_1",
                "helper_main_2",
                "isatty",
                "print_tree",
                "puts",
                "strcmp",
                "uname"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char **",
                        "definition": [
                            "char **argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int argv_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "struct libtree_state_t",
                        "definition": [
                            "struct libtree_state_t s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "positional",
                        "type": "int",
                        "definition": [
                            "int positional = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uname_val",
                        "type": "struct utsname",
                        "definition": [
                            "struct utsname uname_val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_help",
                        "type": "int",
                        "definition": [
                            "int opt_help = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_version",
                        "type": "int",
                        "definition": [
                            "int opt_version = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_raw",
                        "type": "int",
                        "definition": [
                            "int opt_raw = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_check_absolute_paths_1",
            "header": "",
            "params": [
                "size_t * const depth_ref",
                "int * const exit_code_ref",
                "size_t * const i_ref",
                "size_t * const needed_not_found",
                "struct small_vec_u64_t * const needed_buf_offsets",
                "struct libtree_state_t * const s",
                "struct compat_t compat"
            ],
            "definition": "void helper_check_absolute_paths_1(size_t * const depth_ref, int * const exit_code_ref, size_t * const i_ref, size_t * const needed_not_found, struct small_vec_u64_t * const needed_buf_offsets, struct libtree_state_t * const s, struct compat_t compat)\n{\n  size_t depth = *depth_ref;\n  int exit_code = *exit_code_ref;\n  size_t i = *i_ref;\n  const struct string_table_t *st = &s->string_table;\n  if (strchr(st->arr + needed_buf_offsets->p[i], '/') == 0)\n  {\n    i += 1;\n    continue;\n  }\n  char path[4096];\n  size_t len = strlen(st->arr + needed_buf_offsets->p[i]);\n  if (len >= 4096)\n  {\n    continue;\n  }\n  memcpy(path, st->arr + needed_buf_offsets->p[i], len + 1);\n  s->found_all_needed[depth] = (*needed_not_found) <= 1;\n  char *err = 0;\n  unsigned int err_idx = 0;\n  if (path[0] != '/')\n  {\n    err_idx = \" is not absolute\";\n    exit_code = 28;\n  }\n  else\n  {\n    int code = recurse(path, depth + 1, s, compat, (struct found_t){.how = DIRECT});\n    if (code == 28)\n    {\n      exit_code = 28;\n    }\n    if ((code != 0) && (code != 28))\n    {\n      err_idx = \" not found\";\n    }\n  }\n  if (err)\n  {\n    helper_helper_check_absolute_paths_1_1(s, depth, path);\n  }\n  size_t tmp = needed_buf_offsets->p[i];\n  needed_buf_offsets->p[i] = needed_buf_offsets->p[(*needed_not_found) - 1];\n  needed_buf_offsets->p[--(*needed_not_found)] = tmp;\n  *depth_ref = depth;\n  *exit_code_ref = exit_code;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "helper_helper_check_absolute_paths_1_1",
                "memcpy",
                "recurse",
                "strchr",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "depth_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const depth_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exit_code_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const exit_code_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "needed_not_found",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const needed_not_found"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct small_vec_u64_t",
                        "type": "struct small_vec_u64_t * const",
                        "definition": [
                            "struct small_vec_u64_t * const needed_buf_offsets"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct libtree_state_t",
                        "type": "struct libtree_state_t * const",
                        "definition": [
                            "struct libtree_state_t * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compat",
                        "type": "struct compat_t",
                        "definition": [
                            "struct compat_t compat"
                        ]
                    },
                    {
                        "path": null,
                        "name": "depth",
                        "type": "size_t",
                        "definition": [
                            "size_t depth = *depth_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exit_code",
                        "type": "int",
                        "definition": [
                            "int exit_code = *exit_code_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct string_table_t",
                        "type": "const struct string_table_t *",
                        "definition": [
                            "const struct string_table_t *st = &s->string_table"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "char [4096]",
                        "definition": [
                            "char path[4096]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len = strlen(st->arr + needed_buf_offsets->p[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "char *",
                        "definition": [
                            "char *err = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int err_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code",
                        "type": "int",
                        "definition": [
                            "int code = recurse(path, depth + 1, s, compat, (struct found_t){.how = DIRECT})"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "size_t",
                        "definition": [
                            "size_t tmp = needed_buf_offsets->p[i]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_check_search_paths_1",
            "header": "",
            "params": [
                "size_t * const offset_ref",
                "size_t * const depth_ref",
                "int * const exit_code_ref",
                "struct found_t reason",
                "size_t * const needed_not_found",
                "struct small_vec_u64_t * const needed_buf_offsets",
                "struct libtree_state_t * const s",
                "struct compat_t compat",
                "char path[4096]",
                "char * const path_end",
                "const struct string_table_t * const st"
            ],
            "definition": "int helper_check_search_paths_1(size_t * const offset_ref, size_t * const depth_ref, int * const exit_code_ref, struct found_t reason, size_t * const needed_not_found, struct small_vec_u64_t * const needed_buf_offsets, struct libtree_state_t * const s, struct compat_t compat, char path[4096], char * const path_end, const struct string_table_t * const st)\n{\n  size_t offset = *offset_ref;\n  size_t depth = *depth_ref;\n  int exit_code = *exit_code_ref;\n  offset += 1;\n  offset += 1;\n  offset += 1;\n  offset += 1;\n  offset += 1;\n  offset += 1;\n  offset += 1;\n  offset += 1;\n  while ((st->arr[offset] == ':') && (st->arr[offset] != '\\0'))\n    ++offset;\n\n  if (st->arr[offset] == '\\0')\n    return exit_code;\n  char *dest = path;\n  while (((st->arr[offset] != '\\0') && (st->arr[offset] != ':')) && (dest != path_end))\n    *(dest++) = st->arr[offset++];\n\n  if ((dest + 1) >= path_end)\n    continue;\n  if ((*(dest - 1)) != '/')\n    *(dest++) = '/';\n  char *search_path_end = dest;\n  for (size_t i = 0; i < (*needed_not_found);)\n  {\n    helper_helper_check_search_paths_1_1(&depth, &exit_code, &i, reason, needed_not_found, needed_buf_offsets, s, compat, path, path_end, st, search_path_end);\n  }\n\n  *offset_ref = offset;\n  *depth_ref = depth;\n  *exit_code_ref = exit_code;\n}\n\n",
            "calle": [
                "helper_helper_check_search_paths_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "offset_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const offset_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "depth_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const depth_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exit_code_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const exit_code_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reason",
                        "type": "struct found_t",
                        "definition": [
                            "struct found_t reason"
                        ]
                    },
                    {
                        "path": null,
                        "name": "needed_not_found",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const needed_not_found"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct small_vec_u64_t",
                        "type": "struct small_vec_u64_t * const",
                        "definition": [
                            "struct small_vec_u64_t * const needed_buf_offsets"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct libtree_state_t",
                        "type": "struct libtree_state_t * const",
                        "definition": [
                            "struct libtree_state_t * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compat",
                        "type": "struct compat_t",
                        "definition": [
                            "struct compat_t compat"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "char [4096]",
                        "definition": [
                            "char path[4096]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path_end",
                        "type": "char * const",
                        "definition": [
                            "char * const path_end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct string_table_t",
                        "type": "const struct string_table_t * const",
                        "definition": [
                            "const struct string_table_t * const st"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offset",
                        "type": "size_t",
                        "definition": [
                            "size_t offset = *offset_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "depth",
                        "type": "size_t",
                        "definition": [
                            "size_t depth = *depth_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exit_code",
                        "type": "int",
                        "definition": [
                            "int exit_code = *exit_code_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest",
                        "type": "char *",
                        "definition": [
                            "char *dest = path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "search_path_end",
                        "type": "char *",
                        "definition": [
                            "char *search_path_end = dest"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_interpolate_variables_1",
            "header": "",
            "params": [
                "size_t * const prev_src_ref",
                "size_t * const curr_src_ref",
                "struct libtree_state_t * const s",
                "const char * const ORIGIN",
                "struct string_table_t * const st"
            ],
            "definition": "void helper_interpolate_variables_1(size_t * const prev_src_ref, size_t * const curr_src_ref, struct libtree_state_t * const s, const char * const ORIGIN, struct string_table_t * const st)\n{\n  size_t prev_src = *prev_src_ref;\n  size_t curr_src = *curr_src_ref;\n  char *dollar = strchr(st->arr + curr_src, '$');\n  if (dollar == 0)\n  {\n    break;\n  }\n  curr_src = dollar - st->arr;\n  size_t bytes_to_dollar = curr_src - prev_src;\n  curr_src += 1;\n  int curly = 0;\n  if (st->arr[curr_src] == '{')\n  {\n    curly = 1;\n    curr_src += 1;\n  }\n  const char *var_val = 0;\n  unsigned int var_val_idx = 0;\n  if (strncmp(&st->arr[curr_src], \"ORIGIN\", 6) == 0)\n  {\n    var_val_idx = ORIGIN;\n    curr_src += 6;\n  }\n  else\n    if (strncmp(&st->arr[curr_src], \"LIB\", 3) == 0)\n  {\n    var_val_idx = s->LIB;\n    curr_src += 3;\n  }\n  else\n    if (strncmp(&st->arr[curr_src], \"PLATFORM\", 8) == 0)\n  {\n    var_val_idx = s->PLATFORM;\n    curr_src += 8;\n  }\n  else\n    if (strncmp(&st->arr[curr_src], \"OSNAME\", 6) == 0)\n  {\n    var_val_idx = s->OSNAME;\n    curr_src += 6;\n  }\n  else\n    if (strncmp(&st->arr[curr_src], \"OSREL\", 5) == 0)\n  {\n    var_val_idx = s->OSREL;\n    curr_src += 5;\n  }\n  else\n  {\n    continue;\n  }\n  if (curly)\n  {\n    if (st->arr[curr_src] != '}')\n    {\n      continue;\n    }\n    curr_src += 1;\n  }\n  size_t var_len = strlen(var_val);\n  string_table_maybe_grow(st, bytes_to_dollar + var_len);\n  memcpy(&st->arr[s->string_table.n], &st->arr[prev_src], bytes_to_dollar);\n  s->string_table.n += bytes_to_dollar;\n  prev_src = curr_src;\n  memcpy(&st->arr[s->string_table.n], var_val, var_len);\n  s->string_table.n += var_len;\n  *prev_src_ref = prev_src;\n  *curr_src_ref = curr_src;\n}\n\n",
            "calle": [
                "memcpy",
                "strchr",
                "string_table_maybe_grow",
                "strlen",
                "strncmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "prev_src_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const prev_src_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curr_src_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const curr_src_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct libtree_state_t",
                        "type": "struct libtree_state_t * const",
                        "definition": [
                            "struct libtree_state_t * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ORIGIN",
                        "type": "const char * const",
                        "definition": [
                            "const char * const ORIGIN"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct string_table_t",
                        "type": "struct string_table_t * const",
                        "definition": [
                            "struct string_table_t * const st"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_src",
                        "type": "size_t",
                        "definition": [
                            "size_t prev_src = *prev_src_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curr_src",
                        "type": "size_t",
                        "definition": [
                            "size_t curr_src = *curr_src_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dollar",
                        "type": "char *",
                        "definition": [
                            "char *dollar = strchr(st->arr + curr_src, '$')"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bytes_to_dollar",
                        "type": "size_t",
                        "definition": [
                            "size_t bytes_to_dollar = curr_src - prev_src"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curly",
                        "type": "int",
                        "definition": [
                            "int curly = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "var_val",
                        "type": "const char *",
                        "definition": [
                            "const char *var_val = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "var_val_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int var_val_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "var_len",
                        "type": "size_t",
                        "definition": [
                            "size_t var_len = strlen(var_val)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_print_line_1",
            "header": "",
            "params": [
                "unsigned int * const conf_name_idx_ref",
                "struct libtree_state_t * const s"
            ],
            "definition": "void helper_print_line_1(unsigned int * const conf_name_idx_ref, struct libtree_state_t * const s)\n{\n  unsigned int conf_name_idx = *conf_name_idx_ref;\n  putchar('[');\n  char *conf_name = strrchr(s->ld_conf_file, '/');\n  conf_name_idx = (conf_name_idx == 0) ? (s->ld_conf_file) : (conf_name_idx + 1);\n  fputs(conf_name, stdout);\n  putchar(']');\n  break;\n  *conf_name_idx_ref = conf_name_idx;\n}\n\n",
            "calle": [
                "fputs",
                "putchar",
                "strrchr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "conf_name_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const conf_name_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct libtree_state_t",
                        "type": "struct libtree_state_t * const",
                        "definition": [
                            "struct libtree_state_t * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "conf_name_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int conf_name_idx = *conf_name_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "conf_name",
                        "type": "char *",
                        "definition": [
                            "char *conf_name = strrchr(s->ld_conf_file, '/')"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_print_line_2",
            "header": "",
            "params": [
                "size_t depth",
                "struct found_t reason"
            ],
            "definition": "void helper_print_line_2(size_t depth, struct found_t reason)\n{\n  if ((reason.depth + 1) >= depth)\n  {\n    fputs(\"[rpath]\", stdout);\n  }\n  else\n  {\n    char num[8];\n    utoa(num, reason.depth + 1);\n    fputs(\"[rpath of \", stdout);\n    fputs(num, stdout);\n    putchar(']');\n  }\n  break;\n}\n\n",
            "calle": [
                "fputs",
                "putchar",
                "utoa"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "depth",
                        "type": "size_t",
                        "definition": [
                            "size_t depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reason",
                        "type": "struct found_t",
                        "definition": [
                            "struct found_t reason"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num",
                        "type": "char [8]",
                        "definition": [
                            "char num[8]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_print_error_1",
            "header": "",
            "params": [
                "unsigned int * const p_idx_ref",
                "struct libtree_state_t * const s",
                "size_t i",
                "char * const p",
                "size_t i"
            ],
            "definition": "void helper_print_error_1(unsigned int * const p_idx_ref, struct libtree_state_t * const s, size_t i, char * const p, size_t i)\n{\n  unsigned int p_idx = *p_idx_ref;\n  if (s->found_all_needed[i])\n  {\n    int len = (sizeof(\"    \")) - 1;\n    memcpy(p, \"    \", len);\n    p_idx += len;\n  }\n  else\n  {\n    int len = (sizeof(\"\\xe2\\x94\\x82   \")) - 1;\n    memcpy(p, \"\\xe2\\x94\\x82   \", len);\n    p_idx += len;\n  }\n  *p_idx_ref = p_idx;\n}\n\n",
            "calle": [
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const p_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct libtree_state_t",
                        "type": "struct libtree_state_t * const",
                        "definition": [
                            "struct libtree_state_t * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "char * const",
                        "definition": [
                            "char * const p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = *p_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len = (sizeof(\"    \")) - 1",
                            "int len = (sizeof(\"\\xe2\\x94\\x82   \")) - 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_print_error_2",
            "header": "",
            "params": [
                "size_t * const depth_ref",
                "size_t needed_not_found",
                "struct small_vec_u64_t * const needed_buf_offsets",
                "struct libtree_state_t * const s",
                "size_t i",
                "size_t i"
            ],
            "definition": "void helper_print_error_2(size_t * const depth_ref, size_t needed_not_found, struct small_vec_u64_t * const needed_buf_offsets, struct libtree_state_t * const s, size_t i, size_t i)\n{\n  size_t depth = *depth_ref;\n  s->found_all_needed[depth] = (i + 1) >= needed_not_found;\n  tree_preamble(s, depth + 1);\n  if (s->color)\n  {\n    fputs(\"\\033[1;31m\", stdout);\n  }\n  fputs(s->string_table.arr + needed_buf_offsets->p[i], stdout);\n  fputs(\" not found\\n\", stdout);\n  if (s->color)\n  {\n    fputs(\"\\033[0m\", stdout);\n  }\n  *depth_ref = depth;\n}\n\n",
            "calle": [
                "fputs",
                "tree_preamble"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "depth_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const depth_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "needed_not_found",
                        "type": "size_t",
                        "definition": [
                            "size_t needed_not_found"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct small_vec_u64_t",
                        "type": "struct small_vec_u64_t * const",
                        "definition": [
                            "struct small_vec_u64_t * const needed_buf_offsets"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct libtree_state_t",
                        "type": "struct libtree_state_t * const",
                        "definition": [
                            "struct libtree_state_t * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "depth",
                        "type": "size_t",
                        "definition": [
                            "size_t depth = *depth_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_print_error_3",
            "header": "",
            "params": [
                "size_t depth",
                "struct libtree_state_t * const s",
                "char * const indent"
            ],
            "definition": "void helper_print_error_3(size_t depth, struct libtree_state_t * const s, char * const indent)\n{\n  if (s->color)\n  {\n    fputs(\"\\033[0;90m\", stdout);\n  }\n  fputs(\" 1. rpath:\\n\", stdout);\n  if (s->color)\n  {\n    fputs(\"\\033[0m\", stdout);\n  }\n  for (int j = depth; j >= 0; j -= 1)\n  {\n    if (s->rpath_offsets[j] != SIZE_MAX)\n    {\n      char num[8];\n      utoa(num, j + 1);\n      fputs(indent, stdout);\n      if (s->color)\n      {\n        fputs(\"\\033[0;90m\", stdout);\n      }\n      fputs(\"    depth \", stdout);\n      fputs(num, stdout);\n      if (s->color)\n      {\n        fputs(\"\\033[0m\", stdout);\n      }\n      putchar('\\n');\n      print_colon_delimited_paths(s->string_table.arr + s->rpath_offsets[j], indent);\n    }\n  }\n\n}\n\n",
            "calle": [
                "fputs",
                "print_colon_delimited_paths",
                "putchar",
                "utoa"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "depth",
                        "type": "size_t",
                        "definition": [
                            "size_t depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct libtree_state_t",
                        "type": "struct libtree_state_t * const",
                        "definition": [
                            "struct libtree_state_t * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "indent",
                        "type": "char * const",
                        "definition": [
                            "char * const indent"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num",
                        "type": "char [8]",
                        "definition": [
                            "char num[8]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_recurse_1",
            "header": "",
            "params": [
                "struct libtree_state_t * const s",
                "FILE * const fptr",
                "size_t old_buf_size",
                "uint64_t soname",
                "struct small_vec_u64_t needed",
                "uint64_t strtab_offset"
            ],
            "definition": "int helper_recurse_1(struct libtree_state_t * const s, FILE * const fptr, size_t old_buf_size, uint64_t soname, struct small_vec_u64_t needed, uint64_t strtab_offset)\n{\n  if (fseek(fptr, strtab_offset + soname, 0) != 0)\n  {\n    s->string_table.n = old_buf_size;\n    fclose(fptr);\n    small_vec_u64_free(&needed);\n    return 24;\n  }\n  string_table_copy_from_file(&s->string_table, fptr);\n}\n\n",
            "calle": [
                "fclose",
                "fseek",
                "small_vec_u64_free",
                "string_table_copy_from_file"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct libtree_state_t",
                        "type": "struct libtree_state_t * const",
                        "definition": [
                            "struct libtree_state_t * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fptr",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const fptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "old_buf_size",
                        "type": "size_t",
                        "definition": [
                            "size_t old_buf_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "soname",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t soname"
                        ]
                    },
                    {
                        "path": null,
                        "name": "needed",
                        "type": "struct small_vec_u64_t",
                        "definition": [
                            "struct small_vec_u64_t needed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strtab_offset",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t strtab_offset"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_recurse_2",
            "header": "",
            "params": [
                "struct libtree_state_t * const s",
                "FILE * const fptr",
                "size_t old_buf_size",
                "uint64_t i",
                "uint32_t i",
                "struct small_vec_u64_t needed",
                "uint64_t strtab_offset",
                "struct small_vec_u64_t needed_buf_offsets",
                "size_t i"
            ],
            "definition": "int helper_recurse_2(struct libtree_state_t * const s, FILE * const fptr, size_t old_buf_size, uint64_t i, uint32_t i, struct small_vec_u64_t needed, uint64_t strtab_offset, struct small_vec_u64_t needed_buf_offsets, size_t i)\n{\n  small_vec_u64_append(&needed_buf_offsets, s->string_table.n);\n  if (fseek(fptr, strtab_offset + needed.p[i], 0) != 0)\n  {\n    s->string_table.n = old_buf_size;\n    fclose(fptr);\n    small_vec_u64_free(&needed_buf_offsets);\n    small_vec_u64_free(&needed);\n    return 27;\n  }\n  string_table_copy_from_file(&s->string_table, fptr);\n}\n\n",
            "calle": [
                "fclose",
                "fseek",
                "small_vec_u64_append",
                "small_vec_u64_free",
                "string_table_copy_from_file"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct libtree_state_t",
                        "type": "struct libtree_state_t * const",
                        "definition": [
                            "struct libtree_state_t * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fptr",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const fptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "old_buf_size",
                        "type": "size_t",
                        "definition": [
                            "size_t old_buf_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "uint64_t",
                        "definition": [
                            "size_t i",
                            "uint32_t i",
                            "uint64_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "needed",
                        "type": "struct small_vec_u64_t",
                        "definition": [
                            "struct small_vec_u64_t needed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strtab_offset",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t strtab_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "needed_buf_offsets",
                        "type": "struct small_vec_u64_t",
                        "definition": [
                            "struct small_vec_u64_t needed_buf_offsets"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_recurse_3",
            "header": "",
            "params": [
                "char * const current_file",
                "size_t depth",
                "struct libtree_state_t * const s",
                "struct found_t reason",
                "FILE * const fptr",
                "size_t old_buf_size",
                "int seen_before",
                "uint64_t soname",
                "struct small_vec_u64_t needed",
                "size_t soname_buf_offset",
                "int in_exclude_list"
            ],
            "definition": "int helper_recurse_3(char * const current_file, size_t depth, struct libtree_state_t * const s, struct found_t reason, FILE * const fptr, size_t old_buf_size, int seen_before, uint64_t soname, struct small_vec_u64_t needed, size_t soname_buf_offset, int in_exclude_list)\n{\n  char *print_name = ((soname == 0xFFFFFFFFFFFFFFFF) || s->path) ? (current_file) : (s->string_table.arr + soname_buf_offset);\n  char *bold_color = (in_exclude_list) ? (\"\\033[0;35m\") : ((seen_before) ? (\"\\033[0;34m\") : (\"\\033[1;36m\"));\n  char *regular_color = (in_exclude_list) ? (\"\\033[0;35m\") : ((seen_before) ? (\"\\033[0;34m\") : (\"\\033[0;36m\"));\n  int highlight = (!seen_before) && (!in_exclude_list);\n  print_line(depth, print_name, bold_color, regular_color, highlight, reason, s);\n  s->string_table.n = old_buf_size;\n  fclose(fptr);\n  small_vec_u64_free(&needed);\n  return 0;\n}\n\n",
            "calle": [
                "fclose",
                "print_line",
                "small_vec_u64_free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "current_file",
                        "type": "char * const",
                        "definition": [
                            "char * const current_file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "depth",
                        "type": "size_t",
                        "definition": [
                            "size_t depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct libtree_state_t",
                        "type": "struct libtree_state_t * const",
                        "definition": [
                            "struct libtree_state_t * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reason",
                        "type": "struct found_t",
                        "definition": [
                            "struct found_t reason"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fptr",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const fptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "old_buf_size",
                        "type": "size_t",
                        "definition": [
                            "size_t old_buf_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "seen_before",
                        "type": "int",
                        "definition": [
                            "int seen_before"
                        ]
                    },
                    {
                        "path": null,
                        "name": "soname",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t soname"
                        ]
                    },
                    {
                        "path": null,
                        "name": "needed",
                        "type": "struct small_vec_u64_t",
                        "definition": [
                            "struct small_vec_u64_t needed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "soname_buf_offset",
                        "type": "size_t",
                        "definition": [
                            "size_t soname_buf_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_exclude_list",
                        "type": "int",
                        "definition": [
                            "int in_exclude_list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "print_name",
                        "type": "char *",
                        "definition": [
                            "char *print_name = ((soname == 0xFFFFFFFFFFFFFFFF) || s->path) ? (current_file) : (s->string_table.arr + soname_buf_offset)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bold_color",
                        "type": "char *",
                        "definition": [
                            "char *bold_color = (in_exclude_list) ? (\"\\033[0;35m\") : ((seen_before) ? (\"\\033[0;34m\") : (\"\\033[1;36m\"))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "regular_color",
                        "type": "char *",
                        "definition": [
                            "char *regular_color = (in_exclude_list) ? (\"\\033[0;35m\") : ((seen_before) ? (\"\\033[0;34m\") : (\"\\033[0;36m\"))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "highlight",
                        "type": "int",
                        "definition": [
                            "int highlight = (!seen_before) && (!in_exclude_list)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_recurse_4",
            "header": "",
            "params": [
                "size_t * const runpath_buf_offset_ref",
                "struct libtree_state_t * const s",
                "FILE * const fptr",
                "size_t old_buf_size",
                "uint64_t runpath",
                "struct small_vec_u64_t needed",
                "uint64_t strtab_offset",
                "char origin[4096]"
            ],
            "definition": "int helper_recurse_4(size_t * const runpath_buf_offset_ref, struct libtree_state_t * const s, FILE * const fptr, size_t old_buf_size, uint64_t runpath, struct small_vec_u64_t needed, uint64_t strtab_offset, char origin[4096])\n{\n  size_t runpath_buf_offset = *runpath_buf_offset_ref;\n  if (fseek(fptr, strtab_offset + runpath, 0) != 0)\n  {\n    s->string_table.n = old_buf_size;\n    fclose(fptr);\n    small_vec_u64_free(&needed);\n    return 26;\n  }\n  string_table_copy_from_file(&s->string_table, fptr);\n  size_t curr_buf_size = s->string_table.n;\n  if (interpolate_variables(s, runpath_buf_offset, origin))\n  {\n    runpath_buf_offset = curr_buf_size;\n  }\n  *runpath_buf_offset_ref = runpath_buf_offset;\n}\n\n",
            "calle": [
                "fclose",
                "fseek",
                "interpolate_variables",
                "small_vec_u64_free",
                "string_table_copy_from_file"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "runpath_buf_offset_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const runpath_buf_offset_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct libtree_state_t",
                        "type": "struct libtree_state_t * const",
                        "definition": [
                            "struct libtree_state_t * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fptr",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const fptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "old_buf_size",
                        "type": "size_t",
                        "definition": [
                            "size_t old_buf_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "runpath",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t runpath"
                        ]
                    },
                    {
                        "path": null,
                        "name": "needed",
                        "type": "struct small_vec_u64_t",
                        "definition": [
                            "struct small_vec_u64_t needed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strtab_offset",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t strtab_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "origin",
                        "type": "char [4096]",
                        "definition": [
                            "char origin[4096]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "runpath_buf_offset",
                        "type": "size_t",
                        "definition": [
                            "size_t runpath_buf_offset = *runpath_buf_offset_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curr_buf_size",
                        "type": "size_t",
                        "definition": [
                            "size_t curr_buf_size = s->string_table.n"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_recurse_5",
            "header": "",
            "params": [
                "uint64_t * const p_offset_ref",
                "FILE * const fptr",
                "union \n{\n  struct header_64_t h64;\n  struct header_32_t h32;\n} header",
                "union \n{\n  struct prog_64_t p64;\n  struct prog_32_t p32;\n} prog",
                "struct small_vec_u64_t pt_load_offset",
                "struct small_vec_u64_t pt_load_vaddr"
            ],
            "definition": "int helper_recurse_5(uint64_t * const p_offset_ref, FILE * const fptr, union \n{\n  struct header_64_t h64;\n  struct header_32_t h32;\n} header, union \n{\n  struct prog_64_t p64;\n  struct prog_32_t p32;\n} prog, struct small_vec_u64_t pt_load_offset, struct small_vec_u64_t pt_load_vaddr)\n{\n  uint64_t p_offset = *p_offset_ref;\n  for (uint64_t i = 0; i < header.h64.e_phnum; i += 1)\n  {\n    if (fread(&prog.p64, sizeof(struct prog_64_t), 1, fptr) != 1)\n    {\n      fclose(fptr);\n      small_vec_u64_free(&pt_load_offset);\n      small_vec_u64_free(&pt_load_vaddr);\n      return 19;\n    }\n    if (prog.p64.p_type == 1)\n    {\n      small_vec_u64_append(&pt_load_offset, prog.p64.p_offset);\n      small_vec_u64_append(&pt_load_vaddr, prog.p64.p_vaddr);\n    }\n    else\n      if (prog.p64.p_type == 2)\n    {\n      p_offset = prog.p64.p_offset;\n    }\n  }\n\n  *p_offset_ref = p_offset;\n}\n\n",
            "calle": [
                "fclose",
                "fread",
                "small_vec_u64_append",
                "small_vec_u64_free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p_offset_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const p_offset_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fptr",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const fptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "header",
                        "type": "union \n{\n  struct header_64_t h64;\n  struct header_32_t h32;\n}",
                        "definition": [
                            "union \n{\n  struct header_64_t h64;\n  struct header_32_t h32;\n} header"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prog",
                        "type": "union \n{\n  struct prog_64_t p64;\n  struct prog_32_t p32;\n}",
                        "definition": [
                            "union \n{\n  struct prog_64_t p64;\n  struct prog_32_t p32;\n} prog"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pt_load_offset",
                        "type": "struct small_vec_u64_t",
                        "definition": [
                            "struct small_vec_u64_t pt_load_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pt_load_vaddr",
                        "type": "struct small_vec_u64_t",
                        "definition": [
                            "struct small_vec_u64_t pt_load_vaddr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_offset",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t p_offset = *p_offset_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t i = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_recurse_6",
            "header": "",
            "params": [
                "uint64_t * const p_offset_ref",
                "FILE * const fptr",
                "union \n{\n  struct header_64_t h64;\n  struct header_32_t h32;\n} header",
                "union \n{\n  struct prog_64_t p64;\n  struct prog_32_t p32;\n} prog",
                "struct small_vec_u64_t pt_load_offset",
                "struct small_vec_u64_t pt_load_vaddr"
            ],
            "definition": "int helper_recurse_6(uint64_t * const p_offset_ref, FILE * const fptr, union \n{\n  struct header_64_t h64;\n  struct header_32_t h32;\n} header, union \n{\n  struct prog_64_t p64;\n  struct prog_32_t p32;\n} prog, struct small_vec_u64_t pt_load_offset, struct small_vec_u64_t pt_load_vaddr)\n{\n  uint64_t p_offset = *p_offset_ref;\n  for (uint32_t i = 0; i < header.h32.e_phnum; i += 1)\n  {\n    if (fread(&prog.p32, sizeof(struct prog_32_t), 1, fptr) != 1)\n    {\n      fclose(fptr);\n      small_vec_u64_free(&pt_load_offset);\n      small_vec_u64_free(&pt_load_vaddr);\n      return 19;\n    }\n    if (prog.p32.p_type == 1)\n    {\n      small_vec_u64_append(&pt_load_offset, prog.p32.p_offset);\n      small_vec_u64_append(&pt_load_vaddr, prog.p32.p_vaddr);\n    }\n    else\n      if (prog.p32.p_type == 2)\n    {\n      p_offset = prog.p32.p_offset;\n    }\n  }\n\n  *p_offset_ref = p_offset;\n}\n\n",
            "calle": [
                "fclose",
                "fread",
                "small_vec_u64_append",
                "small_vec_u64_free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p_offset_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const p_offset_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fptr",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const fptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "header",
                        "type": "union \n{\n  struct header_64_t h64;\n  struct header_32_t h32;\n}",
                        "definition": [
                            "union \n{\n  struct header_64_t h64;\n  struct header_32_t h32;\n} header"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prog",
                        "type": "union \n{\n  struct prog_64_t p64;\n  struct prog_32_t p32;\n}",
                        "definition": [
                            "union \n{\n  struct prog_64_t p64;\n  struct prog_32_t p32;\n} prog"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pt_load_offset",
                        "type": "struct small_vec_u64_t",
                        "definition": [
                            "struct small_vec_u64_t pt_load_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pt_load_vaddr",
                        "type": "struct small_vec_u64_t",
                        "definition": [
                            "struct small_vec_u64_t pt_load_vaddr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_offset",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t p_offset = *p_offset_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t i = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_recurse_7",
            "header": "",
            "params": [
                "size_t * const depth_ref",
                "struct libtree_state_t * const s",
                "FILE * const fptr",
                "size_t old_buf_size",
                "uint64_t rpath",
                "struct small_vec_u64_t needed",
                "uint64_t strtab_offset",
                "char origin[4096]"
            ],
            "definition": "int helper_recurse_7(size_t * const depth_ref, struct libtree_state_t * const s, FILE * const fptr, size_t old_buf_size, uint64_t rpath, struct small_vec_u64_t needed, uint64_t strtab_offset, char origin[4096])\n{\n  size_t depth = *depth_ref;\n  s->rpath_offsets[depth] = s->string_table.n;\n  if (fseek(fptr, strtab_offset + rpath, 0) != 0)\n  {\n    s->string_table.n = old_buf_size;\n    fclose(fptr);\n    small_vec_u64_free(&needed);\n    return 25;\n  }\n  string_table_copy_from_file(&s->string_table, fptr);\n  size_t curr_buf_size = s->string_table.n;\n  if (interpolate_variables(s, s->rpath_offsets[depth], origin))\n  {\n    s->rpath_offsets[depth] = curr_buf_size;\n  }\n  *depth_ref = depth;\n}\n\n",
            "calle": [
                "fclose",
                "fseek",
                "interpolate_variables",
                "small_vec_u64_free",
                "string_table_copy_from_file"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "depth_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const depth_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct libtree_state_t",
                        "type": "struct libtree_state_t * const",
                        "definition": [
                            "struct libtree_state_t * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fptr",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const fptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "old_buf_size",
                        "type": "size_t",
                        "definition": [
                            "size_t old_buf_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rpath",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t rpath"
                        ]
                    },
                    {
                        "path": null,
                        "name": "needed",
                        "type": "struct small_vec_u64_t",
                        "definition": [
                            "struct small_vec_u64_t needed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strtab_offset",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t strtab_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "origin",
                        "type": "char [4096]",
                        "definition": [
                            "char origin[4096]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "depth",
                        "type": "size_t",
                        "definition": [
                            "size_t depth = *depth_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curr_buf_size",
                        "type": "size_t",
                        "definition": [
                            "size_t curr_buf_size = s->string_table.n"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_recurse_8",
            "header": "",
            "params": [
                "struct compat_t * const curr_type_ref",
                "struct compat_t compat",
                "FILE * const fptr",
                "union \n{\n  struct header_64_t h64;\n  struct header_32_t h32;\n} header"
            ],
            "definition": "int helper_recurse_8(struct compat_t * const curr_type_ref, struct compat_t compat, FILE * const fptr, union \n{\n  struct header_64_t h64;\n  struct header_32_t h32;\n} header)\n{\n  struct compat_t curr_type = *curr_type_ref;\n  if (fread(&header.h64, sizeof(struct header_64_t), 1, fptr) != 1)\n  {\n    fclose(fptr);\n    return 14;\n  }\n  if ((header.h64.e_type != 2) && (header.h64.e_type != 3))\n  {\n    fclose(fptr);\n    return 17;\n  }\n  curr_type.machine = header.h64.e_machine;\n  if ((!compat.any) && (compat.machine != curr_type.machine))\n  {\n    fclose(fptr);\n    return 32;\n  }\n  if (fseek(fptr, header.h64.e_phoff, 0) != 0)\n  {\n    fclose(fptr);\n    return 18;\n  }\n  *curr_type_ref = curr_type;\n}\n\n",
            "calle": [
                "fclose",
                "fread",
                "fseek"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct compat_t",
                        "type": "struct compat_t * const",
                        "definition": [
                            "struct compat_t * const curr_type_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compat",
                        "type": "struct compat_t",
                        "definition": [
                            "struct compat_t compat"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fptr",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const fptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "header",
                        "type": "union \n{\n  struct header_64_t h64;\n  struct header_32_t h32;\n}",
                        "definition": [
                            "union \n{\n  struct header_64_t h64;\n  struct header_32_t h32;\n} header"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curr_type",
                        "type": "struct compat_t",
                        "definition": [
                            "struct compat_t curr_type = *curr_type_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_recurse_9",
            "header": "",
            "params": [
                "struct compat_t * const curr_type_ref",
                "struct compat_t compat",
                "FILE * const fptr",
                "union \n{\n  struct header_64_t h64;\n  struct header_32_t h32;\n} header"
            ],
            "definition": "int helper_recurse_9(struct compat_t * const curr_type_ref, struct compat_t compat, FILE * const fptr, union \n{\n  struct header_64_t h64;\n  struct header_32_t h32;\n} header)\n{\n  struct compat_t curr_type = *curr_type_ref;\n  if (fread(&header.h32, sizeof(struct header_32_t), 1, fptr) != 1)\n  {\n    fclose(fptr);\n    return 14;\n  }\n  if ((header.h32.e_type != 2) && (header.h32.e_type != 3))\n  {\n    fclose(fptr);\n    return 17;\n  }\n  curr_type.machine = header.h32.e_machine;\n  if ((!compat.any) && (compat.machine != curr_type.machine))\n  {\n    fclose(fptr);\n    return 32;\n  }\n  if (fseek(fptr, header.h32.e_phoff, 0) != 0)\n  {\n    fclose(fptr);\n    return 18;\n  }\n  *curr_type_ref = curr_type;\n}\n\n",
            "calle": [
                "fclose",
                "fread",
                "fseek"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct compat_t",
                        "type": "struct compat_t * const",
                        "definition": [
                            "struct compat_t * const curr_type_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compat",
                        "type": "struct compat_t",
                        "definition": [
                            "struct compat_t compat"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fptr",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const fptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "header",
                        "type": "union \n{\n  struct header_64_t h64;\n  struct header_32_t h32;\n}",
                        "definition": [
                            "union \n{\n  struct header_64_t h64;\n  struct header_32_t h32;\n} header"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curr_type",
                        "type": "struct compat_t",
                        "definition": [
                            "struct compat_t curr_type = *curr_type_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_recurse_10",
            "header": "",
            "params": [
                "int * const no_def_lib_ref",
                "uint64_t * const strtab_ref",
                "uint64_t * const rpath_ref",
                "uint64_t * const runpath_ref",
                "uint64_t * const soname_ref",
                "int * const cont_ref",
                "FILE * const fptr",
                "struct compat_t curr_type",
                "struct small_vec_u64_t pt_load_offset",
                "struct small_vec_u64_t pt_load_vaddr",
                "struct small_vec_u64_t needed"
            ],
            "definition": "int helper_recurse_10(int * const no_def_lib_ref, uint64_t * const strtab_ref, uint64_t * const rpath_ref, uint64_t * const runpath_ref, uint64_t * const soname_ref, int * const cont_ref, FILE * const fptr, struct compat_t curr_type, struct small_vec_u64_t pt_load_offset, struct small_vec_u64_t pt_load_vaddr, struct small_vec_u64_t needed)\n{\n  int no_def_lib = *no_def_lib_ref;\n  uint64_t strtab = *strtab_ref;\n  uint64_t rpath = *rpath_ref;\n  uint64_t runpath = *runpath_ref;\n  uint64_t soname = *soname_ref;\n  int cont = *cont_ref;\n  uint64_t d_tag;\n  uint64_t d_val;\n  if (curr_type.class == 2)\n  {\n    helper_helper_recurse_10_1(&d_tag, &d_val, fptr, pt_load_offset, pt_load_vaddr, needed);\n  }\n  else\n  {\n    helper_helper_recurse_10_2(&d_tag, &d_val, fptr, pt_load_offset, pt_load_vaddr, needed);\n  }\n  switch (d_tag)\n  {\n    case 0:\n    {\n      cont = 0;\n      break;\n    }\n\n    case 5:\n    {\n      strtab = d_val;\n      break;\n    }\n\n    case 15:\n    {\n      rpath = d_val;\n      break;\n    }\n\n    case 29:\n    {\n      runpath = d_val;\n      break;\n    }\n\n    case 1:\n    {\n      small_vec_u64_append(&needed, d_val);\n      break;\n    }\n\n    case 14:\n    {\n      soname = d_val;\n      break;\n    }\n\n    case 0x6ffffffb:\n    {\n      no_def_lib |= (0x800 & d_val) == 0x800;\n      break;\n    }\n\n  }\n\n  *no_def_lib_ref = no_def_lib;\n  *strtab_ref = strtab;\n  *rpath_ref = rpath;\n  *runpath_ref = runpath;\n  *soname_ref = soname;\n  *cont_ref = cont;\n}\n\n",
            "calle": [
                "helper_helper_recurse_10_1",
                "helper_helper_recurse_10_2",
                "small_vec_u64_append"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "no_def_lib_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const no_def_lib_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strtab_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const strtab_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rpath_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const rpath_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "runpath_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const runpath_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "soname_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const soname_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cont_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const cont_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fptr",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const fptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curr_type",
                        "type": "struct compat_t",
                        "definition": [
                            "struct compat_t curr_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pt_load_offset",
                        "type": "struct small_vec_u64_t",
                        "definition": [
                            "struct small_vec_u64_t pt_load_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pt_load_vaddr",
                        "type": "struct small_vec_u64_t",
                        "definition": [
                            "struct small_vec_u64_t pt_load_vaddr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "needed",
                        "type": "struct small_vec_u64_t",
                        "definition": [
                            "struct small_vec_u64_t needed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "no_def_lib",
                        "type": "int",
                        "definition": [
                            "int no_def_lib = *no_def_lib_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strtab",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t strtab = *strtab_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rpath",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t rpath = *rpath_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "runpath",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t runpath = *runpath_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "soname",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t soname = *soname_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cont",
                        "type": "int",
                        "definition": [
                            "int cont = *cont_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_tag",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t d_tag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_val",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t d_val"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_parse_ld_config_file_1",
            "header": "",
            "params": [
                "int * const c_ref",
                "struct string_table_t * const st",
                "char * const path",
                "FILE * const fptr",
                "char line[4096]",
                "char tmp[4096]"
            ],
            "definition": "void helper_parse_ld_config_file_1(int * const c_ref, struct string_table_t * const st, char * const path, FILE * const fptr, char line[4096], char tmp[4096])\n{\n  int c = *c_ref;\n  size_t line_len = 0;\n  while (((c = getc(fptr)) != '\\n') && (c != EOF))\n  {\n    if (line_len < (4096 - 1))\n    {\n      line[line_len] = c;\n      line_len += 1;\n    }\n  }\n\n  line[line_len] = '\\0';\n  char *begin = line;\n  unsigned int begin_idx = 0;\n  char *end = line + line_len;\n  for (; isspace(*(&begin[begin_idx])); begin_idx += 1)\n  {\n  }\n\n  char *comment = strchr(begin, '#');\n  if (comment != 0)\n  {\n    *comment = '\\0';\n  }\n  while (end != (&begin[begin_idx]))\n    if (!isspace(*(--end)))\n  {\n    break;\n  }\n\n  if ((&begin[begin_idx]) == end)\n  {\n    continue;\n  }\n  end[1] = '\\0';\n  if ((strncmp(begin, \"include\", 7) == 0) && isspace(begin[7 + begin_idx]))\n  {\n    helper_helper_parse_ld_config_file_1_1(&begin_idx, st, path, tmp, begin, end);\n  }\n  else\n  {\n    string_table_store(st, begin);\n    st->arr[st->n - 1] = ':';\n  }\n  *c_ref = c;\n}\n\n",
            "calle": [
                "getc",
                "helper_helper_parse_ld_config_file_1_1",
                "isspace",
                "strchr",
                "string_table_store",
                "strncmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct string_table_t",
                        "type": "struct string_table_t * const",
                        "definition": [
                            "struct string_table_t * const st"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "char * const",
                        "definition": [
                            "char * const path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fptr",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const fptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "line",
                        "type": "char [4096]",
                        "definition": [
                            "char line[4096]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "char [4096]",
                        "definition": [
                            "char tmp[4096]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c = *c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "line_len",
                        "type": "size_t",
                        "definition": [
                            "size_t line_len = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "begin",
                        "type": "char *",
                        "definition": [
                            "char *begin = line"
                        ]
                    },
                    {
                        "path": null,
                        "name": "begin_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int begin_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "char *",
                        "definition": [
                            "char *end = line + line_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "comment",
                        "type": "char *",
                        "definition": [
                            "char *comment = strchr(begin, '#')"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_print_tree_1",
            "header": "",
            "params": [
                "int * const exit_code_ref",
                "char ** const pathv",
                "struct libtree_state_t * const s",
                "int i"
            ],
            "definition": "void helper_print_tree_1(int * const exit_code_ref, char ** const pathv, struct libtree_state_t * const s, int i)\n{\n  int exit_code = *exit_code_ref;\n  int code = recurse(pathv[i], 0, s, (struct compat_t){.any = 1}, (struct found_t){.how = INPUT});\n  fflush(stdout);\n  if (code != 0)\n  {\n    exit_code = code;\n    fputs(\"Error [\", stderr);\n    fputs(pathv[i], stderr);\n    fputs(\"]: \", stderr);\n  }\n  char *msg = 0;\n  unsigned int msg_idx = 0;\n  switch (code)\n  {\n    case 11:\n    {\n      msg_idx = \"Invalid ELF magic bytes\\n\";\n      break;\n    }\n\n    case 12:\n    {\n      msg_idx = \"Invalid ELF class\\n\";\n      break;\n    }\n\n    case 13:\n    {\n      msg_idx = \"Invalid ELF data\\n\";\n      break;\n    }\n\n    case 14:\n    {\n      msg_idx = \"Invalid ELF header\\n\";\n      break;\n    }\n\n    case 15:\n    {\n      msg_idx = \"Invalid bits\\n\";\n      break;\n    }\n\n    case 16:\n    {\n      msg_idx = \"Invalid endianness\\n\";\n      break;\n    }\n\n    case 17:\n    {\n      msg_idx = \"Not an ET_EXEC or ET_DYN ELF file\\n\";\n      break;\n    }\n\n    case 18:\n    {\n      msg_idx = \"Invalid ELF program header offset\\n\";\n      break;\n    }\n\n    case 19:\n    {\n      msg_idx = \"Invalid ELF program header\\n\";\n      break;\n    }\n\n    case 20:\n    {\n      msg_idx = \"Can't stat file\\n\";\n      break;\n    }\n\n    case 21:\n    {\n      msg_idx = \"Invalid ELF dynamic section\\n\";\n      break;\n    }\n\n    case 22:\n    {\n      msg_idx = \"Invalid ELF dynamic array entry\\n\";\n      break;\n    }\n\n    case 23:\n    {\n      msg_idx = \"No ELF string table found\\n\";\n      break;\n    }\n\n    case 24:\n    {\n      msg_idx = \"Can't read DT_SONAME\\n\";\n      break;\n    }\n\n    case 25:\n    {\n      msg_idx = \"Can't read DT_RPATH\\n\";\n      break;\n    }\n\n    case 26:\n    {\n      msg_idx = \"Can't read DT_RUNPATH\\n\";\n      break;\n    }\n\n    case 27:\n    {\n      msg_idx = \"Can't read DT_NEEDED\\n\";\n      break;\n    }\n\n    case 28:\n    {\n      msg_idx = \"Not all dependencies were found\\n\";\n      break;\n    }\n\n    case 29:\n    {\n      msg_idx = \"No PT_LOAD found in ELF file\\n\";\n      break;\n    }\n\n    case 30:\n    {\n      msg_idx = \"Virtual addresses are not ordered\\n\";\n      break;\n    }\n\n    case 31:\n    {\n      msg_idx = \"Could not open file\\n\";\n      break;\n    }\n\n    case 32:\n    {\n      msg_idx = \"Incompatible ISA\\n\";\n      break;\n    }\n\n  }\n\n  if ((&msg[msg_idx]) != 0)\n  {\n    fputs(msg, stderr);\n  }\n  fflush(stderr);\n  *exit_code_ref = exit_code;\n}\n\n",
            "calle": [
                "fflush",
                "fputs",
                "recurse"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "exit_code_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const exit_code_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pathv",
                        "type": "char ** const",
                        "definition": [
                            "char ** const pathv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct libtree_state_t",
                        "type": "struct libtree_state_t * const",
                        "definition": [
                            "struct libtree_state_t * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exit_code",
                        "type": "int",
                        "definition": [
                            "int exit_code = *exit_code_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code",
                        "type": "int",
                        "definition": [
                            "int code = recurse(pathv[i], 0, s, (struct compat_t){.any = 1}, (struct found_t){.how = INPUT})"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg",
                        "type": "char *",
                        "definition": [
                            "char *msg = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int msg_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_main_1",
            "header": "",
            "params": [
                "struct libtree_state_t s",
                "int opt_help"
            ],
            "definition": "int helper_main_1(struct libtree_state_t s, int opt_help)\n{\n  fputs(\"Show the dynamic dependency tree of ELF files\\nUsage: libtree [OPTION]... [--] FILE [FILES]...\\n\\n  -h, --help     Print help info\\n      --version  Print version info\\n\\nFile names starting with '-', for example '-.so', can be specified as follows:\\n  libtree -- -.so\\n\\nLocating libs options:\\n  -p, --path       Show the path of libraries instead of the soname\\n  -v               Show libraries skipped by default*\\n  -vv              Show dependencies of libraries skipped by default*\\n  -vvv             Show dependencies of already encountered libraries\\n  --ldconf <path>  Config file for extra search paths [\", stdout);\n  fputs(s.ld_conf_file, stdout);\n  fputs(\"]\\n  --max-depth <n>  Limit library traversal to at most n levels of depth\\n\\n* For brevity, the following libraries are not shown by default:\\n  \", stdout);\n  size_t num_excluded = (sizeof(exclude_list)) / (sizeof(char *));\n  size_t cursor_x = 3;\n  for (size_t j = 0; j < num_excluded; j += 1)\n  {\n    cursor_x += strlen(exclude_list[j]);\n    if (cursor_x > 60)\n    {\n      cursor_x = 3;\n      fputs(\"\\n  \", stdout);\n    }\n    fputs(exclude_list[j], stdout);\n    if ((j + 1) != num_excluded)\n    {\n      fputs(\", \", stdout);\n    }\n  }\n\n  fputs(\".\\n\\nThe following rpath/runpath substitutions are used:\\n\", stdout);\n  fputs(\"  PLATFORM       \", stdout);\n  fputs(s.PLATFORM, stdout);\n  fputs(\"\\n  LIB            \", stdout);\n  fputs(s.LIB, stdout);\n  fputs(\"\\n  OSNAME         \", stdout);\n  fputs(s.OSNAME, stdout);\n  fputs(\"\\n  OSREL          \", stdout);\n  fputs(s.OSREL, stdout);\n  putchar('\\n');\n  return !opt_help;\n}\n\n",
            "calle": [
                "fputs",
                "putchar",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "struct libtree_state_t",
                        "definition": [
                            "struct libtree_state_t s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_help",
                        "type": "int",
                        "definition": [
                            "int opt_help"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_excluded",
                        "type": "size_t",
                        "definition": [
                            "size_t num_excluded = (sizeof(exclude_list)) / (sizeof(char *))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cursor_x",
                        "type": "size_t",
                        "definition": [
                            "size_t cursor_x = 3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exclude_list",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_main_2",
            "header": "",
            "params": [
                "unsigned int * const argv_idx_ref",
                "struct libtree_state_t * const s_ref",
                "int * const positional_ref",
                "int * const opt_help_ref",
                "int * const opt_version_ref",
                "int * const opt_raw_ref",
                "int * const i_ref",
                "int argc",
                "char ** const argv"
            ],
            "definition": "int helper_main_2(unsigned int * const argv_idx_ref, struct libtree_state_t * const s_ref, int * const positional_ref, int * const opt_help_ref, int * const opt_version_ref, int * const opt_raw_ref, int * const i_ref, int argc, char ** const argv)\n{\n  unsigned int argv_idx = *argv_idx_ref;\n  struct libtree_state_t s = *s_ref;\n  int positional = *positional_ref;\n  int opt_help = *opt_help_ref;\n  int opt_version = *opt_version_ref;\n  int opt_raw = *opt_raw_ref;\n  int i = *i_ref;\n  char *arg = argv[i + argv_idx];\n  unsigned int arg_idx = 0;\n  if ((opt_raw || (arg[arg_idx] != '-')) || (arg[1 + arg_idx] == '\\0'))\n  {\n    argv[positional + argv_idx] = &arg[arg_idx];\n    positional += 1;\n    continue;\n  }\n  arg_idx += 1;\n  if (arg[arg_idx] == '-')\n  {\n    helper_helper_main_2_2(&s, &opt_help, &opt_version, &opt_raw, &i, &arg_idx, argc, argv, argv_idx, arg);\n  }\n  for (; arg[arg_idx] != '\\0'; arg_idx += 1)\n  {\n    helper_helper_main_2_1(&s, &opt_help, arg, arg_idx);\n  }\n\n  *argv_idx_ref = argv_idx;\n  *s_ref = s;\n  *positional_ref = positional;\n  *opt_help_ref = opt_help;\n  *opt_version_ref = opt_version;\n  *opt_raw_ref = opt_raw;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "helper_helper_main_2_1",
                "helper_helper_main_2_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argv_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const argv_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct libtree_state_t",
                        "type": "struct libtree_state_t * const",
                        "definition": [
                            "struct libtree_state_t * const s_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "positional_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const positional_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_help_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const opt_help_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_version_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const opt_version_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_raw_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const opt_raw_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char ** const",
                        "definition": [
                            "char ** const argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int argv_idx = *argv_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "struct libtree_state_t",
                        "definition": [
                            "struct libtree_state_t s = *s_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "positional",
                        "type": "int",
                        "definition": [
                            "int positional = *positional_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_help",
                        "type": "int",
                        "definition": [
                            "int opt_help = *opt_help_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_version",
                        "type": "int",
                        "definition": [
                            "int opt_version = *opt_version_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_raw",
                        "type": "int",
                        "definition": [
                            "int opt_raw = *opt_raw_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg",
                        "type": "char *",
                        "definition": [
                            "char *arg = argv[i + argv_idx]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int arg_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_check_absolute_paths_1_1",
            "header": "",
            "params": [
                "struct libtree_state_t * const s",
                "size_t depth",
                "char path[4096]"
            ],
            "definition": "void helper_helper_check_absolute_paths_1_1(struct libtree_state_t * const s, size_t depth, char path[4096])\n{\n  tree_preamble(s, depth + 1);\n  if (s->color)\n  {\n    fputs(\"\\033[1;31m\", stdout);\n  }\n  fputs(path, stdout);\n  fputs(\" is not absolute\", stdout);\n  fputs((s->color) ? (\"\\033[0m\\n\") : (\"\\n\"), stdout);\n}\n\n",
            "calle": [
                "fputs",
                "tree_preamble"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct libtree_state_t",
                        "type": "struct libtree_state_t * const",
                        "definition": [
                            "struct libtree_state_t * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "depth",
                        "type": "size_t",
                        "definition": [
                            "size_t depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "char [4096]",
                        "definition": [
                            "char path[4096]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_check_search_paths_1_1",
            "header": "",
            "params": [
                "size_t * const depth_ref",
                "int * const exit_code_ref",
                "size_t * const i_ref",
                "struct found_t reason",
                "size_t * const needed_not_found",
                "struct small_vec_u64_t * const needed_buf_offsets",
                "struct libtree_state_t * const s",
                "struct compat_t compat",
                "char path[4096]",
                "char * const path_end",
                "const struct string_table_t * const st",
                "char * const search_path_end"
            ],
            "definition": "void helper_helper_check_search_paths_1_1(size_t * const depth_ref, int * const exit_code_ref, size_t * const i_ref, struct found_t reason, size_t * const needed_not_found, struct small_vec_u64_t * const needed_buf_offsets, struct libtree_state_t * const s, struct compat_t compat, char path[4096], char * const path_end, const struct string_table_t * const st, char * const search_path_end)\n{\n  size_t depth = *depth_ref;\n  int exit_code = *exit_code_ref;\n  size_t i = *i_ref;\n  size_t soname_len = strlen(st->arr + needed_buf_offsets->p[i]);\n  if (((search_path_end + soname_len) + 1) >= path_end)\n    continue;\n  memcpy(search_path_end, st->arr + needed_buf_offsets->p[i], soname_len + 1);\n  s->found_all_needed[depth] = (*needed_not_found) <= 1;\n  int code = recurse(path, depth + 1, s, compat, reason);\n  if (code == 28)\n    exit_code = 28;\n  if ((code == 0) || (code == 28))\n  {\n    size_t tmp = needed_buf_offsets->p[i];\n    needed_buf_offsets->p[i] = needed_buf_offsets->p[(*needed_not_found) - 1];\n    needed_buf_offsets->p[--(*needed_not_found)] = tmp;\n  }\n  else\n  {\n    ++i;\n  }\n  *depth_ref = depth;\n  *exit_code_ref = exit_code;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "memcpy",
                "recurse",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "depth_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const depth_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exit_code_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const exit_code_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reason",
                        "type": "struct found_t",
                        "definition": [
                            "struct found_t reason"
                        ]
                    },
                    {
                        "path": null,
                        "name": "needed_not_found",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const needed_not_found"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct small_vec_u64_t",
                        "type": "struct small_vec_u64_t * const",
                        "definition": [
                            "struct small_vec_u64_t * const needed_buf_offsets"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct libtree_state_t",
                        "type": "struct libtree_state_t * const",
                        "definition": [
                            "struct libtree_state_t * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compat",
                        "type": "struct compat_t",
                        "definition": [
                            "struct compat_t compat"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "char [4096]",
                        "definition": [
                            "char path[4096]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path_end",
                        "type": "char * const",
                        "definition": [
                            "char * const path_end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct string_table_t",
                        "type": "const struct string_table_t * const",
                        "definition": [
                            "const struct string_table_t * const st"
                        ]
                    },
                    {
                        "path": null,
                        "name": "search_path_end",
                        "type": "char * const",
                        "definition": [
                            "char * const search_path_end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "depth",
                        "type": "size_t",
                        "definition": [
                            "size_t depth = *depth_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exit_code",
                        "type": "int",
                        "definition": [
                            "int exit_code = *exit_code_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "soname_len",
                        "type": "size_t",
                        "definition": [
                            "size_t soname_len = strlen(st->arr + needed_buf_offsets->p[i])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code",
                        "type": "int",
                        "definition": [
                            "int code = recurse(path, depth + 1, s, compat, reason)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "size_t",
                        "definition": [
                            "size_t tmp = needed_buf_offsets->p[i]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_recurse_10_1",
            "header": "",
            "params": [
                "uint64_t * const d_tag_ref",
                "uint64_t * const d_val_ref",
                "FILE * const fptr",
                "struct small_vec_u64_t pt_load_offset",
                "struct small_vec_u64_t pt_load_vaddr",
                "struct small_vec_u64_t needed"
            ],
            "definition": "int helper_helper_recurse_10_1(uint64_t * const d_tag_ref, uint64_t * const d_val_ref, FILE * const fptr, struct small_vec_u64_t pt_load_offset, struct small_vec_u64_t pt_load_vaddr, struct small_vec_u64_t needed)\n{\n  uint64_t d_tag = *d_tag_ref;\n  uint64_t d_val = *d_val_ref;\n  struct dyn_64_t dyn;\n  if (fread(&dyn, sizeof(struct dyn_64_t), 1, fptr) != 1)\n  {\n    fclose(fptr);\n    small_vec_u64_free(&pt_load_offset);\n    small_vec_u64_free(&pt_load_vaddr);\n    small_vec_u64_free(&needed);\n    return 22;\n  }\n  d_tag = dyn.d_tag;\n  d_val = dyn.d_val;\n  *d_tag_ref = d_tag;\n  *d_val_ref = d_val;\n}\n\n",
            "calle": [
                "fclose",
                "fread",
                "small_vec_u64_free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "d_tag_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const d_tag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_val_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const d_val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fptr",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const fptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pt_load_offset",
                        "type": "struct small_vec_u64_t",
                        "definition": [
                            "struct small_vec_u64_t pt_load_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pt_load_vaddr",
                        "type": "struct small_vec_u64_t",
                        "definition": [
                            "struct small_vec_u64_t pt_load_vaddr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "needed",
                        "type": "struct small_vec_u64_t",
                        "definition": [
                            "struct small_vec_u64_t needed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_tag",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t d_tag = *d_tag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_val",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t d_val = *d_val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dyn",
                        "type": "struct dyn_64_t",
                        "definition": [
                            "struct dyn_64_t dyn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_recurse_10_2",
            "header": "",
            "params": [
                "uint64_t * const d_tag_ref",
                "uint64_t * const d_val_ref",
                "FILE * const fptr",
                "struct small_vec_u64_t pt_load_offset",
                "struct small_vec_u64_t pt_load_vaddr",
                "struct small_vec_u64_t needed"
            ],
            "definition": "int helper_helper_recurse_10_2(uint64_t * const d_tag_ref, uint64_t * const d_val_ref, FILE * const fptr, struct small_vec_u64_t pt_load_offset, struct small_vec_u64_t pt_load_vaddr, struct small_vec_u64_t needed)\n{\n  uint64_t d_tag = *d_tag_ref;\n  uint64_t d_val = *d_val_ref;\n  struct dyn_32_t dyn;\n  if (fread(&dyn, sizeof(struct dyn_32_t), 1, fptr) != 1)\n  {\n    fclose(fptr);\n    small_vec_u64_free(&pt_load_offset);\n    small_vec_u64_free(&pt_load_vaddr);\n    small_vec_u64_free(&needed);\n    return 22;\n  }\n  d_tag = dyn.d_tag;\n  d_val = dyn.d_val;\n  *d_tag_ref = d_tag;\n  *d_val_ref = d_val;\n}\n\n",
            "calle": [
                "fclose",
                "fread",
                "small_vec_u64_free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "d_tag_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const d_tag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_val_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const d_val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fptr",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const fptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pt_load_offset",
                        "type": "struct small_vec_u64_t",
                        "definition": [
                            "struct small_vec_u64_t pt_load_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pt_load_vaddr",
                        "type": "struct small_vec_u64_t",
                        "definition": [
                            "struct small_vec_u64_t pt_load_vaddr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "needed",
                        "type": "struct small_vec_u64_t",
                        "definition": [
                            "struct small_vec_u64_t needed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_tag",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t d_tag = *d_tag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_val",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t d_val = *d_val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dyn",
                        "type": "struct dyn_32_t",
                        "definition": [
                            "struct dyn_32_t dyn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_parse_ld_config_file_1_1",
            "header": "",
            "params": [
                "unsigned int * const begin_idx_ref",
                "struct string_table_t * const st",
                "char * const path",
                "char tmp[4096]",
                "char * const begin",
                "char * const end"
            ],
            "definition": "void helper_helper_parse_ld_config_file_1_1(unsigned int * const begin_idx_ref, struct string_table_t * const st, char * const path, char tmp[4096], char * const begin, char * const end)\n{\n  unsigned int begin_idx = *begin_idx_ref;\n  begin_idx += 8;\n  begin_idx += 1;\n  begin_idx += 1;\n  begin_idx += 1;\n  while (isspace(*(&begin[begin_idx])))\n    ++(&begin[begin_idx]);\n\n  if (begin[begin_idx] != '/')\n  {\n    char *wd = strrchr(path, '/');\n    unsigned int wd_idx = 0;\n    wd_idx = (wd_idx == 0) ? (strrchr(path, '\\0')) : (wd_idx);\n    size_t wd_len = (&wd[wd_idx]) - path;\n    size_t include_len = (end - (&begin[begin_idx])) + 1;\n    if (((wd_len + 1) + include_len) >= 4096)\n      continue;\n    memcpy(tmp, path, wd_len);\n    tmp[wd_len] = '/';\n    memcpy((tmp + wd_len) + 1, begin, include_len);\n    tmp[(wd_len + 1) + include_len] = '\\0';\n    begin_idx = tmp;\n  }\n  ld_conf_globbing(st, begin);\n  *begin_idx_ref = begin_idx;\n}\n\n",
            "calle": [
                "isspace",
                "ld_conf_globbing",
                "memcpy",
                "strrchr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "begin_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const begin_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct string_table_t",
                        "type": "struct string_table_t * const",
                        "definition": [
                            "struct string_table_t * const st"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "char * const",
                        "definition": [
                            "char * const path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "char [4096]",
                        "definition": [
                            "char tmp[4096]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "begin",
                        "type": "char * const",
                        "definition": [
                            "char * const begin"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "char * const",
                        "definition": [
                            "char * const end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "begin_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int begin_idx = *begin_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wd",
                        "type": "char *",
                        "definition": [
                            "char *wd = strrchr(path, '/')"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wd_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int wd_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wd_len",
                        "type": "size_t",
                        "definition": [
                            "size_t wd_len = (&wd[wd_idx]) - path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "include_len",
                        "type": "size_t",
                        "definition": [
                            "size_t include_len = (end - (&begin[begin_idx])) + 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_main_2_1",
            "header": "",
            "params": [
                "struct libtree_state_t * const s_ref",
                "int * const opt_help_ref",
                "char * const arg",
                "unsigned int arg_idx"
            ],
            "definition": "int helper_helper_main_2_1(struct libtree_state_t * const s_ref, int * const opt_help_ref, char * const arg, unsigned int arg_idx)\n{\n  struct libtree_state_t s = *s_ref;\n  int opt_help = *opt_help_ref;\n  switch (arg[arg_idx])\n  {\n    case 'h':\n    {\n      opt_help = 1;\n      break;\n    }\n\n    case 'p':\n    {\n      s.path = 1;\n      break;\n    }\n\n    case 'v':\n    {\n      s.verbosity += 1;\n      break;\n    }\n\n    default:\n    {\n      fputs(\"Unrecognized flag `-\", stderr);\n      fputs(arg, stderr);\n      fputs(\"`\\n\", stderr);\n      return 1;\n    }\n\n  }\n\n  *s_ref = s;\n  *opt_help_ref = opt_help;\n}\n\n",
            "calle": [
                "fputs"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct libtree_state_t",
                        "type": "struct libtree_state_t * const",
                        "definition": [
                            "struct libtree_state_t * const s_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_help_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const opt_help_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg",
                        "type": "char * const",
                        "definition": [
                            "char * const arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int arg_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "struct libtree_state_t",
                        "definition": [
                            "struct libtree_state_t s = *s_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_help",
                        "type": "int",
                        "definition": [
                            "int opt_help = *opt_help_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_main_2_2",
            "header": "",
            "params": [
                "struct libtree_state_t * const s_ref",
                "int * const opt_help_ref",
                "int * const opt_version_ref",
                "int * const opt_raw_ref",
                "int * const i_ref",
                "unsigned int * const arg_idx_ref",
                "int argc",
                "char ** const argv",
                "unsigned int argv_idx",
                "char * const arg"
            ],
            "definition": "int helper_helper_main_2_2(struct libtree_state_t * const s_ref, int * const opt_help_ref, int * const opt_version_ref, int * const opt_raw_ref, int * const i_ref, unsigned int * const arg_idx_ref, int argc, char ** const argv, unsigned int argv_idx, char * const arg)\n{\n  struct libtree_state_t s = *s_ref;\n  int opt_help = *opt_help_ref;\n  int opt_version = *opt_version_ref;\n  int opt_raw = *opt_raw_ref;\n  int i = *i_ref;\n  unsigned int arg_idx = *arg_idx_ref;\n  arg_idx += 1;\n  if (arg[arg_idx] == '\\0')\n  {\n    opt_raw = 1;\n    continue;\n  }\n  if (strcmp(arg, \"version\") == 0)\n  {\n    opt_version = 1;\n  }\n  else\n    if (strcmp(arg, \"path\") == 0)\n  {\n    s.path = 1;\n  }\n  else\n    if (strcmp(arg, \"verbose\") == 0)\n  {\n    s.verbosity += 1;\n  }\n  else\n    if (strcmp(arg, \"help\") == 0)\n  {\n    opt_help = 1;\n  }\n  else\n    if (strcmp(arg, \"ldconf\") == 0)\n  {\n    if ((i + 1) == argc)\n    {\n      fputs(\"Expected value after `--ldconf`\\n\", stderr);\n      return 1;\n    }\n    i += 1;\n    s.ld_conf_file = argv[i + argv_idx];\n  }\n  else\n    if (strcmp(arg, \"max-depth\") == 0)\n  {\n    helper_helper_helper_main_2_2_1(&s, &i, argc, argv, argv_idx);\n  }\n  else\n  {\n    fputs(\"Unrecognized flag `--\", stderr);\n    fputs(arg, stderr);\n    fputs(\"`\\n\", stderr);\n    return 1;\n  }\n  continue;\n  *s_ref = s;\n  *opt_help_ref = opt_help;\n  *opt_version_ref = opt_version;\n  *opt_raw_ref = opt_raw;\n  *i_ref = i;\n  *arg_idx_ref = arg_idx;\n}\n\n",
            "calle": [
                "fputs",
                "helper_helper_helper_main_2_2_1",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct libtree_state_t",
                        "type": "struct libtree_state_t * const",
                        "definition": [
                            "struct libtree_state_t * const s_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_help_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const opt_help_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_version_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const opt_version_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_raw_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const opt_raw_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const arg_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char ** const",
                        "definition": [
                            "char ** const argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int argv_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg",
                        "type": "char * const",
                        "definition": [
                            "char * const arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "struct libtree_state_t",
                        "definition": [
                            "struct libtree_state_t s = *s_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_help",
                        "type": "int",
                        "definition": [
                            "int opt_help = *opt_help_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_version",
                        "type": "int",
                        "definition": [
                            "int opt_version = *opt_version_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_raw",
                        "type": "int",
                        "definition": [
                            "int opt_raw = *opt_raw_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int arg_idx = *arg_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_main_2_2_1",
            "header": "",
            "params": [
                "struct libtree_state_t * const s_ref",
                "int * const i_ref",
                "int argc",
                "char ** const argv",
                "unsigned int argv_idx"
            ],
            "definition": "int helper_helper_helper_main_2_2_1(struct libtree_state_t * const s_ref, int * const i_ref, int argc, char ** const argv, unsigned int argv_idx)\n{\n  struct libtree_state_t s = *s_ref;\n  int i = *i_ref;\n  if ((i + 1) == argc)\n  {\n    fputs(\"Expected value after `--max-depth`\\n\", stderr);\n    return 1;\n  }\n  char *ptr;\n  i += 1;\n  s.max_depth = strtoul(argv[i + argv_idx], &ptr, 10);\n  if (s.max_depth > 32)\n    s.max_depth = 32;\n  *s_ref = s;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "fputs",
                "strtoul"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct libtree_state_t",
                        "type": "struct libtree_state_t * const",
                        "definition": [
                            "struct libtree_state_t * const s_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char ** const",
                        "definition": [
                            "char ** const argv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int argv_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "struct libtree_state_t",
                        "definition": [
                            "struct libtree_state_t s = *s_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "char *",
                        "definition": [
                            "char *ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        }
    ],
    "typedefs": []
}