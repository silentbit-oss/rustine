{
    "special_type": [
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef void (*binn_mem_free)(void *)",
            "name": "binn_mem_free",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct binn_struct\n{\n  int header;\n  BOOL allocated;\n  BOOL writable;\n  BOOL dirty;\n  void *pbuf;\n  BOOL pre_allocated;\n  int alloc_size;\n  int used_size;\n  int type;\n  void *ptr;\n  int size;\n  int count;\n  binn_mem_free freefn;\n  union \n  {\n    signed char vint8;\n    signed short vint16;\n    signed int vint32;\n    int64 vint64;\n    unsigned char vuint8;\n    unsigned short vuint16;\n    unsigned int vuint32;\n    uint64 vuint64;\n    signed char vchar;\n    unsigned char vuchar;\n    signed short vshort;\n    unsigned short vushort;\n    signed int vint;\n    unsigned int vuint;\n    float vfloat;\n    double vdouble;\n    BOOL vbool;\n  };\n  BOOL disable_int_compression;\n}",
            "name": "binn_struct",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Union'>",
                        "definition": "union \n{\n  signed char vint8;\n  signed short vint16;\n  signed int vint32;\n  int64 vint64;\n  unsigned char vuint8;\n  unsigned short vuint16;\n  unsigned int vuint32;\n  uint64 vuint64;\n  signed char vchar;\n  unsigned char vuchar;\n  signed short vshort;\n  unsigned short vushort;\n  signed int vint;\n  unsigned int vuint;\n  float vfloat;\n  double vdouble;\n  BOOL vbool;\n}",
                        "name": null,
                        "names": [],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "vint8",
                                    "type": "signed char",
                                    "definition": [
                                        "signed char vint8"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "vint16",
                                    "type": "signed short",
                                    "definition": [
                                        "signed short vint16"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "vint32",
                                    "type": "signed int",
                                    "definition": [
                                        "signed int vint32"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "vint64",
                                    "type": "int64",
                                    "definition": [
                                        "int64 vint64"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "vuint8",
                                    "type": "unsigned char",
                                    "definition": [
                                        "unsigned char vuint8"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "vuint16",
                                    "type": "unsigned short",
                                    "definition": [
                                        "unsigned short vuint16"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "vuint32",
                                    "type": "unsigned int",
                                    "definition": [
                                        "unsigned int vuint32"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "vuint64",
                                    "type": "uint64",
                                    "definition": [
                                        "uint64 vuint64"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "vchar",
                                    "type": "signed char",
                                    "definition": [
                                        "signed char vchar"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "vuchar",
                                    "type": "unsigned char",
                                    "definition": [
                                        "unsigned char vuchar"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "vshort",
                                    "type": "signed short",
                                    "definition": [
                                        "signed short vshort"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "vushort",
                                    "type": "unsigned short",
                                    "definition": [
                                        "unsigned short vushort"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "vint",
                                    "type": "signed int",
                                    "definition": [
                                        "signed int vint"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "vuint",
                                    "type": "unsigned int",
                                    "definition": [
                                        "unsigned int vuint"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "vfloat",
                                    "type": "float",
                                    "definition": [
                                        "float vfloat"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "vdouble",
                                    "type": "double",
                                    "definition": [
                                        "double vdouble"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "vbool",
                                    "type": "BOOL",
                                    "definition": [
                                        "BOOL vbool"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [
                    {
                        "path": null,
                        "name": "header",
                        "type": "int",
                        "definition": [
                            "int header"
                        ]
                    },
                    {
                        "path": null,
                        "name": "allocated",
                        "type": "BOOL",
                        "definition": [
                            "BOOL allocated"
                        ]
                    },
                    {
                        "path": null,
                        "name": "writable",
                        "type": "BOOL",
                        "definition": [
                            "BOOL writable"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dirty",
                        "type": "BOOL",
                        "definition": [
                            "BOOL dirty"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pbuf",
                        "type": "void *",
                        "definition": [
                            "void *pbuf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pre_allocated",
                        "type": "BOOL",
                        "definition": [
                            "BOOL pre_allocated"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alloc_size",
                        "type": "int",
                        "definition": [
                            "int alloc_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "used_size",
                        "type": "int",
                        "definition": [
                            "int used_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "freefn",
                        "type": "binn_mem_free",
                        "definition": [
                            "binn_mem_free freefn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "disable_int_compression",
                        "type": "BOOL",
                        "definition": [
                            "BOOL disable_int_compression"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct binn_struct binn",
            "name": "binn",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "",
                        "name": "binn",
                        "names": [
                            "typedef struct binn_struct binn"
                        ]
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct binn_iter_struct\n{\n  unsigned char *pnext;\n  unsigned char *plimit;\n  int type;\n  int count;\n  int current;\n} binn_iter",
            "name": "binn_iter",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pnext",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *pnext"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plimit",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *plimit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "current",
                        "type": "int",
                        "definition": [
                            "int current"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        }
    ],
    "global_variable": [
        {
            "path": null,
            "name": "malloc_fn",
            "type": "void *(*)(size_t len)",
            "definition": [
                "void *(*malloc_fn)(size_t len) = 0"
            ]
        },
        {
            "path": null,
            "name": "realloc_fn",
            "type": "void *(*)(void *ptr, size_t len)",
            "definition": [
                "void *(*realloc_fn)(void *ptr, size_t len) = 0"
            ]
        },
        {
            "path": null,
            "name": "free_fn",
            "type": "void (*)(void *ptr)",
            "definition": [
                "void (*free_fn)(void *ptr) = 0"
            ]
        },
        {
            "path": null,
            "name": "MY_DATE",
            "type": "int",
            "definition": [
                "int MY_DATE"
            ]
        },
        {
            "path": null,
            "name": "MY_CURRENCY",
            "type": "int",
            "definition": [
                "int MY_CURRENCY"
            ]
        },
        {
            "path": null,
            "name": "tmp",
            "type": "char [128]",
            "definition": [
                "char tmp[128]"
            ]
        },
        {
            "path": null,
            "name": "vint32",
            "type": "int",
            "definition": [
                "int vint32"
            ]
        },
        {
            "path": null,
            "name": "vuint32",
            "type": "unsigned int",
            "definition": [
                "unsigned int vuint32"
            ]
        },
        {
            "path": null,
            "name": "vint64",
            "type": "int64",
            "definition": [
                "int64 vint64"
            ]
        },
        {
            "path": null,
            "name": "vuint64",
            "type": "uint64",
            "definition": [
                "uint64 vuint64"
            ]
        },
        {
            "path": null,
            "name": "vint16",
            "type": "short",
            "definition": [
                "short vint16"
            ]
        },
        {
            "path": null,
            "name": "vuint16",
            "type": "unsigned short",
            "definition": [
                "unsigned short vuint16"
            ]
        },
        {
            "path": null,
            "name": "vint8",
            "type": "signed char",
            "definition": [
                "signed char vint8"
            ]
        },
        {
            "path": null,
            "name": "vuint8",
            "type": "unsigned char",
            "definition": [
                "unsigned char vuint8"
            ]
        },
        {
            "path": null,
            "name": "vfloat32",
            "type": "float",
            "definition": [
                "float vfloat32"
            ]
        },
        {
            "path": null,
            "name": "vfloat64",
            "type": "double",
            "definition": [
                "double vfloat64"
            ]
        },
        {
            "path": null,
            "name": "vbool",
            "type": "BOOL",
            "definition": [
                "BOOL vbool"
            ]
        },
        {
            "path": null,
            "name": "local_value",
            "type": "binn",
            "definition": [
                "binn local_value"
            ]
        }
    ],
    "function": [
        {
            "path": null,
            "name": "binn_int8",
            "header": "",
            "params": [
                "signed char value"
            ],
            "definition": "inline static binn *binn_int8(signed char value)\n{\n  return binn_value(0x21, &value, 0, 0);\n}\n\n",
            "calle": [
                "binn_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "value",
                        "type": "signed char",
                        "definition": [
                            "signed char value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_int16",
            "header": "",
            "params": [
                "short value"
            ],
            "definition": "inline static binn *binn_int16(short value)\n{\n  return binn_value(0x41, &value, 0, 0);\n}\n\n",
            "calle": [
                "binn_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "value",
                        "type": "short",
                        "definition": [
                            "short value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_int32",
            "header": "",
            "params": [
                "int value"
            ],
            "definition": "inline static binn *binn_int32(int value)\n{\n  return binn_value(0x61, &value, 0, 0);\n}\n\n",
            "calle": [
                "binn_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "value",
                        "type": "int",
                        "definition": [
                            "int value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_int64",
            "header": "",
            "params": [
                "int64 value"
            ],
            "definition": "inline static binn *binn_int64(int64 value)\n{\n  return binn_value(0x81, &value, 0, 0);\n}\n\n",
            "calle": [
                "binn_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "value",
                        "type": "int64",
                        "definition": [
                            "int64 value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_uint8",
            "header": "",
            "params": [
                "unsigned char value"
            ],
            "definition": "inline static binn *binn_uint8(unsigned char value)\n{\n  return binn_value(0x20, &value, 0, 0);\n}\n\n",
            "calle": [
                "binn_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "value",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_uint16",
            "header": "",
            "params": [
                "unsigned short value"
            ],
            "definition": "inline static binn *binn_uint16(unsigned short value)\n{\n  return binn_value(0x40, &value, 0, 0);\n}\n\n",
            "calle": [
                "binn_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "value",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_uint32",
            "header": "",
            "params": [
                "unsigned int value"
            ],
            "definition": "inline static binn *binn_uint32(unsigned int value)\n{\n  return binn_value(0x60, &value, 0, 0);\n}\n\n",
            "calle": [
                "binn_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "value",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_uint64",
            "header": "",
            "params": [
                "uint64 value"
            ],
            "definition": "inline static binn *binn_uint64(uint64 value)\n{\n  return binn_value(0x80, &value, 0, 0);\n}\n\n",
            "calle": [
                "binn_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "value",
                        "type": "uint64",
                        "definition": [
                            "uint64 value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_float",
            "header": "",
            "params": [
                "float value"
            ],
            "definition": "inline static binn *binn_float(float value)\n{\n  return binn_value(0x62, &value, 0, 0);\n}\n\n",
            "calle": [
                "binn_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "value",
                        "type": "float",
                        "definition": [
                            "float value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_double",
            "header": "",
            "params": [
                "double value"
            ],
            "definition": "inline static binn *binn_double(double value)\n{\n  return binn_value(0x82, &value, 0, 0);\n}\n\n",
            "calle": [
                "binn_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "value",
                        "type": "double",
                        "definition": [
                            "double value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_bool",
            "header": "",
            "params": [
                "BOOL value"
            ],
            "definition": "inline static binn *binn_bool(BOOL value)\n{\n  return binn_value(0x80061, &value, 0, 0);\n}\n\n",
            "calle": [
                "binn_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "value",
                        "type": "BOOL",
                        "definition": [
                            "BOOL value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_null",
            "header": "",
            "params": [],
            "definition": "inline static binn *binn_null()\n{\n  return binn_value(0x00, 0, 0, 0);\n}\n\n",
            "calle": [
                "binn_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_string",
            "header": "",
            "params": [
                "char *str",
                "binn_mem_free freefn"
            ],
            "definition": "inline static binn *binn_string(char *str, binn_mem_free freefn)\n{\n  return binn_value(0xA0, str, 0, freefn);\n}\n\n",
            "calle": [
                "binn_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str",
                        "type": "char *",
                        "definition": [
                            "char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "freefn",
                        "type": "binn_mem_free",
                        "definition": [
                            "binn_mem_free freefn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_blob",
            "header": "",
            "params": [
                "void *ptr",
                "int size",
                "binn_mem_free freefn"
            ],
            "definition": "inline static binn *binn_blob(void *ptr, int size, binn_mem_free freefn)\n{\n  return binn_value(0xC0, ptr, size, freefn);\n}\n\n",
            "calle": [
                "binn_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "freefn",
                        "type": "binn_mem_free",
                        "definition": [
                            "binn_mem_free freefn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_add_int8",
            "header": "",
            "params": [
                "binn *list",
                "signed char value"
            ],
            "definition": "inline static BOOL binn_list_add_int8(binn *list, signed char value)\n{\n  return binn_list_add(list, 0x21, &value, 0);\n}\n\n",
            "calle": [
                "binn_list_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "binn *",
                        "definition": [
                            "binn *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "signed char",
                        "definition": [
                            "signed char value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_add_int16",
            "header": "",
            "params": [
                "binn *list",
                "short value"
            ],
            "definition": "inline static BOOL binn_list_add_int16(binn *list, short value)\n{\n  return binn_list_add(list, 0x41, &value, 0);\n}\n\n",
            "calle": [
                "binn_list_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "binn *",
                        "definition": [
                            "binn *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "short",
                        "definition": [
                            "short value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_add_int32",
            "header": "",
            "params": [
                "binn *list",
                "int value"
            ],
            "definition": "inline static BOOL binn_list_add_int32(binn *list, int value)\n{\n  return binn_list_add(list, 0x61, &value, 0);\n}\n\n",
            "calle": [
                "binn_list_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "binn *",
                        "definition": [
                            "binn *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "int",
                        "definition": [
                            "int value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_add_int64",
            "header": "",
            "params": [
                "binn *list",
                "int64 value"
            ],
            "definition": "inline static BOOL binn_list_add_int64(binn *list, int64 value)\n{\n  return binn_list_add(list, 0x81, &value, 0);\n}\n\n",
            "calle": [
                "binn_list_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "binn *",
                        "definition": [
                            "binn *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "int64",
                        "definition": [
                            "int64 value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_add_uint8",
            "header": "",
            "params": [
                "binn *list",
                "unsigned char value"
            ],
            "definition": "inline static BOOL binn_list_add_uint8(binn *list, unsigned char value)\n{\n  return binn_list_add(list, 0x20, &value, 0);\n}\n\n",
            "calle": [
                "binn_list_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "binn *",
                        "definition": [
                            "binn *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_add_uint16",
            "header": "",
            "params": [
                "binn *list",
                "unsigned short value"
            ],
            "definition": "inline static BOOL binn_list_add_uint16(binn *list, unsigned short value)\n{\n  return binn_list_add(list, 0x40, &value, 0);\n}\n\n",
            "calle": [
                "binn_list_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "binn *",
                        "definition": [
                            "binn *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_add_uint32",
            "header": "",
            "params": [
                "binn *list",
                "unsigned int value"
            ],
            "definition": "inline static BOOL binn_list_add_uint32(binn *list, unsigned int value)\n{\n  return binn_list_add(list, 0x60, &value, 0);\n}\n\n",
            "calle": [
                "binn_list_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "binn *",
                        "definition": [
                            "binn *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_add_uint64",
            "header": "",
            "params": [
                "binn *list",
                "uint64 value"
            ],
            "definition": "inline static BOOL binn_list_add_uint64(binn *list, uint64 value)\n{\n  return binn_list_add(list, 0x80, &value, 0);\n}\n\n",
            "calle": [
                "binn_list_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "binn *",
                        "definition": [
                            "binn *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "uint64",
                        "definition": [
                            "uint64 value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_add_float",
            "header": "",
            "params": [
                "binn *list",
                "float value"
            ],
            "definition": "inline static BOOL binn_list_add_float(binn *list, float value)\n{\n  return binn_list_add(list, 0x62, &value, 0);\n}\n\n",
            "calle": [
                "binn_list_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "binn *",
                        "definition": [
                            "binn *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "float",
                        "definition": [
                            "float value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_add_double",
            "header": "",
            "params": [
                "binn *list",
                "double value"
            ],
            "definition": "inline static BOOL binn_list_add_double(binn *list, double value)\n{\n  return binn_list_add(list, 0x82, &value, 0);\n}\n\n",
            "calle": [
                "binn_list_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "binn *",
                        "definition": [
                            "binn *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "double",
                        "definition": [
                            "double value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_add_bool",
            "header": "",
            "params": [
                "binn *list",
                "BOOL value"
            ],
            "definition": "inline static BOOL binn_list_add_bool(binn *list, BOOL value)\n{\n  return binn_list_add(list, 0x80061, &value, 0);\n}\n\n",
            "calle": [
                "binn_list_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "binn *",
                        "definition": [
                            "binn *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "BOOL",
                        "definition": [
                            "BOOL value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_add_null",
            "header": "",
            "params": [
                "binn *list"
            ],
            "definition": "inline static BOOL binn_list_add_null(binn *list)\n{\n  return binn_list_add(list, 0x00, 0, 0);\n}\n\n",
            "calle": [
                "binn_list_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "binn *",
                        "definition": [
                            "binn *list"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_add_str",
            "header": "",
            "params": [
                "binn *list",
                "char *str"
            ],
            "definition": "inline static BOOL binn_list_add_str(binn *list, char *str)\n{\n  return binn_list_add(list, 0xA0, str, 0);\n}\n\n",
            "calle": [
                "binn_list_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "binn *",
                        "definition": [
                            "binn *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "char *",
                        "definition": [
                            "char *str"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_add_blob",
            "header": "",
            "params": [
                "binn *list",
                "void *ptr",
                "int size"
            ],
            "definition": "inline static BOOL binn_list_add_blob(binn *list, void *ptr, int size)\n{\n  return binn_list_add(list, 0xC0, ptr, size);\n}\n\n",
            "calle": [
                "binn_list_add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "binn *",
                        "definition": [
                            "binn *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_add_list",
            "header": "",
            "params": [
                "binn *list",
                "void *list2"
            ],
            "definition": "inline static BOOL binn_list_add_list(binn *list, void *list2)\n{\n  return binn_list_add(list, 0xE0, binn_ptr(list2), binn_size(list2));\n}\n\n",
            "calle": [
                "binn_list_add",
                "binn_ptr",
                "binn_size"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "binn *",
                        "definition": [
                            "binn *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list2",
                        "type": "void *",
                        "definition": [
                            "void *list2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_add_map",
            "header": "",
            "params": [
                "binn *list",
                "void *map"
            ],
            "definition": "inline static BOOL binn_list_add_map(binn *list, void *map)\n{\n  return binn_list_add(list, 0xE1, binn_ptr(map), binn_size(map));\n}\n\n",
            "calle": [
                "binn_list_add",
                "binn_ptr",
                "binn_size"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "binn *",
                        "definition": [
                            "binn *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_add_object",
            "header": "",
            "params": [
                "binn *list",
                "void *obj"
            ],
            "definition": "inline static BOOL binn_list_add_object(binn *list, void *obj)\n{\n  return binn_list_add(list, 0xE2, binn_ptr(obj), binn_size(obj));\n}\n\n",
            "calle": [
                "binn_list_add",
                "binn_ptr",
                "binn_size"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "binn *",
                        "definition": [
                            "binn *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_add_value",
            "header": "",
            "params": [
                "binn *list",
                "binn *value"
            ],
            "definition": "inline static BOOL binn_list_add_value(binn *list, binn *value)\n{\n  return binn_list_add(list, value->type, binn_ptr(value), binn_size(value));\n}\n\n",
            "calle": [
                "binn_list_add",
                "binn_ptr",
                "binn_size"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "binn *",
                        "definition": [
                            "binn *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn *",
                        "definition": [
                            "binn *value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_set_int8",
            "header": "",
            "params": [
                "binn *map",
                "int id",
                "signed char value"
            ],
            "definition": "inline static BOOL binn_map_set_int8(binn *map, int id, signed char value)\n{\n  return binn_map_set(map, id, 0x21, &value, 0);\n}\n\n",
            "calle": [
                "binn_map_set"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "binn *",
                        "definition": [
                            "binn *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "signed char",
                        "definition": [
                            "signed char value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_set_int16",
            "header": "",
            "params": [
                "binn *map",
                "int id",
                "short value"
            ],
            "definition": "inline static BOOL binn_map_set_int16(binn *map, int id, short value)\n{\n  return binn_map_set(map, id, 0x41, &value, 0);\n}\n\n",
            "calle": [
                "binn_map_set"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "binn *",
                        "definition": [
                            "binn *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "short",
                        "definition": [
                            "short value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_set_int32",
            "header": "",
            "params": [
                "binn *map",
                "int id",
                "int value"
            ],
            "definition": "inline static BOOL binn_map_set_int32(binn *map, int id, int value)\n{\n  return binn_map_set(map, id, 0x61, &value, 0);\n}\n\n",
            "calle": [
                "binn_map_set"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "binn *",
                        "definition": [
                            "binn *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "int",
                        "definition": [
                            "int value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_set_int64",
            "header": "",
            "params": [
                "binn *map",
                "int id",
                "int64 value"
            ],
            "definition": "inline static BOOL binn_map_set_int64(binn *map, int id, int64 value)\n{\n  return binn_map_set(map, id, 0x81, &value, 0);\n}\n\n",
            "calle": [
                "binn_map_set"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "binn *",
                        "definition": [
                            "binn *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "int64",
                        "definition": [
                            "int64 value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_set_uint8",
            "header": "",
            "params": [
                "binn *map",
                "int id",
                "unsigned char value"
            ],
            "definition": "inline static BOOL binn_map_set_uint8(binn *map, int id, unsigned char value)\n{\n  return binn_map_set(map, id, 0x20, &value, 0);\n}\n\n",
            "calle": [
                "binn_map_set"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "binn *",
                        "definition": [
                            "binn *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_set_uint16",
            "header": "",
            "params": [
                "binn *map",
                "int id",
                "unsigned short value"
            ],
            "definition": "inline static BOOL binn_map_set_uint16(binn *map, int id, unsigned short value)\n{\n  return binn_map_set(map, id, 0x40, &value, 0);\n}\n\n",
            "calle": [
                "binn_map_set"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "binn *",
                        "definition": [
                            "binn *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_set_uint32",
            "header": "",
            "params": [
                "binn *map",
                "int id",
                "unsigned int value"
            ],
            "definition": "inline static BOOL binn_map_set_uint32(binn *map, int id, unsigned int value)\n{\n  return binn_map_set(map, id, 0x60, &value, 0);\n}\n\n",
            "calle": [
                "binn_map_set"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "binn *",
                        "definition": [
                            "binn *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_set_uint64",
            "header": "",
            "params": [
                "binn *map",
                "int id",
                "uint64 value"
            ],
            "definition": "inline static BOOL binn_map_set_uint64(binn *map, int id, uint64 value)\n{\n  return binn_map_set(map, id, 0x80, &value, 0);\n}\n\n",
            "calle": [
                "binn_map_set"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "binn *",
                        "definition": [
                            "binn *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "uint64",
                        "definition": [
                            "uint64 value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_set_float",
            "header": "",
            "params": [
                "binn *map",
                "int id",
                "float value"
            ],
            "definition": "inline static BOOL binn_map_set_float(binn *map, int id, float value)\n{\n  return binn_map_set(map, id, 0x62, &value, 0);\n}\n\n",
            "calle": [
                "binn_map_set"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "binn *",
                        "definition": [
                            "binn *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "float",
                        "definition": [
                            "float value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_set_double",
            "header": "",
            "params": [
                "binn *map",
                "int id",
                "double value"
            ],
            "definition": "inline static BOOL binn_map_set_double(binn *map, int id, double value)\n{\n  return binn_map_set(map, id, 0x82, &value, 0);\n}\n\n",
            "calle": [
                "binn_map_set"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "binn *",
                        "definition": [
                            "binn *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "double",
                        "definition": [
                            "double value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_set_bool",
            "header": "",
            "params": [
                "binn *map",
                "int id",
                "BOOL value"
            ],
            "definition": "inline static BOOL binn_map_set_bool(binn *map, int id, BOOL value)\n{\n  return binn_map_set(map, id, 0x80061, &value, 0);\n}\n\n",
            "calle": [
                "binn_map_set"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "binn *",
                        "definition": [
                            "binn *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "BOOL",
                        "definition": [
                            "BOOL value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_set_null",
            "header": "",
            "params": [
                "binn *map",
                "int id"
            ],
            "definition": "inline static BOOL binn_map_set_null(binn *map, int id)\n{\n  return binn_map_set(map, id, 0x00, 0, 0);\n}\n\n",
            "calle": [
                "binn_map_set"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "binn *",
                        "definition": [
                            "binn *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_set_str",
            "header": "",
            "params": [
                "binn *map",
                "int id",
                "char *str"
            ],
            "definition": "inline static BOOL binn_map_set_str(binn *map, int id, char *str)\n{\n  return binn_map_set(map, id, 0xA0, str, 0);\n}\n\n",
            "calle": [
                "binn_map_set"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "binn *",
                        "definition": [
                            "binn *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "char *",
                        "definition": [
                            "char *str"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_set_blob",
            "header": "",
            "params": [
                "binn *map",
                "int id",
                "void *ptr",
                "int size"
            ],
            "definition": "inline static BOOL binn_map_set_blob(binn *map, int id, void *ptr, int size)\n{\n  return binn_map_set(map, id, 0xC0, ptr, size);\n}\n\n",
            "calle": [
                "binn_map_set"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "binn *",
                        "definition": [
                            "binn *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_set_list",
            "header": "",
            "params": [
                "binn *map",
                "int id",
                "void *list"
            ],
            "definition": "inline static BOOL binn_map_set_list(binn *map, int id, void *list)\n{\n  return binn_map_set(map, id, 0xE0, binn_ptr(list), binn_size(list));\n}\n\n",
            "calle": [
                "binn_map_set",
                "binn_ptr",
                "binn_size"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "binn *",
                        "definition": [
                            "binn *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_set_map",
            "header": "",
            "params": [
                "binn *map",
                "int id",
                "void *map2"
            ],
            "definition": "inline static BOOL binn_map_set_map(binn *map, int id, void *map2)\n{\n  return binn_map_set(map, id, 0xE1, binn_ptr(map2), binn_size(map2));\n}\n\n",
            "calle": [
                "binn_map_set",
                "binn_ptr",
                "binn_size"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "binn *",
                        "definition": [
                            "binn *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "map2",
                        "type": "void *",
                        "definition": [
                            "void *map2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_set_object",
            "header": "",
            "params": [
                "binn *map",
                "int id",
                "void *obj"
            ],
            "definition": "inline static BOOL binn_map_set_object(binn *map, int id, void *obj)\n{\n  return binn_map_set(map, id, 0xE2, binn_ptr(obj), binn_size(obj));\n}\n\n",
            "calle": [
                "binn_map_set",
                "binn_ptr",
                "binn_size"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "binn *",
                        "definition": [
                            "binn *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_set_value",
            "header": "",
            "params": [
                "binn *map",
                "int id",
                "binn *value"
            ],
            "definition": "inline static BOOL binn_map_set_value(binn *map, int id, binn *value)\n{\n  return binn_map_set(map, id, value->type, binn_ptr(value), binn_size(value));\n}\n\n",
            "calle": [
                "binn_map_set",
                "binn_ptr",
                "binn_size"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "binn *",
                        "definition": [
                            "binn *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn *",
                        "definition": [
                            "binn *value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_set_int8",
            "header": "",
            "params": [
                "binn *obj",
                "const char *key",
                "signed char value"
            ],
            "definition": "inline static BOOL binn_object_set_int8(binn *obj, const char *key, signed char value)\n{\n  return binn_object_set(obj, key, 0x21, &value, 0);\n}\n\n",
            "calle": [
                "binn_object_set"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "binn *",
                        "definition": [
                            "binn *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "signed char",
                        "definition": [
                            "signed char value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_set_int16",
            "header": "",
            "params": [
                "binn *obj",
                "const char *key",
                "short value"
            ],
            "definition": "inline static BOOL binn_object_set_int16(binn *obj, const char *key, short value)\n{\n  return binn_object_set(obj, key, 0x41, &value, 0);\n}\n\n",
            "calle": [
                "binn_object_set"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "binn *",
                        "definition": [
                            "binn *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "short",
                        "definition": [
                            "short value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_set_int32",
            "header": "",
            "params": [
                "binn *obj",
                "const char *key",
                "int value"
            ],
            "definition": "inline static BOOL binn_object_set_int32(binn *obj, const char *key, int value)\n{\n  return binn_object_set(obj, key, 0x61, &value, 0);\n}\n\n",
            "calle": [
                "binn_object_set"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "binn *",
                        "definition": [
                            "binn *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "int",
                        "definition": [
                            "int value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_set_int64",
            "header": "",
            "params": [
                "binn *obj",
                "const char *key",
                "int64 value"
            ],
            "definition": "inline static BOOL binn_object_set_int64(binn *obj, const char *key, int64 value)\n{\n  return binn_object_set(obj, key, 0x81, &value, 0);\n}\n\n",
            "calle": [
                "binn_object_set"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "binn *",
                        "definition": [
                            "binn *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "int64",
                        "definition": [
                            "int64 value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_set_uint8",
            "header": "",
            "params": [
                "binn *obj",
                "const char *key",
                "unsigned char value"
            ],
            "definition": "inline static BOOL binn_object_set_uint8(binn *obj, const char *key, unsigned char value)\n{\n  return binn_object_set(obj, key, 0x20, &value, 0);\n}\n\n",
            "calle": [
                "binn_object_set"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "binn *",
                        "definition": [
                            "binn *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_set_uint16",
            "header": "",
            "params": [
                "binn *obj",
                "const char *key",
                "unsigned short value"
            ],
            "definition": "inline static BOOL binn_object_set_uint16(binn *obj, const char *key, unsigned short value)\n{\n  return binn_object_set(obj, key, 0x40, &value, 0);\n}\n\n",
            "calle": [
                "binn_object_set"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "binn *",
                        "definition": [
                            "binn *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_set_uint32",
            "header": "",
            "params": [
                "binn *obj",
                "const char *key",
                "unsigned int value"
            ],
            "definition": "inline static BOOL binn_object_set_uint32(binn *obj, const char *key, unsigned int value)\n{\n  return binn_object_set(obj, key, 0x60, &value, 0);\n}\n\n",
            "calle": [
                "binn_object_set"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "binn *",
                        "definition": [
                            "binn *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_set_uint64",
            "header": "",
            "params": [
                "binn *obj",
                "const char *key",
                "uint64 value"
            ],
            "definition": "inline static BOOL binn_object_set_uint64(binn *obj, const char *key, uint64 value)\n{\n  return binn_object_set(obj, key, 0x80, &value, 0);\n}\n\n",
            "calle": [
                "binn_object_set"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "binn *",
                        "definition": [
                            "binn *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "uint64",
                        "definition": [
                            "uint64 value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_set_float",
            "header": "",
            "params": [
                "binn *obj",
                "const char *key",
                "float value"
            ],
            "definition": "inline static BOOL binn_object_set_float(binn *obj, const char *key, float value)\n{\n  return binn_object_set(obj, key, 0x62, &value, 0);\n}\n\n",
            "calle": [
                "binn_object_set"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "binn *",
                        "definition": [
                            "binn *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "float",
                        "definition": [
                            "float value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_set_double",
            "header": "",
            "params": [
                "binn *obj",
                "const char *key",
                "double value"
            ],
            "definition": "inline static BOOL binn_object_set_double(binn *obj, const char *key, double value)\n{\n  return binn_object_set(obj, key, 0x82, &value, 0);\n}\n\n",
            "calle": [
                "binn_object_set"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "binn *",
                        "definition": [
                            "binn *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "double",
                        "definition": [
                            "double value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_set_bool",
            "header": "",
            "params": [
                "binn *obj",
                "const char *key",
                "BOOL value"
            ],
            "definition": "inline static BOOL binn_object_set_bool(binn *obj, const char *key, BOOL value)\n{\n  return binn_object_set(obj, key, 0x80061, &value, 0);\n}\n\n",
            "calle": [
                "binn_object_set"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "binn *",
                        "definition": [
                            "binn *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "BOOL",
                        "definition": [
                            "BOOL value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_set_null",
            "header": "",
            "params": [
                "binn *obj",
                "const char *key"
            ],
            "definition": "inline static BOOL binn_object_set_null(binn *obj, const char *key)\n{\n  return binn_object_set(obj, key, 0x00, 0, 0);\n}\n\n",
            "calle": [
                "binn_object_set"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "binn *",
                        "definition": [
                            "binn *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_set_str",
            "header": "",
            "params": [
                "binn *obj",
                "const char *key",
                "char *str"
            ],
            "definition": "inline static BOOL binn_object_set_str(binn *obj, const char *key, char *str)\n{\n  return binn_object_set(obj, key, 0xA0, str, 0);\n}\n\n",
            "calle": [
                "binn_object_set"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "binn *",
                        "definition": [
                            "binn *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "char *",
                        "definition": [
                            "char *str"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_set_blob",
            "header": "",
            "params": [
                "binn *obj",
                "const char *key",
                "void *ptr",
                "int size"
            ],
            "definition": "inline static BOOL binn_object_set_blob(binn *obj, const char *key, void *ptr, int size)\n{\n  return binn_object_set(obj, key, 0xC0, ptr, size);\n}\n\n",
            "calle": [
                "binn_object_set"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "binn *",
                        "definition": [
                            "binn *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_set_list",
            "header": "",
            "params": [
                "binn *obj",
                "const char *key",
                "void *list"
            ],
            "definition": "inline static BOOL binn_object_set_list(binn *obj, const char *key, void *list)\n{\n  return binn_object_set(obj, key, 0xE0, binn_ptr(list), binn_size(list));\n}\n\n",
            "calle": [
                "binn_object_set",
                "binn_ptr",
                "binn_size"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "binn *",
                        "definition": [
                            "binn *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_set_map",
            "header": "",
            "params": [
                "binn *obj",
                "const char *key",
                "void *map"
            ],
            "definition": "inline static BOOL binn_object_set_map(binn *obj, const char *key, void *map)\n{\n  return binn_object_set(obj, key, 0xE1, binn_ptr(map), binn_size(map));\n}\n\n",
            "calle": [
                "binn_object_set",
                "binn_ptr",
                "binn_size"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "binn *",
                        "definition": [
                            "binn *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_set_object",
            "header": "",
            "params": [
                "binn *obj",
                "const char *key",
                "void *obj2"
            ],
            "definition": "inline static BOOL binn_object_set_object(binn *obj, const char *key, void *obj2)\n{\n  return binn_object_set(obj, key, 0xE2, binn_ptr(obj2), binn_size(obj2));\n}\n\n",
            "calle": [
                "binn_object_set",
                "binn_ptr",
                "binn_size"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "binn *",
                        "definition": [
                            "binn *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj2",
                        "type": "void *",
                        "definition": [
                            "void *obj2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_set_value",
            "header": "",
            "params": [
                "binn *obj",
                "const char *key",
                "binn *value"
            ],
            "definition": "inline static BOOL binn_object_set_value(binn *obj, const char *key, binn *value)\n{\n  return binn_object_set(obj, key, value->type, binn_ptr(value), binn_size(value));\n}\n\n",
            "calle": [
                "binn_object_set",
                "binn_ptr",
                "binn_size"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "binn *",
                        "definition": [
                            "binn *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn *",
                        "definition": [
                            "binn *value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_get_int8",
            "header": "",
            "params": [
                "void *list",
                "int pos",
                "signed char *pvalue"
            ],
            "definition": "inline static BOOL binn_list_get_int8(void *list, int pos, signed char *pvalue)\n{\n  return binn_list_get(list, pos, 0x21, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_list_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "signed char *",
                        "definition": [
                            "signed char *pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_get_int16",
            "header": "",
            "params": [
                "void *list",
                "int pos",
                "short *pvalue"
            ],
            "definition": "inline static BOOL binn_list_get_int16(void *list, int pos, short *pvalue)\n{\n  return binn_list_get(list, pos, 0x41, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_list_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "short *",
                        "definition": [
                            "short *pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_get_int32",
            "header": "",
            "params": [
                "void *list",
                "int pos",
                "int *pvalue"
            ],
            "definition": "inline static BOOL binn_list_get_int32(void *list, int pos, int *pvalue)\n{\n  return binn_list_get(list, pos, 0x61, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_list_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "int *",
                        "definition": [
                            "int *pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_get_int64",
            "header": "",
            "params": [
                "void *list",
                "int pos",
                "int64 *pvalue"
            ],
            "definition": "inline static BOOL binn_list_get_int64(void *list, int pos, int64 *pvalue)\n{\n  return binn_list_get(list, pos, 0x81, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_list_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "int64 *",
                        "definition": [
                            "int64 *pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_get_uint8",
            "header": "",
            "params": [
                "void *list",
                "int pos",
                "unsigned char *pvalue"
            ],
            "definition": "inline static BOOL binn_list_get_uint8(void *list, int pos, unsigned char *pvalue)\n{\n  return binn_list_get(list, pos, 0x20, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_list_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_get_uint16",
            "header": "",
            "params": [
                "void *list",
                "int pos",
                "unsigned short *pvalue"
            ],
            "definition": "inline static BOOL binn_list_get_uint16(void *list, int pos, unsigned short *pvalue)\n{\n  return binn_list_get(list, pos, 0x40, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_list_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "unsigned short *",
                        "definition": [
                            "unsigned short *pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_get_uint32",
            "header": "",
            "params": [
                "void *list",
                "int pos",
                "unsigned int *pvalue"
            ],
            "definition": "inline static BOOL binn_list_get_uint32(void *list, int pos, unsigned int *pvalue)\n{\n  return binn_list_get(list, pos, 0x60, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_list_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "unsigned int *",
                        "definition": [
                            "unsigned int *pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_get_uint64",
            "header": "",
            "params": [
                "void *list",
                "int pos",
                "uint64 *pvalue"
            ],
            "definition": "inline static BOOL binn_list_get_uint64(void *list, int pos, uint64 *pvalue)\n{\n  return binn_list_get(list, pos, 0x80, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_list_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "uint64 *",
                        "definition": [
                            "uint64 *pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_get_float",
            "header": "",
            "params": [
                "void *list",
                "int pos",
                "float *pvalue"
            ],
            "definition": "inline static BOOL binn_list_get_float(void *list, int pos, float *pvalue)\n{\n  return binn_list_get(list, pos, 0x62, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_list_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "float *",
                        "definition": [
                            "float *pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_get_double",
            "header": "",
            "params": [
                "void *list",
                "int pos",
                "double *pvalue"
            ],
            "definition": "inline static BOOL binn_list_get_double(void *list, int pos, double *pvalue)\n{\n  return binn_list_get(list, pos, 0x82, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_list_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "double *",
                        "definition": [
                            "double *pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_get_bool",
            "header": "",
            "params": [
                "void *list",
                "int pos",
                "BOOL *pvalue"
            ],
            "definition": "inline static BOOL binn_list_get_bool(void *list, int pos, BOOL *pvalue)\n{\n  return binn_list_get(list, pos, 0x80061, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_list_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "BOOL *",
                        "definition": [
                            "BOOL *pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_get_str",
            "header": "",
            "params": [
                "void *list",
                "int pos",
                "char **pvalue"
            ],
            "definition": "inline static BOOL binn_list_get_str(void *list, int pos, char **pvalue)\n{\n  return binn_list_get(list, pos, 0xA0, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_list_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "char **",
                        "definition": [
                            "char **pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_get_blob",
            "header": "",
            "params": [
                "void *list",
                "int pos",
                "void **pvalue",
                "int *psize"
            ],
            "definition": "inline static BOOL binn_list_get_blob(void *list, int pos, void **pvalue, int *psize)\n{\n  return binn_list_get(list, pos, 0xC0, pvalue, psize);\n}\n\n",
            "calle": [
                "binn_list_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "void **",
                        "definition": [
                            "void **pvalue"
                        ]
                    },
                    {
                        "path": null,
                        "name": "psize",
                        "type": "int *",
                        "definition": [
                            "int *psize"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_get_list",
            "header": "",
            "params": [
                "void *list",
                "int pos",
                "void **pvalue"
            ],
            "definition": "inline static BOOL binn_list_get_list(void *list, int pos, void **pvalue)\n{\n  return binn_list_get(list, pos, 0xE0, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_list_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "void **",
                        "definition": [
                            "void **pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_get_map",
            "header": "",
            "params": [
                "void *list",
                "int pos",
                "void **pvalue"
            ],
            "definition": "inline static BOOL binn_list_get_map(void *list, int pos, void **pvalue)\n{\n  return binn_list_get(list, pos, 0xE1, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_list_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "void **",
                        "definition": [
                            "void **pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_get_object",
            "header": "",
            "params": [
                "void *list",
                "int pos",
                "void **pvalue"
            ],
            "definition": "inline static BOOL binn_list_get_object(void *list, int pos, void **pvalue)\n{\n  return binn_list_get(list, pos, 0xE2, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_list_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "void **",
                        "definition": [
                            "void **pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_get_int8",
            "header": "",
            "params": [
                "void *map",
                "int id",
                "signed char *pvalue"
            ],
            "definition": "inline static BOOL binn_map_get_int8(void *map, int id, signed char *pvalue)\n{\n  return binn_map_get(map, id, 0x21, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_map_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "signed char *",
                        "definition": [
                            "signed char *pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_get_int16",
            "header": "",
            "params": [
                "void *map",
                "int id",
                "short *pvalue"
            ],
            "definition": "inline static BOOL binn_map_get_int16(void *map, int id, short *pvalue)\n{\n  return binn_map_get(map, id, 0x41, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_map_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "short *",
                        "definition": [
                            "short *pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_get_int32",
            "header": "",
            "params": [
                "void *map",
                "int id",
                "int *pvalue"
            ],
            "definition": "inline static BOOL binn_map_get_int32(void *map, int id, int *pvalue)\n{\n  return binn_map_get(map, id, 0x61, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_map_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "int *",
                        "definition": [
                            "int *pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_get_int64",
            "header": "",
            "params": [
                "void *map",
                "int id",
                "int64 *pvalue"
            ],
            "definition": "inline static BOOL binn_map_get_int64(void *map, int id, int64 *pvalue)\n{\n  return binn_map_get(map, id, 0x81, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_map_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "int64 *",
                        "definition": [
                            "int64 *pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_get_uint8",
            "header": "",
            "params": [
                "void *map",
                "int id",
                "unsigned char *pvalue"
            ],
            "definition": "inline static BOOL binn_map_get_uint8(void *map, int id, unsigned char *pvalue)\n{\n  return binn_map_get(map, id, 0x20, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_map_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_get_uint16",
            "header": "",
            "params": [
                "void *map",
                "int id",
                "unsigned short *pvalue"
            ],
            "definition": "inline static BOOL binn_map_get_uint16(void *map, int id, unsigned short *pvalue)\n{\n  return binn_map_get(map, id, 0x40, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_map_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "unsigned short *",
                        "definition": [
                            "unsigned short *pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_get_uint32",
            "header": "",
            "params": [
                "void *map",
                "int id",
                "unsigned int *pvalue"
            ],
            "definition": "inline static BOOL binn_map_get_uint32(void *map, int id, unsigned int *pvalue)\n{\n  return binn_map_get(map, id, 0x60, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_map_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "unsigned int *",
                        "definition": [
                            "unsigned int *pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_get_uint64",
            "header": "",
            "params": [
                "void *map",
                "int id",
                "uint64 *pvalue"
            ],
            "definition": "inline static BOOL binn_map_get_uint64(void *map, int id, uint64 *pvalue)\n{\n  return binn_map_get(map, id, 0x80, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_map_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "uint64 *",
                        "definition": [
                            "uint64 *pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_get_float",
            "header": "",
            "params": [
                "void *map",
                "int id",
                "float *pvalue"
            ],
            "definition": "inline static BOOL binn_map_get_float(void *map, int id, float *pvalue)\n{\n  return binn_map_get(map, id, 0x62, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_map_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "float *",
                        "definition": [
                            "float *pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_get_double",
            "header": "",
            "params": [
                "void *map",
                "int id",
                "double *pvalue"
            ],
            "definition": "inline static BOOL binn_map_get_double(void *map, int id, double *pvalue)\n{\n  return binn_map_get(map, id, 0x82, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_map_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "double *",
                        "definition": [
                            "double *pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_get_bool",
            "header": "",
            "params": [
                "void *map",
                "int id",
                "BOOL *pvalue"
            ],
            "definition": "inline static BOOL binn_map_get_bool(void *map, int id, BOOL *pvalue)\n{\n  return binn_map_get(map, id, 0x80061, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_map_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "BOOL *",
                        "definition": [
                            "BOOL *pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_get_str",
            "header": "",
            "params": [
                "void *map",
                "int id",
                "char **pvalue"
            ],
            "definition": "inline static BOOL binn_map_get_str(void *map, int id, char **pvalue)\n{\n  return binn_map_get(map, id, 0xA0, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_map_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "char **",
                        "definition": [
                            "char **pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_get_blob",
            "header": "",
            "params": [
                "void *map",
                "int id",
                "void **pvalue",
                "int *psize"
            ],
            "definition": "inline static BOOL binn_map_get_blob(void *map, int id, void **pvalue, int *psize)\n{\n  return binn_map_get(map, id, 0xC0, pvalue, psize);\n}\n\n",
            "calle": [
                "binn_map_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "void **",
                        "definition": [
                            "void **pvalue"
                        ]
                    },
                    {
                        "path": null,
                        "name": "psize",
                        "type": "int *",
                        "definition": [
                            "int *psize"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_get_list",
            "header": "",
            "params": [
                "void *map",
                "int id",
                "void **pvalue"
            ],
            "definition": "inline static BOOL binn_map_get_list(void *map, int id, void **pvalue)\n{\n  return binn_map_get(map, id, 0xE0, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_map_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "void **",
                        "definition": [
                            "void **pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_get_map",
            "header": "",
            "params": [
                "void *map",
                "int id",
                "void **pvalue"
            ],
            "definition": "inline static BOOL binn_map_get_map(void *map, int id, void **pvalue)\n{\n  return binn_map_get(map, id, 0xE1, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_map_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "void **",
                        "definition": [
                            "void **pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_get_object",
            "header": "",
            "params": [
                "void *map",
                "int id",
                "void **pvalue"
            ],
            "definition": "inline static BOOL binn_map_get_object(void *map, int id, void **pvalue)\n{\n  return binn_map_get(map, id, 0xE2, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_map_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "void **",
                        "definition": [
                            "void **pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_get_int8",
            "header": "",
            "params": [
                "void *obj",
                "const char *key",
                "signed char *pvalue"
            ],
            "definition": "inline static BOOL binn_object_get_int8(void *obj, const char *key, signed char *pvalue)\n{\n  return binn_object_get(obj, key, 0x21, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_object_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "signed char *",
                        "definition": [
                            "signed char *pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_get_int16",
            "header": "",
            "params": [
                "void *obj",
                "const char *key",
                "short *pvalue"
            ],
            "definition": "inline static BOOL binn_object_get_int16(void *obj, const char *key, short *pvalue)\n{\n  return binn_object_get(obj, key, 0x41, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_object_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "short *",
                        "definition": [
                            "short *pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_get_int32",
            "header": "",
            "params": [
                "void *obj",
                "const char *key",
                "int *pvalue"
            ],
            "definition": "inline static BOOL binn_object_get_int32(void *obj, const char *key, int *pvalue)\n{\n  return binn_object_get(obj, key, 0x61, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_object_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "int *",
                        "definition": [
                            "int *pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_get_int64",
            "header": "",
            "params": [
                "void *obj",
                "const char *key",
                "int64 *pvalue"
            ],
            "definition": "inline static BOOL binn_object_get_int64(void *obj, const char *key, int64 *pvalue)\n{\n  return binn_object_get(obj, key, 0x81, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_object_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "int64 *",
                        "definition": [
                            "int64 *pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_get_uint8",
            "header": "",
            "params": [
                "void *obj",
                "const char *key",
                "unsigned char *pvalue"
            ],
            "definition": "inline static BOOL binn_object_get_uint8(void *obj, const char *key, unsigned char *pvalue)\n{\n  return binn_object_get(obj, key, 0x20, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_object_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_get_uint16",
            "header": "",
            "params": [
                "void *obj",
                "const char *key",
                "unsigned short *pvalue"
            ],
            "definition": "inline static BOOL binn_object_get_uint16(void *obj, const char *key, unsigned short *pvalue)\n{\n  return binn_object_get(obj, key, 0x40, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_object_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "unsigned short *",
                        "definition": [
                            "unsigned short *pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_get_uint32",
            "header": "",
            "params": [
                "void *obj",
                "const char *key",
                "unsigned int *pvalue"
            ],
            "definition": "inline static BOOL binn_object_get_uint32(void *obj, const char *key, unsigned int *pvalue)\n{\n  return binn_object_get(obj, key, 0x60, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_object_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "unsigned int *",
                        "definition": [
                            "unsigned int *pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_get_uint64",
            "header": "",
            "params": [
                "void *obj",
                "const char *key",
                "uint64 *pvalue"
            ],
            "definition": "inline static BOOL binn_object_get_uint64(void *obj, const char *key, uint64 *pvalue)\n{\n  return binn_object_get(obj, key, 0x80, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_object_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "uint64 *",
                        "definition": [
                            "uint64 *pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_get_float",
            "header": "",
            "params": [
                "void *obj",
                "const char *key",
                "float *pvalue"
            ],
            "definition": "inline static BOOL binn_object_get_float(void *obj, const char *key, float *pvalue)\n{\n  return binn_object_get(obj, key, 0x62, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_object_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "float *",
                        "definition": [
                            "float *pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_get_double",
            "header": "",
            "params": [
                "void *obj",
                "const char *key",
                "double *pvalue"
            ],
            "definition": "inline static BOOL binn_object_get_double(void *obj, const char *key, double *pvalue)\n{\n  return binn_object_get(obj, key, 0x82, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_object_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "double *",
                        "definition": [
                            "double *pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_get_bool",
            "header": "",
            "params": [
                "void *obj",
                "const char *key",
                "BOOL *pvalue"
            ],
            "definition": "inline static BOOL binn_object_get_bool(void *obj, const char *key, BOOL *pvalue)\n{\n  return binn_object_get(obj, key, 0x80061, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_object_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "BOOL *",
                        "definition": [
                            "BOOL *pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_get_str",
            "header": "",
            "params": [
                "void *obj",
                "const char *key",
                "char **pvalue"
            ],
            "definition": "inline static BOOL binn_object_get_str(void *obj, const char *key, char **pvalue)\n{\n  return binn_object_get(obj, key, 0xA0, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_object_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "char **",
                        "definition": [
                            "char **pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_get_blob",
            "header": "",
            "params": [
                "void *obj",
                "const char *key",
                "void **pvalue",
                "int *psize"
            ],
            "definition": "inline static BOOL binn_object_get_blob(void *obj, const char *key, void **pvalue, int *psize)\n{\n  return binn_object_get(obj, key, 0xC0, pvalue, psize);\n}\n\n",
            "calle": [
                "binn_object_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "void **",
                        "definition": [
                            "void **pvalue"
                        ]
                    },
                    {
                        "path": null,
                        "name": "psize",
                        "type": "int *",
                        "definition": [
                            "int *psize"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_get_list",
            "header": "",
            "params": [
                "void *obj",
                "const char *key",
                "void **pvalue"
            ],
            "definition": "inline static BOOL binn_object_get_list(void *obj, const char *key, void **pvalue)\n{\n  return binn_object_get(obj, key, 0xE0, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_object_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "void **",
                        "definition": [
                            "void **pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_get_map",
            "header": "",
            "params": [
                "void *obj",
                "const char *key",
                "void **pvalue"
            ],
            "definition": "inline static BOOL binn_object_get_map(void *obj, const char *key, void **pvalue)\n{\n  return binn_object_get(obj, key, 0xE1, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_object_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "void **",
                        "definition": [
                            "void **pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_get_object",
            "header": "",
            "params": [
                "void *obj",
                "const char *key",
                "void **pvalue"
            ],
            "definition": "inline static BOOL binn_object_get_object(void *obj, const char *key, void **pvalue)\n{\n  return binn_object_get(obj, key, 0xE2, pvalue, 0);\n}\n\n",
            "calle": [
                "binn_object_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "void **",
                        "definition": [
                            "void **pvalue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_binn_version",
            "header": "",
            "params": [],
            "definition": "void test_binn_version()\n{\n  char *version = binn_version();\n  assert(version);\n  assert(strcmp(version, \"3.0.0\") == 0);\n}\n\n",
            "calle": [
                "assert",
                "binn_version",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "version",
                        "type": "char *",
                        "definition": [
                            "char *version = binn_version()"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_endianess",
            "header": "",
            "params": [],
            "definition": "void test_endianess()\n{\n  u16 vshort1;\n  u16 vshort2;\n  u16 vshort3;\n  u32 vint1;\n  u32 vint2;\n  u32 vint3;\n  u64 value1;\n  u64 value2;\n  u64 value3;\n  printf(\"testing endianess... \");\n  vshort1 = 0x1122;\n  copy_be16(&vshort2, &vshort1);\n  assert(vshort2 == 0x2211);\n  copy_be16(&vshort3, &vshort2);\n  assert(vshort3 == vshort1);\n  vshort1 = 0xF123;\n  copy_be16(&vshort2, &vshort1);\n  assert(vshort2 == 0x23F1);\n  copy_be16(&vshort3, &vshort2);\n  assert(vshort3 == vshort1);\n  vshort1 = 0x0123;\n  copy_be16(&vshort2, &vshort1);\n  assert(vshort2 == 0x2301);\n  copy_be16(&vshort3, &vshort2);\n  assert(vshort3 == vshort1);\n  vint1 = 0x11223344;\n  copy_be32(&vint2, &vint1);\n  assert(vint2 == 0x44332211);\n  copy_be32(&vint3, &vint2);\n  assert(vint3 == vint1);\n  vint1 = 0xF1234580;\n  copy_be32(&vint2, &vint1);\n  assert(vint2 == 0x804523F1);\n  copy_be32(&vint3, &vint2);\n  assert(vint3 == vint1);\n  vint1 = 0x00112233;\n  copy_be32(&vint2, &vint1);\n  assert(vint2 == 0x33221100);\n  copy_be32(&vint3, &vint2);\n  assert(vint3 == vint1);\n  value1 = 0x1122334455667788;\n  copy_be64(&value2, &value1);\n  assert(value2 == 0x8877665544332211);\n  copy_be64(&value3, &value2);\n  assert(value3 == value1);\n  printf(\"OK\\n\");\n}\n\n",
            "calle": [
                "assert",
                "copy_be16",
                "copy_be32",
                "copy_be64",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "vshort1",
                        "type": "u16",
                        "definition": [
                            "u16 vshort1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vshort2",
                        "type": "u16",
                        "definition": [
                            "u16 vshort2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vshort3",
                        "type": "u16",
                        "definition": [
                            "u16 vshort3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vint1",
                        "type": "u32",
                        "definition": [
                            "u32 vint1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vint2",
                        "type": "u32",
                        "definition": [
                            "u32 vint2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vint3",
                        "type": "u32",
                        "definition": [
                            "u32 vint3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value1",
                        "type": "u64",
                        "definition": [
                            "u64 value1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value2",
                        "type": "u64",
                        "definition": [
                            "u64 value2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value3",
                        "type": "u64",
                        "definition": [
                            "u64 value3"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "memdup",
            "header": "",
            "params": [
                "void *src",
                "int size"
            ],
            "definition": "void *memdup(void *src, int size)\n{\n  void *dest;\n  unsigned int dest_idx = 0;\n  if ((src == 0) || (size <= 0))\n  {\n    return 0;\n  }\n  dest_idx = malloc(size);\n  if ((&dest[dest_idx]) == 0)\n  {\n    return 0;\n  }\n  memcpy(dest, src, size);\n  return dest;\n}\n\n",
            "calle": [
                "malloc",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "src",
                        "type": "void *",
                        "definition": [
                            "void *src"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest",
                        "type": "void *",
                        "definition": [
                            "void *dest"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dest_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "i64toa",
            "header": "",
            "params": [
                "int64 value",
                "char *buf",
                "int radix"
            ],
            "definition": "char *i64toa(int64 value, char *buf, int radix)\n{\n  switch (radix)\n  {\n    case 10:\n    {\n      snprintf(buf, 64, \"%lli\", value);\n      break;\n    }\n\n    case 16:\n    {\n      snprintf(buf, 64, \"%llx\", value);\n      break;\n    }\n\n    default:\n    {\n      buf[0] = 0;\n    }\n\n  }\n\n  return buf;\n}\n\n",
            "calle": [
                "snprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "value",
                        "type": "int64",
                        "definition": [
                            "int64 value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char *",
                        "definition": [
                            "char *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "radix",
                        "type": "int",
                        "definition": [
                            "int radix"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pass_int64",
            "header": "",
            "params": [
                "int64 a"
            ],
            "definition": "void pass_int64(int64 a)\n{\n  assert(a == 9223372036854775807);\n  assert(a > 9223372036854775806);\n}\n\n",
            "calle": [
                "assert"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "int64",
                        "definition": [
                            "int64 a"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "return_int64",
            "header": "",
            "params": [],
            "definition": "int64 return_int64()\n{\n  return 9223372036854775807;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "return_passed_int64",
            "header": "",
            "params": [
                "int64 a"
            ],
            "definition": "int64 return_passed_int64(int64 a)\n{\n  return a;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "int64",
                        "definition": [
                            "int64 a"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_int64",
            "header": "",
            "params": [],
            "definition": "void test_int64()\n{\n  int64 i64;\n  char buf[64];\n  printf(\"testing int64... \");\n  pass_int64(9223372036854775807);\n  i64 = return_int64();\n  assert(i64 == 9223372036854775807);\n  i64toa(i64, buf, 10);\n  assert(strcmp(buf, \"9223372036854775807\") == 0);\n  i64 = return_passed_int64(-987654321987654321);\n  assert(i64 == (-987654321987654321));\n  i64toa(i64, buf, 10);\n  assert(strcmp(buf, \"-987654321987654321\") == 0);\n  printf(\"OK\\n\");\n}\n\n",
            "calle": [
                "assert",
                "i64toa",
                "pass_int64",
                "printf",
                "return_int64",
                "return_passed_int64",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i64",
                        "type": "int64",
                        "definition": [
                            "int64 i64"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char [64]",
                        "definition": [
                            "char buf[64]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "AlmostEqualFloats",
            "header": "",
            "params": [
                "float A",
                "float B",
                "int maxUlps"
            ],
            "definition": "BOOL AlmostEqualFloats(float A, float B, int maxUlps)\n{\n  int aInt;\n  int bInt;\n  int intDiff;\n  assert((maxUlps > 0) && (maxUlps < ((4 * 1024) * 1024)));\n  aInt = *((int *) (&A));\n  bInt = *((int *) (&B));\n  if (aInt < 0)\n  {\n    aInt = 0x80000000 - aInt;\n  }\n  if (bInt < 0)\n  {\n    bInt = 0x80000000 - bInt;\n  }\n  intDiff = abs(aInt - bInt);\n  if (intDiff <= maxUlps)\n  {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "abs",
                "assert"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "A",
                        "type": "float",
                        "definition": [
                            "float A"
                        ]
                    },
                    {
                        "path": null,
                        "name": "B",
                        "type": "float",
                        "definition": [
                            "float B"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxUlps",
                        "type": "int",
                        "definition": [
                            "int maxUlps"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aInt",
                        "type": "int",
                        "definition": [
                            "int aInt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bInt",
                        "type": "int",
                        "definition": [
                            "int bInt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "intDiff",
                        "type": "int",
                        "definition": [
                            "int intDiff"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "AlmostEqualDoubles",
            "header": "",
            "params": [
                "double a",
                "double b"
            ],
            "definition": "BOOL AlmostEqualDoubles(double a, double b)\n{\n  double absDiff;\n  double maxAbs;\n  double absA;\n  double absB;\n  absDiff = fabs(a - b);\n  if (absDiff < 1.0E-150)\n  {\n    return 1;\n  }\n  absA = fabs(a);\n  absB = fabs(b);\n  maxAbs = (absA > absB) ? (absA) : (absB);\n  if ((absDiff / maxAbs) < 1.0E-8)\n  {\n    return 1;\n  }\n  printf(\"a=%g b=%g\\n\", a, b);\n  return 0;\n}\n\n",
            "calle": [
                "fabs",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "double",
                        "definition": [
                            "double a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "double",
                        "definition": [
                            "double b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "absDiff",
                        "type": "double",
                        "definition": [
                            "double absDiff"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxAbs",
                        "type": "double",
                        "definition": [
                            "double maxAbs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "absA",
                        "type": "double",
                        "definition": [
                            "double absA"
                        ]
                    },
                    {
                        "path": null,
                        "name": "absB",
                        "type": "double",
                        "definition": [
                            "double absB"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_floating_point_numbers",
            "header": "",
            "params": [],
            "definition": "void test_floating_point_numbers()\n{\n  char buf[256];\n  float f1;\n  double d1;\n  printf(\"testing floating point... \");\n  f1 = 1.25;\n  assert(f1 == 1.25);\n  d1 = 1.25;\n  assert(d1 == 1.25);\n  d1 = 0;\n  d1 = f1;\n  assert(d1 == 1.25);\n  f1 = 0;\n  f1 = d1;\n  assert(f1 == 1.25);\n  d1 = 1.234;\n  assert(AlmostEqualDoubles(d1, 1.234) == 1);\n  f1 = d1;\n  assert(AlmostEqualFloats(f1, 1.234, 2) == 1);\n  d1 = 1.2345;\n  assert(AlmostEqualDoubles(d1, 1.2345) == 1);\n  f1 = d1;\n  assert(AlmostEqualFloats(f1, 1.2345, 2) == 1);\n  d1 = atof(\"1.234\");\n  assert(AlmostEqualDoubles(d1, 1.234) == 1);\n  f1 = d1;\n  assert(AlmostEqualFloats(f1, 1.234, 2) == 1);\n  sprintf(buf, \"%g\", d1);\n  assert(buf[0] != 0);\n  assert(strcmp(buf, \"1.234\") == 0);\n  d1 = atof(\"12.34\");\n  assert(d1 == 12.34);\n  f1 = d1;\n  assert(AlmostEqualFloats(f1, 12.34, 2) == 1);\n  sprintf(buf, \"%g\", d1);\n  assert(buf[0] != 0);\n  assert(strcmp(buf, \"12.34\") == 0);\n  d1 = atof(\"1.234e25\");\n  assert(AlmostEqualDoubles(d1, 1.234e25) == 1);\n  f1 = d1;\n  assert(AlmostEqualFloats(f1, 1.234e25, 2) == 1);\n  sprintf(buf, \"%g\", d1);\n  assert(buf[0] != 0);\n  printf(\"OK\\n\");\n}\n\n",
            "calle": [
                "AlmostEqualDoubles",
                "AlmostEqualFloats",
                "assert",
                "atof",
                "printf",
                "sprintf",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char [256]",
                        "definition": [
                            "char buf[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f1",
                        "type": "float",
                        "definition": [
                            "float f1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d1",
                        "type": "double",
                        "definition": [
                            "double d1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "print_binn",
            "header": "",
            "params": [
                "binn *map"
            ],
            "definition": "void print_binn(binn *map)\n{\n  unsigned char *p;\n  unsigned int p_idx = 0;\n  int size;\n  int i;\n  p_idx = binn_ptr(map);\n  size = binn_size(map);\n  for (i = 0; i < size; i += 1)\n  {\n    printf(\"%02x \", p[i + p_idx]);\n  }\n\n  puts(\"\");\n}\n\n",
            "calle": [
                "binn_ptr",
                "binn_size",
                "printf",
                "puts"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "binn *",
                        "definition": [
                            "binn *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test1",
            "header": "",
            "params": [],
            "definition": "void test1()\n{\n  static const int fix_size = 512;\n  int i;\n  int blobsize;\n  char *ptr;\n  unsigned int ptr_idx = 0;\n  char *p2;\n  unsigned int p2_idx = 0;\n  binn *obj1;\n  unsigned int obj1_idx = 0;\n  binn *list;\n  unsigned int list_idx = 0;\n  binn *map;\n  unsigned int map_idx = 0;\n  binn *obj;\n  unsigned int obj_idx = 0;\n  binn value;\n  char vbyte;\n  char *pblob;\n  unsigned int pblob_idx = 0;\n  signed short vint16;\n  unsigned short vuint16;\n  signed int vint32;\n  unsigned int vuint32;\n  signed long long int vint64;\n  unsigned long long int vuint64;\n  printf(\"testing binn 1... \");\n  assert(CalcAllocation(512, 512) == 512);\n  assert(CalcAllocation(510, 512) == 512);\n  assert(CalcAllocation(1, 512) == 512);\n  assert(CalcAllocation(0, 512) == 512);\n  assert(CalcAllocation(513, 512) == 1024);\n  assert(CalcAllocation(512 + 256, 512) == 1024);\n  assert(CalcAllocation(1025, 512) == 2048);\n  assert(CalcAllocation(1025, 1024) == 2048);\n  assert(CalcAllocation(2100, 1024) == 4096);\n  assert(binn_new(-1, 0, 0) == 0);\n  assert(binn_new(0, 0, 0) == 0);\n  assert(binn_new(5, 0, 0) == 0);\n  assert(binn_new(0xE1, -1, 0) == 0);\n  ptr_idx = (char *) (&(&obj1[obj1_idx]));\n  assert(binn_new(0xE1, -1, ptr) == 0);\n  assert(binn_new(0xE1, 3 - 1, ptr) == 0);\n  obj1_idx = binn_new(0xE0, 0, 0);\n  assert((&obj1[obj1_idx]) != 0);\n  assert(obj1->header == 0x1F22B11F);\n  assert(obj1->type == 0xE0);\n  assert(obj1->count == 0);\n  assert(obj1->pbuf != 0);\n  assert(obj1->alloc_size > 9);\n  assert(obj1->used_size == 9);\n  assert(obj1->pre_allocated == 0);\n  binn_free(obj1);\n  list_idx = binn_new(0xE0, 0, 0);\n  assert((&list[list_idx]) != 0);\n  map_idx = binn_new(0xE1, 0, 0);\n  assert((&map[map_idx]) != 0);\n  obj_idx = binn_new(0xE2, 0, 0);\n  assert((&obj[obj_idx]) != 0);\n  assert(list->header == 0x1F22B11F);\n  assert(list->type == 0xE0);\n  assert(list->count == 0);\n  assert(list->pbuf != 0);\n  assert(list->alloc_size > 9);\n  assert(list->used_size == 9);\n  assert(list->pre_allocated == 0);\n  assert(map->header == 0x1F22B11F);\n  assert(map->type == 0xE1);\n  assert(map->count == 0);\n  assert(map->pbuf != 0);\n  assert(map->alloc_size > 9);\n  assert(map->used_size == 9);\n  assert(map->pre_allocated == 0);\n  assert(obj->header == 0x1F22B11F);\n  assert(obj->type == 0xE2);\n  assert(obj->count == 0);\n  assert(obj->pbuf != 0);\n  assert(obj->alloc_size > 9);\n  assert(obj->used_size == 9);\n  assert(obj->pre_allocated == 0);\n  ptr_idx = malloc(fix_size);\n  assert((&ptr[ptr_idx]) != 0);\n  obj1_idx = binn_new(0xE2, fix_size, ptr);\n  assert((&obj1[obj1_idx]) != 0);\n  assert(obj1->header == 0x1F22B11F);\n  assert(obj1->type == 0xE2);\n  assert(obj1->count == 0);\n  assert(obj1->pbuf != 0);\n  assert(obj1->alloc_size == fix_size);\n  assert(obj1->used_size == 9);\n  assert(obj1->pre_allocated == 1);\n  assert(binn_map_set(list, 55001, 0x61, &i, 0) == 0);\n  assert(binn_object_set(list, \"test\", 0x61, &i, 0) == 0);\n  assert(binn_list_add(map, 0x61, &i, 0) == 0);\n  assert(binn_object_set(map, \"test\", 0x61, &i, 0) == 0);\n  assert(binn_list_add(obj, 0x61, &i, 0) == 0);\n  assert(binn_map_set(obj, 55001, 0x61, &i, 0) == 0);\n  assert(binn_list_add(list, -1, &i, 0) == 0);\n  assert(binn_list_add(list, 0x1FFFF, &i, 0) == 0);\n  assert(binn_map_set(map, 5501, -1, &i, 0) == 0);\n  assert(binn_map_set(map, 5501, 0x1FFFF, &i, 0) == 0);\n  assert(binn_object_set(obj, \"test\", -1, &i, 0) == 0);\n  assert(binn_object_set(obj, \"test\", 0x1FFFF, &i, 0) == 0);\n  assert(binn_list_add(list, 0x21, 0, 0) == 0);\n  assert(binn_list_add(list, 0x41, 0, 0) == 0);\n  assert(binn_list_add(list, 0x61, 0, 0) == 0);\n  assert(binn_list_add(list, 0x81, 0, 0) == 0);\n  assert(binn_map_set(map, 5501, 0x21, 0, 0) == 0);\n  assert(binn_map_set(map, 5501, 0x41, 0, 0) == 0);\n  assert(binn_map_set(map, 5501, 0x61, 0, 0) == 0);\n  assert(binn_map_set(map, 5501, 0x81, 0, 0) == 0);\n  assert(binn_object_set(obj, \"test\", 0x21, 0, 0) == 0);\n  assert(binn_object_set(obj, \"test\", 0x41, 0, 0) == 0);\n  assert(binn_object_set(obj, \"test\", 0x61, 0, 0) == 0);\n  assert(binn_object_set(obj, \"test\", 0x81, 0, 0) == 0);\n  assert(binn_list_add(list, 0xC0, 0, -1) == 0);\n  assert(binn_list_add(list, 0xC0, 0, 10) == 0);\n  assert(binn_map_set(map, 5501, 0xC0, 0, -1) == 0);\n  assert(binn_map_set(map, 5501, 0xC0, 0, 10) == 0);\n  assert(binn_object_set(obj, \"test\", 0xC0, 0, -1) == 0);\n  assert(binn_object_set(obj, \"test\", 0xC0, 0, 10) == 0);\n  assert(binn_list_add(list, 0xC0, &i, -1) == 0);\n  assert(binn_list_add(list, 0xC0, &i, -15) == 0);\n  assert(binn_map_set(map, 5501, 0xC0, &i, -1) == 0);\n  assert(binn_map_set(map, 5501, 0xC0, &i, -15) == 0);\n  assert(binn_object_set(obj, \"test\", 0xC0, &i, -1) == 0);\n  assert(binn_object_set(obj, \"test\", 0xC0, &i, -15) == 0);\n  ptr_idx = binn_ptr(list);\n  assert((&ptr[ptr_idx]) != 0);\n  assert(binn_list_get_value(ptr, 0, &value) == 0);\n  assert(binn_list_get_value(ptr, 1, &value) == 0);\n  assert(binn_list_get_value(ptr, 2, &value) == 0);\n  assert(binn_list_get_value(ptr, -1, &value) == 0);\n  ptr_idx = binn_ptr(map);\n  assert((&ptr[ptr_idx]) != 0);\n  assert(binn_list_get_value(ptr, 0, &value) == 0);\n  assert(binn_list_get_value(ptr, 1, &value) == 0);\n  assert(binn_list_get_value(ptr, 2, &value) == 0);\n  assert(binn_list_get_value(ptr, -1, &value) == 0);\n  ptr_idx = binn_ptr(obj);\n  assert((&ptr[ptr_idx]) != 0);\n  assert(binn_list_get_value(ptr, 0, &value) == 0);\n  assert(binn_list_get_value(ptr, 1, &value) == 0);\n  assert(binn_list_get_value(ptr, 2, &value) == 0);\n  assert(binn_list_get_value(ptr, -1, &value) == 0);\n  i = 0x1234;\n  assert(binn_list_add(list, 0x61, &i, 0) == 1);\n  assert(binn_map_set(map, 5501, 0x61, &i, 0) == 1);\n  assert(binn_map_set(map, 5501, 0x61, &i, 0) == 0);\n  assert(binn_object_set(obj, \"test\", 0x61, &i, 0) == 1);\n  assert(binn_object_set(obj, \"test\", 0x61, &i, 0) == 0);\n  vbyte = 255;\n  vint16 = -32000;\n  vuint16 = 65000;\n  vint32 = -65000000;\n  vuint32 = 65000000;\n  vint64 = -6500000000000000;\n  vuint64 = 6500000000000000;\n  blobsize = 150;\n  pblob_idx = malloc(blobsize);\n  assert((&pblob[pblob_idx]) != 0);\n  memset(pblob, 55, blobsize);\n  assert(binn_list_add(list, 0x00, 0, 0) == 1);\n  assert(binn_list_add(list, 0x20, &vbyte, 0) == 1);\n  assert(binn_list_add(list, 0x41, &vint16, 0) == 1);\n  assert(binn_list_add(list, 0x40, &vuint16, 0) == 1);\n  assert(binn_list_add(list, 0x61, &vint32, 0) == 1);\n  assert(binn_list_add(list, 0x60, &vuint32, 0) == 1);\n  assert(binn_list_add(list, 0x81, &vint64, 0) == 1);\n  assert(binn_list_add(list, 0x80, &vuint64, 0) == 1);\n  assert(binn_list_add(list, 0xA0, \"this is the string\", 0) == 1);\n  assert(binn_list_add(list, 0xC0, pblob, blobsize) == 1);\n  assert(binn_map_set(map, 99000, 0x00, 0, 0) == 1);\n  assert(binn_map_set(map, 99001, 0x20, &vbyte, 0) == 1);\n  assert(binn_map_set(map, 99002, 0x41, &vint16, 0) == 1);\n  assert(binn_map_set(map, 99003, 0x40, &vuint16, 0) == 1);\n  assert(binn_map_set(map, 99004, 0x61, &vint32, 0) == 1);\n  assert(binn_map_set(map, 99005, 0x60, &vuint32, 0) == 1);\n  assert(binn_map_set(map, 99006, 0x81, &vint64, 0) == 1);\n  assert(binn_map_set(map, 99007, 0x80, &vuint64, 0) == 1);\n  assert(binn_map_set(map, 99008, 0xA0, \"this is the string\", 0) == 1);\n  assert(binn_map_set(map, 99009, 0xC0, pblob, blobsize) == 1);\n  assert(binn_object_set(obj, \"key0\", 0x00, 0, 0) == 1);\n  assert(binn_object_set(obj, \"key1\", 0x20, &vbyte, 0) == 1);\n  assert(binn_object_set(obj, \"key2\", 0x41, &vint16, 0) == 1);\n  assert(binn_object_set(obj, \"key3\", 0x40, &vuint16, 0) == 1);\n  assert(binn_object_set(obj, \"key4\", 0x61, &vint32, 0) == 1);\n  assert(binn_object_set(obj, \"key5\", 0x60, &vuint32, 0) == 1);\n  assert(binn_object_set(obj, \"key6\", 0x81, &vint64, 0) == 1);\n  assert(binn_object_set(obj, \"key7\", 0x80, &vuint64, 0) == 1);\n  assert(binn_object_set(obj, \"key8\", 0xA0, \"this is the string\", 0) == 1);\n  assert(binn_object_set(obj, \"key9\", 0xC0, pblob, blobsize) == 1);\n  assert(binn_list_add(list, 0xC0, ptr, 0) == 1);\n  assert(binn_list_add(list, 0xA0, \"\", 0) == 1);\n  assert(binn_list_add(list, 0xA0, \"after the empty items\", 0) == 1);\n  assert(binn_map_set(map, 0x09, 0x20, &vbyte, 0) == 1);\n  assert(binn_map_set(map, 0x3F, 0x20, &vbyte, 0) == 1);\n  assert(binn_map_set(map, 0x4F, 0x20, &vbyte, 0) == 1);\n  assert(binn_map_set(map, 0xFFF, 0x20, &vbyte, 0) == 1);\n  assert(binn_map_set(map, 0xFFFFF, 0x20, &vbyte, 0) == 1);\n  assert(binn_map_set(map, 0xFFFFFFF, 0x20, &vbyte, 0) == 1);\n  assert(binn_map_set(map, 0x7FFFFFFF, 0x20, &vbyte, 0) == 1);\n  assert(binn_map_set(map, -0x09, 0x20, &vbyte, 0) == 1);\n  assert(binn_map_set(map, -0x3F, 0x20, &vbyte, 0) == 1);\n  assert(binn_map_set(map, -0x4F, 0x20, &vbyte, 0) == 1);\n  assert(binn_map_set(map, -0xFFF, 0x20, &vbyte, 0) == 1);\n  assert(binn_map_set(map, -0xFFFFF, 0x20, &vbyte, 0) == 1);\n  assert(binn_map_set(map, -0xFFFFFFF, 0x20, &vbyte, 0) == 1);\n  assert(binn_map_set(map, -0x7FFFFFFF, 0x20, &vbyte, 0) == 1);\n  assert(binn_map_set(map, 0x09, 0x20, &vbyte, 0) == 0);\n  assert(binn_map_set(map, 0x3F, 0x20, &vbyte, 0) == 0);\n  assert(binn_map_set(map, 0x4F, 0x20, &vbyte, 0) == 0);\n  assert(binn_map_set(map, 0xFFF, 0x20, &vbyte, 0) == 0);\n  assert(binn_map_set(map, 0xFFFFF, 0x20, &vbyte, 0) == 0);\n  assert(binn_map_set(map, 0xFFFFFFF, 0x20, &vbyte, 0) == 0);\n  assert(binn_map_set(map, 0x7FFFFFFF, 0x20, &vbyte, 0) == 0);\n  assert(binn_map_set(map, -0x09, 0x20, &vbyte, 0) == 0);\n  assert(binn_map_set(map, -0x3F, 0x20, &vbyte, 0) == 0);\n  assert(binn_map_set(map, -0x4F, 0x20, &vbyte, 0) == 0);\n  assert(binn_map_set(map, -0xFFF, 0x20, &vbyte, 0) == 0);\n  assert(binn_map_set(map, -0xFFFFF, 0x20, &vbyte, 0) == 0);\n  assert(binn_map_set(map, -0xFFFFFFF, 0x20, &vbyte, 0) == 0);\n  assert(binn_map_set(map, -0x7FFFFFFF, 0x20, &vbyte, 0) == 0);\n  assert(binn_list_add(obj1, 0x61, &i, 0) == 0);\n  assert(binn_map_set(obj1, 55001, 0x61, &i, 0) == 0);\n  assert(binn_object_set(obj1, \"test\", 0x60, &vuint32, 0) == 1);\n  assert(binn_object_set(obj1, \"test\", 0x60, &vuint32, 0) == 0);\n  assert(binn_object_set(obj1, \"key1\", 0xA0, \"this is the value\", 0) == 1);\n  assert(binn_object_set(obj1, \"key2\", 0xA0, \"the second value\", 0) == 1);\n  ptr_idx = malloc(fix_size);\n  assert((&ptr[ptr_idx]) != 0);\n  p2_idx = &ptr[ptr_idx];\n  for (i = 0; i < (fix_size - 1); i += 1)\n  {\n    p2[p2_idx] = 'A';\n    p2_idx += 1;\n  }\n\n  p2[p2_idx] = '\\0';\n  assert(strlen(ptr) == (fix_size - 1));\n  assert(binn_object_set(obj1, \"v2\", 0xA0, ptr, 0) == 0);\n  assert(binn_object_set(obj, \"v2\", 0xA0, ptr, 0) == 1);\n  assert(binn_object_set(obj, \"Key00\", 0xA0, \"after the big string\", 0) == 1);\n  free(ptr);\n  ptr_idx = 0;\n  assert(binn_object_set(obj, \"list\", 0xE0, binn_ptr(list), binn_size(list)) == 1);\n  assert(binn_object_set(obj, \"Key10\", 0xA0, \"after the list\", 0) == 1);\n  assert(binn_size(0) == 0);\n  assert(binn_size(list) == list->size);\n  assert(binn_size(map) == map->size);\n  assert(binn_size(obj) == obj->size);\n  assert(binn_size(obj1) == obj1->size);\n  binn_free(list);\n  binn_free(map);\n  binn_free(obj);\n  binn_free(obj1);\n  printf(\"OK\\n\");\n}\n\n",
            "calle": [
                "CalcAllocation",
                "assert",
                "binn_free",
                "binn_list_add",
                "binn_list_get_value",
                "binn_map_set",
                "binn_new",
                "binn_object_set",
                "binn_ptr",
                "binn_size",
                "free",
                "malloc",
                "memset",
                "printf",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fix_size",
                        "type": "const int",
                        "definition": [
                            "static const int fix_size = 512"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blobsize",
                        "type": "int",
                        "definition": [
                            "int blobsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "char *",
                        "definition": [
                            "char *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ptr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p2",
                        "type": "char *",
                        "definition": [
                            "char *p2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p2_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p2_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj1",
                        "type": "binn *",
                        "definition": [
                            "binn *obj1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj1_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int obj1_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list",
                        "type": "binn *",
                        "definition": [
                            "binn *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int list_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "map",
                        "type": "binn *",
                        "definition": [
                            "binn *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "map_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int map_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj",
                        "type": "binn *",
                        "definition": [
                            "binn *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int obj_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn",
                        "definition": [
                            "binn value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vbyte",
                        "type": "char",
                        "definition": [
                            "char vbyte"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pblob",
                        "type": "char *",
                        "definition": [
                            "char *pblob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pblob_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pblob_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vint16",
                        "type": "signed short",
                        "definition": [
                            "signed short vint16"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vuint16",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short vuint16"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vint32",
                        "type": "signed int",
                        "definition": [
                            "signed int vint32"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vuint32",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int vuint32"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vint64",
                        "type": "signed long long int",
                        "definition": [
                            "signed long long int vint64"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vuint64",
                        "type": "unsigned long long int",
                        "definition": [
                            "unsigned long long int vuint64"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test2",
            "header": "",
            "params": [
                "BOOL use_int_compression"
            ],
            "definition": "void test2(BOOL use_int_compression)\n{\n  binn *list = 0;\n  unsigned int list_idx = 0;\n  binn *map = 0;\n  unsigned int map_idx = 0;\n  binn *obj = 0;\n  unsigned int obj_idx = 0;\n  binn value;\n  BOOL vbool;\n  int blobsize;\n  char *pblob;\n  unsigned int pblob_idx = 0;\n  char *pstr;\n  unsigned int pstr_idx = 0;\n  signed int vint32;\n  double vdouble;\n  char *str_list = \"test list\";\n  char *str_map = \"test map\";\n  char *str_obj = \"test object\";\n  printf(\"testing binn 2 (use_int_compression = %d)... \", use_int_compression);\n  blobsize = 150;\n  pblob_idx = malloc(blobsize);\n  assert((&pblob[pblob_idx]) != 0);\n  memset(pblob, 55, blobsize);\n  assert((&list[list_idx]) == 0);\n  assert((&map[map_idx]) == 0);\n  assert((&obj[obj_idx]) == 0);\n  assert(binn_list_add_int32(list, 123) == 0);\n  assert(binn_map_set_int32(map, 1001, 456) == 0);\n  assert(binn_object_set_int32(obj, \"int\", 789) == 0);\n  list_idx = binn_list();\n  map_idx = binn_map();\n  obj_idx = binn_object();\n  assert((&list[list_idx]) != 0);\n  assert((&map[map_idx]) != 0);\n  assert((&obj[obj_idx]) != 0);\n  if (use_int_compression == 0)\n  {\n    list->disable_int_compression = 1;\n    map->disable_int_compression = 1;\n    obj->disable_int_compression = 1;\n  }\n  assert(binn_list_add_int32(list, 123) == 1);\n  assert(binn_map_set_int32(map, 1001, 456) == 1);\n  assert(binn_object_set_int32(obj, \"int\", 789) == 1);\n  assert(list->header == 0x1F22B11F);\n  assert(list->type == 0xE0);\n  assert(list->count == 1);\n  assert(list->pbuf != 0);\n  assert(list->alloc_size > 9);\n  assert(list->used_size > 9);\n  assert(list->pre_allocated == 0);\n  assert(map->header == 0x1F22B11F);\n  assert(map->type == 0xE1);\n  assert(map->count == 1);\n  assert(map->pbuf != 0);\n  assert(map->alloc_size > 9);\n  assert(map->used_size > 9);\n  assert(map->pre_allocated == 0);\n  assert(obj->header == 0x1F22B11F);\n  assert(obj->type == 0xE2);\n  assert(obj->count == 1);\n  assert(obj->pbuf != 0);\n  assert(obj->alloc_size > 9);\n  assert(obj->used_size > 9);\n  assert(obj->pre_allocated == 0);\n  assert(binn_list_add_double(list, 1.23) == 1);\n  assert(binn_map_set_double(map, 1002, 4.56) == 1);\n  assert(binn_object_set_double(obj, \"double\", 7.89) == 1);\n  assert(list->count == 2);\n  assert(map->count == 2);\n  assert(obj->count == 2);\n  assert(binn_list_add_bool(list, 1) == 1);\n  assert(binn_map_set_bool(map, 1003, 1) == 1);\n  assert(binn_object_set_bool(obj, \"bool\", 1) == 1);\n  assert(list->count == 3);\n  assert(map->count == 3);\n  assert(obj->count == 3);\n  assert(binn_list_add_str(list, str_list) == 1);\n  assert(binn_map_set_str(map, 1004, str_map) == 1);\n  assert(binn_object_set_str(obj, \"text\", str_obj) == 1);\n  assert(list->count == 4);\n  assert(map->count == 4);\n  assert(obj->count == 4);\n  assert(binn_list_add_blob(list, pblob, blobsize) == 1);\n  assert(binn_map_set_blob(map, 1005, pblob, blobsize) == 1);\n  assert(binn_object_set_blob(obj, \"blob\", pblob, blobsize) == 1);\n  assert(list->count == 5);\n  assert(map->count == 5);\n  assert(obj->count == 5);\n  assert(binn_count(list) == 5);\n  assert(binn_count(map) == 5);\n  assert(binn_count(obj) == 5);\n  assert(binn_size(list) == list->size);\n  assert(binn_size(map) == map->size);\n  assert(binn_size(obj) == obj->size);\n  assert(binn_type(list) == 0xE0);\n  assert(binn_type(map) == 0xE1);\n  assert(binn_type(obj) == 0xE2);\n  assert(binn_list_get_value(list, 1, &value) == 1);\n  assert(value.header == 0x1F22B11F);\n  assert(value.writable == 0);\n  assert(value.allocated == 0);\n  if (use_int_compression)\n  {\n    assert(value.type == 0x20);\n    assert(value.ptr != (&value.vuint8));\n  }\n  else\n  {\n    assert(value.type == 0x61);\n    assert(value.ptr == (&value.vint));\n  }\n  assert(value.size == 0);\n  assert(value.count == 0);\n  assert(value.vint == 123);\n  memset(&value, 0, sizeof(binn));\n  assert(binn_map_get_value(map, 1001, &value) == 1);\n  assert(value.header == 0x1F22B11F);\n  assert(value.writable == 0);\n  if (use_int_compression)\n  {\n    assert(value.type == 0x40);\n    assert(value.ptr == (&value.vuint16));\n  }\n  else\n  {\n    assert(value.type == 0x61);\n    assert(value.ptr == (&value.vint));\n  }\n  assert(value.size == 0);\n  assert(value.count == 0);\n  assert(value.vint == 456);\n  memset(&value, 0, sizeof(binn));\n  assert(binn_object_get_value(obj, \"int\", &value) == 1);\n  assert(value.header == 0x1F22B11F);\n  assert(value.writable == 0);\n  if (use_int_compression)\n  {\n    assert(value.type == 0x40);\n    assert(value.ptr == (&value.vuint16));\n  }\n  else\n  {\n    assert(value.type == 0x61);\n    assert(value.ptr == (&value.vint));\n  }\n  assert(value.size == 0);\n  assert(value.count == 0);\n  assert(value.vint == 789);\n  memset(&value, 0, sizeof(binn));\n  assert(binn_list_get_value(list, 2, &value) == 1);\n  assert(value.header == 0x1F22B11F);\n  assert(value.writable == 0);\n  assert(value.type == 0x82);\n  assert(value.ptr == (&value.vint));\n  assert(value.size == 0);\n  assert(value.count == 0);\n  assert(value.vdouble == 1.23);\n  memset(&value, 0, sizeof(binn));\n  assert(binn_map_get_value(map, 1002, &value) == 1);\n  assert(value.header == 0x1F22B11F);\n  assert(value.writable == 0);\n  assert(value.type == 0x82);\n  assert(value.ptr == (&value.vint));\n  assert(value.size == 0);\n  assert(value.count == 0);\n  assert(value.vdouble == 4.56);\n  memset(&value, 0, sizeof(binn));\n  assert(binn_object_get_value(obj, \"double\", &value) == 1);\n  assert(value.header == 0x1F22B11F);\n  assert(value.writable == 0);\n  assert(value.type == 0x82);\n  assert(value.ptr == (&value.vint));\n  assert(value.size == 0);\n  assert(value.count == 0);\n  assert(value.vdouble == 7.89);\n  memset(&value, 0, sizeof(binn));\n  assert(binn_list_get_value(list, 3, &value) == 1);\n  assert(value.header == 0x1F22B11F);\n  assert(value.writable == 0);\n  assert(value.type == 0x80061);\n  assert(value.ptr == (&value.vint));\n  assert(value.size == 0);\n  assert(value.count == 0);\n  assert(value.vbool == 1);\n  memset(&value, 0, sizeof(binn));\n  assert(binn_map_get_value(map, 1003, &value) == 1);\n  assert(value.header == 0x1F22B11F);\n  assert(value.writable == 0);\n  assert(value.type == 0x80061);\n  assert(value.ptr == (&value.vint));\n  assert(value.size == 0);\n  assert(value.count == 0);\n  assert(value.vbool == 1);\n  assert(binn_object_get_value(obj, \"bool\", &value) == 1);\n  assert(value.header == 0x1F22B11F);\n  assert(value.writable == 0);\n  assert(value.type == 0x80061);\n  assert(value.ptr == (&value.vint));\n  assert(value.size == 0);\n  assert(value.count == 0);\n  assert(value.vbool == 1);\n  memset(&value, 0, sizeof(binn));\n  assert(binn_list_get_value(list, 4, &value) == 1);\n  assert(value.header == 0x1F22B11F);\n  assert(value.writable == 0);\n  assert(value.type == 0xA0);\n  assert(value.ptr != 0);\n  assert(value.size == strlen(str_list));\n  assert(strcmp(value.ptr, str_list) == 0);\n  assert(value.count == 0);\n  memset(&value, 0, sizeof(binn));\n  assert(binn_map_get_value(map, 1004, &value) == 1);\n  assert(value.header == 0x1F22B11F);\n  assert(value.writable == 0);\n  assert(value.type == 0xA0);\n  assert(value.size == strlen(str_map));\n  assert(strcmp(value.ptr, str_map) == 0);\n  assert(value.count == 0);\n  memset(&value, 0, sizeof(binn));\n  assert(binn_object_get_value(obj, \"text\", &value) == 1);\n  assert(value.header == 0x1F22B11F);\n  assert(value.writable == 0);\n  assert(value.type == 0xA0);\n  assert(value.size == strlen(str_obj));\n  assert(strcmp(value.ptr, str_obj) == 0);\n  assert(value.count == 0);\n  memset(&value, 0, sizeof(binn));\n  assert(binn_list_get_value(list, 5, &value) == 1);\n  assert(value.header == 0x1F22B11F);\n  assert(value.writable == 0);\n  assert(value.type == 0xC0);\n  assert(value.ptr != 0);\n  assert(value.size == blobsize);\n  assert(memcmp(value.ptr, pblob, blobsize) == 0);\n  assert(value.count == 0);\n  memset(&value, 0, sizeof(binn));\n  assert(binn_map_get_value(map, 1005, &value) == 1);\n  assert(value.header == 0x1F22B11F);\n  assert(value.writable == 0);\n  assert(value.type == 0xC0);\n  assert(value.ptr != 0);\n  assert(value.size == blobsize);\n  assert(memcmp(value.ptr, pblob, blobsize) == 0);\n  assert(value.count == 0);\n  memset(&value, 0, sizeof(binn));\n  assert(binn_object_get_value(obj, \"blob\", &value) == 1);\n  assert(value.header == 0x1F22B11F);\n  assert(value.writable == 0);\n  assert(value.type == 0xC0);\n  assert(value.ptr != 0);\n  assert(value.size == blobsize);\n  assert(memcmp(value.ptr, pblob, blobsize) == 0);\n  assert(value.count == 0);\n  memset(&value, 0, sizeof(binn));\n  assert(binn_list_get_int32(list, 1, &vint32) == 1);\n  assert(vint32 == 123);\n  assert(binn_map_get_int32(map, 1001, &vint32) == 1);\n  assert(vint32 == 456);\n  assert(binn_object_get_int32(obj, \"int\", &vint32) == 1);\n  assert(vint32 == 789);\n  assert(binn_list_get_double(list, 2, &vdouble) == 1);\n  assert(vdouble == 1.23);\n  assert(binn_map_get_double(map, 1002, &vdouble) == 1);\n  assert(vdouble == 4.56);\n  assert(binn_object_get_double(obj, \"double\", &vdouble) == 1);\n  assert(vdouble == 7.89);\n  assert(binn_list_get_bool(list, 3, &vbool) == 1);\n  assert(vbool == 1);\n  assert(binn_map_get_bool(map, 1003, &vbool) == 1);\n  assert(vbool == 1);\n  assert(binn_object_get_bool(obj, \"bool\", &vbool) == 1);\n  assert(vbool == 1);\n  assert(binn_list_get_str(list, 4, &(&pstr[pstr_idx])) == 1);\n  assert((&pstr[pstr_idx]) != 0);\n  assert(strcmp(pstr, str_list) == 0);\n  assert(binn_map_get_str(map, 1004, &(&pstr[pstr_idx])) == 1);\n  assert((&pstr[pstr_idx]) != 0);\n  assert(strcmp(pstr, str_map) == 0);\n  assert(binn_object_get_str(obj, \"text\", &(&pstr[pstr_idx])) == 1);\n  assert((&pstr[pstr_idx]) != 0);\n  assert(strcmp(pstr, str_obj) == 0);\n  value.ptr = 0;\n  value.size = 0;\n  assert(binn_list_get_blob(list, 5, &value.ptr, &value.size) == 1);\n  assert(value.ptr != 0);\n  assert(value.size == blobsize);\n  assert(memcmp(value.ptr, pblob, blobsize) == 0);\n  value.ptr = 0;\n  value.size = 0;\n  assert(binn_map_get_blob(map, 1005, &value.ptr, &value.size) == 1);\n  assert(value.ptr != 0);\n  assert(value.size == blobsize);\n  assert(memcmp(value.ptr, pblob, blobsize) == 0);\n  value.ptr = 0;\n  value.size = 0;\n  assert(binn_object_get_blob(obj, \"blob\", &value.ptr, &value.size) == 1);\n  assert(value.ptr != 0);\n  assert(value.size == blobsize);\n  assert(memcmp(value.ptr, pblob, blobsize) == 0);\n  assert(binn_list_int32(list, 1) == 123);\n  assert(binn_map_int32(map, 1001) == 456);\n  assert(binn_object_int32(obj, \"int\") == 789);\n  assert(binn_list_double(list, 2) == 1.23);\n  assert(binn_map_double(map, 1002) == 4.56);\n  assert(binn_object_double(obj, \"double\") == 7.89);\n  assert(binn_list_bool(list, 3) == 1);\n  assert(binn_map_bool(map, 1003) == 1);\n  assert(binn_object_bool(obj, \"bool\") == 1);\n  pstr_idx = binn_list_str(list, 4);\n  assert((&pstr[pstr_idx]) != 0);\n  assert(strcmp(pstr, str_list) == 0);\n  pstr_idx = binn_map_str(map, 1004);\n  assert((&pstr[pstr_idx]) != 0);\n  assert(strcmp(pstr, str_map) == 0);\n  pstr_idx = binn_object_str(obj, \"text\");\n  assert((&pstr[pstr_idx]) != 0);\n  assert(strcmp(pstr, str_obj) == 0);\n  value.ptr = binn_list_blob(list, 5, &value.size);\n  assert(value.ptr != 0);\n  assert(value.size == blobsize);\n  assert(memcmp(value.ptr, pblob, blobsize) == 0);\n  value.ptr = binn_map_blob(map, 1005, &value.size);\n  assert(value.ptr != 0);\n  assert(value.size == blobsize);\n  assert(memcmp(value.ptr, pblob, blobsize) == 0);\n  value.ptr = binn_object_blob(obj, \"blob\", &value.size);\n  assert(value.ptr != 0);\n  assert(value.size == blobsize);\n  assert(memcmp(value.ptr, pblob, blobsize) == 0);\n  binn_free(list);\n  binn_free(map);\n  binn_free(obj);\n  printf(\"OK\\n\");\n}\n\n",
            "calle": [
                "assert",
                "binn_count",
                "binn_free",
                "binn_list",
                "binn_list_add_blob",
                "binn_list_add_bool",
                "binn_list_add_double",
                "binn_list_add_int32",
                "binn_list_add_str",
                "binn_list_blob",
                "binn_list_bool",
                "binn_list_double",
                "binn_list_get_blob",
                "binn_list_get_bool",
                "binn_list_get_double",
                "binn_list_get_int32",
                "binn_list_get_str",
                "binn_list_get_value",
                "binn_list_int32",
                "binn_list_str",
                "binn_map",
                "binn_map_blob",
                "binn_map_bool",
                "binn_map_double",
                "binn_map_get_blob",
                "binn_map_get_bool",
                "binn_map_get_double",
                "binn_map_get_int32",
                "binn_map_get_str",
                "binn_map_get_value",
                "binn_map_int32",
                "binn_map_set_blob",
                "binn_map_set_bool",
                "binn_map_set_double",
                "binn_map_set_int32",
                "binn_map_set_str",
                "binn_map_str",
                "binn_object",
                "binn_object_blob",
                "binn_object_bool",
                "binn_object_double",
                "binn_object_get_blob",
                "binn_object_get_bool",
                "binn_object_get_double",
                "binn_object_get_int32",
                "binn_object_get_str",
                "binn_object_get_value",
                "binn_object_int32",
                "binn_object_set_blob",
                "binn_object_set_bool",
                "binn_object_set_double",
                "binn_object_set_int32",
                "binn_object_set_str",
                "binn_object_str",
                "binn_size",
                "binn_type",
                "malloc",
                "memcmp",
                "memset",
                "printf",
                "strcmp",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "use_int_compression",
                        "type": "BOOL",
                        "definition": [
                            "BOOL use_int_compression"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list",
                        "type": "binn *",
                        "definition": [
                            "binn *list = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int list_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "map",
                        "type": "binn *",
                        "definition": [
                            "binn *map = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "map_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int map_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj",
                        "type": "binn *",
                        "definition": [
                            "binn *obj = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int obj_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn",
                        "definition": [
                            "binn value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vbool",
                        "type": "BOOL",
                        "definition": [
                            "BOOL vbool"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blobsize",
                        "type": "int",
                        "definition": [
                            "int blobsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pblob",
                        "type": "char *",
                        "definition": [
                            "char *pblob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pblob_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pblob_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pstr",
                        "type": "char *",
                        "definition": [
                            "char *pstr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pstr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pstr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vint32",
                        "type": "signed int",
                        "definition": [
                            "signed int vint32"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vdouble",
                        "type": "double",
                        "definition": [
                            "double vdouble"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_list",
                        "type": "char *",
                        "definition": [
                            "char *str_list = \"test list\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_map",
                        "type": "char *",
                        "definition": [
                            "char *str_map = \"test map\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_obj",
                        "type": "char *",
                        "definition": [
                            "char *str_obj = \"test object\""
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test3",
            "header": "",
            "params": [],
            "definition": "void test3()\n{\n  static const int fix_size = 512;\n  int i;\n  int id;\n  int type;\n  int count;\n  int size;\n  int header_size;\n  int blobsize;\n  char *ptr;\n  unsigned int ptr_idx = 0;\n  char *p2;\n  unsigned int p2_idx = 0;\n  char *pstr;\n  unsigned int pstr_idx = 0;\n  char key[256];\n  binn *list;\n  unsigned int list_idx = 0;\n  binn *map;\n  unsigned int map_idx = 0;\n  binn *obj;\n  unsigned int obj_idx = 0;\n  binn *obj1;\n  unsigned int obj1_idx = 0;\n  binn value;\n  char vbyte;\n  char *pblob;\n  unsigned int pblob_idx = 0;\n  signed short vint16;\n  signed short *pint16;\n  unsigned int pint16_idx = 0;\n  unsigned short vuint16;\n  unsigned short *puint16;\n  unsigned int puint16_idx = 0;\n  signed int vint32;\n  signed int *pint32;\n  unsigned int pint32_idx = 0;\n  unsigned int vuint32;\n  unsigned int *puint32;\n  unsigned int puint32_idx = 0;\n  signed long long int vint64;\n  signed long long int *pint64;\n  unsigned int pint64_idx = 0;\n  unsigned long long int vuint64;\n  unsigned long long int *puint64;\n  unsigned int puint64_idx = 0;\n  printf(\"testing binn 3... \");\n  list_idx = binn_list();\n  assert((&list[list_idx]) != 0);\n  map_idx = binn_map();\n  assert((&map[map_idx]) != 0);\n  obj_idx = binn_object();\n  assert((&obj[obj_idx]) != 0);\n  assert(list->header == 0x1F22B11F);\n  assert(list->type == 0xE0);\n  assert(list->count == 0);\n  assert(list->pbuf != 0);\n  assert(list->alloc_size > 9);\n  assert(list->used_size == 9);\n  assert(list->pre_allocated == 0);\n  assert(map->header == 0x1F22B11F);\n  assert(map->type == 0xE1);\n  assert(map->count == 0);\n  assert(map->pbuf != 0);\n  assert(map->alloc_size > 9);\n  assert(map->used_size == 9);\n  assert(map->pre_allocated == 0);\n  assert(obj->header == 0x1F22B11F);\n  assert(obj->type == 0xE2);\n  assert(obj->count == 0);\n  assert(obj->pbuf != 0);\n  assert(obj->alloc_size > 9);\n  assert(obj->used_size == 9);\n  assert(obj->pre_allocated == 0);\n  ptr_idx = malloc(fix_size);\n  assert((&ptr[ptr_idx]) != 0);\n  obj1_idx = binn_new(0xE2, fix_size, ptr);\n  assert((&obj1[obj1_idx]) != 0);\n  assert(obj1->header == 0x1F22B11F);\n  assert(obj1->type == 0xE2);\n  assert(obj1->count == 0);\n  assert(obj1->pbuf != 0);\n  assert(obj1->alloc_size == fix_size);\n  assert(obj1->used_size == 9);\n  assert(obj1->pre_allocated == 1);\n  ptr_idx = binn_ptr(list);\n  assert((&ptr[ptr_idx]) != 0);\n  assert(binn_list_read(ptr, 0, &type, &size) == 0);\n  assert(binn_list_read(ptr, 1, &type, &size) == 0);\n  assert(binn_list_read(ptr, 2, &type, &size) == 0);\n  assert(binn_list_read(ptr, -1, &type, &size) == 0);\n  ptr_idx = binn_ptr(map);\n  assert((&ptr[ptr_idx]) != 0);\n  assert(binn_map_read(ptr, 0, &type, &size) == 0);\n  assert(binn_map_read(ptr, 55001, &type, &size) == 0);\n  assert(binn_map_read(ptr, -1, &type, &size) == 0);\n  ptr_idx = binn_ptr(obj);\n  assert((&ptr[ptr_idx]) != 0);\n  assert(binn_object_read(ptr, 0, &type, &size) == 0);\n  assert(binn_object_read(ptr, \"\", &type, &size) == 0);\n  assert(binn_object_read(ptr, \"test\", &type, &size) == 0);\n  assert(binn_list_add(list, 0x61, &i, 0) == 1);\n  assert(binn_map_set(map, 5501, 0x61, &i, 0) == 1);\n  assert(binn_map_set(map, 5501, 0x61, &i, 0) == 0);\n  assert(binn_object_set(obj, \"test\", 0x61, &i, 0) == 1);\n  assert(binn_object_set(obj, \"test\", 0x61, &i, 0) == 0);\n  vbyte = 255;\n  vint16 = -32000;\n  vuint16 = 65000;\n  vint32 = -65000000;\n  vuint32 = 65000000;\n  vint64 = -6500000000000000;\n  vuint64 = 6500000000000000;\n  blobsize = 150;\n  pblob_idx = malloc(blobsize);\n  assert((&pblob[pblob_idx]) != 0);\n  memset(pblob, 55, blobsize);\n  assert(binn_list_add(list, 0x00, 0, 0) == 1);\n  assert(binn_list_add(list, 0x20, &vbyte, 0) == 1);\n  assert(binn_list_add(list, 0x41, &vint16, 0) == 1);\n  assert(binn_list_add(list, 0x40, &vuint16, 0) == 1);\n  assert(binn_list_add(list, 0x61, &vint32, 0) == 1);\n  assert(binn_list_add(list, 0x60, &vuint32, 0) == 1);\n  assert(binn_list_add(list, 0x81, &vint64, 0) == 1);\n  assert(binn_list_add(list, 0x80, &vuint64, 0) == 1);\n  assert(binn_list_add(list, 0xA0, \"this is the string\", 0) == 1);\n  assert(binn_list_add(list, 0xC0, pblob, blobsize) == 1);\n  assert(binn_map_set(map, 99000, 0x00, 0, 0) == 1);\n  assert(binn_map_set(map, 99001, 0x20, &vbyte, 0) == 1);\n  assert(binn_map_set(map, 99002, 0x41, &vint16, 0) == 1);\n  assert(binn_map_set(map, 99003, 0x40, &vuint16, 0) == 1);\n  assert(binn_map_set(map, 99004, 0x61, &vint32, 0) == 1);\n  assert(binn_map_set(map, 99005, 0x60, &vuint32, 0) == 1);\n  assert(binn_map_set(map, 99006, 0x81, &vint64, 0) == 1);\n  assert(binn_map_set(map, 99007, 0x80, &vuint64, 0) == 1);\n  assert(binn_map_set(map, 99008, 0xA0, \"this is the string\", 0) == 1);\n  assert(binn_map_set(map, 99009, 0xC0, pblob, blobsize) == 1);\n  assert(binn_object_set(obj, \"key0\", 0x00, 0, 0) == 1);\n  assert(binn_object_set(obj, \"key1\", 0x20, &vbyte, 0) == 1);\n  assert(binn_object_set(obj, \"key2\", 0x41, &vint16, 0) == 1);\n  assert(binn_object_set(obj, \"key3\", 0x40, &vuint16, 0) == 1);\n  assert(binn_object_set(obj, \"key4\", 0x61, &vint32, 0) == 1);\n  assert(binn_object_set(obj, \"key5\", 0x60, &vuint32, 0) == 1);\n  assert(binn_object_set(obj, \"key6\", 0x81, &vint64, 0) == 1);\n  assert(binn_object_set(obj, \"key7\", 0x80, &vuint64, 0) == 1);\n  assert(binn_object_set(obj, \"key8\", 0xA0, \"this is the string\", 0) == 1);\n  assert(binn_object_set(obj, \"key9\", 0xC0, pblob, blobsize) == 1);\n  assert(binn_list_add(list, 0xC0, ptr, 0) == 1);\n  assert(binn_list_add(list, 0xA0, \"\", 0) == 1);\n  assert(binn_list_add(list, 0xA0, \"after the empty items\", 0) == 1);\n  assert(binn_list_add(obj1, 0x61, &i, 0) == 0);\n  assert(binn_map_set(obj1, 55001, 0x61, &i, 0) == 0);\n  assert(binn_object_set(obj1, \"test\", 0x60, &vuint32, 0) == 1);\n  assert(binn_object_set(obj1, \"test\", 0x60, &vuint32, 0) == 0);\n  assert(binn_object_set(obj1, \"key1\", 0xA0, \"this is the value\", 0) == 1);\n  assert(binn_object_set(obj1, \"key2\", 0xA0, \"the second value\", 0) == 1);\n  ptr_idx = malloc(fix_size);\n  assert((&ptr[ptr_idx]) != 0);\n  p2_idx = &ptr[ptr_idx];\n  for (i = 0; i < (fix_size - 1); i += 1)\n  {\n    p2[p2_idx] = 'A';\n    p2_idx += 1;\n  }\n\n  p2[p2_idx] = '\\0';\n  assert(strlen(ptr) == (fix_size - 1));\n  assert(binn_object_set(obj1, \"v2\", 0xA0, ptr, 0) == 0);\n  assert(binn_object_set(obj, \"v2\", 0xA0, ptr, 0) == 1);\n  assert(binn_object_set(obj, \"Key00\", 0xA0, \"after the big string\", 0) == 1);\n  free(ptr);\n  ptr_idx = 0;\n  assert(binn_object_set(obj, \"list\", 0xE0, binn_ptr(list), binn_size(list)) == 1);\n  assert(binn_object_set(obj, \"Key10\", 0xA0, \"after the list\", 0) == 1);\n  ptr_idx = binn_ptr(map);\n  assert((&ptr[ptr_idx]) != 0);\n  assert(binn_map_get_pair(ptr, -1, &id, &value) == 0);\n  assert(binn_map_get_pair(ptr, 0, &id, &value) == 0);\n  assert(binn_map_get_pair(ptr, 1, &id, &value) == 1);\n  assert(id == 5501);\n  assert(binn_map_get_pair(ptr, 2, &id, &value) == 1);\n  assert(id == 99000);\n  assert(binn_map_get_pair(ptr, 3, &id, &value) == 1);\n  assert(id == 99001);\n  assert(binn_map_get_pair(ptr, 10, &id, &value) == 1);\n  assert(id == 99008);\n  assert(binn_map_get_pair(ptr, 11, &id, &value) == 1);\n  assert(id == 99009);\n  ptr_idx = binn_ptr(obj);\n  assert((&ptr[ptr_idx]) != 0);\n  assert(binn_object_get_pair(ptr, -1, key, &value) == 0);\n  assert(binn_object_get_pair(ptr, 0, key, &value) == 0);\n  assert(binn_object_get_pair(ptr, 1, key, &value) == 1);\n  assert(strcmp(key, \"test\") == 0);\n  assert(binn_object_get_pair(ptr, 2, key, &value) == 1);\n  assert(strcmp(key, \"key0\") == 0);\n  assert(binn_object_get_pair(ptr, 3, key, &value) == 1);\n  assert(strcmp(key, \"key1\") == 0);\n  assert(binn_object_get_pair(ptr, 10, key, &value) == 1);\n  assert(strcmp(key, \"key8\") == 0);\n  assert(binn_object_get_pair(ptr, 11, key, &value) == 1);\n  assert(strcmp(key, \"key9\") == 0);\n  ptr_idx = binn_ptr(obj1);\n  assert((&ptr[ptr_idx]) != 0);\n  type = 0;\n  size = 0;\n  pstr_idx = binn_object_read(ptr, \"key1\", &type, &size);\n  assert((&pstr[pstr_idx]) != 0);\n  assert(type == 0xA0);\n  assert(size > 0);\n  assert(strcmp(pstr, \"this is the value\") == 0);\n  type = 0;\n  size = 0;\n  pstr_idx = binn_object_read(ptr, \"key2\", &type, &size);\n  assert((&pstr[pstr_idx]) != 0);\n  assert(type == 0xA0);\n  assert(size > 0);\n  assert(strcmp(pstr, \"the second value\") == 0);\n  type = 0;\n  size = 0;\n  pint32_idx = binn_object_read(ptr, \"test\", &type, &size);\n  assert((&pint32[pint32_idx]) != 0);\n  assert(type == 0x60);\n  assert(pint32[pint32_idx] == vuint32);\n  ptr_idx = binn_ptr(list);\n  assert((&ptr[ptr_idx]) != 0);\n  type = 0;\n  size = 0;\n  pstr_idx = binn_list_read(ptr, 2, &type, &size);\n  assert((&pstr[pstr_idx]) != 0);\n  assert(type == 0x00);\n  type = 0;\n  size = 0;\n  p2_idx = binn_list_read(ptr, 3, &type, &size);\n  assert((&p2[p2_idx]) != 0);\n  assert(type == 0x20);\n  assert(p2[p2_idx] == vbyte);\n  type = 0;\n  size = 0;\n  pint16_idx = binn_list_read(ptr, 4, &type, &size);\n  assert((&pint16[pint16_idx]) != 0);\n  assert(type == 0x41);\n  assert(pint16[pint16_idx] == vint16);\n  type = 0;\n  size = 0;\n  puint16_idx = binn_list_read(ptr, 5, &type, &size);\n  assert((&puint16[puint16_idx]) != 0);\n  assert(type == 0x40);\n  assert(puint16[puint16_idx] == vuint16);\n  type = 0;\n  size = 0;\n  pint32_idx = binn_list_read(ptr, 6, &type, &size);\n  assert((&pint32[pint32_idx]) != 0);\n  assert(type == 0x61);\n  assert(pint32[pint32_idx] == vint32);\n  type = 0;\n  size = 0;\n  pint32_idx = binn_list_read(ptr, 6, &type, &size);\n  assert((&pint32[pint32_idx]) != 0);\n  assert(type == 0x61);\n  assert(pint32[pint32_idx] == vint32);\n  type = 0;\n  size = 0;\n  puint32_idx = binn_list_read(ptr, 7, &type, &size);\n  assert((&puint32[puint32_idx]) != 0);\n  assert(type == 0x60);\n  assert(puint32[puint32_idx] == vuint32);\n  type = 0;\n  size = 0;\n  pint64_idx = binn_list_read(ptr, 8, &type, &size);\n  assert((&pint64[pint64_idx]) != 0);\n  assert(type == 0x81);\n  assert(pint64[pint64_idx] == vint64);\n  type = 0;\n  size = 0;\n  pint64_idx = binn_list_read(ptr, 8, &type, &size);\n  assert((&pint64[pint64_idx]) != 0);\n  assert(type == 0x81);\n  assert(pint64[pint64_idx] == vint64);\n  type = 0;\n  size = 0;\n  puint64_idx = binn_list_read(ptr, 9, &type, &size);\n  assert((&puint64[puint64_idx]) != 0);\n  assert(type == 0x80);\n  assert(puint64[puint64_idx] == vuint64);\n  type = 0;\n  size = 0;\n  pstr_idx = binn_list_read(ptr, 10, &type, &size);\n  assert((&pstr[pstr_idx]) != 0);\n  assert(type == 0xA0);\n  assert(size > 0);\n  assert(strcmp(pstr, \"this is the string\") == 0);\n  type = 0;\n  size = 0;\n  p2_idx = binn_list_read(ptr, 11, &type, &size);\n  assert((&p2[p2_idx]) != 0);\n  assert(type == 0xC0);\n  assert(size == blobsize);\n  assert(memcmp(p2, pblob, blobsize) == 0);\n  ptr_idx = binn_ptr(map);\n  assert((&ptr[ptr_idx]) != 0);\n  type = 0;\n  size = 0;\n  pstr_idx = binn_map_read(ptr, 99000, &type, &size);\n  assert((&pstr[pstr_idx]) != 0);\n  assert(type == 0x00);\n  type = 0;\n  size = 0;\n  p2_idx = binn_map_read(ptr, 99001, &type, &size);\n  assert((&p2[p2_idx]) != 0);\n  assert(type == 0x20);\n  assert(p2[p2_idx] == vbyte);\n  type = 0;\n  size = 0;\n  pint16_idx = binn_map_read(ptr, 99002, &type, &size);\n  assert((&pint16[pint16_idx]) != 0);\n  assert(type == 0x41);\n  assert(pint16[pint16_idx] == vint16);\n  type = 0;\n  size = 0;\n  puint16_idx = binn_map_read(ptr, 99003, &type, &size);\n  assert((&puint16[puint16_idx]) != 0);\n  assert(type == 0x40);\n  assert(puint16[puint16_idx] == vuint16);\n  type = 0;\n  size = 0;\n  pint32_idx = binn_map_read(ptr, 99004, &type, &size);\n  assert((&pint32[pint32_idx]) != 0);\n  assert(type == 0x61);\n  assert(pint32[pint32_idx] == vint32);\n  type = 0;\n  size = 0;\n  pint32_idx = binn_map_read(ptr, 99004, &type, &size);\n  assert((&pint32[pint32_idx]) != 0);\n  assert(type == 0x61);\n  assert(pint32[pint32_idx] == vint32);\n  type = 0;\n  size = 0;\n  puint32_idx = binn_map_read(ptr, 99005, &type, &size);\n  assert((&puint32[puint32_idx]) != 0);\n  assert(type == 0x60);\n  assert(puint32[puint32_idx] == vuint32);\n  type = 0;\n  size = 0;\n  pint64_idx = binn_map_read(ptr, 99006, &type, &size);\n  assert((&pint64[pint64_idx]) != 0);\n  assert(type == 0x81);\n  assert(pint64[pint64_idx] == vint64);\n  type = 0;\n  size = 0;\n  pint64_idx = binn_map_read(ptr, 99006, &type, &size);\n  assert((&pint64[pint64_idx]) != 0);\n  assert(type == 0x81);\n  assert(pint64[pint64_idx] == vint64);\n  type = 0;\n  size = 0;\n  puint64_idx = binn_map_read(ptr, 99007, &type, &size);\n  assert((&puint64[puint64_idx]) != 0);\n  assert(type == 0x80);\n  assert(puint64[puint64_idx] == vuint64);\n  type = 0;\n  size = 0;\n  pstr_idx = binn_map_read(ptr, 99008, &type, &size);\n  assert((&pstr[pstr_idx]) != 0);\n  assert(type == 0xA0);\n  assert(size > 0);\n  assert(strcmp(pstr, \"this is the string\") == 0);\n  type = 0;\n  size = 0;\n  p2_idx = binn_map_read(ptr, 99009, &type, &size);\n  assert((&p2[p2_idx]) != 0);\n  assert(type == 0xC0);\n  assert(size == blobsize);\n  assert(memcmp(p2, pblob, blobsize) == 0);\n  ptr_idx = binn_ptr(obj);\n  assert((&ptr[ptr_idx]) != 0);\n  type = 0;\n  size = 0;\n  pstr_idx = binn_object_read(ptr, \"key0\", &type, &size);\n  assert((&pstr[pstr_idx]) != 0);\n  assert(type == 0x00);\n  type = 0;\n  size = 0;\n  p2_idx = binn_object_read(ptr, \"key1\", &type, &size);\n  assert((&p2[p2_idx]) != 0);\n  assert(type == 0x20);\n  assert(p2[p2_idx] == vbyte);\n  type = 0;\n  size = 0;\n  pint16_idx = binn_object_read(ptr, \"key2\", &type, &size);\n  assert((&pint16[pint16_idx]) != 0);\n  assert(type == 0x41);\n  assert(pint16[pint16_idx] == vint16);\n  type = 0;\n  size = 0;\n  puint16_idx = binn_object_read(ptr, \"key3\", &type, &size);\n  assert((&puint16[puint16_idx]) != 0);\n  assert(type == 0x40);\n  assert(puint16[puint16_idx] == vuint16);\n  type = 0;\n  size = 0;\n  pint32_idx = binn_object_read(ptr, \"key4\", &type, &size);\n  assert((&pint32[pint32_idx]) != 0);\n  assert(type == 0x61);\n  assert(pint32[pint32_idx] == vint32);\n  type = 0;\n  size = 0;\n  pint32_idx = binn_object_read(ptr, \"key4\", &type, &size);\n  assert((&pint32[pint32_idx]) != 0);\n  assert(type == 0x61);\n  assert(pint32[pint32_idx] == vint32);\n  type = 0;\n  size = 0;\n  puint32_idx = binn_object_read(ptr, \"key5\", &type, &size);\n  assert((&puint32[puint32_idx]) != 0);\n  assert(type == 0x60);\n  assert(puint32[puint32_idx] == vuint32);\n  type = 0;\n  size = 0;\n  pint64_idx = binn_object_read(ptr, \"key6\", &type, &size);\n  assert((&pint64[pint64_idx]) != 0);\n  assert(type == 0x81);\n  assert(pint64[pint64_idx] == vint64);\n  type = 0;\n  size = 0;\n  pint64_idx = binn_object_read(ptr, \"key6\", &type, &size);\n  assert((&pint64[pint64_idx]) != 0);\n  assert(type == 0x81);\n  assert(pint64[pint64_idx] == vint64);\n  type = 0;\n  size = 0;\n  puint64_idx = binn_object_read(ptr, \"key7\", &type, &size);\n  assert((&puint64[puint64_idx]) != 0);\n  assert(type == 0x80);\n  assert(puint64[puint64_idx] == vuint64);\n  type = 0;\n  size = 0;\n  pstr_idx = binn_object_read(ptr, \"key8\", &type, &size);\n  assert((&pstr[pstr_idx]) != 0);\n  assert(type == 0xA0);\n  assert(size > 0);\n  assert(strcmp(pstr, \"this is the string\") == 0);\n  type = 0;\n  size = 0;\n  p2_idx = binn_object_read(ptr, \"key9\", &type, &size);\n  assert((&p2[p2_idx]) != 0);\n  assert(type == 0xC0);\n  assert(size == blobsize);\n  assert(memcmp(p2, pblob, blobsize) == 0);\n  type = 0;\n  size = 0;\n  p2_idx = binn_object_read(ptr, \"v2\", &type, &size);\n  assert((&p2[p2_idx]) != 0);\n  assert(type == 0xA0);\n  assert(size == (fix_size - 1));\n  assert(strlen(p2) == (fix_size - 1));\n  assert(p2[0 + p2_idx] == 'A');\n  assert(p2[1 + p2_idx] == 'A');\n  assert(p2[500 + p2_idx] == 'A');\n  assert(p2[(fix_size - 1) + p2_idx] == 0);\n  type = 0;\n  size = 0;\n  pstr_idx = binn_object_read(ptr, \"key00\", &type, &size);\n  assert((&pstr[pstr_idx]) != 0);\n  assert(type == 0xA0);\n  assert(size > 0);\n  assert(strcmp(pstr, \"after the big string\") == 0);\n  type = 0;\n  size = 0;\n  p2_idx = binn_object_read(ptr, \"list\", &type, &size);\n  assert((&p2[p2_idx]) != 0);\n  assert(type == 0xE0);\n  assert(size > 0);\n  type = 0;\n  size = 0;\n  puint64_idx = binn_list_read(p2, 9, &type, &size);\n  assert((&puint64[puint64_idx]) != 0);\n  assert(type == 0x80);\n  assert(puint64[puint64_idx] == vuint64);\n  type = 0;\n  size = 0;\n  pstr_idx = binn_list_read(p2, 10, &type, &size);\n  assert((&pstr[pstr_idx]) != 0);\n  assert(type == 0xA0);\n  assert(size > 0);\n  assert(strcmp(pstr, \"this is the string\") == 0);\n  type = 0;\n  size = 0;\n  pstr_idx = binn_list_read(p2, 12, &type, &size);\n  assert((&pstr[pstr_idx]) != 0);\n  assert(type == 0xC0);\n  assert(size == 0);\n  type = 0;\n  size = 0;\n  pstr_idx = binn_list_read(p2, 13, &type, &size);\n  assert((&pstr[pstr_idx]) != 0);\n  assert(type == 0xA0);\n  assert(size == 0);\n  assert(strcmp(pstr, \"\") == 0);\n  type = 0;\n  size = 0;\n  pstr_idx = binn_list_read(p2, 14, &type, &size);\n  assert((&pstr[pstr_idx]) != 0);\n  assert(type == 0xA0);\n  assert(size > 0);\n  assert(strcmp(pstr, \"after the empty items\") == 0);\n  type = 0;\n  size = 0;\n  pstr_idx = binn_object_read(ptr, \"key10\", &type, &size);\n  assert((&pstr[pstr_idx]) != 0);\n  assert(type == 0xA0);\n  assert(size > 0);\n  assert(strcmp(pstr, \"after the list\") == 0);\n  assert(binn_ptr(0) == 0);\n  assert(IsValidBinnHeader(0) == 0);\n  ptr_idx = binn_ptr(obj);\n  assert((&ptr[ptr_idx]) != 0);\n  size = 0;\n  assert(IsValidBinnHeader(ptr, &type, &count, &size, &header_size) == 1);\n  assert(type == 0xE2);\n  assert(count == 15);\n  assert((header_size >= 3) && (header_size <= 9));\n  assert(size > 3);\n  assert(size == obj->size);\n  assert(binn_is_valid(ptr, &type, &count, &size) == 1);\n  assert(type == 0xE2);\n  assert(count == 15);\n  assert(size > 3);\n  assert(size == obj->size);\n  ptr_idx = binn_ptr(map);\n  assert((&ptr[ptr_idx]) != 0);\n  size = 0;\n  assert(IsValidBinnHeader(ptr, &type, &count, &size, &header_size) == 1);\n  assert(type == 0xE1);\n  assert(count == 11);\n  assert((header_size >= 3) && (header_size <= 9));\n  assert(size > 3);\n  assert(size == map->size);\n  assert(binn_is_valid(ptr, &type, &count, &size) == 1);\n  assert(type == 0xE1);\n  assert(count == 11);\n  assert(size > 3);\n  assert(size == map->size);\n  ptr_idx = binn_ptr(list);\n  assert((&ptr[ptr_idx]) != 0);\n  size = 0;\n  assert(IsValidBinnHeader(ptr, &type, &count, &size, &header_size) == 1);\n  assert(type == 0xE0);\n  assert(count == 14);\n  assert((header_size >= 3) && (header_size <= 9));\n  assert(size > 3);\n  assert(size == list->size);\n  assert(binn_is_valid(ptr, &type, &count, &size) == 1);\n  assert(type == 0xE0);\n  assert(count == 14);\n  assert((header_size >= 3) && (header_size <= 9));\n  assert(size > 3);\n  assert(size == list->size);\n  assert(binn_size(0) == 0);\n  assert(binn_size(list) == list->size);\n  assert(binn_size(map) == map->size);\n  assert(binn_size(obj) == obj->size);\n  assert(binn_size(obj1) == obj1->size);\n  binn_free(list);\n  binn_free(map);\n  binn_free(obj);\n  printf(\"OK\\n\");\n}\n\n",
            "calle": [
                "IsValidBinnHeader",
                "assert",
                "binn_free",
                "binn_is_valid",
                "binn_list",
                "binn_list_add",
                "binn_list_read",
                "binn_map",
                "binn_map_get_pair",
                "binn_map_read",
                "binn_map_set",
                "binn_new",
                "binn_object",
                "binn_object_get_pair",
                "binn_object_read",
                "binn_object_set",
                "binn_ptr",
                "binn_size",
                "free",
                "malloc",
                "memcmp",
                "memset",
                "printf",
                "strcmp",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fix_size",
                        "type": "const int",
                        "definition": [
                            "static const int fix_size = 512"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "header_size",
                        "type": "int",
                        "definition": [
                            "int header_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blobsize",
                        "type": "int",
                        "definition": [
                            "int blobsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "char *",
                        "definition": [
                            "char *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ptr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p2",
                        "type": "char *",
                        "definition": [
                            "char *p2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p2_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p2_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pstr",
                        "type": "char *",
                        "definition": [
                            "char *pstr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pstr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pstr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "char [256]",
                        "definition": [
                            "char key[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list",
                        "type": "binn *",
                        "definition": [
                            "binn *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int list_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "map",
                        "type": "binn *",
                        "definition": [
                            "binn *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "map_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int map_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj",
                        "type": "binn *",
                        "definition": [
                            "binn *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int obj_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj1",
                        "type": "binn *",
                        "definition": [
                            "binn *obj1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj1_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int obj1_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn",
                        "definition": [
                            "binn value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vbyte",
                        "type": "char",
                        "definition": [
                            "char vbyte"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pblob",
                        "type": "char *",
                        "definition": [
                            "char *pblob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pblob_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pblob_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vint16",
                        "type": "signed short",
                        "definition": [
                            "signed short vint16"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pint16",
                        "type": "signed short *",
                        "definition": [
                            "signed short *pint16"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pint16_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pint16_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vuint16",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short vuint16"
                        ]
                    },
                    {
                        "path": null,
                        "name": "puint16",
                        "type": "unsigned short *",
                        "definition": [
                            "unsigned short *puint16"
                        ]
                    },
                    {
                        "path": null,
                        "name": "puint16_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int puint16_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vint32",
                        "type": "signed int",
                        "definition": [
                            "signed int vint32"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pint32",
                        "type": "signed int *",
                        "definition": [
                            "signed int *pint32"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pint32_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pint32_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vuint32",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int vuint32"
                        ]
                    },
                    {
                        "path": null,
                        "name": "puint32",
                        "type": "unsigned int *",
                        "definition": [
                            "unsigned int *puint32"
                        ]
                    },
                    {
                        "path": null,
                        "name": "puint32_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int puint32_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vint64",
                        "type": "signed long long int",
                        "definition": [
                            "signed long long int vint64"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pint64",
                        "type": "signed long long int *",
                        "definition": [
                            "signed long long int *pint64"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pint64_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pint64_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vuint64",
                        "type": "unsigned long long int",
                        "definition": [
                            "unsigned long long int vuint64"
                        ]
                    },
                    {
                        "path": null,
                        "name": "puint64",
                        "type": "unsigned long long int *",
                        "definition": [
                            "unsigned long long int *puint64"
                        ]
                    },
                    {
                        "path": null,
                        "name": "puint64_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int puint64_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_invalid_binn",
            "header": "",
            "params": [],
            "definition": "void test_invalid_binn()\n{\n  char buffers[][20] = {{0xE0}, {0xE0, 0x7E}, {0xE0, 0x7E, 0x7F}, {0xE0, 0x7E, 0x7F, 0x12}, {0xE0, 0x7E, 0x7F, 0x12, 0x34}, {0xE0, 0x7E, 0x7F, 0x12, 0x34, 0x01}, {0xE0, 0x7E, 0x7F, 0x12, 0x34, 0x7F}, {0xE0, 0x7E, 0x7F, 0x12, 0x34, 0xFF}, {0xE0, 0x7E, 0x7F, 0x12, 0x34, 0xFF, 0xFF}, {0xE0, 0x7E, 0x7F, 0x12, 0x34, 0xFF, 0xFF, 0xFF}, {0xE0, 0x7E, 0x7F, 0x12, 0x34, 0xFF, 0xFF, 0xFF, 0xFF}, {0xE0, 0x7E, 0x7F, 0x12, 0x34, 0xFF, 0xFF, 0xFF, 0xFF, 0x01}, {0xE0, 0x7E, 0x7F, 0x12, 0x34, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, {0xE0, 0x7E, 0xFF}, {0xE0, 0x7E, 0xFF, 0x12}, {0xE0, 0x7E, 0xFF, 0x12, 0x34}, {0xE0, 0x7E, 0xFF, 0x12, 0x34, 0x01}, {0xE0, 0x7E, 0xFF, 0x12, 0x34, 0x7F}, {0xE0, 0x7E, 0xFF, 0x12, 0x34, 0xFF}, {0xE0, 0x7E, 0xFF, 0x12, 0x34, 0xFF, 0xFF}, {0xE0, 0x7E, 0xFF, 0x12, 0x34, 0xFF, 0xFF, 0xFF}, {0xE0, 0x7E, 0xFF, 0x12, 0x34, 0xFF, 0xFF, 0xFF, 0xFF}, {0xE0, 0x7E, 0xFF, 0x12, 0x34, 0xFF, 0xFF, 0xFF, 0xFF, 0x01}, {0xE0, 0x7E, 0xFF, 0x12, 0x34, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, {0xE0, 0x8E}, {0xE0, 0x8E, 0xFF}, {0xE0, 0x8E, 0xFF, 0x12}, {0xE0, 0x8E, 0xFF, 0x12, 0x34}, {0xE0, 0x8E, 0xFF, 0x12, 0x34, 0x01}, {0xE0, 0x8E, 0xFF, 0x12, 0x34, 0x7F}, {0xE0, 0x8E, 0xFF, 0x12, 0x34, 0xFF}, {0xE0, 0x8E, 0xFF, 0x12, 0x34, 0xFF, 0xFF}, {0xE0, 0x8E, 0xFF, 0x12, 0x34, 0xFF, 0xFF, 0xFF}, {0xE0, 0x8E, 0xFF, 0x12, 0x34, 0xFF, 0xFF, 0xFF, 0xFF}, {0xE0, 0x8E, 0xFF, 0x12, 0x34, 0xFF, 0xFF, 0xFF, 0xFF, 0x01}, {0xE0, 0x8E, 0xFF, 0x12, 0x34, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}};\n  int count;\n  int size;\n  int i;\n  char *ptr;\n  unsigned int ptr_idx = 0;\n  puts(\"testing invalid binn buffers...\");\n  count = (sizeof(buffers)) / (sizeof(buffers[0]));\n  for (i = 0; i < count; i += 1)\n  {\n    ptr_idx = buffers[i];\n    size = strlen(ptr);\n    printf(\"checking invalid binn #%d   size: %d bytes\\n\", i, size);\n    assert(binn_is_valid_ex(ptr, 0, 0, &size) == 0);\n  }\n\n  puts(\"OK\");\n}\n\n",
            "calle": [
                "assert",
                "binn_is_valid_ex",
                "printf",
                "puts",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buffers",
                        "type": "char [][20]",
                        "definition": [
                            "char buffers[][20] = {{0xE0}, {0xE0, 0x7E}, {0xE0, 0x7E, 0x7F}, {0xE0, 0x7E, 0x7F, 0x12}, {0xE0, 0x7E, 0x7F, 0x12, 0x34}, {0xE0, 0x7E, 0x7F, 0x12, 0x34, 0x01}, {0xE0, 0x7E, 0x7F, 0x12, 0x34, 0x7F}, {0xE0, 0x7E, 0x7F, 0x12, 0x34, 0xFF}, {0xE0, 0x7E, 0x7F, 0x12, 0x34, 0xFF, 0xFF}, {0xE0, 0x7E, 0x7F, 0x12, 0x34, 0xFF, 0xFF, 0xFF}, {0xE0, 0x7E, 0x7F, 0x12, 0x34, 0xFF, 0xFF, 0xFF, 0xFF}, {0xE0, 0x7E, 0x7F, 0x12, 0x34, 0xFF, 0xFF, 0xFF, 0xFF, 0x01}, {0xE0, 0x7E, 0x7F, 0x12, 0x34, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, {0xE0, 0x7E, 0xFF}, {0xE0, 0x7E, 0xFF, 0x12}, {0xE0, 0x7E, 0xFF, 0x12, 0x34}, {0xE0, 0x7E, 0xFF, 0x12, 0x34, 0x01}, {0xE0, 0x7E, 0xFF, 0x12, 0x34, 0x7F}, {0xE0, 0x7E, 0xFF, 0x12, 0x34, 0xFF}, {0xE0, 0x7E, 0xFF, 0x12, 0x34, 0xFF, 0xFF}, {0xE0, 0x7E, 0xFF, 0x12, 0x34, 0xFF, 0xFF, 0xFF}, {0xE0, 0x7E, 0xFF, 0x12, 0x34, 0xFF, 0xFF, 0xFF, 0xFF}, {0xE0, 0x7E, 0xFF, 0x12, 0x34, 0xFF, 0xFF, 0xFF, 0xFF, 0x01}, {0xE0, 0x7E, 0xFF, 0x12, 0x34, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, {0xE0, 0x8E}, {0xE0, 0x8E, 0xFF}, {0xE0, 0x8E, 0xFF, 0x12}, {0xE0, 0x8E, 0xFF, 0x12, 0x34}, {0xE0, 0x8E, 0xFF, 0x12, 0x34, 0x01}, {0xE0, 0x8E, 0xFF, 0x12, 0x34, 0x7F}, {0xE0, 0x8E, 0xFF, 0x12, 0x34, 0xFF}, {0xE0, 0x8E, 0xFF, 0x12, 0x34, 0xFF, 0xFF}, {0xE0, 0x8E, 0xFF, 0x12, 0x34, 0xFF, 0xFF, 0xFF}, {0xE0, 0x8E, 0xFF, 0x12, 0x34, 0xFF, 0xFF, 0xFF, 0xFF}, {0xE0, 0x8E, 0xFF, 0x12, 0x34, 0xFF, 0xFF, 0xFF, 0xFF, 0x01}, {0xE0, 0x8E, 0xFF, 0x12, 0x34, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "char *",
                        "definition": [
                            "char *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ptr_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#test_binn",
            "header": "",
            "params": [],
            "definition": "int main()\n{\n  puts(\"\\nStarting the unit/regression tests...\\n\");\n  printf(\"sizeof(binn) = %d\\n\\n\", sizeof(binn));\n  test_binn_version();\n  test_endianess();\n  test_int64();\n  test_floating_point_numbers();\n  test1();\n  test2(0);\n  test2(1);\n  test_binn2();\n  test3();\n  test_invalid_binn();\n  puts(\"\\nAll tests pass! :)\\n\");\n  return 0;\n}\n\n",
            "calle": [
                "printf",
                "puts",
                "test1",
                "test2",
                "test3",
                "test_binn2",
                "test_binn_version",
                "test_endianess",
                "test_floating_point_numbers",
                "test_int64",
                "test_invalid_binn"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "stripchr",
            "header": "",
            "params": [
                "char *mainstr",
                "int separator"
            ],
            "definition": "char *stripchr(char *mainstr, int separator)\n{\n  char *ptr;\n  unsigned int ptr_idx = 0;\n  if (mainstr == 0)\n  {\n    return 0;\n  }\n  ptr_idx = strchr(mainstr, separator);\n  if ((&ptr[ptr_idx]) == 0)\n  {\n    return 0;\n  }\n  ptr[0 + ptr_idx] = '\\0';\n  ptr_idx += 1;\n  return ptr;\n}\n\n",
            "calle": [
                "strchr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "mainstr",
                        "type": "char *",
                        "definition": [
                            "char *mainstr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "separator",
                        "type": "int",
                        "definition": [
                            "int separator"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "char *",
                        "definition": [
                            "char *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ptr_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "str_to_date",
            "header": "",
            "params": [
                "char *datestr"
            ],
            "definition": "unsigned short str_to_date(char *datestr)\n{\n  unsigned int datestr_idx = 0;\n  unsigned short date;\n  int day;\n  int month;\n  int year;\n  char *next;\n  unsigned int next_idx = 0;\n  if ((&datestr[datestr_idx]) == 0)\n  {\n    return 0;\n  }\n  strcpy(tmp, datestr);\n  datestr_idx = tmp;\n  next_idx = stripchr(datestr, '-');\n  year = atoi(datestr) - 1900;\n  datestr_idx = &next[next_idx];\n  next_idx = stripchr(datestr, '-');\n  month = atoi(datestr);\n  day = atoi(next);\n  date = ((day << 11) | (month << 7)) | year;\n  return date;\n}\n\n",
            "calle": [
                "atoi",
                "strcpy",
                "stripchr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "datestr",
                        "type": "char *",
                        "definition": [
                            "char *datestr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "datestr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int datestr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "date",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short date"
                        ]
                    },
                    {
                        "path": null,
                        "name": "day",
                        "type": "int",
                        "definition": [
                            "int day"
                        ]
                    },
                    {
                        "path": null,
                        "name": "month",
                        "type": "int",
                        "definition": [
                            "int month"
                        ]
                    },
                    {
                        "path": null,
                        "name": "year",
                        "type": "int",
                        "definition": [
                            "int year"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "char *",
                        "definition": [
                            "char *next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "date_to_str",
            "header": "",
            "params": [
                "unsigned short date"
            ],
            "definition": "char *date_to_str(unsigned short date)\n{\n  int day;\n  int month;\n  int year;\n  day = (date & 0xf800) >> 11;\n  month = (date & 0x0780) >> 7;\n  year = date & 0x007f;\n  sprintf(tmp, \"%.4d-%.2d-%.2d\", year + 1900, month, day);\n  return tmp;\n}\n\n",
            "calle": [
                "sprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "date",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short date"
                        ]
                    },
                    {
                        "path": null,
                        "name": "day",
                        "type": "int",
                        "definition": [
                            "int day"
                        ]
                    },
                    {
                        "path": null,
                        "name": "month",
                        "type": "int",
                        "definition": [
                            "int month"
                        ]
                    },
                    {
                        "path": null,
                        "name": "year",
                        "type": "int",
                        "definition": [
                            "int year"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "str_to_currency",
            "header": "",
            "params": [
                "char *str"
            ],
            "definition": "int64 str_to_currency(char *str)\n{\n  unsigned int str_idx = 0;\n  char *next;\n  unsigned int next_idx = 0;\n  int size;\n  int i;\n  if ((&str[str_idx]) == 0)\n  {\n    return 0;\n  }\n  strcpy(tmp, str);\n  str_idx = tmp;\n  next_idx = strchr(str, '.');\n  if (next)\n  {\n    size = strlen((&next[next_idx]) + 1);\n    memmove(next, (&next[next_idx]) + 1, size + 1);\n    if (size <= 4)\n    {\n      size = 4 - size;\n      for (i = 0; i < size; i += 1)\n        strcat(str, \"0\");\n\n    }\n    else\n    {\n      next[4 + next_idx] = 0;\n    }\n  }\n  else\n  {\n    strcat(str, \"0000\");\n  }\n  return atoi64(str);\n}\n\n",
            "calle": [
                "atoi64",
                "memmove",
                "strcat",
                "strchr",
                "strcpy",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str",
                        "type": "char *",
                        "definition": [
                            "char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "char *",
                        "definition": [
                            "char *next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "currency_to_str",
            "header": "",
            "params": [
                "int64 value"
            ],
            "definition": "char *currency_to_str(int64 value)\n{\n  char *str;\n  unsigned int str_idx = 0;\n  char *ptr;\n  unsigned int ptr_idx = 0;\n  int size;\n  int move;\n  int i;\n  i64toa(value, tmp, 10);\n  str_idx = tmp;\n  size = strlen(str);\n  if (size > 4)\n  {\n    ptr_idx = ((&str[str_idx]) + size) - 4;\n    memmove((&ptr[ptr_idx]) + 1, ptr, 4 + 1);\n    ptr[0 + ptr_idx] = '.';\n  }\n  else\n  {\n    move = (2 + 4) - size;\n    memmove((&str[str_idx]) + move, str, size + 1);\n    str[0 + str_idx] = '0';\n    str[1 + str_idx] = '.';\n    for (i = 2; i < move; i += 1)\n      str[i + str_idx] = '0';\n\n  }\n  return str;\n}\n\n",
            "calle": [
                "i64toa",
                "memmove",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "value",
                        "type": "int64",
                        "definition": [
                            "int64 value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "char *",
                        "definition": [
                            "char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "char *",
                        "definition": [
                            "char *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ptr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "move",
                        "type": "int",
                        "definition": [
                            "int move"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "float_to_currency",
            "header": "",
            "params": [
                "double value"
            ],
            "definition": "int64 float_to_currency(double value)\n{\n  char buf[128];\n  snprintf(buf, 127, \"%.4f\", value);\n  return str_to_currency(buf);\n}\n\n",
            "calle": [
                "snprintf",
                "str_to_currency"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "value",
                        "type": "double",
                        "definition": [
                            "double value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char [128]",
                        "definition": [
                            "char buf[128]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "currency_to_float",
            "header": "",
            "params": [
                "int64 value"
            ],
            "definition": "double currency_to_float(int64 value)\n{\n  currency_to_str(value);\n  return atof(tmp);\n}\n\n",
            "calle": [
                "atof",
                "currency_to_str"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "value",
                        "type": "int64",
                        "definition": [
                            "int64 value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "mul_currency",
            "header": "",
            "params": [
                "int64 value1",
                "int64 value2"
            ],
            "definition": "int64 mul_currency(int64 value1, int64 value2)\n{\n  return (value1 * value2) / 10000;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "value1",
                        "type": "int64",
                        "definition": [
                            "int64 value1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value2",
                        "type": "int64",
                        "definition": [
                            "int64 value2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "div_currency",
            "header": "",
            "params": [
                "int64 value1",
                "int64 value2"
            ],
            "definition": "int64 div_currency(int64 value1, int64 value2)\n{\n  return (value1 * 10000) / value2;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "value1",
                        "type": "int64",
                        "definition": [
                            "int64 value1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value2",
                        "type": "int64",
                        "definition": [
                            "int64 value2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_create_object_1",
            "header": "",
            "params": [
                "int *psize"
            ],
            "definition": "char *test_create_object_1(int *psize)\n{\n  binn *obj = 0;\n  unsigned int obj_idx = 0;\n  binn *list = 0;\n  unsigned int list_idx = 0;\n  printf(\"creating object 1...\\n\");\n  obj_idx = binn_object();\n  assert((&obj[obj_idx]) != 0);\n  vint32 = -12345;\n  assert(binn_object_set(obj, \"int32\", 0x61, &vint32, 0) == 1);\n  vint16 = -258;\n  assert(binn_object_set(obj, \"int16\", 0x41, &vint16, 0) == 1);\n  vint8 = -120;\n  assert(binn_object_set(obj, \"int8\", 0x21, &vint8, 0) == 1);\n  vint64 = -1234567890123;\n  assert(binn_object_set(obj, \"int64\", 0x81, &vint64, 0) == 1);\n  vuint32 = 123456;\n  assert(binn_object_set(obj, \"uint32\", 0x60, &vuint32, 0) == 1);\n  vuint16 = 60500;\n  assert(binn_object_set(obj, \"uint16\", 0x40, &vuint16, 0) == 1);\n  vuint8 = 250;\n  assert(binn_object_set(obj, \"uint8\", 0x20, &vuint8, 0) == 1);\n  vuint64 = 1234567890123;\n  assert(binn_object_set(obj, \"uint64\", 0x80, &vuint64, 0) == 1);\n  vfloat32 = -12.345;\n  assert(binn_object_set(obj, \"float32\", 0x62, &vfloat32, 0) == 1);\n  vfloat32 = -12.345;\n  assert(binn_object_set(obj, \"single\", 0x62, &vfloat32, 0) == 1);\n  vfloat64 = -123456.7895;\n  assert(binn_object_set(obj, \"float64\", 0x82, &vfloat64, 0) == 1);\n  vfloat64 = -123456.7895;\n  assert(binn_object_set(obj, \"double\", 0x82, &vfloat64, 0) == 1);\n  assert(binn_object_set(obj, \"str\", 0xA0, \"the value\", 0) == 1);\n  vint32 = 1;\n  assert(binn_object_set(obj, \"bool_true\", 0x80061, &vint32, 0) == 1);\n  vint32 = 0;\n  assert(binn_object_set(obj, \"bool_false\", 0x80061, &vint32, 0) == 1);\n  assert(binn_object_set(obj, \"null\", 0x00, 0, 0) == 1);\n  list_idx = binn_list();\n  assert((&list[list_idx]) != 0);\n  assert(binn_list_add(list, 0x00, 0, 0) == 1);\n  vint32 = 123;\n  assert(binn_list_add(list, 0x61, &vint32, 0) == 1);\n  assert(binn_list_add(list, 0xA0, \"this is a string\", 0) == 1);\n  assert(binn_object_set(obj, \"list\", 0xE0, binn_ptr(list), binn_size(list)) == 1);\n  binn_free(list);\n  list_idx = 0;\n  *psize = binn_size(obj);\n  return (char *) binn_ptr(obj);\n}\n\n",
            "calle": [
                "assert",
                "binn_free",
                "binn_list",
                "binn_list_add",
                "binn_object",
                "binn_object_set",
                "binn_ptr",
                "binn_size",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "psize",
                        "type": "int *",
                        "definition": [
                            "int *psize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj",
                        "type": "binn *",
                        "definition": [
                            "binn *obj = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int obj_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list",
                        "type": "binn *",
                        "definition": [
                            "binn *list = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int list_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vint32",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "vint16",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "vint8",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "vint64",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "vuint32",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "vuint16",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "vuint8",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "vuint64",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "vfloat32",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "vfloat64",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_create_object_2",
            "header": "",
            "params": [
                "int *psize"
            ],
            "definition": "char *test_create_object_2(int *psize)\n{\n  binn *obj = 0;\n  unsigned int obj_idx = 0;\n  binn *list = 0;\n  unsigned int list_idx = 0;\n  printf(\"creating object 2...\\n\");\n  obj_idx = binn_object();\n  assert((&obj[obj_idx]) != 0);\n  assert(binn_object_set_int32(obj, \"int32\", -12345) == 1);\n  assert(binn_object_set_int16(obj, \"int16\", -258) == 1);\n  assert(binn_object_set_int8(obj, \"int8\", -120) == 1);\n  assert(binn_object_set_int64(obj, \"int64\", -1234567890123) == 1);\n  assert(binn_object_set_uint32(obj, \"uint32\", 123456) == 1);\n  assert(binn_object_set_int16(obj, \"uint16\", 60500) == 1);\n  assert(binn_object_set_int8(obj, \"uint8\", 250) == 1);\n  assert(binn_object_set_uint64(obj, \"uint64\", 1234567890123) == 1);\n  assert(binn_object_set_float(obj, \"float32\", -12.345) == 1);\n  vfloat32 = -12.345;\n  assert(binn_object_set(obj, \"single\", 0x62, &vfloat32, 0) == 1);\n  assert(binn_object_set_double(obj, \"float64\", -123456.7895) == 1);\n  vfloat64 = -123456.7895;\n  assert(binn_object_set(obj, \"double\", 0x82, &vfloat64, 0) == 1);\n  assert(binn_object_set_str(obj, \"str\", \"the value\") == 1);\n  assert(binn_object_set_bool(obj, \"bool_true\", 1) == 1);\n  assert(binn_object_set_bool(obj, \"bool_false\", 0) == 1);\n  assert(binn_object_set_null(obj, \"null\") == 1);\n  list_idx = binn_list();\n  assert((&list[list_idx]) != 0);\n  assert(binn_list_add_null(list) == 1);\n  assert(binn_list_add_int32(list, 123) == 1);\n  assert(binn_list_add_str(list, \"this is a string\") == 1);\n  assert(binn_object_set_list(obj, \"list\", list) == 1);\n  binn_free(list);\n  list_idx = 0;\n  *psize = binn_size(obj);\n  return (char *) binn_ptr(obj);\n}\n\n",
            "calle": [
                "assert",
                "binn_free",
                "binn_list",
                "binn_list_add_int32",
                "binn_list_add_null",
                "binn_list_add_str",
                "binn_object",
                "binn_object_set",
                "binn_object_set_bool",
                "binn_object_set_double",
                "binn_object_set_float",
                "binn_object_set_int16",
                "binn_object_set_int32",
                "binn_object_set_int64",
                "binn_object_set_int8",
                "binn_object_set_list",
                "binn_object_set_null",
                "binn_object_set_str",
                "binn_object_set_uint32",
                "binn_object_set_uint64",
                "binn_ptr",
                "binn_size",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "psize",
                        "type": "int *",
                        "definition": [
                            "int *psize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj",
                        "type": "binn *",
                        "definition": [
                            "binn *obj = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int obj_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list",
                        "type": "binn *",
                        "definition": [
                            "binn *list = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int list_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vfloat32",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "vfloat64",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_binn_read",
            "header": "",
            "params": [
                "void *objptr"
            ],
            "definition": "void test_binn_read(void *objptr)\n{\n  void *listptr;\n  unsigned int listptr_idx = 0;\n  char *ptr;\n  unsigned int ptr_idx = 0;\n  binn value = {0};\n  printf(\"OK\\nreading:\\n\");\n  vint32 = 0;\n  assert(binn_object_get(objptr, \"int32\", 0x61, &vint32, 0) == 1);\n  printf(\"int32: %d\\n\", vint32);\n  assert(vint32 == (-12345));\n  vint16 = 0;\n  assert(binn_object_get(objptr, \"int16\", 0x41, &vint16, 0) == 1);\n  printf(\"int16: %d\\n\", vint16);\n  assert(vint16 == (-258));\n  vint8 = 0;\n  assert(binn_object_get(objptr, \"int8\", 0x21, &vint8, 0) == 1);\n  printf(\"int8: %d\\n\", vint8);\n  assert(vint8 == (-120));\n  vint64 = 0;\n  assert(binn_object_get(objptr, \"int64\", 0x81, &vint64, 0) == 1);\n  printf(\"int64: %lli\\n\", vint64);\n  assert(vint64 == (-1234567890123));\n  vuint32 = 0;\n  assert(binn_object_get(objptr, \"uint32\", 0x60, &vuint32, 0) == 1);\n  printf(\"uint32: %d\\n\", vuint32);\n  assert(vuint32 == 123456);\n  vuint16 = 0;\n  assert(binn_object_get(objptr, \"uint16\", 0x40, &vuint16, 0) == 1);\n  printf(\"uint16: %d\\n\", vuint16);\n  assert(vuint16 == 60500);\n  vuint8 = 0;\n  assert(binn_object_get(objptr, \"uint8\", 0x20, &vuint8, 0) == 1);\n  printf(\"uint8: %d\\n\", vuint8);\n  assert(vuint8 == 250);\n  vuint64 = 0;\n  assert(binn_object_get(objptr, \"uint64\", 0x80, &vuint64, 0) == 1);\n  printf(\"uint64: %llu\\n\", vuint64);\n  assert(vuint64 == 1234567890123);\n  vfloat32 = 0;\n  assert(binn_object_get(objptr, \"float32\", 0x62, &vfloat32, 0) == 1);\n  printf(\"float32: %f\\n\", vfloat32);\n  assert(AlmostEqualFloats(vfloat32, -12.345, 2) == 1);\n  vfloat64 = 0;\n  assert(binn_object_get(objptr, \"float64\", 0x82, &vfloat64, 0) == 1);\n  printf(\"float64: %f\\n\", vfloat64);\n  assert((vfloat64 - (-123456.7895)) < 0.01);\n  vfloat32 = 0;\n  assert(binn_object_get(objptr, \"single\", 0x62, &vfloat32, 0) == 1);\n  printf(\"single: %f\\n\", vfloat32);\n  assert(AlmostEqualFloats(vfloat32, -12.345, 2) == 1);\n  vfloat64 = 0;\n  assert(binn_object_get(objptr, \"double\", 0x82, &vfloat64, 0) == 1);\n  printf(\"double: %f\\n\", vfloat64);\n  assert((vfloat64 - (-123456.7895)) < 0.01);\n  ptr_idx = 0;\n  assert(binn_object_get(objptr, \"str\", 0xA0, &(&ptr[ptr_idx]), 0) == 1);\n  printf(\"ptr: (%p) '%s'\\n\", ptr, ptr);\n  assert(strcmp(ptr, \"the value\") == 0);\n  vint32 = 999;\n  assert(binn_object_get(objptr, \"bool_true\", 0x80061, &vint32, 0) == 1);\n  printf(\"bool true: %d\\n\", vint32);\n  assert(vint32 == 1);\n  vint32 = 999;\n  assert(binn_object_get(objptr, \"bool_false\", 0x80061, &vint32, 0) == 1);\n  printf(\"bool false: %d\\n\", vint32);\n  assert(vint32 == 0);\n  vint32 = 999;\n  assert(binn_object_get(objptr, \"null\", 0x00, &vint32, 0) == 1);\n  printf(\"null: %d\\n\", vint32);\n  assert(binn_object_get(objptr, \"null\", 0x00, 0, 0) == 1);\n  assert(binn_object_get(objptr, \"list\", 0xE0, &(&listptr[listptr_idx]), 0) == 1);\n  printf(\"obj ptr: %p  list ptr: %p\\n\", objptr, listptr);\n  assert((&listptr[listptr_idx]) != 0);\n  assert((&listptr[listptr_idx]) > objptr);\n  vint32 = 0;\n  assert(binn_list_get(listptr, 2, 0x61, &vint32, 0) == 1);\n  printf(\"int32: %d\\n\", vint32);\n  assert(vint32 == 123);\n  ptr_idx = 0;\n  assert(binn_list_get(listptr, 3, 0xA0, &(&ptr[ptr_idx]), 0) == 1);\n  printf(\"ptr: (%p) '%s'\\n\", ptr, ptr);\n  assert(strcmp(ptr, \"this is a string\") == 0);\n  vint32 = 0;\n  assert(binn_object_get_int32(objptr, \"int32\", &vint32) == 1);\n  printf(\"int32: %d\\n\", vint32);\n  assert(vint32 == (-12345));\n  vint16 = 0;\n  assert(binn_object_get_int16(objptr, \"int16\", &vint16) == 1);\n  printf(\"int16: %d\\n\", vint16);\n  assert(vint16 == (-258));\n  vint8 = 0;\n  assert(binn_object_get_int8(objptr, \"int8\", &vint8) == 1);\n  printf(\"int8: %d\\n\", vint8);\n  assert(vint8 == (-120));\n  vint64 = 0;\n  assert(binn_object_get_int64(objptr, \"int64\", &vint64) == 1);\n  printf(\"int64: %lli\\n\", vint64);\n  assert(vint64 == (-1234567890123));\n  vuint32 = 0;\n  assert(binn_object_get_uint32(objptr, \"uint32\", &vuint32) == 1);\n  printf(\"uint32: %d\\n\", vuint32);\n  assert(vuint32 == 123456);\n  vuint16 = 0;\n  assert(binn_object_get_uint16(objptr, \"uint16\", &vuint16) == 1);\n  printf(\"uint16: %d\\n\", vuint16);\n  assert(vuint16 == 60500);\n  vuint8 = 0;\n  assert(binn_object_get_uint8(objptr, \"uint8\", &vuint8) == 1);\n  printf(\"uint8: %d\\n\", vuint8);\n  assert(vuint8 == 250);\n  vuint64 = 0;\n  assert(binn_object_get_uint64(objptr, \"uint64\", &vuint64) == 1);\n  printf(\"uint64: %llu\\n\", vuint64);\n  assert(vuint64 == 1234567890123);\n  vfloat32 = 0;\n  assert(binn_object_get_float(objptr, \"float32\", &vfloat32) == 1);\n  printf(\"float32: %f\\n\", vfloat32);\n  assert(AlmostEqualFloats(vfloat32, -12.345, 2) == 1);\n  vfloat64 = 0;\n  assert(binn_object_get_double(objptr, \"float64\", &vfloat64) == 1);\n  printf(\"float64: %f\\n\", vfloat64);\n  assert(AlmostEqualFloats(vfloat32, -12.345, 2) == 1);\n  ptr_idx = 0;\n  assert(binn_object_get_str(objptr, \"str\", &(&ptr[ptr_idx])) == 1);\n  printf(\"ptr: (%p) '%s'\\n\", ptr, ptr);\n  assert(strcmp(ptr, \"the value\") == 0);\n  vint32 = 999;\n  assert(binn_object_get_bool(objptr, \"bool_true\", &vint32) == 1);\n  printf(\"bool true: %d\\n\", vint32);\n  assert(vint32 == 1);\n  vint32 = 999;\n  assert(binn_object_get_bool(objptr, \"bool_false\", &vint32) == 1);\n  printf(\"bool false: %d\\n\", vint32);\n  assert(vint32 == 0);\n  vbool = 0;\n  assert(binn_object_null(objptr, \"null\") == 1);\n  assert(binn_object_null(objptr, \"bool_true\") == 0);\n  assert(binn_object_get_list(objptr, \"list\", &(&listptr[listptr_idx])) == 1);\n  printf(\"obj ptr: %p  list ptr: %p\\n\", objptr, listptr);\n  assert((&listptr[listptr_idx]) != 0);\n  assert((&listptr[listptr_idx]) > objptr);\n  vint32 = 0;\n  assert(binn_list_get_int32(listptr, 2, &vint32) == 1);\n  printf(\"int32: %d\\n\", vint32);\n  assert(vint32 == 123);\n  ptr_idx = 0;\n  assert(binn_list_get_str(listptr, 3, &(&ptr[ptr_idx])) == 1);\n  printf(\"ptr: (%p) '%s'\\n\", ptr, ptr);\n  assert(strcmp(ptr, \"this is a string\") == 0);\n  vint32 = binn_object_int32(objptr, \"int32\");\n  printf(\"int32: %d\\n\", vint32);\n  assert(vint32 == (-12345));\n  vint16 = binn_object_int16(objptr, \"int16\");\n  printf(\"int16: %d\\n\", vint16);\n  assert(vint16 == (-258));\n  vint8 = binn_object_int8(objptr, \"int8\");\n  printf(\"int8: %d\\n\", vint8);\n  assert(vint8 == (-120));\n  vint64 = binn_object_int64(objptr, \"int64\");\n  printf(\"int64: %lli\\n\", vint64);\n  assert(vint64 == (-1234567890123));\n  vuint32 = binn_object_uint32(objptr, \"uint32\");\n  printf(\"uint32: %d\\n\", vuint32);\n  assert(vuint32 == 123456);\n  vuint16 = binn_object_uint16(objptr, \"uint16\");\n  printf(\"uint16: %d\\n\", vuint16);\n  assert(vuint16 == 60500);\n  vuint8 = binn_object_uint8(objptr, \"uint8\");\n  printf(\"uint8: %d\\n\", vuint8);\n  assert(vuint8 == 250);\n  vuint64 = binn_object_uint64(objptr, \"uint64\");\n  printf(\"uint64: %llu\\n\", vuint64);\n  assert(vuint64 == 1234567890123);\n  vfloat32 = binn_object_float(objptr, \"float32\");\n  printf(\"float32: %f\\n\", vfloat32);\n  assert(AlmostEqualFloats(vfloat32, -12.345, 2) == 1);\n  vfloat64 = binn_object_double(objptr, \"float64\");\n  printf(\"float64: %f\\n\", vfloat64);\n  assert(AlmostEqualFloats(vfloat32, -12.345, 2) == 1);\n  ptr_idx = binn_object_str(objptr, \"str\");\n  printf(\"ptr: (%p) '%s'\\n\", ptr, ptr);\n  assert(strcmp(ptr, \"the value\") == 0);\n  vint32 = binn_object_bool(objptr, \"bool_true\");\n  printf(\"bool true: %d\\n\", vint32);\n  assert(vint32 == 1);\n  vint32 = binn_object_bool(objptr, \"bool_false\");\n  printf(\"bool false: %d\\n\", vint32);\n  assert(vint32 == 0);\n  assert(binn_object_null(objptr, \"null\") == 1);\n  assert(binn_object_null(objptr, \"nonull\") == 0);\n  listptr_idx = binn_object_list(objptr, \"list\");\n  printf(\"obj ptr: %p  list ptr: %p\\n\", objptr, listptr);\n  assert((&listptr[listptr_idx]) != 0);\n  assert((&listptr[listptr_idx]) > objptr);\n  vint32 = binn_list_int32(listptr, 2);\n  printf(\"int32: %d\\n\", vint32);\n  assert(vint32 == 123);\n  ptr_idx = binn_list_str(listptr, 3);\n  printf(\"ptr: (%p) '%s'\\n\", ptr, ptr);\n  assert(strcmp(ptr, \"this is a string\") == 0);\n  assert(binn_object_get_value(objptr, \"int32\", &value) == 1);\n  assert(value.type == 0x41);\n  assert(value.vint16 == (-12345));\n  assert(binn_object_get_value(objptr, \"int16\", &value) == 1);\n  assert(value.type == 0x41);\n  assert(value.vint16 == (-258));\n  assert(binn_object_get_value(objptr, \"int8\", &value) == 1);\n  assert(value.type == 0x21);\n  assert(value.vint8 == (-120));\n  assert(binn_object_get_value(objptr, \"int64\", &value) == 1);\n  assert(value.type == 0x81);\n  assert(value.vint64 == (-1234567890123));\n  assert(binn_object_get_value(objptr, \"uint32\", &value) == 1);\n  assert(value.type == 0x60);\n  assert(value.vuint32 == 123456);\n  assert(binn_object_get_value(objptr, \"uint16\", &value) == 1);\n  assert(value.type == 0x40);\n  assert(value.vuint16 == 60500);\n  assert(binn_object_get_value(objptr, \"uint8\", &value) == 1);\n  assert(value.type == 0x20);\n  assert(value.vuint8 == 250);\n  assert(binn_object_get_value(objptr, \"uint64\", &value) == 1);\n  assert(value.type == 0x80);\n  assert(value.vuint64 == 1234567890123);\n  puts(\"reading... OK\");\n}\n\n",
            "calle": [
                "AlmostEqualFloats",
                "assert",
                "binn_list_get",
                "binn_list_get_int32",
                "binn_list_get_str",
                "binn_list_int32",
                "binn_list_str",
                "binn_object_bool",
                "binn_object_double",
                "binn_object_float",
                "binn_object_get",
                "binn_object_get_bool",
                "binn_object_get_double",
                "binn_object_get_float",
                "binn_object_get_int16",
                "binn_object_get_int32",
                "binn_object_get_int64",
                "binn_object_get_int8",
                "binn_object_get_list",
                "binn_object_get_str",
                "binn_object_get_uint16",
                "binn_object_get_uint32",
                "binn_object_get_uint64",
                "binn_object_get_uint8",
                "binn_object_get_value",
                "binn_object_int16",
                "binn_object_int32",
                "binn_object_int64",
                "binn_object_int8",
                "binn_object_list",
                "binn_object_null",
                "binn_object_str",
                "binn_object_uint16",
                "binn_object_uint32",
                "binn_object_uint64",
                "binn_object_uint8",
                "printf",
                "puts",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "objptr",
                        "type": "void *",
                        "definition": [
                            "void *objptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "listptr",
                        "type": "void *",
                        "definition": [
                            "void *listptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "listptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int listptr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "char *",
                        "definition": [
                            "char *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ptr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn",
                        "definition": [
                            "binn value = {0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vint32",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "vint16",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "vint8",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "vint64",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "vuint32",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "vuint16",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "vuint8",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "vuint64",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "vfloat32",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "vfloat64",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "vbool",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "init_udts",
            "header": "",
            "params": [],
            "definition": "void init_udts()\n{\n  binn *obj = 0;\n  unsigned int obj_idx = 0;\n  unsigned short date;\n  uint64 value;\n  void *ptr;\n  unsigned int ptr_idx = 0;\n  puts(\"testing UDTs...\");\n  assert(strcmp(date_to_str(str_to_date(\"1950-08-15\")), \"1950-08-15\") == 0);\n  assert(strcmp(date_to_str(str_to_date(\"1900-12-01\")), \"1900-12-01\") == 0);\n  assert(strcmp(date_to_str(str_to_date(\"2000-10-31\")), \"2000-10-31\") == 0);\n  assert(strcmp(date_to_str(str_to_date(\"2014-03-19\")), \"2014-03-19\") == 0);\n  printf(\"curr=%s\\n\", currency_to_str(str_to_currency(\"123.456\")));\n  printf(\"curr=%s\\n\", currency_to_str(str_to_currency(\"123.45\")));\n  printf(\"curr=%s\\n\", currency_to_str(str_to_currency(\"123.4\")));\n  printf(\"curr=%s\\n\", currency_to_str(str_to_currency(\"123.\")));\n  printf(\"curr=%s\\n\", currency_to_str(str_to_currency(\"123\")));\n  printf(\"curr=%s\\n\", currency_to_str(str_to_currency(\"1.2\")));\n  printf(\"curr=%s\\n\", currency_to_str(str_to_currency(\"0.987\")));\n  printf(\"curr=%s\\n\", currency_to_str(str_to_currency(\"0.98\")));\n  printf(\"curr=%s\\n\", currency_to_str(str_to_currency(\"0.9\")));\n  printf(\"curr=%s\\n\", currency_to_str(str_to_currency(\"0.0\")));\n  printf(\"curr=%s\\n\", currency_to_str(str_to_currency(\"0\")));\n  printf(\"curr=%s\\n\", currency_to_str(str_to_currency(\"123.4567\")));\n  printf(\"curr=%s\\n\", currency_to_str(str_to_currency(\"123.45678\")));\n  printf(\"curr=%s\\n\", currency_to_str(str_to_currency(\"123.456789\")));\n  printf(\"curr=%s\\n\", currency_to_str(str_to_currency(\"0.1234\")));\n  printf(\"curr=%s\\n\", currency_to_str(str_to_currency(\".1234\")));\n  assert(float_to_currency(2.5) == 25000);\n  assert(float_to_currency(5) == 50000);\n  assert(str_to_currency(\"1.1\") == 11000);\n  assert(str_to_currency(\"12\") == 120000);\n  assert(mul_currency(20000, 20000) == 40000);\n  assert(mul_currency(20000, 25000) == 50000);\n  assert(mul_currency(30000, 40000) == 120000);\n  assert(div_currency(80000, 20000) == 40000);\n  assert(div_currency(120000, 40000) == 30000);\n  assert(div_currency(100000, 40000) == 25000);\n  printf(\"1.1 * 2.5 = %s\\n\", currency_to_str(mul_currency(str_to_currency(\"1.1\"), float_to_currency(2.5))));\n  printf(\"12 / 5 = %s\\n\", currency_to_str(div_currency(str_to_currency(\"12\"), float_to_currency(5))));\n  MY_DATE = binn_create_type(0x40, 0x0a);\n  MY_CURRENCY = binn_create_type(0x80, 0x0a);\n  obj_idx = binn_object();\n  assert((&obj[obj_idx]) != 0);\n  date = str_to_date(\"1950-08-15\");\n  printf(\" date 1: %d %s\\n\", date, date_to_str(date));\n  assert(binn_object_set(obj, \"date1\", MY_DATE, &date, 0) == 1);\n  assert(binn_object_set(obj, \"date1\", MY_DATE, &date, 0) == 0);\n  date = str_to_date(\"1999-12-31\");\n  printf(\" date 2: %d %s\\n\", date, date_to_str(date));\n  binn_object_set(obj, \"date2\", MY_DATE, &date, 0);\n  value = str_to_currency(\"123.456\");\n  printf(\" curr 1: %llu %s\\n\", value, currency_to_str(value));\n  binn_object_set(obj, \"curr1\", MY_CURRENCY, &value, 0);\n  value = str_to_currency(\"123.45\");\n  printf(\" curr 2: %llu %s\\n\", value, currency_to_str(value));\n  binn_object_set(obj, \"curr2\", MY_CURRENCY, &value, 0);\n  value = str_to_currency(\"12.5\");\n  printf(\" curr 3: %llu %s\\n\", value, currency_to_str(value));\n  binn_object_set(obj, \"curr3\", MY_CURRENCY, &value, 0);\n  value = str_to_currency(\"5\");\n  printf(\" curr 4: %llu %s\\n\", value, currency_to_str(value));\n  binn_object_set(obj, \"curr4\", MY_CURRENCY, &value, 0);\n  value = str_to_currency(\"0.75\");\n  printf(\" curr 5: %llu %s\\n\", value, currency_to_str(value));\n  binn_object_set(obj, \"curr5\", MY_CURRENCY, &value, 0);\n  ptr_idx = binn_ptr(obj);\n  assert(binn_object_get(ptr, \"date1\", MY_DATE, &date, 0) == 1);\n  printf(\" date 1: %d %s\\n\", date, date_to_str(date));\n  assert(binn_object_get(ptr, \"date2\", MY_DATE, &date, 0) == 1);\n  printf(\" date 2: %d %s\\n\", date, date_to_str(date));\n  assert(binn_object_get(ptr, \"curr1\", MY_CURRENCY, &value, 0) == 1);\n  printf(\" curr 1: %llu %s\\n\", value, currency_to_str(value));\n  assert(binn_object_get(ptr, \"curr2\", MY_CURRENCY, &value, 0) == 1);\n  printf(\" curr 2: %llu %s\\n\", value, currency_to_str(value));\n  assert(binn_object_get(ptr, \"curr3\", MY_CURRENCY, &value, 0) == 1);\n  printf(\" curr 3: %llu %s\\n\", value, currency_to_str(value));\n  assert(binn_object_get(ptr, \"curr4\", MY_CURRENCY, &value, 0) == 1);\n  printf(\" curr 4: %llu %s\\n\", value, currency_to_str(value));\n  assert(binn_object_get(ptr, \"curr5\", MY_CURRENCY, &value, 0) == 1);\n  printf(\" curr 5: %llu %s\\n\", value, currency_to_str(value));\n  binn_free(obj);\n  puts(\"testing UDTs... OK\");\n}\n\n",
            "calle": [
                "assert",
                "binn_create_type",
                "binn_free",
                "binn_object",
                "binn_object_get",
                "binn_object_set",
                "binn_ptr",
                "currency_to_str",
                "date_to_str",
                "div_currency",
                "float_to_currency",
                "mul_currency",
                "printf",
                "puts",
                "str_to_currency",
                "str_to_date",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "binn *",
                        "definition": [
                            "binn *obj = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int obj_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "date",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short date"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "uint64",
                        "definition": [
                            "uint64 value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ptr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "MY_DATE",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "MY_CURRENCY",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_int_conversion",
            "header": "",
            "params": [],
            "definition": "void test_int_conversion()\n{\n  printf(\"testing integer conversion...\");\n  vint8 = -110;\n  vuint8 = 0;\n  assert(copy_int_value(&vint8, &vuint8, 0x21, 0x20) == 0);\n  assert(vint8 == (-110));\n  assert(vuint8 == 0);\n  vint8 = -110;\n  vuint16 = 0;\n  assert(copy_int_value(&vint8, &vuint16, 0x21, 0x40) == 0);\n  assert(vint8 == (-110));\n  assert(vuint16 == 0);\n  vint8 = -110;\n  vuint32 = 0;\n  assert(copy_int_value(&vint8, &vuint32, 0x21, 0x60) == 0);\n  assert(vint8 == (-110));\n  assert(vuint32 == 0);\n  vint8 = -110;\n  vuint64 = 0;\n  assert(copy_int_value(&vint8, &vuint64, 0x21, 0x80) == 0);\n  assert(vint8 == (-110));\n  assert(vuint64 == 0);\n  vint16 = -123;\n  vuint8 = 0;\n  assert(copy_int_value(&vint16, &vuint8, 0x41, 0x20) == 0);\n  assert(vint16 == (-123));\n  assert(vuint8 == 0);\n  vint16 = -123;\n  vuint16 = 0;\n  assert(copy_int_value(&vint16, &vuint16, 0x41, 0x40) == 0);\n  assert(vint16 == (-123));\n  assert(vuint16 == 0);\n  vint16 = -32000;\n  vuint32 = 0;\n  assert(copy_int_value(&vint16, &vuint32, 0x41, 0x60) == 0);\n  assert(vint16 == (-32000));\n  assert(vuint32 == 0);\n  vint16 = -32000;\n  vuint64 = 0;\n  assert(copy_int_value(&vint16, &vuint64, 0x41, 0x80) == 0);\n  assert(vint16 == (-32000));\n  assert(vuint64 == 0);\n  vint32 = -123;\n  vuint8 = 0;\n  assert(copy_int_value(&vint32, &vuint8, 0x61, 0x20) == 0);\n  assert(vint32 == (-123));\n  assert(vuint8 == 0);\n  vint32 = -123;\n  vuint16 = 0;\n  assert(copy_int_value(&vint32, &vuint16, 0x61, 0x40) == 0);\n  assert(vint32 == (-123));\n  assert(vuint16 == 0);\n  vint32 = -123;\n  vuint32 = 0;\n  assert(copy_int_value(&vint32, &vuint32, 0x61, 0x60) == 0);\n  assert(vint32 == (-123));\n  assert(vuint32 == 0);\n  vint32 = -123;\n  vuint64 = 0;\n  assert(copy_int_value(&vint32, &vuint64, 0x61, 0x80) == 0);\n  assert(vint32 == (-123));\n  assert(vuint64 == 0);\n  vint64 = -123;\n  vuint8 = 0;\n  assert(copy_int_value(&vint64, &vuint8, 0x81, 0x20) == 0);\n  assert(vint64 == (-123));\n  assert(vuint8 == 0);\n  vint64 = -123;\n  vuint16 = 0;\n  assert(copy_int_value(&vint64, &vuint16, 0x81, 0x40) == 0);\n  assert(vint64 == (-123));\n  assert(vuint16 == 0);\n  vint64 = -123;\n  vuint32 = 0;\n  assert(copy_int_value(&vint64, &vuint32, 0x81, 0x60) == 0);\n  assert(vint64 == (-123));\n  assert(vuint32 == 0);\n  vint64 = -123;\n  vuint64 = 0;\n  assert(copy_int_value(&vint64, &vuint64, 0x81, 0x80) == 0);\n  assert(vint64 == (-123));\n  assert(vuint64 == 0);\n  vint16 = -32000;\n  vint8 = 0;\n  assert(copy_int_value(&vint16, &vint8, 0x41, 0x21) == 0);\n  assert(vint16 == (-32000));\n  assert(vint8 == 0);\n  vint32 = -250;\n  vint8 = 0;\n  assert(copy_int_value(&vint32, &vint8, 0x61, 0x21) == 0);\n  assert(vint32 == (-250));\n  assert(vint8 == 0);\n  vint32 = -35000;\n  vint16 = 0;\n  assert(copy_int_value(&vint32, &vint16, 0x61, 0x41) == 0);\n  assert(vint32 == (-35000));\n  assert(vint16 == 0);\n  vint64 = -250;\n  vint8 = 0;\n  assert(copy_int_value(&vint64, &vint8, 0x81, 0x21) == 0);\n  assert(vint64 == (-250));\n  assert(vint8 == 0);\n  vint64 = -35000;\n  vint16 = 0;\n  assert(copy_int_value(&vint64, &vint16, 0x81, 0x41) == 0);\n  assert(vint64 == (-35000));\n  assert(vint16 == 0);\n  vint64 = -25470000000;\n  vint32 = 0;\n  assert(copy_int_value(&vint64, &vint32, 0x81, 0x61) == 0);\n  assert(vint64 == (-25470000000));\n  assert(vint32 == 0);\n  vint16 = 250;\n  vint8 = 0;\n  assert(copy_int_value(&vint16, &vint8, 0x41, 0x21) == 0);\n  assert(vint16 == 250);\n  assert(vint8 == 0);\n  vint32 = 250;\n  vint8 = 0;\n  assert(copy_int_value(&vint32, &vint8, 0x61, 0x21) == 0);\n  assert(vint32 == 250);\n  assert(vint8 == 0);\n  vint32 = 35000;\n  vint16 = 0;\n  assert(copy_int_value(&vint32, &vint16, 0x61, 0x41) == 0);\n  assert(vint32 == 35000);\n  assert(vint16 == 0);\n  vint64 = 250;\n  vint8 = 0;\n  assert(copy_int_value(&vint64, &vint8, 0x81, 0x21) == 0);\n  assert(vint64 == 250);\n  assert(vint8 == 0);\n  vint64 = 35000;\n  vint16 = 0;\n  assert(copy_int_value(&vint64, &vint16, 0x81, 0x41) == 0);\n  assert(vint64 == 35000);\n  assert(vint16 == 0);\n  vint64 = 25470000000;\n  vint32 = 0;\n  assert(copy_int_value(&vint64, &vint32, 0x81, 0x61) == 0);\n  assert(vint64 == 25470000000);\n  assert(vint32 == 0);\n  vint16 = 300;\n  vuint8 = 0;\n  assert(copy_int_value(&vint16, &vuint8, 0x41, 0x20) == 0);\n  assert(vint16 == 300);\n  assert(vuint8 == 0);\n  vint32 = 300;\n  vuint8 = 0;\n  assert(copy_int_value(&vint32, &vuint8, 0x61, 0x20) == 0);\n  assert(vint32 == 300);\n  assert(vuint8 == 0);\n  vint32 = 70000;\n  vuint16 = 0;\n  assert(copy_int_value(&vint32, &vuint16, 0x61, 0x40) == 0);\n  assert(vint32 == 70000);\n  assert(vuint16 == 0);\n  vint64 = 300;\n  vuint8 = 0;\n  assert(copy_int_value(&vint64, &vuint8, 0x81, 0x20) == 0);\n  assert(vint64 == 300);\n  assert(vuint8 == 0);\n  vint64 = 70000;\n  vuint16 = 0;\n  assert(copy_int_value(&vint64, &vuint16, 0x81, 0x40) == 0);\n  assert(vint64 == 70000);\n  assert(vuint16 == 0);\n  vint64 = 25470000000;\n  vuint32 = 0;\n  assert(copy_int_value(&vint64, &vuint32, 0x81, 0x60) == 0);\n  assert(vint64 == 25470000000);\n  assert(vuint32 == 0);\n  vint8 = 123;\n  vint16 = 0;\n  assert(copy_int_value(&vint8, &vint16, 0x21, 0x41) == 1);\n  assert(vint8 == 123);\n  assert(vint16 == 123);\n  vint8 = -110;\n  vint16 = 0;\n  assert(copy_int_value(&vint8, &vint16, 0x21, 0x41) == 1);\n  assert(vint8 == (-110));\n  assert(vint16 == (-110));\n  vint8 = 123;\n  vint32 = 0;\n  assert(copy_int_value(&vint8, &vint32, 0x21, 0x61) == 1);\n  assert(vint8 == 123);\n  assert(vint32 == 123);\n  vint8 = -110;\n  vint32 = 0;\n  assert(copy_int_value(&vint8, &vint32, 0x21, 0x61) == 1);\n  assert(vint8 == (-110));\n  assert(vint32 == (-110));\n  vint8 = 123;\n  vint64 = 0;\n  assert(copy_int_value(&vint8, &vint64, 0x21, 0x81) == 1);\n  assert(vint8 == 123);\n  assert(vint64 == 123);\n  vint8 = -120;\n  vint64 = 0;\n  assert(copy_int_value(&vint8, &vint64, 0x21, 0x81) == 1);\n  assert(vint8 == (-120));\n  assert(vint64 == (-120));\n  vint8 = 123;\n  vuint16 = 0;\n  assert(copy_int_value(&vint8, &vuint16, 0x21, 0x40) == 1);\n  assert(vint8 == 123);\n  assert(vuint16 == 123);\n  vint8 = 123;\n  vuint32 = 0;\n  assert(copy_int_value(&vint8, &vuint32, 0x21, 0x60) == 1);\n  assert(vint8 == 123);\n  assert(vuint32 == 123);\n  vint8 = 123;\n  vuint64 = 0;\n  assert(copy_int_value(&vint8, &vuint64, 0x21, 0x80) == 1);\n  assert(vint8 == 123);\n  assert(vuint64 == 123);\n  vuint8 = 123;\n  vint16 = 0;\n  assert(copy_int_value(&vuint8, &vint16, 0x20, 0x41) == 1);\n  assert(vuint8 == 123);\n  assert(vint16 == 123);\n  vuint8 = 250;\n  vint16 = 0;\n  assert(copy_int_value(&vuint8, &vint16, 0x20, 0x41) == 1);\n  assert(vuint8 == 250);\n  assert(vint16 == 250);\n  vuint8 = 123;\n  vint32 = 0;\n  assert(copy_int_value(&vuint8, &vint32, 0x20, 0x61) == 1);\n  assert(vuint8 == 123);\n  assert(vint32 == 123);\n  vuint8 = 250;\n  vint32 = 0;\n  assert(copy_int_value(&vuint8, &vint32, 0x20, 0x61) == 1);\n  assert(vuint8 == 250);\n  assert(vint32 == 250);\n  vuint8 = 123;\n  vint64 = 0;\n  assert(copy_int_value(&vuint8, &vint64, 0x20, 0x81) == 1);\n  assert(vuint8 == 123);\n  assert(vint64 == 123);\n  vuint8 = 250;\n  vint64 = 0;\n  assert(copy_int_value(&vuint8, &vint64, 0x20, 0x81) == 1);\n  assert(vuint8 == 250);\n  assert(vint64 == 250);\n  vuint8 = 123;\n  vuint16 = 0;\n  assert(copy_int_value(&vuint8, &vuint16, 0x20, 0x40) == 1);\n  assert(vuint8 == 123);\n  assert(vuint16 == 123);\n  vuint8 = 250;\n  vuint16 = 0;\n  assert(copy_int_value(&vuint8, &vuint16, 0x20, 0x40) == 1);\n  assert(vuint8 == 250);\n  assert(vuint16 == 250);\n  vuint8 = 123;\n  vuint32 = 0;\n  assert(copy_int_value(&vuint8, &vuint32, 0x20, 0x60) == 1);\n  assert(vuint8 == 123);\n  assert(vuint32 == 123);\n  vuint8 = 250;\n  vuint32 = 0;\n  assert(copy_int_value(&vuint8, &vuint32, 0x20, 0x60) == 1);\n  assert(vuint8 == 250);\n  assert(vuint32 == 250);\n  vuint8 = 123;\n  vuint64 = 0;\n  assert(copy_int_value(&vuint8, &vuint64, 0x20, 0x80) == 1);\n  assert(vuint8 == 123);\n  assert(vuint64 == 123);\n  vuint8 = 250;\n  vuint64 = 0;\n  assert(copy_int_value(&vuint8, &vuint64, 0x20, 0x80) == 1);\n  assert(vuint8 == 250);\n  assert(vuint64 == 250);\n  vint16 = 250;\n  vuint8 = 0;\n  assert(copy_int_value(&vint16, &vuint8, 0x41, 0x20) == 1);\n  assert(vint16 == 250);\n  assert(vuint8 == 250);\n  vint32 = 250;\n  vuint8 = 0;\n  assert(copy_int_value(&vint32, &vuint8, 0x61, 0x20) == 1);\n  assert(vint32 == 250);\n  assert(vuint8 == 250);\n  vint32 = 35000;\n  vuint16 = 0;\n  assert(copy_int_value(&vint32, &vuint16, 0x61, 0x40) == 1);\n  assert(vint32 == 35000);\n  assert(vuint16 == 35000);\n  vint64 = 250;\n  vuint8 = 0;\n  assert(copy_int_value(&vint64, &vuint8, 0x81, 0x20) == 1);\n  assert(vint64 == 250);\n  assert(vuint8 == 250);\n  vint64 = 35000;\n  vuint16 = 0;\n  assert(copy_int_value(&vint64, &vuint16, 0x81, 0x40) == 1);\n  assert(vint64 == 35000);\n  assert(vuint16 == 35000);\n  vint64 = 2147000000;\n  vuint32 = 0;\n  assert(copy_int_value(&vint64, &vuint32, 0x81, 0x60) == 1);\n  assert(vint64 == 2147000000);\n  assert(vuint32 == 2147000000);\n  vint8 = -110;\n  vint16 = 0;\n  assert(copy_int_value(&vint8, &vint16, 0x21, 0x41) == 1);\n  assert(vint8 == (-110));\n  assert(vint16 == (-110));\n  vint8 = -110;\n  vint32 = 0;\n  assert(copy_int_value(&vint8, &vint32, 0x21, 0x61) == 1);\n  assert(vint8 == (-110));\n  assert(vint32 == (-110));\n  vint8 = -110;\n  vint64 = 0;\n  assert(copy_int_value(&vint8, &vint64, 0x21, 0x81) == 1);\n  assert(vint8 == (-110));\n  assert(vint64 == (-110));\n  vint16 = -123;\n  vint8 = 0;\n  assert(copy_int_value(&vint16, &vint8, 0x41, 0x21) == 1);\n  assert(vint16 == (-123));\n  assert(vint8 == (-123));\n  vint16 = -32000;\n  vint32 = 0;\n  assert(copy_int_value(&vint16, &vint32, 0x41, 0x61) == 1);\n  assert(vint16 == (-32000));\n  assert(vint32 == (-32000));\n  vint16 = -32000;\n  vint64 = 0;\n  assert(copy_int_value(&vint16, &vint64, 0x41, 0x81) == 1);\n  assert(vint16 == (-32000));\n  assert(vint64 == (-32000));\n  vint32 = -123;\n  vint8 = 0;\n  assert(copy_int_value(&vint32, &vint8, 0x61, 0x21) == 1);\n  assert(vint32 == (-123));\n  assert(vint8 == (-123));\n  vint32 = -123;\n  vint16 = 0;\n  assert(copy_int_value(&vint32, &vint16, 0x61, 0x41) == 1);\n  assert(vint32 == (-123));\n  assert(vint16 == (-123));\n  vint32 = -32000;\n  vint16 = 0;\n  assert(copy_int_value(&vint32, &vint16, 0x61, 0x41) == 1);\n  assert(vint32 == (-32000));\n  assert(vint16 == (-32000));\n  vint32 = -123;\n  vint64 = 0;\n  assert(copy_int_value(&vint32, &vint64, 0x61, 0x81) == 1);\n  assert(vint32 == (-123));\n  assert(vint64 == (-123));\n  vint32 = -2147000000;\n  vint64 = 0;\n  assert(copy_int_value(&vint32, &vint64, 0x61, 0x81) == 1);\n  assert(vint32 == (-2147000000));\n  assert(vint64 == (-2147000000));\n  vint64 = -123;\n  vint8 = 0;\n  assert(copy_int_value(&vint64, &vint8, 0x81, 0x21) == 1);\n  assert(vint64 == (-123));\n  assert(vint8 == (-123));\n  vint64 = -250;\n  vint16 = 0;\n  assert(copy_int_value(&vint64, &vint16, 0x81, 0x41) == 1);\n  assert(vint64 == (-250));\n  assert(vint16 == (-250));\n  vint64 = -35000;\n  vint32 = 0;\n  assert(copy_int_value(&vint64, &vint32, 0x81, 0x61) == 1);\n  assert(vint64 == (-35000));\n  assert(vint32 == (-35000));\n  puts(\"OK\");\n}\n\n",
            "calle": [
                "assert",
                "copy_int_value",
                "printf",
                "puts"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "vint8",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "vuint8",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "vuint16",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "vuint32",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "vuint64",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "vint16",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "vint32",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "vint64",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_binn_int_conversion",
            "header": "",
            "params": [],
            "definition": "void test_binn_int_conversion()\n{\n  binn *obj = 0;\n  unsigned int obj_idx = 0;\n  void *ptr;\n  unsigned int ptr_idx = 0;\n  printf(\"testing binn integer read conversion... \");\n  obj_idx = binn_object();\n  assert((&obj[obj_idx]) != 0);\n  assert(binn_object_set_int8(obj, \"int8\", -8) == 1);\n  assert(binn_object_set_int16(obj, \"int16\", -16) == 1);\n  assert(binn_object_set_int32(obj, \"int32\", -32) == 1);\n  assert(binn_object_set_int64(obj, \"int64\", -64) == 1);\n  assert(binn_object_set_uint8(obj, \"uint8\", 111) == 1);\n  assert(binn_object_set_uint16(obj, \"uint16\", 112) == 1);\n  assert(binn_object_set_uint32(obj, \"uint32\", 113) == 1);\n  assert(binn_object_set_uint64(obj, \"uint64\", 114) == 1);\n  ptr_idx = binn_ptr(obj);\n  assert(binn_object_int8(ptr, \"int8\") == (-8));\n  assert(binn_object_int8(ptr, \"int16\") == (-16));\n  assert(binn_object_int8(ptr, \"int32\") == (-32));\n  assert(binn_object_int8(ptr, \"int64\") == (-64));\n  assert(binn_object_int16(ptr, \"int8\") == (-8));\n  assert(binn_object_int16(ptr, \"int16\") == (-16));\n  assert(binn_object_int16(ptr, \"int32\") == (-32));\n  assert(binn_object_int16(ptr, \"int64\") == (-64));\n  assert(binn_object_int32(ptr, \"int8\") == (-8));\n  assert(binn_object_int32(ptr, \"int16\") == (-16));\n  assert(binn_object_int32(ptr, \"int32\") == (-32));\n  assert(binn_object_int32(ptr, \"int64\") == (-64));\n  assert(binn_object_int64(ptr, \"int8\") == (-8));\n  assert(binn_object_int64(ptr, \"int16\") == (-16));\n  assert(binn_object_int64(ptr, \"int32\") == (-32));\n  assert(binn_object_int64(ptr, \"int64\") == (-64));\n  assert(binn_object_int8(ptr, \"uint8\") == 111);\n  assert(binn_object_int8(ptr, \"uint16\") == 112);\n  assert(binn_object_int8(ptr, \"uint32\") == 113);\n  assert(binn_object_int8(ptr, \"uint64\") == 114);\n  assert(binn_object_int16(ptr, \"uint8\") == 111);\n  assert(binn_object_int16(ptr, \"uint16\") == 112);\n  assert(binn_object_int16(ptr, \"uint32\") == 113);\n  assert(binn_object_int16(ptr, \"uint64\") == 114);\n  assert(binn_object_int32(ptr, \"uint8\") == 111);\n  assert(binn_object_int32(ptr, \"uint16\") == 112);\n  assert(binn_object_int32(ptr, \"uint32\") == 113);\n  assert(binn_object_int32(ptr, \"uint64\") == 114);\n  assert(binn_object_int64(ptr, \"uint8\") == 111);\n  assert(binn_object_int64(ptr, \"uint16\") == 112);\n  assert(binn_object_int64(ptr, \"uint32\") == 113);\n  assert(binn_object_int64(ptr, \"uint64\") == 114);\n  binn_free(obj);\n  puts(\"OK\");\n}\n\n",
            "calle": [
                "assert",
                "binn_free",
                "binn_object",
                "binn_object_int16",
                "binn_object_int32",
                "binn_object_int64",
                "binn_object_int8",
                "binn_object_set_int16",
                "binn_object_set_int32",
                "binn_object_set_int64",
                "binn_object_set_int8",
                "binn_object_set_uint16",
                "binn_object_set_uint32",
                "binn_object_set_uint64",
                "binn_object_set_uint8",
                "binn_ptr",
                "printf",
                "puts"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "binn *",
                        "definition": [
                            "binn *obj = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int obj_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ptr_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_value_conversion",
            "header": "",
            "params": [],
            "definition": "void test_value_conversion()\n{\n  binn *value;\n  unsigned int value_idx = 0;\n  char *ptr;\n  unsigned int ptr_idx = 0;\n  char blob[64] = \"test blob\";\n  void *pblob;\n  unsigned int pblob_idx = 0;\n  int size;\n  int vint32;\n  int64 vint64;\n  double vdouble;\n  BOOL vbool;\n  printf(\"testing binn value conversion... \");\n  ptr_idx = \"static string\";\n  value_idx = binn_string(ptr, (binn_mem_free) 0);\n  assert((&value[value_idx]) != 0);\n  assert(value->type == 0xA0);\n  assert(value->ptr != 0);\n  assert(value->ptr == (&ptr[ptr_idx]));\n  assert(value->freefn == 0);\n  binn_free(value);\n  ptr_idx = \"transient string\";\n  value_idx = binn_string(ptr, (binn_mem_free) (-1));\n  assert((&value[value_idx]) != 0);\n  assert(value->type == 0xA0);\n  assert(value->ptr != 0);\n  assert(value->ptr != (&ptr[ptr_idx]));\n  assert(strcmp((char *) value->ptr, ptr) == 0);\n  assert(value->freefn != 0);\n  binn_free(value);\n  ptr_idx = strdup(\"dynamic allocated string\");\n  value_idx = binn_string(ptr, free);\n  assert((&value[value_idx]) != 0);\n  assert(value->type == 0xA0);\n  assert(value->ptr != 0);\n  assert(value->ptr == (&ptr[ptr_idx]));\n  assert(value->freefn != 0);\n  assert(value->freefn == (&free));\n  binn_free(value);\n  size = 64;\n  pblob_idx = blob;\n  value_idx = binn_blob(pblob, size, (binn_mem_free) 0);\n  assert((&value[value_idx]) != 0);\n  assert(value->type == 0xC0);\n  assert(value->ptr != 0);\n  assert(value->ptr == (&pblob[pblob_idx]));\n  assert(value->freefn == 0);\n  binn_free(value);\n  size = 64;\n  pblob_idx = blob;\n  value_idx = binn_blob(pblob, size, (binn_mem_free) (-1));\n  assert((&value[value_idx]) != 0);\n  assert(value->type == 0xC0);\n  assert(value->ptr != 0);\n  assert(value->ptr != (&pblob[pblob_idx]));\n  assert(memcmp(value->ptr, pblob, size) == 0);\n  assert(value->freefn != 0);\n  binn_free(value);\n  size = 64;\n  pblob_idx = memdup(blob, size);\n  value_idx = binn_blob(pblob, size, free);\n  assert((&value[value_idx]) != 0);\n  assert(value->type == 0xC0);\n  assert(value->ptr != 0);\n  assert(value->ptr == (&pblob[pblob_idx]));\n  assert(value->freefn == (&free));\n  binn_free(value);\n  ptr_idx = \"123\";\n  value_idx = binn_string(ptr, (binn_mem_free) 0);\n  assert((&value[value_idx]) != 0);\n  assert(value->type == 0xA0);\n  assert(value->ptr != 0);\n  assert(value->ptr == (&ptr[ptr_idx]));\n  assert(value->freefn == 0);\n  assert(binn_get_str(value) == (&ptr[ptr_idx]));\n  assert(binn_get_int32(value, &vint32) == 1);\n  assert(vint32 == 123);\n  assert(binn_get_int64(value, &vint64) == 1);\n  assert(vint64 == 123);\n  assert(binn_get_double(value, &vdouble) == 1);\n  assert(AlmostEqualFloats(vdouble, 123, 4) == 1);\n  assert(binn_get_bool(value, &vbool) == 1);\n  assert(vbool == 1);\n  assert(value->type == 0xA0);\n  assert(value->ptr != 0);\n  assert(value->ptr == (&ptr[ptr_idx]));\n  assert(value->freefn == 0);\n  binn_free(value);\n  ptr_idx = \"-456\";\n  value_idx = binn_string(ptr, (binn_mem_free) 0);\n  assert((&value[value_idx]) != 0);\n  assert(value->type == 0xA0);\n  assert(value->ptr != 0);\n  assert(value->ptr == (&ptr[ptr_idx]));\n  assert(value->freefn == 0);\n  assert(binn_get_str(value) == (&ptr[ptr_idx]));\n  assert(binn_get_int32(value, &vint32) == 1);\n  assert(vint32 == (-456));\n  assert(binn_get_int64(value, &vint64) == 1);\n  assert(vint64 == (-456));\n  assert(binn_get_double(value, &vdouble) == 1);\n  assert(AlmostEqualFloats(vdouble, -456, 4) == 1);\n  assert(binn_get_bool(value, &vbool) == 1);\n  assert(vbool == 1);\n  assert(value->type == 0xA0);\n  assert(value->ptr != 0);\n  assert(value->ptr == (&ptr[ptr_idx]));\n  assert(value->freefn == 0);\n  binn_free(value);\n  ptr_idx = \"-4.56\";\n  value_idx = binn_string(ptr, (binn_mem_free) 0);\n  assert((&value[value_idx]) != 0);\n  assert(value->type == 0xA0);\n  assert(value->ptr != 0);\n  assert(value->ptr == (&ptr[ptr_idx]));\n  assert(value->freefn == 0);\n  assert(binn_get_str(value) == (&ptr[ptr_idx]));\n  assert(binn_get_int32(value, &vint32) == 1);\n  assert(vint32 == (-4));\n  assert(binn_get_int64(value, &vint64) == 1);\n  assert(vint64 == (-4));\n  assert(binn_get_double(value, &vdouble) == 1);\n  assert(AlmostEqualFloats(vdouble, -4.56, 4) == 1);\n  assert(binn_get_bool(value, &vbool) == 1);\n  assert(vbool == 1);\n  assert(value->type == 0xA0);\n  assert(value->ptr != 0);\n  assert(value->ptr == (&ptr[ptr_idx]));\n  assert(value->freefn == 0);\n  binn_free(value);\n  ptr_idx = \"yes\";\n  value_idx = binn_string(ptr, (binn_mem_free) 0);\n  assert((&value[value_idx]) != 0);\n  assert(binn_get_str(value) == (&ptr[ptr_idx]));\n  assert(binn_get_bool(value, &vbool) == 1);\n  assert(vbool == 1);\n  binn_free(value);\n  ptr_idx = \"no\";\n  value_idx = binn_string(ptr, (binn_mem_free) 0);\n  assert((&value[value_idx]) != 0);\n  assert(binn_get_bool(value, &vbool) == 1);\n  assert(vbool == 0);\n  binn_free(value);\n  ptr_idx = \"on\";\n  value_idx = binn_string(ptr, (binn_mem_free) 0);\n  assert((&value[value_idx]) != 0);\n  assert(binn_get_bool(value, &vbool) == 1);\n  assert(vbool == 1);\n  binn_free(value);\n  ptr_idx = \"off\";\n  value_idx = binn_string(ptr, (binn_mem_free) 0);\n  assert((&value[value_idx]) != 0);\n  assert(binn_get_bool(value, &vbool) == 1);\n  assert(vbool == 0);\n  binn_free(value);\n  ptr_idx = \"true\";\n  value_idx = binn_string(ptr, (binn_mem_free) 0);\n  assert((&value[value_idx]) != 0);\n  assert(binn_get_bool(value, &vbool) == 1);\n  assert(vbool == 1);\n  binn_free(value);\n  ptr_idx = \"false\";\n  value_idx = binn_string(ptr, (binn_mem_free) 0);\n  assert((&value[value_idx]) != 0);\n  assert(binn_get_bool(value, &vbool) == 1);\n  assert(vbool == 0);\n  binn_free(value);\n  ptr_idx = \"1\";\n  value_idx = binn_string(ptr, (binn_mem_free) 0);\n  assert((&value[value_idx]) != 0);\n  assert(binn_get_bool(value, &vbool) == 1);\n  assert(vbool == 1);\n  binn_free(value);\n  ptr_idx = \"0\";\n  value_idx = binn_string(ptr, (binn_mem_free) 0);\n  assert((&value[value_idx]) != 0);\n  assert(binn_get_bool(value, &vbool) == 1);\n  assert(vbool == 0);\n  binn_free(value);\n  value_idx = binn_int32(-345);\n  assert((&value[value_idx]) != 0);\n  assert(value->type == 0x61);\n  assert(value->vint32 == (-345));\n  assert(value->freefn == 0);\n  assert(binn_get_int32(value, &vint32) == 1);\n  assert(vint32 == (-345));\n  assert(binn_get_int64(value, &vint64) == 1);\n  assert(vint64 == (-345));\n  assert(binn_get_double(value, &vdouble) == 1);\n  assert(AlmostEqualFloats(vdouble, -345, 4) == 1);\n  assert(binn_get_bool(value, &vbool) == 1);\n  assert(vbool == 1);\n  assert(value->type == 0x61);\n  assert(value->vint32 == (-345));\n  assert(value->freefn == 0);\n  ptr_idx = binn_get_str(value);\n  assert((&ptr[ptr_idx]) != 0);\n  assert(strcmp(ptr, \"-345\") == 0);\n  assert(value->type == 0xA0);\n  assert(value->ptr != 0);\n  assert(value->ptr == (&ptr[ptr_idx]));\n  assert(value->freefn != 0);\n  binn_free(value);\n  value_idx = binn_int32(0);\n  assert((&value[value_idx]) != 0);\n  assert(value->type == 0x61);\n  assert(value->vint32 == 0);\n  assert(value->freefn == 0);\n  assert(binn_get_int32(value, &vint32) == 1);\n  assert(vint32 == 0);\n  assert(binn_get_int64(value, &vint64) == 1);\n  assert(vint64 == 0);\n  assert(binn_get_double(value, &vdouble) == 1);\n  assert(AlmostEqualFloats(vdouble, 0, 4) == 1);\n  assert(binn_get_bool(value, &vbool) == 1);\n  assert(vbool == 0);\n  assert(value->type == 0x61);\n  assert(value->vint32 == 0);\n  assert(value->freefn == 0);\n  ptr_idx = binn_get_str(value);\n  assert((&ptr[ptr_idx]) != 0);\n  assert(strcmp(ptr, \"0\") == 0);\n  assert(value->type == 0xA0);\n  assert(value->ptr != 0);\n  assert(value->ptr == (&ptr[ptr_idx]));\n  assert(value->freefn != 0);\n  binn_free(value);\n  value_idx = binn_int64(-345678);\n  assert((&value[value_idx]) != 0);\n  assert(value->type == 0x81);\n  assert(value->vint64 == (-345678));\n  assert(value->freefn == 0);\n  assert(binn_get_int32(value, &vint32) == 1);\n  assert(vint32 == (-345678));\n  assert(binn_get_int64(value, &vint64) == 1);\n  assert(vint64 == (-345678));\n  assert(binn_get_double(value, &vdouble) == 1);\n  assert(AlmostEqualFloats(vdouble, -345678, 4) == 1);\n  assert(binn_get_bool(value, &vbool) == 1);\n  assert(vbool == 1);\n  assert(value->type == 0x81);\n  assert(value->vint64 == (-345678));\n  assert(value->freefn == 0);\n  ptr_idx = binn_get_str(value);\n  assert((&ptr[ptr_idx]) != 0);\n  assert(strcmp(ptr, \"-345678\") == 0);\n  assert(value->type == 0xA0);\n  assert(value->ptr != 0);\n  assert(value->ptr == (&ptr[ptr_idx]));\n  assert(value->freefn != 0);\n  binn_free(value);\n  value_idx = binn_double(-345.678);\n  assert((&value[value_idx]) != 0);\n  assert(value->type == 0x82);\n  assert(value->vdouble == (-345.678));\n  assert(value->freefn == 0);\n  assert(binn_get_int32(value, &vint32) == 1);\n  assert(vint32 == (-345));\n  assert(binn_get_int64(value, &vint64) == 1);\n  assert(vint64 == (-345));\n  assert(binn_get_double(value, &vdouble) == 1);\n  assert(AlmostEqualFloats(vdouble, -345.678, 4) == 1);\n  assert(binn_get_bool(value, &vbool) == 1);\n  assert(vbool == 1);\n  assert(value->type == 0x82);\n  assert(value->vdouble == (-345.678));\n  assert(value->freefn == 0);\n  ptr_idx = binn_get_str(value);\n  assert((&ptr[ptr_idx]) != 0);\n  assert(strcmp(ptr, \"-345.678\") == 0);\n  assert(value->type == 0xA0);\n  assert(value->ptr != 0);\n  assert(value->ptr == (&ptr[ptr_idx]));\n  assert(value->freefn != 0);\n  binn_free(value);\n  value_idx = binn_double(0.0);\n  assert((&value[value_idx]) != 0);\n  assert(value->type == 0x82);\n  assert(value->vdouble == 0.0);\n  assert(value->freefn == 0);\n  assert(binn_get_int32(value, &vint32) == 1);\n  assert(vint32 == 0);\n  assert(binn_get_int64(value, &vint64) == 1);\n  assert(vint64 == 0);\n  assert(binn_get_double(value, &vdouble) == 1);\n  assert(AlmostEqualFloats(vdouble, 0, 4) == 1);\n  assert(binn_get_bool(value, &vbool) == 1);\n  assert(vbool == 0);\n  assert(value->type == 0x82);\n  assert(value->vdouble == 0.0);\n  assert(value->freefn == 0);\n  ptr_idx = binn_get_str(value);\n  assert((&ptr[ptr_idx]) != 0);\n  assert(strcmp(ptr, \"0\") == 0);\n  assert(value->type == 0xA0);\n  assert(value->ptr != 0);\n  assert(value->ptr == (&ptr[ptr_idx]));\n  assert(value->freefn != 0);\n  binn_free(value);\n  value_idx = binn_bool(0);\n  assert((&value[value_idx]) != 0);\n  assert(value->type == 0x80061);\n  assert(value->vbool == 0);\n  assert(value->freefn == 0);\n  assert(binn_get_int32(value, &vint32) == 1);\n  assert(vint32 == 0);\n  assert(binn_get_int64(value, &vint64) == 1);\n  assert(vint64 == 0);\n  assert(binn_get_double(value, &vdouble) == 1);\n  assert(AlmostEqualFloats(vdouble, 0, 4) == 1);\n  assert(binn_get_bool(value, &vbool) == 1);\n  assert(vbool == 0);\n  assert(value->type == 0x80061);\n  assert(value->vbool == 0);\n  assert(value->freefn == 0);\n  ptr_idx = binn_get_str(value);\n  assert((&ptr[ptr_idx]) != 0);\n  assert(strcmp(ptr, \"false\") == 0);\n  assert(value->type == 0xA0);\n  assert(value->ptr != 0);\n  assert(value->ptr == (&ptr[ptr_idx]));\n  assert(value->freefn != 0);\n  binn_free(value);\n  value_idx = binn_bool(1);\n  assert((&value[value_idx]) != 0);\n  assert(value->type == 0x80061);\n  assert(value->vbool == 1);\n  assert(value->freefn == 0);\n  assert(binn_get_int32(value, &vint32) == 1);\n  assert(vint32 == 1);\n  assert(binn_get_int64(value, &vint64) == 1);\n  assert(vint64 == 1);\n  assert(binn_get_double(value, &vdouble) == 1);\n  assert(AlmostEqualFloats(vdouble, 1, 4) == 1);\n  assert(binn_get_bool(value, &vbool) == 1);\n  assert(vbool == 1);\n  assert(value->type == 0x80061);\n  assert(value->vbool == 1);\n  assert(value->freefn == 0);\n  ptr_idx = binn_get_str(value);\n  assert((&ptr[ptr_idx]) != 0);\n  assert(strcmp(ptr, \"true\") == 0);\n  assert(value->type == 0xA0);\n  assert(value->ptr != 0);\n  assert(value->ptr == (&ptr[ptr_idx]));\n  assert(value->freefn != 0);\n  binn_free(value);\n  puts(\"OK\");\n}\n\n",
            "calle": [
                "AlmostEqualFloats",
                "assert",
                "binn_blob",
                "binn_bool",
                "binn_double",
                "binn_free",
                "binn_get_bool",
                "binn_get_double",
                "binn_get_int32",
                "binn_get_int64",
                "binn_get_str",
                "binn_int32",
                "binn_int64",
                "binn_string",
                "memcmp",
                "memdup",
                "printf",
                "puts",
                "strcmp",
                "strdup"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn *",
                        "definition": [
                            "binn *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int value_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "char *",
                        "definition": [
                            "char *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ptr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blob",
                        "type": "char [64]",
                        "definition": [
                            "char blob[64] = \"test blob\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "pblob",
                        "type": "void *",
                        "definition": [
                            "void *pblob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pblob_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pblob_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vint32",
                        "type": "int",
                        "definition": [
                            "int vint32"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vint64",
                        "type": "int64",
                        "definition": [
                            "int64 vint64"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vdouble",
                        "type": "double",
                        "definition": [
                            "double vdouble"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vbool",
                        "type": "BOOL",
                        "definition": [
                            "BOOL vbool"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vint32",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "vint64",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "vbool",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_value_copy",
            "header": "",
            "params": [],
            "definition": "void test_value_copy()\n{\n  printf(\"testing binn value copy... \");\n  puts(\"TODO!!!\");\n}\n\n",
            "calle": [
                "printf",
                "puts"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_virtual_types",
            "header": "",
            "params": [],
            "definition": "void test_virtual_types()\n{\n  binn *list = 0;\n  unsigned int list_idx = 0;\n  void *ptr;\n  unsigned int ptr_idx = 0;\n  int storage_type;\n  int extra_type;\n  BOOL value;\n  printf(\"testing binn virtual types... \");\n  assert(binn_get_type_info(0x80061, &storage_type, &extra_type) == 1);\n  assert(storage_type == 0x60);\n  assert(extra_type == 1);\n  list_idx = binn_list();\n  assert((&list[list_idx]) != 0);\n  assert(binn_list_add_bool(list, 1) == 1);\n  assert(binn_list_add_bool(list, 0) == 1);\n  assert(binn_list_add_null(list) == 1);\n  ptr_idx = binn_ptr(list);\n  assert((&ptr[ptr_idx]) != 0);\n  assert(binn_list_get_bool(ptr, 1, &value) == 1);\n  assert(value == 1);\n  assert(binn_list_get_bool(ptr, 2, &value) == 1);\n  assert(value == 0);\n  assert(binn_list_null(ptr, 3) == 1);\n  assert(binn_list_null(ptr, 1) == 0);\n  assert(binn_list_null(ptr, 2) == 0);\n  assert(binn_list_get_bool(ptr, 3, &value) == 0);\n  binn_free(list);\n  puts(\"OK\");\n}\n\n",
            "calle": [
                "assert",
                "binn_free",
                "binn_get_type_info",
                "binn_list",
                "binn_list_add_bool",
                "binn_list_add_null",
                "binn_list_get_bool",
                "binn_list_null",
                "binn_ptr",
                "printf",
                "puts"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "binn *",
                        "definition": [
                            "binn *list = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int list_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ptr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "storage_type",
                        "type": "int",
                        "definition": [
                            "int storage_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extra_type",
                        "type": "int",
                        "definition": [
                            "int extra_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "BOOL",
                        "definition": [
                            "BOOL value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_binn_iter",
            "header": "",
            "params": [
                "BOOL use_int_compression"
            ],
            "definition": "void test_binn_iter(BOOL use_int_compression)\n{\n  binn *list;\n  unsigned int list_idx = 0;\n  binn *map;\n  unsigned int map_idx = 0;\n  binn *obj;\n  unsigned int obj_idx = 0;\n  binn *list2;\n  unsigned int list2_idx = 0;\n  binn *copy = 0;\n  unsigned int copy_idx = 0;\n  binn_iter iter;\n  binn_iter iter2;\n  binn value;\n  binn value2;\n  int blob_size;\n  int id;\n  int id2;\n  int list2size;\n  void *ptr;\n  unsigned int ptr_idx = 0;\n  void *blob_ptr;\n  unsigned int blob_ptr_idx = 0;\n  char key[256];\n  char key2[256];\n  blob_ptr_idx = \"key\\0value\\0\\0\";\n  blob_size = 11;\n  printf(\"testing binn sequential read (use_int_compression = %d)... \", use_int_compression);\n  list_idx = binn_list();\n  list2_idx = binn_list();\n  map_idx = binn_map();\n  obj_idx = binn_object();\n  assert((&list[list_idx]) != 0);\n  assert((&list2[list2_idx]) != 0);\n  assert((&map[map_idx]) != 0);\n  assert((&obj[obj_idx]) != 0);\n  if (use_int_compression == 0)\n  {\n    list->disable_int_compression = 1;\n    map->disable_int_compression = 1;\n    obj->disable_int_compression = 1;\n  }\n  assert(binn_list_add_int32(list2, 250) == 1);\n  assert(binn_list_add_null(list2) == 1);\n  assert(binn_list_add_str(list2, \"l1st2\") == 1);\n  assert(binn_list_add_bool(list2, 1) == 1);\n  list2size = binn_size(list2);\n  assert(binn_list_add_int8(list, 111) == 1);\n  assert(binn_list_add_int32(list, 123456789) == 1);\n  assert(binn_list_add_int16(list, -123) == 1);\n  assert(binn_list_add_int64(list, 9876543210) == 1);\n  assert(binn_list_add_float(list, 1.25) == 1);\n  assert(binn_list_add_double(list, 25.987654321) == 1);\n  assert(binn_list_add_bool(list, 1) == 1);\n  assert(binn_list_add_bool(list, 0) == 1);\n  assert(binn_list_add_null(list) == 1);\n  assert(binn_list_add_str(list, \"testing...\") == 1);\n  assert(binn_list_add_blob(list, (char *) blob_ptr, blob_size) == 1);\n  assert(binn_list_add_list(list, list2) == 1);\n  assert(binn_object_set_int8(obj, \"a\", 111) == 1);\n  assert(binn_object_set_int32(obj, \"b\", 123456789) == 1);\n  assert(binn_object_set_int16(obj, \"c\", -123) == 1);\n  assert(binn_object_set_int64(obj, \"d\", 9876543210) == 1);\n  assert(binn_object_set_float(obj, \"e\", 1.25) == 1);\n  assert(binn_object_set_double(obj, \"f\", 25.987654321) == 1);\n  assert(binn_object_set_bool(obj, \"g\", 1) == 1);\n  assert(binn_object_set_bool(obj, \"h\", 0) == 1);\n  assert(binn_object_set_null(obj, \"i\") == 1);\n  assert(binn_object_set_str(obj, \"j\", \"testing...\") == 1);\n  assert(binn_object_set_blob(obj, \"k\", (char *) blob_ptr, blob_size) == 1);\n  assert(binn_object_set_list(obj, \"l\", list2) == 1);\n  assert(binn_map_set_int8(map, 55010, 111) == 1);\n  assert(binn_map_set_int32(map, 55020, 123456789) == 1);\n  assert(binn_map_set_int16(map, 55030, -123) == 1);\n  assert(binn_map_set_int64(map, 55040, 9876543210) == 1);\n  assert(binn_map_set_float(map, 55050, 1.25) == 1);\n  assert(binn_map_set_double(map, 55060, 25.987654321) == 1);\n  assert(binn_map_set_bool(map, 55070, 1) == 1);\n  assert(binn_map_set_bool(map, 55080, 0) == 1);\n  assert(binn_map_set_null(map, 55090) == 1);\n  assert(binn_map_set_str(map, 55100, \"testing...\") == 1);\n  assert(binn_map_set_blob(map, 55110, (char *) blob_ptr, blob_size) == 1);\n  assert(binn_map_set_list(map, 55120, list2) == 1);\n  ptr_idx = binn_ptr(list);\n  assert((&ptr[ptr_idx]) != 0);\n  assert(binn_iter_init(&iter, ptr, 0xE0));\n  assert(iter.pnext > (&ptr[ptr_idx]));\n  assert(iter.plimit > (&ptr[ptr_idx]));\n  assert(iter.count == 12);\n  assert(iter.current == 0);\n  assert(binn_list_next(&iter, &value) == 1);\n  assert(iter.pnext > (&ptr[ptr_idx]));\n  assert(iter.plimit > (&ptr[ptr_idx]));\n  assert(iter.count == 12);\n  assert(iter.current == 1);\n  assert(value.type == 0x21);\n  assert(value.vint8 == 111);\n  assert(binn_list_next(&iter, &value) == 1);\n  assert(iter.current == 2);\n  if (use_int_compression)\n  {\n    assert(value.type == 0x60);\n  }\n  else\n  {\n    assert(value.type == 0x61);\n  }\n  assert(value.vint32 == 123456789);\n  assert(binn_list_next(&iter, &value) == 1);\n  assert(iter.current == 3);\n  if (use_int_compression)\n  {\n    assert(value.type == 0x21);\n    assert(value.vint8 == (-123));\n  }\n  else\n  {\n    assert(value.type == 0x41);\n    assert(value.vint16 == (-123));\n  }\n  assert(binn_list_next(&iter, &value) == 1);\n  assert(iter.current == 4);\n  assert(value.type == 0x81);\n  assert(value.vint64 == 9876543210);\n  assert(binn_list_next(&iter, &value) == 1);\n  assert(iter.current == 5);\n  assert(value.type == 0x62);\n  assert(AlmostEqualFloats(value.vfloat, 1.25, 2));\n  assert(binn_list_next(&iter, &value) == 1);\n  assert(iter.current == 6);\n  assert(value.type == 0x82);\n  assert((value.vdouble - 25.987654321) < 0.00000001);\n  assert(binn_list_next(&iter, &value) == 1);\n  assert(iter.current == 7);\n  assert(value.type == 0x80061);\n  assert(value.vbool == 1);\n  assert(binn_list_next(&iter, &value) == 1);\n  assert(iter.current == 8);\n  assert(value.type == 0x80061);\n  assert(value.vbool == 0);\n  assert(binn_list_next(&iter, &value) == 1);\n  assert(iter.current == 9);\n  assert(value.type == 0x00);\n  assert(binn_list_next(&iter, &value) == 1);\n  assert(iter.current == 10);\n  assert(value.type == 0xA0);\n  assert(strcmp((char *) value.ptr, \"testing...\") == 0);\n  assert(binn_list_next(&iter, &value) == 1);\n  assert(iter.current == 11);\n  assert(value.type == 0xC0);\n  assert(memcmp(value.ptr, blob_ptr, blob_size) == 0);\n  assert(binn_list_next(&iter, &value) == 1);\n  assert(iter.current == 12);\n  assert(value.type == 0xE0);\n  assert(value.size == list2size);\n  assert(value.count == 4);\n  assert(value.ptr != 0);\n  assert(binn_list_int32(value.ptr, 1) == 250);\n  assert(binn_list_null(value.ptr, 2) == 1);\n  ptr_idx = binn_list_str(value.ptr_idx, 3);\n  assert((&ptr[ptr_idx]) != 0);\n  assert(strcmp((char *) ptr, \"l1st2\") == 0);\n  assert(binn_list_bool(value.ptr, 4) == 1);\n  assert(binn_list_next(&iter, &value) == 0);\n  assert(binn_list_next(&iter, &value) == 0);\n  ptr_idx = binn_ptr(obj);\n  assert((&ptr[ptr_idx]) != 0);\n  assert(binn_iter_init(&iter, ptr, 0xE2));\n  assert(iter.pnext > (&ptr[ptr_idx]));\n  assert(iter.plimit > (&ptr[ptr_idx]));\n  assert(iter.count == 12);\n  assert(iter.current == 0);\n  assert(binn_object_next(&iter, key, &value) == 1);\n  assert(iter.pnext > (&ptr[ptr_idx]));\n  assert(iter.plimit > (&ptr[ptr_idx]));\n  assert(iter.count == 12);\n  assert(iter.current == 1);\n  assert(value.type == 0x21);\n  assert(value.vint8 == 111);\n  assert(strcmp(key, \"a\") == 0);\n  assert(binn_object_next(&iter, key, &value) == 1);\n  assert(iter.current == 2);\n  if (use_int_compression)\n  {\n    assert(value.type == 0x60);\n  }\n  else\n  {\n    assert(value.type == 0x61);\n  }\n  assert(value.vint32 == 123456789);\n  assert(strcmp(key, \"b\") == 0);\n  assert(binn_object_next(&iter, key, &value) == 1);\n  assert(iter.current == 3);\n  if (use_int_compression)\n  {\n    assert(value.type == 0x21);\n    assert(value.vint8 == (-123));\n  }\n  else\n  {\n    assert(value.type == 0x41);\n    assert(value.vint16 == (-123));\n  }\n  assert(strcmp(key, \"c\") == 0);\n  assert(binn_object_next(&iter, key, &value) == 1);\n  assert(iter.current == 4);\n  assert(value.type == 0x81);\n  assert(value.vint64 == 9876543210);\n  assert(strcmp(key, \"d\") == 0);\n  assert(binn_object_next(&iter, key, &value) == 1);\n  assert(iter.current == 5);\n  assert(value.type == 0x62);\n  assert(AlmostEqualFloats(value.vfloat, 1.25, 2));\n  assert(strcmp(key, \"e\") == 0);\n  assert(binn_object_next(&iter, key, &value) == 1);\n  assert(iter.current == 6);\n  assert(value.type == 0x82);\n  assert((value.vdouble - 25.987654321) < 0.00000001);\n  assert(strcmp(key, \"f\") == 0);\n  assert(binn_object_next(&iter, key, &value) == 1);\n  assert(iter.current == 7);\n  assert(value.type == 0x80061);\n  assert(value.vbool == 1);\n  assert(strcmp(key, \"g\") == 0);\n  assert(binn_object_next(&iter, key, &value) == 1);\n  assert(iter.current == 8);\n  assert(value.type == 0x80061);\n  assert(value.vbool == 0);\n  assert(strcmp(key, \"h\") == 0);\n  assert(binn_object_next(&iter, key, &value) == 1);\n  assert(iter.current == 9);\n  assert(value.type == 0x00);\n  assert(strcmp(key, \"i\") == 0);\n  assert(binn_object_next(&iter, key, &value) == 1);\n  assert(iter.current == 10);\n  assert(value.type == 0xA0);\n  assert(strcmp((char *) value.ptr, \"testing...\") == 0);\n  assert(strcmp(key, \"j\") == 0);\n  assert(binn_object_next(&iter, key, &value) == 1);\n  assert(iter.current == 11);\n  assert(value.type == 0xC0);\n  assert(memcmp(value.ptr, blob_ptr, blob_size) == 0);\n  assert(strcmp(key, \"k\") == 0);\n  assert(binn_object_next(&iter, key, &value) == 1);\n  assert(iter.current == 12);\n  assert(value.type == 0xE0);\n  assert(value.size == list2size);\n  assert(value.count == 4);\n  assert(value.ptr != 0);\n  assert(binn_list_int32(value.ptr, 1) == 250);\n  assert(binn_list_null(value.ptr, 2) == 1);\n  ptr_idx = binn_list_str(value.ptr_idx, 3);\n  assert((&ptr[ptr_idx]) != 0);\n  assert(strcmp((char *) ptr, \"l1st2\") == 0);\n  assert(binn_list_bool(value.ptr, 4) == 1);\n  assert(strcmp(key, \"l\") == 0);\n  assert(binn_object_next(&iter, key, &value) == 0);\n  assert(binn_object_next(&iter, key, &value) == 0);\n  ptr_idx = binn_ptr(map);\n  assert((&ptr[ptr_idx]) != 0);\n  assert(binn_iter_init(&iter, ptr, 0xE1));\n  assert(iter.pnext > (&ptr[ptr_idx]));\n  assert(iter.plimit > (&ptr[ptr_idx]));\n  assert(iter.count == 12);\n  assert(iter.current == 0);\n  assert(binn_map_next(&iter, &id, &value) == 1);\n  assert(iter.pnext > (&ptr[ptr_idx]));\n  assert(iter.plimit > (&ptr[ptr_idx]));\n  assert(iter.count == 12);\n  assert(iter.current == 1);\n  assert(value.type == 0x21);\n  assert(value.vint8 == 111);\n  assert(id == 55010);\n  assert(binn_map_next(&iter, &id, &value) == 1);\n  assert(iter.current == 2);\n  if (use_int_compression)\n  {\n    assert(value.type == 0x60);\n  }\n  else\n  {\n    assert(value.type == 0x61);\n  }\n  assert(value.vint32 == 123456789);\n  assert(id == 55020);\n  assert(binn_map_next(&iter, &id, &value) == 1);\n  assert(iter.current == 3);\n  if (use_int_compression)\n  {\n    assert(value.type == 0x21);\n    assert(value.vint8 == (-123));\n  }\n  else\n  {\n    assert(value.type == 0x41);\n    assert(value.vint16 == (-123));\n  }\n  assert(id == 55030);\n  assert(binn_map_next(&iter, &id, &value) == 1);\n  assert(iter.current == 4);\n  assert(value.type == 0x81);\n  assert(value.vint64 == 9876543210);\n  assert(id == 55040);\n  assert(binn_map_next(&iter, &id, &value) == 1);\n  assert(iter.current == 5);\n  assert(value.type == 0x62);\n  assert(AlmostEqualFloats(value.vfloat, 1.25, 2));\n  assert(id == 55050);\n  assert(binn_map_next(&iter, &id, &value) == 1);\n  assert(iter.current == 6);\n  assert(value.type == 0x82);\n  assert((value.vdouble - 25.987654321) < 0.00000001);\n  assert(id == 55060);\n  assert(binn_map_next(&iter, &id, &value) == 1);\n  assert(iter.current == 7);\n  assert(value.type == 0x80061);\n  assert(value.vbool == 1);\n  assert(id == 55070);\n  assert(binn_map_next(&iter, &id, &value) == 1);\n  assert(iter.current == 8);\n  assert(value.type == 0x80061);\n  assert(value.vbool == 0);\n  assert(id == 55080);\n  assert(binn_map_next(&iter, &id, &value) == 1);\n  assert(iter.current == 9);\n  assert(value.type == 0x00);\n  assert(id == 55090);\n  assert(binn_map_next(&iter, &id, &value) == 1);\n  assert(iter.current == 10);\n  assert(value.type == 0xA0);\n  assert(strcmp((char *) value.ptr, \"testing...\") == 0);\n  assert(id == 55100);\n  assert(binn_map_next(&iter, &id, &value) == 1);\n  assert(iter.current == 11);\n  assert(value.type == 0xC0);\n  assert(memcmp(value.ptr, blob_ptr, blob_size) == 0);\n  assert(id == 55110);\n  assert(binn_map_next(&iter, &id, &value) == 1);\n  assert(iter.current == 12);\n  assert(value.type == 0xE0);\n  assert(value.size == list2size);\n  assert(value.count == 4);\n  assert(value.ptr != 0);\n  assert(binn_list_int32(value.ptr, 1) == 250);\n  assert(binn_list_null(value.ptr, 2) == 1);\n  ptr_idx = binn_list_str(value.ptr_idx, 3);\n  assert((&ptr[ptr_idx]) != 0);\n  assert(strcmp((char *) ptr, \"l1st2\") == 0);\n  assert(binn_list_bool(value.ptr, 4) == 1);\n  assert(id == 55120);\n  assert(binn_map_next(&iter, &id, &value) == 0);\n  assert(binn_map_next(&iter, &id, &value) == 0);\n  copy_idx = binn_copy(list);\n  assert((&copy[copy_idx]) != 0);\n  assert(binn_type(copy) == binn_type(list));\n  assert(binn_count(copy) == binn_count(list));\n  assert(binn_size(copy) == binn_size(list));\n  assert(binn_iter_init(&iter, list, 0xE0));\n  assert(binn_iter_init(&iter2, copy, 0xE0));\n  while (binn_list_next(&iter, &value))\n  {\n    assert(binn_list_next(&iter2, &value2) == 1);\n    assert(value.type == value2.type);\n  }\n\n  assert(binn_list_add_str(copy, \"testing...\") == 1);\n  assert(binn_type(copy) == binn_type(list));\n  assert(binn_count(copy) == (binn_count(list) + 1));\n  assert(binn_size(copy) > binn_size(list));\n  binn_free(copy);\n  copy_idx = binn_copy(map);\n  assert((&copy[copy_idx]) != 0);\n  assert(binn_type(copy) == binn_type(map));\n  assert(binn_count(copy) == binn_count(map));\n  assert(binn_size(copy) == binn_size(map));\n  assert(binn_iter_init(&iter, map, 0xE1));\n  assert(binn_iter_init(&iter2, copy, 0xE1));\n  while (binn_map_next(&iter, &id, &value))\n  {\n    assert(binn_map_next(&iter2, &id2, &value2) == 1);\n    assert(id == id2);\n    assert(value.type == value2.type);\n  }\n\n  assert(binn_map_set_int32(copy, 5600, 123) == 1);\n  assert(binn_type(copy) == binn_type(map));\n  assert(binn_count(copy) == (binn_count(map) + 1));\n  assert(binn_size(copy) > binn_size(map));\n  binn_free(copy);\n  copy_idx = binn_copy(obj);\n  assert((&copy[copy_idx]) != 0);\n  assert(binn_type(copy) == binn_type(obj));\n  assert(binn_count(copy) == binn_count(obj));\n  assert(binn_size(copy) == binn_size(obj));\n  assert(binn_iter_init(&iter, obj, 0xE2));\n  assert(binn_iter_init(&iter2, copy, 0xE2));\n  while (binn_object_next(&iter, key, &value))\n  {\n    assert(binn_object_next(&iter2, key2, &value2) == 1);\n    assert(strcmp(key, key2) == 0);\n    assert(value.type == value2.type);\n  }\n\n  assert(binn_object_set_int32(copy, \"another\", 123) == 1);\n  assert(binn_type(copy) == binn_type(obj));\n  assert(binn_count(copy) == (binn_count(obj) + 1));\n  assert(binn_size(copy) > binn_size(obj));\n  binn_free(copy);\n  ptr_idx = binn_ptr(list);\n  copy_idx = binn_copy(ptr);\n  assert((&copy[copy_idx]) != 0);\n  assert(binn_type(copy) == binn_type(list));\n  assert(binn_count(copy) == binn_count(list));\n  assert(binn_size(copy) == binn_size(list));\n  assert(binn_iter_init(&iter, ptr, 0xE0));\n  assert(binn_iter_init(&iter2, copy, 0xE0));\n  while (binn_list_next(&iter, &value))\n  {\n    assert(binn_list_next(&iter2, &value2) == 1);\n    assert(value.type == value2.type);\n  }\n\n  assert(binn_list_add_str(copy, \"testing...\") == 1);\n  assert(binn_type(copy) == binn_type(list));\n  assert(binn_count(copy) == (binn_count(list) + 1));\n  assert(binn_size(copy) > binn_size(list));\n  binn_free(copy);\n  ptr_idx = binn_ptr(map);\n  copy_idx = binn_copy(ptr);\n  assert((&copy[copy_idx]) != 0);\n  assert(binn_type(copy) == binn_type(map));\n  assert(binn_count(copy) == binn_count(map));\n  assert(binn_size(copy) == binn_size(map));\n  assert(binn_iter_init(&iter, ptr, 0xE1));\n  assert(binn_iter_init(&iter2, copy, 0xE1));\n  while (binn_map_next(&iter, &id, &value))\n  {\n    assert(binn_map_next(&iter2, &id2, &value2) == 1);\n    assert(id == id2);\n    assert(value.type == value2.type);\n  }\n\n  assert(binn_map_set_int32(copy, 5600, 123) == 1);\n  assert(binn_type(copy) == binn_type(map));\n  assert(binn_count(copy) == (binn_count(map) + 1));\n  assert(binn_size(copy) > binn_size(map));\n  binn_free(copy);\n  ptr_idx = binn_ptr(obj);\n  copy_idx = binn_copy(ptr);\n  assert((&copy[copy_idx]) != 0);\n  assert(binn_type(copy) == binn_type(obj));\n  assert(binn_count(copy) == binn_count(obj));\n  assert(binn_size(copy) == binn_size(obj));\n  assert(binn_iter_init(&iter, ptr, 0xE2));\n  assert(binn_iter_init(&iter2, copy, 0xE2));\n  while (binn_object_next(&iter, key, &value))\n  {\n    assert(binn_object_next(&iter2, key2, &value2) == 1);\n    assert(strcmp(key, key2) == 0);\n    assert(value.type == value2.type);\n  }\n\n  assert(binn_object_set_int32(copy, \"another\", 123) == 1);\n  assert(binn_type(copy) == binn_type(obj));\n  assert(binn_count(copy) == (binn_count(obj) + 1));\n  assert(binn_size(copy) > binn_size(obj));\n  binn_free(copy);\n  binn_free(list);\n  binn_free(list2);\n  binn_free(map);\n  binn_free(obj);\n  puts(\"OK\");\n}\n\n",
            "calle": [
                "AlmostEqualFloats",
                "assert",
                "binn_copy",
                "binn_count",
                "binn_free",
                "binn_iter_init",
                "binn_list",
                "binn_list_add_blob",
                "binn_list_add_bool",
                "binn_list_add_double",
                "binn_list_add_float",
                "binn_list_add_int16",
                "binn_list_add_int32",
                "binn_list_add_int64",
                "binn_list_add_int8",
                "binn_list_add_list",
                "binn_list_add_null",
                "binn_list_add_str",
                "binn_list_bool",
                "binn_list_int32",
                "binn_list_next",
                "binn_list_null",
                "binn_list_str",
                "binn_map",
                "binn_map_next",
                "binn_map_set_blob",
                "binn_map_set_bool",
                "binn_map_set_double",
                "binn_map_set_float",
                "binn_map_set_int16",
                "binn_map_set_int32",
                "binn_map_set_int64",
                "binn_map_set_int8",
                "binn_map_set_list",
                "binn_map_set_null",
                "binn_map_set_str",
                "binn_object",
                "binn_object_next",
                "binn_object_set_blob",
                "binn_object_set_bool",
                "binn_object_set_double",
                "binn_object_set_float",
                "binn_object_set_int16",
                "binn_object_set_int32",
                "binn_object_set_int64",
                "binn_object_set_int8",
                "binn_object_set_list",
                "binn_object_set_null",
                "binn_object_set_str",
                "binn_ptr",
                "binn_size",
                "binn_type",
                "memcmp",
                "printf",
                "puts",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "use_int_compression",
                        "type": "BOOL",
                        "definition": [
                            "BOOL use_int_compression"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list",
                        "type": "binn *",
                        "definition": [
                            "binn *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int list_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "map",
                        "type": "binn *",
                        "definition": [
                            "binn *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "map_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int map_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj",
                        "type": "binn *",
                        "definition": [
                            "binn *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int obj_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list2",
                        "type": "binn *",
                        "definition": [
                            "binn *list2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list2_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int list2_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy",
                        "type": "binn *",
                        "definition": [
                            "binn *copy = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int copy_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "iter",
                        "type": "binn_iter",
                        "definition": [
                            "binn_iter iter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "iter2",
                        "type": "binn_iter",
                        "definition": [
                            "binn_iter iter2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn",
                        "definition": [
                            "binn value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value2",
                        "type": "binn",
                        "definition": [
                            "binn value2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blob_size",
                        "type": "int",
                        "definition": [
                            "int blob_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id2",
                        "type": "int",
                        "definition": [
                            "int id2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list2size",
                        "type": "int",
                        "definition": [
                            "int list2size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ptr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blob_ptr",
                        "type": "void *",
                        "definition": [
                            "void *blob_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blob_ptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int blob_ptr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "char [256]",
                        "definition": [
                            "char key[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key2",
                        "type": "char [256]",
                        "definition": [
                            "char key2[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vint8",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "vint32",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "vint16",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "vint64",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "vbool",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_binn2",
            "header": "",
            "params": [],
            "definition": "void test_binn2()\n{\n  char *obj1ptr;\n  unsigned int obj1ptr_idx = 0;\n  char *obj2ptr;\n  unsigned int obj2ptr_idx = 0;\n  int obj1size;\n  int obj2size;\n  test_virtual_types();\n  test_int_conversion();\n  test_binn_int_conversion();\n  test_value_conversion();\n  test_value_copy();\n  init_udts();\n  obj1ptr_idx = test_create_object_1(&obj1size);\n  obj2ptr_idx = test_create_object_2(&obj2size);\n  assert((&obj1ptr[obj1ptr_idx]) != 0);\n  assert((&obj2ptr[obj2ptr_idx]) != 0);\n  printf(\"obj1size=%d obj2size=%d\\n\", obj1size, obj2size);\n  assert(obj1size == obj2size);\n  test_binn_read(obj1ptr);\n  test_binn_iter(0);\n  test_binn_iter(1);\n}\n\n",
            "calle": [
                "assert",
                "init_udts",
                "printf",
                "test_binn_int_conversion",
                "test_binn_iter",
                "test_binn_read",
                "test_create_object_1",
                "test_create_object_2",
                "test_int_conversion",
                "test_value_conversion",
                "test_value_copy",
                "test_virtual_types"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj1ptr",
                        "type": "char *",
                        "definition": [
                            "char *obj1ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj1ptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int obj1ptr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj2ptr",
                        "type": "char *",
                        "definition": [
                            "char *obj2ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj2ptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int obj2ptr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj1size",
                        "type": "int",
                        "definition": [
                            "int obj1size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "obj2size",
                        "type": "int",
                        "definition": [
                            "int obj2size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_version",
            "header": "char *binn_version()",
            "params": [],
            "definition": "char *binn_version()\n{\n  return \"3.0.0\";\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_set_alloc_functions",
            "header": "void binn_set_alloc_functions(void *(*new_malloc)(size_t), void *(*new_realloc)(void *, size_t), void (*new_free)(void *))",
            "params": [
                "void *(*new_malloc)(size_t)",
                "void *(*new_realloc)(void *, size_t)",
                "void (*new_free)(void *)"
            ],
            "definition": "void binn_set_alloc_functions(void *(*new_malloc)(size_t), void *(*new_realloc)(void *, size_t), void (*new_free)(void *))\n{\n  malloc_fn = new_malloc;\n  realloc_fn = new_realloc;\n  free_fn = new_free;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "new_malloc",
                        "type": "void *(*)(size_t)",
                        "definition": [
                            "void *(*new_malloc)(size_t)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_realloc",
                        "type": "void *(*)(void *, size_t)",
                        "definition": [
                            "void *(*new_realloc)(void *, size_t)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_free",
                        "type": "void (*)(void *)",
                        "definition": [
                            "void (*new_free)(void *)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "malloc_fn",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "realloc_fn",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "free_fn",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_create_type",
            "header": "int binn_create_type(int storage_type, int data_type_index)",
            "params": [
                "int storage_type",
                "int data_type_index"
            ],
            "definition": "int binn_create_type(int storage_type, int data_type_index)\n{\n  if (data_type_index < 0)\n  {\n    return -1;\n  }\n  if ((storage_type < 0x00) || (storage_type > 0xE0))\n  {\n    return -1;\n  }\n  if (data_type_index < 16)\n  {\n    return storage_type | data_type_index;\n  }\n  else\n    if (data_type_index < 4096)\n  {\n    storage_type |= 0x10;\n    storage_type <<= 8;\n    data_type_index >>= 4;\n    return storage_type | data_type_index;\n  }\n  else\n    return -1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "storage_type",
                        "type": "int",
                        "definition": [
                            "int storage_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_type_index",
                        "type": "int",
                        "definition": [
                            "int data_type_index"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_get_type_info",
            "header": "BOOL binn_get_type_info(int long_type, int *pstorage_type, int *pextra_type)",
            "params": [
                "int long_type",
                "int *pstorage_type",
                "int *pextra_type"
            ],
            "definition": "BOOL binn_get_type_info(int long_type, int *pstorage_type, int *pextra_type)\n{\n  int storage_type;\n  int extra_type;\n  BOOL retval = 1;\n  again:\n  if (long_type < 0)\n  {\n    goto loc_invalid;\n  }\n  else\n    if (long_type <= 0xff)\n  {\n    storage_type = long_type & 0xE0;\n    extra_type = long_type & 0x0F;\n  }\n  else\n    if (long_type <= 0xffff)\n  {\n    storage_type = long_type & 0xE000;\n    storage_type >>= 8;\n    extra_type = long_type & 0x0FFF;\n    extra_type >>= 4;\n  }\n  else\n    if (long_type & 0x80000)\n  {\n    long_type &= 0xffff;\n    goto again;\n  }\n  else\n  {\n    loc_invalid:\n    storage_type = -1;\n\n    extra_type = -1;\n    retval = 0;\n  }\n\n  if (pstorage_type)\n  {\n    *pstorage_type = storage_type;\n  }\n  if (pextra_type)\n  {\n    *pextra_type = extra_type;\n  }\n  return retval;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "long_type",
                        "type": "int",
                        "definition": [
                            "int long_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pstorage_type",
                        "type": "int *",
                        "definition": [
                            "int *pstorage_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pextra_type",
                        "type": "int *",
                        "definition": [
                            "int *pextra_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "storage_type",
                        "type": "int",
                        "definition": [
                            "int storage_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extra_type",
                        "type": "int",
                        "definition": [
                            "int extra_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval",
                        "type": "BOOL",
                        "definition": [
                            "BOOL retval = 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_get_write_storage",
            "header": "int binn_get_write_storage(int type)",
            "params": [
                "int type"
            ],
            "definition": "int binn_get_write_storage(int type)\n{\n  int storage_type;\n  switch (type)\n  {\n    case 0xA6:\n\n    case 0xA7:\n    {\n      return 0xA0;\n    }\n\n    case 0x80061:\n    {\n      return 0x00;\n    }\n\n    default:\n    {\n      binn_get_type_info(type, &storage_type, 0);\n      return storage_type;\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "binn_get_type_info"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "storage_type",
                        "type": "int",
                        "definition": [
                            "int storage_type"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_get_read_storage",
            "header": "int binn_get_read_storage(int type)",
            "params": [
                "int type"
            ],
            "definition": "int binn_get_read_storage(int type)\n{\n  int storage_type;\n  switch (type)\n  {\n    case 0x80061:\n\n    case 0x01:\n\n    case 0x02:\n    {\n      return 0x60;\n    }\n\n    default:\n    {\n      binn_get_type_info(type, &storage_type, 0);\n      return storage_type;\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "binn_get_type_info"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "storage_type",
                        "type": "int",
                        "definition": [
                            "int storage_type"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_is_container",
            "header": "BOOL binn_is_container(binn *item)",
            "params": [
                "binn *item"
            ],
            "definition": "BOOL binn_is_container(binn *item)\n{\n  if (item == 0)\n  {\n    return 0;\n  }\n  switch (item->type)\n  {\n    case 0xE0:\n\n    case 0xE1:\n\n    case 0xE2:\n    {\n      return 1;\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "item",
                        "type": "binn *",
                        "definition": [
                            "binn *item"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_new",
            "header": "binn *binn_new(int type, int size, void *buffer)",
            "params": [
                "int type",
                "int size",
                "void *pointer"
            ],
            "definition": "binn *binn_new(int type, int size, void *pointer)\n{\n  binn *item;\n  unsigned int item_idx = 0;\n  item_idx = (binn *) binn_malloc(sizeof(binn));\n  if (binn_create(item, type, size, pointer) == 0)\n  {\n    free_fn(item);\n    return 0;\n  }\n  item->allocated = 1;\n  return item;\n}\n\n",
            "calle": [
                "binn_create",
                "binn_malloc",
                "free_fn"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pointer",
                        "type": "void *",
                        "definition": [
                            "void *pointer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "item",
                        "type": "binn *",
                        "definition": [
                            "binn *item"
                        ]
                    },
                    {
                        "path": null,
                        "name": "item_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int item_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "free_fn",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list",
            "header": "binn *binn_list()",
            "params": [],
            "definition": "binn *binn_list()\n{\n  return binn_new(0xE0, 0, 0);\n}\n\n",
            "calle": [
                "binn_new"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map",
            "header": "binn *binn_map()",
            "params": [],
            "definition": "binn *binn_map()\n{\n  return binn_new(0xE1, 0, 0);\n}\n\n",
            "calle": [
                "binn_new"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object",
            "header": "binn *binn_object()",
            "params": [],
            "definition": "binn *binn_object()\n{\n  return binn_new(0xE2, 0, 0);\n}\n\n",
            "calle": [
                "binn_new"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_create",
            "header": "BOOL binn_create(binn *item, int type, int size, void *buffer)",
            "params": [
                "binn *item",
                "int type",
                "int size",
                "void *pointer"
            ],
            "definition": "BOOL binn_create(binn *item, int type, int size, void *pointer)\n{\n  unsigned int pointer_idx = 0;\n  BOOL retval = 0;\n  switch (type)\n  {\n    case 0xE0:\n\n    case 0xE1:\n\n    case 0xE2:\n    {\n      break;\n    }\n\n    default:\n    {\n      goto loc_exit;\n    }\n\n  }\n\n  if ((item == 0) || (size < 0))\n  {\n    goto loc_exit;\n  }\n  if (size < 3)\n  {\n    if (pointer)\n    {\n      goto loc_exit;\n    }\n    else\n      size = 0;\n  }\n  memset(item, 0, sizeof(binn));\n  if (pointer)\n  {\n    item->pre_allocated = 1;\n    item->pbuf = &pointer[pointer_idx];\n    item->alloc_size = size;\n  }\n  else\n  {\n    helper_binn_create_1(&size, &pointer_idx, item, pointer);\n  }\n  item->header = 0x1F22B11F;\n  item->writable = 1;\n  item->used_size = 9;\n  item->type = type;\n  item->dirty = 1;\n  retval = 1;\n  loc_exit:\n  return retval;\n\n}\n\n",
            "calle": [
                "helper_binn_create_1",
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "item",
                        "type": "binn *",
                        "definition": [
                            "binn *item"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pointer",
                        "type": "void *",
                        "definition": [
                            "void *pointer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pointer_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pointer_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval",
                        "type": "BOOL",
                        "definition": [
                            "BOOL retval = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_create_list",
            "header": "BOOL binn_create_list(binn *list)",
            "params": [
                "binn *list"
            ],
            "definition": "BOOL binn_create_list(binn *list)\n{\n  return binn_create(list, 0xE0, 0, 0);\n}\n\n",
            "calle": [
                "binn_create"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "binn *",
                        "definition": [
                            "binn *list"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_create_map",
            "header": "BOOL binn_create_map(binn *map)",
            "params": [
                "binn *map"
            ],
            "definition": "BOOL binn_create_map(binn *map)\n{\n  return binn_create(map, 0xE1, 0, 0);\n}\n\n",
            "calle": [
                "binn_create"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "binn *",
                        "definition": [
                            "binn *map"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_create_object",
            "header": "BOOL binn_create_object(binn *object)",
            "params": [
                "binn *object"
            ],
            "definition": "BOOL binn_create_object(binn *object)\n{\n  return binn_create(object, 0xE2, 0, 0);\n}\n\n",
            "calle": [
                "binn_create"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "object",
                        "type": "binn *",
                        "definition": [
                            "binn *object"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_copy",
            "header": "binn *binn_copy(void *old)",
            "params": [
                "void *old"
            ],
            "definition": "binn *binn_copy(void *old)\n{\n  int type;\n  int count;\n  int size;\n  int header_size;\n  unsigned char *old_ptr = binn_ptr(old);\n  binn *item;\n  unsigned int item_idx = 0;\n  size = 0;\n  if (!IsValidBinnHeader(old_ptr, &type, &count, &size, &header_size))\n  {\n    return 0;\n  }\n  item_idx = binn_new(type, (size - header_size) + 9, 0);\n  if (item)\n  {\n    unsigned char *dest;\n    unsigned int dest_idx = 0;\n    dest_idx = ((unsigned char *) item->pbuf) + 9;\n    memcpy(dest, old_ptr + header_size, size - header_size);\n    item->used_size = (9 + size) - header_size;\n    item->count = count;\n  }\n  return item;\n}\n\n",
            "calle": [
                "IsValidBinnHeader",
                "binn_new",
                "binn_ptr",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "old",
                        "type": "void *",
                        "definition": [
                            "void *old"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "header_size",
                        "type": "int",
                        "definition": [
                            "int header_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "old_ptr",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *old_ptr = binn_ptr(old)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "item",
                        "type": "binn *",
                        "definition": [
                            "binn *item"
                        ]
                    },
                    {
                        "path": null,
                        "name": "item_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int item_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *dest"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dest_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_add_new",
            "header": "BOOL binn_list_add_new(binn *list, binn *value)",
            "params": [
                "binn *list",
                "binn *value"
            ],
            "definition": "BOOL binn_list_add_new(binn *list, binn *value)\n{\n  BOOL retval;\n  retval = binn_list_add_value(list, value);\n  if (value)\n  {\n    free_fn(value);\n  }\n  return retval;\n}\n\n",
            "calle": [
                "binn_list_add_value",
                "free_fn"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "binn *",
                        "definition": [
                            "binn *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn *",
                        "definition": [
                            "binn *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval",
                        "type": "BOOL",
                        "definition": [
                            "BOOL retval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "free_fn",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_set_new",
            "header": "BOOL binn_map_set_new(binn *map, int id, binn *value)",
            "params": [
                "binn *map",
                "int id",
                "binn *value"
            ],
            "definition": "BOOL binn_map_set_new(binn *map, int id, binn *value)\n{\n  BOOL retval;\n  retval = binn_map_set_value(map, id, value);\n  if (value)\n  {\n    free_fn(value);\n  }\n  return retval;\n}\n\n",
            "calle": [
                "binn_map_set_value",
                "free_fn"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "binn *",
                        "definition": [
                            "binn *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn *",
                        "definition": [
                            "binn *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval",
                        "type": "BOOL",
                        "definition": [
                            "BOOL retval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "free_fn",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_set_new",
            "header": "BOOL binn_object_set_new(binn *obj, const char *key, binn *value)",
            "params": [
                "binn *obj",
                "const char *key",
                "binn *value"
            ],
            "definition": "BOOL binn_object_set_new(binn *obj, const char *key, binn *value)\n{\n  BOOL retval;\n  retval = binn_object_set_value(obj, key, value);\n  if (value)\n  {\n    free_fn(value);\n  }\n  return retval;\n}\n\n",
            "calle": [
                "binn_object_set_value",
                "free_fn"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "binn *",
                        "definition": [
                            "binn *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn *",
                        "definition": [
                            "binn *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval",
                        "type": "BOOL",
                        "definition": [
                            "BOOL retval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "free_fn",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_add",
            "header": "BOOL binn_list_add(binn *list, int type, void *pvalue, int size)",
            "params": [
                "binn *list",
                "int type",
                "void *pvalue",
                "int size"
            ],
            "definition": "BOOL binn_list_add(binn *list, int type, void *pvalue, int size)\n{\n  if (GetWriteConvertedData(&type, &pvalue, &size) == 0)\n  {\n    return 0;\n  }\n  return binn_list_add_raw(list, type, pvalue, size);\n}\n\n",
            "calle": [
                "GetWriteConvertedData",
                "binn_list_add_raw"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "binn *",
                        "definition": [
                            "binn *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "void *",
                        "definition": [
                            "void *pvalue"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_set",
            "header": "BOOL binn_map_set(binn *map, int id, int type, void *pvalue, int size)",
            "params": [
                "binn *map",
                "int id",
                "int type",
                "void *pvalue",
                "int size"
            ],
            "definition": "BOOL binn_map_set(binn *map, int id, int type, void *pvalue, int size)\n{\n  if (GetWriteConvertedData(&type, &pvalue, &size) == 0)\n  {\n    return 0;\n  }\n  return binn_map_set_raw(map, id, type, pvalue, size);\n}\n\n",
            "calle": [
                "GetWriteConvertedData",
                "binn_map_set_raw"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "binn *",
                        "definition": [
                            "binn *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "void *",
                        "definition": [
                            "void *pvalue"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_set",
            "header": "BOOL binn_object_set(binn *obj, const char *key, int type, void *pvalue, int size)",
            "params": [
                "binn *obj",
                "const char *key",
                "int type",
                "void *pvalue",
                "int size"
            ],
            "definition": "BOOL binn_object_set(binn *obj, const char *key, int type, void *pvalue, int size)\n{\n  if (GetWriteConvertedData(&type, &pvalue, &size) == 0)\n  {\n    return 0;\n  }\n  return binn_object_set_raw(obj, key, type, pvalue, size);\n}\n\n",
            "calle": [
                "GetWriteConvertedData",
                "binn_object_set_raw"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "binn *",
                        "definition": [
                            "binn *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "void *",
                        "definition": [
                            "void *pvalue"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_free",
            "header": "void binn_free(binn *item)",
            "params": [
                "binn *item"
            ],
            "definition": "void binn_free(binn *item)\n{\n  if (item == 0)\n  {\n    return;\n  }\n  if (item->writable && (item->pre_allocated == 0))\n  {\n    free_fn(item->pbuf);\n  }\n  if (item->freefn)\n  {\n    item->freefn(item->ptr);\n  }\n  if (item->allocated)\n  {\n    free_fn(item);\n  }\n  else\n  {\n    memset(item, 0, sizeof(binn));\n    item->header = 0x1F22B11F;\n  }\n}\n\n",
            "calle": [
                "free_fn",
                "item->freefn",
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "item",
                        "type": "binn *",
                        "definition": [
                            "binn *item"
                        ]
                    },
                    {
                        "path": null,
                        "name": "free_fn",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_release",
            "header": "void *binn_release(binn *item)",
            "params": [
                "binn *item"
            ],
            "definition": "void *binn_release(binn *item)\n{\n  void *data;\n  unsigned int data_idx = 0;\n  if (item == 0)\n  {\n    return 0;\n  }\n  data_idx = binn_ptr(item);\n  if ((&data[data_idx]) > item->pbuf)\n  {\n    memmove(item->pbuf, data, item->size);\n    data_idx = item->pbuf;\n  }\n  if (item->allocated)\n  {\n    free_fn(item);\n  }\n  else\n  {\n    memset(item, 0, sizeof(binn));\n    item->header = 0x1F22B11F;\n  }\n  return data;\n}\n\n",
            "calle": [
                "binn_ptr",
                "free_fn",
                "memmove",
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "item",
                        "type": "binn *",
                        "definition": [
                            "binn *item"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "void *",
                        "definition": [
                            "void *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int data_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "free_fn",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_value",
            "header": "binn *binn_value(int type, void *pvalue, int size, binn_mem_free freefn)",
            "params": [
                "int type",
                "void *pvalue",
                "int size",
                "binn_mem_free freefn"
            ],
            "definition": "binn *binn_value(int type, void *pvalue, int size, binn_mem_free freefn)\n{\n  int storage_type;\n  binn *item = binn_alloc_item();\n  if (item)\n  {\n    item->type = type;\n    binn_get_type_info(type, &storage_type, 0);\n    switch (storage_type)\n    {\n      case 0x00:\n      {\n        break;\n      }\n\n      case 0xA0:\n      {\n        if (size == 0)\n        {\n          size = strlen((char *) pvalue) + 1;\n        }\n      }\n\n      case 0xC0:\n\n      case 0xE0:\n      {\n        if (freefn == ((binn_mem_free) (-1)))\n        {\n          item->ptr = binn_memdup(pvalue, size);\n          if (item->ptr == 0)\n          {\n            free_fn(item);\n            return 0;\n          }\n          item->freefn = free_fn;\n          if (storage_type == 0xA0)\n          {\n            size -= 1;\n          }\n        }\n        else\n        {\n          item->ptr = pvalue;\n          item->freefn = freefn;\n        }\n        item->size = size;\n        break;\n      }\n\n      default:\n      {\n        item->ptr = &item->vint32;\n        copy_raw_value(pvalue, item->ptr, storage_type);\n      }\n\n    }\n\n  }\n  return item;\n}\n\n",
            "calle": [
                "binn_alloc_item",
                "binn_get_type_info",
                "binn_memdup",
                "copy_raw_value",
                "free_fn",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "void *",
                        "definition": [
                            "void *pvalue"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "freefn",
                        "type": "binn_mem_free",
                        "definition": [
                            "binn_mem_free freefn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "storage_type",
                        "type": "int",
                        "definition": [
                            "int storage_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "item",
                        "type": "binn *",
                        "definition": [
                            "binn *item = binn_alloc_item()"
                        ]
                    },
                    {
                        "path": null,
                        "name": "free_fn",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_ptr",
            "header": "void *binn_ptr(void *ptr)",
            "params": [
                "void *ptr"
            ],
            "definition": "void *binn_ptr(void *ptr)\n{\n  binn *item;\n  unsigned int item_idx = 0;\n  switch (binn_get_ptr_type(ptr))\n  {\n    case 1:\n    {\n      item_idx = (binn *) ptr;\n      if (item->writable && item->dirty)\n      {\n        binn_save_header(item);\n      }\n      return item->ptr;\n    }\n\n    case 2:\n    {\n      return ptr;\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "binn_get_ptr_type",
                "binn_save_header"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "item",
                        "type": "binn *",
                        "definition": [
                            "binn *item"
                        ]
                    },
                    {
                        "path": null,
                        "name": "item_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int item_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_size",
            "header": "int binn_size(void *ptr)",
            "params": [
                "void *ptr"
            ],
            "definition": "int binn_size(void *ptr)\n{\n  binn *item;\n  unsigned int item_idx = 0;\n  switch (binn_get_ptr_type(ptr))\n  {\n    case 1:\n    {\n      item_idx = (binn *) ptr;\n      if (item->writable && item->dirty)\n      {\n        binn_save_header(item);\n      }\n      return item->size;\n    }\n\n    case 2:\n    {\n      return binn_buf_size(ptr);\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "binn_buf_size",
                "binn_get_ptr_type",
                "binn_save_header"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "item",
                        "type": "binn *",
                        "definition": [
                            "binn *item"
                        ]
                    },
                    {
                        "path": null,
                        "name": "item_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int item_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_type",
            "header": "int binn_type(void *ptr)",
            "params": [
                "void *ptr"
            ],
            "definition": "int binn_type(void *ptr)\n{\n  binn *item;\n  unsigned int item_idx = 0;\n  switch (binn_get_ptr_type(ptr))\n  {\n    case 1:\n    {\n      item_idx = (binn *) ptr;\n      return item->type;\n    }\n\n    case 2:\n    {\n      return binn_buf_type(ptr);\n    }\n\n    default:\n    {\n      return -1;\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "binn_buf_type",
                "binn_get_ptr_type"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "item",
                        "type": "binn *",
                        "definition": [
                            "binn *item"
                        ]
                    },
                    {
                        "path": null,
                        "name": "item_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int item_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_count",
            "header": "int binn_count(void *ptr)",
            "params": [
                "void *ptr"
            ],
            "definition": "int binn_count(void *ptr)\n{\n  binn *item;\n  unsigned int item_idx = 0;\n  switch (binn_get_ptr_type(ptr))\n  {\n    case 1:\n    {\n      item_idx = (binn *) ptr;\n      return item->count;\n    }\n\n    case 2:\n    {\n      return binn_buf_count(ptr);\n    }\n\n    default:\n    {\n      return -1;\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "binn_buf_count",
                "binn_get_ptr_type"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "item",
                        "type": "binn *",
                        "definition": [
                            "binn *item"
                        ]
                    },
                    {
                        "path": null,
                        "name": "item_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int item_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_is_valid",
            "header": "BOOL binn_is_valid(void *ptr, int *ptype, int *pcount, int *psize)",
            "params": [
                "void *ptr",
                "int *ptype",
                "int *pcount",
                "int *psize"
            ],
            "definition": "BOOL binn_is_valid(void *ptr, int *ptype, int *pcount, int *psize)\n{\n  if (ptype)\n  {\n    *ptype = 0;\n  }\n  if (pcount)\n  {\n    *pcount = 0;\n  }\n  if (psize)\n  {\n    *psize = 0;\n  }\n  return binn_is_valid_ex(ptr, ptype, pcount, psize);\n}\n\n",
            "calle": [
                "binn_is_valid_ex"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptype",
                        "type": "int *",
                        "definition": [
                            "int *ptype"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pcount",
                        "type": "int *",
                        "definition": [
                            "int *pcount"
                        ]
                    },
                    {
                        "path": null,
                        "name": "psize",
                        "type": "int *",
                        "definition": [
                            "int *psize"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_is_valid_ex",
            "header": "BOOL binn_is_valid_ex(void *ptr, int *ptype, int *pcount, int *psize)",
            "params": [
                "void *ptr",
                "int *ptype",
                "int *pcount",
                "int *psize"
            ],
            "definition": "BOOL binn_is_valid_ex(void *ptr, int *ptype, int *pcount, int *psize)\n{\n  int i;\n  int type;\n  int count;\n  int size;\n  int header_size;\n  unsigned char *p;\n  unsigned int p_idx = 0;\n  unsigned char *plimit;\n  unsigned int plimit_idx = 0;\n  unsigned char *base;\n  unsigned int base_idx = 0;\n  unsigned char len;\n  void *pbuf;\n  unsigned int pbuf_idx = 0;\n  pbuf_idx = binn_ptr(ptr);\n  if ((&pbuf[pbuf_idx]) == 0)\n  {\n    return 0;\n  }\n  if (psize && ((*psize) > 0))\n  {\n    size = *psize;\n  }\n  else\n  {\n    size = 0;\n  }\n  if (!IsValidBinnHeader(pbuf, &type, &count, &size, &header_size))\n  {\n    return 0;\n  }\n  if (psize && ((*psize) > 0))\n  {\n    if (size != (*psize))\n    {\n      return 0;\n    }\n  }\n  if (pcount && ((*pcount) > 0))\n  {\n    if (count != (*pcount))\n    {\n      return 0;\n    }\n  }\n  if (ptype && ((*ptype) != 0))\n  {\n    if (type != (*ptype))\n    {\n      return 0;\n    }\n  }\n  p_idx = (unsigned char *) pbuf;\n  base_idx = &p[p_idx];\n  plimit_idx = (&p[p_idx]) + size;\n  p_idx += header_size;\n  for (i = 0; i < count; i += 1)\n  {\n    helper_binn_is_valid_ex_1(&p_idx, &len, type, p, plimit, base, base_idx);\n  }\n\n  if (ptype && ((*ptype) == 0))\n  {\n    *ptype = type;\n  }\n  if (pcount && ((*pcount) == 0))\n  {\n    *pcount = count;\n  }\n  if (psize && ((*psize) == 0))\n  {\n    *psize = size;\n  }\n  return 1;\n  Invalid:\n  return 0;\n\n}\n\n",
            "calle": [
                "IsValidBinnHeader",
                "binn_ptr",
                "helper_binn_is_valid_ex_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptype",
                        "type": "int *",
                        "definition": [
                            "int *ptype"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pcount",
                        "type": "int *",
                        "definition": [
                            "int *pcount"
                        ]
                    },
                    {
                        "path": null,
                        "name": "psize",
                        "type": "int *",
                        "definition": [
                            "int *psize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "header_size",
                        "type": "int",
                        "definition": [
                            "int header_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plimit",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *plimit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plimit_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int plimit_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *base"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int base_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pbuf",
                        "type": "void *",
                        "definition": [
                            "void *pbuf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pbuf_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pbuf_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_is_struct",
            "header": "BOOL binn_is_struct(void *ptr)",
            "params": [
                "void *ptr"
            ],
            "definition": "BOOL binn_is_struct(void *ptr)\n{\n  if (ptr == 0)\n  {\n    return 0;\n  }\n  if ((*((unsigned int *) ptr)) == 0x1F22B11F)\n  {\n    return 1;\n  }\n  else\n  {\n    return 0;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_load",
            "header": "BOOL binn_load(void *data, binn *item)",
            "params": [
                "void *data",
                "binn *value"
            ],
            "definition": "BOOL binn_load(void *data, binn *value)\n{\n  if ((data == 0) || (value == 0))\n  {\n    return 0;\n  }\n  memset(value, 0, sizeof(binn));\n  value->header = 0x1F22B11F;\n  if (binn_is_valid(data, &value->type, &value->count, &value->size) == 0)\n  {\n    return 0;\n  }\n  value->ptr = data;\n  return 1;\n}\n\n",
            "calle": [
                "binn_is_valid",
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "void *",
                        "definition": [
                            "void *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn *",
                        "definition": [
                            "binn *value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_open",
            "header": "binn *binn_open(void *data)",
            "params": [
                "void *data"
            ],
            "definition": "binn *binn_open(void *data)\n{\n  binn *item;\n  unsigned int item_idx = 0;\n  item_idx = (binn *) binn_malloc(sizeof(binn));\n  if (binn_load(data, item) == 0)\n  {\n    free_fn(item);\n    return 0;\n  }\n  item->allocated = 1;\n  return item;\n}\n\n",
            "calle": [
                "binn_load",
                "binn_malloc",
                "free_fn"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "void *",
                        "definition": [
                            "void *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "item",
                        "type": "binn *",
                        "definition": [
                            "binn *item"
                        ]
                    },
                    {
                        "path": null,
                        "name": "item_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int item_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "free_fn",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_int8",
            "header": "signed char binn_list_int8(void *list, int pos)",
            "params": [
                "void *list",
                "int pos"
            ],
            "definition": "signed char binn_list_int8(void *list, int pos)\n{\n  signed char value;\n  binn_list_get(list, pos, 0x21, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_list_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "signed char",
                        "definition": [
                            "signed char value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_int16",
            "header": "short binn_list_int16(void *list, int pos)",
            "params": [
                "void *list",
                "int pos"
            ],
            "definition": "short binn_list_int16(void *list, int pos)\n{\n  short value;\n  binn_list_get(list, pos, 0x41, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_list_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "short",
                        "definition": [
                            "short value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_int32",
            "header": "int binn_list_int32(void *list, int pos)",
            "params": [
                "void *list",
                "int pos"
            ],
            "definition": "int binn_list_int32(void *list, int pos)\n{\n  int value;\n  binn_list_get(list, pos, 0x61, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_list_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "int",
                        "definition": [
                            "int value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_int64",
            "header": "int64 binn_list_int64(void *list, int pos)",
            "params": [
                "void *list",
                "int pos"
            ],
            "definition": "int64 binn_list_int64(void *list, int pos)\n{\n  int64 value;\n  binn_list_get(list, pos, 0x81, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_list_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "int64",
                        "definition": [
                            "int64 value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_uint8",
            "header": "unsigned char binn_list_uint8(void *list, int pos)",
            "params": [
                "void *list",
                "int pos"
            ],
            "definition": "unsigned char binn_list_uint8(void *list, int pos)\n{\n  unsigned char value;\n  binn_list_get(list, pos, 0x20, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_list_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_uint16",
            "header": "unsigned short binn_list_uint16(void *list, int pos)",
            "params": [
                "void *list",
                "int pos"
            ],
            "definition": "unsigned short binn_list_uint16(void *list, int pos)\n{\n  unsigned short value;\n  binn_list_get(list, pos, 0x40, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_list_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_uint32",
            "header": "unsigned int binn_list_uint32(void *list, int pos)",
            "params": [
                "void *list",
                "int pos"
            ],
            "definition": "unsigned int binn_list_uint32(void *list, int pos)\n{\n  unsigned int value;\n  binn_list_get(list, pos, 0x60, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_list_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_uint64",
            "header": "uint64 binn_list_uint64(void *list, int pos)",
            "params": [
                "void *list",
                "int pos"
            ],
            "definition": "uint64 binn_list_uint64(void *list, int pos)\n{\n  uint64 value;\n  binn_list_get(list, pos, 0x80, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_list_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "uint64",
                        "definition": [
                            "uint64 value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_float",
            "header": "float binn_list_float(void *list, int pos)",
            "params": [
                "void *list",
                "int pos"
            ],
            "definition": "float binn_list_float(void *list, int pos)\n{\n  float value;\n  binn_list_get(list, pos, 0x62, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_list_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "float",
                        "definition": [
                            "float value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_double",
            "header": "double binn_list_double(void *list, int pos)",
            "params": [
                "void *list",
                "int pos"
            ],
            "definition": "double binn_list_double(void *list, int pos)\n{\n  double value;\n  binn_list_get(list, pos, 0x82, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_list_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "double",
                        "definition": [
                            "double value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_bool",
            "header": "BOOL binn_list_bool(void *list, int pos)",
            "params": [
                "void *list",
                "int pos"
            ],
            "definition": "BOOL binn_list_bool(void *list, int pos)\n{\n  BOOL value;\n  binn_list_get(list, pos, 0x80061, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_list_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "BOOL",
                        "definition": [
                            "BOOL value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_null",
            "header": "BOOL binn_list_null(void *list, int pos)",
            "params": [
                "void *list",
                "int pos"
            ],
            "definition": "BOOL binn_list_null(void *list, int pos)\n{\n  return binn_list_get(list, pos, 0x00, 0, 0);\n}\n\n",
            "calle": [
                "binn_list_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_str",
            "header": "char *binn_list_str(void *list, int pos)",
            "params": [
                "void *list",
                "int pos"
            ],
            "definition": "char *binn_list_str(void *list, int pos)\n{\n  char *value;\n  binn_list_get(list, pos, 0xA0, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_list_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "char *",
                        "definition": [
                            "char *value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_blob",
            "header": "void *binn_list_blob(void *list, int pos, int *psize)",
            "params": [
                "void *list",
                "int pos",
                "int *psize"
            ],
            "definition": "void *binn_list_blob(void *list, int pos, int *psize)\n{\n  void *value;\n  binn_list_get(list, pos, 0xC0, &value, psize);\n  return value;\n}\n\n",
            "calle": [
                "binn_list_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "psize",
                        "type": "int *",
                        "definition": [
                            "int *psize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "void *",
                        "definition": [
                            "void *value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_list",
            "header": "void *binn_list_list(void *list, int pos)",
            "params": [
                "void *list",
                "int pos"
            ],
            "definition": "void *binn_list_list(void *list, int pos)\n{\n  void *value;\n  binn_list_get(list, pos, 0xE0, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_list_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "void *",
                        "definition": [
                            "void *value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_map",
            "header": "void *binn_list_map(void *list, int pos)",
            "params": [
                "void *list",
                "int pos"
            ],
            "definition": "void *binn_list_map(void *list, int pos)\n{\n  void *value;\n  binn_list_get(list, pos, 0xE1, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_list_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "void *",
                        "definition": [
                            "void *value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_object",
            "header": "void *binn_list_object(void *list, int pos)",
            "params": [
                "void *list",
                "int pos"
            ],
            "definition": "void *binn_list_object(void *list, int pos)\n{\n  void *value;\n  binn_list_get(list, pos, 0xE2, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_list_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "void *",
                        "definition": [
                            "void *value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_int8",
            "header": "signed char binn_map_int8(void *map, int id)",
            "params": [
                "void *map",
                "int id"
            ],
            "definition": "signed char binn_map_int8(void *map, int id)\n{\n  signed char value;\n  binn_map_get(map, id, 0x21, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_map_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "signed char",
                        "definition": [
                            "signed char value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_int16",
            "header": "short binn_map_int16(void *map, int id)",
            "params": [
                "void *map",
                "int id"
            ],
            "definition": "short binn_map_int16(void *map, int id)\n{\n  short value;\n  binn_map_get(map, id, 0x41, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_map_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "short",
                        "definition": [
                            "short value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_int32",
            "header": "int binn_map_int32(void *map, int id)",
            "params": [
                "void *map",
                "int id"
            ],
            "definition": "int binn_map_int32(void *map, int id)\n{\n  int value;\n  binn_map_get(map, id, 0x61, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_map_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "int",
                        "definition": [
                            "int value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_int64",
            "header": "int64 binn_map_int64(void *map, int id)",
            "params": [
                "void *map",
                "int id"
            ],
            "definition": "int64 binn_map_int64(void *map, int id)\n{\n  int64 value;\n  binn_map_get(map, id, 0x81, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_map_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "int64",
                        "definition": [
                            "int64 value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_uint8",
            "header": "unsigned char binn_map_uint8(void *map, int id)",
            "params": [
                "void *map",
                "int id"
            ],
            "definition": "unsigned char binn_map_uint8(void *map, int id)\n{\n  unsigned char value;\n  binn_map_get(map, id, 0x20, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_map_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_uint16",
            "header": "unsigned short binn_map_uint16(void *map, int id)",
            "params": [
                "void *map",
                "int id"
            ],
            "definition": "unsigned short binn_map_uint16(void *map, int id)\n{\n  unsigned short value;\n  binn_map_get(map, id, 0x40, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_map_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_uint32",
            "header": "unsigned int binn_map_uint32(void *map, int id)",
            "params": [
                "void *map",
                "int id"
            ],
            "definition": "unsigned int binn_map_uint32(void *map, int id)\n{\n  unsigned int value;\n  binn_map_get(map, id, 0x60, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_map_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_uint64",
            "header": "uint64 binn_map_uint64(void *map, int id)",
            "params": [
                "void *map",
                "int id"
            ],
            "definition": "uint64 binn_map_uint64(void *map, int id)\n{\n  uint64 value;\n  binn_map_get(map, id, 0x80, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_map_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "uint64",
                        "definition": [
                            "uint64 value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_float",
            "header": "float binn_map_float(void *map, int id)",
            "params": [
                "void *map",
                "int id"
            ],
            "definition": "float binn_map_float(void *map, int id)\n{\n  float value;\n  binn_map_get(map, id, 0x62, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_map_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "float",
                        "definition": [
                            "float value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_double",
            "header": "double binn_map_double(void *map, int id)",
            "params": [
                "void *map",
                "int id"
            ],
            "definition": "double binn_map_double(void *map, int id)\n{\n  double value;\n  binn_map_get(map, id, 0x82, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_map_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "double",
                        "definition": [
                            "double value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_bool",
            "header": "BOOL binn_map_bool(void *map, int id)",
            "params": [
                "void *map",
                "int id"
            ],
            "definition": "BOOL binn_map_bool(void *map, int id)\n{\n  BOOL value;\n  binn_map_get(map, id, 0x80061, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_map_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "BOOL",
                        "definition": [
                            "BOOL value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_null",
            "header": "BOOL binn_map_null(void *map, int id)",
            "params": [
                "void *map",
                "int id"
            ],
            "definition": "BOOL binn_map_null(void *map, int id)\n{\n  return binn_map_get(map, id, 0x00, 0, 0);\n}\n\n",
            "calle": [
                "binn_map_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_str",
            "header": "char *binn_map_str(void *map, int id)",
            "params": [
                "void *map",
                "int id"
            ],
            "definition": "char *binn_map_str(void *map, int id)\n{\n  char *value;\n  binn_map_get(map, id, 0xA0, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_map_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "char *",
                        "definition": [
                            "char *value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_blob",
            "header": "void *binn_map_blob(void *map, int id, int *psize)",
            "params": [
                "void *map",
                "int id",
                "int *psize"
            ],
            "definition": "void *binn_map_blob(void *map, int id, int *psize)\n{\n  void *value;\n  binn_map_get(map, id, 0xC0, &value, psize);\n  return value;\n}\n\n",
            "calle": [
                "binn_map_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "psize",
                        "type": "int *",
                        "definition": [
                            "int *psize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "void *",
                        "definition": [
                            "void *value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_list",
            "header": "void *binn_map_list(void *map, int id)",
            "params": [
                "void *map",
                "int id"
            ],
            "definition": "void *binn_map_list(void *map, int id)\n{\n  void *value;\n  binn_map_get(map, id, 0xE0, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_map_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "void *",
                        "definition": [
                            "void *value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_map",
            "header": "void *binn_map_map(void *map, int id)",
            "params": [
                "void *map",
                "int id"
            ],
            "definition": "void *binn_map_map(void *map, int id)\n{\n  void *value;\n  binn_map_get(map, id, 0xE1, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_map_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "void *",
                        "definition": [
                            "void *value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_object",
            "header": "void *binn_map_object(void *map, int id)",
            "params": [
                "void *map",
                "int id"
            ],
            "definition": "void *binn_map_object(void *map, int id)\n{\n  void *value;\n  binn_map_get(map, id, 0xE2, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_map_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "void *",
                        "definition": [
                            "void *value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_int8",
            "header": "signed char binn_object_int8(void *obj, const char *key)",
            "params": [
                "void *obj",
                "const char *key"
            ],
            "definition": "signed char binn_object_int8(void *obj, const char *key)\n{\n  signed char value;\n  binn_object_get(obj, key, 0x21, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_object_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "signed char",
                        "definition": [
                            "signed char value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_int16",
            "header": "short binn_object_int16(void *obj, const char *key)",
            "params": [
                "void *obj",
                "const char *key"
            ],
            "definition": "short binn_object_int16(void *obj, const char *key)\n{\n  short value;\n  binn_object_get(obj, key, 0x41, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_object_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "short",
                        "definition": [
                            "short value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_int32",
            "header": "int binn_object_int32(void *obj, const char *key)",
            "params": [
                "void *obj",
                "const char *key"
            ],
            "definition": "int binn_object_int32(void *obj, const char *key)\n{\n  int value;\n  binn_object_get(obj, key, 0x61, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_object_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "int",
                        "definition": [
                            "int value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_int64",
            "header": "int64 binn_object_int64(void *obj, const char *key)",
            "params": [
                "void *obj",
                "const char *key"
            ],
            "definition": "int64 binn_object_int64(void *obj, const char *key)\n{\n  int64 value;\n  binn_object_get(obj, key, 0x81, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_object_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "int64",
                        "definition": [
                            "int64 value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_uint8",
            "header": "unsigned char binn_object_uint8(void *obj, const char *key)",
            "params": [
                "void *obj",
                "const char *key"
            ],
            "definition": "unsigned char binn_object_uint8(void *obj, const char *key)\n{\n  unsigned char value;\n  binn_object_get(obj, key, 0x20, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_object_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_uint16",
            "header": "unsigned short binn_object_uint16(void *obj, const char *key)",
            "params": [
                "void *obj",
                "const char *key"
            ],
            "definition": "unsigned short binn_object_uint16(void *obj, const char *key)\n{\n  unsigned short value;\n  binn_object_get(obj, key, 0x40, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_object_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_uint32",
            "header": "unsigned int binn_object_uint32(void *obj, const char *key)",
            "params": [
                "void *obj",
                "const char *key"
            ],
            "definition": "unsigned int binn_object_uint32(void *obj, const char *key)\n{\n  unsigned int value;\n  binn_object_get(obj, key, 0x60, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_object_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_uint64",
            "header": "uint64 binn_object_uint64(void *obj, const char *key)",
            "params": [
                "void *obj",
                "const char *key"
            ],
            "definition": "uint64 binn_object_uint64(void *obj, const char *key)\n{\n  uint64 value;\n  binn_object_get(obj, key, 0x80, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_object_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "uint64",
                        "definition": [
                            "uint64 value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_float",
            "header": "float binn_object_float(void *obj, const char *key)",
            "params": [
                "void *obj",
                "const char *key"
            ],
            "definition": "float binn_object_float(void *obj, const char *key)\n{\n  float value;\n  binn_object_get(obj, key, 0x62, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_object_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "float",
                        "definition": [
                            "float value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_double",
            "header": "double binn_object_double(void *obj, const char *key)",
            "params": [
                "void *obj",
                "const char *key"
            ],
            "definition": "double binn_object_double(void *obj, const char *key)\n{\n  double value;\n  binn_object_get(obj, key, 0x82, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_object_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "double",
                        "definition": [
                            "double value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_bool",
            "header": "BOOL binn_object_bool(void *obj, const char *key)",
            "params": [
                "void *obj",
                "const char *key"
            ],
            "definition": "BOOL binn_object_bool(void *obj, const char *key)\n{\n  BOOL value;\n  binn_object_get(obj, key, 0x80061, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_object_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "BOOL",
                        "definition": [
                            "BOOL value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_null",
            "header": "BOOL binn_object_null(void *obj, const char *key)",
            "params": [
                "void *obj",
                "const char *key"
            ],
            "definition": "BOOL binn_object_null(void *obj, const char *key)\n{\n  return binn_object_get(obj, key, 0x00, 0, 0);\n}\n\n",
            "calle": [
                "binn_object_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_str",
            "header": "char *binn_object_str(void *obj, const char *key)",
            "params": [
                "void *obj",
                "const char *key"
            ],
            "definition": "char *binn_object_str(void *obj, const char *key)\n{\n  char *value;\n  binn_object_get(obj, key, 0xA0, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_object_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "char *",
                        "definition": [
                            "char *value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_blob",
            "header": "void *binn_object_blob(void *obj, const char *key, int *psize)",
            "params": [
                "void *obj",
                "const char *key",
                "int *psize"
            ],
            "definition": "void *binn_object_blob(void *obj, const char *key, int *psize)\n{\n  void *value;\n  binn_object_get(obj, key, 0xC0, &value, psize);\n  return value;\n}\n\n",
            "calle": [
                "binn_object_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "psize",
                        "type": "int *",
                        "definition": [
                            "int *psize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "void *",
                        "definition": [
                            "void *value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_list",
            "header": "void *binn_object_list(void *obj, const char *key)",
            "params": [
                "void *obj",
                "const char *key"
            ],
            "definition": "void *binn_object_list(void *obj, const char *key)\n{\n  void *value;\n  binn_object_get(obj, key, 0xE0, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_object_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "void *",
                        "definition": [
                            "void *value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_map",
            "header": "void *binn_object_map(void *obj, const char *key)",
            "params": [
                "void *obj",
                "const char *key"
            ],
            "definition": "void *binn_object_map(void *obj, const char *key)\n{\n  void *value;\n  binn_object_get(obj, key, 0xE1, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_object_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "void *",
                        "definition": [
                            "void *value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_object",
            "header": "void *binn_object_object(void *obj, const char *key)",
            "params": [
                "void *obj",
                "const char *key"
            ],
            "definition": "void *binn_object_object(void *obj, const char *key)\n{\n  void *value;\n  binn_object_get(obj, key, 0xE2, &value, 0);\n  return value;\n}\n\n",
            "calle": [
                "binn_object_get"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "void *",
                        "definition": [
                            "void *value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_value",
            "header": "binn *binn_list_value(void *list, int pos)",
            "params": [
                "void *ptr",
                "int pos"
            ],
            "definition": "binn *binn_list_value(void *ptr, int pos)\n{\n  binn *value;\n  unsigned int value_idx = 0;\n  value_idx = (binn *) binn_malloc(sizeof(binn));\n  if (binn_list_get_value(ptr, pos, value) == 0)\n  {\n    free_fn(value);\n    return 0;\n  }\n  value->allocated = 1;\n  return value;\n}\n\n",
            "calle": [
                "binn_list_get_value",
                "binn_malloc",
                "free_fn"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn *",
                        "definition": [
                            "binn *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int value_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "free_fn",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_value",
            "header": "binn *binn_map_value(void *map, int id)",
            "params": [
                "void *ptr",
                "int id"
            ],
            "definition": "binn *binn_map_value(void *ptr, int id)\n{\n  binn *value;\n  unsigned int value_idx = 0;\n  value_idx = (binn *) binn_malloc(sizeof(binn));\n  if (binn_map_get_value(ptr, id, value) == 0)\n  {\n    free_fn(value);\n    return 0;\n  }\n  value->allocated = 1;\n  return value;\n}\n\n",
            "calle": [
                "binn_malloc",
                "binn_map_get_value",
                "free_fn"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn *",
                        "definition": [
                            "binn *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int value_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "free_fn",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_value",
            "header": "binn *binn_object_value(void *obj, const char *key)",
            "params": [
                "void *ptr",
                "const char *key"
            ],
            "definition": "binn *binn_object_value(void *ptr, const char *key)\n{\n  binn *value;\n  unsigned int value_idx = 0;\n  value_idx = (binn *) binn_malloc(sizeof(binn));\n  if (binn_object_get_value(ptr, key, value) == 0)\n  {\n    free_fn(value);\n    return 0;\n  }\n  value->allocated = 1;\n  return value;\n}\n\n",
            "calle": [
                "binn_malloc",
                "binn_object_get_value",
                "free_fn"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn *",
                        "definition": [
                            "binn *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int value_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "free_fn",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_get_value",
            "header": "BOOL binn_list_get_value(void *list, int pos, binn *value)",
            "params": [
                "void *ptr",
                "int pos",
                "binn *value"
            ],
            "definition": "BOOL binn_list_get_value(void *ptr, int pos, binn *value)\n{\n  unsigned int ptr_idx = 0;\n  int i;\n  int type;\n  int count;\n  int size = 0;\n  int header_size;\n  unsigned char *p;\n  unsigned int p_idx = 0;\n  unsigned char *plimit;\n  unsigned int plimit_idx = 0;\n  unsigned char *base;\n  unsigned int base_idx = 0;\n  ptr_idx = binn_ptr(ptr_idx);\n  if (((&ptr[ptr_idx]) == 0) || (value == 0))\n  {\n    return 0;\n  }\n  if (IsValidBinnHeader(ptr, &type, &count, &size, &header_size) == 0)\n  {\n    return 0;\n  }\n  if (type != 0xE0)\n  {\n    return 0;\n  }\n  if (count == 0)\n  {\n    return 0;\n  }\n  if ((pos <= 0) | (pos > count))\n  {\n    return 0;\n  }\n  pos -= 1;\n  p_idx = (unsigned char *) ptr;\n  base_idx = &p[p_idx];\n  plimit_idx = (&p[p_idx]) + size;\n  p_idx += header_size;\n  for (i = 0; i < pos; i += 1)\n  {\n    p_idx = AdvanceDataPos(p_idx, plimit);\n    if (((&p[p_idx]) == 0) || ((&p[p_idx]) < (&base[base_idx])))\n    {\n      return 0;\n    }\n  }\n\n  return GetValue(p, value);\n}\n\n",
            "calle": [
                "AdvanceDataPos",
                "GetValue",
                "IsValidBinnHeader",
                "binn_ptr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn *",
                        "definition": [
                            "binn *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ptr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "header_size",
                        "type": "int",
                        "definition": [
                            "int header_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plimit",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *plimit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plimit_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int plimit_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *base"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int base_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_get_value",
            "header": "BOOL binn_map_get_value(void *map, int id, binn *value)",
            "params": [
                "void *ptr",
                "int id",
                "binn *value"
            ],
            "definition": "BOOL binn_map_get_value(void *ptr, int id, binn *value)\n{\n  unsigned int ptr_idx = 0;\n  int type;\n  int count;\n  int size = 0;\n  int header_size;\n  unsigned char *p;\n  unsigned int p_idx = 0;\n  ptr_idx = binn_ptr(ptr_idx);\n  if (((&ptr[ptr_idx]) == 0) || (value == 0))\n  {\n    return 0;\n  }\n  if (IsValidBinnHeader(ptr, &type, &count, &size, &header_size) == 0)\n  {\n    return 0;\n  }\n  if (type != 0xE1)\n  {\n    return 0;\n  }\n  if (count == 0)\n  {\n    return 0;\n  }\n  p_idx = (unsigned char *) ptr;\n  p_idx = SearchForID(p_idx, header_size, size, count, id);\n  if ((&p[p_idx]) == 0)\n  {\n    return 0;\n  }\n  return GetValue(p, value);\n}\n\n",
            "calle": [
                "GetValue",
                "IsValidBinnHeader",
                "SearchForID",
                "binn_ptr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn *",
                        "definition": [
                            "binn *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ptr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "header_size",
                        "type": "int",
                        "definition": [
                            "int header_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_get_value",
            "header": "BOOL binn_object_get_value(void *obj, const char *key, binn *value)",
            "params": [
                "void *ptr",
                "const char *key",
                "binn *value"
            ],
            "definition": "BOOL binn_object_get_value(void *ptr, const char *key, binn *value)\n{\n  unsigned int ptr_idx = 0;\n  int type;\n  int count;\n  int size = 0;\n  int header_size;\n  unsigned char *p;\n  unsigned int p_idx = 0;\n  ptr_idx = binn_ptr(ptr_idx);\n  if ((((&ptr[ptr_idx]) == 0) || (key == 0)) || (value == 0))\n  {\n    return 0;\n  }\n  if (IsValidBinnHeader(ptr, &type, &count, &size, &header_size) == 0)\n  {\n    return 0;\n  }\n  if (type != 0xE2)\n  {\n    return 0;\n  }\n  if (count == 0)\n  {\n    return 0;\n  }\n  p_idx = (unsigned char *) ptr;\n  p_idx = SearchForKey(p_idx, header_size, size, count, key);\n  if ((&p[p_idx]) == 0)\n  {\n    return 0;\n  }\n  return GetValue(p, value);\n}\n\n",
            "calle": [
                "GetValue",
                "IsValidBinnHeader",
                "SearchForKey",
                "binn_ptr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn *",
                        "definition": [
                            "binn *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ptr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "header_size",
                        "type": "int",
                        "definition": [
                            "int header_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_get",
            "header": "BOOL binn_list_get(void *list, int pos, int type, void *pvalue, int *psize)",
            "params": [
                "void *ptr",
                "int pos",
                "int type",
                "void *pvalue",
                "int *psize"
            ],
            "definition": "BOOL binn_list_get(void *ptr, int pos, int type, void *pvalue, int *psize)\n{\n  binn value;\n  int storage_type;\n  storage_type = binn_get_read_storage(type);\n  if ((storage_type != 0x00) && (pvalue == 0))\n  {\n    return 0;\n  }\n  zero_value(pvalue, type);\n  if (binn_list_get_value(ptr, pos, &value) == 0)\n  {\n    return 0;\n  }\n  if (copy_value(value.ptr, pvalue, value.type, type, storage_type) == 0)\n  {\n    return 0;\n  }\n  if (psize)\n  {\n    *psize = value.size;\n  }\n  return 1;\n}\n\n",
            "calle": [
                "binn_get_read_storage",
                "binn_list_get_value",
                "copy_value",
                "zero_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "void *",
                        "definition": [
                            "void *pvalue"
                        ]
                    },
                    {
                        "path": null,
                        "name": "psize",
                        "type": "int *",
                        "definition": [
                            "int *psize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn",
                        "definition": [
                            "binn value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "storage_type",
                        "type": "int",
                        "definition": [
                            "int storage_type"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_get",
            "header": "BOOL binn_map_get(void *map, int id, int type, void *pvalue, int *psize)",
            "params": [
                "void *ptr",
                "int id",
                "int type",
                "void *pvalue",
                "int *psize"
            ],
            "definition": "BOOL binn_map_get(void *ptr, int id, int type, void *pvalue, int *psize)\n{\n  binn value;\n  int storage_type;\n  storage_type = binn_get_read_storage(type);\n  if ((storage_type != 0x00) && (pvalue == 0))\n  {\n    return 0;\n  }\n  zero_value(pvalue, type);\n  if (binn_map_get_value(ptr, id, &value) == 0)\n  {\n    return 0;\n  }\n  if (copy_value(value.ptr, pvalue, value.type, type, storage_type) == 0)\n  {\n    return 0;\n  }\n  if (psize)\n  {\n    *psize = value.size;\n  }\n  return 1;\n}\n\n",
            "calle": [
                "binn_get_read_storage",
                "binn_map_get_value",
                "copy_value",
                "zero_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "void *",
                        "definition": [
                            "void *pvalue"
                        ]
                    },
                    {
                        "path": null,
                        "name": "psize",
                        "type": "int *",
                        "definition": [
                            "int *psize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn",
                        "definition": [
                            "binn value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "storage_type",
                        "type": "int",
                        "definition": [
                            "int storage_type"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_get",
            "header": "BOOL binn_object_get(void *obj, const char *key, int type, void *pvalue, int *psize)",
            "params": [
                "void *ptr",
                "const char *key",
                "int type",
                "void *pvalue",
                "int *psize"
            ],
            "definition": "BOOL binn_object_get(void *ptr, const char *key, int type, void *pvalue, int *psize)\n{\n  binn value;\n  int storage_type;\n  storage_type = binn_get_read_storage(type);\n  if ((storage_type != 0x00) && (pvalue == 0))\n  {\n    return 0;\n  }\n  zero_value(pvalue, type);\n  if (binn_object_get_value(ptr, key, &value) == 0)\n  {\n    return 0;\n  }\n  if (copy_value(value.ptr, pvalue, value.type, type, storage_type) == 0)\n  {\n    return 0;\n  }\n  if (psize)\n  {\n    *psize = value.size;\n  }\n  return 1;\n}\n\n",
            "calle": [
                "binn_get_read_storage",
                "binn_object_get_value",
                "copy_value",
                "zero_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "void *",
                        "definition": [
                            "void *pvalue"
                        ]
                    },
                    {
                        "path": null,
                        "name": "psize",
                        "type": "int *",
                        "definition": [
                            "int *psize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn",
                        "definition": [
                            "binn value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "storage_type",
                        "type": "int",
                        "definition": [
                            "int storage_type"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_read",
            "header": "void *binn_list_read(void *list, int pos, int *ptype, int *psize)",
            "params": [
                "void *list",
                "int pos",
                "int *ptype",
                "int *psize"
            ],
            "definition": "void *binn_list_read(void *list, int pos, int *ptype, int *psize)\n{\n  binn value;\n  if (binn_list_get_value(list, pos, &value) == 0)\n  {\n    return 0;\n  }\n  if (ptype)\n  {\n    *ptype = value.type;\n  }\n  if (psize)\n  {\n    *psize = value.size;\n  }\n  return store_value(&value);\n}\n\n",
            "calle": [
                "binn_list_get_value",
                "store_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "void *",
                        "definition": [
                            "void *list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptype",
                        "type": "int *",
                        "definition": [
                            "int *ptype"
                        ]
                    },
                    {
                        "path": null,
                        "name": "psize",
                        "type": "int *",
                        "definition": [
                            "int *psize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn",
                        "definition": [
                            "binn value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_read",
            "header": "void *binn_map_read(void *map, int id, int *ptype, int *psize)",
            "params": [
                "void *map",
                "int id",
                "int *ptype",
                "int *psize"
            ],
            "definition": "void *binn_map_read(void *map, int id, int *ptype, int *psize)\n{\n  binn value;\n  if (binn_map_get_value(map, id, &value) == 0)\n  {\n    return 0;\n  }\n  if (ptype)\n  {\n    *ptype = value.type;\n  }\n  if (psize)\n  {\n    *psize = value.size;\n  }\n  return store_value(&value);\n}\n\n",
            "calle": [
                "binn_map_get_value",
                "store_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptype",
                        "type": "int *",
                        "definition": [
                            "int *ptype"
                        ]
                    },
                    {
                        "path": null,
                        "name": "psize",
                        "type": "int *",
                        "definition": [
                            "int *psize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn",
                        "definition": [
                            "binn value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_read",
            "header": "void *binn_object_read(void *obj, const char *key, int *ptype, int *psize)",
            "params": [
                "void *obj",
                "const char *key",
                "int *ptype",
                "int *psize"
            ],
            "definition": "void *binn_object_read(void *obj, const char *key, int *ptype, int *psize)\n{\n  binn value;\n  if (binn_object_get_value(obj, key, &value) == 0)\n  {\n    return 0;\n  }\n  if (ptype)\n  {\n    *ptype = value.type;\n  }\n  if (psize)\n  {\n    *psize = value.size;\n  }\n  return store_value(&value);\n}\n\n",
            "calle": [
                "binn_object_get_value",
                "store_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptype",
                        "type": "int *",
                        "definition": [
                            "int *ptype"
                        ]
                    },
                    {
                        "path": null,
                        "name": "psize",
                        "type": "int *",
                        "definition": [
                            "int *psize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn",
                        "definition": [
                            "binn value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_get_pair",
            "header": "BOOL binn_map_get_pair(void *map, int pos, int *pid, binn *value)",
            "params": [
                "void *ptr",
                "int pos",
                "int *pid",
                "binn *value"
            ],
            "definition": "BOOL binn_map_get_pair(void *ptr, int pos, int *pid, binn *value)\n{\n  return binn_read_pair(0xE1, ptr, pos, pid, 0, value);\n}\n\n",
            "calle": [
                "binn_read_pair"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pid",
                        "type": "int *",
                        "definition": [
                            "int *pid"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn *",
                        "definition": [
                            "binn *value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_get_pair",
            "header": "BOOL binn_object_get_pair(void *obj, int pos, char *pkey, binn *value)",
            "params": [
                "void *ptr",
                "int pos",
                "char *pkey",
                "binn *value"
            ],
            "definition": "BOOL binn_object_get_pair(void *ptr, int pos, char *pkey, binn *value)\n{\n  return binn_read_pair(0xE2, ptr, pos, 0, pkey, value);\n}\n\n",
            "calle": [
                "binn_read_pair"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pkey",
                        "type": "char *",
                        "definition": [
                            "char *pkey"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn *",
                        "definition": [
                            "binn *value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_pair",
            "header": "binn *binn_map_pair(void *map, int pos, int *pid)",
            "params": [
                "void *map",
                "int pos",
                "int *pid"
            ],
            "definition": "binn *binn_map_pair(void *map, int pos, int *pid)\n{\n  binn *value;\n  unsigned int value_idx = 0;\n  value_idx = (binn *) binn_malloc(sizeof(binn));\n  if (binn_read_pair(0xE1, map, pos, pid, 0, value) == 0)\n  {\n    free_fn(value);\n    return 0;\n  }\n  value->allocated = 1;\n  return value;\n}\n\n",
            "calle": [
                "binn_malloc",
                "binn_read_pair",
                "free_fn"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "map",
                        "type": "void *",
                        "definition": [
                            "void *map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pid",
                        "type": "int *",
                        "definition": [
                            "int *pid"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn *",
                        "definition": [
                            "binn *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int value_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "free_fn",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_pair",
            "header": "binn *binn_object_pair(void *obj, int pos, char *pkey)",
            "params": [
                "void *obj",
                "int pos",
                "char *pkey"
            ],
            "definition": "binn *binn_object_pair(void *obj, int pos, char *pkey)\n{\n  binn *value;\n  unsigned int value_idx = 0;\n  value_idx = (binn *) binn_malloc(sizeof(binn));\n  if (binn_read_pair(0xE2, obj, pos, 0, pkey, value) == 0)\n  {\n    free_fn(value);\n    return 0;\n  }\n  value->allocated = 1;\n  return value;\n}\n\n",
            "calle": [
                "binn_malloc",
                "binn_read_pair",
                "free_fn"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "obj",
                        "type": "void *",
                        "definition": [
                            "void *obj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pkey",
                        "type": "char *",
                        "definition": [
                            "char *pkey"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn *",
                        "definition": [
                            "binn *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int value_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "free_fn",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_read_pair",
            "header": "void *binn_map_read_pair(void *ptr, int pos, int *pid, int *ptype, int *psize)",
            "params": [
                "void *ptr",
                "int pos",
                "int *pid",
                "int *ptype",
                "int *psize"
            ],
            "definition": "void *binn_map_read_pair(void *ptr, int pos, int *pid, int *ptype, int *psize)\n{\n  binn value;\n  if (binn_map_get_pair(ptr, pos, pid, &value) == 0)\n  {\n    return 0;\n  }\n  if (ptype)\n  {\n    *ptype = value.type;\n  }\n  if (psize)\n  {\n    *psize = value.size;\n  }\n  return store_value(&value);\n}\n\n",
            "calle": [
                "binn_map_get_pair",
                "store_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pid",
                        "type": "int *",
                        "definition": [
                            "int *pid"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptype",
                        "type": "int *",
                        "definition": [
                            "int *ptype"
                        ]
                    },
                    {
                        "path": null,
                        "name": "psize",
                        "type": "int *",
                        "definition": [
                            "int *psize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn",
                        "definition": [
                            "binn value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_read_pair",
            "header": "void *binn_object_read_pair(void *ptr, int pos, char *pkey, int *ptype, int *psize)",
            "params": [
                "void *ptr",
                "int pos",
                "char *pkey",
                "int *ptype",
                "int *psize"
            ],
            "definition": "void *binn_object_read_pair(void *ptr, int pos, char *pkey, int *ptype, int *psize)\n{\n  binn value;\n  if (binn_object_get_pair(ptr, pos, pkey, &value) == 0)\n  {\n    return 0;\n  }\n  if (ptype)\n  {\n    *ptype = value.type;\n  }\n  if (psize)\n  {\n    *psize = value.size;\n  }\n  return store_value(&value);\n}\n\n",
            "calle": [
                "binn_object_get_pair",
                "store_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pkey",
                        "type": "char *",
                        "definition": [
                            "char *pkey"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptype",
                        "type": "int *",
                        "definition": [
                            "int *ptype"
                        ]
                    },
                    {
                        "path": null,
                        "name": "psize",
                        "type": "int *",
                        "definition": [
                            "int *psize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn",
                        "definition": [
                            "binn value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_iter_init",
            "header": "BOOL binn_iter_init(binn_iter *iter, void *pbuf, int type)",
            "params": [
                "binn_iter *iter",
                "void *ptr",
                "int expected_type"
            ],
            "definition": "BOOL binn_iter_init(binn_iter *iter, void *ptr, int expected_type)\n{\n  unsigned int ptr_idx = 0;\n  int type;\n  int count;\n  int size = 0;\n  int header_size;\n  ptr_idx = binn_ptr(ptr_idx);\n  if (((&ptr[ptr_idx]) == 0) || (iter == 0))\n  {\n    return 0;\n  }\n  memset(iter, 0, sizeof(binn_iter));\n  if (IsValidBinnHeader(ptr, &type, &count, &size, &header_size) == 0)\n  {\n    return 0;\n  }\n  if (type != expected_type)\n  {\n    return 0;\n  }\n  iter->plimit = (((unsigned char *) ptr) + size) - 1;\n  iter->pnext = ((unsigned char *) ptr) + header_size;\n  iter->count = count;\n  iter->current = 0;\n  iter->type = type;\n  return 1;\n}\n\n",
            "calle": [
                "IsValidBinnHeader",
                "binn_ptr",
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "iter",
                        "type": "binn_iter *",
                        "definition": [
                            "binn_iter *iter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "expected_type",
                        "type": "int",
                        "definition": [
                            "int expected_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ptr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "header_size",
                        "type": "int",
                        "definition": [
                            "int header_size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_next_value",
            "header": "binn *binn_list_next_value(binn_iter *iter)",
            "params": [
                "binn_iter *iter"
            ],
            "definition": "binn *binn_list_next_value(binn_iter *iter)\n{\n  binn *value;\n  unsigned int value_idx = 0;\n  value_idx = (binn *) binn_malloc(sizeof(binn));\n  if (binn_list_next(iter, value) == 0)\n  {\n    free_fn(value);\n    return 0;\n  }\n  value->allocated = 1;\n  return value;\n}\n\n",
            "calle": [
                "binn_list_next",
                "binn_malloc",
                "free_fn"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "iter",
                        "type": "binn_iter *",
                        "definition": [
                            "binn_iter *iter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn *",
                        "definition": [
                            "binn *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int value_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "free_fn",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_next_value",
            "header": "binn *binn_map_next_value(binn_iter *iter, int *pid)",
            "params": [
                "binn_iter *iter",
                "int *pid"
            ],
            "definition": "binn *binn_map_next_value(binn_iter *iter, int *pid)\n{\n  binn *value;\n  unsigned int value_idx = 0;\n  value_idx = (binn *) binn_malloc(sizeof(binn));\n  if (binn_map_next(iter, pid, value) == 0)\n  {\n    free_fn(value);\n    return 0;\n  }\n  value->allocated = 1;\n  return value;\n}\n\n",
            "calle": [
                "binn_malloc",
                "binn_map_next",
                "free_fn"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "iter",
                        "type": "binn_iter *",
                        "definition": [
                            "binn_iter *iter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pid",
                        "type": "int *",
                        "definition": [
                            "int *pid"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn *",
                        "definition": [
                            "binn *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int value_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "free_fn",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_next_value",
            "header": "binn *binn_object_next_value(binn_iter *iter, char *pkey)",
            "params": [
                "binn_iter *iter",
                "char *pkey"
            ],
            "definition": "binn *binn_object_next_value(binn_iter *iter, char *pkey)\n{\n  binn *value;\n  unsigned int value_idx = 0;\n  value_idx = (binn *) binn_malloc(sizeof(binn));\n  if (binn_object_next(iter, pkey, value) == 0)\n  {\n    free_fn(value);\n    return 0;\n  }\n  value->allocated = 1;\n  return value;\n}\n\n",
            "calle": [
                "binn_malloc",
                "binn_object_next",
                "free_fn"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "iter",
                        "type": "binn_iter *",
                        "definition": [
                            "binn_iter *iter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pkey",
                        "type": "char *",
                        "definition": [
                            "char *pkey"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn *",
                        "definition": [
                            "binn *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int value_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "free_fn",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_next",
            "header": "BOOL binn_list_next(binn_iter *iter, binn *value)",
            "params": [
                "binn_iter *iter",
                "binn *value"
            ],
            "definition": "BOOL binn_list_next(binn_iter *iter, binn *value)\n{\n  unsigned char *pnow;\n  unsigned int pnow_idx = 0;\n  if (((((iter == 0) || (iter->pnext == 0)) || (iter->pnext > iter->plimit)) || (iter->current > iter->count)) || (iter->type != 0xE0))\n  {\n    return 0;\n  }\n  iter->current += 1;\n  if (iter->current > iter->count)\n  {\n    return 0;\n  }\n  pnow_idx = iter->pnext;\n  iter->pnext = AdvanceDataPos(pnow, iter->plimit);\n  if ((iter->pnext != 0) && (iter->pnext < (&pnow[pnow_idx])))\n  {\n    return 0;\n  }\n  return GetValue(pnow, value);\n}\n\n",
            "calle": [
                "AdvanceDataPos",
                "GetValue"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "iter",
                        "type": "binn_iter *",
                        "definition": [
                            "binn_iter *iter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn *",
                        "definition": [
                            "binn *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pnow",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *pnow"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pnow_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pnow_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_next",
            "header": "BOOL binn_map_next(binn_iter *iter, int *pid, binn *value)",
            "params": [
                "binn_iter *iter",
                "int *pid",
                "binn *value"
            ],
            "definition": "BOOL binn_map_next(binn_iter *iter, int *pid, binn *value)\n{\n  return binn_read_next_pair(0xE1, iter, pid, 0, value);\n}\n\n",
            "calle": [
                "binn_read_next_pair"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "iter",
                        "type": "binn_iter *",
                        "definition": [
                            "binn_iter *iter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pid",
                        "type": "int *",
                        "definition": [
                            "int *pid"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn *",
                        "definition": [
                            "binn *value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_next",
            "header": "BOOL binn_object_next(binn_iter *iter, char *pkey, binn *value)",
            "params": [
                "binn_iter *iter",
                "char *pkey",
                "binn *value"
            ],
            "definition": "BOOL binn_object_next(binn_iter *iter, char *pkey, binn *value)\n{\n  return binn_read_next_pair(0xE2, iter, 0, pkey, value);\n}\n\n",
            "calle": [
                "binn_read_next_pair"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "iter",
                        "type": "binn_iter *",
                        "definition": [
                            "binn_iter *iter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pkey",
                        "type": "char *",
                        "definition": [
                            "char *pkey"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn *",
                        "definition": [
                            "binn *value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_read_next",
            "header": "void *binn_list_read_next(binn_iter *iter, int *ptype, int *psize)",
            "params": [
                "binn_iter *iter",
                "int *ptype",
                "int *psize"
            ],
            "definition": "void *binn_list_read_next(binn_iter *iter, int *ptype, int *psize)\n{\n  binn value;\n  if (binn_list_next(iter, &value) == 0)\n  {\n    return 0;\n  }\n  if (ptype)\n  {\n    *ptype = value.type;\n  }\n  if (psize)\n  {\n    *psize = value.size;\n  }\n  return store_value(&value);\n}\n\n",
            "calle": [
                "binn_list_next",
                "store_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "iter",
                        "type": "binn_iter *",
                        "definition": [
                            "binn_iter *iter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptype",
                        "type": "int *",
                        "definition": [
                            "int *ptype"
                        ]
                    },
                    {
                        "path": null,
                        "name": "psize",
                        "type": "int *",
                        "definition": [
                            "int *psize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn",
                        "definition": [
                            "binn value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_read_next",
            "header": "void *binn_map_read_next(binn_iter *iter, int *pid, int *ptype, int *psize)",
            "params": [
                "binn_iter *iter",
                "int *pid",
                "int *ptype",
                "int *psize"
            ],
            "definition": "void *binn_map_read_next(binn_iter *iter, int *pid, int *ptype, int *psize)\n{\n  binn value;\n  if (binn_map_next(iter, pid, &value) == 0)\n  {\n    return 0;\n  }\n  if (ptype)\n  {\n    *ptype = value.type;\n  }\n  if (psize)\n  {\n    *psize = value.size;\n  }\n  return store_value(&value);\n}\n\n",
            "calle": [
                "binn_map_next",
                "store_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "iter",
                        "type": "binn_iter *",
                        "definition": [
                            "binn_iter *iter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pid",
                        "type": "int *",
                        "definition": [
                            "int *pid"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptype",
                        "type": "int *",
                        "definition": [
                            "int *ptype"
                        ]
                    },
                    {
                        "path": null,
                        "name": "psize",
                        "type": "int *",
                        "definition": [
                            "int *psize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn",
                        "definition": [
                            "binn value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_read_next",
            "header": "void *binn_object_read_next(binn_iter *iter, char *pkey, int *ptype, int *psize)",
            "params": [
                "binn_iter *iter",
                "char *pkey",
                "int *ptype",
                "int *psize"
            ],
            "definition": "void *binn_object_read_next(binn_iter *iter, char *pkey, int *ptype, int *psize)\n{\n  binn value;\n  if (binn_object_next(iter, pkey, &value) == 0)\n  {\n    return 0;\n  }\n  if (ptype)\n  {\n    *ptype = value.type;\n  }\n  if (psize)\n  {\n    *psize = value.size;\n  }\n  return store_value(&value);\n}\n\n",
            "calle": [
                "binn_object_next",
                "store_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "iter",
                        "type": "binn_iter *",
                        "definition": [
                            "binn_iter *iter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pkey",
                        "type": "char *",
                        "definition": [
                            "char *pkey"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptype",
                        "type": "int *",
                        "definition": [
                            "int *ptype"
                        ]
                    },
                    {
                        "path": null,
                        "name": "psize",
                        "type": "int *",
                        "definition": [
                            "int *psize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn",
                        "definition": [
                            "binn value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_set_string",
            "header": "BOOL binn_set_string(binn *item, char *str, binn_mem_free pfree)",
            "params": [
                "binn *item",
                "char *str",
                "binn_mem_free pfree"
            ],
            "definition": "BOOL binn_set_string(binn *item, char *str, binn_mem_free pfree)\n{\n  if ((item == 0) || (str == 0))\n  {\n    return 0;\n  }\n  if (pfree == ((binn_mem_free) (-1)))\n  {\n    item->ptr = binn_memdup(str, strlen(str) + 1);\n    if (item->ptr == 0)\n    {\n      return 0;\n    }\n    item->freefn = free_fn;\n  }\n  else\n  {\n    item->ptr = str;\n    item->freefn = pfree;\n  }\n  item->type = 0xA0;\n  return 1;\n}\n\n",
            "calle": [
                "binn_memdup",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "item",
                        "type": "binn *",
                        "definition": [
                            "binn *item"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "char *",
                        "definition": [
                            "char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pfree",
                        "type": "binn_mem_free",
                        "definition": [
                            "binn_mem_free pfree"
                        ]
                    },
                    {
                        "path": null,
                        "name": "free_fn",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_set_blob",
            "header": "BOOL binn_set_blob(binn *item, void *ptr, int size, binn_mem_free pfree)",
            "params": [
                "binn *item",
                "void *ptr",
                "int size",
                "binn_mem_free pfree"
            ],
            "definition": "BOOL binn_set_blob(binn *item, void *ptr, int size, binn_mem_free pfree)\n{\n  if ((item == 0) || (ptr == 0))\n  {\n    return 0;\n  }\n  if (pfree == ((binn_mem_free) (-1)))\n  {\n    item->ptr = binn_memdup(ptr, size);\n    if (item->ptr == 0)\n    {\n      return 0;\n    }\n    item->freefn = free_fn;\n  }\n  else\n  {\n    item->ptr = ptr;\n    item->freefn = pfree;\n  }\n  item->type = 0xC0;\n  item->size = size;\n  return 1;\n}\n\n",
            "calle": [
                "binn_memdup"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "item",
                        "type": "binn *",
                        "definition": [
                            "binn *item"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pfree",
                        "type": "binn_mem_free",
                        "definition": [
                            "binn_mem_free pfree"
                        ]
                    },
                    {
                        "path": null,
                        "name": "free_fn",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_get_int32",
            "header": "BOOL binn_get_int32(binn *value, int *pint)",
            "params": [
                "binn *value",
                "int *pint"
            ],
            "definition": "BOOL binn_get_int32(binn *value, int *pint)\n{\n  if ((value == 0) || (pint == 0))\n  {\n    return 0;\n  }\n  if (type_family(value->type) == 0xf2)\n  {\n    return copy_int_value(value->ptr, pint, value->type, 0x61);\n  }\n  switch (value->type)\n  {\n    case 0x62:\n    {\n      if ((value->vfloat < INT32_MIN) || (value->vfloat > INT32_MAX))\n      {\n        return 0;\n      }\n      *pint = (value->vfloat >= 0.0) ? ((int) (value->vfloat + 0.5)) : (((value->vfloat - ((double) ((int) value->vfloat))) <= (-0.5)) ? ((int) value->vfloat) : ((int) (value->vfloat - 0.5)));\n      break;\n    }\n\n    case 0x82:\n    {\n      if ((value->vdouble < INT32_MIN) || (value->vdouble > INT32_MAX))\n      {\n        return 0;\n      }\n      *pint = (value->vdouble >= 0.0) ? ((int) (value->vdouble + 0.5)) : (((value->vdouble - ((double) ((int) value->vdouble))) <= (-0.5)) ? ((int) value->vdouble) : ((int) (value->vdouble - 0.5)));\n      break;\n    }\n\n    case 0xA0:\n    {\n      if (is_integer((char *) value->ptr))\n      {\n        *pint = atoi((char *) value->ptr);\n      }\n      else\n        if (is_float((char *) value->ptr))\n      {\n        *pint = (atof((char *) value->ptr) >= 0.0) ? ((int) (atof((char *) value->ptr) + 0.5)) : (((atof((char *) value->ptr) - ((double) ((int) atof((char *) value->ptr)))) <= (-0.5)) ? ((int) atof((char *) value->ptr)) : ((int) (atof((char *) value->ptr) - 0.5)));\n      }\n      else\n        return 0;\n      break;\n    }\n\n    case 0x80061:\n    {\n      *pint = value->vbool;\n      break;\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n  return 1;\n}\n\n",
            "calle": [
                "atof",
                "atoi",
                "copy_int_value",
                "is_float",
                "is_integer",
                "type_family"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn *",
                        "definition": [
                            "binn *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pint",
                        "type": "int *",
                        "definition": [
                            "int *pint"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_get_int64",
            "header": "BOOL binn_get_int64(binn *value, int64 *pint)",
            "params": [
                "binn *value",
                "int64 *pint"
            ],
            "definition": "BOOL binn_get_int64(binn *value, int64 *pint)\n{\n  if ((value == 0) || (pint == 0))\n  {\n    return 0;\n  }\n  if (type_family(value->type) == 0xf2)\n  {\n    return copy_int_value(value->ptr, pint, value->type, 0x81);\n  }\n  switch (value->type)\n  {\n    case 0x62:\n    {\n      if ((value->vfloat < INT64_MIN) || (value->vfloat > INT64_MAX))\n      {\n        return 0;\n      }\n      *pint = (value->vfloat >= 0.0) ? ((int) (value->vfloat + 0.5)) : (((value->vfloat - ((double) ((int) value->vfloat))) <= (-0.5)) ? ((int) value->vfloat) : ((int) (value->vfloat - 0.5)));\n      break;\n    }\n\n    case 0x82:\n    {\n      if ((value->vdouble < INT64_MIN) || (value->vdouble > INT64_MAX))\n      {\n        return 0;\n      }\n      *pint = (value->vdouble >= 0.0) ? ((int) (value->vdouble + 0.5)) : (((value->vdouble - ((double) ((int) value->vdouble))) <= (-0.5)) ? ((int) value->vdouble) : ((int) (value->vdouble - 0.5)));\n      break;\n    }\n\n    case 0xA0:\n    {\n      if (is_integer((char *) value->ptr))\n      {\n        *pint = atoi64((char *) value->ptr);\n      }\n      else\n        if (is_float((char *) value->ptr))\n      {\n        *pint = (atof((char *) value->ptr) >= 0.0) ? ((int) (atof((char *) value->ptr) + 0.5)) : (((atof((char *) value->ptr) - ((double) ((int) atof((char *) value->ptr)))) <= (-0.5)) ? ((int) atof((char *) value->ptr)) : ((int) (atof((char *) value->ptr) - 0.5)));\n      }\n      else\n        return 0;\n      break;\n    }\n\n    case 0x80061:\n    {\n      *pint = value->vbool;\n      break;\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n  return 1;\n}\n\n",
            "calle": [
                "atof",
                "atoi64",
                "copy_int_value",
                "is_float",
                "is_integer",
                "type_family"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn *",
                        "definition": [
                            "binn *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pint",
                        "type": "int64 *",
                        "definition": [
                            "int64 *pint"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_get_double",
            "header": "BOOL binn_get_double(binn *value, double *pfloat)",
            "params": [
                "binn *value",
                "double *pfloat"
            ],
            "definition": "BOOL binn_get_double(binn *value, double *pfloat)\n{\n  int64 vint;\n  if ((value == 0) || (pfloat == 0))\n  {\n    return 0;\n  }\n  if (type_family(value->type) == 0xf2)\n  {\n    if (copy_int_value(value->ptr, &vint, value->type, 0x81) == 0)\n    {\n      return 0;\n    }\n    *pfloat = (double) vint;\n    return 1;\n  }\n  switch (value->type)\n  {\n    case 0x62:\n    {\n      *pfloat = value->vfloat;\n      break;\n    }\n\n    case 0x82:\n    {\n      *pfloat = value->vdouble;\n      break;\n    }\n\n    case 0xA0:\n    {\n      if (is_integer((char *) value->ptr))\n      {\n        *pfloat = (double) atoi64((char *) value->ptr);\n      }\n      else\n        if (is_float((char *) value->ptr))\n      {\n        *pfloat = atof((char *) value->ptr);\n      }\n      else\n        return 0;\n      break;\n    }\n\n    case 0x80061:\n    {\n      *pfloat = value->vbool;\n      break;\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n  return 1;\n}\n\n",
            "calle": [
                "atof",
                "atoi64",
                "copy_int_value",
                "is_float",
                "is_integer",
                "type_family"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn *",
                        "definition": [
                            "binn *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pfloat",
                        "type": "double *",
                        "definition": [
                            "double *pfloat"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vint",
                        "type": "int64",
                        "definition": [
                            "int64 vint"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_get_bool",
            "header": "BOOL binn_get_bool(binn *value, BOOL *pbool)",
            "params": [
                "binn *value",
                "BOOL *pbool"
            ],
            "definition": "BOOL binn_get_bool(binn *value, BOOL *pbool)\n{\n  int64 vint;\n  if ((value == 0) || (pbool == 0))\n  {\n    return 0;\n  }\n  if (type_family(value->type) == 0xf2)\n  {\n    if (copy_int_value(value->ptr, &vint, value->type, 0x81) == 0)\n    {\n      return 0;\n    }\n    *pbool = (vint != 0) ? (1) : (0);\n    return 1;\n  }\n  switch (value->type)\n  {\n    case 0x80061:\n    {\n      *pbool = value->vbool;\n      break;\n    }\n\n    case 0x62:\n    {\n      *pbool = (value->vfloat != 0) ? (1) : (0);\n      break;\n    }\n\n    case 0x82:\n    {\n      *pbool = (value->vdouble != 0) ? (1) : (0);\n      break;\n    }\n\n    case 0xA0:\n    {\n      return is_bool_str((char *) value->ptr, pbool);\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n  return 1;\n}\n\n",
            "calle": [
                "copy_int_value",
                "is_bool_str",
                "type_family"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn *",
                        "definition": [
                            "binn *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pbool",
                        "type": "BOOL *",
                        "definition": [
                            "BOOL *pbool"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vint",
                        "type": "int64",
                        "definition": [
                            "int64 vint"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_get_str",
            "header": "char *binn_get_str(binn *value)",
            "params": [
                "binn *value"
            ],
            "definition": "char *binn_get_str(binn *value)\n{\n  int64 vint;\n  char buf[128];\n  if (value == 0)\n  {\n    return 0;\n  }\n  if (type_family(value->type) == 0xf2)\n  {\n    if (copy_int_value(value->ptr, &vint, value->type, 0x81) == 0)\n    {\n      return 0;\n    }\n    snprintf(buf, sizeof(buf), \"%lli\", vint);\n    goto loc_convert_value;\n  }\n  switch (value->type)\n  {\n    case 0x62:\n    {\n      value->vdouble = value->vfloat;\n    }\n\n    case 0x82:\n    {\n      snprintf(buf, sizeof(buf), \"%g\", value->vdouble);\n      goto loc_convert_value;\n    }\n\n    case 0xA0:\n    {\n      return (char *) value->ptr;\n    }\n\n    case 0x80061:\n    {\n      if (value->vbool)\n      {\n        strcpy(buf, \"true\");\n      }\n      else\n        strcpy(buf, \"false\");\n      goto loc_convert_value;\n    }\n\n  }\n\n  return 0;\n  loc_convert_value:\n  value->ptr = strdup(buf);\n\n  if (value->ptr == 0)\n  {\n    return 0;\n  }\n  value->freefn = free;\n  value->type = 0xA0;\n  return (char *) value->ptr;\n}\n\n",
            "calle": [
                "copy_int_value",
                "snprintf",
                "strcpy",
                "strdup",
                "type_family"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn *",
                        "definition": [
                            "binn *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vint",
                        "type": "int64",
                        "definition": [
                            "int64 vint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char [128]",
                        "definition": [
                            "char buf[128]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "copy_be16",
            "header": "",
            "params": [
                "u16 *pdest",
                "u16 *psource"
            ],
            "definition": "static void copy_be16(u16 *pdest, u16 *psource)\n{\n  unsigned char *source = (unsigned char *) psource;\n  unsigned char *dest = (unsigned char *) pdest;\n  dest[0] = source[1];\n  dest[1] = source[0];\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pdest",
                        "type": "u16 *",
                        "definition": [
                            "u16 *pdest"
                        ]
                    },
                    {
                        "path": null,
                        "name": "psource",
                        "type": "u16 *",
                        "definition": [
                            "u16 *psource"
                        ]
                    },
                    {
                        "path": null,
                        "name": "source",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *source = (unsigned char *) psource"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *dest = (unsigned char *) pdest"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "copy_be32",
            "header": "",
            "params": [
                "u32 *pdest",
                "u32 *psource"
            ],
            "definition": "static void copy_be32(u32 *pdest, u32 *psource)\n{\n  unsigned char *source = (unsigned char *) psource;\n  unsigned char *dest = (unsigned char *) pdest;\n  dest[0] = source[3];\n  dest[1] = source[2];\n  dest[2] = source[1];\n  dest[3] = source[0];\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pdest",
                        "type": "u32 *",
                        "definition": [
                            "u32 *pdest"
                        ]
                    },
                    {
                        "path": null,
                        "name": "psource",
                        "type": "u32 *",
                        "definition": [
                            "u32 *psource"
                        ]
                    },
                    {
                        "path": null,
                        "name": "source",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *source = (unsigned char *) psource"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *dest = (unsigned char *) pdest"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "copy_be64",
            "header": "",
            "params": [
                "u64 *pdest",
                "u64 *psource"
            ],
            "definition": "static void copy_be64(u64 *pdest, u64 *psource)\n{\n  unsigned char *source = (unsigned char *) psource;\n  unsigned char *dest = (unsigned char *) pdest;\n  int i;\n  for (i = 0; i < 8; i += 1)\n  {\n    dest[i] = source[7 - i];\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pdest",
                        "type": "u64 *",
                        "definition": [
                            "u64 *pdest"
                        ]
                    },
                    {
                        "path": null,
                        "name": "psource",
                        "type": "u64 *",
                        "definition": [
                            "u64 *psource"
                        ]
                    },
                    {
                        "path": null,
                        "name": "source",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *source = (unsigned char *) psource"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *dest = (unsigned char *) pdest"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "IsValidBinnHeader",
            "header": "static BOOL IsValidBinnHeader(void *pbuf, int *ptype, int *pcount, int *psize, int *pheadersize)",
            "params": [
                "void *pbuf",
                "int *ptype",
                "int *pcount",
                "int *psize",
                "int *pheadersize"
            ],
            "definition": "static BOOL IsValidBinnHeader(void *pbuf, int *ptype, int *pcount, int *psize, int *pheadersize)\n{\n  unsigned char byte;\n  unsigned char *p;\n  unsigned int p_idx = 0;\n  unsigned char *plimit = 0;\n  unsigned int plimit_idx = 0;\n  int int32;\n  int type;\n  int size;\n  int count;\n  if (pbuf == 0)\n  {\n    return 0;\n  }\n  p_idx = (unsigned char *) pbuf;\n  if (psize && ((*psize) > 0))\n  {\n    plimit_idx = ((&p[p_idx]) + (*psize)) - 1;\n  }\n  byte = p[p_idx];\n  p_idx += 1;\n  if ((byte & 0xE0) != 0xE0)\n  {\n    return 0;\n  }\n  if (byte & 0x10)\n  {\n    return 0;\n  }\n  type = byte;\n  switch (type)\n  {\n    case 0xE0:\n\n    case 0xE1:\n\n    case 0xE2:\n    {\n      break;\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n  if ((&plimit[plimit_idx]) && ((&p[p_idx]) > (&plimit[plimit_idx])))\n  {\n    return 0;\n  }\n  int32 = *((unsigned char *) p);\n  if (int32 & 0x80)\n  {\n    if ((&plimit[plimit_idx]) && ((((&p[p_idx]) + (sizeof(int))) - 1) > (&plimit[plimit_idx])))\n    {\n      return 0;\n    }\n    copy_be32((u32 *) (&int32), (u32 *) p);\n    int32 &= 0x7FFFFFFF;\n    p_idx += 4;\n  }\n  else\n  {\n    p_idx += 1;\n  }\n  size = int32;\n  if ((&plimit[plimit_idx]) && ((&p[p_idx]) > (&plimit[plimit_idx])))\n  {\n    return 0;\n  }\n  int32 = *((unsigned char *) p);\n  if (int32 & 0x80)\n  {\n    if ((&plimit[plimit_idx]) && ((((&p[p_idx]) + (sizeof(int))) - 1) > (&plimit[plimit_idx])))\n    {\n      return 0;\n    }\n    copy_be32((u32 *) (&int32), (u32 *) p);\n    int32 &= 0x7FFFFFFF;\n    p_idx += 4;\n  }\n  else\n  {\n    p_idx += 1;\n  }\n  count = int32;\n  if ((size < 3) || (count < 0))\n  {\n    return 0;\n  }\n  if (ptype)\n  {\n    *ptype = type;\n  }\n  if (pcount)\n  {\n    *pcount = count;\n  }\n  if (psize && ((*psize) == 0))\n  {\n    *psize = size;\n  }\n  if (pheadersize)\n  {\n    *pheadersize = (int) ((&p[p_idx]) - ((unsigned char *) pbuf));\n  }\n  return 1;\n}\n\n",
            "calle": [
                "copy_be32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pbuf",
                        "type": "void *",
                        "definition": [
                            "void *pbuf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptype",
                        "type": "int *",
                        "definition": [
                            "int *ptype"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pcount",
                        "type": "int *",
                        "definition": [
                            "int *pcount"
                        ]
                    },
                    {
                        "path": null,
                        "name": "psize",
                        "type": "int *",
                        "definition": [
                            "int *psize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pheadersize",
                        "type": "int *",
                        "definition": [
                            "int *pheadersize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "byte",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char byte"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plimit",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *plimit = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plimit_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int plimit_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "int32",
                        "type": "int",
                        "definition": [
                            "int int32"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "check_alloc_functions",
            "header": "",
            "params": [],
            "definition": "static void check_alloc_functions()\n{\n  if (malloc_fn == 0)\n  {\n    malloc_fn = &malloc;\n  }\n  if (realloc_fn == 0)\n  {\n    realloc_fn = &realloc;\n  }\n  if (free_fn == 0)\n  {\n    free_fn = &free;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "malloc_fn",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "realloc_fn",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "free_fn",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_malloc",
            "header": "",
            "params": [
                "int size"
            ],
            "definition": "static void *binn_malloc(int size)\n{\n  check_alloc_functions();\n  return malloc_fn(size);\n}\n\n",
            "calle": [
                "check_alloc_functions",
                "malloc_fn"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "malloc_fn",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_memdup",
            "header": "",
            "params": [
                "void *src",
                "int size"
            ],
            "definition": "static void *binn_memdup(void *src, int size)\n{\n  void *dest;\n  unsigned int dest_idx = 0;\n  if ((src == 0) || (size <= 0))\n  {\n    return 0;\n  }\n  dest_idx = binn_malloc(size);\n  if ((&dest[dest_idx]) == 0)\n  {\n    return 0;\n  }\n  memcpy(dest, src, size);\n  return dest;\n}\n\n",
            "calle": [
                "binn_malloc",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "src",
                        "type": "void *",
                        "definition": [
                            "void *src"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest",
                        "type": "void *",
                        "definition": [
                            "void *dest"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dest_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "strlen2",
            "header": "",
            "params": [
                "char *str"
            ],
            "definition": "static size_t strlen2(char *str)\n{\n  if (str == 0)\n  {\n    return 0;\n  }\n  return strlen(str);\n}\n\n",
            "calle": [
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str",
                        "type": "char *",
                        "definition": [
                            "char *str"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_get_ptr_type",
            "header": "",
            "params": [
                "void *ptr"
            ],
            "definition": "static int binn_get_ptr_type(void *ptr)\n{\n  if (ptr == 0)\n  {\n    return 0;\n  }\n  switch (*((unsigned int *) ptr))\n  {\n    case 0x1F22B11F:\n    {\n      return 1;\n    }\n\n    default:\n    {\n      return 2;\n    }\n\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "CalcAllocation",
            "header": "",
            "params": [
                "int needed_size",
                "int alloc_size"
            ],
            "definition": "static int CalcAllocation(int needed_size, int alloc_size)\n{\n  int calc_size;\n  calc_size = alloc_size;\n  while (calc_size < needed_size)\n  {\n    calc_size <<= 1;\n  }\n\n  return calc_size;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "needed_size",
                        "type": "int",
                        "definition": [
                            "int needed_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alloc_size",
                        "type": "int",
                        "definition": [
                            "int alloc_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "calc_size",
                        "type": "int",
                        "definition": [
                            "int calc_size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "CheckAllocation",
            "header": "",
            "params": [
                "binn *item",
                "int add_size"
            ],
            "definition": "static BOOL CheckAllocation(binn *item, int add_size)\n{\n  int alloc_size;\n  void *ptr;\n  unsigned int ptr_idx = 0;\n  if ((item->used_size + add_size) > item->alloc_size)\n  {\n    if (item->pre_allocated)\n    {\n      return 0;\n    }\n    alloc_size = CalcAllocation(item->used_size + add_size, item->alloc_size);\n    ptr_idx = realloc_fn(item->pbuf, alloc_size);\n    if ((&ptr[ptr_idx]) == 0)\n    {\n      return 0;\n    }\n    item->pbuf = &ptr[ptr_idx];\n    item->alloc_size = alloc_size;\n  }\n  return 1;\n}\n\n",
            "calle": [
                "CalcAllocation",
                "realloc_fn"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "item",
                        "type": "binn *",
                        "definition": [
                            "binn *item"
                        ]
                    },
                    {
                        "path": null,
                        "name": "add_size",
                        "type": "int",
                        "definition": [
                            "int add_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alloc_size",
                        "type": "int",
                        "definition": [
                            "int alloc_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ptr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "realloc_fn",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "AdvanceDataPos",
            "header": "",
            "params": [
                "unsigned char *p",
                "unsigned char *plimit"
            ],
            "definition": "static unsigned char *AdvanceDataPos(unsigned char *p, unsigned char *plimit)\n{\n  unsigned int p_idx = 0;\n  unsigned char byte;\n  int storage_type;\n  int DataSize;\n  if ((&p[p_idx]) > plimit)\n  {\n    return 0;\n  }\n  byte = p[p_idx];\n  p_idx += 1;\n  storage_type = byte & 0xE0;\n  if (byte & 0x10)\n  {\n    p_idx += 1;\n  }\n  switch (storage_type)\n  {\n    case 0x00:\n    {\n      break;\n    }\n\n    case 0x20:\n    {\n      p_idx += 1;\n      break;\n    }\n\n    case 0x40:\n    {\n      p_idx += 2;\n      break;\n    }\n\n    case 0x60:\n    {\n      p_idx += 4;\n      break;\n    }\n\n    case 0x80:\n    {\n      p_idx += 8;\n      break;\n    }\n\n    case 0xC0:\n\n    case 0xA0:\n    {\n      helper_AdvanceDataPos_2(&p_idx, &DataSize, p, plimit, storage_type);\n    }\n\n    case 0xE0:\n    {\n      helper_AdvanceDataPos_1(&p_idx, &DataSize, p, plimit);\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n  if ((&p[p_idx]) > plimit)\n  {\n    return 0;\n  }\n  return p;\n}\n\n",
            "calle": [
                "helper_AdvanceDataPos_1",
                "helper_AdvanceDataPos_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plimit",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *plimit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "byte",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char byte"
                        ]
                    },
                    {
                        "path": null,
                        "name": "storage_type",
                        "type": "int",
                        "definition": [
                            "int storage_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "DataSize",
                        "type": "int",
                        "definition": [
                            "int DataSize"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "read_map_id",
            "header": "",
            "params": [
                "unsigned char **pp",
                "unsigned char *plimit"
            ],
            "definition": "static int read_map_id(unsigned char **pp, unsigned char *plimit)\n{\n  unsigned char *p;\n  unsigned int p_idx = 0;\n  unsigned char c;\n  unsigned char sign;\n  unsigned char type;\n  int id;\n  int extra_bytes;\n  p_idx = *pp;\n  c = p[p_idx];\n  p_idx += 1;\n  if (c & 0x80)\n  {\n    extra_bytes = ((c & 0x60) >> 5) + 1;\n    if (((&p[p_idx]) + extra_bytes) > plimit)\n    {\n      *pp = (&p[p_idx]) + extra_bytes;\n      return 0;\n    }\n  }\n  type = c & 0xE0;\n  sign = c & 0x10;\n  if ((c & 0x80) == 0)\n  {\n    sign = c & 0x40;\n    id = c & 0x3F;\n  }\n  else\n    if (type == 0x80)\n  {\n    id = c & 0x0F;\n    id = (id << 8) | p[p_idx];\n    p_idx += 1;\n  }\n  else\n    if (type == 0xA0)\n  {\n    id = c & 0x0F;\n    id = (id << 8) | p[p_idx];\n    p_idx += 1;\n    id = (id << 8) | (*((&p[p_idx])++));\n  }\n  else\n    if (type == 0xC0)\n  {\n    helper_read_map_id_1(&p_idx, &id, p, c);\n  }\n  else\n    if (type == 0xE0)\n  {\n    copy_be32((u32 *) (&id), (u32 *) p);\n    p_idx += 4;\n  }\n  else\n  {\n    *pp = plimit + 2;\n    return 0;\n  }\n  if (sign)\n  {\n    id = -id;\n  }\n  *pp = &p[p_idx];\n  return id;\n}\n\n",
            "calle": [
                "copy_be32",
                "helper_read_map_id_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pp",
                        "type": "unsigned char **",
                        "definition": [
                            "unsigned char **pp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plimit",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *plimit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sign",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char sign"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extra_bytes",
                        "type": "int",
                        "definition": [
                            "int extra_bytes"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "SearchForID",
            "header": "",
            "params": [
                "unsigned char *p",
                "int header_size",
                "int size",
                "int numitems",
                "int id"
            ],
            "definition": "static unsigned char *SearchForID(unsigned char *p, int header_size, int size, int numitems, int id)\n{\n  unsigned int p_idx = 0;\n  unsigned char *plimit;\n  unsigned int plimit_idx = 0;\n  unsigned char *base;\n  unsigned int base_idx = 0;\n  int i;\n  int int32;\n  base_idx = &p[p_idx];\n  plimit_idx = ((&p[p_idx]) + size) - 1;\n  p_idx += header_size;\n  for (i = 0; i < numitems; i += 1)\n  {\n    int32 = read_map_id(&(&p[p_idx]), plimit);\n    if ((&p[p_idx]) > (&plimit[plimit_idx]))\n    {\n      break;\n    }\n    if (int32 == id)\n    {\n      return p;\n    }\n    p_idx = AdvanceDataPos(p_idx, plimit);\n    if (((&p[p_idx]) == 0) || ((&p[p_idx]) < (&base[base_idx])))\n    {\n      break;\n    }\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "AdvanceDataPos",
                "read_map_id"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "header_size",
                        "type": "int",
                        "definition": [
                            "int header_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "numitems",
                        "type": "int",
                        "definition": [
                            "int numitems"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plimit",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *plimit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plimit_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int plimit_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *base"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int base_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "int32",
                        "type": "int",
                        "definition": [
                            "int int32"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "SearchForKey",
            "header": "",
            "params": [
                "unsigned char *p",
                "int header_size",
                "int size",
                "int numitems",
                "const char *key"
            ],
            "definition": "static unsigned char *SearchForKey(unsigned char *p, int header_size, int size, int numitems, const char *key)\n{\n  unsigned int p_idx = 0;\n  unsigned char len;\n  unsigned char *plimit;\n  unsigned int plimit_idx = 0;\n  unsigned char *base;\n  unsigned int base_idx = 0;\n  int i;\n  int keylen;\n  base_idx = &p[p_idx];\n  plimit_idx = ((&p[p_idx]) + size) - 1;\n  p_idx += header_size;\n  keylen = strlen(key);\n  for (i = 0; i < numitems; i += 1)\n  {\n    helper_SearchForKey_1(&p_idx, &len, p, key, plimit, plimit_idx, base, base_idx, keylen);\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "helper_SearchForKey_1",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "header_size",
                        "type": "int",
                        "definition": [
                            "int header_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "numitems",
                        "type": "int",
                        "definition": [
                            "int numitems"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plimit",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *plimit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plimit_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int plimit_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *base"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int base_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "keylen",
                        "type": "int",
                        "definition": [
                            "int keylen"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "AddValue",
            "header": "static BOOL AddValue(binn *item, int type, void *pvalue, int size)",
            "params": [
                "binn *item",
                "int type",
                "void *pvalue",
                "int size"
            ],
            "definition": "static BOOL AddValue(binn *item, int type, void *pvalue, int size)\n{\n  unsigned int pvalue_idx = 0;\n  int int32;\n  int ArgSize;\n  int storage_type;\n  int extra_type;\n  unsigned char *p;\n  unsigned int p_idx = 0;\n  binn_get_type_info(type, &storage_type, &extra_type);\n  if ((&pvalue[pvalue_idx]) == 0)\n  {\n    switch (storage_type)\n    {\n      case 0x00:\n      {\n        break;\n      }\n\n      case 0xC0:\n\n      case 0xA0:\n      {\n        if (size == 0)\n        {\n          break;\n        }\n      }\n\n      default:\n      {\n        return 0;\n      }\n\n    }\n\n  }\n  if ((type_family(type) == 0xf2) && (item->disable_int_compression == 0))\n  {\n    pvalue_idx = compress_int(&storage_type, &type, pvalue_idx);\n  }\n  switch (storage_type)\n  {\n    case 0x00:\n    {\n      size = 0;\n      ArgSize = size;\n      break;\n    }\n\n    case 0x20:\n    {\n      size = 1;\n      ArgSize = size;\n      break;\n    }\n\n    case 0x40:\n    {\n      size = 2;\n      ArgSize = size;\n      break;\n    }\n\n    case 0x60:\n    {\n      size = 4;\n      ArgSize = size;\n      break;\n    }\n\n    case 0x80:\n    {\n      size = 8;\n      ArgSize = size;\n      break;\n    }\n\n    case 0xC0:\n    {\n      if (size < 0)\n      {\n        return 0;\n      }\n      ArgSize = size + 4;\n      break;\n    }\n\n    case 0xA0:\n    {\n      helper_AddValue_1(&size, &ArgSize, pvalue);\n    }\n\n    case 0xE0:\n    {\n      if (size <= 0)\n      {\n        return 0;\n      }\n      ArgSize = size;\n      break;\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n  ArgSize += 2;\n  if (CheckAllocation(item, ArgSize) == 0)\n  {\n    return 0;\n  }\n  p_idx = ((unsigned char *) item->pbuf) + item->used_size;\n  if (storage_type != 0xE0)\n  {\n    helper_AddValue_2(&p_idx, item, type, p);\n  }\n  switch (storage_type)\n  {\n    case 0x00:\n    {\n      break;\n    }\n\n    case 0x20:\n    {\n      *((char *) p) = *((char *) pvalue);\n      item->used_size += 1;\n      break;\n    }\n\n    case 0x40:\n    {\n      copy_be16((u16 *) p, (u16 *) pvalue);\n      item->used_size += 2;\n      break;\n    }\n\n    case 0x60:\n    {\n      copy_be32((u32 *) p, (u32 *) pvalue);\n      item->used_size += 4;\n      break;\n    }\n\n    case 0x80:\n    {\n      copy_be64((u64 *) p, (u64 *) pvalue);\n      item->used_size += 8;\n      break;\n    }\n\n    case 0xC0:\n\n    case 0xA0:\n    {\n      helper_AddValue_3(&size, &int32, &p_idx, item, pvalue, storage_type, p);\n    }\n\n    case 0xE0:\n    {\n      memcpy(p, pvalue, size);\n      item->used_size += size;\n      break;\n    }\n\n  }\n\n  item->dirty = 1;\n  return 1;\n}\n\n",
            "calle": [
                "CheckAllocation",
                "binn_get_type_info",
                "compress_int",
                "copy_be16",
                "copy_be32",
                "copy_be64",
                "helper_AddValue_1",
                "helper_AddValue_2",
                "helper_AddValue_3",
                "memcpy",
                "type_family"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "item",
                        "type": "binn *",
                        "definition": [
                            "binn *item"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "void *",
                        "definition": [
                            "void *pvalue"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pvalue_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "int32",
                        "type": "int",
                        "definition": [
                            "int int32"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ArgSize",
                        "type": "int",
                        "definition": [
                            "int ArgSize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "storage_type",
                        "type": "int",
                        "definition": [
                            "int storage_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extra_type",
                        "type": "int",
                        "definition": [
                            "int extra_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_list_add_raw",
            "header": "",
            "params": [
                "binn *item",
                "int type",
                "void *pvalue",
                "int size"
            ],
            "definition": "static BOOL binn_list_add_raw(binn *item, int type, void *pvalue, int size)\n{\n  if (((item == 0) || (item->type != 0xE0)) || (item->writable == 0))\n  {\n    return 0;\n  }\n  if (AddValue(item, type, pvalue, size) == 0)\n  {\n    return 0;\n  }\n  item->count += 1;\n  return 1;\n}\n\n",
            "calle": [
                "AddValue"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "item",
                        "type": "binn *",
                        "definition": [
                            "binn *item"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "void *",
                        "definition": [
                            "void *pvalue"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_object_set_raw",
            "header": "",
            "params": [
                "binn *item",
                "const char *key",
                "int type",
                "void *pvalue",
                "int size"
            ],
            "definition": "static BOOL binn_object_set_raw(binn *item, const char *key, int type, void *pvalue, int size)\n{\n  unsigned char *p;\n  unsigned int p_idx = 0;\n  unsigned char len;\n  int int32;\n  if (((item == 0) || (item->type != 0xE2)) || (item->writable == 0))\n  {\n    return 0;\n  }\n  if (key == 0)\n  {\n    return 0;\n  }\n  int32 = strlen(key);\n  if (int32 > 255)\n  {\n    return 0;\n  }\n  p_idx = SearchForKey(item->pbuf, 9, item->used_size, item->count, key);\n  if (p)\n  {\n    return 0;\n  }\n  if (CheckAllocation(item, 1 + int32) == 0)\n  {\n    return 0;\n  }\n  p_idx = ((unsigned char *) item->pbuf) + item->used_size;\n  len = int32;\n  p[p_idx] = len;\n  p_idx += 1;\n  memcpy(p, key, int32);\n  int32 += 1;\n  item->used_size += int32;\n  if (AddValue(item, type, pvalue, size) == 0)\n  {\n    item->used_size -= int32;\n    return 0;\n  }\n  item->count += 1;\n  return 1;\n}\n\n",
            "calle": [
                "AddValue",
                "CheckAllocation",
                "SearchForKey",
                "memcpy",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "item",
                        "type": "binn *",
                        "definition": [
                            "binn *item"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char *",
                        "definition": [
                            "const char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "void *",
                        "definition": [
                            "void *pvalue"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "int32",
                        "type": "int",
                        "definition": [
                            "int int32"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_map_set_raw",
            "header": "",
            "params": [
                "binn *item",
                "int id",
                "int type",
                "void *pvalue",
                "int size"
            ],
            "definition": "static BOOL binn_map_set_raw(binn *item, int id, int type, void *pvalue, int size)\n{\n  unsigned char *base;\n  unsigned char *p;\n  unsigned int p_idx = 0;\n  unsigned char sign;\n  int id_size;\n  if (((item == 0) || (item->type != 0xE1)) || (item->writable == 0))\n  {\n    return 0;\n  }\n  p_idx = SearchForID(item->pbuf, 9, item->used_size, item->count, id);\n  if (p)\n  {\n    return 0;\n  }\n  if (CheckAllocation(item, 5) == 0)\n  {\n    return 0;\n  }\n  p_idx = (base = ((unsigned char *) item->pbuf) + item->used_size);\n  sign = id < 0;\n  if (sign)\n  {\n    id = -id;\n  }\n  if (id <= 0x3F)\n  {\n    p[p_idx] = (sign << 6) | id;\n    p_idx += 1;\n  }\n  else\n    if (id <= 0xFFF)\n  {\n    p[p_idx] = (0x80 | (sign << 4)) | ((id & 0xF00) >> 8);\n    p_idx += 1;\n    *((&p[p_idx])++) = id & 0xFF;\n  }\n  else\n    if (id <= 0xFFFFF)\n  {\n    p[p_idx] = (0xA0 | (sign << 4)) | ((id & 0xF0000) >> 16);\n    p_idx += 1;\n    p[p_idx] = (id & 0xFF00) >> 8;\n    p_idx += 1;\n    *((&p[p_idx])++) = id & 0xFF;\n  }\n  else\n    if (id <= 0xFFFFFFF)\n  {\n    helper_binn_map_set_raw_1(&p_idx, id, p, sign);\n  }\n  else\n  {\n    helper_binn_map_set_raw_2(&id, &p_idx, p, sign);\n  }\n  id_size = (&p[p_idx]) - base;\n  item->used_size += id_size;\n  if (AddValue(item, type, pvalue, size) == 0)\n  {\n    item->used_size -= id_size;\n    return 0;\n  }\n  item->count += 1;\n  return 1;\n}\n\n",
            "calle": [
                "AddValue",
                "CheckAllocation",
                "SearchForID",
                "helper_binn_map_set_raw_1",
                "helper_binn_map_set_raw_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "item",
                        "type": "binn *",
                        "definition": [
                            "binn *item"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "void *",
                        "definition": [
                            "void *pvalue"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *base"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sign",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char sign"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id_size",
                        "type": "int",
                        "definition": [
                            "int id_size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "compress_int",
            "header": "",
            "params": [
                "int *pstorage_type",
                "int *ptype",
                "void *psource"
            ],
            "definition": "static void *compress_int(int *pstorage_type, int *ptype, void *psource)\n{\n  int storage_type;\n  int storage_type2;\n  int type;\n  int type2 = 0;\n  int64 vint = 0;\n  uint64 vuint;\n  char *pvalue;\n  unsigned int pvalue_idx = 0;\n  storage_type = *pstorage_type;\n  if (storage_type == 0x20)\n  {\n    return psource;\n  }\n  type = *ptype;\n  switch (type)\n  {\n    case 0x81:\n    {\n      vint = *((int64 *) psource);\n      goto loc_signed;\n    }\n\n    case 0x61:\n    {\n      vint = *((int *) psource);\n      goto loc_signed;\n    }\n\n    case 0x41:\n    {\n      vint = *((short *) psource);\n      goto loc_signed;\n    }\n\n    case 0x80:\n    {\n      vuint = *((uint64 *) psource);\n      goto loc_positive;\n    }\n\n    case 0x60:\n    {\n      vuint = *((unsigned int *) psource);\n      goto loc_positive;\n    }\n\n    case 0x40:\n    {\n      vuint = *((unsigned short *) psource);\n      goto loc_positive;\n    }\n\n  }\n\n  loc_signed:\n  if (vint >= 0)\n  {\n    vuint = vint;\n    goto loc_positive;\n  }\n\n  if (vint >= INT8_MIN)\n  {\n    type2 = 0x21;\n  }\n  else\n    if (vint >= INT16_MIN)\n  {\n    type2 = 0x41;\n  }\n  else\n    if (vint >= INT32_MIN)\n  {\n    type2 = 0x61;\n  }\n  goto loc_exit;\n  loc_positive:\n  if (vuint <= UINT8_MAX)\n  {\n    type2 = 0x20;\n  }\n  else\n    if (vuint <= UINT16_MAX)\n  {\n    type2 = 0x40;\n  }\n  else\n    if (vuint <= UINT32_MAX)\n  {\n    type2 = 0x60;\n  }\n\n  loc_exit:\n  pvalue_idx = (char *) psource;\n\n  if (type2 && (type2 != type))\n  {\n    *ptype = type2;\n    storage_type2 = binn_get_write_storage(type2);\n    *pstorage_type = storage_type2;\n  }\n  return pvalue;\n}\n\n",
            "calle": [
                "binn_get_write_storage"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pstorage_type",
                        "type": "int *",
                        "definition": [
                            "int *pstorage_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptype",
                        "type": "int *",
                        "definition": [
                            "int *ptype"
                        ]
                    },
                    {
                        "path": null,
                        "name": "psource",
                        "type": "void *",
                        "definition": [
                            "void *psource"
                        ]
                    },
                    {
                        "path": null,
                        "name": "storage_type",
                        "type": "int",
                        "definition": [
                            "int storage_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "storage_type2",
                        "type": "int",
                        "definition": [
                            "int storage_type2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type2",
                        "type": "int",
                        "definition": [
                            "int type2 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vint",
                        "type": "int64",
                        "definition": [
                            "int64 vint = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vuint",
                        "type": "uint64",
                        "definition": [
                            "uint64 vuint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "char *",
                        "definition": [
                            "char *pvalue"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pvalue_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "type_family",
            "header": "static int type_family(int type)",
            "params": [
                "int type"
            ],
            "definition": "static int type_family(int type)\n{\n  switch (type)\n  {\n    case 0xE0:\n\n    case 0xE1:\n\n    case 0xE2:\n    {\n      return 0xf7;\n    }\n\n    case 0x21:\n\n    case 0x41:\n\n    case 0x61:\n\n    case 0x81:\n\n    case 0x20:\n\n    case 0x40:\n\n    case 0x60:\n\n    case 0x80:\n    {\n      return 0xf2;\n    }\n\n    case 0x62:\n\n    case 0x82:\n\n    case 0xA6:\n\n    case 0xA7:\n    {\n      return 0xf3;\n    }\n\n    case 0xA0:\n\n    case 0xB001:\n\n    case 0xB005:\n\n    case 0xB002:\n\n    case 0xB003:\n\n    case 0xB004:\n    {\n      return 0xf4;\n    }\n\n    case 0xC0:\n\n    case 0xD001:\n\n    case 0xD002:\n\n    case 0xD003:\n\n    case 0xD004:\n    {\n      return 0xf5;\n    }\n\n    case 0xA4:\n\n    case 0x83:\n\n    case 0xA2:\n\n    case 0xA3:\n\n    case 0xA1:\n    {\n      return 0xf4;\n    }\n\n    case 0x80061:\n    {\n      return 0xf6;\n    }\n\n    case 0x00:\n    {\n      return 0xf1;\n    }\n\n    default:\n    {\n      return 0x00;\n    }\n\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_save_header",
            "header": "",
            "params": [
                "binn *item"
            ],
            "definition": "static BOOL binn_save_header(binn *item)\n{\n  unsigned char byte;\n  unsigned char *p;\n  unsigned int p_idx = 0;\n  int int32;\n  int size;\n  if (item == 0)\n  {\n    return 0;\n  }\n  p_idx = ((unsigned char *) item->pbuf) + 9;\n  size = (item->used_size - 9) + 3;\n  if (item->count > 127)\n  {\n    p_idx -= 4;\n    size += 3;\n    int32 = item->count | 0x80000000;\n    copy_be32((u32 *) p, (u32 *) (&int32));\n  }\n  else\n  {\n    p_idx -= 1;\n    p[p_idx] = (unsigned char) item->count;\n  }\n  if (size > 127)\n  {\n    p_idx -= 4;\n    size += 3;\n    int32 = size | 0x80000000;\n    copy_be32((u32 *) p, (u32 *) (&int32));\n  }\n  else\n  {\n    p_idx -= 1;\n    p[p_idx] = (unsigned char) size;\n  }\n  p_idx -= 1;\n  p[p_idx] = (unsigned char) item->type;\n  item->ptr = &p[p_idx];\n  item->size = size;\n  (void) byte;\n  item->dirty = 0;\n  return 1;\n}\n\n",
            "calle": [
                "copy_be32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "item",
                        "type": "binn *",
                        "definition": [
                            "binn *item"
                        ]
                    },
                    {
                        "path": null,
                        "name": "byte",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char byte"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "int32",
                        "type": "int",
                        "definition": [
                            "int int32"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_buf_type",
            "header": "",
            "params": [
                "void *pbuf"
            ],
            "definition": "static int binn_buf_type(void *pbuf)\n{\n  int type;\n  if (!IsValidBinnHeader(pbuf, &type, 0, 0, 0))\n  {\n    return 0;\n  }\n  return type;\n}\n\n",
            "calle": [
                "IsValidBinnHeader"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pbuf",
                        "type": "void *",
                        "definition": [
                            "void *pbuf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_buf_count",
            "header": "",
            "params": [
                "void *pbuf"
            ],
            "definition": "static int binn_buf_count(void *pbuf)\n{\n  int nitems;\n  if (!IsValidBinnHeader(pbuf, 0, &nitems, 0, 0))\n  {\n    return 0;\n  }\n  return nitems;\n}\n\n",
            "calle": [
                "IsValidBinnHeader"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pbuf",
                        "type": "void *",
                        "definition": [
                            "void *pbuf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nitems",
                        "type": "int",
                        "definition": [
                            "int nitems"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_buf_size",
            "header": "",
            "params": [
                "void *pbuf"
            ],
            "definition": "static int binn_buf_size(void *pbuf)\n{\n  int size = 0;\n  if (!IsValidBinnHeader(pbuf, 0, 0, &size, 0))\n  {\n    return 0;\n  }\n  return size;\n}\n\n",
            "calle": [
                "IsValidBinnHeader"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pbuf",
                        "type": "void *",
                        "definition": [
                            "void *pbuf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "GetValue",
            "header": "",
            "params": [
                "unsigned char *p",
                "binn *value"
            ],
            "definition": "static BOOL GetValue(unsigned char *p, binn *value)\n{\n  unsigned int p_idx = 0;\n  unsigned char byte;\n  int data_type;\n  int storage_type;\n  int DataSize;\n  void *p2;\n  unsigned int p2_idx = 0;\n  if (value == 0)\n  {\n    return 0;\n  }\n  memset(value, 0, sizeof(binn));\n  value->header = 0x1F22B11F;\n  p2_idx = &p[p_idx];\n  byte = p[p_idx];\n  p_idx += 1;\n  storage_type = byte & 0xE0;\n  if (byte & 0x10)\n  {\n    data_type = byte << 8;\n    byte = p[p_idx];\n    p_idx += 1;\n    data_type |= byte;\n  }\n  else\n  {\n    data_type = byte;\n  }\n  value->type = data_type;\n  switch (storage_type)\n  {\n    case 0x00:\n    {\n      break;\n    }\n\n    case 0x20:\n    {\n      value->vuint8 = *((unsigned char *) p);\n      value->ptr = &p[p_idx];\n      break;\n    }\n\n    case 0x40:\n    {\n      copy_be16((u16 *) (&value->vint16), (u16 *) p);\n      value->ptr = &value->vint16;\n      break;\n    }\n\n    case 0x60:\n    {\n      copy_be32((u32 *) (&value->vint32), (u32 *) p);\n      value->ptr = &value->vint32;\n      break;\n    }\n\n    case 0x80:\n    {\n      copy_be64((u64 *) (&value->vint64), (u64 *) p);\n      value->ptr = &value->vint64;\n      break;\n    }\n\n    case 0xC0:\n\n    case 0xA0:\n    {\n      helper_GetValue_1(&p_idx, &DataSize, p, value);\n    }\n\n    case 0xE0:\n    {\n      value->ptr = &p2[p2_idx];\n      if (IsValidBinnHeader(p2, 0, &value->count, &value->size, 0) == 0)\n      {\n        return 0;\n      }\n      break;\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n  switch (value->type)\n  {\n    case 0x01:\n    {\n      value->type = 0x80061;\n      value->vbool = 1;\n      value->ptr = &value->vbool;\n      break;\n    }\n\n    case 0x02:\n    {\n      value->type = 0x80061;\n      value->vbool = 0;\n      value->ptr = &value->vbool;\n      break;\n    }\n\n  }\n\n  return 1;\n}\n\n",
            "calle": [
                "IsValidBinnHeader",
                "copy_be16",
                "copy_be32",
                "copy_be64",
                "helper_GetValue_1",
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn *",
                        "definition": [
                            "binn *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "byte",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char byte"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_type",
                        "type": "int",
                        "definition": [
                            "int data_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "storage_type",
                        "type": "int",
                        "definition": [
                            "int storage_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "DataSize",
                        "type": "int",
                        "definition": [
                            "int DataSize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p2",
                        "type": "void *",
                        "definition": [
                            "void *p2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p2_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p2_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "store_value",
            "header": "",
            "params": [
                "binn *value"
            ],
            "definition": "static void *store_value(binn *value)\n{\n  memcpy(&local_value, value, sizeof(binn));\n  switch (binn_get_read_storage(value->type))\n  {\n    case 0x00:\n\n    case 0x40:\n\n    case 0x60:\n\n    case 0x80:\n    {\n      return &local_value.vint32;\n    }\n\n  }\n\n  return value->ptr;\n}\n\n",
            "calle": [
                "binn_get_read_storage",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn *",
                        "definition": [
                            "binn *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "local_value",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_read_pair",
            "header": "",
            "params": [
                "int expected_type",
                "void *ptr",
                "int pos",
                "int *pid",
                "char *pkey",
                "binn *value"
            ],
            "definition": "static BOOL binn_read_pair(int expected_type, void *ptr, int pos, int *pid, char *pkey, binn *value)\n{\n  unsigned int ptr_idx = 0;\n  int type;\n  int count;\n  int size = 0;\n  int header_size;\n  int i;\n  int int32;\n  int id = 0;\n  int counter = 0;\n  unsigned char *p;\n  unsigned int p_idx = 0;\n  unsigned char *plimit;\n  unsigned int plimit_idx = 0;\n  unsigned char *base;\n  unsigned int base_idx = 0;\n  unsigned char *key = 0;\n  unsigned int key_idx = 0;\n  unsigned char len = 0;\n  ptr_idx = binn_ptr(ptr_idx);\n  if (IsValidBinnHeader(ptr, &type, &count, &size, &header_size) == 0)\n  {\n    return 0;\n  }\n  if ((((type != expected_type) || (count == 0)) || (pos < 1)) || (pos > count))\n  {\n    return 0;\n  }\n  p_idx = (unsigned char *) ptr;\n  base_idx = &p[p_idx];\n  plimit_idx = ((&p[p_idx]) + size) - 1;\n  p_idx += header_size;\n  for (i = 0; i < count; i += 1)\n  {\n    helper_binn_read_pair_1(&int32, &id, &counter, &p_idx, &key_idx, &len, pos, type, p, plimit, plimit_idx, base, base_idx);\n  }\n\n  return 0;\n  found:\n  switch (type)\n  {\n    case 0xE1:\n    {\n      if (pid)\n      {\n        *pid = id;\n      }\n      break;\n    }\n\n    case 0xE2:\n    {\n      if (pkey)\n      {\n        memcpy(pkey, key, len);\n        pkey[len] = 0;\n      }\n      break;\n    }\n\n  }\n\n\n  return GetValue(p, value);\n}\n\n",
            "calle": [
                "GetValue",
                "IsValidBinnHeader",
                "binn_ptr",
                "helper_binn_read_pair_1",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "expected_type",
                        "type": "int",
                        "definition": [
                            "int expected_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pid",
                        "type": "int *",
                        "definition": [
                            "int *pid"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pkey",
                        "type": "char *",
                        "definition": [
                            "char *pkey"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn *",
                        "definition": [
                            "binn *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ptr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "header_size",
                        "type": "int",
                        "definition": [
                            "int header_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "int32",
                        "type": "int",
                        "definition": [
                            "int int32"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "counter",
                        "type": "int",
                        "definition": [
                            "int counter = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plimit",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *plimit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plimit_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int plimit_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *base"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int base_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *key = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int key_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char len = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_read_next_pair",
            "header": "",
            "params": [
                "int expected_type",
                "binn_iter *iter",
                "int *pid",
                "char *pkey",
                "binn *value"
            ],
            "definition": "static BOOL binn_read_next_pair(int expected_type, binn_iter *iter, int *pid, char *pkey, binn *value)\n{\n  int int32;\n  int id;\n  unsigned char *p;\n  unsigned int p_idx = 0;\n  unsigned char *key;\n  unsigned int key_idx = 0;\n  unsigned short len;\n  if (((((iter == 0) || (iter->pnext == 0)) || (iter->pnext > iter->plimit)) || (iter->current > iter->count)) || (iter->type != expected_type))\n  {\n    return 0;\n  }\n  iter->current += 1;\n  if (iter->current > iter->count)\n  {\n    return 0;\n  }\n  p_idx = iter->pnext;\n  switch (expected_type)\n  {\n    case 0xE1:\n    {\n      helper_binn_read_next_pair_1(&int32, &id, iter, pid, p, p_idx);\n    }\n\n    case 0xE2:\n    {\n      helper_binn_read_next_pair_2(&p_idx, &key_idx, &len, iter, pkey, p, key);\n    }\n\n  }\n\n  iter->pnext = AdvanceDataPos(p, iter->plimit);\n  if ((iter->pnext != 0) && (iter->pnext < (&p[p_idx])))\n  {\n    return 0;\n  }\n  return GetValue(p, value);\n}\n\n",
            "calle": [
                "AdvanceDataPos",
                "GetValue",
                "helper_binn_read_next_pair_1",
                "helper_binn_read_next_pair_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "expected_type",
                        "type": "int",
                        "definition": [
                            "int expected_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "iter",
                        "type": "binn_iter *",
                        "definition": [
                            "binn_iter *iter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pid",
                        "type": "int *",
                        "definition": [
                            "int *pid"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pkey",
                        "type": "char *",
                        "definition": [
                            "char *pkey"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn *",
                        "definition": [
                            "binn *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "int32",
                        "type": "int",
                        "definition": [
                            "int int32"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int key_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short len"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "GetWriteConvertedData",
            "header": "",
            "params": [
                "int *ptype",
                "void **ppvalue",
                "int *psize"
            ],
            "definition": "static BOOL GetWriteConvertedData(int *ptype, void **ppvalue, int *psize)\n{\n  int type;\n  float f1;\n  double d1;\n  char pstr[128];\n  (void) pstr;\n  (void) d1;\n  (void) f1;\n  type = *ptype;\n  if ((*ppvalue) == 0)\n  {\n    switch (type)\n    {\n      case 0x00:\n\n      case 0x01:\n\n      case 0x02:\n      {\n        break;\n      }\n\n      case 0xA0:\n\n      case 0xC0:\n      {\n        if ((*psize) == 0)\n        {\n          break;\n        }\n      }\n\n      default:\n      {\n        return 0;\n      }\n\n    }\n\n  }\n  switch (type)\n  {\n    case 0xA4:\n\n    case 0xA5:\n    {\n      return 1;\n      break;\n    }\n\n    case 0xA2:\n\n    case 0xA1:\n\n    case 0xA3:\n    {\n      return 1;\n      break;\n    }\n\n    case 0x80061:\n    {\n      if ((*(*((BOOL **) ppvalue))) == 0)\n      {\n        type = 0x02;\n      }\n      else\n      {\n        type = 0x01;\n      }\n      *ptype = type;\n      break;\n    }\n\n  }\n\n  return 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptype",
                        "type": "int *",
                        "definition": [
                            "int *ptype"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ppvalue",
                        "type": "void **",
                        "definition": [
                            "void **ppvalue"
                        ]
                    },
                    {
                        "path": null,
                        "name": "psize",
                        "type": "int *",
                        "definition": [
                            "int *psize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f1",
                        "type": "float",
                        "definition": [
                            "float f1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d1",
                        "type": "double",
                        "definition": [
                            "double d1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pstr",
                        "type": "char [128]",
                        "definition": [
                            "char pstr[128]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "int_type",
            "header": "",
            "params": [
                "int type"
            ],
            "definition": "static int int_type(int type)\n{\n  switch (type)\n  {\n    case 0x21:\n\n    case 0x41:\n\n    case 0x61:\n\n    case 0x81:\n    {\n      return 11;\n    }\n\n    case 0x20:\n\n    case 0x40:\n\n    case 0x60:\n\n    case 0x80:\n    {\n      return 22;\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "copy_raw_value",
            "header": "",
            "params": [
                "void *psource",
                "void *pdest",
                "int data_store"
            ],
            "definition": "static BOOL copy_raw_value(void *psource, void *pdest, int data_store)\n{\n  switch (data_store)\n  {\n    case 0x00:\n    {\n      break;\n    }\n\n    case 0x20:\n    {\n      *((char *) pdest) = *((char *) psource);\n      break;\n    }\n\n    case 0x40:\n    {\n      *((short *) pdest) = *((short *) psource);\n      break;\n    }\n\n    case 0x60:\n    {\n      *((int *) pdest) = *((int *) psource);\n      break;\n    }\n\n    case 0x80:\n    {\n      *((uint64 *) pdest) = *((uint64 *) psource);\n      break;\n    }\n\n    case 0xC0:\n\n    case 0xA0:\n\n    case 0xE0:\n    {\n      *((char **) pdest) = (char *) psource;\n      break;\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n  return 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "psource",
                        "type": "void *",
                        "definition": [
                            "void *psource"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pdest",
                        "type": "void *",
                        "definition": [
                            "void *pdest"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_store",
                        "type": "int",
                        "definition": [
                            "int data_store"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "copy_int_value",
            "header": "",
            "params": [
                "void *psource",
                "void *pdest",
                "int source_type",
                "int dest_type"
            ],
            "definition": "static BOOL copy_int_value(void *psource, void *pdest, int source_type, int dest_type)\n{\n  uint64 vuint64 = 0;\n  int64 vint64 = 0;\n  switch (source_type)\n  {\n    case 0x21:\n    {\n      vint64 = *((signed char *) psource);\n      break;\n    }\n\n    case 0x41:\n    {\n      vint64 = *((short *) psource);\n      break;\n    }\n\n    case 0x61:\n    {\n      vint64 = *((int *) psource);\n      break;\n    }\n\n    case 0x81:\n    {\n      vint64 = *((int64 *) psource);\n      break;\n    }\n\n    case 0x20:\n    {\n      vuint64 = *((unsigned char *) psource);\n      break;\n    }\n\n    case 0x40:\n    {\n      vuint64 = *((unsigned short *) psource);\n      break;\n    }\n\n    case 0x60:\n    {\n      vuint64 = *((unsigned int *) psource);\n      break;\n    }\n\n    case 0x80:\n    {\n      vuint64 = *((uint64 *) psource);\n      break;\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n  if ((int_type(source_type) == 22) && (int_type(dest_type) == 11))\n  {\n    if (vuint64 > INT64_MAX)\n    {\n      return 0;\n    }\n    vint64 = vuint64;\n  }\n  else\n    if ((int_type(source_type) == 11) && (int_type(dest_type) == 22))\n  {\n    if (vint64 < 0)\n    {\n      return 0;\n    }\n    vuint64 = vint64;\n  }\n  switch (dest_type)\n  {\n    case 0x21:\n    {\n      if ((vint64 < INT8_MIN) || (vint64 > INT8_MAX))\n      {\n        return 0;\n      }\n      *((signed char *) pdest) = (signed char) vint64;\n      break;\n    }\n\n    case 0x41:\n    {\n      if ((vint64 < INT16_MIN) || (vint64 > INT16_MAX))\n      {\n        return 0;\n      }\n      *((short *) pdest) = (short) vint64;\n      break;\n    }\n\n    case 0x61:\n    {\n      if ((vint64 < INT32_MIN) || (vint64 > INT32_MAX))\n      {\n        return 0;\n      }\n      *((int *) pdest) = (int) vint64;\n      break;\n    }\n\n    case 0x81:\n    {\n      *((int64 *) pdest) = vint64;\n      break;\n    }\n\n    case 0x20:\n    {\n      if (vuint64 > UINT8_MAX)\n      {\n        return 0;\n      }\n      *((unsigned char *) pdest) = (unsigned char) vuint64;\n      break;\n    }\n\n    case 0x40:\n    {\n      if (vuint64 > UINT16_MAX)\n      {\n        return 0;\n      }\n      *((unsigned short *) pdest) = (unsigned short) vuint64;\n      break;\n    }\n\n    case 0x60:\n    {\n      if (vuint64 > UINT32_MAX)\n      {\n        return 0;\n      }\n      *((unsigned int *) pdest) = (unsigned int) vuint64;\n      break;\n    }\n\n    case 0x80:\n    {\n      *((uint64 *) pdest) = vuint64;\n      break;\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n  return 1;\n}\n\n",
            "calle": [
                "int_type"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "psource",
                        "type": "void *",
                        "definition": [
                            "void *psource"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pdest",
                        "type": "void *",
                        "definition": [
                            "void *pdest"
                        ]
                    },
                    {
                        "path": null,
                        "name": "source_type",
                        "type": "int",
                        "definition": [
                            "int source_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_type",
                        "type": "int",
                        "definition": [
                            "int dest_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vuint64",
                        "type": "uint64",
                        "definition": [
                            "uint64 vuint64 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vint64",
                        "type": "int64",
                        "definition": [
                            "int64 vint64 = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "copy_float_value",
            "header": "",
            "params": [
                "void *psource",
                "void *pdest",
                "int source_type",
                "int dest_type"
            ],
            "definition": "static BOOL copy_float_value(void *psource, void *pdest, int source_type, int dest_type)\n{\n  switch (source_type)\n  {\n    case 0x62:\n    {\n      *((double *) pdest) = *((float *) psource);\n      break;\n    }\n\n    case 0x82:\n    {\n      *((float *) pdest) = (float) (*((double *) psource));\n      break;\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n  return 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "psource",
                        "type": "void *",
                        "definition": [
                            "void *psource"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pdest",
                        "type": "void *",
                        "definition": [
                            "void *pdest"
                        ]
                    },
                    {
                        "path": null,
                        "name": "source_type",
                        "type": "int",
                        "definition": [
                            "int source_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_type",
                        "type": "int",
                        "definition": [
                            "int dest_type"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zero_value",
            "header": "",
            "params": [
                "void *pvalue",
                "int type"
            ],
            "definition": "static void zero_value(void *pvalue, int type)\n{\n  switch (binn_get_read_storage(type))\n  {\n    case 0x00:\n    {\n      break;\n    }\n\n    case 0x20:\n    {\n      *((char *) pvalue) = 0;\n      break;\n    }\n\n    case 0x40:\n    {\n      *((short *) pvalue) = 0;\n      break;\n    }\n\n    case 0x60:\n    {\n      *((int *) pvalue) = 0;\n      break;\n    }\n\n    case 0x80:\n    {\n      *((uint64 *) pvalue) = 0;\n      break;\n    }\n\n    case 0xC0:\n\n    case 0xA0:\n\n    case 0xE0:\n    {\n      *((char **) pvalue) = 0;\n      break;\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "binn_get_read_storage"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "void *",
                        "definition": [
                            "void *pvalue"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "copy_value",
            "header": "",
            "params": [
                "void *psource",
                "void *pdest",
                "int source_type",
                "int dest_type",
                "int data_store"
            ],
            "definition": "static BOOL copy_value(void *psource, void *pdest, int source_type, int dest_type, int data_store)\n{\n  if (type_family(source_type) != type_family(dest_type))\n  {\n    return 0;\n  }\n  if ((type_family(source_type) == 0xf2) && (source_type != dest_type))\n  {\n    return copy_int_value(psource, pdest, source_type, dest_type);\n  }\n  else\n    if ((type_family(source_type) == 0xf3) && (source_type != dest_type))\n  {\n    return copy_float_value(psource, pdest, source_type, dest_type);\n  }\n  else\n  {\n    return copy_raw_value(psource, pdest, data_store);\n  }\n}\n\n",
            "calle": [
                "copy_float_value",
                "copy_int_value",
                "copy_raw_value",
                "type_family"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "psource",
                        "type": "void *",
                        "definition": [
                            "void *psource"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pdest",
                        "type": "void *",
                        "definition": [
                            "void *pdest"
                        ]
                    },
                    {
                        "path": null,
                        "name": "source_type",
                        "type": "int",
                        "definition": [
                            "int source_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_type",
                        "type": "int",
                        "definition": [
                            "int dest_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_store",
                        "type": "int",
                        "definition": [
                            "int data_store"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_add_value",
            "header": "",
            "params": [
                "binn *item",
                "int binn_type",
                "int id",
                "char *name",
                "int type",
                "void *pvalue",
                "int size"
            ],
            "definition": "BOOL binn_add_value(binn *item, int binn_type, int id, char *name, int type, void *pvalue, int size)\n{\n  switch (binn_type)\n  {\n    case 0xE0:\n    {\n      return binn_list_add(item, type, pvalue, size);\n    }\n\n    case 0xE1:\n    {\n      return binn_map_set(item, id, type, pvalue, size);\n    }\n\n    case 0xE2:\n    {\n      return binn_object_set(item, name, type, pvalue, size);\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "binn_list_add",
                "binn_map_set",
                "binn_object_set",
                "binn_type"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "item",
                        "type": "binn *",
                        "definition": [
                            "binn *item"
                        ]
                    },
                    {
                        "path": null,
                        "name": "binn_type",
                        "type": "int",
                        "definition": [
                            "int binn_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "char *",
                        "definition": [
                            "char *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "void *",
                        "definition": [
                            "void *pvalue"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "binn_alloc_item",
            "header": "",
            "params": [],
            "definition": "static binn *binn_alloc_item()\n{\n  binn *item;\n  unsigned int item_idx = 0;\n  item_idx = (binn *) binn_malloc(sizeof(binn));\n  if (item)\n  {\n    memset(item, 0, sizeof(binn));\n    item->header = 0x1F22B11F;\n    item->allocated = 1;\n  }\n  return item;\n}\n\n",
            "calle": [
                "binn_malloc",
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "item",
                        "type": "binn *",
                        "definition": [
                            "binn *item"
                        ]
                    },
                    {
                        "path": null,
                        "name": "item_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int item_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "atoi64",
            "header": "",
            "params": [
                "char *str"
            ],
            "definition": "int64 atoi64(char *str)\n{\n  unsigned int str_idx = 0;\n  int64 retval;\n  int is_negative = 0;\n  if (str[str_idx] == '-')\n  {\n    is_negative = 1;\n    str_idx += 1;\n  }\n  retval = 0;\n  for (; str[str_idx]; str_idx += 1)\n  {\n    retval = (10 * retval) + (str[str_idx] - '0');\n  }\n\n  if (is_negative)\n  {\n    retval *= -1;\n  }\n  return retval;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str",
                        "type": "char *",
                        "definition": [
                            "char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval",
                        "type": "int64",
                        "definition": [
                            "int64 retval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_negative",
                        "type": "int",
                        "definition": [
                            "int is_negative = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "is_integer",
            "header": "",
            "params": [
                "char *p"
            ],
            "definition": "static BOOL is_integer(char *p)\n{\n  unsigned int p_idx = 0;\n  BOOL retval;\n  if ((&p[p_idx]) == 0)\n  {\n    return 0;\n  }\n  if (p[p_idx] == '-')\n  {\n    p_idx += 1;\n  }\n  if (p[p_idx] == 0)\n  {\n    return 0;\n  }\n  retval = 1;\n  for (; p[p_idx]; p_idx += 1)\n  {\n    if ((p[p_idx] < '0') || (p[p_idx] > '9'))\n    {\n      retval = 0;\n    }\n  }\n\n  return retval;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p",
                        "type": "char *",
                        "definition": [
                            "char *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval",
                        "type": "BOOL",
                        "definition": [
                            "BOOL retval"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "is_float",
            "header": "",
            "params": [
                "char *p"
            ],
            "definition": "static BOOL is_float(char *p)\n{\n  unsigned int p_idx = 0;\n  BOOL retval;\n  BOOL number_found = 0;\n  if ((&p[p_idx]) == 0)\n  {\n    return 0;\n  }\n  if (p[p_idx] == '-')\n  {\n    p_idx += 1;\n  }\n  if (p[p_idx] == 0)\n  {\n    return 0;\n  }\n  retval = 1;\n  for (; p[p_idx]; p_idx += 1)\n  {\n    if ((p[p_idx] == '.') || (p[p_idx] == ','))\n    {\n      if (!number_found)\n      {\n        retval = 0;\n      }\n    }\n    else\n      if ((p[p_idx] >= '0') && (p[p_idx] <= '9'))\n    {\n      number_found = 1;\n    }\n    else\n    {\n      return 0;\n    }\n  }\n\n  return retval;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p",
                        "type": "char *",
                        "definition": [
                            "char *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval",
                        "type": "BOOL",
                        "definition": [
                            "BOOL retval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "number_found",
                        "type": "BOOL",
                        "definition": [
                            "BOOL number_found = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "is_bool_str",
            "header": "",
            "params": [
                "char *str",
                "BOOL *pbool"
            ],
            "definition": "static BOOL is_bool_str(char *str, BOOL *pbool)\n{\n  int64 vint;\n  double vdouble;\n  if ((str == 0) || (pbool == 0))\n  {\n    return 0;\n  }\n  if (strcasecmp(str, \"true\") == 0)\n  {\n    goto loc_true;\n  }\n  if (strcasecmp(str, \"yes\") == 0)\n  {\n    goto loc_true;\n  }\n  if (strcasecmp(str, \"on\") == 0)\n  {\n    goto loc_true;\n  }\n  if (strcasecmp(str, \"false\") == 0)\n  {\n    goto loc_false;\n  }\n  if (strcasecmp(str, \"no\") == 0)\n  {\n    goto loc_false;\n  }\n  if (strcasecmp(str, \"off\") == 0)\n  {\n    goto loc_false;\n  }\n  if (is_integer(str))\n  {\n    vint = atoi64(str);\n    *pbool = (vint != 0) ? (1) : (0);\n    return 1;\n  }\n  else\n    if (is_float(str))\n  {\n    vdouble = atof(str);\n    *pbool = (vdouble != 0) ? (1) : (0);\n    return 1;\n  }\n  return 0;\n  loc_true:\n  *pbool = 1;\n\n  return 1;\n  loc_false:\n  *pbool = 0;\n\n  return 1;\n}\n\n",
            "calle": [
                "atof",
                "atoi64",
                "is_float",
                "is_integer",
                "strcasecmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str",
                        "type": "char *",
                        "definition": [
                            "char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pbool",
                        "type": "BOOL *",
                        "definition": [
                            "BOOL *pbool"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vint",
                        "type": "int64",
                        "definition": [
                            "int64 vint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vdouble",
                        "type": "double",
                        "definition": [
                            "double vdouble"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_binn_create_1",
            "header": "",
            "params": [
                "int * const size_ref",
                "unsigned int * const pointer_idx_ref",
                "binn * const item",
                "void * const pointer"
            ],
            "definition": "BOOL helper_binn_create_1(int * const size_ref, unsigned int * const pointer_idx_ref, binn * const item, void * const pointer)\n{\n  int size = *size_ref;\n  unsigned int pointer_idx = *pointer_idx_ref;\n  item->pre_allocated = 0;\n  if (size == 0)\n  {\n    size = 256;\n  }\n  pointer_idx = binn_malloc(size);\n  if ((&pointer[pointer_idx]) == 0)\n  {\n    return 0;\n  }\n  item->pbuf = &pointer[pointer_idx];\n  item->alloc_size = size;\n  *size_ref = size;\n  *pointer_idx_ref = pointer_idx;\n}\n\n",
            "calle": [
                "binn_malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pointer_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const pointer_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "item",
                        "type": "binn * const",
                        "definition": [
                            "binn * const item"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pointer",
                        "type": "void * const",
                        "definition": [
                            "void * const pointer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = *size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pointer_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pointer_idx = *pointer_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_AdvanceDataPos_1",
            "header": "",
            "params": [
                "unsigned int * const p_idx_ref",
                "int * const DataSize_ref",
                "unsigned char * const p",
                "unsigned char * const plimit"
            ],
            "definition": "unsigned char *helper_AdvanceDataPos_1(unsigned int * const p_idx_ref, int * const DataSize_ref, unsigned char * const p, unsigned char * const plimit)\n{\n  unsigned int p_idx = *p_idx_ref;\n  int DataSize = *DataSize_ref;\n  if ((&p[p_idx]) > plimit)\n  {\n    return 0;\n  }\n  DataSize = *((unsigned char *) p);\n  if (DataSize & 0x80)\n  {\n    if ((((&p[p_idx]) + (sizeof(int))) - 1) > plimit)\n    {\n      return 0;\n    }\n    copy_be32((u32 *) (&DataSize), (u32 *) p);\n    DataSize &= 0x7FFFFFFF;\n  }\n  DataSize -= 1;\n  p_idx += DataSize;\n  break;\n  *p_idx_ref = p_idx;\n  *DataSize_ref = DataSize;\n}\n\n",
            "calle": [
                "copy_be32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const p_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "DataSize_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const DataSize_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plimit",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const plimit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = *p_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "DataSize",
                        "type": "int",
                        "definition": [
                            "int DataSize = *DataSize_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_AdvanceDataPos_2",
            "header": "",
            "params": [
                "unsigned int * const p_idx_ref",
                "int * const DataSize_ref",
                "unsigned char * const p",
                "unsigned char * const plimit",
                "int storage_type"
            ],
            "definition": "unsigned char *helper_AdvanceDataPos_2(unsigned int * const p_idx_ref, int * const DataSize_ref, unsigned char * const p, unsigned char * const plimit, int storage_type)\n{\n  unsigned int p_idx = *p_idx_ref;\n  int DataSize = *DataSize_ref;\n  if ((&p[p_idx]) > plimit)\n  {\n    return 0;\n  }\n  DataSize = *((unsigned char *) p);\n  if (DataSize & 0x80)\n  {\n    if ((((&p[p_idx]) + (sizeof(int))) - 1) > plimit)\n    {\n      return 0;\n    }\n    copy_be32((u32 *) (&DataSize), (u32 *) p);\n    DataSize &= 0x7FFFFFFF;\n    p_idx += 4;\n  }\n  else\n  {\n    p_idx += 1;\n  }\n  p_idx += DataSize;\n  if (storage_type == 0xA0)\n  {\n    p_idx += 1;\n  }\n  break;\n  *p_idx_ref = p_idx;\n  *DataSize_ref = DataSize;\n}\n\n",
            "calle": [
                "copy_be32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const p_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "DataSize_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const DataSize_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plimit",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const plimit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "storage_type",
                        "type": "int",
                        "definition": [
                            "int storage_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = *p_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "DataSize",
                        "type": "int",
                        "definition": [
                            "int DataSize = *DataSize_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_read_map_id_1",
            "header": "",
            "params": [
                "unsigned int * const p_idx_ref",
                "int * const id_ref",
                "unsigned char * const p",
                "unsigned char c"
            ],
            "definition": "void helper_read_map_id_1(unsigned int * const p_idx_ref, int * const id_ref, unsigned char * const p, unsigned char c)\n{\n  unsigned int p_idx = *p_idx_ref;\n  int id = *id_ref;\n  id = c & 0x0F;\n  id = (id << 8) | p[p_idx];\n  p_idx += 1;\n  id = (id << 8) | p[p_idx];\n  p_idx += 1;\n  id = (id << 8) | (*((&p[p_idx])++));\n  *p_idx_ref = p_idx;\n  *id_ref = id;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const p_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const id_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = *p_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id = *id_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_SearchForKey_1",
            "header": "",
            "params": [
                "unsigned int * const p_idx_ref",
                "unsigned char * const len_ref",
                "unsigned char * const p",
                "const char * const key",
                "unsigned char * const plimit",
                "unsigned int plimit_idx",
                "unsigned char * const base",
                "unsigned int base_idx",
                "int keylen"
            ],
            "definition": "unsigned char *helper_SearchForKey_1(unsigned int * const p_idx_ref, unsigned char * const len_ref, unsigned char * const p, const char * const key, unsigned char * const plimit, unsigned int plimit_idx, unsigned char * const base, unsigned int base_idx, int keylen)\n{\n  unsigned int p_idx = *p_idx_ref;\n  unsigned char len = *len_ref;\n  len = *((unsigned char *) p);\n  p_idx += 1;\n  if ((&p[p_idx]) > (&plimit[plimit_idx]))\n  {\n    break;\n  }\n  if (len > 0)\n  {\n    if (strncasecmp((char *) p, key, len) == 0)\n    {\n      if (keylen == len)\n      {\n        p_idx += len;\n        return p;\n      }\n    }\n    p_idx += len;\n    if ((&p[p_idx]) > (&plimit[plimit_idx]))\n    {\n      break;\n    }\n  }\n  else\n    if (len == keylen)\n  {\n    return p;\n  }\n  p_idx = AdvanceDataPos(p_idx, plimit);\n  if (((&p[p_idx]) == 0) || ((&p[p_idx]) < (&base[base_idx])))\n  {\n    break;\n  }\n  *p_idx_ref = p_idx;\n  *len_ref = len;\n}\n\n",
            "calle": [
                "AdvanceDataPos",
                "strncasecmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const p_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "const char * const",
                        "definition": [
                            "const char * const key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plimit",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const plimit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plimit_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int plimit_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const base"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int base_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "keylen",
                        "type": "int",
                        "definition": [
                            "int keylen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = *p_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char len = *len_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_binn_map_set_raw_1",
            "header": "",
            "params": [
                "unsigned int * const p_idx_ref",
                "int id",
                "unsigned char * const p",
                "unsigned char sign"
            ],
            "definition": "void helper_binn_map_set_raw_1(unsigned int * const p_idx_ref, int id, unsigned char * const p, unsigned char sign)\n{\n  unsigned int p_idx = *p_idx_ref;\n  p[p_idx] = (0xC0 | (sign << 4)) | ((id & 0xF000000) >> 24);\n  p_idx += 1;\n  p[p_idx] = (id & 0xFF0000) >> 16;\n  p_idx += 1;\n  *((&p[p_idx])++) = (id & 0xFF00) >> 8;\n  *((&p[p_idx])++) = id & 0xFF;\n  *p_idx_ref = p_idx;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const p_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sign",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char sign"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = *p_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_binn_map_set_raw_2",
            "header": "",
            "params": [
                "int * const id_ref",
                "unsigned int * const p_idx_ref",
                "unsigned char * const p",
                "unsigned char sign"
            ],
            "definition": "void helper_binn_map_set_raw_2(int * const id_ref, unsigned int * const p_idx_ref, unsigned char * const p, unsigned char sign)\n{\n  int id = *id_ref;\n  unsigned int p_idx = *p_idx_ref;\n  p[p_idx] = 0xE0;\n  p_idx += 1;\n  if (sign)\n  {\n    id = -id;\n  }\n  copy_be32((u32 *) p, (u32 *) (&id));\n  p_idx += 4;\n  *id_ref = id;\n  *p_idx_ref = p_idx;\n}\n\n",
            "calle": [
                "copy_be32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "id_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const id_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const p_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sign",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char sign"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id = *id_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = *p_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_AddValue_1",
            "header": "",
            "params": [
                "int * const size_ref",
                "int * const ArgSize_ref",
                "void * const pvalue"
            ],
            "definition": "BOOL helper_AddValue_1(int * const size_ref, int * const ArgSize_ref, void * const pvalue)\n{\n  int size = *size_ref;\n  int ArgSize = *ArgSize_ref;\n  if (size < 0)\n  {\n    return 0;\n  }\n  if (size == 0)\n  {\n    size = strlen2((char *) pvalue);\n  }\n  ArgSize = size + 5;\n  break;\n  *size_ref = size;\n  *ArgSize_ref = ArgSize;\n}\n\n",
            "calle": [
                "strlen2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ArgSize_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ArgSize_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "void * const",
                        "definition": [
                            "void * const pvalue"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = *size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ArgSize",
                        "type": "int",
                        "definition": [
                            "int ArgSize = *ArgSize_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_AddValue_2",
            "header": "",
            "params": [
                "unsigned int * const p_idx_ref",
                "binn * const item",
                "int type",
                "unsigned char * const p"
            ],
            "definition": "void helper_AddValue_2(unsigned int * const p_idx_ref, binn * const item, int type, unsigned char * const p)\n{\n  unsigned int p_idx = *p_idx_ref;\n  if (type > 255)\n  {\n    u16 type16 = type;\n    copy_be16((u16 *) p, (u16 *) (&type16));\n    p_idx += 2;\n    item->used_size += 2;\n  }\n  else\n  {\n    p[p_idx] = type;\n    p_idx += 1;\n    item->used_size += 1;\n  }\n  *p_idx_ref = p_idx;\n}\n\n",
            "calle": [
                "copy_be16"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const p_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "item",
                        "type": "binn * const",
                        "definition": [
                            "binn * const item"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = *p_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type16",
                        "type": "u16",
                        "definition": [
                            "u16 type16 = type"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_AddValue_3",
            "header": "",
            "params": [
                "int * const size_ref",
                "int * const int32_ref",
                "unsigned int * const p_idx_ref",
                "binn * const item",
                "void * const pvalue",
                "int storage_type",
                "unsigned char * const p"
            ],
            "definition": "void helper_AddValue_3(int * const size_ref, int * const int32_ref, unsigned int * const p_idx_ref, binn * const item, void * const pvalue, int storage_type, unsigned char * const p)\n{\n  int size = *size_ref;\n  int int32 = *int32_ref;\n  unsigned int p_idx = *p_idx_ref;\n  if (size > 127)\n  {\n    int32 = size | 0x80000000;\n    copy_be32((u32 *) p, (u32 *) (&int32));\n    p_idx += 4;\n    item->used_size += 4;\n  }\n  else\n  {\n    *((unsigned char *) p) = size;\n    p_idx += 1;\n    item->used_size += 1;\n  }\n  memcpy(p, pvalue, size);\n  if (storage_type == 0xA0)\n  {\n    p_idx += size;\n    *((char *) p) = (char) 0;\n    size += 1;\n  }\n  item->used_size += size;\n  break;\n  *size_ref = size;\n  *int32_ref = int32;\n  *p_idx_ref = p_idx;\n}\n\n",
            "calle": [
                "copy_be32",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "int32_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const int32_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const p_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "item",
                        "type": "binn * const",
                        "definition": [
                            "binn * const item"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pvalue",
                        "type": "void * const",
                        "definition": [
                            "void * const pvalue"
                        ]
                    },
                    {
                        "path": null,
                        "name": "storage_type",
                        "type": "int",
                        "definition": [
                            "int storage_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = *size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "int32",
                        "type": "int",
                        "definition": [
                            "int int32 = *int32_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = *p_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_binn_is_valid_ex_1",
            "header": "",
            "params": [
                "unsigned int * const p_idx_ref",
                "unsigned char * const len_ref",
                "int type",
                "unsigned char * const p",
                "unsigned char * const plimit",
                "unsigned char * const base",
                "unsigned int base_idx"
            ],
            "definition": "void helper_binn_is_valid_ex_1(unsigned int * const p_idx_ref, unsigned char * const len_ref, int type, unsigned char * const p, unsigned char * const plimit, unsigned char * const base, unsigned int base_idx)\n{\n  unsigned int p_idx = *p_idx_ref;\n  unsigned char len = *len_ref;\n  switch (type)\n  {\n    case 0xE2:\n    {\n      len = p[p_idx];\n      p_idx += 1;\n      p_idx += len;\n      break;\n    }\n\n    case 0xE1:\n    {\n      read_map_id(&(&p[p_idx]), plimit);\n      break;\n    }\n\n  }\n\n  p_idx = AdvanceDataPos(p_idx, plimit);\n  if (((&p[p_idx]) == 0) || ((&p[p_idx]) < (&base[base_idx])))\n  {\n    goto Invalid;\n  }\n  *p_idx_ref = p_idx;\n  *len_ref = len;\n}\n\n",
            "calle": [
                "AdvanceDataPos",
                "read_map_id"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const p_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plimit",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const plimit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const base"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int base_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = *p_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char len = *len_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_GetValue_1",
            "header": "",
            "params": [
                "unsigned int * const p_idx_ref",
                "int * const DataSize_ref",
                "unsigned char * const p",
                "binn * const value"
            ],
            "definition": "void helper_GetValue_1(unsigned int * const p_idx_ref, int * const DataSize_ref, unsigned char * const p, binn * const value)\n{\n  unsigned int p_idx = *p_idx_ref;\n  int DataSize = *DataSize_ref;\n  DataSize = *((unsigned char *) p);\n  if (DataSize & 0x80)\n  {\n    copy_be32((u32 *) (&DataSize), (u32 *) p);\n    DataSize &= 0x7FFFFFFF;\n    p_idx += 4;\n  }\n  else\n  {\n    p_idx += 1;\n  }\n  value->size = DataSize;\n  value->ptr = &p[p_idx];\n  break;\n  *p_idx_ref = p_idx;\n  *DataSize_ref = DataSize;\n}\n\n",
            "calle": [
                "copy_be32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const p_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "DataSize_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const DataSize_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "binn * const",
                        "definition": [
                            "binn * const value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = *p_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "DataSize",
                        "type": "int",
                        "definition": [
                            "int DataSize = *DataSize_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_binn_read_pair_1",
            "header": "",
            "params": [
                "int * const int32_ref",
                "int * const id_ref",
                "int * const counter_ref",
                "unsigned int * const p_idx_ref",
                "unsigned int * const key_idx_ref",
                "unsigned char * const len_ref",
                "int pos",
                "int type",
                "unsigned char * const p",
                "unsigned char * const plimit",
                "unsigned int plimit_idx",
                "unsigned char * const base",
                "unsigned int base_idx"
            ],
            "definition": "BOOL helper_binn_read_pair_1(int * const int32_ref, int * const id_ref, int * const counter_ref, unsigned int * const p_idx_ref, unsigned int * const key_idx_ref, unsigned char * const len_ref, int pos, int type, unsigned char * const p, unsigned char * const plimit, unsigned int plimit_idx, unsigned char * const base, unsigned int base_idx)\n{\n  int int32 = *int32_ref;\n  int id = *id_ref;\n  int counter = *counter_ref;\n  unsigned int p_idx = *p_idx_ref;\n  unsigned int key_idx = *key_idx_ref;\n  unsigned char len = *len_ref;\n  switch (type)\n  {\n    case 0xE1:\n    {\n      int32 = read_map_id(&(&p[p_idx]), plimit);\n      if ((&p[p_idx]) > (&plimit[plimit_idx]))\n      {\n        return 0;\n      }\n      id = int32;\n      break;\n    }\n\n    case 0xE2:\n    {\n      helper_helper_binn_read_pair_1_1(&p_idx, &key_idx, &len, p, plimit, plimit_idx);\n    }\n\n  }\n\n  counter += 1;\n  if (counter == pos)\n  {\n    goto found;\n  }\n  p_idx = AdvanceDataPos(p_idx, plimit);\n  if (((&p[p_idx]) == 0) || ((&p[p_idx]) < (&base[base_idx])))\n  {\n    return 0;\n  }\n  *int32_ref = int32;\n  *id_ref = id;\n  *counter_ref = counter;\n  *p_idx_ref = p_idx;\n  *key_idx_ref = key_idx;\n  *len_ref = len;\n}\n\n",
            "calle": [
                "AdvanceDataPos",
                "helper_helper_binn_read_pair_1_1",
                "read_map_id"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "int32_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const int32_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const id_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "counter_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const counter_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const p_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const key_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int",
                        "definition": [
                            "int pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plimit",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const plimit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plimit_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int plimit_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const base"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int base_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "int32",
                        "type": "int",
                        "definition": [
                            "int int32 = *int32_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id = *id_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "counter",
                        "type": "int",
                        "definition": [
                            "int counter = *counter_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = *p_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int key_idx = *key_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char len = *len_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_binn_read_next_pair_1",
            "header": "",
            "params": [
                "int * const int32_ref",
                "int * const id_ref",
                "binn_iter * const iter",
                "int * const pid",
                "unsigned char * const p",
                "unsigned int p_idx"
            ],
            "definition": "BOOL helper_binn_read_next_pair_1(int * const int32_ref, int * const id_ref, binn_iter * const iter, int * const pid, unsigned char * const p, unsigned int p_idx)\n{\n  int int32 = *int32_ref;\n  int id = *id_ref;\n  int32 = read_map_id(&(&p[p_idx]), iter->plimit);\n  if ((&p[p_idx]) > iter->plimit)\n  {\n    return 0;\n  }\n  id = int32;\n  if (pid)\n  {\n    *pid = id;\n  }\n  break;\n  *int32_ref = int32;\n  *id_ref = id;\n}\n\n",
            "calle": [
                "read_map_id"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "int32_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const int32_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const id_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "iter",
                        "type": "binn_iter * const",
                        "definition": [
                            "binn_iter * const iter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pid",
                        "type": "int * const",
                        "definition": [
                            "int * const pid"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "int32",
                        "type": "int",
                        "definition": [
                            "int int32 = *int32_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "int",
                        "definition": [
                            "int id = *id_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_binn_read_next_pair_2",
            "header": "",
            "params": [
                "unsigned int * const p_idx_ref",
                "unsigned int * const key_idx_ref",
                "unsigned short * const len_ref",
                "binn_iter * const iter",
                "char * const pkey",
                "unsigned char * const p",
                "unsigned char * const key"
            ],
            "definition": "BOOL helper_binn_read_next_pair_2(unsigned int * const p_idx_ref, unsigned int * const key_idx_ref, unsigned short * const len_ref, binn_iter * const iter, char * const pkey, unsigned char * const p, unsigned char * const key)\n{\n  unsigned int p_idx = *p_idx_ref;\n  unsigned int key_idx = *key_idx_ref;\n  unsigned short len = *len_ref;\n  len = *((unsigned char *) p);\n  p_idx += 1;\n  key_idx = &p[p_idx];\n  p_idx += len;\n  if ((&p[p_idx]) > iter->plimit)\n  {\n    return 0;\n  }\n  if (pkey)\n  {\n    memcpy(pkey, key, len);\n    pkey[len] = 0;\n  }\n  break;\n  *p_idx_ref = p_idx;\n  *key_idx_ref = key_idx;\n  *len_ref = len;\n}\n\n",
            "calle": [
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const p_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const key_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "unsigned short * const",
                        "definition": [
                            "unsigned short * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "iter",
                        "type": "binn_iter * const",
                        "definition": [
                            "binn_iter * const iter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pkey",
                        "type": "char * const",
                        "definition": [
                            "char * const pkey"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const key"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = *p_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int key_idx = *key_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short len = *len_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_binn_read_pair_1_1",
            "header": "",
            "params": [
                "unsigned int * const p_idx_ref",
                "unsigned int * const key_idx_ref",
                "unsigned char * const len_ref",
                "unsigned char * const p",
                "unsigned char * const plimit",
                "unsigned int plimit_idx"
            ],
            "definition": "BOOL helper_helper_binn_read_pair_1_1(unsigned int * const p_idx_ref, unsigned int * const key_idx_ref, unsigned char * const len_ref, unsigned char * const p, unsigned char * const plimit, unsigned int plimit_idx)\n{\n  unsigned int p_idx = *p_idx_ref;\n  unsigned int key_idx = *key_idx_ref;\n  unsigned char len = *len_ref;\n  len = *((unsigned char *) p);\n  p_idx += 1;\n  if ((&p[p_idx]) > (&plimit[plimit_idx]))\n  {\n    return 0;\n  }\n  key_idx = &p[p_idx];\n  p_idx += len;\n  if ((&p[p_idx]) > (&plimit[plimit_idx]))\n  {\n    return 0;\n  }\n  break;\n  *p_idx_ref = p_idx;\n  *key_idx_ref = key_idx;\n  *len_ref = len;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const p_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const key_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plimit",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const plimit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plimit_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int plimit_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = *p_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int key_idx = *key_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char len = *len_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        }
    ],
    "typedefs": [
        "typedef int BOOL",
        "typedef long long int int64",
        "typedef unsigned long long int uint64",
        "typedef unsigned short int u16",
        "typedef unsigned int u32",
        "typedef unsigned long long int u64"
    ]
}