{
    "special_type": [
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct aptx_context\n{\n  size_t decode_sync_packets;\n  size_t decode_dropped;\n  struct aptx_channel channels[NB_CHANNELS];\n  uint8_t hd;\n  uint8_t sync_idx;\n  uint8_t encode_remaining;\n  uint8_t decode_skip_leading;\n  uint8_t decode_sync_buffer_len;\n  unsigned char decode_sync_buffer[6];\n}",
            "name": "aptx_context",
            "names": [
                "struct aptx_context"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "decode_sync_packets",
                        "type": "size_t",
                        "definition": [
                            "size_t decode_sync_packets"
                        ]
                    },
                    {
                        "path": null,
                        "name": "decode_dropped",
                        "type": "size_t",
                        "definition": [
                            "size_t decode_dropped"
                        ]
                    },
                    {
                        "path": null,
                        "name": "channels",
                        "type": "struct aptx_channel [NB_CHANNELS]",
                        "definition": [
                            "struct aptx_channel channels[NB_CHANNELS]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hd",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t hd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sync_idx",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t sync_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "encode_remaining",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t encode_remaining"
                        ]
                    },
                    {
                        "path": null,
                        "name": "decode_skip_leading",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t decode_skip_leading"
                        ]
                    },
                    {
                        "path": null,
                        "name": "decode_sync_buffer_len",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t decode_sync_buffer_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "decode_sync_buffer",
                        "type": "unsigned char [6]",
                        "definition": [
                            "unsigned char decode_sync_buffer[6]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "enum channels\n{\n  LEFT,\n  RIGHT,\n  NB_CHANNELS\n}",
            "name": "channels",
            "names": []
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct aptx_filter_signal\n{\n  int32_t buffer[2 * 16];\n  uint8_t pos;\n}",
            "name": "aptx_filter_signal",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "int32_t [2 * 16]",
                        "definition": [
                            "int32_t buffer[2 * 16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t pos"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct aptx_QMF_analysis\n{\n  struct aptx_filter_signal outer_filter_signal[2];\n  struct aptx_filter_signal inner_filter_signal[2][2];\n}",
            "name": "aptx_QMF_analysis",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "outer_filter_signal",
                        "type": "struct aptx_filter_signal [2]",
                        "definition": [
                            "struct aptx_filter_signal outer_filter_signal[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inner_filter_signal",
                        "type": "struct aptx_filter_signal [2][2]",
                        "definition": [
                            "struct aptx_filter_signal inner_filter_signal[2][2]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct aptx_quantize\n{\n  int32_t quantized_sample;\n  int32_t quantized_sample_parity_change;\n  int32_t error;\n}",
            "name": "aptx_quantize",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "quantized_sample",
                        "type": "int32_t",
                        "definition": [
                            "int32_t quantized_sample"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quantized_sample_parity_change",
                        "type": "int32_t",
                        "definition": [
                            "int32_t quantized_sample_parity_change"
                        ]
                    },
                    {
                        "path": null,
                        "name": "error",
                        "type": "int32_t",
                        "definition": [
                            "int32_t error"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct aptx_invert_quantize\n{\n  int32_t quantization_factor;\n  int32_t factor_select;\n  int32_t reconstructed_difference;\n}",
            "name": "aptx_invert_quantize",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "quantization_factor",
                        "type": "int32_t",
                        "definition": [
                            "int32_t quantization_factor"
                        ]
                    },
                    {
                        "path": null,
                        "name": "factor_select",
                        "type": "int32_t",
                        "definition": [
                            "int32_t factor_select"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reconstructed_difference",
                        "type": "int32_t",
                        "definition": [
                            "int32_t reconstructed_difference"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct aptx_prediction\n{\n  int32_t prev_sign[2];\n  int32_t s_weight[2];\n  int32_t d_weight[24];\n  int32_t pos;\n  int32_t reconstructed_differences[48];\n  int32_t previous_reconstructed_sample;\n  int32_t predicted_difference;\n  int32_t predicted_sample;\n}",
            "name": "aptx_prediction",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "prev_sign",
                        "type": "int32_t [2]",
                        "definition": [
                            "int32_t prev_sign[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_weight",
                        "type": "int32_t [2]",
                        "definition": [
                            "int32_t s_weight[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_weight",
                        "type": "int32_t [24]",
                        "definition": [
                            "int32_t d_weight[24]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "int32_t",
                        "definition": [
                            "int32_t pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reconstructed_differences",
                        "type": "int32_t [48]",
                        "definition": [
                            "int32_t reconstructed_differences[48]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "previous_reconstructed_sample",
                        "type": "int32_t",
                        "definition": [
                            "int32_t previous_reconstructed_sample"
                        ]
                    },
                    {
                        "path": null,
                        "name": "predicted_difference",
                        "type": "int32_t",
                        "definition": [
                            "int32_t predicted_difference"
                        ]
                    },
                    {
                        "path": null,
                        "name": "predicted_sample",
                        "type": "int32_t",
                        "definition": [
                            "int32_t predicted_sample"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct aptx_channel\n{\n  int32_t codeword_history;\n  int32_t dither_parity;\n  int32_t dither[4];\n  struct aptx_QMF_analysis qmf;\n  struct aptx_quantize quantize[4];\n  struct aptx_invert_quantize invert_quantize[4];\n  struct aptx_prediction prediction[4];\n}",
            "name": "aptx_channel",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "codeword_history",
                        "type": "int32_t",
                        "definition": [
                            "int32_t codeword_history"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dither_parity",
                        "type": "int32_t",
                        "definition": [
                            "int32_t dither_parity"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dither",
                        "type": "int32_t [4]",
                        "definition": [
                            "int32_t dither[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "qmf",
                        "type": "struct aptx_QMF_analysis",
                        "definition": [
                            "struct aptx_QMF_analysis qmf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quantize",
                        "type": "struct aptx_quantize [4]",
                        "definition": [
                            "struct aptx_quantize quantize[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invert_quantize",
                        "type": "struct aptx_invert_quantize [4]",
                        "definition": [
                            "struct aptx_invert_quantize invert_quantize[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prediction",
                        "type": "struct aptx_prediction [4]",
                        "definition": [
                            "struct aptx_prediction prediction[4]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct aptx_tables\n{\n  const int32_t *quantize_intervals;\n  const int32_t *invert_quantize_dither_factors;\n  const int32_t *quantize_dither_factors;\n  const int16_t *quantize_factor_select_offset;\n  int tables_size;\n  int32_t factor_max;\n  int prediction_order;\n}",
            "name": "aptx_tables",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "quantize_intervals",
                        "type": "const int32_t *",
                        "definition": [
                            "const int32_t *quantize_intervals"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invert_quantize_dither_factors",
                        "type": "const int32_t *",
                        "definition": [
                            "const int32_t *invert_quantize_dither_factors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quantize_dither_factors",
                        "type": "const int32_t *",
                        "definition": [
                            "const int32_t *quantize_dither_factors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quantize_factor_select_offset",
                        "type": "const int16_t *",
                        "definition": [
                            "const int16_t *quantize_factor_select_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tables_size",
                        "type": "int",
                        "definition": [
                            "int tables_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "factor_max",
                        "type": "int32_t",
                        "definition": [
                            "int32_t factor_max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prediction_order",
                        "type": "int",
                        "definition": [
                            "int prediction_order"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        }
    ],
    "global_variable": [
        {
            "path": null,
            "name": "aptx_major",
            "type": "const int",
            "definition": [
                "extern const int aptx_major"
            ]
        },
        {
            "path": null,
            "name": "aptx_minor",
            "type": "const int",
            "definition": [
                "extern const int aptx_minor"
            ]
        },
        {
            "path": null,
            "name": "aptx_patch",
            "type": "const int",
            "definition": [
                "extern const int aptx_patch"
            ]
        },
        {
            "path": null,
            "name": "quantize_intervals_LF",
            "type": "const int32_t [65]",
            "definition": [
                "static const int32_t quantize_intervals_LF[65] = {-9948, 9948, 29860, 49808, 69822, 89926, 110144, 130502, 151026, 171738, 192666, 213832, 235264, 256982, 279014, 301384, 324118, 347244, 370790, 394782, 419250, 444226, 469742, 495832, 522536, 549890, 577936, 606720, 636290, 666700, 698006, 730270, 763562, 797958, 833538, 870398, 908640, 948376, 989740, 1032874, 1077948, 1125150, 1174700, 1226850, 1281900, 1340196, 1402156, 1468282, 1539182, 1615610, 1698514, 1789098, 1888944, 2000168, 2125700, 2269750, 2438670, 2642660, 2899462, 3243240, 3746078, 4535138, 5664098, 7102424, 8897462}"
            ]
        },
        {
            "path": null,
            "name": "invert_quantize_dither_factors_LF",
            "type": "const int32_t [65]",
            "definition": [
                "static const int32_t invert_quantize_dither_factors_LF[65] = {9948, 9948, 9962, 9988, 10026, 10078, 10142, 10218, 10306, 10408, 10520, 10646, 10784, 10934, 11098, 11274, 11462, 11664, 11880, 12112, 12358, 12618, 12898, 13194, 13510, 13844, 14202, 14582, 14988, 15422, 15884, 16380, 16912, 17484, 18098, 18762, 19480, 20258, 21106, 22030, 23044, 24158, 25390, 26760, 28290, 30008, 31954, 34172, 36728, 39700, 43202, 47382, 52462, 58762, 66770, 77280, 91642, 112348, 144452, 199326, 303512, 485546, 643414, 794914, 1000124}"
            ]
        },
        {
            "path": null,
            "name": "quantize_dither_factors_LF",
            "type": "const int32_t [65]",
            "definition": [
                "static const int32_t quantize_dither_factors_LF[65] = {0, 4, 7, 10, 13, 16, 19, 22, 26, 28, 32, 35, 38, 41, 44, 47, 51, 54, 58, 62, 65, 70, 74, 79, 84, 90, 95, 102, 109, 116, 124, 133, 143, 154, 166, 180, 195, 212, 231, 254, 279, 308, 343, 383, 430, 487, 555, 639, 743, 876, 1045, 1270, 1575, 2002, 2628, 3591, 5177, 8026, 13719, 26047, 45509, 39467, 37875, 51303, 0}"
            ]
        },
        {
            "path": null,
            "name": "quantize_factor_select_offset_LF",
            "type": "const int16_t [65]",
            "definition": [
                "static const int16_t quantize_factor_select_offset_LF[65] = {0, -21, -19, -17, -15, -12, -10, -8, -6, -4, -1, 1, 3, 6, 8, 10, 13, 15, 18, 20, 23, 26, 29, 31, 34, 37, 40, 43, 47, 50, 53, 57, 60, 64, 68, 72, 76, 80, 85, 89, 94, 99, 105, 110, 116, 123, 129, 136, 144, 152, 161, 171, 182, 194, 207, 223, 241, 263, 291, 328, 382, 467, 522, 522, 522}"
            ]
        },
        {
            "path": null,
            "name": "quantize_intervals_MLF",
            "type": "const int32_t [9]",
            "definition": [
                "static const int32_t quantize_intervals_MLF[9] = {-89806, 89806, 278502, 494338, 759442, 1113112, 1652322, 2720256, 5190186}"
            ]
        },
        {
            "path": null,
            "name": "invert_quantize_dither_factors_MLF",
            "type": "const int32_t [9]",
            "definition": [
                "static const int32_t invert_quantize_dither_factors_MLF[9] = {89806, 89806, 98890, 116946, 148158, 205512, 333698, 734236, 1735696}"
            ]
        },
        {
            "path": null,
            "name": "quantize_dither_factors_MLF",
            "type": "const int32_t [9]",
            "definition": [
                "static const int32_t quantize_dither_factors_MLF[9] = {0, 2271, 4514, 7803, 14339, 32047, 100135, 250365, 0}"
            ]
        },
        {
            "path": null,
            "name": "quantize_factor_select_offset_MLF",
            "type": "const int16_t [9]",
            "definition": [
                "static const int16_t quantize_factor_select_offset_MLF[9] = {0, -14, 6, 29, 58, 96, 154, 270, 521}"
            ]
        },
        {
            "path": null,
            "name": "quantize_intervals_MHF",
            "type": "const int32_t [3]",
            "definition": [
                "static const int32_t quantize_intervals_MHF[3] = {-194080, 194080, 890562}"
            ]
        },
        {
            "path": null,
            "name": "invert_quantize_dither_factors_MHF",
            "type": "const int32_t [3]",
            "definition": [
                "static const int32_t invert_quantize_dither_factors_MHF[3] = {194080, 194080, 502402}"
            ]
        },
        {
            "path": null,
            "name": "quantize_dither_factors_MHF",
            "type": "const int32_t [3]",
            "definition": [
                "static const int32_t quantize_dither_factors_MHF[3] = {0, 77081, 0}"
            ]
        },
        {
            "path": null,
            "name": "quantize_factor_select_offset_MHF",
            "type": "const int16_t [3]",
            "definition": [
                "static const int16_t quantize_factor_select_offset_MHF[3] = {0, -33, 136}"
            ]
        },
        {
            "path": null,
            "name": "quantize_intervals_HF",
            "type": "const int32_t [5]",
            "definition": [
                "static const int32_t quantize_intervals_HF[5] = {-163006, 163006, 542708, 1120554, 2669238}"
            ]
        },
        {
            "path": null,
            "name": "invert_quantize_dither_factors_HF",
            "type": "const int32_t [5]",
            "definition": [
                "static const int32_t invert_quantize_dither_factors_HF[5] = {163006, 163006, 216698, 361148, 1187538}"
            ]
        },
        {
            "path": null,
            "name": "quantize_dither_factors_HF",
            "type": "const int32_t [5]",
            "definition": [
                "static const int32_t quantize_dither_factors_HF[5] = {0, 13423, 36113, 206598, 0}"
            ]
        },
        {
            "path": null,
            "name": "quantize_factor_select_offset_HF",
            "type": "const int16_t [5]",
            "definition": [
                "static const int16_t quantize_factor_select_offset_HF[5] = {0, -8, 33, 95, 262}"
            ]
        },
        {
            "path": null,
            "name": "hd_quantize_intervals_LF",
            "type": "const int32_t [257]",
            "definition": [
                "static const int32_t hd_quantize_intervals_LF[257] = {-2436, 2436, 7308, 12180, 17054, 21930, 26806, 31686, 36566, 41450, 46338, 51230, 56124, 61024, 65928, 70836, 75750, 80670, 85598, 90530, 95470, 100418, 105372, 110336, 115308, 120288, 125278, 130276, 135286, 140304, 145334, 150374, 155426, 160490, 165566, 170654, 175756, 180870, 185998, 191138, 196294, 201466, 206650, 211850, 217068, 222300, 227548, 232814, 238096, 243396, 248714, 254050, 259406, 264778, 270172, 275584, 281018, 286470, 291944, 297440, 302956, 308496, 314056, 319640, 325248, 330878, 336532, 342212, 347916, 353644, 359398, 365178, 370986, 376820, 382680, 388568, 394486, 400430, 406404, 412408, 418442, 424506, 430600, 436726, 442884, 449074, 455298, 461554, 467844, 474168, 480528, 486922, 493354, 499820, 506324, 512866, 519446, 526064, 532722, 539420, 546160, 552940, 559760, 566624, 573532, 580482, 587478, 594520, 601606, 608740, 615920, 623148, 630426, 637754, 645132, 652560, 660042, 667576, 675164, 682808, 690506, 698262, 706074, 713946, 721876, 729868, 737920, 746036, 754216, 762460, 770770, 779148, 787594, 796108, 804694, 813354, 822086, 830892, 839774, 848736, 857776, 866896, 876100, 885386, 894758, 904218, 913766, 923406, 933138, 942964, 952886, 962908, 973030, 983254, 993582, 1004020, 1014566, 1025224, 1035996, 1046886, 1057894, 1069026, 1080284, 1091670, 1103186, 1114838, 1126628, 1138558, 1150634, 1162858, 1175236, 1187768, 1200462, 1213320, 1226346, 1239548, 1252928, 1266490, 1280242, 1294188, 1308334, 1322688, 1337252, 1352034, 1367044, 1382284, 1397766, 1413494, 1429478, 1445728, 1462252, 1479058, 1496158, 1513562, 1531280, 1549326, 1567710, 1586446, 1605550, 1625034, 1644914, 1665208, 1685932, 1707108, 1728754, 1750890, 1773542, 1796732, 1820488, 1844840, 1869816, 1895452, 1921780, 1948842, 1976680, 2005338, 2034868, 2065322, 2096766, 2129260, 2162880, 2197708, 2233832, 2271352, 2310384, 2351050, 2393498, 2437886, 2484404, 2533262, 2584710, 2639036, 2696578, 2757738, 2822998, 2892940, 2968278, 3049896, 3138912, 3236760, 3345312, 3467068, 3605434, 3765154, 3952904, 4177962, 4452178, 4787134, 5187290, 5647128, 6159120, 6720518, 7332904, 8000032, 8726664, 9518152, 10380372}"
            ]
        },
        {
            "path": null,
            "name": "hd_invert_quantize_dither_factors_LF",
            "type": "const int32_t [257]",
            "definition": [
                "static const int32_t hd_invert_quantize_dither_factors_LF[257] = {2436, 2436, 2436, 2436, 2438, 2438, 2438, 2440, 2442, 2442, 2444, 2446, 2448, 2450, 2454, 2456, 2458, 2462, 2464, 2468, 2472, 2476, 2480, 2484, 2488, 2492, 2498, 2502, 2506, 2512, 2518, 2524, 2528, 2534, 2540, 2548, 2554, 2560, 2568, 2574, 2582, 2588, 2596, 2604, 2612, 2620, 2628, 2636, 2646, 2654, 2664, 2672, 2682, 2692, 2702, 2712, 2722, 2732, 2742, 2752, 2764, 2774, 2786, 2798, 2810, 2822, 2834, 2846, 2858, 2870, 2884, 2896, 2910, 2924, 2938, 2952, 2966, 2980, 2994, 3010, 3024, 3040, 3056, 3070, 3086, 3104, 3120, 3136, 3154, 3170, 3188, 3206, 3224, 3242, 3262, 3280, 3300, 3320, 3338, 3360, 3380, 3400, 3422, 3442, 3464, 3486, 3508, 3532, 3554, 3578, 3602, 3626, 3652, 3676, 3702, 3728, 3754, 3780, 3808, 3836, 3864, 3892, 3920, 3950, 3980, 4010, 4042, 4074, 4106, 4138, 4172, 4206, 4240, 4276, 4312, 4348, 4384, 4422, 4460, 4500, 4540, 4580, 4622, 4664, 4708, 4752, 4796, 4842, 4890, 4938, 4986, 5036, 5086, 5138, 5192, 5246, 5300, 5358, 5416, 5474, 5534, 5596, 5660, 5726, 5792, 5860, 5930, 6002, 6074, 6150, 6226, 6306, 6388, 6470, 6556, 6644, 6736, 6828, 6924, 7022, 7124, 7228, 7336, 7448, 7562, 7680, 7802, 7928, 8058, 8192, 8332, 8476, 8624, 8780, 8940, 9106, 9278, 9458, 9644, 9840, 10042, 10252, 10472, 10702, 10942, 11194, 11458, 11734, 12024, 12328, 12648, 12986, 13342, 13720, 14118, 14540, 14990, 15466, 15976, 16520, 17102, 17726, 18398, 19124, 19908, 20760, 21688, 22702, 23816, 25044, 26404, 27922, 29622, 31540, 33720, 36222, 39116, 42502, 46514, 51334, 57218, 64536, 73830, 85890, 101860, 123198, 151020, 183936, 216220, 243618, 268374, 293022, 319362, 347768, 378864, 412626, 449596}"
            ]
        },
        {
            "path": null,
            "name": "hd_quantize_dither_factors_LF",
            "type": "const int32_t [256]",
            "definition": [
                "static const int32_t hd_quantize_dither_factors_LF[256] = {0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 15, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 20, 21, 21, 22, 22, 23, 23, 24, 25, 26, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 42, 43, 45, 47, 49, 51, 53, 55, 58, 60, 63, 66, 69, 73, 76, 80, 85, 89, 95, 100, 106, 113, 119, 128, 136, 146, 156, 168, 182, 196, 213, 232, 254, 279, 307, 340, 380, 425, 480, 545, 626, 724, 847, 1003, 1205, 1471, 1830, 2324, 3015, 3993, 5335, 6956, 8229, 8071, 6850, 6189, 6162, 6585, 7102, 7774, 8441, 9243}"
            ]
        },
        {
            "path": null,
            "name": "hd_quantize_factor_select_offset_LF",
            "type": "const int16_t [257]",
            "definition": [
                "static const int16_t hd_quantize_factor_select_offset_LF[257] = {0, -22, -21, -21, -20, -20, -19, -19, -18, -18, -17, -17, -16, -16, -15, -14, -14, -13, -13, -12, -12, -11, -11, -10, -10, -9, -9, -8, -7, -7, -6, -6, -5, -5, -4, -4, -3, -3, -2, -1, -1, 0, 0, 1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 8, 8, 9, 9, 10, 11, 11, 12, 12, 13, 14, 14, 15, 15, 16, 17, 17, 18, 19, 19, 20, 20, 21, 22, 22, 23, 24, 24, 25, 26, 26, 27, 28, 28, 29, 30, 30, 31, 32, 33, 33, 34, 35, 35, 36, 37, 38, 38, 39, 40, 41, 41, 42, 43, 44, 44, 45, 46, 47, 48, 48, 49, 50, 51, 52, 52, 53, 54, 55, 56, 57, 58, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 105, 106, 107, 109, 110, 112, 113, 115, 116, 118, 119, 121, 122, 124, 125, 127, 129, 130, 132, 134, 136, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 158, 160, 162, 164, 167, 169, 172, 174, 177, 180, 182, 185, 188, 191, 194, 197, 201, 204, 208, 211, 215, 219, 223, 227, 232, 236, 241, 246, 251, 257, 263, 269, 275, 283, 290, 298, 307, 317, 327, 339, 352, 367, 384, 404, 429, 458, 494, 522, 522, 522, 522, 522, 522, 522, 522, 522}"
            ]
        },
        {
            "path": null,
            "name": "hd_quantize_intervals_MLF",
            "type": "const int32_t [33]",
            "definition": [
                "static const int32_t hd_quantize_intervals_MLF[33] = {-21236, 21236, 63830, 106798, 150386, 194832, 240376, 287258, 335726, 386034, 438460, 493308, 550924, 611696, 676082, 744626, 817986, 896968, 982580, 1076118, 1179278, 1294344, 1424504, 1574386, 1751090, 1966260, 2240868, 2617662, 3196432, 4176450, 5658260, 7671068, 10380372}"
            ]
        },
        {
            "path": null,
            "name": "hd_invert_quantize_dither_factors_MLF",
            "type": "const int32_t [33]",
            "definition": [
                "static const int32_t hd_invert_quantize_dither_factors_MLF[33] = {21236, 21236, 21360, 21608, 21978, 22468, 23076, 23806, 24660, 25648, 26778, 28070, 29544, 31228, 33158, 35386, 37974, 41008, 44606, 48934, 54226, 60840, 69320, 80564, 96140, 119032, 155576, 221218, 357552, 622468, 859344, 1153464, 1555840}"
            ]
        },
        {
            "path": null,
            "name": "hd_quantize_dither_factors_MLF",
            "type": "const int32_t [32]",
            "definition": [
                "static const int32_t hd_quantize_dither_factors_MLF[32] = {0, 31, 62, 93, 123, 152, 183, 214, 247, 283, 323, 369, 421, 483, 557, 647, 759, 900, 1082, 1323, 1654, 2120, 2811, 3894, 5723, 9136, 16411, 34084, 66229, 59219, 73530, 100594}"
            ]
        },
        {
            "path": null,
            "name": "hd_quantize_factor_select_offset_MLF",
            "type": "const int16_t [33]",
            "definition": [
                "static const int16_t hd_quantize_factor_select_offset_MLF[33] = {0, -21, -16, -12, -7, -2, 3, 8, 13, 19, 24, 30, 36, 43, 50, 57, 65, 74, 83, 93, 104, 117, 131, 147, 166, 189, 219, 259, 322, 427, 521, 521, 521}"
            ]
        },
        {
            "path": null,
            "name": "hd_quantize_intervals_MHF",
            "type": "const int32_t [9]",
            "definition": [
                "static const int32_t hd_quantize_intervals_MHF[9] = {-95044, 95044, 295844, 528780, 821332, 1226438, 1890540, 3344850, 6450664}"
            ]
        },
        {
            "path": null,
            "name": "hd_invert_quantize_dither_factors_MHF",
            "type": "const int32_t [9]",
            "definition": [
                "static const int32_t hd_invert_quantize_dither_factors_MHF[9] = {95044, 95044, 105754, 127180, 165372, 39736, 424366, 1029946, 2075866}"
            ]
        },
        {
            "path": null,
            "name": "hd_quantize_dither_factors_MHF",
            "type": "const int32_t [8]",
            "definition": [
                "static const int32_t hd_quantize_dither_factors_MHF[8] = {0, 2678, 5357, 9548, -31409, 96158, 151395, 261480}"
            ]
        },
        {
            "path": null,
            "name": "hd_quantize_factor_select_offset_MHF",
            "type": "const int16_t [9]",
            "definition": [
                "static const int16_t hd_quantize_factor_select_offset_MHF[9] = {0, -17, 5, 30, 62, 105, 177, 334, 518}"
            ]
        },
        {
            "path": null,
            "name": "hd_quantize_intervals_HF",
            "type": "const int32_t [17]",
            "definition": [
                "static const int32_t hd_quantize_intervals_HF[17] = {-45754, 45754, 138496, 234896, 337336, 448310, 570738, 708380, 866534, 1053262, 1281958, 1577438, 1993050, 2665984, 3900982, 5902844, 8897462}"
            ]
        },
        {
            "path": null,
            "name": "hd_invert_quantize_dither_factors_HF",
            "type": "const int32_t [17]",
            "definition": [
                "static const int32_t hd_invert_quantize_dither_factors_HF[17] = {45754, 45754, 46988, 49412, 53026, 57950, 64478, 73164, 84988, 101740, 126958, 168522, 247092, 425842, 809154, 1192708, 1801910}"
            ]
        },
        {
            "path": null,
            "name": "hd_quantize_dither_factors_HF",
            "type": "const int32_t [16]",
            "definition": [
                "static const int32_t hd_quantize_dither_factors_HF[16] = {0, 309, 606, 904, 1231, 1632, 2172, 2956, 4188, 6305, 10391, 19643, 44688, 95828, 95889, 152301}"
            ]
        },
        {
            "path": null,
            "name": "hd_quantize_factor_select_offset_HF",
            "type": "const int16_t [17]",
            "definition": [
                "static const int16_t hd_quantize_factor_select_offset_HF[17] = {0, -18, -8, 2, 13, 25, 38, 53, 70, 90, 115, 147, 192, 264, 398, 521, 521}"
            ]
        },
        {
            "path": null,
            "name": "all_tables",
            "type": "const struct aptx_tables [2][4]",
            "definition": [
                "static const struct aptx_tables all_tables[2][4] = {{{quantize_intervals_LF, invert_quantize_dither_factors_LF, quantize_dither_factors_LF, quantize_factor_select_offset_LF, (sizeof(quantize_intervals_LF)) / (sizeof(*quantize_intervals_LF)), 0x11FF, 24}, {quantize_intervals_MLF, invert_quantize_dither_factors_MLF, quantize_dither_factors_MLF, quantize_factor_select_offset_MLF, (sizeof(quantize_intervals_MLF)) / (sizeof(*quantize_intervals_MLF)), 0x14FF, 12}, {quantize_intervals_MHF, invert_quantize_dither_factors_MHF, quantize_dither_factors_MHF, quantize_factor_select_offset_MHF, (sizeof(quantize_intervals_MHF)) / (sizeof(*quantize_intervals_MHF)), 0x16FF, 6}, {quantize_intervals_HF, invert_quantize_dither_factors_HF, quantize_dither_factors_HF, quantize_factor_select_offset_HF, (sizeof(quantize_intervals_HF)) / (sizeof(*quantize_intervals_HF)), 0x15FF, 12}}, {{hd_quantize_intervals_LF, hd_invert_quantize_dither_factors_LF, hd_quantize_dither_factors_LF, hd_quantize_factor_select_offset_LF, (sizeof(hd_quantize_intervals_LF)) / (sizeof(*hd_quantize_intervals_LF)), 0x11FF, 24}, {hd_quantize_intervals_MLF, hd_invert_quantize_dither_factors_MLF, hd_quantize_dither_factors_MLF, hd_quantize_factor_select_offset_MLF, (sizeof(hd_quantize_intervals_MLF)) / (sizeof(*hd_quantize_intervals_MLF)), 0x14FF, 12}, {hd_quantize_intervals_MHF, hd_invert_quantize_dither_factors_MHF, hd_quantize_dither_factors_MHF, hd_quantize_factor_select_offset_MHF, (sizeof(hd_quantize_intervals_MHF)) / (sizeof(*hd_quantize_intervals_MHF)), 0x16FF, 6}, {hd_quantize_intervals_HF, hd_invert_quantize_dither_factors_HF, hd_quantize_dither_factors_HF, hd_quantize_factor_select_offset_HF, (sizeof(hd_quantize_intervals_HF)) / (sizeof(*hd_quantize_intervals_HF)), 0x15FF, 12}}}"
            ]
        },
        {
            "path": null,
            "name": "quantization_factors",
            "type": "const int16_t [32]",
            "definition": [
                "static const int16_t quantization_factors[32] = {2048, 2093, 2139, 2186, 2233, 2282, 2332, 2383, 2435, 2489, 2543, 2599, 2656, 2714, 2774, 2834, 2896, 2960, 3025, 3091, 3158, 3228, 3298, 3371, 3444, 3520, 3597, 3676, 3756, 3838, 3922, 4008}"
            ]
        },
        {
            "path": null,
            "name": "aptx_qmf_outer_coeffs",
            "type": "const int32_t [2][16]",
            "definition": [
                "static const int32_t aptx_qmf_outer_coeffs[2][16] = {{730, -413, -9611, 43626, -121026, 269973, -585547, 2801966, 697128, -160481, 27611, 8478, -10043, 3511, 688, -897}, {-897, 688, 3511, -10043, 8478, 27611, -160481, 697128, 2801966, -585547, 269973, -121026, 43626, -9611, -413, 730}}"
            ]
        },
        {
            "path": null,
            "name": "aptx_qmf_inner_coeffs",
            "type": "const int32_t [2][16]",
            "definition": [
                "static const int32_t aptx_qmf_inner_coeffs[2][16] = {{1033, -584, -13592, 61697, -171156, 381799, -828088, 3962579, 985888, -226954, 39048, 11990, -14203, 4966, 973, -1268}, {-1268, 973, 4966, -14203, 11990, 39048, -226954, 985888, 3962579, -828088, 381799, -171156, 61697, -13592, -584, 1033}}"
            ]
        },
        {
            "path": null,
            "name": "input_buffer",
            "type": "unsigned char [512 * 6]",
            "definition": [
                "static unsigned char input_buffer[512 * 6]"
            ]
        },
        {
            "path": null,
            "name": "output_buffer",
            "type": "unsigned char [(((512 * 3) * 2) * 6) + ((3 * 2) * 4)]",
            "definition": [
                "static unsigned char output_buffer[(((512 * 3) * 2) * 6) + ((3 * 2) * 4)]"
            ]
        }
    ],
    "function": [
        {
            "path": null,
            "name": "aptx_init",
            "header": "struct aptx_context *aptx_init(int hd)",
            "params": [
                "int hd"
            ],
            "definition": "struct aptx_context *aptx_init(int hd)\n{\n  struct aptx_context *ctx;\n  unsigned int ctx_idx = 0;\n  ctx_idx = (struct aptx_context *) malloc(sizeof(*ctx_idx));\n  if (!(&ctx[ctx_idx]))\n  {\n    return 0;\n  }\n  ctx->hd = (hd) ? (1) : (0);\n  aptx_reset(ctx);\n  return ctx;\n}\n\n",
            "calle": [
                "aptx_reset",
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "hd",
                        "type": "int",
                        "definition": [
                            "int hd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct aptx_context",
                        "type": "struct aptx_context *",
                        "definition": [
                            "struct aptx_context *ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ctx_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ctx_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptx_reset",
            "header": "void aptx_reset(struct aptx_context *ctx)",
            "params": [
                "struct aptx_context *ctx"
            ],
            "definition": "void aptx_reset(struct aptx_context *ctx)\n{\n  const uint8_t hd = ctx->hd;\n  unsigned i;\n  unsigned chan;\n  unsigned subband;\n  struct aptx_channel *channel;\n  unsigned int channel_idx = 0;\n  struct aptx_prediction *prediction;\n  unsigned int prediction_idx = 0;\n  for (i = 0; i < (sizeof(*ctx)); i += 1)\n    ((unsigned char *) ctx)[i] = 0;\n\n  ctx->hd = hd;\n  ctx->decode_skip_leading = (90 + 3) / 4;\n  ctx->encode_remaining = (90 + 3) / 4;\n  for (chan = 0; chan < NB_CHANNELS; chan += 1)\n  {\n    channel_idx = &ctx->channels[chan];\n    for (subband = 0; subband < 4; subband += 1)\n    {\n      prediction_idx = &channel->prediction_idx[subband];\n      prediction->prev_sign[0] = 1;\n      prediction->prev_sign[1] = 1;\n    }\n\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct aptx_context",
                        "type": "struct aptx_context *",
                        "definition": [
                            "struct aptx_context *ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hd",
                        "type": "const uint8_t",
                        "definition": [
                            "const uint8_t hd = ctx->hd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned",
                        "definition": [
                            "unsigned i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chan",
                        "type": "unsigned",
                        "definition": [
                            "unsigned chan"
                        ]
                    },
                    {
                        "path": null,
                        "name": "subband",
                        "type": "unsigned",
                        "definition": [
                            "unsigned subband"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct aptx_channel",
                        "type": "struct aptx_channel *",
                        "definition": [
                            "struct aptx_channel *channel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "channel_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int channel_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct aptx_prediction",
                        "type": "struct aptx_prediction *",
                        "definition": [
                            "struct aptx_prediction *prediction"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prediction_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int prediction_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptx_finish",
            "header": "void aptx_finish(struct aptx_context *ctx)",
            "params": [
                "struct aptx_context *ctx"
            ],
            "definition": "void aptx_finish(struct aptx_context *ctx)\n{\n  free(ctx);\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct aptx_context",
                        "type": "struct aptx_context *",
                        "definition": [
                            "struct aptx_context *ctx"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptx_encode",
            "header": "size_t aptx_encode(struct aptx_context *ctx, const unsigned char *input, size_t input_size, unsigned char *output, size_t output_size, size_t *written)",
            "params": [
                "struct aptx_context *ctx",
                "const unsigned char *input",
                "size_t input_size",
                "unsigned char *output",
                "size_t output_size",
                "size_t *written"
            ],
            "definition": "size_t aptx_encode(struct aptx_context *ctx, const unsigned char *input, size_t input_size, unsigned char *output, size_t output_size, size_t *written)\n{\n  const size_t sample_size = (ctx->hd) ? (6) : (4);\n  int32_t samples[NB_CHANNELS][4];\n  unsigned sample;\n  unsigned channel;\n  size_t ipos;\n  size_t opos;\n  for (ipos = 0, opos = 0; ((ipos + ((3 * NB_CHANNELS) * 4)) <= input_size) && ((opos + sample_size) <= output_size); opos += sample_size)\n  {\n    for (sample = 0; sample < 4; sample += 1)\n    {\n      for (channel = 0; channel < NB_CHANNELS; channel += 1, ipos += 3)\n      {\n        samples[channel][sample] = (int32_t) (((((uint32_t) input[ipos + 0]) << 0) | (((uint32_t) input[ipos + 1]) << 8)) | (((uint32_t) ((int8_t) input[ipos + 2])) << 16));\n      }\n\n    }\n\n    aptx_encode_samples(ctx, samples, output + opos);\n  }\n\n  *written = opos;\n  return ipos;\n}\n\n",
            "calle": [
                "aptx_encode_samples"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct aptx_context",
                        "type": "struct aptx_context *",
                        "definition": [
                            "struct aptx_context *ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_size",
                        "type": "size_t",
                        "definition": [
                            "size_t input_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_size",
                        "type": "size_t",
                        "definition": [
                            "size_t output_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "written",
                        "type": "size_t *",
                        "definition": [
                            "size_t *written"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_size",
                        "type": "const size_t",
                        "definition": [
                            "const size_t sample_size = (ctx->hd) ? (6) : (4)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "samples",
                        "type": "int32_t [NB_CHANNELS][4]",
                        "definition": [
                            "int32_t samples[NB_CHANNELS][4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample",
                        "type": "unsigned",
                        "definition": [
                            "unsigned sample"
                        ]
                    },
                    {
                        "path": null,
                        "name": "channel",
                        "type": "unsigned",
                        "definition": [
                            "unsigned channel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ipos",
                        "type": "size_t",
                        "definition": [
                            "size_t ipos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opos",
                        "type": "size_t",
                        "definition": [
                            "size_t opos"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptx_encode_finish",
            "header": "int aptx_encode_finish(struct aptx_context *ctx, unsigned char *output, size_t output_size, size_t *written)",
            "params": [
                "struct aptx_context *ctx",
                "unsigned char *output",
                "size_t output_size",
                "size_t *written"
            ],
            "definition": "int aptx_encode_finish(struct aptx_context *ctx, unsigned char *output, size_t output_size, size_t *written)\n{\n  const size_t sample_size = (ctx->hd) ? (6) : (4);\n  int32_t samples[NB_CHANNELS][4] = {{0}};\n  size_t opos;\n  if (ctx->encode_remaining == 0)\n  {\n    *written = 0;\n    return 1;\n  }\n  for (opos = 0; (ctx->encode_remaining > 0) && ((opos + sample_size) <= output_size); ctx->encode_remaining -= 1, opos += sample_size)\n    aptx_encode_samples(ctx, samples, output + opos);\n\n  *written = opos;\n  if (ctx->encode_remaining > 0)\n  {\n    return 0;\n  }\n  aptx_reset(ctx);\n  return 1;\n}\n\n",
            "calle": [
                "aptx_encode_samples",
                "aptx_reset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct aptx_context",
                        "type": "struct aptx_context *",
                        "definition": [
                            "struct aptx_context *ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_size",
                        "type": "size_t",
                        "definition": [
                            "size_t output_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "written",
                        "type": "size_t *",
                        "definition": [
                            "size_t *written"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_size",
                        "type": "const size_t",
                        "definition": [
                            "const size_t sample_size = (ctx->hd) ? (6) : (4)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "samples",
                        "type": "int32_t [NB_CHANNELS][4]",
                        "definition": [
                            "int32_t samples[NB_CHANNELS][4] = {{0}}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opos",
                        "type": "size_t",
                        "definition": [
                            "size_t opos"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptx_decode",
            "header": "size_t aptx_decode(struct aptx_context *ctx, const unsigned char *input, size_t input_size, unsigned char *output, size_t output_size, size_t *written)",
            "params": [
                "struct aptx_context *ctx",
                "const unsigned char *input",
                "size_t input_size",
                "unsigned char *output",
                "size_t output_size",
                "size_t *written"
            ],
            "definition": "size_t aptx_decode(struct aptx_context *ctx, const unsigned char *input, size_t input_size, unsigned char *output, size_t output_size, size_t *written)\n{\n  const size_t sample_size = (ctx->hd) ? (6) : (4);\n  int32_t samples[NB_CHANNELS][4];\n  unsigned sample;\n  unsigned channel;\n  size_t ipos;\n  size_t opos;\n  for (ipos = 0, opos = 0; ((ipos + sample_size) <= input_size) && (((opos + ((3 * NB_CHANNELS) * 4)) <= output_size) || (ctx->decode_skip_leading > 0)); ipos += sample_size)\n  {\n    if (aptx_decode_samples(ctx, input + ipos, samples))\n    {\n      break;\n    }\n    sample = 0;\n    if (ctx->decode_skip_leading > 0)\n    {\n      ctx->decode_skip_leading -= 1;\n      if (ctx->decode_skip_leading > 0)\n      {\n        continue;\n      }\n      sample = 90 % 4;\n    }\n    for (; sample < 4; sample += 1)\n    {\n      for (channel = 0; channel < NB_CHANNELS; channel += 1, opos += 3)\n      {\n        output[opos + 0] = (uint8_t) ((((uint32_t) samples[channel][sample]) >> 0) & 0xFF);\n        output[opos + 1] = (uint8_t) ((((uint32_t) samples[channel][sample]) >> 8) & 0xFF);\n        output[opos + 2] = (uint8_t) ((((uint32_t) samples[channel][sample]) >> 16) & 0xFF);\n      }\n\n    }\n\n  }\n\n  *written = opos;\n  return ipos;\n}\n\n",
            "calle": [
                "aptx_decode_samples"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct aptx_context",
                        "type": "struct aptx_context *",
                        "definition": [
                            "struct aptx_context *ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_size",
                        "type": "size_t",
                        "definition": [
                            "size_t input_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_size",
                        "type": "size_t",
                        "definition": [
                            "size_t output_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "written",
                        "type": "size_t *",
                        "definition": [
                            "size_t *written"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_size",
                        "type": "const size_t",
                        "definition": [
                            "const size_t sample_size = (ctx->hd) ? (6) : (4)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "samples",
                        "type": "int32_t [NB_CHANNELS][4]",
                        "definition": [
                            "int32_t samples[NB_CHANNELS][4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample",
                        "type": "unsigned",
                        "definition": [
                            "unsigned sample"
                        ]
                    },
                    {
                        "path": null,
                        "name": "channel",
                        "type": "unsigned",
                        "definition": [
                            "unsigned channel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ipos",
                        "type": "size_t",
                        "definition": [
                            "size_t ipos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opos",
                        "type": "size_t",
                        "definition": [
                            "size_t opos"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptx_decode_sync",
            "header": "size_t aptx_decode_sync(struct aptx_context *ctx, const unsigned char *input, size_t input_size, unsigned char *output, size_t output_size, size_t *written, int *synced, size_t *dropped)",
            "params": [
                "struct aptx_context *ctx",
                "const unsigned char *input",
                "size_t input_size",
                "unsigned char *output",
                "size_t output_size",
                "size_t *written",
                "int *synced",
                "size_t *dropped"
            ],
            "definition": "size_t aptx_decode_sync(struct aptx_context *ctx, const unsigned char *input, size_t input_size, unsigned char *output, size_t output_size, size_t *written, int *synced, size_t *dropped)\n{\n  const size_t sample_size = (ctx->hd) ? (6) : (4);\n  size_t input_size_step;\n  size_t processed_step;\n  size_t written_step;\n  size_t ipos = 0;\n  size_t opos = 0;\n  size_t i;\n  *synced = 0;\n  *dropped = 0;\n  if ((ctx->decode_sync_buffer_len > 0) && (((sample_size - 1) - ctx->decode_sync_buffer_len) <= input_size))\n  {\n    while (ctx->decode_sync_buffer_len < (sample_size - 1))\n      ctx->decode_sync_buffer[ctx->decode_sync_buffer_len++] = input[ipos];\n\n    ipos += 1;\n  }\n  while ((((ctx->decode_sync_buffer_len == (sample_size - 1)) && (ipos < sample_size)) && (ipos < input_size)) && ((((opos + ((3 * NB_CHANNELS) * 4)) <= output_size) || (ctx->decode_skip_leading > 0)) || (ctx->decode_dropped > 0)))\n  {\n    helper_aptx_decode_sync_1(&sample_size, &processed_step, &ipos, &opos, &i, ctx, input, output, output_size, synced, dropped, written_step);\n  }\n\n  if ((ctx->decode_sync_buffer_len == (sample_size - 1)) && (ipos == sample_size))\n  {\n    ipos = 0;\n    ctx->decode_sync_buffer_len = 0;\n  }\n  while (((ipos + sample_size) <= input_size) && ((((opos + ((3 * NB_CHANNELS) * 4)) <= output_size) || (ctx->decode_skip_leading > 0)) || (ctx->decode_dropped > 0)))\n  {\n    helper_aptx_decode_sync_2(&input_size_step, &processed_step, &ipos, &opos, ctx, input, input_size, output, output_size, synced, dropped, sample_size, written_step);\n  }\n\n  if ((ipos + sample_size) > input_size)\n  {\n    while (ipos < input_size)\n      ctx->decode_sync_buffer[ctx->decode_sync_buffer_len++] = input[ipos];\n\n    ipos += 1;\n  }\n  *written = opos;\n  return ipos;\n}\n\n",
            "calle": [
                "helper_aptx_decode_sync_1",
                "helper_aptx_decode_sync_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct aptx_context",
                        "type": "struct aptx_context *",
                        "definition": [
                            "struct aptx_context *ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_size",
                        "type": "size_t",
                        "definition": [
                            "size_t input_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_size",
                        "type": "size_t",
                        "definition": [
                            "size_t output_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "written",
                        "type": "size_t *",
                        "definition": [
                            "size_t *written"
                        ]
                    },
                    {
                        "path": null,
                        "name": "synced",
                        "type": "int *",
                        "definition": [
                            "int *synced"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dropped",
                        "type": "size_t *",
                        "definition": [
                            "size_t *dropped"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_size",
                        "type": "const size_t",
                        "definition": [
                            "const size_t sample_size = (ctx->hd) ? (6) : (4)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_size_step",
                        "type": "size_t",
                        "definition": [
                            "size_t input_size_step"
                        ]
                    },
                    {
                        "path": null,
                        "name": "processed_step",
                        "type": "size_t",
                        "definition": [
                            "size_t processed_step"
                        ]
                    },
                    {
                        "path": null,
                        "name": "written_step",
                        "type": "size_t",
                        "definition": [
                            "size_t written_step"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ipos",
                        "type": "size_t",
                        "definition": [
                            "size_t ipos = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opos",
                        "type": "size_t",
                        "definition": [
                            "size_t opos = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptx_decode_sync_finish",
            "header": "size_t aptx_decode_sync_finish(struct aptx_context *ctx)",
            "params": [
                "struct aptx_context *ctx"
            ],
            "definition": "size_t aptx_decode_sync_finish(struct aptx_context *ctx)\n{\n  const uint8_t dropped = ctx->decode_sync_buffer_len;\n  aptx_reset(ctx);\n  return dropped;\n}\n\n",
            "calle": [
                "aptx_reset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct aptx_context",
                        "type": "struct aptx_context *",
                        "definition": [
                            "struct aptx_context *ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dropped",
                        "type": "const uint8_t",
                        "definition": [
                            "const uint8_t dropped = ctx->decode_sync_buffer_len"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "clip_intp2",
            "header": "",
            "params": [
                "int32_t a",
                "unsigned p"
            ],
            "definition": "inline static int32_t clip_intp2(int32_t a, unsigned p)\n{\n  if ((((uint32_t) a) + (((uint32_t) 1) << p)) & (~((((uint32_t) 2) << p) - 1)))\n  {\n    return (a >> 31) ^ ((1 << p) - 1);\n  }\n  else\n    return a;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "int32_t",
                        "definition": [
                            "int32_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned",
                        "definition": [
                            "unsigned p"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "clip",
            "header": "",
            "params": [
                "int32_t a",
                "int32_t amin",
                "int32_t amax"
            ],
            "definition": "inline static int32_t clip(int32_t a, int32_t amin, int32_t amax)\n{\n  if (a < amin)\n  {\n    return amin;\n  }\n  else\n    if (a > amax)\n  {\n    return amax;\n  }\n  else\n    return a;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "int32_t",
                        "definition": [
                            "int32_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "amin",
                        "type": "int32_t",
                        "definition": [
                            "int32_t amin"
                        ]
                    },
                    {
                        "path": null,
                        "name": "amax",
                        "type": "int32_t",
                        "definition": [
                            "int32_t amax"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "sign_extend",
            "header": "",
            "params": [
                "int32_t val",
                "unsigned bits"
            ],
            "definition": "inline static int32_t sign_extend(int32_t val, unsigned bits)\n{\n  const unsigned shift = (8 * (sizeof(val))) - bits;\n  union \n  {\n    uint32_t u;\n    int32_t s;\n  } v;\n  v.u = ((uint32_t) val) << shift;\n  return v.s >> shift;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "val",
                        "type": "int32_t",
                        "definition": [
                            "int32_t val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "shift",
                        "type": "const unsigned",
                        "definition": [
                            "const unsigned shift = (8 * (sizeof(val))) - bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "union \n{\n  uint32_t u;\n  int32_t s;\n}",
                        "definition": [
                            "union \n{\n  uint32_t u;\n  int32_t s;\n} v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rshift32",
            "header": "",
            "params": [
                "int32_t value",
                "unsigned shift"
            ],
            "definition": "inline static int32_t rshift32(int32_t value, unsigned shift)\n{\n  const int32_t rounding = ((int32_t) 1) << (shift - 1);\n  const int32_t mask = (((int32_t) 1) << (shift + 1)) - 1;\n  return ((value + rounding) >> shift) - ((value & mask) == rounding);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "value",
                        "type": "int32_t",
                        "definition": [
                            "int32_t value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "shift",
                        "type": "unsigned",
                        "definition": [
                            "unsigned shift"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rounding",
                        "type": "const int32_t",
                        "definition": [
                            "const int32_t rounding = ((int32_t) 1) << (shift - 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask",
                        "type": "const int32_t",
                        "definition": [
                            "const int32_t mask = (((int32_t) 1) << (shift + 1)) - 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rshift32_clip24",
            "header": "",
            "params": [
                "int32_t value",
                "unsigned shift"
            ],
            "definition": "inline static int32_t rshift32_clip24(int32_t value, unsigned shift)\n{\n  return clip_intp2((int32_t) rshift32(value, shift), 23);\n}\n\n",
            "calle": [
                "clip_intp2",
                "rshift32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "value",
                        "type": "int32_t",
                        "definition": [
                            "int32_t value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "shift",
                        "type": "unsigned",
                        "definition": [
                            "unsigned shift"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rshift64",
            "header": "",
            "params": [
                "int64_t value",
                "unsigned shift"
            ],
            "definition": "inline static int64_t rshift64(int64_t value, unsigned shift)\n{\n  const int64_t rounding = ((int64_t) 1) << (shift - 1);\n  const int64_t mask = (((int64_t) 1) << (shift + 1)) - 1;\n  return ((value + rounding) >> shift) - ((value & mask) == rounding);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "value",
                        "type": "int64_t",
                        "definition": [
                            "int64_t value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "shift",
                        "type": "unsigned",
                        "definition": [
                            "unsigned shift"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rounding",
                        "type": "const int64_t",
                        "definition": [
                            "const int64_t rounding = ((int64_t) 1) << (shift - 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask",
                        "type": "const int64_t",
                        "definition": [
                            "const int64_t mask = (((int64_t) 1) << (shift + 1)) - 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rshift64_clip24",
            "header": "",
            "params": [
                "int64_t value",
                "unsigned shift"
            ],
            "definition": "inline static int32_t rshift64_clip24(int64_t value, unsigned shift)\n{\n  return clip_intp2((int32_t) rshift64(value, shift), 23);\n}\n\n",
            "calle": [
                "clip_intp2",
                "rshift64"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "value",
                        "type": "int64_t",
                        "definition": [
                            "int64_t value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "shift",
                        "type": "unsigned",
                        "definition": [
                            "unsigned shift"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptx_update_codeword_history",
            "header": "",
            "params": [
                "struct aptx_channel *channel"
            ],
            "definition": "inline static void aptx_update_codeword_history(struct aptx_channel *channel)\n{\n  const int32_t cw = (((channel->quantize[0].quantized_sample & 3) << 0) + ((channel->quantize[1].quantized_sample & 2) << 1)) + ((channel->quantize[2].quantized_sample & 1) << 3);\n  channel->codeword_history = (cw << 8) + ((int32_t) (((uint32_t) channel->codeword_history) << 4));\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct aptx_channel",
                        "type": "struct aptx_channel *",
                        "definition": [
                            "struct aptx_channel *channel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cw",
                        "type": "const int32_t",
                        "definition": [
                            "const int32_t cw = (((channel->quantize[0].quantized_sample & 3) << 0) + ((channel->quantize[1].quantized_sample & 2) << 1)) + ((channel->quantize[2].quantized_sample & 1) << 3)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptx_generate_dither",
            "header": "",
            "params": [
                "struct aptx_channel *channel"
            ],
            "definition": "static void aptx_generate_dither(struct aptx_channel *channel)\n{\n  unsigned subband;\n  int64_t m;\n  int32_t d;\n  aptx_update_codeword_history(channel);\n  m = ((int64_t) 5184443) * (channel->codeword_history >> 7);\n  d = (int32_t) ((m * 4) + (m >> 22));\n  for (subband = 0; subband < 4; subband += 1)\n    channel->dither[subband] = (int32_t) (((uint32_t) d) << (23 - (5 * subband)));\n\n  channel->dither_parity = (d >> 25) & 1;\n}\n\n",
            "calle": [
                "aptx_update_codeword_history"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct aptx_channel",
                        "type": "struct aptx_channel *",
                        "definition": [
                            "struct aptx_channel *channel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "subband",
                        "type": "unsigned",
                        "definition": [
                            "unsigned subband"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m",
                        "type": "int64_t",
                        "definition": [
                            "int64_t m"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "int32_t",
                        "definition": [
                            "int32_t d"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptx_qmf_filter_signal_push",
            "header": "",
            "params": [
                "struct aptx_filter_signal *signal",
                "int32_t sample"
            ],
            "definition": "inline static void aptx_qmf_filter_signal_push(struct aptx_filter_signal *signal, int32_t sample)\n{\n  signal->buffer[signal->pos] = sample;\n  signal->buffer[signal->pos + 16] = sample;\n  signal->pos = (signal->pos + 1) & (16 - 1);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct aptx_filter_signal",
                        "type": "struct aptx_filter_signal *",
                        "definition": [
                            "struct aptx_filter_signal *signal"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample",
                        "type": "int32_t",
                        "definition": [
                            "int32_t sample"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptx_qmf_convolution",
            "header": "",
            "params": [
                "const struct aptx_filter_signal *signal",
                "const int32_t coeffs[16]",
                "unsigned shift"
            ],
            "definition": "inline static int32_t aptx_qmf_convolution(const struct aptx_filter_signal *signal, const int32_t coeffs[16], unsigned shift)\n{\n  const int32_t *sig = &signal->buffer[signal->pos];\n  int64_t e = 0;\n  unsigned i;\n  for (i = 0; i < 16; i += 1)\n    e += ((int64_t) sig[i]) * ((int64_t) coeffs[i]);\n\n  return rshift64_clip24(e, shift);\n}\n\n",
            "calle": [
                "rshift64_clip24"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct aptx_filter_signal",
                        "type": "const struct aptx_filter_signal *",
                        "definition": [
                            "const struct aptx_filter_signal *signal"
                        ]
                    },
                    {
                        "path": null,
                        "name": "coeffs",
                        "type": "const int32_t [16]",
                        "definition": [
                            "const int32_t coeffs[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "shift",
                        "type": "unsigned",
                        "definition": [
                            "unsigned shift"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sig",
                        "type": "const int32_t *",
                        "definition": [
                            "const int32_t *sig = &signal->buffer[signal->pos]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e",
                        "type": "int64_t",
                        "definition": [
                            "int64_t e = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned",
                        "definition": [
                            "unsigned i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptx_qmf_polyphase_analysis",
            "header": "",
            "params": [
                "struct aptx_filter_signal signal[2]",
                "const int32_t coeffs[2][16]",
                "unsigned shift",
                "const int32_t samples[2]",
                "int32_t *low_subband_output",
                "int32_t *high_subband_output"
            ],
            "definition": "inline static void aptx_qmf_polyphase_analysis(struct aptx_filter_signal signal[2], const int32_t coeffs[2][16], unsigned shift, const int32_t samples[2], int32_t *low_subband_output, int32_t *high_subband_output)\n{\n  int32_t subbands[2];\n  unsigned i;\n  for (i = 0; i < 2; i += 1)\n  {\n    aptx_qmf_filter_signal_push(&signal[i], samples[(2 - 1) - i]);\n    subbands[i] = aptx_qmf_convolution(&signal[i], coeffs[i], shift);\n  }\n\n  *low_subband_output = clip_intp2(subbands[0] + subbands[1], 23);\n  *high_subband_output = clip_intp2(subbands[0] - subbands[1], 23);\n}\n\n",
            "calle": [
                "aptx_qmf_convolution",
                "aptx_qmf_filter_signal_push",
                "clip_intp2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "signal",
                        "type": "struct aptx_filter_signal [2]",
                        "definition": [
                            "struct aptx_filter_signal signal[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "coeffs",
                        "type": "const int32_t [2][16]",
                        "definition": [
                            "const int32_t coeffs[2][16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "shift",
                        "type": "unsigned",
                        "definition": [
                            "unsigned shift"
                        ]
                    },
                    {
                        "path": null,
                        "name": "samples",
                        "type": "const int32_t [2]",
                        "definition": [
                            "const int32_t samples[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low_subband_output",
                        "type": "int32_t *",
                        "definition": [
                            "int32_t *low_subband_output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high_subband_output",
                        "type": "int32_t *",
                        "definition": [
                            "int32_t *high_subband_output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "subbands",
                        "type": "int32_t [2]",
                        "definition": [
                            "int32_t subbands[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned",
                        "definition": [
                            "unsigned i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptx_qmf_tree_analysis",
            "header": "",
            "params": [
                "struct aptx_QMF_analysis *qmf",
                "const int32_t samples[4]",
                "int32_t subband_samples[4]"
            ],
            "definition": "static void aptx_qmf_tree_analysis(struct aptx_QMF_analysis *qmf, const int32_t samples[4], int32_t subband_samples[4])\n{\n  int32_t intermediate_samples[4];\n  unsigned i;\n  for (i = 0; i < 2; i += 1)\n    aptx_qmf_polyphase_analysis(qmf->outer_filter_signal, aptx_qmf_outer_coeffs, 23, &samples[2 * i], &intermediate_samples[0 + i], &intermediate_samples[2 + i]);\n\n  for (i = 0; i < 2; i += 1)\n    aptx_qmf_polyphase_analysis(qmf->inner_filter_signal[i], aptx_qmf_inner_coeffs, 23, &intermediate_samples[2 * i], &subband_samples[(2 * i) + 0], &subband_samples[(2 * i) + 1]);\n\n}\n\n",
            "calle": [
                "aptx_qmf_polyphase_analysis"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct aptx_QMF_analysis",
                        "type": "struct aptx_QMF_analysis *",
                        "definition": [
                            "struct aptx_QMF_analysis *qmf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "samples",
                        "type": "const int32_t [4]",
                        "definition": [
                            "const int32_t samples[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "subband_samples",
                        "type": "int32_t [4]",
                        "definition": [
                            "int32_t subband_samples[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "intermediate_samples",
                        "type": "int32_t [4]",
                        "definition": [
                            "int32_t intermediate_samples[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned",
                        "definition": [
                            "unsigned i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aptx_qmf_outer_coeffs",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "aptx_qmf_inner_coeffs",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptx_qmf_polyphase_synthesis",
            "header": "",
            "params": [
                "struct aptx_filter_signal signal[2]",
                "const int32_t coeffs[2][16]",
                "unsigned shift",
                "int32_t low_subband_input",
                "int32_t high_subband_input",
                "int32_t samples[2]"
            ],
            "definition": "inline static void aptx_qmf_polyphase_synthesis(struct aptx_filter_signal signal[2], const int32_t coeffs[2][16], unsigned shift, int32_t low_subband_input, int32_t high_subband_input, int32_t samples[2])\n{\n  int32_t subbands[2];\n  unsigned i;\n  subbands[0] = low_subband_input + high_subband_input;\n  subbands[1] = low_subband_input - high_subband_input;\n  for (i = 0; i < 2; i += 1)\n  {\n    aptx_qmf_filter_signal_push(&signal[i], subbands[1 - i]);\n    samples[i] = aptx_qmf_convolution(&signal[i], coeffs[i], shift);\n  }\n\n}\n\n",
            "calle": [
                "aptx_qmf_convolution",
                "aptx_qmf_filter_signal_push"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "signal",
                        "type": "struct aptx_filter_signal [2]",
                        "definition": [
                            "struct aptx_filter_signal signal[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "coeffs",
                        "type": "const int32_t [2][16]",
                        "definition": [
                            "const int32_t coeffs[2][16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "shift",
                        "type": "unsigned",
                        "definition": [
                            "unsigned shift"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low_subband_input",
                        "type": "int32_t",
                        "definition": [
                            "int32_t low_subband_input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high_subband_input",
                        "type": "int32_t",
                        "definition": [
                            "int32_t high_subband_input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "samples",
                        "type": "int32_t [2]",
                        "definition": [
                            "int32_t samples[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "subbands",
                        "type": "int32_t [2]",
                        "definition": [
                            "int32_t subbands[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned",
                        "definition": [
                            "unsigned i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptx_qmf_tree_synthesis",
            "header": "",
            "params": [
                "struct aptx_QMF_analysis *qmf",
                "const int32_t subband_samples[4]",
                "int32_t samples[4]"
            ],
            "definition": "static void aptx_qmf_tree_synthesis(struct aptx_QMF_analysis *qmf, const int32_t subband_samples[4], int32_t samples[4])\n{\n  int32_t intermediate_samples[4];\n  unsigned i;\n  for (i = 0; i < 2; i += 1)\n    aptx_qmf_polyphase_synthesis(qmf->inner_filter_signal[i], aptx_qmf_inner_coeffs, 22, subband_samples[(2 * i) + 0], subband_samples[(2 * i) + 1], &intermediate_samples[2 * i]);\n\n  for (i = 0; i < 2; i += 1)\n    aptx_qmf_polyphase_synthesis(qmf->outer_filter_signal, aptx_qmf_outer_coeffs, 21, intermediate_samples[0 + i], intermediate_samples[2 + i], &samples[2 * i]);\n\n}\n\n",
            "calle": [
                "aptx_qmf_polyphase_synthesis"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct aptx_QMF_analysis",
                        "type": "struct aptx_QMF_analysis *",
                        "definition": [
                            "struct aptx_QMF_analysis *qmf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "subband_samples",
                        "type": "const int32_t [4]",
                        "definition": [
                            "const int32_t subband_samples[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "samples",
                        "type": "int32_t [4]",
                        "definition": [
                            "int32_t samples[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "intermediate_samples",
                        "type": "int32_t [4]",
                        "definition": [
                            "int32_t intermediate_samples[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned",
                        "definition": [
                            "unsigned i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aptx_qmf_inner_coeffs",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "aptx_qmf_outer_coeffs",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptx_bin_search",
            "header": "",
            "params": [
                "int32_t value",
                "int32_t factor",
                "const int32_t *intervals",
                "int nb_intervals"
            ],
            "definition": "inline static int32_t aptx_bin_search(int32_t value, int32_t factor, const int32_t *intervals, int nb_intervals)\n{\n  int32_t idx = 0;\n  int i;\n  for (i = nb_intervals >> 1; i > 0; i >>= 1)\n    if ((((int64_t) factor) * ((int64_t) intervals[idx + i])) <= (((int64_t) value) << 24))\n  {\n    idx += i;\n  }\n\n  return idx;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "value",
                        "type": "int32_t",
                        "definition": [
                            "int32_t value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "factor",
                        "type": "int32_t",
                        "definition": [
                            "int32_t factor"
                        ]
                    },
                    {
                        "path": null,
                        "name": "intervals",
                        "type": "const int32_t *",
                        "definition": [
                            "const int32_t *intervals"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nb_intervals",
                        "type": "int",
                        "definition": [
                            "int nb_intervals"
                        ]
                    },
                    {
                        "path": null,
                        "name": "idx",
                        "type": "int32_t",
                        "definition": [
                            "int32_t idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptx_quantize_difference",
            "header": "",
            "params": [
                "struct aptx_quantize *quantize",
                "int32_t sample_difference",
                "int32_t dither",
                "int32_t quantization_factor",
                "const struct aptx_tables *tables"
            ],
            "definition": "static void aptx_quantize_difference(struct aptx_quantize *quantize, int32_t sample_difference, int32_t dither, int32_t quantization_factor, const struct aptx_tables *tables)\n{\n  const int32_t *intervals = tables->quantize_intervals;\n  unsigned int intervals_idx = 0;\n  int32_t quantized_sample;\n  int32_t dithered_sample;\n  int32_t parity_change;\n  int32_t d;\n  int32_t mean;\n  int32_t interval;\n  int32_t inv;\n  int32_t sample_difference_abs;\n  int64_t error;\n  sample_difference_abs = sample_difference;\n  if (sample_difference_abs < 0)\n  {\n    sample_difference_abs = -sample_difference_abs;\n  }\n  if (sample_difference_abs > ((((int32_t) 1) << 23) - 1))\n  {\n    sample_difference_abs = (((int32_t) 1) << 23) - 1;\n  }\n  quantized_sample = aptx_bin_search(sample_difference_abs >> 4, quantization_factor, intervals, tables->tables_size);\n  d = rshift32_clip24((int32_t) ((((int64_t) dither) * ((int64_t) dither)) >> 32), 7) - (((int32_t) 1) << 23);\n  d = (int32_t) rshift64(((int64_t) d) * ((int64_t) tables->quantize_dither_factors[quantized_sample]), 23);\n  intervals_idx += quantized_sample;\n  mean = (intervals[1 + intervals_idx] + intervals[0 + intervals_idx]) / 2;\n  interval = (intervals[1 + intervals_idx] - intervals[0 + intervals_idx]) * ((-(sample_difference < 0)) | 1);\n  dithered_sample = rshift64_clip24((((int64_t) dither) * ((int64_t) interval)) + (((int64_t) clip_intp2(mean + d, 23)) << 32), 32);\n  error = (((int64_t) sample_difference_abs) << 20) - (((int64_t) dithered_sample) * ((int64_t) quantization_factor));\n  quantize->error = (int32_t) rshift64(error, 23);\n  if (quantize->error < 0)\n  {\n    quantize->error = -quantize->error;\n  }\n  parity_change = quantized_sample;\n  if (error < 0)\n  {\n    quantized_sample -= 1;\n  }\n  else\n    parity_change--;\n  parity_change -= 1;\n  inv = -(sample_difference < 0);\n  quantize->quantized_sample = quantized_sample ^ inv;\n  quantize->quantized_sample_parity_change = parity_change ^ inv;\n}\n\n",
            "calle": [
                "aptx_bin_search",
                "clip_intp2",
                "rshift32_clip24",
                "rshift64",
                "rshift64_clip24"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct aptx_quantize",
                        "type": "struct aptx_quantize *",
                        "definition": [
                            "struct aptx_quantize *quantize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_difference",
                        "type": "int32_t",
                        "definition": [
                            "int32_t sample_difference"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dither",
                        "type": "int32_t",
                        "definition": [
                            "int32_t dither"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quantization_factor",
                        "type": "int32_t",
                        "definition": [
                            "int32_t quantization_factor"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct aptx_tables",
                        "type": "const struct aptx_tables *",
                        "definition": [
                            "const struct aptx_tables *tables"
                        ]
                    },
                    {
                        "path": null,
                        "name": "intervals",
                        "type": "const int32_t *",
                        "definition": [
                            "const int32_t *intervals = tables->quantize_intervals"
                        ]
                    },
                    {
                        "path": null,
                        "name": "intervals_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int intervals_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quantized_sample",
                        "type": "int32_t",
                        "definition": [
                            "int32_t quantized_sample"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dithered_sample",
                        "type": "int32_t",
                        "definition": [
                            "int32_t dithered_sample"
                        ]
                    },
                    {
                        "path": null,
                        "name": "parity_change",
                        "type": "int32_t",
                        "definition": [
                            "int32_t parity_change"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "int32_t",
                        "definition": [
                            "int32_t d"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mean",
                        "type": "int32_t",
                        "definition": [
                            "int32_t mean"
                        ]
                    },
                    {
                        "path": null,
                        "name": "interval",
                        "type": "int32_t",
                        "definition": [
                            "int32_t interval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inv",
                        "type": "int32_t",
                        "definition": [
                            "int32_t inv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_difference_abs",
                        "type": "int32_t",
                        "definition": [
                            "int32_t sample_difference_abs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "error",
                        "type": "int64_t",
                        "definition": [
                            "int64_t error"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptx_encode_channel",
            "header": "",
            "params": [
                "struct aptx_channel *channel",
                "const int32_t samples[4]",
                "int hd"
            ],
            "definition": "static void aptx_encode_channel(struct aptx_channel *channel, const int32_t samples[4], int hd)\n{\n  int32_t subband_samples[4];\n  int32_t diff;\n  unsigned subband;\n  aptx_qmf_tree_analysis(&channel->qmf, samples, subband_samples);\n  aptx_generate_dither(channel);\n  for (subband = 0; subband < 4; subband += 1)\n  {\n    diff = clip_intp2(subband_samples[subband] - channel->prediction[subband].predicted_sample, 23);\n    aptx_quantize_difference(&channel->quantize[subband], diff, channel->dither[subband], channel->invert_quantize[subband].quantization_factor, &all_tables[hd][subband]);\n  }\n\n}\n\n",
            "calle": [
                "aptx_generate_dither",
                "aptx_qmf_tree_analysis",
                "aptx_quantize_difference",
                "clip_intp2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct aptx_channel",
                        "type": "struct aptx_channel *",
                        "definition": [
                            "struct aptx_channel *channel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "samples",
                        "type": "const int32_t [4]",
                        "definition": [
                            "const int32_t samples[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hd",
                        "type": "int",
                        "definition": [
                            "int hd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "subband_samples",
                        "type": "int32_t [4]",
                        "definition": [
                            "int32_t subband_samples[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff",
                        "type": "int32_t",
                        "definition": [
                            "int32_t diff"
                        ]
                    },
                    {
                        "path": null,
                        "name": "subband",
                        "type": "unsigned",
                        "definition": [
                            "unsigned subband"
                        ]
                    },
                    {
                        "path": null,
                        "name": "all_tables",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptx_decode_channel",
            "header": "",
            "params": [
                "struct aptx_channel *channel",
                "int32_t samples[4]"
            ],
            "definition": "static void aptx_decode_channel(struct aptx_channel *channel, int32_t samples[4])\n{\n  int32_t subband_samples[4];\n  unsigned subband;\n  for (subband = 0; subband < 4; subband += 1)\n    subband_samples[subband] = channel->prediction[subband].previous_reconstructed_sample;\n\n  aptx_qmf_tree_synthesis(&channel->qmf, subband_samples, samples);\n}\n\n",
            "calle": [
                "aptx_qmf_tree_synthesis"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct aptx_channel",
                        "type": "struct aptx_channel *",
                        "definition": [
                            "struct aptx_channel *channel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "samples",
                        "type": "int32_t [4]",
                        "definition": [
                            "int32_t samples[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "subband_samples",
                        "type": "int32_t [4]",
                        "definition": [
                            "int32_t subband_samples[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "subband",
                        "type": "unsigned",
                        "definition": [
                            "unsigned subband"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptx_invert_quantization",
            "header": "",
            "params": [
                "struct aptx_invert_quantize *invert_quantize",
                "int32_t quantized_sample",
                "int32_t dither",
                "const struct aptx_tables *tables"
            ],
            "definition": "static void aptx_invert_quantization(struct aptx_invert_quantize *invert_quantize, int32_t quantized_sample, int32_t dither, const struct aptx_tables *tables)\n{\n  int32_t qr;\n  int32_t idx;\n  int32_t shift;\n  int32_t factor_select;\n  idx = (quantized_sample ^ (-(quantized_sample < 0))) + 1;\n  qr = tables->quantize_intervals[idx] / 2;\n  if (quantized_sample < 0)\n  {\n    qr = -qr;\n  }\n  qr = rshift64_clip24((((int64_t) qr) * (((int64_t) 1) << 32)) + (((int64_t) dither) * ((int64_t) tables->invert_quantize_dither_factors[idx])), 32);\n  invert_quantize->reconstructed_difference = (int32_t) ((((int64_t) invert_quantize->quantization_factor) * ((int64_t) qr)) >> 19);\n  factor_select = 32620 * invert_quantize->factor_select;\n  factor_select = rshift32(factor_select + (tables->quantize_factor_select_offset[idx] * (1 << 15)), 15);\n  invert_quantize->factor_select = clip(factor_select, 0, tables->factor_max);\n  idx = (invert_quantize->factor_select & 0xFF) >> 3;\n  shift = (tables->factor_max - invert_quantize->factor_select) >> 8;\n  invert_quantize->quantization_factor = (quantization_factors[idx] << 11) >> shift;\n}\n\n",
            "calle": [
                "clip",
                "rshift32",
                "rshift64_clip24"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct aptx_invert_quantize",
                        "type": "struct aptx_invert_quantize *",
                        "definition": [
                            "struct aptx_invert_quantize *invert_quantize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quantized_sample",
                        "type": "int32_t",
                        "definition": [
                            "int32_t quantized_sample"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dither",
                        "type": "int32_t",
                        "definition": [
                            "int32_t dither"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct aptx_tables",
                        "type": "const struct aptx_tables *",
                        "definition": [
                            "const struct aptx_tables *tables"
                        ]
                    },
                    {
                        "path": null,
                        "name": "qr",
                        "type": "int32_t",
                        "definition": [
                            "int32_t qr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "idx",
                        "type": "int32_t",
                        "definition": [
                            "int32_t idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "shift",
                        "type": "int32_t",
                        "definition": [
                            "int32_t shift"
                        ]
                    },
                    {
                        "path": null,
                        "name": "factor_select",
                        "type": "int32_t",
                        "definition": [
                            "int32_t factor_select"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quantization_factors",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptx_reconstructed_differences_update",
            "header": "",
            "params": [
                "struct aptx_prediction *prediction",
                "int32_t reconstructed_difference",
                "int order"
            ],
            "definition": "static int32_t *aptx_reconstructed_differences_update(struct aptx_prediction *prediction, int32_t reconstructed_difference, int order)\n{\n  int32_t *rd1 = prediction->reconstructed_differences;\n  int32_t *rd2 = rd1 + order;\n  int p = prediction->pos;\n  rd1[p] = rd2[p];\n  prediction->pos = (p = (p + 1) % order);\n  rd2[p] = reconstructed_difference;\n  return &rd2[p];\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct aptx_prediction",
                        "type": "struct aptx_prediction *",
                        "definition": [
                            "struct aptx_prediction *prediction"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reconstructed_difference",
                        "type": "int32_t",
                        "definition": [
                            "int32_t reconstructed_difference"
                        ]
                    },
                    {
                        "path": null,
                        "name": "order",
                        "type": "int",
                        "definition": [
                            "int order"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rd1",
                        "type": "int32_t *",
                        "definition": [
                            "int32_t *rd1 = prediction->reconstructed_differences"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rd2",
                        "type": "int32_t *",
                        "definition": [
                            "int32_t *rd2 = rd1 + order"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "int",
                        "definition": [
                            "int p = prediction->pos"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptx_prediction_filtering",
            "header": "",
            "params": [
                "struct aptx_prediction *prediction",
                "int32_t reconstructed_difference",
                "int order"
            ],
            "definition": "static void aptx_prediction_filtering(struct aptx_prediction *prediction, int32_t reconstructed_difference, int order)\n{\n  int32_t reconstructed_sample;\n  int32_t predictor;\n  int32_t srd0;\n  int32_t srd;\n  int32_t *reconstructed_differences;\n  unsigned int reconstructed_differences_idx = 0;\n  int64_t predicted_difference = 0;\n  int i;\n  reconstructed_sample = clip_intp2(reconstructed_difference + prediction->predicted_sample, 23);\n  predictor = clip_intp2((int32_t) (((((int64_t) prediction->s_weight[0]) * ((int64_t) prediction->previous_reconstructed_sample)) + (((int64_t) prediction->s_weight[1]) * ((int64_t) reconstructed_sample))) >> 22), 23);\n  prediction->previous_reconstructed_sample = reconstructed_sample;\n  reconstructed_differences_idx = aptx_reconstructed_differences_update(prediction, reconstructed_difference, order);\n  srd0 = ((int32_t) ((reconstructed_difference > 0) - (reconstructed_difference < 0))) * (((int32_t) 1) << 23);\n  for (i = 0; i < order; i += 1)\n  {\n    srd = (reconstructed_differences[((-i) - 1) + reconstructed_differences_idx] >> 31) | 1;\n    prediction->d_weight[i] -= rshift32(prediction->d_weight[i] - (srd * srd0), 8);\n    predicted_difference += ((int64_t) reconstructed_differences[(-i) + reconstructed_differences_idx]) * ((int64_t) prediction->d_weight[i]);\n  }\n\n  prediction->predicted_difference = clip_intp2((int32_t) (predicted_difference >> 22), 23);\n  prediction->predicted_sample = clip_intp2(predictor + prediction->predicted_difference, 23);\n}\n\n",
            "calle": [
                "aptx_reconstructed_differences_update",
                "clip_intp2",
                "rshift32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct aptx_prediction",
                        "type": "struct aptx_prediction *",
                        "definition": [
                            "struct aptx_prediction *prediction"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reconstructed_difference",
                        "type": "int32_t",
                        "definition": [
                            "int32_t reconstructed_difference"
                        ]
                    },
                    {
                        "path": null,
                        "name": "order",
                        "type": "int",
                        "definition": [
                            "int order"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reconstructed_sample",
                        "type": "int32_t",
                        "definition": [
                            "int32_t reconstructed_sample"
                        ]
                    },
                    {
                        "path": null,
                        "name": "predictor",
                        "type": "int32_t",
                        "definition": [
                            "int32_t predictor"
                        ]
                    },
                    {
                        "path": null,
                        "name": "srd0",
                        "type": "int32_t",
                        "definition": [
                            "int32_t srd0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "srd",
                        "type": "int32_t",
                        "definition": [
                            "int32_t srd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reconstructed_differences",
                        "type": "int32_t *",
                        "definition": [
                            "int32_t *reconstructed_differences"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reconstructed_differences_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int reconstructed_differences_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "predicted_difference",
                        "type": "int64_t",
                        "definition": [
                            "int64_t predicted_difference = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptx_process_subband",
            "header": "",
            "params": [
                "struct aptx_invert_quantize *invert_quantize",
                "struct aptx_prediction *prediction",
                "int32_t quantized_sample",
                "int32_t dither",
                "const struct aptx_tables *tables"
            ],
            "definition": "static void aptx_process_subband(struct aptx_invert_quantize *invert_quantize, struct aptx_prediction *prediction, int32_t quantized_sample, int32_t dither, const struct aptx_tables *tables)\n{\n  int32_t sign;\n  int32_t same_sign[2];\n  int32_t weight[2];\n  int32_t sw1;\n  int32_t range;\n  aptx_invert_quantization(invert_quantize, quantized_sample, dither, tables);\n  sign = (invert_quantize->reconstructed_difference > (-prediction->predicted_difference)) - (invert_quantize->reconstructed_difference < (-prediction->predicted_difference));\n  same_sign[0] = sign * prediction->prev_sign[0];\n  same_sign[1] = sign * prediction->prev_sign[1];\n  prediction->prev_sign[0] = prediction->prev_sign[1];\n  prediction->prev_sign[1] = sign | 1;\n  range = 0x100000;\n  sw1 = rshift32((-same_sign[1]) * prediction->s_weight[1], 1);\n  sw1 = (clip(sw1, -range, range) & (~0xF)) * 16;\n  range = 0x300000;\n  weight[0] = ((254 * prediction->s_weight[0]) + (0x800000 * same_sign[0])) + sw1;\n  prediction->s_weight[0] = clip(rshift32(weight[0], 8), -range, range);\n  range = 0x3C0000 - prediction->s_weight[0];\n  weight[1] = (255 * prediction->s_weight[1]) + (0xC00000 * same_sign[1]);\n  prediction->s_weight[1] = clip(rshift32(weight[1], 8), -range, range);\n  aptx_prediction_filtering(prediction, invert_quantize->reconstructed_difference, tables->prediction_order);\n}\n\n",
            "calle": [
                "aptx_invert_quantization",
                "aptx_prediction_filtering",
                "clip",
                "rshift32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct aptx_invert_quantize",
                        "type": "struct aptx_invert_quantize *",
                        "definition": [
                            "struct aptx_invert_quantize *invert_quantize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct aptx_prediction",
                        "type": "struct aptx_prediction *",
                        "definition": [
                            "struct aptx_prediction *prediction"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quantized_sample",
                        "type": "int32_t",
                        "definition": [
                            "int32_t quantized_sample"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dither",
                        "type": "int32_t",
                        "definition": [
                            "int32_t dither"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct aptx_tables",
                        "type": "const struct aptx_tables *",
                        "definition": [
                            "const struct aptx_tables *tables"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sign",
                        "type": "int32_t",
                        "definition": [
                            "int32_t sign"
                        ]
                    },
                    {
                        "path": null,
                        "name": "same_sign",
                        "type": "int32_t [2]",
                        "definition": [
                            "int32_t same_sign[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "weight",
                        "type": "int32_t [2]",
                        "definition": [
                            "int32_t weight[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sw1",
                        "type": "int32_t",
                        "definition": [
                            "int32_t sw1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "range",
                        "type": "int32_t",
                        "definition": [
                            "int32_t range"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptx_invert_quantize_and_prediction",
            "header": "",
            "params": [
                "struct aptx_channel *channel",
                "int hd"
            ],
            "definition": "static void aptx_invert_quantize_and_prediction(struct aptx_channel *channel, int hd)\n{\n  unsigned subband;\n  for (subband = 0; subband < 4; subband += 1)\n    aptx_process_subband(&channel->invert_quantize[subband], &channel->prediction[subband], channel->quantize[subband].quantized_sample, channel->dither[subband], &all_tables[hd][subband]);\n\n}\n\n",
            "calle": [
                "aptx_process_subband"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct aptx_channel",
                        "type": "struct aptx_channel *",
                        "definition": [
                            "struct aptx_channel *channel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hd",
                        "type": "int",
                        "definition": [
                            "int hd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "subband",
                        "type": "unsigned",
                        "definition": [
                            "unsigned subband"
                        ]
                    },
                    {
                        "path": null,
                        "name": "all_tables",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptx_quantized_parity",
            "header": "",
            "params": [
                "const struct aptx_channel *channel"
            ],
            "definition": "static int32_t aptx_quantized_parity(const struct aptx_channel *channel)\n{\n  int32_t parity = channel->dither_parity;\n  unsigned subband;\n  for (subband = 0; subband < 4; subband += 1)\n    parity ^= channel->quantize[subband].quantized_sample;\n\n  return parity & 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct aptx_channel",
                        "type": "const struct aptx_channel *",
                        "definition": [
                            "const struct aptx_channel *channel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "parity",
                        "type": "int32_t",
                        "definition": [
                            "int32_t parity = channel->dither_parity"
                        ]
                    },
                    {
                        "path": null,
                        "name": "subband",
                        "type": "unsigned",
                        "definition": [
                            "unsigned subband"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptx_check_parity",
            "header": "",
            "params": [
                "const struct aptx_channel channels[NB_CHANNELS]",
                "uint8_t *sync_idx"
            ],
            "definition": "static int aptx_check_parity(const struct aptx_channel channels[NB_CHANNELS], uint8_t *sync_idx)\n{\n  const int32_t parity = aptx_quantized_parity(&channels[LEFT]) ^ aptx_quantized_parity(&channels[RIGHT]);\n  const int32_t eighth = (*sync_idx) == 7;\n  *sync_idx = ((*sync_idx) + 1) & 7;\n  return parity ^ eighth;\n}\n\n",
            "calle": [
                "aptx_quantized_parity"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "channels",
                        "type": "const struct aptx_channel [NB_CHANNELS]",
                        "definition": [
                            "const struct aptx_channel channels[NB_CHANNELS]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sync_idx",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *sync_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "parity",
                        "type": "const int32_t",
                        "definition": [
                            "const int32_t parity = aptx_quantized_parity(&channels[LEFT]) ^ aptx_quantized_parity(&channels[RIGHT])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "eighth",
                        "type": "const int32_t",
                        "definition": [
                            "const int32_t eighth = (*sync_idx) == 7"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptx_insert_sync",
            "header": "",
            "params": [
                "struct aptx_channel channels[NB_CHANNELS]",
                "uint8_t *sync_idx"
            ],
            "definition": "static void aptx_insert_sync(struct aptx_channel channels[NB_CHANNELS], uint8_t *sync_idx)\n{\n  unsigned i;\n  struct aptx_channel *c;\n  unsigned int c_idx = 0;\n  static const unsigned map[] = {1, 2, 0, 3};\n  struct aptx_quantize *min = &channels[NB_CHANNELS - 1].quantize[map[0]];\n  unsigned int min_idx = 0;\n  if (aptx_check_parity(channels, sync_idx))\n  {\n    for (c_idx = &channels[NB_CHANNELS - 1]; (&c[c_idx]) >= channels; c_idx -= 1)\n      for (i = 0; i < 4; i += 1)\n      if (c->quantize[map[i]].error < min->error)\n    {\n      min_idx = &c->quantize[map[i]];\n    }\n\n\n    min->quantized_sample = min->quantized_sample_parity_change;\n  }\n}\n\n",
            "calle": [
                "aptx_check_parity"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "channels",
                        "type": "struct aptx_channel [NB_CHANNELS]",
                        "definition": [
                            "struct aptx_channel channels[NB_CHANNELS]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sync_idx",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *sync_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned",
                        "definition": [
                            "unsigned i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct aptx_channel",
                        "type": "struct aptx_channel *",
                        "definition": [
                            "struct aptx_channel *c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int c_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "map",
                        "type": "const unsigned []",
                        "definition": [
                            "static const unsigned map[] = {1, 2, 0, 3}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct aptx_quantize",
                        "type": "struct aptx_quantize *",
                        "definition": [
                            "struct aptx_quantize *min = &channels[NB_CHANNELS - 1].quantize[map[0]]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int min_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptx_pack_codeword",
            "header": "",
            "params": [
                "const struct aptx_channel *channel"
            ],
            "definition": "static uint16_t aptx_pack_codeword(const struct aptx_channel *channel)\n{\n  const int32_t parity = aptx_quantized_parity(channel);\n  return (uint16_t) ((((((channel->quantize[3].quantized_sample & 0x06) | parity) << 13) | ((channel->quantize[2].quantized_sample & 0x03) << 11)) | ((channel->quantize[1].quantized_sample & 0x0F) << 7)) | ((channel->quantize[0].quantized_sample & 0x7F) << 0));\n}\n\n",
            "calle": [
                "aptx_quantized_parity"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct aptx_channel",
                        "type": "const struct aptx_channel *",
                        "definition": [
                            "const struct aptx_channel *channel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "parity",
                        "type": "const int32_t",
                        "definition": [
                            "const int32_t parity = aptx_quantized_parity(channel)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptxhd_pack_codeword",
            "header": "",
            "params": [
                "const struct aptx_channel *channel"
            ],
            "definition": "static uint32_t aptxhd_pack_codeword(const struct aptx_channel *channel)\n{\n  const int32_t parity = aptx_quantized_parity(channel);\n  return (uint32_t) ((((((channel->quantize[3].quantized_sample & 0x01E) | parity) << 19) | ((channel->quantize[2].quantized_sample & 0x00F) << 15)) | ((channel->quantize[1].quantized_sample & 0x03F) << 9)) | ((channel->quantize[0].quantized_sample & 0x1FF) << 0));\n}\n\n",
            "calle": [
                "aptx_quantized_parity"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct aptx_channel",
                        "type": "const struct aptx_channel *",
                        "definition": [
                            "const struct aptx_channel *channel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "parity",
                        "type": "const int32_t",
                        "definition": [
                            "const int32_t parity = aptx_quantized_parity(channel)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptx_unpack_codeword",
            "header": "",
            "params": [
                "struct aptx_channel *channel",
                "uint16_t codeword"
            ],
            "definition": "static void aptx_unpack_codeword(struct aptx_channel *channel, uint16_t codeword)\n{\n  channel->quantize[0].quantized_sample = sign_extend(codeword >> 0, 7);\n  channel->quantize[1].quantized_sample = sign_extend(codeword >> 7, 4);\n  channel->quantize[2].quantized_sample = sign_extend(codeword >> 11, 2);\n  channel->quantize[3].quantized_sample = sign_extend(codeword >> 13, 3);\n  channel->quantize[3].quantized_sample = (channel->quantize[3].quantized_sample & (~1)) | aptx_quantized_parity(channel);\n}\n\n",
            "calle": [
                "aptx_quantized_parity",
                "sign_extend"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct aptx_channel",
                        "type": "struct aptx_channel *",
                        "definition": [
                            "struct aptx_channel *channel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "codeword",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t codeword"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptxhd_unpack_codeword",
            "header": "",
            "params": [
                "struct aptx_channel *channel",
                "uint32_t codeword"
            ],
            "definition": "static void aptxhd_unpack_codeword(struct aptx_channel *channel, uint32_t codeword)\n{\n  channel->quantize[0].quantized_sample = sign_extend((int32_t) (codeword >> 0), 9);\n  channel->quantize[1].quantized_sample = sign_extend((int32_t) (codeword >> 9), 6);\n  channel->quantize[2].quantized_sample = sign_extend((int32_t) (codeword >> 15), 4);\n  channel->quantize[3].quantized_sample = sign_extend((int32_t) (codeword >> 19), 5);\n  channel->quantize[3].quantized_sample = (channel->quantize[3].quantized_sample & (~1)) | aptx_quantized_parity(channel);\n}\n\n",
            "calle": [
                "aptx_quantized_parity",
                "sign_extend"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct aptx_channel",
                        "type": "struct aptx_channel *",
                        "definition": [
                            "struct aptx_channel *channel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "codeword",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t codeword"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptx_encode_samples",
            "header": "",
            "params": [
                "struct aptx_context *ctx",
                "int32_t samples[NB_CHANNELS][4]",
                "uint8_t *output"
            ],
            "definition": "static void aptx_encode_samples(struct aptx_context *ctx, int32_t samples[NB_CHANNELS][4], uint8_t *output)\n{\n  unsigned channel;\n  for (channel = 0; channel < NB_CHANNELS; channel += 1)\n    aptx_encode_channel(&ctx->channels[channel], samples[channel], ctx->hd);\n\n  aptx_insert_sync(ctx->channels, &ctx->sync_idx);\n  for (channel = 0; channel < NB_CHANNELS; channel += 1)\n  {\n    aptx_invert_quantize_and_prediction(&ctx->channels[channel], ctx->hd);\n    if (ctx->hd)\n    {\n      uint32_t codeword = aptxhd_pack_codeword(&ctx->channels[channel]);\n      output[(3 * channel) + 0] = (uint8_t) ((codeword >> 16) & 0xFF);\n      output[(3 * channel) + 1] = (uint8_t) ((codeword >> 8) & 0xFF);\n      output[(3 * channel) + 2] = (uint8_t) ((codeword >> 0) & 0xFF);\n    }\n    else\n    {\n      uint16_t codeword = aptx_pack_codeword(&ctx->channels[channel]);\n      output[(2 * channel) + 0] = (uint8_t) ((codeword >> 8) & 0xFF);\n      output[(2 * channel) + 1] = (uint8_t) ((codeword >> 0) & 0xFF);\n    }\n  }\n\n}\n\n",
            "calle": [
                "aptx_encode_channel",
                "aptx_insert_sync",
                "aptx_invert_quantize_and_prediction",
                "aptx_pack_codeword",
                "aptxhd_pack_codeword"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct aptx_context",
                        "type": "struct aptx_context *",
                        "definition": [
                            "struct aptx_context *ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "samples",
                        "type": "int32_t [NB_CHANNELS][4]",
                        "definition": [
                            "int32_t samples[NB_CHANNELS][4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "channel",
                        "type": "unsigned",
                        "definition": [
                            "unsigned channel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "codeword",
                        "type": "uint32_t",
                        "definition": [
                            "uint16_t codeword = aptx_pack_codeword(&ctx->channels[channel])",
                            "uint32_t codeword = aptxhd_pack_codeword(&ctx->channels[channel])"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptx_decode_samples",
            "header": "",
            "params": [
                "struct aptx_context *ctx",
                "const uint8_t *input",
                "int32_t samples[NB_CHANNELS][4]"
            ],
            "definition": "static int aptx_decode_samples(struct aptx_context *ctx, const uint8_t *input, int32_t samples[NB_CHANNELS][4])\n{\n  unsigned channel;\n  int ret;\n  for (channel = 0; channel < NB_CHANNELS; channel += 1)\n  {\n    aptx_generate_dither(&ctx->channels[channel]);\n    if (ctx->hd)\n    {\n      aptxhd_unpack_codeword(&ctx->channels[channel], ((((uint32_t) input[(3 * channel) + 0]) << 16) | (((uint32_t) input[(3 * channel) + 1]) << 8)) | (((uint32_t) input[(3 * channel) + 2]) << 0));\n    }\n    else\n      aptx_unpack_codeword(&ctx->channels[channel], (uint16_t) ((((uint16_t) input[(2 * channel) + 0]) << 8) | (((uint16_t) input[(2 * channel) + 1]) << 0)));\n    aptx_invert_quantize_and_prediction(&ctx->channels[channel], ctx->hd);\n  }\n\n  ret = aptx_check_parity(ctx->channels, &ctx->sync_idx);\n  for (channel = 0; channel < NB_CHANNELS; channel += 1)\n    aptx_decode_channel(&ctx->channels[channel], samples[channel]);\n\n  return ret;\n}\n\n",
            "calle": [
                "aptx_check_parity",
                "aptx_decode_channel",
                "aptx_generate_dither",
                "aptx_invert_quantize_and_prediction",
                "aptx_unpack_codeword",
                "aptxhd_unpack_codeword"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct aptx_context",
                        "type": "struct aptx_context *",
                        "definition": [
                            "struct aptx_context *ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "samples",
                        "type": "int32_t [NB_CHANNELS][4]",
                        "definition": [
                            "int32_t samples[NB_CHANNELS][4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "channel",
                        "type": "unsigned",
                        "definition": [
                            "unsigned channel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "aptx_reset_decode_sync",
            "header": "",
            "params": [
                "struct aptx_context *ctx"
            ],
            "definition": "static void aptx_reset_decode_sync(struct aptx_context *ctx)\n{\n  const size_t decode_dropped = ctx->decode_dropped;\n  const size_t decode_sync_packets = ctx->decode_sync_packets;\n  const uint8_t decode_sync_buffer_len = ctx->decode_sync_buffer_len;\n  unsigned char decode_sync_buffer[6];\n  unsigned i;\n  for (i = 0; i < 6; i += 1)\n    decode_sync_buffer[i] = ctx->decode_sync_buffer[i];\n\n  aptx_reset(ctx);\n  for (i = 0; i < 6; i += 1)\n    ctx->decode_sync_buffer[i] = decode_sync_buffer[i];\n\n  ctx->decode_sync_buffer_len = decode_sync_buffer_len;\n  ctx->decode_sync_packets = decode_sync_packets;\n  ctx->decode_dropped = decode_dropped;\n}\n\n",
            "calle": [
                "aptx_reset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct aptx_context",
                        "type": "struct aptx_context *",
                        "definition": [
                            "struct aptx_context *ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "decode_dropped",
                        "type": "const size_t",
                        "definition": [
                            "const size_t decode_dropped = ctx->decode_dropped"
                        ]
                    },
                    {
                        "path": null,
                        "name": "decode_sync_packets",
                        "type": "const size_t",
                        "definition": [
                            "const size_t decode_sync_packets = ctx->decode_sync_packets"
                        ]
                    },
                    {
                        "path": null,
                        "name": "decode_sync_buffer_len",
                        "type": "const uint8_t",
                        "definition": [
                            "const uint8_t decode_sync_buffer_len = ctx->decode_sync_buffer_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "decode_sync_buffer",
                        "type": "unsigned char [6]",
                        "definition": [
                            "unsigned char decode_sync_buffer[6]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned",
                        "definition": [
                            "unsigned i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_aptx_decode_sync_1",
            "header": "",
            "params": [
                "const size_t * const sample_size_ref",
                "size_t * const processed_step_ref",
                "size_t * const ipos_ref",
                "size_t * const opos_ref",
                "size_t * const i_ref",
                "struct aptx_context * const ctx",
                "const unsigned char * const input",
                "unsigned char * const output",
                "size_t output_size",
                "int * const synced",
                "size_t * const dropped",
                "size_t written_step"
            ],
            "definition": "void helper_aptx_decode_sync_1(const size_t * const sample_size_ref, size_t * const processed_step_ref, size_t * const ipos_ref, size_t * const opos_ref, size_t * const i_ref, struct aptx_context * const ctx, const unsigned char * const input, unsigned char * const output, size_t output_size, int * const synced, size_t * const dropped, size_t written_step)\n{\n  const size_t sample_size = *sample_size_ref;\n  size_t processed_step = *processed_step_ref;\n  size_t ipos = *ipos_ref;\n  size_t opos = *opos_ref;\n  size_t i = *i_ref;\n  ctx->decode_sync_buffer[sample_size - 1] = input[ipos];\n  ipos += 1;\n  processed_step = aptx_decode(ctx, ctx->decode_sync_buffer, sample_size, output + opos, output_size - opos, &written_step);\n  opos += written_step;\n  if ((ctx->decode_dropped > 0) && (processed_step == sample_size))\n  {\n    helper_helper_aptx_decode_sync_1_1(ctx, dropped, processed_step);\n  }\n  if (processed_step < sample_size)\n  {\n    aptx_reset_decode_sync(ctx);\n    *synced = 0;\n    ctx->decode_dropped++;\n    ctx->decode_sync_packets = 0;\n    for (i = 0; i < (sample_size - 1); i++)\n      ctx->decode_sync_buffer[i] = ctx->decode_sync_buffer[i + 1];\n\n  }\n  else\n  {\n    if (ctx->decode_dropped == 0)\n      *synced = 1;\n    ctx->decode_sync_buffer_len = 0;\n  }\n  *sample_size_ref = sample_size;\n  *processed_step_ref = processed_step;\n  *ipos_ref = ipos;\n  *opos_ref = opos;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "aptx_decode",
                "aptx_reset_decode_sync",
                "helper_helper_aptx_decode_sync_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "sample_size_ref",
                        "type": "const size_t * const",
                        "definition": [
                            "const size_t * const sample_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "processed_step_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const processed_step_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ipos_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const ipos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opos_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const opos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct aptx_context",
                        "type": "struct aptx_context * const",
                        "definition": [
                            "struct aptx_context * const ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_size",
                        "type": "size_t",
                        "definition": [
                            "size_t output_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "synced",
                        "type": "int * const",
                        "definition": [
                            "int * const synced"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dropped",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const dropped"
                        ]
                    },
                    {
                        "path": null,
                        "name": "written_step",
                        "type": "size_t",
                        "definition": [
                            "size_t written_step"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_size",
                        "type": "const size_t",
                        "definition": [
                            "const size_t sample_size = *sample_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "processed_step",
                        "type": "size_t",
                        "definition": [
                            "size_t processed_step = *processed_step_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ipos",
                        "type": "size_t",
                        "definition": [
                            "size_t ipos = *ipos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opos",
                        "type": "size_t",
                        "definition": [
                            "size_t opos = *opos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_aptx_decode_sync_2",
            "header": "",
            "params": [
                "size_t * const input_size_step_ref",
                "size_t * const processed_step_ref",
                "size_t * const ipos_ref",
                "size_t * const opos_ref",
                "struct aptx_context * const ctx",
                "const unsigned char * const input",
                "size_t input_size",
                "unsigned char * const output",
                "size_t output_size",
                "int * const synced",
                "size_t * const dropped",
                "const size_t sample_size",
                "size_t written_step"
            ],
            "definition": "void helper_aptx_decode_sync_2(size_t * const input_size_step_ref, size_t * const processed_step_ref, size_t * const ipos_ref, size_t * const opos_ref, struct aptx_context * const ctx, const unsigned char * const input, size_t input_size, unsigned char * const output, size_t output_size, int * const synced, size_t * const dropped, const size_t sample_size, size_t written_step)\n{\n  size_t input_size_step = *input_size_step_ref;\n  size_t processed_step = *processed_step_ref;\n  size_t ipos = *ipos_ref;\n  size_t opos = *opos_ref;\n  input_size_step = (((((output_size - opos) / 3) * NB_CHANNELS) * 4) + ctx->decode_skip_leading) * sample_size;\n  if (input_size_step > (((input_size - ipos) / sample_size) * sample_size))\n  {\n    input_size_step = ((input_size - ipos) / sample_size) * sample_size;\n  }\n  if ((input_size_step > ((((90 + 3) / 4) - ctx->decode_sync_packets) * sample_size)) && (ctx->decode_dropped > 0))\n  {\n    input_size_step = (((90 + 3) / 4) - ctx->decode_sync_packets) * sample_size;\n  }\n  processed_step = aptx_decode(ctx, input + ipos, input_size_step, output + opos, output_size - opos, &written_step);\n  ipos += processed_step;\n  opos += written_step;\n  if ((ctx->decode_dropped > 0) && ((processed_step / sample_size) > 0))\n  {\n    helper_helper_aptx_decode_sync_2_1(ctx, dropped, sample_size, processed_step);\n  }\n  if (processed_step < input_size_step)\n  {\n    aptx_reset_decode_sync(ctx);\n    *synced = 0;\n    ipos += 1;\n    ctx->decode_dropped += 1;\n    ctx->decode_sync_packets = 0;\n  }\n  else\n    if (ctx->decode_dropped == 0)\n  {\n    *synced = 1;\n  }\n  *input_size_step_ref = input_size_step;\n  *processed_step_ref = processed_step;\n  *ipos_ref = ipos;\n  *opos_ref = opos;\n}\n\n",
            "calle": [
                "aptx_decode",
                "aptx_reset_decode_sync",
                "helper_helper_aptx_decode_sync_2_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "input_size_step_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const input_size_step_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "processed_step_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const processed_step_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ipos_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const ipos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opos_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const opos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct aptx_context",
                        "type": "struct aptx_context * const",
                        "definition": [
                            "struct aptx_context * const ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_size",
                        "type": "size_t",
                        "definition": [
                            "size_t input_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_size",
                        "type": "size_t",
                        "definition": [
                            "size_t output_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "synced",
                        "type": "int * const",
                        "definition": [
                            "int * const synced"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dropped",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const dropped"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_size",
                        "type": "const size_t",
                        "definition": [
                            "const size_t sample_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "written_step",
                        "type": "size_t",
                        "definition": [
                            "size_t written_step"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_size_step",
                        "type": "size_t",
                        "definition": [
                            "size_t input_size_step = *input_size_step_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "processed_step",
                        "type": "size_t",
                        "definition": [
                            "size_t processed_step = *processed_step_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ipos",
                        "type": "size_t",
                        "definition": [
                            "size_t ipos = *ipos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opos",
                        "type": "size_t",
                        "definition": [
                            "size_t opos = *opos_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_aptx_decode_sync_1_1",
            "header": "",
            "params": [
                "struct aptx_context * const ctx",
                "size_t * const dropped",
                "size_t processed_step"
            ],
            "definition": "void helper_helper_aptx_decode_sync_1_1(struct aptx_context * const ctx, size_t * const dropped, size_t processed_step)\n{\n  ctx->decode_dropped += processed_step;\n  ctx->decode_sync_packets += 1;\n  if (ctx->decode_sync_packets >= ((90 + 3) / 4))\n  {\n    *dropped += ctx->decode_dropped;\n    ctx->decode_dropped = 0;\n    ctx->decode_sync_packets = 0;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct aptx_context",
                        "type": "struct aptx_context * const",
                        "definition": [
                            "struct aptx_context * const ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dropped",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const dropped"
                        ]
                    },
                    {
                        "path": null,
                        "name": "processed_step",
                        "type": "size_t",
                        "definition": [
                            "size_t processed_step"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_aptx_decode_sync_2_1",
            "header": "",
            "params": [
                "struct aptx_context * const ctx",
                "size_t * const dropped",
                "const size_t sample_size",
                "size_t processed_step"
            ],
            "definition": "void helper_helper_aptx_decode_sync_2_1(struct aptx_context * const ctx, size_t * const dropped, const size_t sample_size, size_t processed_step)\n{\n  ctx->decode_dropped += processed_step;\n  ctx->decode_sync_packets += processed_step / sample_size;\n  if (ctx->decode_sync_packets >= ((90 + 3) / 4))\n  {\n    *dropped += ctx->decode_dropped;\n    ctx->decode_dropped = 0;\n    ctx->decode_sync_packets = 0;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct aptx_context",
                        "type": "struct aptx_context * const",
                        "definition": [
                            "struct aptx_context * const ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dropped",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const dropped"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_size",
                        "type": "const size_t",
                        "definition": [
                            "const size_t sample_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "processed_step",
                        "type": "size_t",
                        "definition": [
                            "size_t processed_step"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#openaptxenc",
            "header": "",
            "params": [
                "int argc",
                "char *argv[]"
            ],
            "definition": "int main(int argc, char *argv[])\n{\n  int i;\n  int hd;\n  int ret;\n  size_t length;\n  size_t processed;\n  size_t written;\n  struct aptx_context *ctx;\n  unsigned int ctx_idx = 0;\n  hd = 0;\n  for (i = 1; i < argc; i += 1)\n  {\n    helper_main_2(&hd, argv, i);\n  }\n\n  ctx_idx = aptx_init(hd);\n  if (!(&ctx[ctx_idx]))\n  {\n    fprintf(stderr, \"%s: Cannot initialize aptX encoder\\n\", argv[0]);\n    return 1;\n  }\n  ret = 0;\n  while (!feof(stdin))\n  {\n    helper_main_1(&ret, &length, &processed, argv, written, ctx);\n  }\n\n  if (aptx_encode_finish(ctx, output_buffer, sizeof(output_buffer), &written))\n  {\n    if (fwrite(output_buffer, 1, written, stdout) != written)\n    {\n      fprintf(stderr, \"%s: aptX encoding failed to write encoded data\\n\", argv[0]);\n      ret = 1;\n    }\n  }\n  aptx_finish(ctx);\n  return ret;\n}\n\n",
            "calle": [
                "aptx_encode_finish",
                "aptx_finish",
                "aptx_init",
                "feof",
                "fprintf",
                "fwrite",
                "helper_main_1",
                "helper_main_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char *[]",
                        "definition": [
                            "char *argv[]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hd",
                        "type": "int",
                        "definition": [
                            "int hd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "processed",
                        "type": "size_t",
                        "definition": [
                            "size_t processed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "written",
                        "type": "size_t",
                        "definition": [
                            "size_t written"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct aptx_context",
                        "type": "struct aptx_context *",
                        "definition": [
                            "struct aptx_context *ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ctx_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ctx_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_buffer",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_main_1",
            "header": "",
            "params": [
                "int * const ret_ref",
                "size_t * const length_ref",
                "size_t * const processed_ref",
                "char *argv[]",
                "size_t written",
                "struct aptx_context * const ctx"
            ],
            "definition": "void helper_main_1(int * const ret_ref, size_t * const length_ref, size_t * const processed_ref, char *argv[], size_t written, struct aptx_context * const ctx)\n{\n  int ret = *ret_ref;\n  size_t length = *length_ref;\n  size_t processed = *processed_ref;\n  length = fread(input_buffer, 1, sizeof(input_buffer), stdin);\n  if (ferror(stdin))\n  {\n    fprintf(stderr, \"%s: aptX encoding failed to read input data\\n\", argv[0]);\n    ret = 1;\n  }\n  if (length == 0)\n  {\n    break;\n  }\n  processed = aptx_encode(ctx, input_buffer, length, output_buffer, sizeof(output_buffer), &written);\n  if (processed != length)\n  {\n    fprintf(stderr, \"%s: aptX encoding stopped in the middle of the sample, dropped %lu byte%s\\n\", argv[0], (unsigned long) (length - processed), ((length - processed) != 1) ? (\"s\") : (\"\"));\n    ret = 1;\n  }\n  if (fwrite(output_buffer, 1, written, stdout) != written)\n  {\n    fprintf(stderr, \"%s: aptX encoding failed to write encoded data\\n\", argv[0]);\n    ret = 1;\n    break;\n  }\n  if (processed != length)\n  {\n    break;\n  }\n  *ret_ref = ret;\n  *length_ref = length;\n  *processed_ref = processed;\n}\n\n",
            "calle": [
                "aptx_encode",
                "ferror",
                "fprintf",
                "fread",
                "fwrite"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const length_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "processed_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const processed_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char *[]",
                        "definition": [
                            "char *argv[]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "written",
                        "type": "size_t",
                        "definition": [
                            "size_t written"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct aptx_context",
                        "type": "struct aptx_context * const",
                        "definition": [
                            "struct aptx_context * const ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = *ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length = *length_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "processed",
                        "type": "size_t",
                        "definition": [
                            "size_t processed = *processed_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_buffer",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "output_buffer",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_main_2",
            "header": "",
            "params": [
                "int * const hd_ref",
                "char *argv[]",
                "int i"
            ],
            "definition": "int helper_main_2(int * const hd_ref, char *argv[], int i)\n{\n  int hd = *hd_ref;\n  if ((strcmp(argv[i], \"-h\") == 0) || (strcmp(argv[i], \"--help\") == 0))\n  {\n    helper_helper_main_2_1(argv);\n  }\n  else\n    if (strcmp(argv[i], \"--hd\") == 0)\n  {\n    hd = 1;\n  }\n  else\n  {\n    fprintf(stderr, \"%s: Invalid option %s\\n\", argv[0], argv[i]);\n    return 1;\n  }\n  *hd_ref = hd;\n}\n\n",
            "calle": [
                "fprintf",
                "helper_helper_main_2_1",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "hd_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const hd_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char *[]",
                        "definition": [
                            "char *argv[]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hd",
                        "type": "int",
                        "definition": [
                            "int hd = *hd_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_main_2_1",
            "header": "",
            "params": [
                "char *argv[]"
            ],
            "definition": "int helper_helper_main_2_1(char *argv[])\n{\n  fprintf(stderr, \"aptX encoder utility %d.%d.%d (using libopenaptx %d.%d.%d)\\n\", 0, 2, 1, aptx_major, aptx_minor, aptx_patch);\n  fprintf(stderr, \"\\n\");\n  fprintf(stderr, \"This utility encodes a raw 24 bit signed stereo\\n\");\n  fprintf(stderr, \"samples from stdin to aptX or aptX HD on stdout\\n\");\n  fprintf(stderr, \"\\n\");\n  fprintf(stderr, \"Usage:\\n\");\n  fprintf(stderr, \"        %s [options]\\n\", argv[0]);\n  fprintf(stderr, \"\\n\");\n  fprintf(stderr, \"Options:\\n\");\n  fprintf(stderr, \"        -h, --help   Display this help\\n\");\n  fprintf(stderr, \"        --hd         Encode to aptX HD\\n\");\n  fprintf(stderr, \"\\n\");\n  fprintf(stderr, \"Examples:\\n\");\n  fprintf(stderr, \"\\n\");\n  fprintf(stderr, \"        %s < sample.s24le > sample.aptx\\n\", argv[0]);\n  fprintf(stderr, \"\\n\");\n  fprintf(stderr, \"        %s --hd < sample.s24le > sample.aptxhd\\n\", argv[0]);\n  fprintf(stderr, \"\\n\");\n  fprintf(stderr, \"        sox sample.wav -t raw -r 44.1k -L -e s -b 24 -c 2 - | %s > sample.aptx\\n\", argv[0]);\n  return 1;\n}\n\n",
            "calle": [
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char *[]",
                        "definition": [
                            "char *argv[]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aptx_major",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "aptx_minor",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "aptx_patch",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#openaptxdec",
            "header": "",
            "params": [
                "int argc",
                "char *argv[]"
            ],
            "definition": "int main(int argc, char *argv[])\n{\n  int i;\n  int hd;\n  int ret;\n  size_t length;\n  size_t processed;\n  size_t written;\n  size_t dropped;\n  int synced;\n  int syncing;\n  struct aptx_context *ctx;\n  unsigned int ctx_idx = 0;\n  hd = 0;\n  for (i = 1; i < argc; i += 1)\n  {\n    if ((strcmp(argv[i], \"-h\") == 0) || (strcmp(argv[i], \"--help\") == 0))\n    {\n      fprintf(stderr, \"aptX decoder utility %d.%d.%d (using libopenaptx %d.%d.%d)\\n\", 0, 2, 1, aptx_major, aptx_minor, aptx_patch);\n      fprintf(stderr, \"\\n\");\n      fprintf(stderr, \"This utility decodes aptX or aptX HD audio stream\\n\");\n      fprintf(stderr, \"from stdin to a raw 24 bit signed stereo on stdout\\n\");\n      fprintf(stderr, \"\\n\");\n      fprintf(stderr, \"When input is damaged it tries to synchronize and recover\\n\");\n      fprintf(stderr, \"\\n\");\n      fprintf(stderr, \"Non-zero return value indicates that input was damaged\\n\");\n      fprintf(stderr, \"and some bytes from input aptX audio stream were dropped\\n\");\n      fprintf(stderr, \"\\n\");\n      fprintf(stderr, \"Usage:\\n\");\n      fprintf(stderr, \"        %s [options]\\n\", argv[0]);\n      fprintf(stderr, \"\\n\");\n      fprintf(stderr, \"Options:\\n\");\n      fprintf(stderr, \"        -h, --help   Display this help\\n\");\n      fprintf(stderr, \"        --hd         Decode from aptX HD\\n\");\n      fprintf(stderr, \"\\n\");\n      fprintf(stderr, \"Examples:\\n\");\n      fprintf(stderr, \"\\n\");\n      fprintf(stderr, \"        %s < sample.aptx > sample.s24le\\n\", argv[0]);\n      fprintf(stderr, \"\\n\");\n      fprintf(stderr, \"        %s --hd < sample.aptxhd > sample.s24le\\n\", argv[0]);\n      fprintf(stderr, \"\\n\");\n      fprintf(stderr, \"        %s < sample.aptx | play -t raw -r 44.1k -L -e s -b 24 -c 2 -\\n\", argv[0]);\n      return 1;\n    }\n    else\n      if (strcmp(argv[i], \"--hd\") == 0)\n    {\n      hd = 1;\n    }\n    else\n    {\n      fprintf(stderr, \"%s: Invalid option %s\\n\", argv[0], argv[i]);\n      return 1;\n    }\n  }\n\n  ctx_idx = aptx_init(hd);\n  if (!(&ctx[ctx_idx]))\n  {\n    fprintf(stderr, \"%s: Cannot initialize aptX decoder\\n\", argv[0]);\n    return 1;\n  }\n  length = fread(input_buffer, 1, 6, stdin);\n  if ((length >= 4) && (memcmp(input_buffer, \"\\x4b\\xbf\\x4b\\xbf\", 4) == 0))\n  {\n    if (hd)\n    {\n      fprintf(stderr, \"%s: Input looks like start of aptX audio stream (not aptX HD), try without --hd\\n\", argv[0]);\n    }\n  }\n  else\n    if ((length >= 6) && (memcmp(input_buffer, \"\\x73\\xbe\\xff\\x73\\xbe\\xff\", 6) == 0))\n  {\n    if (!hd)\n    {\n      fprintf(stderr, \"%s: Input looks like start of aptX HD audio stream, try with --hd\\n\", argv[0]);\n    }\n  }\n  else\n  {\n    if ((length >= 4) && (memcmp(input_buffer, \"\\x6b\\xbf\\x6b\\xbf\", 4) == 0))\n    {\n      fprintf(stderr, \"%s: Input looks like start of standard aptX audio stream, which is not supported yet\\n\", argv[0]);\n    }\n    else\n      fprintf(stderr, \"%s: Input does not look like start of aptX nor aptX HD audio stream\\n\", argv[0]);\n  }\n  ret = 0;\n  syncing = 0;\n  while (length > 0)\n  {\n    processed = aptx_decode_sync(ctx, input_buffer, length, output_buffer, sizeof(output_buffer), &written, &synced, &dropped);\n    if (!synced)\n    {\n      if (!syncing)\n      {\n        fprintf(stderr, \"%s: aptX decoding failed, synchronizing\\n\", argv[0]);\n        syncing = 1;\n        ret = 1;\n      }\n      if (dropped)\n      {\n        fprintf(stderr, \"%s: aptX synchronization successful, dropped %lu byte%s\\n\", argv[0], (unsigned long) dropped, (dropped != 1) ? (\"s\") : (\"\"));\n        syncing = 0;\n        ret = 1;\n      }\n      if (!syncing)\n      {\n        fprintf(stderr, \"%s: aptX decoding failed, synchronizing\\n\", argv[0]);\n        syncing = 1;\n        ret = 1;\n      }\n    }\n    else\n    {\n      if (dropped)\n      {\n        if (!syncing)\n        {\n          fprintf(stderr, \"%s: aptX decoding failed, synchronizing\\n\", argv[0]);\n        }\n        fprintf(stderr, \"%s: aptX synchronization successful, dropped %lu byte%s\\n\", argv[0], (unsigned long) dropped, (dropped != 1) ? (\"s\") : (\"\"));\n        syncing = 0;\n        ret = 1;\n      }\n      else\n        if (syncing)\n      {\n        fprintf(stderr, \"%s: aptX synchronization successful\\n\", argv[0]);\n        syncing = 0;\n        ret = 1;\n      }\n    }\n    if (processed != length)\n    {\n      fprintf(stderr, \"%s: aptX decoding failed\\n\", argv[0]);\n      ret = 1;\n      break;\n    }\n    if (!feof(stdin))\n    {\n      length = fread(input_buffer, 1, sizeof(input_buffer), stdin);\n      if (ferror(stdin))\n      {\n        fprintf(stderr, \"%s: aptX decoding failed to read input data\\n\", argv[0]);\n        ret = 1;\n        length = 0;\n      }\n    }\n    else\n    {\n      length = 0;\n    }\n    if (((length == 0) && (!ferror(stdin))) && (written >= (6 * 2)))\n    {\n      written -= 6 * 2;\n    }\n    if (written > 0)\n    {\n      if (fwrite(output_buffer, 1, written, stdout) != written)\n      {\n        fprintf(stderr, \"%s: aptX decoding failed to write decoded data\\n\", argv[0]);\n        ret = 1;\n        break;\n      }\n    }\n  }\n\n  dropped = aptx_decode_sync_finish(ctx);\n  if (dropped && (!syncing))\n  {\n    fprintf(stderr, \"%s: aptX decoding stopped in the middle of the sample, dropped %lu byte%s\\n\", argv[0], (unsigned long) dropped, (dropped != 1) ? (\"s\") : (\"\"));\n    ret = 1;\n  }\n  else\n    if (syncing)\n  {\n    fprintf(stderr, \"%s: aptX synchronization failed\\n\", argv[0]);\n    ret = 1;\n  }\n  aptx_finish(ctx);\n  return ret;\n}\n\n",
            "calle": [
                "aptx_decode_sync",
                "aptx_decode_sync_finish",
                "aptx_finish",
                "aptx_init",
                "feof",
                "ferror",
                "fprintf",
                "fread",
                "fwrite",
                "memcmp",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char *[]",
                        "definition": [
                            "char *argv[]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hd",
                        "type": "int",
                        "definition": [
                            "int hd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "processed",
                        "type": "size_t",
                        "definition": [
                            "size_t processed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "written",
                        "type": "size_t",
                        "definition": [
                            "size_t written"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dropped",
                        "type": "size_t",
                        "definition": [
                            "size_t dropped"
                        ]
                    },
                    {
                        "path": null,
                        "name": "synced",
                        "type": "int",
                        "definition": [
                            "int synced"
                        ]
                    },
                    {
                        "path": null,
                        "name": "syncing",
                        "type": "int",
                        "definition": [
                            "int syncing"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct aptx_context",
                        "type": "struct aptx_context *",
                        "definition": [
                            "struct aptx_context *ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ctx_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ctx_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aptx_major",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "aptx_minor",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "aptx_patch",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "input_buffer",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "output_buffer",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        }
    ],
    "typedefs": []
}