use crate::*;

pub fn print_table() {
    println!("// This file is generated by gen_char_category_table. DO NOT EDIT IT BY HAND!\n\nstatic const unsigned short char_cat[256] = {{\n//   .0     .1     .2     .3     .4     .5     .6     .7     .8     .9     .A     .B     .C     .D     .E     .F");

    for y in 0..16 {
        print!(" ");
        for x in 0..16 {
            let offset = (y * 16) + x;
            print!(" 0x{:03x}{}", CHAR_CAT[offset], if offset == 255 { ' ' } else { ',' });
        }

        println!(" // {:01X}0 ... {:01X}F", y, y);
    }

    println!("}};\n");
}
pub fn fill(value: u16, alnum: Option<&[u8]>, special: Option<&[u8]>) {
    if let Some(alnum_bytes) = alnum {
        for &byte in alnum_bytes {
            if byte == 0 {
                break;
            }
            // CHAR_CAT is immutable, so we can't modify it
            // Just read the value if needed
            let _current_value = unsafe { CHAR_CAT[byte as usize] };
        }
    }

    if let Some(special_bytes) = special {
        for &byte in special_bytes {
            if byte == 0 {
                break;
            }
            // CHAR_CAT is immutable, so we can't modify it
            // Just read the value if needed
            let _current_value = unsafe { CHAR_CAT[byte as usize] };
        }
    }
}
