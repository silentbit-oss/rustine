{
    "test": {
        "error": "warning: unused import: `crate::*`\n --> src/url_key_value.rs:1:5\n  |\n1 | use crate::*;\n  |     ^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\nwarning: unused import: `crate::*`\n --> src/category.rs:1:5\n  |\n1 | use crate::*;\n  |     ^^^^^^^^\n\nwarning: unused import: `crate::*`\n --> src/globals.rs:1:5\n  |\n1 | use crate::*;\n  |     ^^^^^^^^\n\nwarning: unused import: `std::collections::BTreeMap`\n --> src/url.rs:2:5\n  |\n2 | use std::collections::BTreeMap;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: value assigned to `protocol` is never read\n  --> src/url.rs:55:13\n   |\n55 |     let mut protocol = String::with_capacity(32);\n   |             ^^^^^^^^\n   |\n   = help: maybe it is overwritten before being read?\n   = note: `#[warn(unused_assignments)]` on by default\n\nwarning: unused variable: `parsed_data`\n   --> src/url.rs:419:17\n    |\n419 |             let parsed_data = url_parse(Some(url_str));\n    |                 ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_parsed_data`\n    |\n    = note: `#[warn(unused_variables)]` on by default\n\nwarning: unused variable: `url`\n   --> src/url.rs:488:25\n    |\n488 | pub fn url_get_pathname(url: Option<&str>) -> Option<String> {\n    |                         ^^^ help: if this is intentional, prefix it with an underscore: `_url`\n\nwarning: value assigned to `p_idx` is never read\n   --> src/url.rs:520:13\n    |\n520 |     let mut p_idx = 0;\n    |             ^^^^^\n    |\n    = help: maybe it is overwritten before being read?\n\nwarning: unused variable: `second_slash`\n   --> src/url.rs:566:9\n    |\n566 |     let second_slash = p_idx;\n    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_second_slash`\n\nwarning: variable does not need to be mutable\n   --> src/url.rs:185:9\n    |\n185 |     let mut current = match &url.query {\n    |         ----^^^^^^^\n    |         |\n    |         help: remove this `mut`\n    |\n    = note: `#[warn(unused_mut)]` on by default\n\nwarning: variable does not need to be mutable\n   --> src/url.rs:281:13\n    |\n281 |         let mut key_part = &p[..kv_end_idx];\n    |             ----^^^^^^^^\n    |             |\n    |             help: remove this `mut`\n\nwarning: variable does not need to be mutable\n   --> src/url.rs:388:13\n    |\n388 |         let mut url_data = UrlData {\n    |             ----^^^^^^^^\n    |             |\n    |             help: remove this `mut`\n\nwarning: variable does not need to be mutable\n   --> src/url.rs:457:9\n    |\n457 |     let mut parsed_data = UrlData {\n    |         ----^^^^^^^^^^^\n    |         |\n    |         help: remove this `mut`\n\nwarning: variable does not need to be mutable\n   --> src/url.rs:541:9\n    |\n541 |     let mut protocol_end = scan_part(Some(&p), SCHEME, ':', '\\0');\n    |         ----^^^^^^^^^^^^\n    |         |\n    |         help: remove this `mut`\n\nwarning: attempting to modify a `const` item\n  --> src/gen_char_category_table.rs:31:13\n   |\n31 |             CHAR_CAT[ch as usize] |= value as u16;\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: each usage of a `const` item creates a new temporary; the original `const` item will not be modified\nnote: `const` item defined here\n  --> src/globals.rs:3:1\n   |\n3  | pub const CHAR_CAT: [u16; 256] = [\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   = note: `#[warn(const_item_mutation)]` on by default\n\nwarning: attempting to modify a `const` item\n  --> src/gen_char_category_table.rs:37:13\n   |\n37 |             CHAR_CAT[ch as usize] |= value as u16;\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: each usage of a `const` item creates a new temporary; the original `const` item will not be modified\nnote: `const` item defined here\n  --> src/globals.rs:3:1\n   |\n3  | pub const CHAR_CAT: [u16; 256] = [\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nwarning: function `main` is never used\n  --> src/globals.rs:41:4\n   |\n41 | fn main() {\n   |    ^^^^\n   |\n   = note: `#[warn(dead_code)]` on by default\n\nwarning: constant `unreserved` should have an upper case name\n  --> src/globals.rs:46:11\n   |\n46 | pub const unreserved: &str = \"-._~\";\n   |           ^^^^^^^^^^ help: convert the identifier to upper case: `UNRESERVED`\n   |\n   = note: `#[warn(non_upper_case_globals)]` on by default\n\nwarning: constant `subdelim` should have an upper case name\n  --> src/globals.rs:48:11\n   |\n48 | pub const subdelim: &str = \"!$&'()*+,;=\";\n   |           ^^^^^^^^ help: convert the identifier to upper case: `SUBDELIM`\n\nwarning: `translate` (lib) generated 19 warnings (run `cargo fix --lib -p translate` to apply 12 suggestions)\nwarning: unused import: `std::env`\n --> src/test_main.rs:2:5\n  |\n2 | use std::env;\n  |     ^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\nwarning: `translate` (bin \"test\") generated 1 warning (run `cargo fix --bin \"test\"` to apply 1 suggestion)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.01s\n     Running `target/debug/test`\nERROR /c2rust_final/subjects/url_parser/url.c Line 197! p=«http://user:pass@subdomain.host.com:8080/p/%C3%A5/t/h?qu%C3%ABry=strin%C4%9F&foo=bar=yuk&key%23%26%3D=%25&lol#h%C3%A6sh»\nERROR /c2rust_final/subjects/url_parser/url.c Line 197! p=«git://git@github.com:jwerle/url.h.git»\nthread 'main' panicked at 'assertion failed: parsed.is_some()', src/test_main.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace",
        "output": ""
    }
}