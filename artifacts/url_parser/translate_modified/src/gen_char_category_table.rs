use crate::*;
use std::println;


pub fn print_table() {
    // Print header
    println!("// This file is generated by gen_char_category_table. DO NOT EDIT IT BY HAND!\n\nstatic const unsigned short char_cat[256] = {{\n//   .0     .1     .2     .3     .4     .5     .6     .7     .8     .9     .A     .B     .C     .D     .E     .F");

    // Loop through rows
    for y in 0..16 {
        print!(" "); // Output a single space

        // Loop through columns
        for x in 0..16 {
            let offset = (y * 16) + x;

            // Print the value at the offset with proper formatting and determine the separator
            print!(" 0x{:03x}{}", CHAR_CAT[offset as usize], if offset == 255 { ' ' } else { ',' });
        }

        // Print a comment line for the current row
        println!(" // {:01X}0 ... {:01X}F", y, y);
    }

    // Print table closing
    println!("}};\n");
}
pub fn fill(value: u32, alnum: Option<&str>, special: Option<&str>) {
    if let Some(alnum) = alnum {
        for ch in alnum.chars() {
            CHAR_CAT[ch as usize] |= value as u16;
        }
    }

    if let Some(special) = special {
        for ch in special.chars() {
            CHAR_CAT[ch as usize] |= value as u16;
        }
    }
}
