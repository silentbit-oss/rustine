use crate::*;
use lazy_static::lazy_static;
use std::sync::Mutex;
use std::sync::OnceLock;
use std::os::raw::c_void;


lazy_static! {
    pub static ref LODEPNG_VERSION_STRING: &'static str = "version string here"; // Replace with actual version string
}

pub const LENGTHBASE: [u32; 29] = [
    3, 4, 5, 6, 7, 8, 9, 10, 11, 13, // 10 elements
    15, 17, 19, 23, 27, 31, 35, 43, 51, 59, // 10 more (20 total)
    67, 83, 99, 115, 131, 163, 195, 227, 258, // last 9 (29 total)
];

pub static LENGTHEXTRA: [u32; 29] = [
    0, 0, 0, 0,  // 4 elements
    0, 0, 0, 0,  // 4 elements
    1, 1, 1, 1,  // 4 elements
    2, 2, 2, 2,  // 4 elements
    3, 3, 3, 3,  // 4 elements
    4, 4, 4, 4,  // 4 elements
    5, 5, 5, 5,  // 4 elements
    0            // 1 element
];

pub static DISTANCEBASE: [u32; 30] = [
    1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 
    33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 
    1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577
];

pub static DISTANCEEXTRA: [u32; 30] = [
    0, 0, 0, 0,  // 4 elements
    1, 1,        // 2 elements
    2, 2,        // 2 elements
    3, 3,        // 2 elements
    4, 4,        // 2 elements
    5, 5,        // 2 elements
    6, 6,        // 2 elements
    7, 7,        // 2 elements
    8, 8,        // 2 elements
    9, 9,        // 2 elements
    10, 10,      // 2 elements
    11, 11,      // 2 elements
    12, 12,      // 2 elements
    13, 13       // 2 elements
];

pub static CLCL_ORDER: [u32; 19] = [
    16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 
    11, 4, 12, 3, 13, 2, 14, 1, 15
];

pub const MAX_SUPPORTED_DEFLATE_LENGTH: usize = 258;

pub const HASH_NUM_VALUES: u32 = 65536;

pub const HASH_BIT_MASK: u32 = 65535;


lazy_static! {
    pub static ref LODEPNG_CRC32_TABLE: std::sync::Mutex<[u32; 256]> = std::sync::Mutex::new([
        0u32, 1996959894u32, 3993919788u32, 2567524794u32, 124634137u32, 1886057615u32, 3915621685u32, 2657392035u32,
        249268274u32, 2044508324u32, 3772115230u32, 2547177864u32, 162941995u32, 2125561021u32, 3887607047u32, 2428444049u32,
        498536548u32, 1789927666u32, 4089016648u32, 2227061214u32, 450548861u32, 1843258603u32, 4107580753u32, 2211677639u32,
        325883990u32, 1684777152u32, 4251122042u32, 2321926636u32, 335633487u32, 1661365465u32, 4195302755u32, 2366115317u32,
        997073096u32, 1281953886u32, 3579855332u32, 2724688242u32, 1006888145u32, 1258607687u32, 3524101629u32, 2768942443u32,
        901097722u32, 1119000684u32, 3686517206u32, 2898065728u32, 853044451u32, 1172266101u32, 3705015759u32, 2882616665u32,
        651767980u32, 1373503546u32, 3369554304u32, 3218104598u32, 565507253u32, 1454621731u32, 3485111705u32, 3099436303u32,
        671266974u32, 1594198024u32, 3322730930u32, 2970347812u32, 795835527u32, 1483230225u32, 3244367275u32, 3060149565u32,
        1994146192u32, 31158534u32, 2563907772u32, 4023717930u32, 1907459465u32, 112637215u32, 2680153253u32, 3904427059u32,
        2013776290u32, 251722036u32, 2517215374u32, 3775830040u32, 2137656763u32, 141376813u32, 2439277719u32, 3865271297u32,
        1802195444u32, 476864866u32, 2238001368u32, 4066508878u32, 1812370925u32, 453092731u32, 2181625025u32, 4111451223u32,
        1706088902u32, 314042704u32, 2344532202u32, 4240017532u32, 1658658271u32, 366619977u32, 2362670323u32, 4224994405u32,
        1303535960u32, 984961486u32, 2747007092u32, 3569037538u32, 1256170817u32, 1037604311u32, 2765210733u32, 3554079995u32,
        1131014506u32, 879679996u32, 2909243462u32, 3663771856u32, 1141124467u32, 855842277u32, 2852801631u32, 3708648649u32,
        1342533948u32, 654459306u32, 3188396048u32, 3373015174u32, 1466479909u32, 544179635u32, 3110523913u32, 3462522015u32,
        1591671054u32, 702138776u32, 2966460450u32, 3352799412u32, 1504918807u32, 783551873u32, 3082640443u32, 3233442989u32,
        3988292384u32, 2596254646u32, 62317068u32, 1957810842u32, 3939845945u32, 2647816111u32, 81470997u32, 1943803523u32,
        3814918930u32, 2489596804u32, 225274430u32, 2053790376u32, 3826175755u32, 2466906013u32, 167816743u32, 2097651377u32,
        4027552580u32, 2265490386u32, 503444072u32, 1762050814u32, 4150417245u32, 2154129355u32, 426522225u32, 1852507879u32,
        4275313526u32, 2312317920u32, 282753626u32, 1742555852u32, 4189708143u32, 2394877945u32, 397917763u32, 1622183637u32,
        3604390888u32, 2714866558u32, 953729732u32, 1340076626u32, 3518719985u32, 2797360999u32, 1068828381u32, 1219638859u32,
        3624741850u32, 2936675148u32, 906185462u32, 1090812512u32, 3747672003u32, 2825379669u32, 829329135u32, 1181335161u32,
        3412177804u32, 3160834842u32, 628085408u32, 1382605366u32, 3423369109u32, 3138078467u32, 570562233u32, 1426400815u32,
        3317316542u32, 2998733608u32, 733239954u32, 1555261956u32, 3268935591u32, 3050360625u32, 752459403u32, 1541320221u32,
        2607071920u32, 3965973030u32, 1969922972u32, 40735498u32, 2617837225u32, 3943577151u32, 1913087877u32, 83908371u32,
        2512341634u32, 3803740692u32, 2075208622u32, 213261112u32, 2463272603u32, 3855990285u32, 2094854071u32, 198958881u32,
        2262029012u32, 4057260610u32, 1759359992u32, 534414190u32, 2176718541u32, 4139329115u32, 1873836001u32, 414664567u32,
        2282248934u32, 4279200368u32, 1711684554u32, 285281116u32, 2405801727u32, 4167216745u32, 1634467795u32, 376229701u32,
        2685067896u32, 3608007406u32, 1308918612u32, 956543938u32, 2808555105u32, 3495958263u32, 1231636301u32, 1047427035u32,
        2932959818u32, 3654703836u32, 1088359270u32, 936918000u32, 2847714899u32, 3736837829u32, 1202900863u32, 817233897u32,
        3183342108u32, 3401237130u32, 1404277552u32, 615818150u32, 3134207493u32, 3453421203u32, 1423857449u32, 601450431u32,
        3009837614u32, 3294710456u32, 1567103746u32, 711928724u32, 3020668471u32, 3272380065u32, 1510334235u32, 755167117u32
    ]);
}

pub static ADAM7_IX: [u32; 7] = [0, 4, 0, 2, 0, 1, 0];

pub static ADAM7_IY: [u32; 7] = [
    0, // 1
    0, // 2
    4, // 3
    0, // 4
    2, // 5
    0, // 6
    1  // 7
];

pub static ADAM7_DX: [u32; 7] = [8, 8, 4, 4, 2, 2, 1];

pub const ADAM7_DY: [u32; 7] = [
    8, // 1
    8, // 2
    8, // 3
    4, // 4
    4, // 5
    2, // 6
    2, // 7
];


lazy_static! {
    pub static ref LODEPNG_DEFAULT_DECOMPRESS_SETTINGS: Mutex<LodePNGDecompressSettings> = Mutex::new(LodePNGDecompressSettings {
        ignore_adler32: 0,
        ignore_nlen: 0,
        max_output_size: 0,
        custom_zlib: None,
        custom_inflate: None,
        custom_context: None,
    });
}

// Safe because we know this will be used in a thread-safe manner in practice
unsafe impl Send for LodePNGCompressSettings {}
unsafe impl Sync for LodePNGCompressSettings {}

pub static LODEPNG_DEFAULT_COMPRESS_SETTINGS: OnceLock<LodePNGCompressSettings> = OnceLock::new();

pub fn get_default_compress_settings() -> &'static LodePNGCompressSettings {
    LODEPNG_DEFAULT_COMPRESS_SETTINGS.get_or_init(|| LodePNGCompressSettings {
        btype: 2,
        use_lz77: 1,
        windowsize: 2048,
        minmatch: 3,
        nicematch: 128,
        lazymatching: 1,
        custom_zlib: None,
        custom_deflate: None,
        custom_context: None,
    })
}

