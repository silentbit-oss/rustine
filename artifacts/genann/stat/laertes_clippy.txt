warning: the feature `core_intrinsics` is internal to the compiler or standard library
warning: unused import: `crate::laertes_rt::*`
warning: unused import: `crate::laertes_rt::*`
warning: unnecessary parentheses around assigned value
warning: unused import: `crate::laertes_rt::*`
warning: unnecessary parentheses around assigned value
warning: unnecessary parentheses around assigned value
warning: unnecessary parentheses around assigned value
warning: unnecessary parentheses around assigned value
warning: unused import: `crate::laertes_rt::*`
warning: this `else` branch is empty
warning: this `else` branch is empty
warning: this `else` branch is empty
warning: unused import: `crate::laertes_rt::*`
warning: unused import: `crate::laertes_rt::*`
warning: unused import: `crate::laertes_rt::*`
warning: `#[no_mangle]` has no effect on a foreign function
  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: the feature `const_mut_refs` has been stable since 1.83.0 and no longer requires an attribute to enable
warning: the feature `const_fn_fn_ptr_basics` has been stable since 1.61.0 and no longer requires an attribute to enable
warning: the feature `ptr_offset_from` has been stable since 1.47.0 and no longer requires an attribute to enable
warning: unused variable: `argc`
warning: unused variable: `argv`
warning: unused variable: `argc`
warning: unused variable: `argv`
warning: unused variable: `argc`
warning: unused variable: `argv`
warning: unused variable: `argc`
warning: unused variable: `argv`
warning: unused variable: `argc`
warning: unused variable: `argv`
warning: unneeded `return` statement
warning: casting raw pointers to the same type and constness is unnecessary (`*mut *mut i8` -> `*mut *mut i8`)
warning: unneeded `return` statement
warning: the use of negated comparison operators on partially ordered types produces code that is hard to read and refactor, please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable
warning: casting raw pointers to the same type and constness is unnecessary (`*mut *mut i8` -> `*mut *mut i8`)
warning: unneeded `return` statement
warning: casting raw pointers to the same type and constness is unnecessary (`*mut *mut i8` -> `*mut *mut i8`)
warning: `0 as *const _` detected
warning: `0 as *mut _` detected
warning: unsafe function's docs are missing a `# Safety` section
warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
warning: `0 as *mut _` detected
warning: unneeded `return` statement
warning: casting raw pointers to the same type and constness is unnecessary (`*mut *mut i8` -> `*mut *mut i8`)
warning: unsafe function's docs are missing a `# Safety` section
warning: unneeded `return` statement
warning: unsafe function's docs are missing a `# Safety` section
warning: unneeded `return` statement
warning: unneeded `return` statement
warning: unneeded `return` statement
warning: unsafe function's docs are missing a `# Safety` section
warning: unneeded `return` statement
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: unsafe function's docs are missing a `# Safety` section
warning: unneeded `return` statement
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: unsafe function's docs are missing a `# Safety` section
warning: unneeded `return` statement
warning: `0 as *mut _` detected
warning: unsafe function's docs are missing a `# Safety` section
warning: unsafe function's docs are missing a `# Safety` section
warning: unsafe function's docs are missing a `# Safety` section
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: unneeded `return` statement
warning: unsafe function's docs are missing a `# Safety` section
warning: this boolean expression can be simplified
warning: this multiplication by -1 can be written more succinctly
warning: this multiplication by -1 can be written more succinctly
warning: unsafe function's docs are missing a `# Safety` section
warning: unsafe function's docs are missing a `# Safety` section
warning: the function `genann_run` doesn't need a mutable reference
warning: the function `genann_run` doesn't need a mutable reference
warning: the function `genann_run` doesn't need a mutable reference
warning: the function `genann_run` doesn't need a mutable reference
warning: the function `genann_run` doesn't need a mutable reference
warning: the function `genann_run` doesn't need a mutable reference
warning: the function `genann_run` doesn't need a mutable reference
warning: the function `genann_run` doesn't need a mutable reference
warning: the function `genann_run` doesn't need a mutable reference
warning: the function `genann_run` doesn't need a mutable reference
warning: the function `genann_run` doesn't need a mutable reference
warning: the function `genann_run` doesn't need a mutable reference
warning: unsafe function's docs are missing a `# Safety` section
warning: unsafe function's docs are missing a `# Safety` section
warning: the function `genann_run` doesn't need a mutable reference
warning: the function `genann_train` doesn't need a mutable reference
warning: the function `genann_train` doesn't need a mutable reference
warning: the function `genann_run` doesn't need a mutable reference
warning: the use of negated comparison operators on partially ordered types produces code that is hard to read and refactor, please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable
warning: unsafe function's docs are missing a `# Safety` section
warning: unsafe function's docs are missing a `# Safety` section
warning: unsafe function's docs are missing a `# Safety` section
warning: unsafe function's docs are missing a `# Safety` section
warning: unsafe function's docs are missing a `# Safety` section
warning: unsafe function's docs are missing a `# Safety` section
warning: unneeded `return` statement
warning: casting raw pointers to the same type and constness is unnecessary (`*mut *mut i8` -> `*mut *mut i8`)
warning: use of `default` to create a unit struct
warning: this `map_or` can be simplified
warning: the following explicit lifetimes could be elided: 'a
warning: the following explicit lifetimes could be elided: 'a
warning: casting raw pointers to the same type and constness is unnecessary (`*const ()` -> `*const ()`)
warning: empty `loop {}` wastes CPU cycles
