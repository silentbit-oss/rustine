{
    "chtype": {
        "source_code": "typedef unsigned chtype",
        "translated_code": "pub type chtype = u32;",
        "hint": "typedef",
        "section": "src",
        "file": "types.rs",
        "error": "",
        "dependent": [],
        "lifetime_hint": [],
        "global_variables": [],
        "calle": [],
        "calle_c": [],
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "mmask_t": {
        "source_code": "typedef unsigned mmask_t",
        "translated_code": "pub type mmask_t = u32;",
        "hint": "typedef",
        "section": "src",
        "file": "types.rs",
        "error": "",
        "dependent": [],
        "lifetime_hint": [],
        "global_variables": [],
        "calle": [],
        "calle_c": [],
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "NCURSES_BOOL": {
        "source_code": "typedef unsigned char NCURSES_BOOL",
        "translated_code": "pub type NCURSES_BOOL = u8;",
        "hint": "typedef",
        "section": "src",
        "file": "types.rs",
        "error": "",
        "dependent": [],
        "lifetime_hint": [],
        "global_variables": [],
        "calle": [],
        "calle_c": [],
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "attr_t": {
        "source_code": "typedef chtype attr_t",
        "translated_code": "pub type attr_t = chtype;",
        "hint": "typedef",
        "section": "src",
        "file": "types.rs",
        "error": "",
        "dependent": [],
        "lifetime_hint": [],
        "global_variables": [],
        "calle": [],
        "calle_c": [],
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "screen_object": {
        "source_code": "typedef struct \n{\n  int x;\n  int y;\n  int color;\n  bool bold;\n  char character;\n} screen_object",
        "translated_code": "#[derive(Clone)]\npub struct ScreenObject {\n    pub x: i32,\n    pub y: i32,\n    pub color: i32,\n    pub bold: bool,\n    pub character: char,\n}",
        "hint": "special_types",
        "section": "src",
        "file": "screen_object.rs",
        "error": "",
        "dependent": [],
        "lifetime_hint": [],
        "type": "<class 'pycparser.c_ast.Struct'>",
        "global_variables": [],
        "calle": [],
        "calle_c": [],
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "SCREEN": {
        "source_code": "typedef struct screen SCREEN",
        "translated_code": "#[derive(Clone)]\npub struct Screen;\npub type SCREEN = Option<Box<Screen>>;",
        "hint": "special_types",
        "section": "src",
        "file": "SCREEN.rs",
        "error": "",
        "dependent": [],
        "lifetime_hint": [],
        "type": "<class 'pycparser.c_ast.Struct'>",
        "global_variables": [],
        "calle": [],
        "calle_c": [],
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "WINDOW": {
        "source_code": "typedef struct _win_st WINDOW",
        "translated_code": "pub type WinSt = Option<Box<WinStInner>>;\n\n#[derive(Clone)]\npub struct WinStInner;",
        "hint": "special_types",
        "section": "src",
        "file": "WINDOW.rs",
        "error": "",
        "dependent": [],
        "lifetime_hint": [],
        "type": "<class 'pycparser.c_ast.Struct'>",
        "global_variables": [],
        "calle": [],
        "calle_c": [],
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "NCURSES_OUTC": {
        "source_code": "typedef int (*NCURSES_OUTC)(int)",
        "translated_code": "pub type NcursesOutc = Option<fn(i32) -> i32>;",
        "hint": "special_types",
        "section": "src",
        "file": "NCURSES_OUTC.rs",
        "error": "",
        "dependent": [],
        "lifetime_hint": [],
        "type": "<class 'pycparser.c_ast.FuncDecl'>",
        "global_variables": [],
        "calle": [],
        "calle_c": [],
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "NCURSES_WINDOW_CB": {
        "source_code": "typedef int (*NCURSES_WINDOW_CB)(WINDOW *, void *)",
        "translated_code": "use ncurses::WINDOW;\n\npub type NcursesWindowCb = Option<Box<dyn FnMut(*mut WINDOW, *mut std::ffi::c_void) -> i32>>;",
        "hint": "special_types",
        "section": "src",
        "file": "NCURSES_WINDOW_CB.rs",
        "error": "",
        "dependent": [],
        "lifetime_hint": [],
        "type": "<class 'pycparser.c_ast.FuncDecl'>",
        "global_variables": [],
        "calle": [],
        "calle_c": [],
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "NCURSES_SCREEN_CB": {
        "source_code": "typedef int (*NCURSES_SCREEN_CB)(SCREEN *, void *)",
        "translated_code": "use std::os::raw::c_int;\n\npub type NcursesScreenCb = Option<Box<dyn FnMut(*mut Screen, *mut std::ffi::c_void) -> c_int>>;",
        "hint": "special_types",
        "section": "src",
        "file": "NCURSES_SCREEN_CB.rs",
        "error": "",
        "dependent": [],
        "lifetime_hint": [],
        "type": "<class 'pycparser.c_ast.FuncDecl'>",
        "global_variables": [],
        "calle": [],
        "calle_c": [],
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "NCURSES_OUTC_sp": {
        "source_code": "typedef int (*NCURSES_OUTC_sp)(SCREEN *, int)",
        "translated_code": "pub type NcursesOutcSp = Option<Box<dyn FnMut(Option<Box<Screen>>, i32) -> i32>>;",
        "hint": "special_types",
        "section": "src",
        "file": "NCURSES_OUTC_sp.rs",
        "error": "",
        "dependent": [],
        "lifetime_hint": [],
        "type": "<class 'pycparser.c_ast.FuncDecl'>",
        "global_variables": [],
        "calle": [],
        "calle_c": [],
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "messages": {
        "source_code": "static char *messages[] = {\"\\\"I pity the fool who mistakes me for kitten!\\\", sez Mr. T.\", \"That's just an old tin can.\", \"It's an altar to the horse god.\", \"A box of dancing mechanical pencils. They dance! They sing!\", \"It's an old Duke Ellington record.\", \"A box of fumigation pellets.\", \"A digital clock. It's stuck at 2:17 PM.\", \"That's just a charred human corpse.\", \"I don't know what that is, but it's not kitten.\", \"An empty shopping bag. Paper or plastic?\", \"Could it be... a big ugly bowling trophy?\", \"A coat hanger hovers in thin air. Odd.\", \"Not kitten, just a packet of Kool-Aid(tm).\", \"A freshly-baked pumpkin pie.\", \"A lone, forgotten comma, sits here, sobbing.\", \"ONE HUNDRED THOUSAND CARPET FIBERS!!!!!\", \"It's Richard Nixon's nose!\", \"It's Lucy Ricardo. \\\"Aaaah, Ricky!\\\", she says.\", \"You stumble upon Bill Gates' stand-up act.\", \"Just an autographed copy of the Kama Sutra.\", \"It's the Will Rogers Highway. Who was Will Rogers, anyway?\", \"It's another robot, more advanced in design than you but strangely immobile.\", \"Leonard Richardson is here, asking people to lick him.\", \"It's a stupid mask, fashioned after a beagle.\", \"Your State Farm Insurance(tm) representative!\", \"It's the local draft board.\", \"Seven 1/4\\\" screws and a piece of plastic.\", \"An 80286 machine.\", \"One of those stupid \\\"Homes of the Stars\\\" maps.\", \"A signpost saying \\\"TO KITTEN\\\". It points in no particular direction.\", \"A hammock stretched between a tree and a volleyball pole.\", \"A Texas Instruments of Destruction calculator.\", \"It's a dark, amphorous blob of matter.\", \"Just a pincushion.\", \"It's a mighty zombie talking about some love and prosperity.\", \"\\\"Dear robot, you may have already won our 10 MILLION DOLLAR prize...\\\"\", \"It's just an object.\", \"A mere collection of pixels.\", \"A badly dented high-hat cymbal lies on its side here.\", \"A marijuana brownie.\", \"A plush Chewbacca.\", \"Daily hunger conditioner from Australasia\", \"Just some stuff.\", \"Why are you touching this when you should be finding kitten?\", \"A glorious fan of peacock feathers.\", \"It's some compromising photos of Babar the Elephant.\", \"A copy of the Weekly World News. Watch out for the chambered nautilus!\", \"It's the proverbial wet blanket.\", \"A \\\"Get Out of Jail Free\\\" card.\", \"An incredibly expensive \\\"Mad About You\\\" collector plate.\", \"Paul Moyer's necktie.\", \"A haircut and a real job. Now you know where to get one!\", \"An automated robot-hater. It frowns disapprovingly at you.\", \"An automated robot-liker. It smiles at you.\", \"It's a black hole. Don't fall in!\", \"Just a big brick wall.\", \"You found kitten! No, just kidding.\", \"Heart of Darkness brand pistachio nuts.\", \"A smoking branding iron shaped like a 24-pin connector.\", \"It's a Java applet.\", \"An abandoned used-car lot.\", \"A shameless plug for Crummy: http://www.crummy.com/\", \"A shameless plug for the UCLA Linux Users Group: http://linux.ucla.edu/\", \"A can of Spam Lite.\", \"This is another fine mess you've gotten us into, Stanley.\", \"It's scenery for \\\"Waiting for Godot\\\".\", \"This grain elevator towers high above you.\", \"A Mentos wrapper.\", \"It's the constellation Pisces.\", \"It's a fly on the wall. Hi, fly!\", \"This kind of looks like kitten, but it's not.\", \"It's a banana! Oh, joy!\", \"A helicopter has crashed here.\", \"Carlos Tarango stands here, doing his best impression of Pat Smear.\", \"A patch of mushrooms grows here.\", \"A patch of grape jelly grows here.\", \"A spindle, and a grindle, and a bucka-wacka-woom!\", \"A geyser sprays water high into the air.\", \"A toenail? What good is a toenail?\", \"You've found the fish! Not that it does you much good in this game.\", \"A Buttertonsils bar.\", \"One of the few remaining discoes.\", \"Ah, the uniform of a Revolutionary-era minuteman.\", \"A punch bowl, filled with punch and lemon slices.\", \"It's nothing but a G-thang, baby.\", \"IT'S ALIVE! AH HA HA HA HA!\", \"This was no boating accident!\", \"Wait! This isn't the poker chip! You've been tricked! DAMN YOU, MENDEZ!\", \"A livery stable! Get your livery!\", \"It's a perpetual immobility machine.\", \"\\\"On this spot in 1962, Henry Winkler was sick.\\\"\", \"There's nothing here; it's just an optical illusion.\", \"The World's Biggest Motzah Ball!\", \"A tribe of cannibals lives here. They eat Malt-O-Meal for breakfast, you know.\", \"This appears to be a rather large stack of trashy romance novels.\", \"Look out! Exclamation points!\", \"A herd of wild coffee mugs slumbers here.\", \"It's a limbo bar! How low can you go?\", \"It's the horizon. Now THAT'S weird.\", \"A vase full of artificial flowers is stuck to the floor here.\", \"A large snake bars your way.\", \"A pair of saloon-style doors swing slowly back and forth here.\", \"It's an ordinary bust of Beethoven... but why is it painted green?\", \"It's TV's lovable wisecracking Crow! \\\"Bite me!\\\", he says.\", \"Hey, look, it's war. What is it good for? Absolutely nothing. Say it again.\", \"It's the amazing self-referential thing that's not kitten.\", \"A flamboyant feather boa. Now you can dress up like Carol Channing!\", \"\\\"Sure hope we get some rain soon,\\\" says Farmer Joe.\", \"\\\"How in heck can I wash my neck if it ain't gonna rain no more?\\\" asks Farmer Al.\", \"\\\"Topsoil's all gone, ma,\\\" weeps Lil' Greg.\", \"This is a large brown bear. Oddly enough, it's currently peeing in the woods.\", \"A team of arctic explorers is camped here.\", \"This object here appears to be Louis Farrakhan's bow tie.\", \"This is the world-famous Chain of Jockstraps.\", \"A trash compactor, compacting away.\", \"This toaster strudel is riddled with bullet holes!\", \"It's a hologram of a crashed helicopter.\", \"This is a television. On screen you see a robot strangely similar to yourself.\", \"This balogna has a first name, it's R-A-N-C-I-D.\", \"A salmon hatchery? Look again. It's merely a single salmon.\", \"It's a rim shot. Ba-da-boom!\", \"It's creepy and it's kooky, mysterious and spooky. It's also somewhat ooky.\", \"This is an anagram.\", \"This object is like an analogy.\", \"It's a symbol. You see in it a model for all symbols everywhere.\", \"The object pushes back at you.\", \"A traffic signal. It appears to have been recently vandalized.\", \"\\\"There is no kitten!\\\" cackles the old crone. You are shocked by her blasphemy.\", \"This is a Lagrange point. Don't come too close now.\", \"The dirty old tramp bemoans the loss of his harmonica.\", \"Look, it's Fanny the Irishman!\", \"What in blazes is this?\", \"It's the instruction manual for a previous version of this game.\", \"A brain cell. Oddly enough, it seems to be functioning.\", \"Tea and/or crumpets.\", \"This jukebox has nothing but Cliff Richards albums in it.\", \"It's a Quaker Oatmeal tube, converted into a drum.\", \"This is a remote control. Being a robot, you keep a wide berth.\", \"It's a roll of industrial-strength copper wire.\", \"Oh boy! Grub! Er, grubs.\", \"A puddle of mud, where the mudskippers play.\", \"Plenty of nothing.\", \"Look at that, it's the Crudmobile.\", \"Just Walter Mattheau and Jack Lemmon.\", \"Two crepes, two crepes in a box.\", \"An autographed copy of \\\"Primary Colors\\\", by Anonymous.\", \"Another rabbit? That's three today!\", \"It's a segmentation fault. Core dumped, by the way.\", \"A historical marker showing the actual location of /dev/null.\", \"Thar's Mobius Dick, the convoluted whale. Arrr!\", \"It's a charcoal briquette, smoking away.\", \"A pizza, melting in the sun.\", \"It's a \\\"HOME ALONE 2: Lost in New York\\\" novelty cup.\", \"A stack of 7 inch floppies wobbles precariously.\", \"It's nothing but a corrupted floppy. Coaster anyone?\", \"A section of glowing phosphor cells sings a song of radiation to you.\", \"This TRS-80 III is eerily silent.\", \"A toilet bowl occupies this space.\", \"This peg-leg is stuck in a knothole!\", \"It's a solitary vacuum tube.\", \"This corroded robot is clutching a mitten.\", \"\\\"Hi, I'm Anson Williams, TV's 'Potsy'.\\\"\", \"This subwoofer was blown out in 1974.\", \"Three half-pennies and a wooden nickel.\", \"It's the missing chapter to \\\"A Clockwork Orange\\\".\", \"It's a burrito stand flyer. \\\"Taqueria El Ranchito\\\".\", \"This smiling family is happy because they eat LARD.\", \"Roger Avery, persona un famoso de los Estados Unidos.\", \"Ne'er but a potted plant.\", \"A parrot, kipping on its back.\", \"A forgotten telephone switchboard.\", \"A forgotten telephone switchboard operator.\", \"It's an automated robot-disdainer. It pretends you're not there.\", \"It's a portable hole. A sign reads: \\\"Closed for the winter\\\".\", \"Just a moldy loaf of bread.\", \"A little glass tub of Carmex. ($.89) Too bad you have no lips.\", \"A Swiss-Army knife. All of its appendages are out. (toothpick lost)\", \"It's a zen simulation, trapped within an ASCII character.\", \"It's a copy of \\\"The Rubaiyat of Spike Schudy\\\".\", \"It's \\\"War and Peace\\\" (unabridged, very small print).\", \"A willing, ripe tomato bemoans your inability to digest fruit.\", \"A robot comedian. You feel amused.\", \"It's KITT, the talking car.\", \"Here's Pete Peterson. His batteries seem to have long gone dead.\", \"\\\"Blup, blup, blup\\\", says the mud pot.\", \"More grist for the mill.\", \"Grind 'em up, spit 'em out, they're twigs.\", \"The boom box cranks out an old Ethel Merman tune.\", \"It's \\\"Finding kitten\\\", published by O'Reilly and Associates.\", \"Pumpkin pie spice.\", \"It's the Bass-Matic '76! Mmm, that's good bass!\", \"\\\"Lend us a fiver 'til Thursday\\\", pleas Andy Capp.\", \"It's a tape of '70s rock. All original hits! All original artists!\", \"You've found the fabled America Online disk graveyard!\", \"Empty jewelboxes litter the landscape.\", \"It's the astounding meta-object.\", \"Ed McMahon stands here, lost in thought. Seeing you, he bellows, \\\"YES SIR!\\\"\", \"...thingy???\", \"It's 1000 secrets the government doesn't want you to know!\", \"The letters O and R.\", \"A magical... magic thing.\", \"It's a moment of silence.\", \"It's Sirhan-Sirhan, looking guilty.\", \"It's \\\"Chicken Soup for the Kitten-seeking Soulless Robot.\\\"\", \"It is a set of wind-up chatter teeth.\", \"It is a cloud shaped like an ox.\", \"You see a snowflake here, melting slowly.\", \"It's a big block of ice. Something seems to be frozen inside it.\", \"Vladimir Lenin's casket rests here.\", \"It's a copy of \\\"Zen and The Art of Robot Maintenance\\\".\", \"This invisible box contains a pantomime horse.\", \"A mason jar lies here open. It's label reads: \\\"do not open!\\\".\", \"A train of thought chugs through here.\", \"This jar of pickles expired in 1957.\", \"Someone's identity disk lies here.\", \"\\\"Yes!\\\" says the bit.\", \"\\\"No!\\\" says the bit.\", \"A dodecahedron bars your way.\", \"Mr. Hooper is here, surfing.\", \"It's a big smoking fish.\", \"You have new mail in /var/spool/robot\", \"Just a monitor with the blue element burnt out.\", \"A pile of coaxial plumbing lies here.\", \"It's a rotten old shoe.\", \"It's a hundred-dollar bill.\", \"It's a Dvorak keyboard.\", \"It's a cardboard box full of 8-tracks.\", \"Just a broken hard drive containg the archives of Nerth Pork.\", \"A broken metronome sits here, it's needle off to one side.\", \"A sign reads: \\\"Go home!\\\"\", \"A sign reads: \\\"No robots allowed!\\\"\", \"It's the handheld robotfindskitten game, by Tiger.\", \"This particular monstrosity appears to be ENIAC.\", \"This is a tasty-looking banana creme pie.\", \"A wireframe model of a hot dog rotates in space here.\", \"Just the empty husk of a locust.\", \"You disturb a murder of crows.\", \"It's a copy of the robotfindskitten EULA.\", \"It's Death.\", \"It's an autographed copy of \\\"Secondary Colors,\\\" by Bob Ross.\", \"It is a marzipan dreadnought that appears to have melted and stuck.\", \"It's a DVD of \\\"Crouching Monkey, Hidden Kitten\\\", region encoded for the moon.\", \"It's Kieran Hervold.  Damn dyslexia!\", \"A non-descript box of crackers.\", \"Carbonated Water, High Fructose Corn Syrup, Color, Phosphoric Acid, Flavors, Caffeine.\", \"\\\"Move along! Nothing to see here!\\\"\", \"It's the embalmed corpse of Vladimir Lenin.\", \"A coupon for one free steak-fish at your local family diner.\", \"A set of keys to a 2001 Rolls Royce. Worthless.\", \"A gravestone stands here.  \\\"Izchak Miller, ascended.\\\"\", \"Someone has written \\\"ad aerarium\\\" on the ground here.\", \"A large blue eye floats in midair.\", \"This appears to be a statue of Perseus.\", \"There is an opulent throne here.\", \"It's a squad of Keystone Kops.\", \"This seems to be junk mail addressed to the finder of the Eye of Larn.\", \"A wondrous and intricate golden amulet.  Too bad you have no neck.\", \"The swampy ground around you seems to stink with disease.\", \"An animate blob of acid.  Being metallic, you keep well away.\", \"It's a copy of Knuth with the chapter on kitten-search algorithms torn out.\", \"A crowd of people, and at the center, a popular misconception.\", \"It's a blind man. When you touch, he exclaims \\\"It's a kitten prospecting robot!\\\"\", \"It's a lost wallet. It's owner didn't have pets, so you discard it.\", \"This place is called Antarctica. There is no kitten here.\", \"It's a mousetrap, baited with soap.\", \"A book with \\\"Don't Panic\\\" in large friendly letters across the cover.\", \"A compendium of haiku about metals.\", \"A discredited cosmology, relic of a bygone era.\", \"A hollow voice says \\\"Plugh\\\".\", \"A knight who says \\\"Either I am an insane knave, or you will find kitten.\\\"\", \"A neural net -- maybe it's trying to recognize kitten.\", \"A screwdriver.\", \"A statue of a girl holding a goose like the one in Gottingen, Germany.\", \"A tetradrachm dated \\\"42 B.C.\\\"\", \"A voice booms out \\\"Onward, kitten soldiers...\\\"\", \"An eminently forgettable zahir.\", \"Apparently, it's Edmund Burke.\", \"For a moment, you feel something in your hands, but it disappears!\", \"Here is a book about Robert Kennedy.\", \"Hey, robot, leave those lists alone.\", \"Ho hum.  Another synthetic a posteriori.\", \"It's Asimov's Laws of Robotics.  You feel a strange affinity for them.\", \"It's Bach's Mass in B-minor!\", \"It's a bug.\", \"It's a synthetic a priori truth!  Immanuel would be so pleased!\", \"It's the Tiki Room.\", \"Just some old play by a Czech playwright, and you can't read Czech.\", \"Kitten is the letter 'Q'.  Oh, wait, maybe not.\", \"Quidquid Latine dictum sit, kitten non est.\", \"Sutro Tower is visible at some distance through the fog.\", \"The Digital Millennium Copyright Act of 1998.\", \"The United States Court of Appeals for the Federal Circuit.\", \"The non-kitten item like this but with \\\"false\\\" and \\\"true\\\" switched is true.\", \"The non-kitten item like this but with \\\"true\\\" and \\\"false\\\" switched is false.\", \"This is the chapter called \\\"A Map of the Cat?\\\" from Feynman's autobiography.\", \"This is the forest primeval.\", \"Werner's \\\"Pocket Field Guide to Things That Are Not Kitten\\\".\", \"You found nettik, but that's backwards.\", \"You have found some zinc, but you must not stop here, for you must find kitten.\", \"\\\"50 Years Among the Non-Kitten Items\\\", by Ann Droyd.\", \"\\\"Robot may not injure kitten, or, through inaction, ...\\\"\", \"\\\"Address Allocation for Private Internets\\\" by Yakov Rekhter et al.\", \"\\\"Mail Routing and the Domain System\\\" by Craig Partridge.\", \"\\\"The Theory and Practice of Oligarchical Collectivism\\\" by Emmanuel Goldstein.\", \"\\\"201 Kitten Verbs, Fully Conjugated\\\".  You look for \\\"find\\\".\", \"A card shark sits here, practicing his Faro shuffle.  He ignores you.\", \"A copy of DeCSS.  They're a dime a dozen these days.\", \"A demonic voice proclaims \\\"There is no kitten, only Zuul\\\".  You flee.\", \"A lotus.  You make an interesting pair.\", \"A milk carton, with a black and white picture of kitten on the side.\", \"Any ordinary robot could see from a mile away that this wasn't kitten.\", \"A stegosaurus, escaped from the stegosaurusfindsrobot game.  It finds you.\", \"Baling wire and chewing gum.\", \"Chewing gum and baling wire.\", \"Here is no kitten but only rock, rock and no kitten and the sandy road.\", \"Hey, I bet you thought this was kitten.\", \"It is an ancient mariner, and he stoppeth one of three.\", \"It pleases you to be kind to what appears to be kitten -- but it's not!\", \"It's a blatant plug for Ogg Vorbis, http://www.vorbis.com/\", \"It's a business plan for a new startup, kitten.net.\", \"It's a revised business plan for a new startup, my.kitten.net.\", \"It's a square.\", \"It seems to be a copy of \\\"A Tail of Two Kitties\\\".\", \"It's the Donation of Constantine!\", \"It's this message, nothing more.\", \"Lysine, an essential amino acid.  Well, maybe not for robots.\", \"No kitten here.\", \"The score for a Czech composer's \\\"Kitten-Finding Symphony in C\\\".\", \"This looks like Bradley's \\\"Appearance and Reality\\\", but it's really not.\", \"This non-kitten item no verb.\", \"You feel strangely unfulfilled.\", \"You hit the non-kitten item.  The non-kitten item fails to yowl.\", \"You suddenly yearn for your distant homeland.\", \"You've found the snows of yesteryear!  So that's where they all went to.\", \"Approaching.  One car.  J.  Followed by.  Two car.  M, M.  In five. Minutes.\", \"Free Jon Johansen!\", \"Free Dmitry Sklyarov!\", \"One person shouts \\\"What do we want?\\\" The crowd answers \\\"Free Dmitry!\\\"\", \"Judith Platt insults librarians.\", \"This map is not the territory.\", \"\\\"Go back to Libraria!\\\", says Pat Schroeder.\", \"This is a porcelain kitten-counter.  0, 0, 0, 0, 0...\", \"An old bootable business card, unfortunately cracked down the middle.\", \"A kitten sink, for washing kitten (if only kitten liked water).\", \"A kitten source (to match the kitten sink).\", \"If it's one thing, it's not another.\", \"If it's not one thing, it's another.\", \"A caboodle.\", \"A grin.\", \"A hedgehog.  It looks like it knows something important.\", \"You've found... Oh wait, that's just a cat.\", \"Robot should not be touching that.\", \"Air Guitar!!!  NA na NA na!!\", \"An aromatherapy candle burns with healing light.\", \"You find a bright shiny penny.\", \"It's a free Jon Johansen!\", \"It's a free Dmitry Sklyarov!\", \"The rothe hits!  The rothe hits!\", \"It's an Internet chain letter about sodium laureth sulfate.\", \"Ed Witten sits here, pondering string theory.\", \"Something is written here in the dust.  You read: \\\"rJbotf ndQkttten\\\".\", \"We wish you a merry kitten, and a happy New Year!\", \"Run away!  Run away!\", \"You can see right through this copy of Brin\\'s \\\"Transparent Society\\\".\", \"This copy of \\\"Steal This Book\\\" has been stolen from a bookstore.\", \"It's Roya Naini.\", \"This kit is the fourteenth in a series of kits named with Roman letters.\", \"This is the tenth key you've found so far.\", \"You find a fraud scheme in which loans are used as security for other loans.\", \"It's the phrase \\\"and her\\\", written in ancient Greek.\", \"It's the author of \\\"Randomness and Mathematical Proof\\\".\", \"It's the crusty exoskeleton of an arthropod!\", \"It's Emporer Shaddam the 4th's planet!\", \"It's the triangle leg adjacent to an angle divided by the leg opposite it.\", \"It's a bottle of nail polish remover.\", \"You found netkit! Way to go, robot!\", \"It's the ASCII Floating Head of Seth David Schoen!\", \"A frosted pink party-cake, half eaten.\", \"A bitchin' homemade tesla coil.\", \"Conan O'Brian, sans jawbone.\", \"It's either a mirror, or another soulless kitten-seeking robot.\", \"Preoccupation with finding kitten prevents you from investigating further.\", \"Fonzie sits here, mumbling incoherently about a shark and a pair of waterskis.\", \"The ghost of your dance instructor, his face a paper-white mask of evil.\", \"A bag of groceries taken off the shelf before the expiration date.\", \"A book: Feng Shui, Zen: the art of randomly arranging items that are not kitten.\", \"This might be the fountain of youth, but you'll never know.\", \"Tigerbot Hesh.\", \"Stimutacs.\", \"A canister of pressurized whipped cream, sans whipped cream.\", \"The non-kitten item bites!\", \"A chain hanging from two posts reminds you of the Gateway Arch.\", \"A mathematician calculates the halting probability of a Turing machine.\", \"A number of short theatrical productions are indexed 1, 2, 3, ... n.\", \"A technical university in Australia.\", \"It is -- I just feel something wonderful is about to happen.\", \"It's a Cat 5 cable.\", \"It's a U.S. president.\", \"It's a piece of cloth used to cover a stage in between performances.\", \"The ionosphere seems charged with meaning.\", \"This tomography is like, hella axial, man!\", \"It's your favorite game -- robotfindscatan!\", \"Just a man selling an albatross.\", \"The intermission from a 1930s silent movie.\", \"It's an inverted billiard ball!\", \"The spectre of Sherlock Holmes wills you onwards.\"}",
        "translated_code": "lazy_static::lazy_static! {\n    pub static ref MESSAGES: std::sync::Mutex<[&'static str; 287]> = std::sync::Mutex::new([\n        \"\\\"I pity the fool who mistakes me for kitten!\\\", sez Mr. T.\",\n        \"That's just an old tin can.\",\n        \"It's an altar to the horse god.\",\n        \"A box of dancing mechanical pencils. They dance! They sing!\",\n        \"It's an old Duke Ellington record.\",\n        \"A box of fumigation pellets.\",\n        \"A digital clock. It's stuck at 2:17 PM.\",\n        \"That's just a charred human corpse.\",\n        \"I don't know what that is, but it's not kitten.\",\n        \"An empty shopping bag. Paper or plastic?\",\n        \"Could it be... a big ugly bowling trophy?\",\n        \"A coat hanger hovers in thin air. Odd.\",\n        \"Not kitten, just a packet of Kool-Aid(tm).\",\n        \"A freshly-baked pumpkin pie.\",\n        \"A lone, forgotten comma, sits here, sobbing.\",\n        \"ONE HUNDRED THOUSAND CARPET FIBERS!!!!!\",\n        \"It's Richard Nixon's nose!\",\n        \"It's Lucy Ricardo. \\\"Aaaah, Ricky!\\\", she says.\",\n        \"You stumble upon Bill Gates' stand-up act.\",\n        \"Just an autographed copy of the Kama Sutra.\",\n        \"It's the Will Rogers Highway. Who was Will Rogers, anyway?\",\n        \"It's another robot, more advanced in design than you but strangely immobile.\",\n        \"Leonard Richardson is here, asking people to lick him.\",\n        \"It's a stupid mask, fashioned after a beagle.\",\n        \"Your State Farm Insurance(tm) representative!\",\n        \"It's the local draft board.\",\n        \"Seven 1/4\\\" screws and a piece of plastic.\",\n        \"An 80286 machine.\",\n        \"One of those stupid \\\"Homes of the Stars\\\" maps.\",\n        \"A signpost saying \\\"TO KITTEN\\\". It points in no particular direction.\",\n        \"A hammock stretched between a tree and a volleyball pole.\",\n        \"A Texas Instruments of Destruction calculator.\",\n        \"It's a dark, amphorous blob of matter.\",\n        \"Just a pincushion.\",\n        \"It's a mighty zombie talking about some love and prosperity.\",\n        \"\\\"Dear robot, you may have already won our 10 MILLION DOLLAR prize...\\\"\",\n        \"It's just an object.\",\n        \"A mere collection of pixels.\",\n        \"A badly dented high-hat cymbal lies on its side here.\",\n        \"A marijuana brownie.\",\n        \"A plush Chewbacca.\",\n        \"Daily hunger conditioner from Australasia\",\n        \"Just some stuff.\",\n        \"Why are you touching this when you should be finding kitten?\",\n        \"A glorious fan of peacock feathers.\",\n        \"It's some compromising photos of Babar the Elephant.\",\n        \"A copy of the Weekly World News. Watch out for the chambered nautilus!\",\n        \"It's the proverbial wet blanket.\",\n        \"A \\\"Get Out of Jail Free\\\" card.\",\n        \"An incredibly expensive \\\"Mad About You\\\" collector plate.\",\n        \"Paul Moyer's necktie.\",\n        \"A haircut and a real job. Now you know where to get one!\",\n        \"An automated robot-hater. It frowns disapprovingly at you.\",\n        \"An automated robot-liker. It smiles at you.\",\n        \"It's a black hole. Don't fall in!\",\n        \"Just a big brick wall.\",\n        \"You found kitten! No, just kidding.\",\n        \"Heart of Darkness brand pistachio nuts.\",\n        \"A smoking branding iron shaped like a 24-pin connector.\",\n        \"It's a Java applet.\",\n        \"An abandoned used-car lot.\",\n        \"A shameless plug for Crummy: http://www.crummy.com/\",\n        \"A shameless plug for the UCLA Linux Users Group: http://linux.ucla.edu/\",\n        \"A can of Spam Lite.\",\n        \"This is another fine mess you've gotten us into, Stanley.\",\n        \"It's scenery for \\\"Waiting for Godot\\\".\",\n        \"This grain elevator towers high above you.\",\n        \"A Mentos wrapper.\",\n        \"It's the constellation Pisces.\",\n        \"It's a fly on the wall. Hi, fly!\",\n        \"This kind of looks like kitten, but it's not.\",\n        \"It's a banana! Oh, joy!\",\n        \"A helicopter has crashed here.\",\n        \"Carlos Tarango stands here, doing his best impression of Pat Smear.\",\n        \"A patch of mushrooms grows here.\",\n        \"A patch of grape jelly grows here.\",\n        \"A spindle, and a grindle, and a bucka-wacka-woom!\",\n        \"A geyser sprays water high into the air.\",\n        \"A toenail? What good is a toenail?\",\n        \"You've found the fish! Not that it does you much good in this game.\",\n        \"A Buttertonsils bar.\",\n        \"One of the few remaining discoes.\",\n        \"Ah, the uniform of a Revolutionary-era minuteman.\",\n        \"A punch bowl, filled with punch and lemon slices.\",\n        \"It's nothing but a G-thang, baby.\",\n        \"IT'S ALIVE! AH HA HA HA HA!\",\n        \"This was no boating accident!\",\n        \"Wait! This isn't the poker chip! You've been tricked! DAMN YOU, MENDEZ!\",\n        \"A livery stable! Get your livery!\",\n        \"It's a perpetual immobility machine.\",\n        \"\\\"On this spot in 1962, Henry Winkler was sick.\\\"\",\n        \"There's nothing here; it's just an optical illusion.\",\n        \"The World's Biggest Motzah Ball!\",\n        \"A tribe of cannibals lives here. They eat Malt-O-Meal for breakfast, you know.\",\n        \"This appears to be a rather large stack of trashy romance novels.\",\n        \"Look out! Exclamation points!\",\n        \"A herd of wild coffee mugs slumbers here.\",\n        \"It's a limbo bar! How low can you go?\",\n        \"It's the horizon. Now THAT'S weird.\",\n        \"A vase full of artificial flowers is stuck to the floor here.\",\n        \"A large snake bars your way.\",\n        \"A pair of saloon-style doors swing slowly back and forth here.\",\n        \"It's an ordinary bust of Beethoven... but why is it painted green?\",\n        \"It's TV's lovable wisecracking Crow! \\\"Bite me!\\\", he says.\",\n        \"Hey, look, it's war. What is it good for? Absolutely nothing. Say it again.\",\n        \"It's the amazing self-referential thing that's not kitten.\",\n        \"A flamboyant feather boa. Now you can dress up like Carol Channing!\",\n        \"\\\"Sure hope we get some rain soon,\\\" says Farmer Joe.\",\n        \"\\\"How in heck can I wash my neck if it ain't gonna rain no more?\\\" asks Farmer Al.\",\n        \"\\\"Topsoil's all gone, ma,\\\" weeps Lil' Greg.\",\n        \"This is a large brown bear. Oddly enough, it's currently peeing in the woods.\",\n        \"A team of arctic explorers is camped here.\",\n        \"This object here appears to be Louis Farrakhan's bow tie.\",\n        \"This is the world-famous Chain of Jockstraps.\",\n        \"A trash compactor, compacting away.\",\n        \"This toaster strudel is riddled with bullet holes!\",\n        \"It's a hologram of a crashed helicopter.\",\n        \"This is a television. On screen you see a robot strangely similar to yourself.\",\n        \"This balogna has a first name, it's R-A-N-C-I-D.\",\n        \"A salmon hatchery? Look again. It's merely a single salmon.\",\n        \"It's a rim shot. Ba-da-boom!\",\n        \"It's creepy and it's kooky, mysterious and spooky. It's also somewhat ooky.\",\n        \"This is an anagram.\",\n        \"This object is like an analogy.\",\n        \"It's a symbol. You see in it a model for all symbols everywhere.\",\n        \"The object pushes back at you.\",\n        \"A traffic signal. It appears to have been recently vandalized.\",\n        \"\\\"There is no kitten!\\\" cackles the old crone. You are shocked by her blasphemy.\",\n        \"This is a Lagrange point. Don't come too close now.\",\n        \"The dirty old tramp bemoans the loss of his harmonica.\",\n        \"Look, it's Fanny the Irishman!\",\n        \"What in blazes is this?\",\n        \"It's the instruction manual for a previous version of this game.\",\n        \"A brain cell. Oddly enough, it seems to be functioning.\",\n        \"Tea and/or crumpets.\",\n        \"This jukebox has nothing but Cliff Richards albums in it.\",\n        \"It's a Quaker Oatmeal tube, converted into a drum.\",\n        \"This is a remote control. Being a robot, you keep a wide berth.\",\n        \"It's a roll of industrial-strength copper wire.\",\n        \"Oh boy! Grub! Er, grubs.\",\n        \"A puddle of mud, where the mudskippers play.\",\n        \"Plenty of nothing.\",\n        \"Look at that, it's the Crudmobile.\",\n        \"Just Walter Mattheau and Jack Lemmon.\",\n        \"Two crepes, two crepes in a box.\",\n        \"An autographed copy of \\\"Primary Colors\\\", by Anonymous.\",\n        \"Another rabbit? That's three today!\",\n        \"It's a segmentation fault. Core dumped, by the way.\",\n        \"A historical marker showing the actual location of /dev/null.\",\n        \"Thar's Mobius Dick, the convoluted whale. Arrr!\",\n        \"It's a charcoal briquette, smoking away.\",\n        \"A pizza, melting in the sun.\",\n        \"It's a \\\"HOME ALONE 2: Lost in New York\\\" novelty cup.\",\n        \"A stack of 7 inch floppies wobbles precariously.\",\n        \"It's nothing but a corrupted floppy. Coaster anyone?\",\n        \"A section of glowing phosphor cells sings a song of radiation to you.\",\n        \"This TRS-80 III is eerily silent.\",\n        \"A toilet bowl occupies this space.\",\n        \"This peg-leg is stuck in a knothole!\",\n        \"It's a solitary vacuum tube.\",\n        \"This corroded robot is clutching a mitten.\",\n        \"\\\"Hi, I'm Anson Williams, TV's 'Potsy'.\\\"\",\n        \"This subwoofer was blown out in 1974.\",\n        \"Three half-pennies and a wooden nickel.\",\n        \"It's the missing chapter to \\\"A Clockwork Orange\\\".\",\n        \"It's a burrito stand flyer. \\\"Taqueria El Ranchito\\\".\",\n        \"This smiling family is happy because they eat LARD.\",\n        \"Roger Avery, persona un famoso de los Estados Unidos.\",\n        \"Ne'er but a potted plant.\",\n        \"A parrot, kipping on its back.\",\n        \"A forgotten telephone switchboard.\",\n        \"A forgotten telephone switchboard operator.\",\n        \"It's an automated robot-disdainer. It pretends you're not there.\",\n        \"It's a portable hole. A sign reads: \\\"Closed for the winter\\\".\",\n        \"Just a moldy loaf of bread.\",\n        \"A little glass tub of Carmex. ($.89) Too bad you have no lips.\",\n        \"A Swiss-Army knife. All of its appendages are out. (toothpick lost)\",\n        \"It's a zen simulation, trapped within an ASCII character.\",\n        \"It's a copy of \\\"The Rubaiyat of Spike Schudy\\\".\",\n        \"It's \\\"War and Peace\\\" (unabridged, very small print).\",\n        \"A willing, ripe tomato bemoans your inability to digest fruit.\",\n        \"A robot comedian. You feel amused.\",\n        \"It's KITT, the talking car.\",\n        \"Here's Pete Peterson. His batteries seem to have long gone dead.\",\n        \"\\\"Blup, blup, blup\\\", says the mud pot.\",\n        \"More grist for the mill.\",\n        \"Grind 'em up, spit 'em out, they're twigs.\",\n        \"The boom box cranks out an old Ethel Merman tune.\",\n        \"It's \\\"Finding kitten\\\", published by O'Reilly and Associates.\",\n        \"Pumpkin pie spice.\",\n        \"It's the Bass-Matic '76! Mmm, that's good bass!\",\n        \"\\\"Lend us a fiver 'til Thursday\\\", pleas Andy Capp.\",\n        \"It's a tape of '70s rock. All original hits! All original artists!\",\n        \"You've found the fabled America Online disk graveyard!\",\n        \"Empty jewelboxes litter the landscape.\",\n        \"It's the astounding meta-object.\",\n        \"Ed McMahon stands here, lost in thought. Seeing you, he bellows, \\\"YES SIR!\\\"\",\n        \"...thingy???\",\n        \"It's 1000 secrets the government doesn't want you to know!\",\n        \"The letters O and R.\",\n        \"A magical... magic thing.\",\n        \"It's a moment of silence.\",\n        \"It's Sirhan-Sirhan, looking guilty.\",\n        \"It's \\\"Chicken Soup for the Kitten-seeking Soulless Robot.\\\"\",\n        \"It is a set of wind-up chatter teeth.\",\n        \"It is a cloud shaped like an ox.\",\n        \"You see a snowflake here, melting slowly.\",\n        \"It's a big block of ice. Something seems to be frozen inside it.\",\n        \"Vladimir Lenin's casket rests here.\",\n        \"It's a copy of \\\"Zen and The Art of Robot Maintenance\\\".\",\n        \"This invisible box contains a pantomime horse.\",\n        \"A mason jar lies here open. It's label reads: \\\"do not open!\\\".\",\n        \"A train of thought chugs through here.\",\n        \"This jar of pickles expired in 1957.\",\n        \"Someone's identity disk lies here.\",\n        \"\\\"Yes!\\\" says the bit.\",\n        \"\\\"No!\\\" says the bit.\",\n        \"A dodecahedron bars your way.\",\n        \"Mr. Hooper is here, surfing.\",\n        \"It's a big smoking fish.\",\n        \"You have new mail in /var/spool/robot\",\n        \"Just a monitor with the blue element burnt out.\",\n        \"A pile of coaxial plumbing lies here.\",\n        \"It's a rotten old shoe.\",\n        \"It's a hundred-dollar bill.\",\n        \"It's a Dvorak keyboard.\",\n        \"It's a cardboard box full of 8-tracks.\",\n        \"Just a broken hard drive containg the archives of Nerth Pork.\",\n        \"A broken metronome sits here, it's needle off to one side.\",\n        \"A sign reads: \\\"Go home!\\\"\",\n        \"A sign reads: \\\"No robots allowed!\\\"\",\n        \"It's the handheld robotfindskitten game, by Tiger.\",\n        \"This particular monstrosity appears to be ENIAC.\",\n        \"This is a tasty-looking banana creme pie.\",\n        \"A wireframe model of a hot dog rotates in space here.\",\n        \"Just the empty husk of a locust.\",\n        \"You disturb a murder of crows.\",\n        \"It's a copy of the robotfindskitten EULA.\",\n        \"It's Death.\",\n        \"It's an autographed copy of \\\"Secondary Colors,\\\" by Bob Ross.\",\n        \"It is a marzipan dreadnought that appears to have melted and stuck.\",\n        \"It's a DVD of \\\"Crouching Monkey, Hidden Kitten\\\", region encoded for the moon.\",\n        \"It's Kieran Hervold.  Damn dyslexia!\",\n        \"A non-descript box of crackers.\",\n        \"Carbonated Water, High Fructose Corn Syrup, Color, Phosphoric Acid, Flavors, Caffeine.\",\n        \"\\\"Move along! Nothing to see here!\\\"\",\n        \"It's the embalmed corpse of Vladimir Lenin.\",\n        \"A coupon for one free steak-fish at your local family diner.\",\n        \"A set of keys to a 2001 Rolls Royce. Worthless.\",\n        \"A gravestone stands here.  \\\"Izchak Miller, ascended.\\\"\",\n        \"Someone has written \\\"ad aerarium\\\" on the ground here.\",\n        \"A large blue eye floats in midair.\",\n        \"This appears to be a statue of Perseus.\",\n        \"There is an opulent throne here.\",\n        \"It's a squad of Keystone Kops.\",\n        \"This seems to be junk mail addressed to the finder of the Eye of Larn.\",\n        \"A wondrous and intricate golden amulet.  Too bad you have no neck.\",\n        \"The swampy ground around you seems to stink with disease.\",\n        \"An animate blob of acid.  Being metallic, you keep well away.\",\n        \"It's a copy of Knuth with the chapter on kitten-search algorithms torn out.\",\n        \"A crowd of people, and at the center, a popular misconception.\",\n        \"It's a blind man. When you touch, he exclaims \\\"It's a kitten prospecting robot!\\\"\",\n        \"It's a lost wallet. It's owner didn't have pets, so you discard it.\",\n        \"This place is called Antarctica. There is no kitten here.\",\n        \"It's a mousetrap, baited with soap.\",\n        \"A book with \\\"Don't Panic\\\" in large friendly letters across the cover.\",\n        \"A compendium of haiku about metals.\",\n        \"A discredited cosmology, relic of a bygone era.\",\n        \"A hollow voice says \\\"Plugh\\\".\",\n        \"A knight who says \\\"Either I am an insane knave, or you will find kitten.\\\"\",\n        \"A neural net -- maybe it's trying to recognize kitten.\",\n        \"A screwdriver.\",\n        \"A statue of a girl holding a goose like the one in Gottingen, Germany.\",\n        \"A tetradrachm dated \\\"42 B.C.\\\"\",\n        \"A voice booms out \\\"Onward, kitten soldiers...\\\"\",\n        \"An eminently forgettable zahir.\",\n        \"Apparently, it's Edmund Burke.\",\n        \"For a moment, you feel something in your hands, but it disappears!\",\n        \"Here is a book about Robert Kennedy.\",\n        \"Hey, robot, leave those lists alone.\",\n        \"Ho hum.  Another synthetic a posteriori.\",\n        \"It's Asimov's Laws of Robotics.  You feel a strange affinity for them.\",\n        \"It's Bach's Mass in B-minor!\",\n        \"It's a bug.\",\n        \"It's a synthetic a priori truth!  Immanuel would be so pleased!\",\n        \"It's the Tiki Room.\",\n        \"Just some old play by a Czech playwright, and you can't read Czech.\",\n    ]);\n}",
        "hint": "global_variables",
        "section": "src",
        "file": "globals.rs",
        "error": "",
        "dependent": [],
        "lifetime_hint": [],
        "type": "char *[]",
        "global_variables": [],
        "calle": [],
        "calle_c": [],
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "num_bogus": {
        "source_code": "extern int num_bogus",
        "translated_code": "use lazy_static::lazy_static;\nuse std::sync::atomic::{AtomicI32, Ordering};\n\nlazy_static! {\n    pub static ref NUM_BOGUS: AtomicI32 = AtomicI32::new(0);\n}",
        "hint": "global_variables",
        "section": "src",
        "file": "globals.rs",
        "error": "",
        "dependent": [],
        "lifetime_hint": [],
        "type": "int",
        "global_variables": [],
        "calle": [],
        "calle_c": [],
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "bogus_messages": {
        "source_code": "extern int bogus_messages[]",
        "translated_code": "use lazy_static::lazy_static;\n\nlazy_static! {\n    pub static ref BOGUS_MESSAGES: std::sync::Mutex<Vec<i32>> = \n        std::sync::Mutex::new(Vec::new());\n}",
        "hint": "global_variables",
        "section": "src",
        "file": "globals.rs",
        "error": "",
        "dependent": [],
        "lifetime_hint": [],
        "type": "int []",
        "global_variables": [],
        "calle": [],
        "calle_c": [],
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "used_messages": {
        "source_code": "extern int used_messages[]",
        "translated_code": "use lazy_static::lazy_static;\n\nlazy_static! {\n    pub static ref USED_MESSAGES: std::sync::Mutex<Vec<i32>> = std::sync::Mutex::new(Vec::new());\n}",
        "hint": "global_variables",
        "section": "src",
        "file": "globals.rs",
        "error": "",
        "dependent": [],
        "lifetime_hint": [],
        "type": "int []",
        "global_variables": [],
        "calle": [],
        "calle_c": [],
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "screen": {
        "source_code": "extern int **screen",
        "translated_code": "use lazy_static::lazy_static;\n\nlazy_static! {\n    pub static ref SCREEN: std::sync::Mutex<Option<Box<[Box<[i32]>]>>> = \n        std::sync::Mutex::new(None);\n}",
        "hint": "global_variables",
        "section": "src",
        "file": "globals.rs",
        "error": "",
        "dependent": [],
        "lifetime_hint": [],
        "type": "int **",
        "global_variables": [],
        "calle": [],
        "calle_c": [],
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "ttytype": {
        "source_code": "extern char ttytype[]",
        "translated_code": "use lazy_static::lazy_static;\n\nlazy_static! {\n    pub static ref TTYTYPE: std::sync::Mutex<Vec<u8>> = std::sync::Mutex::new(Vec::new());\n}",
        "hint": "global_variables",
        "section": "src",
        "file": "globals.rs",
        "error": "",
        "dependent": [],
        "lifetime_hint": [],
        "type": "char []",
        "global_variables": [],
        "calle": [],
        "calle_c": [],
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "COLORS": {
        "source_code": "extern int COLORS",
        "translated_code": "use lazy_static::lazy_static;\n\nextern \"C\" {\n    pub static COLORS: std::sync::atomic::AtomicI32;\n}",
        "hint": "global_variables",
        "section": "src",
        "file": "globals.rs",
        "error": "",
        "dependent": [],
        "lifetime_hint": [],
        "type": "int",
        "global_variables": [],
        "calle": [],
        "calle_c": [],
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "COLOR_PAIRS": {
        "source_code": "extern int COLOR_PAIRS",
        "translated_code": "use lazy_static::lazy_static;\n\nlazy_static! {\n    pub static ref COLOR_PAIRS: std::sync::atomic::AtomicI32 = std::sync::atomic::AtomicI32::new(0);\n}",
        "hint": "global_variables",
        "section": "src",
        "file": "globals.rs",
        "error": "",
        "dependent": [],
        "lifetime_hint": [],
        "type": "int",
        "global_variables": [],
        "calle": [],
        "calle_c": [],
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "COLS": {
        "source_code": "extern int COLS",
        "translated_code": "use lazy_static::lazy_static;\n\nlazy_static! {\n    pub static ref COLS: std::sync::atomic::AtomicI32 = std::sync::atomic::AtomicI32::new(0);\n}",
        "hint": "global_variables",
        "section": "src",
        "file": "globals.rs",
        "error": "",
        "dependent": [],
        "lifetime_hint": [],
        "type": "int",
        "global_variables": [],
        "calle": [],
        "calle_c": [],
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "ESCDELAY": {
        "source_code": "extern int ESCDELAY",
        "translated_code": "use lazy_static::lazy_static;\nuse std::sync::atomic::{AtomicI32, Ordering};\n\nlazy_static! {\n    pub static ref ESCDELAY: AtomicI32 = AtomicI32::new(0);\n}",
        "hint": "global_variables",
        "section": "src",
        "file": "globals.rs",
        "error": "",
        "dependent": [],
        "lifetime_hint": [],
        "type": "int",
        "global_variables": [],
        "calle": [],
        "calle_c": [],
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "LINES": {
        "source_code": "extern int LINES",
        "translated_code": "use lazy_static::lazy_static;\n\nlazy_static! {\n    pub static ref LINES: std::sync::atomic::AtomicI32 = std::sync::atomic::AtomicI32::new(0);\n}",
        "hint": "global_variables",
        "section": "src",
        "file": "globals.rs",
        "error": "",
        "dependent": [],
        "lifetime_hint": [],
        "type": "int",
        "global_variables": [],
        "calle": [],
        "calle_c": [],
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "TABSIZE": {
        "source_code": "extern int TABSIZE",
        "translated_code": "use lazy_static::lazy_static;\n\nlazy_static! {\n    pub static ref TABSIZE: std::sync::atomic::AtomicI32 = std::sync::atomic::AtomicI32::new(0);\n}",
        "hint": "global_variables",
        "section": "src",
        "file": "globals.rs",
        "error": "",
        "dependent": [],
        "lifetime_hint": [],
        "type": "int",
        "global_variables": [],
        "calle": [],
        "calle_c": [],
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "finish": {
        "source_code": "void finish(int sig)\n{\n  endwin();\n  printf(\"%c%c%c\", 27, '(', 'B');\n  exit(0);\n}\n\n",
        "translated_code": "pub fn finish(sig: i32) {\n    ncurses::endwin();\n    print!(\"{}{}{}\", 27 as char, '(', 'B');\n    exit(0);\n}",
        "hint": "functions",
        "section": "src",
        "file": "robotfindskitten.rs",
        "error": "",
        "dependent": [],
        "header": "static void finish(int sig)",
        "params": [
            "int sig"
        ],
        "lifetime_hint": [],
        "global_variables": [
            "sig"
        ],
        "calle": [
            "exit",
            "endwin",
            "printf"
        ],
        "calle_c": [
            "exit",
            "endwin",
            "printf"
        ],
        "key": "finish",
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "validchar": {
        "source_code": "int validchar(char a)\n{\n  switch (a)\n  {\n    case '#':\n\n    case ' ':\n\n    case 127:\n      return 0;\n\n  }\n\n  return 1;\n}\n\n",
        "translated_code": "pub fn validchar(a: char) -> i32 {\n    match a {\n        '#' | ' ' | '\\x7f' => 0,\n        _ => 1,\n    }\n}",
        "hint": "functions",
        "section": "src",
        "file": "robotfindskitten.rs",
        "error": "",
        "dependent": [],
        "header": "int validchar(char)",
        "params": [
            "char a"
        ],
        "lifetime_hint": [],
        "global_variables": [
            "a"
        ],
        "calle": [],
        "calle_c": [],
        "key": "validchar",
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "time": {
        "source_code": "pub time: Time",
        "translated_code": "",
        "error": "",
        "dependent": [],
        "lifetime_hint": [],
        "global_variables": [],
        "calle": [],
        "calle_c": [],
        "is_ffi": true,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "MEVENT": {
        "source_code": "typedef struct \n{\n  short id;\n  int x;\n  int y;\n  int z;\n  mmask_t bstate;\n} MEVENT",
        "translated_code": "#[derive(Clone)]\npub struct Mevent {\n    pub id: i16,\n    pub x: i32,\n    pub y: i32,\n    pub z: i32,\n    pub bstate: mmask_t,\n}",
        "hint": "special_types",
        "section": "src",
        "file": "MEVENT.rs",
        "error": "",
        "dependent": [
            "mmask_t"
        ],
        "lifetime_hint": [],
        "type": "<class 'pycparser.c_ast.Struct'>",
        "global_variables": [],
        "calle": [],
        "calle_c": [],
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "robot": {
        "source_code": "extern screen_object robot",
        "translated_code": "use lazy_static::lazy_static;\n\nlazy_static! {\n    pub static ref ROBOT: std::sync::Mutex<Option<ScreenObject>> = \n        std::sync::Mutex::new(None);\n}",
        "hint": "global_variables",
        "section": "src",
        "file": "globals.rs",
        "error": "",
        "dependent": [
            "screen_object"
        ],
        "lifetime_hint": [],
        "type": "screen_object",
        "global_variables": [],
        "calle": [],
        "calle_c": [],
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "kitten": {
        "source_code": "extern screen_object kitten",
        "translated_code": "use lazy_static::lazy_static;\n\nlazy_static! {\n    pub static ref KITTEN: std::sync::Mutex<ScreenObject> = std::sync::Mutex::new(ScreenObject {\n        x: 0,\n        y: 0,\n        color: 0,\n        bold: false,\n        character: '\\0',\n    });\n}",
        "hint": "global_variables",
        "section": "src",
        "file": "globals.rs",
        "error": "",
        "dependent": [
            "screen_object"
        ],
        "lifetime_hint": [],
        "type": "screen_object",
        "global_variables": [],
        "calle": [],
        "calle_c": [],
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "bogus": {
        "source_code": "extern screen_object bogus[]",
        "translated_code": "use lazy_static::lazy_static;\n\nlazy_static! {\n    pub static ref BOGUS: std::sync::Mutex<Vec<ScreenObject>> = \n        std::sync::Mutex::new(Vec::new());\n}",
        "hint": "global_variables",
        "section": "src",
        "file": "globals.rs",
        "error": "",
        "dependent": [
            "screen_object"
        ],
        "lifetime_hint": [],
        "type": "screen_object []",
        "global_variables": [],
        "calle": [],
        "calle_c": [],
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "acs_map": {
        "source_code": "extern chtype acs_map[]",
        "translated_code": "use lazy_static::lazy_static;\n\nlazy_static! {\n    pub static ref ACS_MAP: std::sync::Mutex<[chtype; 128]> = std::sync::Mutex::new([\n        0,       // 0\n        0,       // 1\n        0,       // 2\n        0,       // 3\n        0,       // 4\n        0,       // 5\n        0,       // 6\n        0,       // 7\n        0,       // 8\n        0,       // 9\n        0,       // 10\n        0,       // 11\n        0,       // 12\n        0,       // 13\n        0,       // 14\n        0,       // 15\n        0,       // 16\n        0,       // 17\n        0,       // 18\n        0,       // 19\n        0,       // 20\n        0,       // 21\n        0,       // 22\n        0,       // 23\n        0,       // 24\n        0,       // 25\n        0,       // 26\n        0,       // 27\n        0,       // 28\n        0,       // 29\n        0,       // 30\n        0,       // 31\n        0,       // 32\n        0,       // 33\n        0,       // 34\n        0,       // 35\n        0,       // 36\n        0,       // 37\n        0,       // 38\n        0,       // 39\n        0,       // 40\n        0,       // 41\n        0,       // 42\n        0,       // 43\n        0,       // 44\n        0,       // 45\n        0,       // 46\n        0,       // 47\n        0,       // 48\n        0,       // 49\n        0,       // 50\n        0,       // 51\n        0,       // 52\n        0,       // 53\n        0,       // 54\n        0,       // 55\n        0,       // 56\n        0,       // 57\n        0,       // 58\n        0,       // 59\n        0,       // 60\n        0,       // 61\n        0,       // 62\n        0,       // 63\n        0,       // 64\n        0,       // 65\n        0,       // 66\n        0,       // 67\n        0,       // 68\n        0,       // 69\n        0,       // 70\n        0,       // 71\n        0,       // 72\n        0,       // 73\n        0,       // 74\n        0,       // 75\n        0,       // 76\n        0,       // 77\n        0,       // 78\n        0,       // 79\n        0,       // 80\n        0,       // 81\n        0,       // 82\n        0,       // 83\n        0,       // 84\n        0,       // 85\n        0,       // 86\n        0,       // 87\n        0,       // 88\n        0,       // 89\n        0,       // 90\n        0,       // 91\n        0,       // 92\n        0,       // 93\n        0,       // 94\n        0,       // 95\n        0,       // 96\n        0,       // 97\n        0,       // 98\n        0,       // 99\n        0,       // 100\n        0,       // 101\n        0,       // 102\n        0,       // 103\n        0,       // 104\n        0,       // 105\n        0,       // 106\n        0,       // 107\n        0,       // 108\n        0,       // 109\n        0,       // 110\n        0,       // 111\n        0,       // 112\n        0,       // 113\n        0,       // 114\n        0,       // 115\n        0,       // 116\n        0,       // 117\n        0,       // 118\n        0,       // 119\n        0,       // 120\n        0,       // 121\n        0,       // 122\n        0,       // 123\n        0,       // 124\n        0,       // 125\n        0,       // 126\n        0        // 127\n    ]);\n}",
        "hint": "global_variables",
        "section": "src",
        "file": "globals.rs",
        "error": "",
        "dependent": [
            "chtype"
        ],
        "lifetime_hint": [],
        "type": "chtype []",
        "global_variables": [],
        "calle": [],
        "calle_c": [],
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "curscr": {
        "source_code": "extern WINDOW *curscr",
        "translated_code": "use lazy_static::lazy_static;\n\nlazy_static! {\n    pub static ref curscr: std::sync::Mutex<WinSt> = std::sync::Mutex::new(None);\n}",
        "hint": "global_variables",
        "section": "src",
        "file": "globals.rs",
        "error": "",
        "dependent": [
            "WINDOW"
        ],
        "lifetime_hint": [],
        "type": "WINDOW *",
        "global_variables": [],
        "calle": [],
        "calle_c": [],
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "newscr": {
        "source_code": "extern WINDOW *newscr",
        "translated_code": "use lazy_static::lazy_static;\n\nlazy_static! {\n    pub static ref NEWSCR: std::sync::Mutex<WinSt> = std::sync::Mutex::new(None);\n}",
        "hint": "global_variables",
        "section": "src",
        "file": "globals.rs",
        "error": "",
        "dependent": [
            "WINDOW"
        ],
        "lifetime_hint": [],
        "type": "WINDOW *",
        "global_variables": [],
        "calle": [],
        "calle_c": [],
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "stdscr": {
        "source_code": "extern WINDOW *stdscr",
        "translated_code": "use lazy_static::lazy_static;\n\nlazy_static! {\n    pub static ref stdscr: std::sync::Mutex<WinSt> = std::sync::Mutex::new(None);\n}",
        "hint": "global_variables",
        "section": "src",
        "file": "globals.rs",
        "error": "",
        "dependent": [
            "WINDOW"
        ],
        "lifetime_hint": [],
        "type": "WINDOW *",
        "global_variables": [],
        "calle": [],
        "calle_c": [],
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "initialize_ncurses": {
        "source_code": "void initialize_ncurses()\n{\n  signal(SIGINT, finish);\n  initscr();\n  keypad(stdscr, TRUE);\n  nonl();\n  intrflush(stdscr, FALSE);\n  noecho();\n  cbreak();\n  if (has_colors())\n  {\n    start_color();\n    init_pair(COLOR_BLACK, COLOR_BLACK, COLOR_BLACK);\n    init_pair(COLOR_GREEN, COLOR_GREEN, COLOR_BLACK);\n    init_pair(COLOR_RED, COLOR_RED, COLOR_BLACK);\n    init_pair(COLOR_CYAN, COLOR_CYAN, COLOR_BLACK);\n    init_pair(COLOR_WHITE, COLOR_WHITE, COLOR_BLACK);\n    init_pair(COLOR_MAGENTA, COLOR_MAGENTA, COLOR_BLACK);\n    init_pair(COLOR_BLUE, COLOR_BLUE, COLOR_BLACK);\n    init_pair(COLOR_YELLOW, COLOR_YELLOW, COLOR_BLACK);\n  }\n}\n\n",
        "translated_code": "pub fn initialize_ncurses() {\n    unsafe {\n        libc::signal(libc::SIGINT, finish as libc::sighandler_t);\n    }\n    \n    let window = initscr();\n    keypad(window, true);\n    nl();\n    intrflush(window, false);\n    noecho();\n    cbreak();\n    \n    if has_colors() {\n        start_color();\n        init_pair(ncurses::COLOR_BLACK, ncurses::COLOR_BLACK, ncurses::COLOR_BLACK);\n        init_pair(ncurses::COLOR_GREEN, ncurses::COLOR_GREEN, ncurses::COLOR_BLACK);\n        init_pair(ncurses::COLOR_RED, ncurses::COLOR_RED, ncurses::COLOR_BLACK);\n        init_pair(ncurses::COLOR_CYAN, ncurses::COLOR_CYAN, ncurses::COLOR_BLACK);\n        init_pair(ncurses::COLOR_WHITE, ncurses::COLOR_WHITE, ncurses::COLOR_BLACK);\n        init_pair(ncurses::COLOR_MAGENTA, ncurses::COLOR_MAGENTA, ncurses::COLOR_BLACK);\n        init_pair(ncurses::COLOR_BLUE, ncurses::COLOR_BLUE, ncurses::COLOR_BLACK);\n        init_pair(ncurses::COLOR_YELLOW, ncurses::COLOR_YELLOW, ncurses::COLOR_BLACK);\n    }\n}",
        "hint": "functions",
        "section": "src",
        "file": "robotfindskitten.rs",
        "error": "",
        "dependent": [
            "finish"
        ],
        "header": "void initialize_ncurses()",
        "lifetime_hint": [],
        "global_variables": [],
        "calle": [
            "keypad",
            "has_colors",
            "start_color",
            "intrflush",
            "nonl",
            "init_pair",
            "finish",
            "noecho",
            "cbreak",
            "initscr",
            "signal"
        ],
        "calle_c": [
            "keypad",
            "has_colors",
            "start_color",
            "intrflush",
            "nonl",
            "init_pair",
            "noecho",
            "cbreak",
            "initscr",
            "signal"
        ],
        "key": "initialize_ncurses",
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "cleanup_test_environment": {
        "source_code": "void cleanup_test_environment()\n{\n  endwin();\n  if (screen)\n  {\n    for (int i = 0; i <= 79; i += 1)\n    {\n      if (screen[i])\n      {\n        free(screen[i]);\n        screen[i] = 0;\n      }\n    }\n\n    free(screen);\n    screen = 0;\n  }\n}\n\n",
        "translated_code": "use lazy_static::lazy_static;\n\nlazy_static! {\n    pub static ref SCREEN: std::sync::Mutex<Option<Box<[Box<[i32]>]>>> = \n        std::sync::Mutex::new(None);\n}\n\npub fn cleanup_test_environment() {\n    // Assuming endwin() is an external C function that needs to be called\n    // If there's a Rust equivalent, it should be used instead\n    unsafe { endwin(); }\n\n    // Lock the SCREEN mutex to access the global variable\n    let mut screen_guard = SCREEN.lock().unwrap();\n    \n    // Take ownership of the screen data, replacing it with None\n    if let Some(screen) = screen_guard.take() {\n        // Iterate through each row (0..80 in C, which is 0..80 in Rust since the upper bound is exclusive)\n        for row in screen.iter() {\n            // The row is already a Box<[i32]>, which will be automatically dropped when the screen is dropped\n            // No explicit free needed in Rust\n        }\n        // The entire screen Box<[Box<[i32]>]> will be dropped here, freeing all memory\n    }\n}\n\n// If endwin() is a C function, we need to declare it as extern\nextern \"C\" {\n    fn endwin();\n}",
        "hint": "functions",
        "section": "src",
        "file": "test.rs",
        "error": "",
        "dependent": [
            "screen"
        ],
        "lifetime_hint": [],
        "global_variables": [
            "i",
            "screen"
        ],
        "calle": [
            "free",
            "endwin"
        ],
        "calle_c": [
            "free"
        ],
        "key": "cleanup_test_environment",
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "test_validchar_function": {
        "source_code": "void test_validchar_function()\n{\n  printf(\"Testing validchar function...\\n\");\n  assert(validchar('#') == 0);\n  assert(validchar(' ') == 0);\n  assert(validchar(127) == 0);\n  assert(validchar('a') == 1);\n  assert(validchar('Z') == 1);\n  assert(validchar('0') == 1);\n  assert(validchar('@') == 1);\n  assert(validchar('!') == 1);\n  assert(validchar('~') == 1);\n  printf(\"\u2713 validchar tests passed!\\n\");\n}\n\n",
        "translated_code": "pub fn test_validchar_function() {\n    println!(\"Testing validchar function...\");\n    assert_eq!(validchar('#'), 0);\n    assert_eq!(validchar(' '), 0);\n    assert_eq!(validchar(127 as char), 0);\n    assert_eq!(validchar('a'), 1);\n    assert_eq!(validchar('Z'), 1);\n    assert_eq!(validchar('0'), 1);\n    assert_eq!(validchar('@'), 1);\n    assert_eq!(validchar('!'), 1);\n    assert_eq!(validchar('~'), 1);\n    println!(\"\u2713 validchar tests passed!\");\n}",
        "hint": "functions",
        "section": "src",
        "file": "test.rs",
        "error": "",
        "dependent": [
            "validchar"
        ],
        "lifetime_hint": [],
        "global_variables": [],
        "calle": [
            "assert",
            "validchar",
            "printf"
        ],
        "calle_c": [
            "assert",
            "printf"
        ],
        "key": "test_validchar_function",
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "message": {
        "source_code": "void message(char *message)\n{\n  move(1, 0);\n  clrtoeol();\n  mvprintw(1, 0, \"%.*s\", COLS, message);\n  move(robot.y, robot.x);\n  refresh();\n}\n\n",
        "translated_code": "pub fn message(message: Option<&str>) {\n    // Check if message is None (equivalent to NULL in C)\n    if let Some(msg) = message {\n        // Move cursor to (1, 0)\n        mv(1, 0);\n        // Clear to end of line\n        clrtoeol();\n        // Print message at (1, 0)\n        mvprintw(1, 0, msg);\n        \n        // Get robot position and move cursor there\n        let robot = ROBOT.lock().unwrap();\n        if let Some(r) = robot.as_ref() {\n            mv(r.y, r.x);\n        }\n        \n        // Refresh the screen\n        refresh();\n    }\n}",
        "hint": "functions",
        "section": "src",
        "file": "robotfindskitten.rs",
        "error": "",
        "dependent": [
            "robot"
        ],
        "params": [
            "char *message"
        ],
        "lifetime_hint": [],
        "global_variables": [
            "message",
            "robot"
        ],
        "calle": [
            "move",
            "clrtoeol",
            "message",
            "refresh",
            "mvprintw"
        ],
        "calle_c": [
            "move",
            "refresh",
            "mvprintw",
            "clrtoeol"
        ],
        "key": "message",
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "initialize_robot": {
        "source_code": "void initialize_robot()\n{\n  robot.x = (rand() % (COLS - 1)) + 1;\n  robot.y = (rand() % (((LINES - 1) - 3) + 1)) + 3;\n  robot.character = '#';\n  robot.color = 0;\n  robot.bold = FALSE;\n  screen[robot.x][robot.y] = 0;\n}\n\n",
        "translated_code": "pub fn initialize_robot() {\n    let mut rng = rand::thread_rng();\n    \n    // Lock the ROBOT mutex and modify its contents\n    let mut robot = ROBOT.lock().unwrap();\n    if let Some(ref mut robot) = *robot {\n        let cols = COLS.load(std::sync::atomic::Ordering::Relaxed);\n        robot.x = rng.gen_range(1..(cols - 1)) + 1;  // Match C's rand() % (COLS - 1) + 1\n        let lines = LINES.load(std::sync::atomic::Ordering::Relaxed);\n        robot.y = rng.gen_range(3..lines);\n        robot.character = '#';\n        robot.color = 0;\n        robot.bold = false;\n    }\n\n    // Lock the SCREEN mutex and modify its contents\n    let robot = ROBOT.lock().unwrap();\n    let mut screen = SCREEN.lock().unwrap();\n    if let Some(ref mut screen) = *screen {\n        if let Some(robot) = &*robot {\n            if let Some(row) = screen.get_mut(robot.x as usize) {\n                if let Some(cell) = row.get_mut(robot.y as usize) {\n                    *cell = 0;\n                }\n            }\n        }\n    }\n}",
        "hint": "functions",
        "section": "src",
        "file": "robotfindskitten.rs",
        "error": "",
        "dependent": [
            "robot",
            "screen"
        ],
        "header": "void initialize_robot()",
        "lifetime_hint": [],
        "global_variables": [
            "robot",
            "screen"
        ],
        "calle": [
            "rand"
        ],
        "calle_c": [
            "rand"
        ],
        "key": "initialize_robot",
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "full_draw": {
        "source_code": "void full_draw(screen_object o, bool in_place)\n{\n  attr_t old;\n  short dummy;\n  attr_t new;\n  attr_get(&old, &dummy, 0);\n  new = COLOR_PAIR(o.color);\n  if (o.character == '#')\n  {\n    new |= A_DIM;\n  }\n  if (o.character <= '\\32')\n  {\n    new |= A_ALTCHARSET;\n  }\n  if (o.bold)\n  {\n    new |= A_BOLD;\n  }\n  attrset(new);\n  if (in_place)\n  {\n    printw(\"%c\", o.character);\n  }\n  else\n  {\n    mvprintw(o.y, o.x, \"%c\", o.character);\n    move(o.y, o.x);\n  }\n  attrset(old);\n}\n\n",
        "translated_code": "pub fn full_draw(o: ScreenObject, in_place: bool) {\n    let mut old: attr_t = 0;\n    let mut dummy: i16 = 0;\n    let mut new: attr_t;\n    \n    unsafe {\n        attr_get(&mut old, &mut dummy);\n    }\n    \n    new = COLOR_PAIR(o.color.try_into().unwrap());\n    \n    if o.character == '#' {\n        new |= A_DIM();\n    }\n    if o.character <= '\\x20' {\n        new |= A_ALTCHARSET();\n    }\n    if o.bold {\n        new |= A_BOLD();\n    }\n    \n    unsafe {\n        attrset(new);\n    }\n    \n    if in_place {\n        unsafe {\n            printw(&format!(\"{}\", o.character));\n        }\n    } else {\n        unsafe {\n            mvprintw(o.y, o.x, &format!(\"{}\", o.character));\n            mv(o.y, o.x);\n        }\n    }\n    \n    unsafe {\n        attrset(old);\n    }\n}",
        "hint": "functions",
        "section": "src",
        "file": "robotfindskitten.rs",
        "error": "",
        "dependent": [
            "attr_t",
            "screen_object"
        ],
        "params": [
            "screen_object o",
            "bool in_place"
        ],
        "lifetime_hint": [],
        "global_variables": [
            "o",
            "in_place",
            "old",
            "dummy",
            "new"
        ],
        "calle": [
            "move",
            "mvprintw",
            "attr_get",
            "attrset",
            "printw",
            "COLOR_PAIR"
        ],
        "calle_c": [
            "move",
            "mvprintw",
            "attr_get",
            "attrset",
            "printw",
            "COLOR_PAIR"
        ],
        "key": "full_draw",
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "draw_in_place": {
        "source_code": "void draw_in_place(screen_object o)\n{\n  full_draw(o, TRUE);\n}\n\n",
        "translated_code": "pub fn draw_in_place(o: ScreenObject) {\n    full_draw(o, true);\n}",
        "hint": "functions",
        "section": "src",
        "file": "robotfindskitten.rs",
        "error": "",
        "dependent": [
            "full_draw",
            "screen_object"
        ],
        "params": [
            "screen_object o"
        ],
        "lifetime_hint": [],
        "global_variables": [
            "o"
        ],
        "calle": [
            "full_draw"
        ],
        "calle_c": [],
        "key": "draw_in_place",
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "instructions": {
        "source_code": "void instructions()\n{\n  char dummy;\n  mvprintw(0, 0, \"robotfindskitten v%s\\n\", ver);\n  printw(\"By the illustrious Leonard Richardson (C) 1997, 2000\\n\");\n  printw(\"Written originally for the Nerth Pork robotfindskitten contest\\n\\n\");\n  printw(\"In this game, you are robot (\");\n  draw_in_place(robot);\n  printw(\"). Your job is to find kitten. This task\\n\");\n  printw(\"is complicated by the existence of various things which are not kitten.\\n\");\n  printw(\"Robot must touch items to determine if they are kitten or not. The game\\n\");\n  printw(\"ends when robotfindskitten. Alternatively, you may end the game by hitting\\n\");\n  printw(\"the Esc key. See the documentation for more information.\\n\\n\");\n  printw(\"Press any key to start.\\n\");\n  refresh();\n  dummy = getch();\n  clear();\n}\n\n",
        "translated_code": "pub fn instructions() {\n    let dummy;\n    const VER: &str = \"1.0\"; // Added version constant\n    mvprintw(0, 0, &format!(\"robotfindskitten v{}\\n\", VER));\n    printw(\"By the illustrious Leonard Richardson (C) 1997, 2000\\n\");\n    printw(\"Written originally for the Nerth Pork robotfindskitten contest\\n\\n\");\n    printw(\"In this game, you are robot (\");\n    \n    {\n        let robot_guard = ROBOT.lock().unwrap();\n        if let Some(robot) = robot_guard.as_ref() {\n            draw_in_place(robot.clone());\n        }\n    }\n    \n    printw(\"). Your job is to find kitten. This task\\n\");\n    printw(\"is complicated by the existence of various things which are not kitten.\\n\");\n    printw(\"Robot must touch items to determine if they are kitten or not. The game\\n\");\n    printw(\"ends when robotfindskitten. Alternatively, you may end the game by hitting\\n\");\n    printw(\"the Esc key. See the documentation for more information.\\n\\n\");\n    printw(\"Press any key to start.\\n\");\n    refresh();\n    dummy = getch();\n    clear();\n}",
        "hint": "functions",
        "section": "src",
        "file": "robotfindskitten.rs",
        "error": "",
        "dependent": [
            "draw_in_place",
            "robot"
        ],
        "header": "void instructions()",
        "lifetime_hint": [],
        "global_variables": [
            "dummy",
            "robot"
        ],
        "calle": [
            "refresh",
            "draw_in_place",
            "mvprintw",
            "printw",
            "getch",
            "clear"
        ],
        "calle_c": [
            "refresh",
            "mvprintw",
            "printw",
            "getch",
            "clear"
        ],
        "key": "instructions",
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "draw": {
        "source_code": "void draw(screen_object o)\n{\n  full_draw(o, FALSE);\n}\n\n",
        "translated_code": "pub fn draw(o: ScreenObject) {\n    full_draw(o, false);\n}",
        "hint": "functions",
        "section": "src",
        "file": "robotfindskitten.rs",
        "error": "",
        "dependent": [
            "full_draw",
            "screen_object"
        ],
        "params": [
            "screen_object o"
        ],
        "lifetime_hint": [],
        "global_variables": [
            "o"
        ],
        "calle": [
            "full_draw"
        ],
        "calle_c": [],
        "key": "draw",
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "initialize_kitten": {
        "source_code": "void initialize_kitten()\n{\n  do\n  {\n    kitten.x = (rand() % (COLS - 1)) + 1;\n    kitten.y = (rand() % (((LINES - 1) - 3) + 1)) + 3;\n  }\n  while (screen[kitten.x][kitten.y] != (-1));\n  do\n  {\n    kitten.character = (rand() % ((126 - '!') + 1)) + '!';\n    ;\n  }\n  while (!validchar(kitten.character));\n  screen[kitten.x][kitten.y] = 1;\n  kitten.color = (rand() % 6) + 1;\n  kitten.bold = (rand() % 2) ? (TRUE) : (FALSE);\n}\n\n",
        "translated_code": "pub fn initialize_kitten() {\n    let mut rng = rand::thread_rng();\n    let mut kitten = KITTEN.lock().unwrap();\n    let mut screen = SCREEN.lock().unwrap();\n    \n    // Generate random position until an empty spot is found\n    loop {\n        kitten.x = rng.gen_range(1..COLS.load(std::sync::atomic::Ordering::Relaxed) - 1) + 1;\n        kitten.y = rng.gen_range(3..LINES.load(std::sync::atomic::Ordering::Relaxed) - 1);\n        \n        if let Some(screen_ref) = screen.as_ref() {\n            if screen_ref[kitten.x as usize][kitten.y as usize] == -1 {\n                break;\n            }\n        }\n    }\n    \n    // Generate random valid character\n    loop {\n        kitten.character = rng.gen_range('!'..='~');\n        if validchar(kitten.character) != 0 {\n            break;\n        }\n    }\n    \n    // Update screen and kitten properties\n    if let Some(screen_ref) = screen.as_mut() {\n        screen_ref[kitten.x as usize][kitten.y as usize] = 1;\n    }\n    \n    kitten.color = rng.gen_range(1..=6);\n    kitten.bold = rng.gen_bool(0.5);\n}",
        "hint": "functions",
        "section": "src",
        "file": "robotfindskitten.rs",
        "error": "",
        "dependent": [
            "kitten",
            "screen",
            "validchar"
        ],
        "header": "void initialize_kitten()",
        "lifetime_hint": [],
        "global_variables": [
            "screen",
            "kitten"
        ],
        "calle": [
            "rand",
            "validchar"
        ],
        "calle_c": [
            "rand"
        ],
        "key": "initialize_kitten",
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "play_animation": {
        "source_code": "void play_animation(int input)\n{\n  int counter;\n  for (counter = 4; counter > 0; counter -= 1)\n  {\n    mvaddch(1, (50 + counter) + 1, ' ');\n    move(1, 50 + counter);\n    if ((((input == KEY_RIGHT) || (input == KEY_DOWN)) || (input == KEY_C3)) || (input == KEY_A3))\n    {\n      draw_in_place(kitten);\n    }\n    else\n      draw_in_place(robot);\n    mvaddch(1, 50 - counter, ' ');\n    move(1, (50 - counter) + 1);\n    if ((((input == KEY_RIGHT) || (input == KEY_DOWN)) || (input == KEY_C3)) || (input == KEY_A3))\n    {\n      draw_in_place(robot);\n    }\n    else\n      draw_in_place(kitten);\n    refresh();\n    sleep(1);\n  }\n\n  move(1, 0);\n  addstr(\"You found kitten! Way to go, robot!\");\n  refresh();\n  finish(0);\n}\n\n",
        "translated_code": "pub fn play_animation(input: i32) {\n    for counter in (1..=4).rev() {\n        // First part of animation\n        {\n            // Clear right position\n            // Note: Assuming mvaddch equivalent would be handled by some screen API\n            // move(1, 50 + counter);\n            if (input == KEY_RIGHT) || (input == KEY_DOWN) || (input == KEY_C3) || (input == KEY_A3) {\n                let kitten = KITTEN.lock().unwrap();\n                draw_in_place(kitten.clone());\n            } else {\n                let robot = ROBOT.lock().unwrap();\n                if let Some(robot) = robot.as_ref() {\n                    draw_in_place(robot.clone());\n                }\n            }\n        }\n\n        // Second part of animation\n        {\n            // Clear left position\n            // move(1, (50 - counter) + 1);\n            if (input == KEY_RIGHT) || (input == KEY_DOWN) || (input == KEY_C3) || (input == KEY_A3) {\n                let robot = ROBOT.lock().unwrap();\n                if let Some(robot) = robot.as_ref() {\n                    draw_in_place(robot.clone());\n                }\n            } else {\n                let kitten = KITTEN.lock().unwrap();\n                draw_in_place(kitten.clone());\n            }\n        }\n\n        // Note: Assuming refresh() would be handled by some screen API\n        sleep(Duration::from_secs(1));\n    }\n\n    // Note: Assuming move(1, 0) and addstr would be handled by some screen API\n    // move(1, 0);\n    // addstr(\"You found kitten! Way to go, robot!\");\n    // refresh();\n    finish(0);\n}\n\n// Constants that would be defined elsewhere (assuming they're i32 like in C)\nconst KEY_RIGHT: i32 = 0;\nconst KEY_DOWN: i32 = 0;\nconst KEY_C3: i32 = 0;\nconst KEY_A3: i32 = 0;",
        "hint": "functions",
        "section": "src",
        "file": "robotfindskitten.rs",
        "error": "",
        "dependent": [
            "draw_in_place",
            "finish",
            "kitten",
            "robot"
        ],
        "header": "void play_animation(int)",
        "params": [
            "int input"
        ],
        "lifetime_hint": [],
        "global_variables": [
            "input",
            "counter",
            "kitten",
            "robot"
        ],
        "calle": [
            "move",
            "mvaddch",
            "addstr",
            "refresh",
            "draw_in_place",
            "sleep",
            "finish"
        ],
        "calle_c": [
            "move",
            "addstr",
            "mvaddch",
            "refresh",
            "sleep"
        ],
        "key": "play_animation",
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "initialize_arrays": {
        "source_code": "void initialize_arrays()\n{\n  int counter;\n  int counter2;\n  screen_object empty;\n  int i = 0;\n  screen = malloc((sizeof(int *)) * ((COLS - 1) + 1));\n  for (i = 0; i < ((COLS - 1) + 1); i += 1)\n  {\n    screen[i] = malloc((sizeof(int)) * ((LINES - 1) + 1));\n  }\n\n  empty.x = -1;\n  empty.y = -1;\n  empty.color = 0;\n  empty.bold = FALSE;\n  empty.character = ' ';\n  for (counter = 0; counter <= (COLS - 1); counter += 1)\n  {\n    for (counter2 = 0; counter2 <= (LINES - 1); counter2 += 1)\n    {\n      screen[counter][counter2] = -1;\n    }\n\n  }\n\n  for (counter = 0; counter < ((sizeof(messages)) / (sizeof(char *))); counter += 1)\n  {\n    used_messages[counter] = 0;\n    bogus_messages[counter] = 0;\n    bogus[counter] = empty;\n  }\n\n}\n\n",
        "translated_code": "pub fn initialize_arrays() {\n    // Initialize screen as a 2D array of COLS x LINES\n    {\n        let mut screen = SCREEN.lock().unwrap();\n        let cols = COLS.load(std::sync::atomic::Ordering::Relaxed) as usize;\n        let lines = LINES.load(std::sync::atomic::Ordering::Relaxed) as usize;\n        *screen = Some(\n            (0..cols)\n                .map(|_| (0..lines).map(|_| -1).collect::<Vec<_>>().into_boxed_slice())\n                .collect::<Vec<_>>()\n                .into_boxed_slice(),\n        );\n    }\n\n    // Create empty ScreenObject\n    let empty = ScreenObject {\n        x: -1,\n        y: -1,\n        color: 0,\n        bold: false,\n        character: ' ',\n    };\n\n    // Initialize used_messages, bogus_messages, and bogus arrays\n    {\n        let mut used_messages = USED_MESSAGES.lock().unwrap();\n        let mut bogus_messages = BOGUS_MESSAGES.lock().unwrap();\n        let mut bogus = BOGUS.lock().unwrap();\n\n        let messages_len = MESSAGES.lock().unwrap().len();\n        *used_messages = vec![0; messages_len];\n        *bogus_messages = vec![0; messages_len];\n        *bogus = vec![empty; messages_len];\n    }\n}",
        "hint": "functions",
        "section": "src",
        "file": "robotfindskitten.rs",
        "error": "",
        "dependent": [
            "bogus",
            "bogus_messages",
            "messages",
            "screen",
            "screen_object",
            "used_messages"
        ],
        "header": "void initialize_arrays()",
        "lifetime_hint": [],
        "global_variables": [
            "counter",
            "counter2",
            "empty",
            "i",
            "screen",
            "messages",
            "used_messages",
            "bogus_messages",
            "bogus"
        ],
        "calle": [
            "malloc"
        ],
        "calle_c": [
            "malloc"
        ],
        "key": "initialize_arrays",
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "setup_test_environment": {
        "source_code": "void setup_test_environment()\n{\n  initscr();\n  keypad(stdscr, 1);\n  noecho();\n  cbreak();\n  if (screen == 0)\n  {\n    initialize_arrays();\n  }\n  robot.x = 10;\n  robot.y = 10;\n  robot.character = '#';\n  robot.color = 0;\n  robot.bold = 0;\n  screen[robot.x][robot.y] = 0;\n  kitten.x = 15;\n  kitten.y = 10;\n  kitten.character = '*';\n  kitten.color = 1;\n  kitten.bold = 1;\n  screen[kitten.x][kitten.y] = 1;\n}\n\n",
        "translated_code": "pub fn setup_test_environment() {\n    // Initialize the curses environment\n    initscr();\n    keypad(ncurses::stdscr(), true);\n    noecho();\n    cbreak();\n\n    // Check if screen needs initialization\n    {\n        let mut screen = SCREEN.lock().unwrap();\n        if screen.is_none() {\n            initialize_arrays();\n        }\n    }\n\n    // Set up robot\n    {\n        let mut robot = ROBOT.lock().unwrap();\n        *robot = Some(ScreenObject {\n            x: 10,\n            y: 10,\n            character: '#',\n            color: 0,\n            bold: false,\n        });\n\n        // Update screen position\n        let mut screen = SCREEN.lock().unwrap();\n        if let Some(screen) = screen.as_mut() {\n            screen[10 as usize][10 as usize] = 0;\n        }\n    }\n\n    // Set up kitten\n    {\n        let mut kitten = KITTEN.lock().unwrap();\n        kitten.x = 15;\n        kitten.y = 10;\n        kitten.character = '*';\n        kitten.color = 1;\n        kitten.bold = true;\n\n        // Update screen position\n        let mut screen = SCREEN.lock().unwrap();\n        if let Some(screen) = screen.as_mut() {\n            screen[kitten.x as usize][kitten.y as usize] = 1;\n        }\n    }\n}",
        "hint": "functions",
        "section": "src",
        "file": "test.rs",
        "error": "",
        "dependent": [
            "initialize_arrays",
            "kitten",
            "robot",
            "screen",
            "stdscr"
        ],
        "lifetime_hint": [],
        "global_variables": [
            "stdscr",
            "screen",
            "robot",
            "kitten"
        ],
        "calle": [
            "keypad",
            "initialize_arrays",
            "cbreak",
            "initscr",
            "noecho"
        ],
        "calle_c": [],
        "key": "setup_test_environment",
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "process_input": {
        "source_code": "void process_input(int input)\n{\n  int check_x = robot.x;\n  int check_y = robot.y;\n  switch (input)\n  {\n    case 'L' - 64:\n      wrefresh(curscr);\n      break;\n\n    case KEY_UP:\n\n    case 'k':\n\n    case 'K':\n\n    case 'P' - 64:\n      check_y -= 1;\n      break;\n\n    case KEY_HOME:\n\n    case 'y':\n\n    case 'Y':\n      check_x -= 1;\n      check_y -= 1;\n      break;\n\n    case KEY_PPAGE:\n\n    case 'u':\n\n    case 'U':\n      check_x += 1;\n      check_y -= 1;\n      break;\n\n    case KEY_DOWN:\n\n    case 'j':\n\n    case 'J':\n\n    case 'N' - 64:\n      check_y += 1;\n      break;\n\n    case KEY_END:\n\n    case 'b':\n\n    case 'B':\n      check_x -= 1;\n      check_y += 1;\n      break;\n\n    case KEY_NPAGE:\n\n    case 'n':\n\n    case 'N':\n      check_x += 1;\n      check_y += 1;\n      break;\n\n    case KEY_LEFT:\n\n    case 'h':\n\n    case 'H':\n\n    case 'B' - 64:\n      check_x -= 1;\n      break;\n\n    case KEY_RIGHT:\n\n    case 'l':\n\n    case 'L':\n\n    case 'F' - 64:\n      check_x += 1;\n      break;\n\n    case 0:\n      break;\n\n    default:\n      message(\"Invalid input: Use direction keys or Esc.\");\n      return;\n\n  }\n\n  if ((((check_y < 3) || (check_y > (LINES - 1))) || (check_x < 0)) || (check_x > (COLS - 1)))\n  {\n    return;\n  }\n  if (screen[check_x][check_y] != (-1))\n  {\n    switch (screen[check_x][check_y])\n    {\n      case 0:\n        break;\n\n      case 1:\n        move(1, 0);\n        clrtoeol();\n        play_animation(input);\n        break;\n\n      default:\n        message(messages[bogus_messages[screen[check_x][check_y] - 2]]);\n        break;\n\n    }\n\n    return;\n  }\n  robot.x = check_x;\n  robot.y = check_y;\n}\n\n",
        "translated_code": "pub fn process_input(input: i32) {\n    let mut robot = ROBOT.lock().unwrap();\n    let screen = SCREEN.lock().unwrap();\n    let messages = MESSAGES.lock().unwrap();\n    let bogus_messages = BOGUS_MESSAGES.lock().unwrap();\n\n    let mut check_x = robot.as_ref().unwrap().x;\n    let mut check_y = robot.as_ref().unwrap().y;\n\n    match input {\n        x if x == b'L' as i32 - 64 => {\n            // wrefresh(curscr); - No Rust equivalent available\n        },\n        x if x == ncurses::KEY_UP || x == b'k' as i32 || x == b'K' as i32 || x == b'P' as i32 - 64 => {\n            check_y -= 1;\n        },\n        x if x == ncurses::KEY_HOME || x == b'y' as i32 || x == b'Y' as i32 => {\n            check_x -= 1;\n            check_y -= 1;\n        },\n        x if x == ncurses::KEY_PPAGE || x == b'u' as i32 || x == b'U' as i32 => {\n            check_x += 1;\n            check_y -= 1;\n        },\n        x if x == ncurses::KEY_DOWN || x == b'j' as i32 || x == b'J' as i32 || x == b'N' as i32 - 64 => {\n            check_y += 1;\n        },\n        x if x == ncurses::KEY_END || x == b'b' as i32 || x == b'B' as i32 => {\n            check_x -= 1;\n            check_y += 1;\n        },\n        x if x == ncurses::KEY_NPAGE || x == b'n' as i32 || x == b'N' as i32 => {\n            check_x += 1;\n            check_y += 1;\n        },\n        x if x == ncurses::KEY_LEFT || x == b'h' as i32 || x == b'H' as i32 || x == b'B' as i32 - 64 => {\n            check_x -= 1;\n        },\n        x if x == ncurses::KEY_RIGHT || x == b'l' as i32 || x == b'L' as i32 || x == b'F' as i32 - 64 => {\n            check_x += 1;\n        },\n        0 => {},\n        _ => {\n            message(Some(\"Invalid input: Use direction keys or Esc.\"));\n            return;\n        }\n    }\n\n    if check_y < 3 || check_y > (LINES.load(std::sync::atomic::Ordering::Relaxed) - 1) || check_x < 0 || check_x > (COLS.load(std::sync::atomic::Ordering::Relaxed) - 1) {\n        return;\n    }\n\n    if let Some(screen) = screen.as_ref() {\n        if screen[check_x as usize][check_y as usize] != -1 {\n            match screen[check_x as usize][check_y as usize] {\n                0 => {},\n                1 => {\n                    // move(1, 0); - No Rust equivalent available\n                    // clrtoeol(); - No Rust equivalent available\n                    play_animation(input);\n                },\n                _ => {\n                    let msg_idx = bogus_messages[(screen[check_x as usize][check_y as usize] - 2) as usize];\n                    message(Some(messages[msg_idx as usize]));\n                }\n            }\n            return;\n        }\n    }\n\n    robot.as_mut().unwrap().x = check_x;\n    robot.as_mut().unwrap().y = check_y;\n}",
        "hint": "functions",
        "section": "src",
        "file": "robotfindskitten.rs",
        "error": "",
        "dependent": [
            "bogus_messages",
            "message",
            "messages",
            "play_animation",
            "robot",
            "screen"
        ],
        "header": "void process_input(int)",
        "params": [
            "int input"
        ],
        "lifetime_hint": [],
        "global_variables": [
            "input",
            "check_x",
            "check_y",
            "robot",
            "screen",
            "messages",
            "bogus_messages"
        ],
        "calle": [
            "move",
            "play_animation",
            "clrtoeol",
            "message",
            "wrefresh"
        ],
        "calle_c": [
            "move",
            "wrefresh",
            "clrtoeol"
        ],
        "key": "process_input",
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "test_invalid_input_handling": {
        "source_code": "void test_invalid_input_handling()\n{\n  printf(\"Testing invalid input handling...\\n\");\n  setup_test_environment();\n  int orig_x = robot.x;\n  int orig_y = robot.y;\n  process_input('x');\n  assert((robot.x == orig_x) && (robot.y == orig_y));\n  process_input('1');\n  assert((robot.x == orig_x) && (robot.y == orig_y));\n  process_input(999);\n  assert((robot.x == orig_x) && (robot.y == orig_y));\n  cleanup_test_environment();\n  printf(\"\u2713 Invalid input handling tests passed!\\n\");\n}\n\n",
        "translated_code": "use std::sync::Mutex;\n\npub fn test_invalid_input_handling() {\n    println!(\"Testing invalid input handling...\");\n    setup_test_environment();\n    \n    let robot_lock = ROBOT.lock().unwrap();\n    let robot = robot_lock.as_ref().unwrap();\n    let orig_x = robot.x;\n    let orig_y = robot.y;\n    drop(robot_lock); // Release the lock before calling process_input\n    \n    process_input('x' as i32);\n    {\n        let robot_lock = ROBOT.lock().unwrap();\n        let robot = robot_lock.as_ref().unwrap();\n        assert!(robot.x == orig_x && robot.y == orig_y);\n    }\n    \n    process_input('1' as i32);\n    {\n        let robot_lock = ROBOT.lock().unwrap();\n        let robot = robot_lock.as_ref().unwrap();\n        assert!(robot.x == orig_x && robot.y == orig_y);\n    }\n    \n    process_input(999);\n    {\n        let robot_lock = ROBOT.lock().unwrap();\n        let robot = robot_lock.as_ref().unwrap();\n        assert!(robot.x == orig_x && robot.y == orig_y);\n    }\n    \n    cleanup_test_environment();\n    println!(\"\u2713 Invalid input handling tests passed!\");\n}",
        "hint": "functions",
        "section": "src",
        "file": "test.rs",
        "error": "",
        "dependent": [
            "cleanup_test_environment",
            "process_input",
            "robot",
            "setup_test_environment"
        ],
        "lifetime_hint": [],
        "global_variables": [
            "orig_x",
            "orig_y",
            "robot"
        ],
        "calle": [
            "assert",
            "setup_test_environment",
            "process_input",
            "cleanup_test_environment",
            "printf"
        ],
        "calle_c": [
            "assert",
            "printf"
        ],
        "key": "test_invalid_input_handling",
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "initialize_screen": {
        "source_code": "void initialize_screen()\n{\n  int counter;\n  mvprintw(0, 0, \"robotfindskitten v%s\\n\\n\", ver);\n  for (counter = 0; counter <= (COLS - 1); counter += 1)\n  {\n    printw(\"%c\", 95);\n  }\n\n  for (counter = 0; counter < num_bogus; counter += 1)\n  {\n    draw(bogus[counter]);\n  }\n\n  draw(kitten);\n  draw(robot);\n  refresh();\n}\n\n",
        "translated_code": "pub fn initialize_screen() {\n    // Print version header\n    mvprintw(0, 0, &format!(\"robotfindskitten v{}\\n\\n\", env!(\"CARGO_PKG_VERSION\")));\n\n    // Draw the top border (line of underscores)\n    let cols = COLS.load(Ordering::SeqCst);\n    for _ in 0..cols {\n        printw(\"_\");\n    }\n\n    // Draw all bogus objects\n    let num_bogus = NUM_BOGUS.load(Ordering::SeqCst);\n    {\n        let bogus = BOGUS.lock().unwrap();\n        for counter in 0..num_bogus {\n            if let Some(obj) = bogus.get(counter as usize) {\n                draw(obj.clone());\n            }\n        }\n    }\n\n    // Draw kitten and robot\n    {\n        let kitten = KITTEN.lock().unwrap();\n        draw(kitten.clone());\n    }\n    {\n        let robot = ROBOT.lock().unwrap();\n        if let Some(robot_obj) = &*robot {\n            draw(robot_obj.clone());\n        }\n    }\n\n    refresh();\n}",
        "hint": "functions",
        "section": "src",
        "file": "robotfindskitten.rs",
        "error": "",
        "dependent": [
            "bogus",
            "draw",
            "kitten",
            "num_bogus",
            "robot"
        ],
        "header": "void initialize_screen()",
        "lifetime_hint": [],
        "global_variables": [
            "counter",
            "num_bogus",
            "bogus",
            "kitten",
            "robot"
        ],
        "calle": [
            "draw",
            "refresh",
            "mvprintw",
            "printw"
        ],
        "calle_c": [
            "refresh",
            "mvprintw",
            "printw"
        ],
        "key": "initialize_screen",
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "test_process_input_basic_movement": {
        "source_code": "void test_process_input_basic_movement()\n{\n  printf(\"Testing process_input basic movement...\\n\");\n  setup_test_environment();\n  int orig_x = robot.x;\n  int orig_y = robot.y;\n  screen[orig_x + 1][orig_y] = -1;\n  process_input(0405);\n  assert(robot.x == (orig_x + 1));\n  assert(robot.y == orig_y);\n  screen[orig_x][orig_y] = -1;\n  process_input(0404);\n  assert(robot.x == orig_x);\n  assert(robot.y == orig_y);\n  screen[orig_x][orig_y - 1] = -1;\n  process_input(0403);\n  assert(robot.x == orig_x);\n  assert(robot.y == (orig_y - 1));\n  screen[orig_x][orig_y] = -1;\n  process_input(0402);\n  assert(robot.x == orig_x);\n  assert(robot.y == orig_y);\n  cleanup_test_environment();\n  printf(\"\u2713 process_input basic movement tests passed!\\n\");\n}\n\n",
        "translated_code": "pub fn test_process_input_basic_movement() {\n    println!(\"Testing process_input basic movement...\");\n    setup_test_environment();\n    \n    let robot = ROBOT.lock().unwrap();\n    let orig_x = robot.as_ref().unwrap().x as usize;\n    let orig_y = robot.as_ref().unwrap().y as usize;\n    drop(robot); // Release the lock early\n    \n    {\n        let mut screen = SCREEN.lock().unwrap();\n        if let Some(screen) = screen.as_mut() {\n            screen[orig_x + 1][orig_y] = -1;\n        }\n    }\n    \n    process_input(0o405);\n    {\n        let robot = ROBOT.lock().unwrap();\n        assert_eq!(robot.as_ref().unwrap().x, (orig_x + 1) as i32);\n        assert_eq!(robot.as_ref().unwrap().y, orig_y as i32);\n    }\n    \n    {\n        let mut screen = SCREEN.lock().unwrap();\n        if let Some(screen) = screen.as_mut() {\n            screen[orig_x][orig_y] = -1;\n        }\n    }\n    \n    process_input(0o404);\n    {\n        let robot = ROBOT.lock().unwrap();\n        assert_eq!(robot.as_ref().unwrap().x, orig_x as i32);\n        assert_eq!(robot.as_ref().unwrap().y, orig_y as i32);\n    }\n    \n    {\n        let mut screen = SCREEN.lock().unwrap();\n        if let Some(screen) = screen.as_mut() {\n            screen[orig_x][orig_y - 1] = -1;\n        }\n    }\n    \n    process_input(0o403);\n    {\n        let robot = ROBOT.lock().unwrap();\n        assert_eq!(robot.as_ref().unwrap().x, orig_x as i32);\n        assert_eq!(robot.as_ref().unwrap().y, (orig_y - 1) as i32);\n    }\n    \n    {\n        let mut screen = SCREEN.lock().unwrap();\n        if let Some(screen) = screen.as_mut() {\n            screen[orig_x][orig_y] = -1;\n        }\n    }\n    \n    process_input(0o402);\n    {\n        let robot = ROBOT.lock().unwrap();\n        assert_eq!(robot.as_ref().unwrap().x, orig_x as i32);\n        assert_eq!(robot.as_ref().unwrap().y, orig_y as i32);\n    }\n    \n    cleanup_test_environment();\n    println!(\"\u2713 process_input basic movement tests passed!\");\n}",
        "hint": "functions",
        "section": "src",
        "file": "test.rs",
        "error": "",
        "dependent": [
            "cleanup_test_environment",
            "process_input",
            "robot",
            "screen",
            "setup_test_environment"
        ],
        "lifetime_hint": [],
        "global_variables": [
            "orig_x",
            "orig_y",
            "robot",
            "screen"
        ],
        "calle": [
            "assert",
            "setup_test_environment",
            "process_input",
            "cleanup_test_environment",
            "printf"
        ],
        "calle_c": [
            "assert",
            "printf"
        ],
        "key": "test_process_input_basic_movement",
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "test_process_input_nethack_keys": {
        "source_code": "void test_process_input_nethack_keys()\n{\n  printf(\"Testing process_input NetHack keys...\\n\");\n  setup_test_environment();\n  int orig_x = robot.x;\n  int orig_y = robot.y;\n  screen[orig_x + 1][orig_y] = -1;\n  process_input('l');\n  assert(robot.x == (orig_x + 1));\n  screen[orig_x][orig_y] = -1;\n  process_input('h');\n  assert(robot.x == orig_x);\n  screen[orig_x][orig_y - 1] = -1;\n  process_input('k');\n  assert(robot.y == (orig_y - 1));\n  screen[orig_x][orig_y] = -1;\n  process_input('j');\n  assert(robot.y == orig_y);\n  screen[orig_x + 1][orig_y - 1] = -1;\n  process_input('u');\n  assert(robot.x == (orig_x + 1));\n  assert(robot.y == (orig_y - 1));\n  screen[orig_x][orig_y] = -1;\n  process_input('b');\n  assert(robot.x == orig_x);\n  assert(robot.y == orig_y);\n  cleanup_test_environment();\n  printf(\"\u2713 process_input NetHack key tests passed!\\n\");\n}\n\n",
        "translated_code": "pub fn test_process_input_nethack_keys() {\n    println!(\"Testing process_input NetHack keys...\");\n    setup_test_environment();\n    \n    {\n        let robot = ROBOT.lock().unwrap();\n        let orig_x = robot.as_ref().unwrap().x as usize;\n        let orig_y = robot.as_ref().unwrap().y as usize;\n        \n        {\n            let mut screen = SCREEN.lock().unwrap();\n            let screen = screen.as_mut().unwrap();\n            screen[orig_x + 1][orig_y] = -1;\n        }\n        \n        process_input('l' as i32);\n        \n        {\n            let robot = ROBOT.lock().unwrap();\n            assert_eq!(robot.as_ref().unwrap().x, (orig_x + 1) as i32);\n        }\n        \n        {\n            let mut screen = SCREEN.lock().unwrap();\n            let screen = screen.as_mut().unwrap();\n            screen[orig_x][orig_y] = -1;\n        }\n        \n        process_input('h' as i32);\n        \n        {\n            let robot = ROBOT.lock().unwrap();\n            assert_eq!(robot.as_ref().unwrap().x, orig_x as i32);\n        }\n        \n        {\n            let mut screen = SCREEN.lock().unwrap();\n            let screen = screen.as_mut().unwrap();\n            screen[orig_x][orig_y - 1] = -1;\n        }\n        \n        process_input('k' as i32);\n        \n        {\n            let robot = ROBOT.lock().unwrap();\n            assert_eq!(robot.as_ref().unwrap().y, (orig_y - 1) as i32);\n        }\n        \n        {\n            let mut screen = SCREEN.lock().unwrap();\n            let screen = screen.as_mut().unwrap();\n            screen[orig_x][orig_y] = -1;\n        }\n        \n        process_input('j' as i32);\n        \n        {\n            let robot = ROBOT.lock().unwrap();\n            assert_eq!(robot.as_ref().unwrap().y, orig_y as i32);\n        }\n        \n        {\n            let mut screen = SCREEN.lock().unwrap();\n            let screen = screen.as_mut().unwrap();\n            screen[orig_x + 1][orig_y - 1] = -1;\n        }\n        \n        process_input('u' as i32);\n        \n        {\n            let robot = ROBOT.lock().unwrap();\n            assert_eq!(robot.as_ref().unwrap().x, (orig_x + 1) as i32);\n            assert_eq!(robot.as_ref().unwrap().y, (orig_y - 1) as i32);\n        }\n        \n        {\n            let mut screen = SCREEN.lock().unwrap();\n            let screen = screen.as_mut().unwrap();\n            screen[orig_x][orig_y] = -1;\n        }\n        \n        process_input('b' as i32);\n        \n        {\n            let robot = ROBOT.lock().unwrap();\n            assert_eq!(robot.as_ref().unwrap().x, orig_x as i32);\n            assert_eq!(robot.as_ref().unwrap().y, orig_y as i32);\n        }\n        \n        cleanup_test_environment();\n        println!(\"\u2713 process_input NetHack key tests passed!\");\n    }\n}",
        "hint": "functions",
        "section": "src",
        "file": "test.rs",
        "error": "",
        "dependent": [
            "cleanup_test_environment",
            "process_input",
            "robot",
            "screen",
            "setup_test_environment"
        ],
        "lifetime_hint": [],
        "global_variables": [
            "orig_x",
            "orig_y",
            "robot",
            "screen"
        ],
        "calle": [
            "assert",
            "setup_test_environment",
            "process_input",
            "cleanup_test_environment",
            "printf"
        ],
        "calle_c": [
            "assert",
            "printf"
        ],
        "key": "test_process_input_nethack_keys",
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "test_boundary_checking": {
        "source_code": "void test_boundary_checking()\n{\n  printf(\"Testing boundary checking...\\n\");\n  setup_test_environment();\n  robot.x = 0;\n  robot.y = 10;\n  screen[robot.x][robot.y] = 0;\n  int orig_x = robot.x;\n  process_input(0404);\n  assert(robot.x == orig_x);\n  robot.x = 10;\n  robot.y = 3;\n  screen[robot.x][robot.y] = 0;\n  int orig_y = robot.y;\n  process_input(0403);\n  assert(robot.y == orig_y);\n  cleanup_test_environment();\n  printf(\"\u2713 Boundary checking tests passed!\\n\");\n}\n\n",
        "translated_code": "use lazy_static::lazy_static;\nuse std::sync::Mutex;\n\npub fn test_boundary_checking() {\n    println!(\"Testing boundary checking...\");\n    setup_test_environment();\n    \n    {\n        let mut robot = ROBOT.lock().unwrap();\n        let robot = robot.as_mut().unwrap();\n        robot.x = 0;\n        robot.y = 10;\n        \n        let mut screen = SCREEN.lock().unwrap();\n        let screen = screen.as_mut().unwrap();\n        screen[robot.x as usize][robot.y as usize] = 0;\n    }\n    \n    let orig_x = {\n        let robot = ROBOT.lock().unwrap();\n        robot.as_ref().unwrap().x\n    };\n    \n    process_input(0o404);\n    \n    {\n        let robot = ROBOT.lock().unwrap();\n        assert_eq!(robot.as_ref().unwrap().x, orig_x);\n    }\n    \n    {\n        let mut robot = ROBOT.lock().unwrap();\n        let robot = robot.as_mut().unwrap();\n        robot.x = 10;\n        robot.y = 3;\n        \n        let mut screen = SCREEN.lock().unwrap();\n        let screen = screen.as_mut().unwrap();\n        screen[robot.x as usize][robot.y as usize] = 0;\n    }\n    \n    let orig_y = {\n        let robot = ROBOT.lock().unwrap();\n        robot.as_ref().unwrap().y\n    };\n    \n    process_input(0o403);\n    \n    {\n        let robot = ROBOT.lock().unwrap();\n        assert_eq!(robot.as_ref().unwrap().y, orig_y);\n    }\n    \n    cleanup_test_environment();\n    println!(\"\u2713 Boundary checking tests passed!\");\n}",
        "hint": "functions",
        "section": "src",
        "file": "test.rs",
        "error": "",
        "dependent": [
            "cleanup_test_environment",
            "process_input",
            "robot",
            "screen",
            "setup_test_environment"
        ],
        "lifetime_hint": [],
        "global_variables": [
            "orig_x",
            "orig_y",
            "robot",
            "screen"
        ],
        "calle": [
            "assert",
            "setup_test_environment",
            "process_input",
            "cleanup_test_environment",
            "printf"
        ],
        "calle_c": [
            "assert",
            "printf"
        ],
        "key": "test_boundary_checking",
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "test_emacs_keys": {
        "source_code": "void test_emacs_keys()\n{\n  printf(\"Testing EMACS key movement...\\n\");\n  setup_test_environment();\n  int orig_x = robot.x;\n  int orig_y = robot.y;\n  screen[orig_x + 1][orig_y] = -1;\n  process_input(6);\n  assert(robot.x == (orig_x + 1));\n  screen[orig_x][orig_y] = -1;\n  process_input(2);\n  assert(robot.x == orig_x);\n  screen[orig_x][orig_y - 1] = -1;\n  process_input(16);\n  assert(robot.y == (orig_y - 1));\n  screen[orig_x][orig_y] = -1;\n  process_input(14);\n  assert(robot.y == orig_y);\n  cleanup_test_environment();\n  printf(\"\u2713 EMACS key movement tests passed!\\n\");\n}\n\n",
        "translated_code": "pub fn test_emacs_keys() {\n    println!(\"Testing EMACS key movement...\");\n    setup_test_environment();\n    \n    let robot = ROBOT.lock().unwrap();\n    let orig_x = robot.as_ref().unwrap().x;\n    let orig_y = robot.as_ref().unwrap().y;\n    drop(robot); // Release the lock early\n    \n    {\n        let mut screen = SCREEN.lock().unwrap();\n        screen.as_mut().unwrap()[(orig_x + 1) as usize][orig_y as usize] = -1;\n    }\n    \n    process_input(6);\n    {\n        let robot = ROBOT.lock().unwrap();\n        assert_eq!(robot.as_ref().unwrap().x, orig_x + 1);\n    }\n    \n    {\n        let mut screen = SCREEN.lock().unwrap();\n        screen.as_mut().unwrap()[orig_x as usize][orig_y as usize] = -1;\n    }\n    \n    process_input(2);\n    {\n        let robot = ROBOT.lock().unwrap();\n        assert_eq!(robot.as_ref().unwrap().x, orig_x);\n    }\n    \n    {\n        let mut screen = SCREEN.lock().unwrap();\n        screen.as_mut().unwrap()[orig_x as usize][(orig_y - 1) as usize] = -1;\n    }\n    \n    process_input(16);\n    {\n        let robot = ROBOT.lock().unwrap();\n        assert_eq!(robot.as_ref().unwrap().y, orig_y - 1);\n    }\n    \n    {\n        let mut screen = SCREEN.lock().unwrap();\n        screen.as_mut().unwrap()[orig_x as usize][orig_y as usize] = -1;\n    }\n    \n    process_input(14);\n    {\n        let robot = ROBOT.lock().unwrap();\n        assert_eq!(robot.as_ref().unwrap().y, orig_y);\n    }\n    \n    cleanup_test_environment();\n    println!(\"\u2713 EMACS key movement tests passed!\");\n}",
        "hint": "functions",
        "section": "src",
        "file": "test.rs",
        "error": "",
        "dependent": [
            "cleanup_test_environment",
            "process_input",
            "robot",
            "screen",
            "setup_test_environment"
        ],
        "lifetime_hint": [],
        "global_variables": [
            "orig_x",
            "orig_y",
            "robot",
            "screen"
        ],
        "calle": [
            "assert",
            "setup_test_environment",
            "process_input",
            "cleanup_test_environment",
            "printf"
        ],
        "calle_c": [
            "assert",
            "printf"
        ],
        "key": "test_emacs_keys",
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "play_game": {
        "source_code": "void play_game()\n{\n  int old_x = robot.x;\n  int old_y = robot.y;\n  int input;\n  input = getch();\n  while (((input != 27) && (input != 'q')) && (input != 'Q'))\n  {\n    process_input(input);\n    if (!((old_x == robot.x) && (old_y == robot.y)))\n    {\n      mvaddch(old_y, old_x, ' ');\n      screen[old_x][old_y] = -1;\n      draw(robot);\n      refresh();\n      screen[robot.x][robot.y] = 0;\n      old_x = robot.x;\n      old_y = robot.y;\n    }\n    input = getch();\n  }\n\n  message(\"Bye!\");\n  refresh();\n  finish(0);\n}\n\n",
        "translated_code": "pub fn play_game() {\n    ncurses::initscr();\n    ncurses::keypad(ncurses::stdscr(), true);\n    ncurses::nodelay(ncurses::stdscr(), true);\n\n    let mut old_x = {\n        let robot = ROBOT.lock().unwrap();\n        robot.as_ref().unwrap().x\n    };\n    let mut old_y = {\n        let robot = ROBOT.lock().unwrap();\n        robot.as_ref().unwrap().y\n    };\n    let mut input = ncurses::getch();\n\n    while input != 27 && input != b'q' as i32 && input != b'Q' as i32 {\n        process_input(input);\n\n        let (new_x, new_y) = {\n            let robot = ROBOT.lock().unwrap();\n            let robot = robot.as_ref().unwrap();\n            (robot.x, robot.y)\n        };\n\n        if (old_x != new_x) || (old_y != new_y) {\n            ncurses::mvaddch(old_y as i32, old_x as i32, ' ' as u32);\n            {\n                let mut screen = SCREEN.lock().unwrap();\n                let screen = screen.as_mut().unwrap();\n                screen[old_x as usize][old_y as usize] = -1;\n            }\n\n            {\n                let robot = ROBOT.lock().unwrap();\n                let robot = robot.as_ref().unwrap();\n                draw(robot.clone());\n            }\n\n            ncurses::refresh();\n\n            {\n                let mut screen = SCREEN.lock().unwrap();\n                let screen = screen.as_mut().unwrap();\n                screen[new_x as usize][new_y as usize] = 0;\n            }\n\n            old_x = new_x;\n            old_y = new_y;\n        }\n\n        input = ncurses::getch();\n    }\n\n    message(Some(\"Bye!\"));\n    ncurses::refresh();\n    finish(0);\n}",
        "hint": "functions",
        "section": "src",
        "file": "robotfindskitten.rs",
        "error": "",
        "dependent": [
            "draw",
            "finish",
            "message",
            "process_input",
            "robot",
            "screen"
        ],
        "header": "void play_game()",
        "lifetime_hint": [],
        "global_variables": [
            "old_x",
            "old_y",
            "input",
            "robot",
            "screen"
        ],
        "calle": [
            "draw",
            "mvaddch",
            "message",
            "refresh",
            "process_input",
            "finish",
            "getch"
        ],
        "calle_c": [
            "getch",
            "refresh",
            "mvaddch"
        ],
        "key": "play_game",
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "initialize_bogus": {
        "source_code": "void initialize_bogus()\n{\n  int counter;\n  int index;\n  for (counter = 0; counter < num_bogus; counter += 1)\n  {\n    bogus[counter].color = (rand() % 6) + 1;\n    bogus[counter].bold = (rand() % 2) ? (TRUE) : (FALSE);\n    do\n    {\n      bogus[counter].character = (rand() % ((126 - '!') + 1)) + '!';\n      ;\n    }\n    while (!validchar(bogus[counter].character));\n    do\n    {\n      bogus[counter].x = (rand() % (COLS - 1)) + 1;\n      bogus[counter].y = (rand() % (((LINES - 1) - 3) + 1)) + 3;\n    }\n    while (screen[bogus[counter].x][bogus[counter].y] != (-1));\n    screen[bogus[counter].x][bogus[counter].y] = counter + 2;\n    do\n    {\n      index = rand() % ((sizeof(messages)) / (sizeof(char *)));\n    }\n    while (used_messages[index] != 0);\n    bogus_messages[counter] = index;\n    used_messages[index] = 1;\n  }\n\n}\n\n",
        "translated_code": "pub fn initialize_bogus() {\n    let mut rng = rand::thread_rng();\n    let num_bogus = NUM_BOGUS.load(Ordering::SeqCst);\n    // Load atomic COLS and LINES values\n    let cols_val = COLS.load(Ordering::Relaxed);\n    let lines_val = LINES.load(Ordering::Relaxed);\n    \n    {\n        let mut bogus = BOGUS.lock().unwrap();\n        let mut screen = SCREEN.lock().unwrap();\n        let mut used_messages = USED_MESSAGES.lock().unwrap();\n        let mut bogus_messages = BOGUS_MESSAGES.lock().unwrap();\n        let messages = MESSAGES.lock().unwrap();\n\n        for counter in 0..num_bogus {\n            // Generate color (1-6)\n            let color = rng.gen_range(1..=6);\n            // Generate bold (true/false)\n            let bold = rng.gen_bool(0.5);\n            \n            // Generate valid character\n            let character = loop {\n                let c = rng.gen_range('!'..='~');\n                if validchar(c) != 0 {\n                    break c;\n                }\n            };\n            \n            // Generate valid x,y position\n            let (x, y) = loop {\n                // Use loaded atomic values\n                let x_pos = rng.gen_range(1..cols_val);\n                let y_pos = rng.gen_range(3..=lines_val - 1);\n                if screen.as_ref().unwrap()[x_pos as usize][y_pos as usize] == -1 {\n                    break (x_pos, y_pos);\n                }\n            };\n            \n            // Update screen\n            screen.as_mut().unwrap()[x as usize][y as usize] = counter + 2;\n            \n            // Find unused message index\n            let index = loop {\n                let idx = rng.gen_range(0..messages.len());\n                if used_messages.get(idx).map_or(true, |&v| v == 0) {\n                    break idx;\n                }\n            };\n            \n            // Update bogus entry\n            bogus.push(crate::screen_object::ScreenObject {\n                color,\n                bold,\n                character,\n                x,\n                y,\n            });\n            \n            // Update message tracking\n            bogus_messages.push(index as i32);\n            used_messages[index] = 1;\n        }\n    }\n}",
        "hint": "functions",
        "section": "src",
        "file": "robotfindskitten.rs",
        "error": "",
        "dependent": [
            "bogus",
            "bogus_messages",
            "messages",
            "num_bogus",
            "screen",
            "used_messages",
            "validchar"
        ],
        "header": "void initialize_bogus()",
        "lifetime_hint": [],
        "global_variables": [
            "counter",
            "index",
            "num_bogus",
            "bogus",
            "screen",
            "used_messages",
            "messages",
            "bogus_messages"
        ],
        "calle": [
            "rand",
            "validchar"
        ],
        "calle_c": [
            "rand"
        ],
        "key": "initialize_bogus",
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "test_initialize_functions": {
        "source_code": "void test_initialize_functions()\n{\n  printf(\"Testing initialization functions...\\n\");\n  cleanup_test_environment();\n  initialize_arrays();\n  assert(screen != 0);\n  initialize_robot();\n  assert(robot.character == '#');\n  assert(robot.color == 0);\n  assert(robot.bold == 0);\n  assert((robot.x >= 0) && (robot.x < COLS));\n  ;\n  assert((robot.y >= 3) && (robot.y <= 23));\n  assert(screen[robot.x][robot.y] == 0);\n  initialize_kitten();\n  assert(validchar(kitten.character) == 1);\n  assert((kitten.color >= 1) && (kitten.color <= 6));\n  assert((kitten.x >= 0) && (kitten.x < COLS));\n  assert((kitten.y >= 3) && (kitten.y <= 23));\n  assert(screen[kitten.x][kitten.y] == 1);\n  assert(!((robot.x == kitten.x) && (robot.y == kitten.y)));\n  cleanup_test_environment();\n  printf(\"\u2713 Initialization function tests passed!\\n\");\n}\n\n",
        "translated_code": "pub fn test_initialize_functions() {\n    println!(\"Testing initialization functions...\");\n    cleanup_test_environment();\n    initialize_arrays();\n    \n    {\n        let screen = SCREEN.lock().unwrap();\n        assert!(screen.is_some(), \"screen should be initialized\");\n    }\n\n    initialize_robot();\n    \n    {\n        let robot = ROBOT.lock().unwrap();\n        let robot = robot.as_ref().unwrap();\n        assert_eq!(robot.character, '#');\n        assert_eq!(robot.color, 0);\n        assert!(!robot.bold);\n        assert!((robot.x >= 0) && (robot.x < COLS.load(Ordering::Relaxed)));\n        assert!((robot.y >= 3) && (robot.y <= 23));\n        \n        let screen = SCREEN.lock().unwrap();\n        let screen = screen.as_ref().unwrap();\n        assert_eq!(screen[robot.x as usize][robot.y as usize], 0);\n    }\n\n    initialize_kitten();\n    \n    {\n        let kitten = KITTEN.lock().unwrap();\n        assert_eq!(validchar(kitten.character), 1);\n        assert!((kitten.color >= 1) && (kitten.color <= 6));\n        assert!((kitten.x >= 0) && (kitten.x < COLS.load(Ordering::Relaxed)));\n        assert!((kitten.y >= 3) && (kitten.y <= 23));\n        \n        let screen = SCREEN.lock().unwrap();\n        let screen = screen.as_ref().unwrap();\n        assert_eq!(screen[kitten.x as usize][kitten.y as usize], 1);\n        \n        let robot = ROBOT.lock().unwrap();\n        let robot = robot.as_ref().unwrap();\n        assert!(!(robot.x == kitten.x && robot.y == kitten.y));\n    }\n\n    cleanup_test_environment();\n    println!(\"\u2713 Initialization function tests passed!\");\n}",
        "hint": "functions",
        "section": "src",
        "file": "test.rs",
        "error": "",
        "dependent": [
            "COLS",
            "cleanup_test_environment",
            "initialize_arrays",
            "initialize_kitten",
            "initialize_robot",
            "kitten",
            "robot",
            "screen",
            "validchar"
        ],
        "lifetime_hint": [],
        "global_variables": [
            "screen",
            "robot",
            "COLS",
            "kitten"
        ],
        "calle": [
            "assert",
            "validchar",
            "initialize_arrays",
            "initialize_kitten",
            "initialize_robot",
            "cleanup_test_environment",
            "printf"
        ],
        "calle_c": [
            "assert",
            "printf"
        ],
        "key": "test_initialize_functions",
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "main#test": {
        "source_code": "int main()\n{\n  printf(\"Running robotfindskitten logic tests...\\n\\n\");\n  srand(42);\n  test_validchar_function();\n  test_process_input_basic_movement();\n  test_process_input_nethack_keys();\n  test_emacs_keys();\n  test_boundary_checking();\n  test_invalid_input_handling();\n  test_initialize_functions();\n  printf(\"\\n All tests passed!\\n\");\n  printf(\"Total test functions: 8\\n\");\n  printf(\"The robotfindskitten logic is working correctly!\\n\");\n  return 0;\n}\n\n",
        "translated_code": "use rand::{Rng, SeedableRng};\nuse rand::rngs::StdRng;\n\npub fn main() {\n    println!(\"Running robotfindskitten logic tests...\\n\");\n\n    // Seed the random number generator with a fixed value (42) for reproducibility\n    let mut rng = StdRng::seed_from_u64(42);\n    \n    test_validchar_function();\n    test_process_input_basic_movement();\n    test_process_input_nethack_keys();\n    test_emacs_keys();\n    test_boundary_checking();\n    test_invalid_input_handling();\n    test_initialize_functions();\n    \n    println!(\"\\n All tests passed!\");\n    println!(\"Total test functions: 8\");\n    println!(\"The robotfindskitten logic is working correctly!\");\n}",
        "hint": "functions",
        "section": "src",
        "file": "test.rs",
        "error": "",
        "dependent": [
            "test_boundary_checking",
            "test_emacs_keys",
            "test_initialize_functions",
            "test_invalid_input_handling",
            "test_process_input_basic_movement",
            "test_process_input_nethack_keys",
            "test_validchar_function"
        ],
        "lifetime_hint": [],
        "global_variables": [],
        "calle": [
            "test_validchar_function",
            "test_process_input_nethack_keys",
            "test_invalid_input_handling",
            "srand",
            "test_emacs_keys",
            "test_initialize_functions",
            "test_boundary_checking",
            "printf",
            "test_process_input_basic_movement"
        ],
        "calle_c": [
            "printf",
            "srand"
        ],
        "key": "main#test",
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    },
    "main#robotfindskitten": {
        "source_code": "int main(int argc, char *argv[])\n{\n  if (argc == 1)\n  {\n    num_bogus = 20;\n  }\n  else\n  {\n    num_bogus = atoi(argv[1]);\n    if ((num_bogus < 0) || (num_bogus > ((sizeof(messages)) / (sizeof(char *)))))\n    {\n      printf(\"Run-time parameter must be between 0 and %d.\\n\", (sizeof(messages)) / (sizeof(char *)));\n      exit(0);\n    }\n  }\n  srand(time(0));\n  printf(\"%c%c%c\", 27, '(', 'U');\n  initialize_ncurses();\n  initialize_arrays();\n  initialize_robot();\n  initialize_kitten();\n  initialize_bogus();\n  instructions();\n  initialize_screen();\n  play_game();\n}\n\n",
        "translated_code": "use std::process;\nuse rand::Rng;\n\npub fn main() {\n    let args: Vec<String> = std::env::args().collect();\n    \n    if args.len() == 1 {\n        NUM_BOGUS.store(20, Ordering::SeqCst);\n    } else {\n        let num = args[1].parse::<i32>().unwrap_or_else(|_| {\n            println!(\"Run-time parameter must be between 0 and {}.\", MESSAGES.lock().unwrap().len());\n            process::exit(0);\n        });\n        \n        if num < 0 || num > MESSAGES.lock().unwrap().len() as i32 {\n            println!(\"Run-time parameter must be between 0 and {}.\", MESSAGES.lock().unwrap().len());\n            process::exit(0);\n        }\n        \n        NUM_BOGUS.store(num, Ordering::SeqCst);\n    }\n\n    let mut rng = rand::thread_rng();\n    rng.gen::<u32>(); // Equivalent to srand(time(0)) - seeds the RNG\n    \n    print!(\"{}\", 27 as char);\n    print!(\"{}\", '(');\n    print!(\"{}\", 'U');\n    \n    initialize_ncurses();\n    initialize_arrays();\n    initialize_robot();\n    initialize_kitten();\n    initialize_bogus();\n    instructions();\n    initialize_screen();\n    play_game();\n}",
        "hint": "functions",
        "section": "src",
        "file": "robotfindskitten.rs",
        "error": "",
        "dependent": [
            "initialize_arrays",
            "initialize_bogus",
            "initialize_kitten",
            "initialize_ncurses",
            "initialize_robot",
            "initialize_screen",
            "instructions",
            "messages",
            "num_bogus",
            "play_game",
            "time"
        ],
        "params": [
            "int argc",
            "char *argv[]"
        ],
        "lifetime_hint": [],
        "global_variables": [
            "argc",
            "argv",
            "num_bogus",
            "messages"
        ],
        "calle": [
            "instructions",
            "atoi",
            "initialize_ncurses",
            "srand",
            "initialize_arrays",
            "initialize_bogus",
            "exit",
            "time",
            "initialize_kitten",
            "play_game",
            "initialize_robot",
            "printf",
            "initialize_screen"
        ],
        "calle_c": [
            "atoi",
            "srand",
            "exit",
            "time",
            "printf"
        ],
        "key": "main#robotfindskitten",
        "is_ffi": false,
        "is_cyclic_merged": false,
        "is_pointer_refactored": false,
        "cyclic_merged_items": []
    }
}
