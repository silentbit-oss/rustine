{"fn_data":{"src::robotfindskitten::main_0":"unsafe fn main_0(\n    mut argc: libc::c_int,\n    mut argv: *mut *mut libc::c_char,\n) -> libc::c_int {\n    if argc == 1 as libc::c_int {\n        crate::src::robotfindskitten::num_bogus= 20 as libc::c_int;\n    } else {\n        crate::src::robotfindskitten::num_bogus= atoi(*argv.offset(1 as libc::c_int as isize));\n        if crate::src::robotfindskitten::num_bogus < 0 as libc::c_int\n            || crate::src::robotfindskitten::num_bogus as libc::c_ulong\n                > (::std::mem::size_of::<[*mut libc::c_char; 406]>() as libc::c_ulong)\n                    .wrapping_div(\n                        ::std::mem::size_of::<*mut libc::c_char>() as libc::c_ulong,\n                    )\n        {\n            printf(\n                b\"Run-time parameter must be between 0 and %d.\\n\\0\" as *const u8\n                    as *const libc::c_char,\n                (::std::mem::size_of::<[*mut libc::c_char; 406]>() as libc::c_ulong)\n                    .wrapping_div(\n                        ::std::mem::size_of::<*mut libc::c_char>() as libc::c_ulong,\n                    ),\n            );\n            exit(0 as libc::c_int);\n        }\n    }\n    srand(time(0 as *mut time_t) as libc::c_uint);\n    printf(\n        b\"%c%c%c\\0\" as *const u8 as *const libc::c_char,\n        27 as libc::c_int,\n        '(' as i32,\n        'U' as i32,\n    );\n    initialize_ncurses();\n    initialize_arrays();\n    initialize_robot();\n    initialize_kitten();\n    initialize_bogus();\n    instructions();\n    initialize_screen();\n    play_game();\n    return 0;\n}","src::robotfindskitten::draw":"pub unsafe extern \"C\" fn draw(mut o: screen_object) {\n    full_draw(o, 0 as libc::c_int != 0);\n}","src::robotfindskitten::play_game":"pub unsafe extern \"C\" fn play_game() {\n    let mut old_x = crate::src::robotfindskitten::robot.x;\n    let mut old_y = crate::src::robotfindskitten::robot.y;\n    let mut input: libc::c_int = 0;\n    input= wgetch(crate::src::robotfindskitten::stdscr);\n    while input != 27 as libc::c_int && input != 'q' as i32 && input != 'Q' as i32 {\n        process_input(input);\n        if !(old_x == crate::src::robotfindskitten::robot.x && old_y == crate::src::robotfindskitten::robot.y) {\n            if wmove(crate::src::robotfindskitten::stdscr, old_y, old_x) == -(1 as libc::c_int) {} else {\n                waddch(crate::src::robotfindskitten::stdscr, ' ' as i32 as chtype);\n            };\n            *(*crate::src::robotfindskitten::screen.offset(old_x as isize))\n                .offset(old_y as isize) = -(1 as libc::c_int);\n            draw(crate::src::robotfindskitten::robot);\n            wrefresh(crate::src::robotfindskitten::stdscr);\n            *(*crate::src::robotfindskitten::screen.offset(crate::src::robotfindskitten::robot.x as isize))\n                .offset(crate::src::robotfindskitten::robot.y as isize) = 0 as libc::c_int;\n            old_x= crate::src::robotfindskitten::robot.x;\n            old_y= crate::src::robotfindskitten::robot.y;\n        }\n        input= wgetch(crate::src::robotfindskitten::stdscr);\n    }\n    message(b\"Bye!\\0\" as *const u8 as *const libc::c_char as *mut libc::c_char);\n    wrefresh(crate::src::robotfindskitten::stdscr);\n    finish(0 as libc::c_int);\n}","src::robotfindskitten::finish":"unsafe extern \"C\" fn finish(mut sig: libc::c_int) {\n    endwin();\n    printf(\n        b\"%c%c%c\\0\" as *const u8 as *const libc::c_char,\n        27 as libc::c_int,\n        '(' as i32,\n        'B' as i32,\n    );\n    exit(0 as libc::c_int);\n}","src::robotfindskitten::initialize_robot":"pub unsafe extern \"C\" fn initialize_robot() {\n    crate::src::robotfindskitten::robot.x= rand() % (crate::src::robotfindskitten::COLS - 1 as libc::c_int) + 1 as libc::c_int;\n    crate::src::robotfindskitten::robot.y= rand() % (crate::src::robotfindskitten::LINES - 1 as libc::c_int - 3 as libc::c_int + 1 as libc::c_int)\n        + 3 as libc::c_int;\n    crate::src::robotfindskitten::robot.character= '#' as i32 as libc::c_char;\n    crate::src::robotfindskitten::robot.color= 0 as libc::c_int;\n    crate::src::robotfindskitten::robot.bold= 0 as libc::c_int != 0;\n    *(*crate::src::robotfindskitten::screen.offset(crate::src::robotfindskitten::robot.x as isize)).offset(crate::src::robotfindskitten::robot.y as isize) = 0 as libc::c_int;\n}","src::robotfindskitten::initialize_bogus":"pub unsafe extern \"C\" fn initialize_bogus() {\n    let mut counter: libc::c_int = 0;\n    let mut index: libc::c_int = 0;\n    counter= 0 as libc::c_int;\n    while counter < crate::src::robotfindskitten::num_bogus {\n        crate::src::robotfindskitten::bogus[counter as usize].color= rand() % 6 as libc::c_int + 1 as libc::c_int;\n        crate::src::robotfindskitten::bogus[counter as usize].bold= if rand() % 2 as libc::c_int != 0 {\n            1 as libc::c_int\n        } else {\n            0 as libc::c_int\n        } != 0;\n        loop {\n            crate::src::robotfindskitten::bogus[counter as usize].character= (rand()\n                % (126 as libc::c_int - '!' as i32 + 1 as libc::c_int) + '!' as i32)\n                as libc::c_char;\n            if !(validchar(crate::src::robotfindskitten::bogus[counter as usize].character) == 0) {\n                break;\n            }\n        }\n        loop {\n            crate::src::robotfindskitten::bogus[counter as usize].x= rand() % (crate::src::robotfindskitten::COLS - 1 as libc::c_int) + 1 as libc::c_int;\n            crate::src::robotfindskitten::bogus[counter as usize].y= rand()\n                % (crate::src::robotfindskitten::LINES - 1 as libc::c_int - 3 as libc::c_int + 1 as libc::c_int)\n                + 3 as libc::c_int;\n            if !(*(*crate::src::robotfindskitten::screen.offset(crate::src::robotfindskitten::bogus[counter as usize].x as isize))\n                .offset(crate::src::robotfindskitten::bogus[counter as usize].y as isize) != -(1 as libc::c_int))\n            {\n                break;\n            }\n        }\n        *(*crate::src::robotfindskitten::screen.offset(crate::src::robotfindskitten::bogus[counter as usize].x as isize))\n            .offset(crate::src::robotfindskitten::bogus[counter as usize].y as isize) = counter + 2 as libc::c_int;\n        loop {\n            index= (rand() as libc::c_ulong)\n                .wrapping_rem(\n                    (::std::mem::size_of::<[*mut libc::c_char; 406]>() as libc::c_ulong)\n                        .wrapping_div(\n                            ::std::mem::size_of::<*mut libc::c_char>() as libc::c_ulong,\n                        ),\n                ) as libc::c_int;\n            if !(crate::src::robotfindskitten::used_messages[index as usize] != 0 as libc::c_int) {\n                break;\n            }\n        }\n        crate::src::robotfindskitten::bogus_messages[counter as usize]= index;\n        crate::src::robotfindskitten::used_messages[index as usize]= 1 as libc::c_int;\n        counter+= 1;\n    }\n}","src::robotfindskitten::full_draw":"pub unsafe extern \"C\" fn full_draw(mut o: screen_object, mut in_place: bool) {\n    let mut old: attr_t = 0;\n    let mut dummy: libc::c_short = 0;\n    let mut new: attr_t = 0;\n    wattr_get(crate::src::robotfindskitten::stdscr, core::ptr::addr_of_mut!(old), core::ptr::addr_of_mut!(dummy), 0 as *mut libc::c_void);\n    new= (o.color as chtype) << 0 as libc::c_int + 8 as libc::c_int\n        & ((1 as libc::c_uint) << 8 as libc::c_int).wrapping_sub(1 as libc::c_uint)\n            << 0 as libc::c_int + 8 as libc::c_int;\n    if o.character as libc::c_int == '#' as i32 {\n        new|= (1 as libc::c_uint) << 12 as libc::c_int + 8 as libc::c_int;\n    }\n    if o.character as libc::c_int <= '\\u{1a}' as i32 {\n        new|= (1 as libc::c_uint) << 14 as libc::c_int + 8 as libc::c_int;\n    }\n    if o.bold {\n        new|= (1 as libc::c_uint) << 13 as libc::c_int + 8 as libc::c_int;\n    }\n    wattrset(crate::src::robotfindskitten::stdscr, new as libc::c_int);\n    if in_place {\n        printw(b\"%c\\0\" as *const u8 as *const libc::c_char, o.character as libc::c_int);\n    } else {\n        mvprintw(\n            o.y,\n            o.x,\n            b\"%c\\0\" as *const u8 as *const libc::c_char,\n            o.character as libc::c_int,\n        );\n        wmove(crate::src::robotfindskitten::stdscr, o.y, o.x);\n    }\n    wattrset(crate::src::robotfindskitten::stdscr, old as libc::c_int);\n}","src::robotfindskitten::process_input":"pub unsafe extern \"C\" fn process_input(mut input: libc::c_int) {\n    let mut check_x = crate::src::robotfindskitten::robot.x;\n    let mut check_y = crate::src::robotfindskitten::robot.y;\n    match input {\n        12 => {\n            wrefresh(crate::src::robotfindskitten::curscr);\n        }\n        259 | 107 | 75 | 16 => {\n            check_y-= 1;\n        }\n        262 | 121 | 89 => {\n            check_x-= 1;\n            check_y-= 1;\n        }\n        339 | 117 | 85 => {\n            check_x+= 1;\n            check_y-= 1;\n        }\n        258 | 106 | 74 | 14 => {\n            check_y+= 1;\n        }\n        360 | 98 | 66 => {\n            check_x-= 1;\n            check_y+= 1;\n        }\n        338 | 110 | 78 => {\n            check_x+= 1;\n            check_y+= 1;\n        }\n        260 | 104 | 72 | 2 => {\n            check_x-= 1;\n        }\n        261 | 108 | 76 | 6 => {\n            check_x+= 1;\n        }\n        0 => {}\n        _ => {\n            message(\n                b\"Invalid input: Use direction keys or Esc.\\0\" as *const u8\n                    as *const libc::c_char as *mut libc::c_char,\n            );\n            return;\n        }\n    }\n    if check_y < 3 as libc::c_int || check_y > crate::src::robotfindskitten::LINES - 1 as libc::c_int\n        || check_x < 0 as libc::c_int || check_x > crate::src::robotfindskitten::COLS - 1 as libc::c_int\n    {\n        return;\n    }\n    if *(*crate::src::robotfindskitten::screen.offset(check_x as isize)).offset(check_y as isize)\n        != -(1 as libc::c_int)\n    {\n        match  *(*crate::src::robotfindskitten::screen.offset(check_x as isize)).offset(check_y as isize) {\n            0 => {}\n            1 => {\n                wmove(crate::src::robotfindskitten::stdscr, 1 as libc::c_int, 0 as libc::c_int);\n                wclrtoeol(crate::src::robotfindskitten::stdscr);\n                play_animation(input);\n            }\n            _ => {\n                message(\n                    crate::src::robotfindskitten::messages[crate::src::robotfindskitten::bogus_messages[(*(*crate::src::robotfindskitten::screen.offset(check_x as isize))\n                        .offset(check_y as isize) - 2 as libc::c_int) as usize] as usize],\n                );\n            }\n        }\n        return;\n    }\n    crate::src::robotfindskitten::robot.x= check_x;\n    crate::src::robotfindskitten::robot.y= check_y;\n}","src::robotfindskitten::atoi":"unsafe extern \"C\" fn atoi(mut __nptr: *const libc::c_char) -> libc::c_int {\n    return strtol(\n        __nptr,\n        0 as *mut libc::c_void as *mut *mut libc::c_char,\n        10 as libc::c_int,\n    ) as libc::c_int;\n}","src::robotfindskitten::initialize_ncurses":"pub unsafe extern \"C\" fn initialize_ncurses() {\n    signal(2 as libc::c_int, Some(finish as unsafe extern \"C\" fn(libc::c_int) -> ()));\n    initscr();\n    keypad(crate::src::robotfindskitten::stdscr, 1 as libc::c_int != 0);\n    nonl();\n    intrflush(crate::src::robotfindskitten::stdscr, 0 as libc::c_int != 0);\n    noecho();\n    cbreak();\n    if has_colors() {\n        start_color();\n        init_pair(\n            0 as libc::c_int as libc::c_short,\n            0 as libc::c_int as libc::c_short,\n            0 as libc::c_int as libc::c_short,\n        );\n        init_pair(\n            2 as libc::c_int as libc::c_short,\n            2 as libc::c_int as libc::c_short,\n            0 as libc::c_int as libc::c_short,\n        );\n        init_pair(\n            1 as libc::c_int as libc::c_short,\n            1 as libc::c_int as libc::c_short,\n            0 as libc::c_int as libc::c_short,\n        );\n        init_pair(\n            6 as libc::c_int as libc::c_short,\n            6 as libc::c_int as libc::c_short,\n            0 as libc::c_int as libc::c_short,\n        );\n        init_pair(\n            7 as libc::c_int as libc::c_short,\n            7 as libc::c_int as libc::c_short,\n            0 as libc::c_int as libc::c_short,\n        );\n        init_pair(\n            5 as libc::c_int as libc::c_short,\n            5 as libc::c_int as libc::c_short,\n            0 as libc::c_int as libc::c_short,\n        );\n        init_pair(\n            4 as libc::c_int as libc::c_short,\n            4 as libc::c_int as libc::c_short,\n            0 as libc::c_int as libc::c_short,\n        );\n        init_pair(\n            3 as libc::c_int as libc::c_short,\n            3 as libc::c_int as libc::c_short,\n            0 as libc::c_int as libc::c_short,\n        );\n    }\n}","src::robotfindskitten::play_animation":"pub unsafe extern \"C\" fn play_animation(mut input: libc::c_int) {\n    let mut counter: libc::c_int = 0;\n    counter= 4 as libc::c_int;\n    while counter > 0 as libc::c_int {\n        if wmove(\n            crate::src::robotfindskitten::stdscr,\n            1 as libc::c_int,\n            50 as libc::c_int + counter + 1 as libc::c_int,\n        ) == -(1 as libc::c_int)\n        {} else {\n            waddch(crate::src::robotfindskitten::stdscr, ' ' as i32 as chtype);\n        };\n        wmove(crate::src::robotfindskitten::stdscr, 1 as libc::c_int, 50 as libc::c_int + counter);\n        if input == 0o405 as libc::c_int || input == 0o402 as libc::c_int\n            || input == 0o540 as libc::c_int || input == 0o535 as libc::c_int\n        {\n            draw_in_place(crate::src::robotfindskitten::kitten);\n        } else {\n            draw_in_place(crate::src::robotfindskitten::robot);\n        }\n        if wmove(crate::src::robotfindskitten::stdscr, 1 as libc::c_int, 50 as libc::c_int - counter)\n            == -(1 as libc::c_int)\n        {} else {\n            waddch(crate::src::robotfindskitten::stdscr, ' ' as i32 as chtype);\n        };\n        wmove(crate::src::robotfindskitten::stdscr, 1 as libc::c_int, 50 as libc::c_int - counter + 1 as libc::c_int);\n        if input == 0o405 as libc::c_int || input == 0o402 as libc::c_int\n            || input == 0o540 as libc::c_int || input == 0o535 as libc::c_int\n        {\n            draw_in_place(crate::src::robotfindskitten::robot);\n        } else {\n            draw_in_place(crate::src::robotfindskitten::kitten);\n        }\n        wrefresh(crate::src::robotfindskitten::stdscr);\n        sleep(1 as libc::c_int as libc::c_uint);\n        counter-= 1;\n    }\n    wmove(crate::src::robotfindskitten::stdscr, 1 as libc::c_int, 0 as libc::c_int);\n    waddnstr(\n        crate::src::robotfindskitten::stdscr,\n        b\"You found kitten! Way to go, robot!\\0\" as *const u8 as *const libc::c_char,\n        -(1 as libc::c_int),\n    );\n    wrefresh(crate::src::robotfindskitten::stdscr);\n    finish(0 as libc::c_int);\n}","src::robotfindskitten::message":"pub unsafe extern \"C\" fn message(mut message_0: *mut libc::c_char) {\n    wmove(crate::src::robotfindskitten::stdscr, 1 as libc::c_int, 0 as libc::c_int);\n    wclrtoeol(crate::src::robotfindskitten::stdscr);\n    mvprintw(\n        1 as libc::c_int,\n        0 as libc::c_int,\n        b\"%.*s\\0\" as *const u8 as *const libc::c_char,\n        crate::src::robotfindskitten::COLS,\n        message_0,\n    );\n    wmove(crate::src::robotfindskitten::stdscr, crate::src::robotfindskitten::robot.y, crate::src::robotfindskitten::robot.x);\n    wrefresh(crate::src::robotfindskitten::stdscr);\n}","src::robotfindskitten::initialize_kitten":"pub unsafe extern \"C\" fn initialize_kitten() {\n    loop {\n        crate::src::robotfindskitten::kitten.x= rand() % (crate::src::robotfindskitten::COLS - 1 as libc::c_int) + 1 as libc::c_int;\n        crate::src::robotfindskitten::kitten.y= rand()\n            % (crate::src::robotfindskitten::LINES - 1 as libc::c_int - 3 as libc::c_int + 1 as libc::c_int)\n            + 3 as libc::c_int;\n        if !(*(*crate::src::robotfindskitten::screen.offset(crate::src::robotfindskitten::kitten.x as isize)).offset(crate::src::robotfindskitten::kitten.y as isize)\n            != -(1 as libc::c_int))\n        {\n            break;\n        }\n    }\n    loop {\n        crate::src::robotfindskitten::kitten.character= (rand() % (126 as libc::c_int - '!' as i32 + 1 as libc::c_int)\n            + '!' as i32) as libc::c_char;\n        if !(validchar(crate::src::robotfindskitten::kitten.character) == 0) {\n            break;\n        }\n    }\n    *(*crate::src::robotfindskitten::screen.offset(crate::src::robotfindskitten::kitten.x as isize)).offset(crate::src::robotfindskitten::kitten.y as isize) = 1 as libc::c_int;\n    crate::src::robotfindskitten::kitten.color= rand() % 6 as libc::c_int + 1 as libc::c_int;\n    crate::src::robotfindskitten::kitten.bold= if rand() % 2 as libc::c_int != 0 {\n        1 as libc::c_int\n    } else {\n        0 as libc::c_int\n    } != 0;\n}","src::robotfindskitten::draw_in_place":"pub unsafe extern \"C\" fn draw_in_place(mut o: screen_object) {\n    full_draw(o, 1 as libc::c_int != 0);\n}","src::robotfindskitten::initialize_arrays":"pub unsafe extern \"C\" fn initialize_arrays() {\n    let mut counter: libc::c_int = 0;\n    let mut counter2: libc::c_int = 0;\n    let mut empty = screen_object {\n        x: 0,\n        y: 0,\n        color: 0,\n        bold: false,\n        character: 0,\n    };\n    let mut i = 0 as libc::c_int;\n    crate::src::robotfindskitten::screen= malloc(\n        (::std::mem::size_of::<*mut libc::c_int>() as libc::c_ulong)\n            .wrapping_mul((crate::src::robotfindskitten::COLS - 1 as libc::c_int + 1 as libc::c_int) as libc::c_ulong),\n    ) as *mut *mut libc::c_int;\n    i= 0 as libc::c_int;\n    while i < crate::src::robotfindskitten::COLS - 1 as libc::c_int + 1 as libc::c_int {\n        *crate::src::robotfindskitten::screen.offset(i as isize) = malloc(\n            (::std::mem::size_of::<libc::c_int>() as libc::c_ulong)\n                .wrapping_mul(\n                    (crate::src::robotfindskitten::LINES - 1 as libc::c_int + 1 as libc::c_int) as libc::c_ulong,\n                ),\n        ) as *mut libc::c_int;\n        i+= 1;\n    }\n    empty.x= -(1 as libc::c_int);\n    empty.y= -(1 as libc::c_int);\n    empty.color= 0 as libc::c_int;\n    empty.bold= 0 as libc::c_int != 0;\n    empty.character= ' ' as i32 as libc::c_char;\n    counter= 0 as libc::c_int;\n    while counter <= crate::src::robotfindskitten::COLS - 1 as libc::c_int {\n        counter2= 0 as libc::c_int;\n        while counter2 <= crate::src::robotfindskitten::LINES - 1 as libc::c_int {\n            *(*crate::src::robotfindskitten::screen.offset(counter as isize))\n                .offset(counter2 as isize) = -(1 as libc::c_int);\n            counter2+= 1;\n        }\n        counter+= 1;\n    }\n    counter= 0 as libc::c_int;\n    while (counter as libc::c_ulong)\n        < (::std::mem::size_of::<[*mut libc::c_char; 406]>() as libc::c_ulong)\n            .wrapping_div(::std::mem::size_of::<*mut libc::c_char>() as libc::c_ulong)\n    {\n        crate::src::robotfindskitten::used_messages[counter as usize]= 0 as libc::c_int;\n        crate::src::robotfindskitten::bogus_messages[counter as usize]= 0 as libc::c_int;\n        crate::src::robotfindskitten::bogus[counter as usize]= empty;\n        counter+= 1;\n    }\n}","src::robotfindskitten::initialize_screen":"pub unsafe extern \"C\" fn initialize_screen() {\n    let mut counter: libc::c_int = 0;\n    mvprintw(\n        0 as libc::c_int,\n        0 as libc::c_int,\n        b\"robotfindskitten v%s\\n\\n\\0\" as *const u8 as *const libc::c_char,\n        crate::src::robotfindskitten::ver,\n    );\n    counter= 0 as libc::c_int;\n    while counter <= crate::src::robotfindskitten::COLS - 1 as libc::c_int {\n        printw(b\"%c\\0\" as *const u8 as *const libc::c_char, 95 as libc::c_int);\n        counter+= 1;\n    }\n    counter= 0 as libc::c_int;\n    while counter < crate::src::robotfindskitten::num_bogus {\n        draw(crate::src::robotfindskitten::bogus[counter as usize]);\n        counter+= 1;\n    }\n    draw(crate::src::robotfindskitten::kitten);\n    draw(crate::src::robotfindskitten::robot);\n    wrefresh(crate::src::robotfindskitten::stdscr);\n}","src::robotfindskitten::instructions":"pub unsafe extern \"C\" fn instructions() {\n    let mut dummy: libc::c_char = 0;\n    mvprintw(\n        0 as libc::c_int,\n        0 as libc::c_int,\n        b\"robotfindskitten v%s\\n\\0\" as *const u8 as *const libc::c_char,\n        crate::src::robotfindskitten::ver,\n    );\n    printw(\n        b\"By the illustrious Leonard Richardson (C) 1997, 2000\\n\\0\" as *const u8\n            as *const libc::c_char,\n    );\n    printw(\n        b\"Written originally for the Nerth Pork robotfindskitten contest\\n\\n\\0\"\n            as *const u8 as *const libc::c_char,\n    );\n    printw(b\"In this game, you are robot (\\0\" as *const u8 as *const libc::c_char);\n    draw_in_place(crate::src::robotfindskitten::robot);\n    printw(\n        b\"). Your job is to find kitten. This task\\n\\0\" as *const u8\n            as *const libc::c_char,\n    );\n    printw(\n        b\"is complicated by the existence of various things which are not kitten.\\n\\0\"\n            as *const u8 as *const libc::c_char,\n    );\n    printw(\n        b\"Robot must touch items to determine if they are kitten or not. The game\\n\\0\"\n            as *const u8 as *const libc::c_char,\n    );\n    printw(\n        b\"ends when robotfindskitten. Alternatively, you may end the game by hitting\\n\\0\"\n            as *const u8 as *const libc::c_char,\n    );\n    printw(\n        b\"the Esc key. See the documentation for more information.\\n\\n\\0\" as *const u8\n            as *const libc::c_char,\n    );\n    printw(b\"Press any key to start.\\n\\0\" as *const u8 as *const libc::c_char);\n    wrefresh(crate::src::robotfindskitten::stdscr);\n    dummy= wgetch(crate::src::robotfindskitten::stdscr) as libc::c_char;\n    wclear(crate::src::robotfindskitten::stdscr);\n}","src::robotfindskitten::validchar":"pub unsafe extern \"C\" fn validchar(mut a: libc::c_char) -> libc::c_int {\n    match  a as libc::c_int {\n        35 | 32 | 127 => return 0 as libc::c_int,\n        _ => {}\n    }\n    return 1 as libc::c_int;\n}"},"struct_data":{"src::robotfindskitten::_win_st":"pub struct _win_st {\n    pub _cury: libc::c_short,\n    pub _curx: libc::c_short,\n    pub _maxy: libc::c_short,\n    pub _maxx: libc::c_short,\n    pub _begy: libc::c_short,\n    pub _begx: libc::c_short,\n    pub _flags: libc::c_short,\n    pub _attrs: attr_t,\n    pub _bkgd: chtype,\n    pub _notimeout: bool,\n    pub _clear: bool,\n    pub _leaveok: bool,\n    pub _scroll: bool,\n    pub _idlok: bool,\n    pub _idcok: bool,\n    pub _immed: bool,\n    pub _sync: bool,\n    pub _use_keypad: bool,\n    pub _delay: libc::c_int,\n    pub _line: *mut ldat,\n    pub _regtop: libc::c_short,\n    pub _regbottom: libc::c_short,\n    pub _parx: libc::c_int,\n    pub _pary: libc::c_int,\n    pub _parent: *mut WINDOW,\n    pub _pad: pdat,\n    pub _yoffset: libc::c_short,\n}","src::robotfindskitten::screen_object":"pub struct screen_object {\n    pub x: libc::c_int,\n    pub y: libc::c_int,\n    pub color: libc::c_int,\n    pub bold: bool,\n    pub character: libc::c_char,\n}","src::robotfindskitten::pdat":"pub struct pdat {\n    pub _pad_y: libc::c_short,\n    pub _pad_x: libc::c_short,\n    pub _pad_top: libc::c_short,\n    pub _pad_left: libc::c_short,\n    pub _pad_bottom: libc::c_short,\n    pub _pad_right: libc::c_short,\n}"}}