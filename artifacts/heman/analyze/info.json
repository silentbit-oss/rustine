{
    "special_type": [
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct heman_image_s\n{\n  int width;\n  int height;\n  int nbands;\n  float *data;\n}",
            "name": "heman_image_s",
            "names": [
                "typedef struct heman_image_s heman_image",
                "typedef struct heman_image_s heman_points"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nbands",
                        "type": "int",
                        "definition": [
                            "int nbands"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "float *",
                        "definition": [
                            "float *data"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct heman_image_s heman_image",
            "name": "heman_image",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "struct heman_image_s\n{\n  int width;\n  int height;\n  int nbands;\n  float *data;\n}",
                        "name": "heman_image_s",
                        "names": [
                            "typedef struct heman_image_s heman_image",
                            "typedef struct heman_image_s heman_points"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "width",
                                    "type": "int",
                                    "definition": [
                                        "int width"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "height",
                                    "type": "int",
                                    "definition": [
                                        "int height"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "nbands",
                                    "type": "int",
                                    "definition": [
                                        "int nbands"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "data",
                                    "type": "float *",
                                    "definition": [
                                        "float *data"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct heman_image_s heman_points",
            "name": "heman_points",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "struct heman_image_s\n{\n  int width;\n  int height;\n  int nbands;\n  float *data;\n}",
                        "name": "heman_image_s",
                        "names": [
                            "typedef struct heman_image_s heman_image",
                            "typedef struct heman_image_s heman_points"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "width",
                                    "type": "int",
                                    "definition": [
                                        "int width"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "height",
                                    "type": "int",
                                    "definition": [
                                        "int height"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "nbands",
                                    "type": "int",
                                    "definition": [
                                        "int nbands"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "data",
                                    "type": "float *",
                                    "definition": [
                                        "float *data"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct kmVec3\n{\n  float x;\n  float y;\n  float z;\n} kmVec3",
            "name": "kmVec3",
            "names": [
                "struct kmVec3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "x",
                        "type": "float",
                        "definition": [
                            "float x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "float",
                        "definition": [
                            "float y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z",
                        "type": "float",
                        "definition": [
                            "float z"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct osn_context\n{\n  int16_t *perm;\n  int16_t *permGradIndex3D;\n}",
            "name": "osn_context",
            "names": [
                "struct osn_context"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "perm",
                        "type": "int16_t *",
                        "definition": [
                            "int16_t *perm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "permGradIndex3D",
                        "type": "int16_t *",
                        "definition": [
                            "int16_t *permGradIndex3D"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct kmVec2\n{\n  float x;\n  float y;\n} kmVec2",
            "name": "kmVec2",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "x",
                        "type": "float",
                        "definition": [
                            "float x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "float",
                        "definition": [
                            "float y"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct kmAABB2\n{\n  kmVec2 min;\n  kmVec2 max;\n} kmAABB2",
            "name": "kmAABB2",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "min",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 min"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 max"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct kmAABB3\n{\n  kmVec3 min;\n  kmVec3 max;\n} kmAABB3",
            "name": "kmAABB3",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "min",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 min"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 max"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct kmMat4\n{\n  float mat[16];\n} kmMat4",
            "name": "kmMat4",
            "names": [
                "struct kmMat4"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "mat",
                        "type": "float [16]",
                        "definition": [
                            "float mat[16]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct kmMat3\n{\n  float mat[9];\n} kmMat3",
            "name": "kmMat3",
            "names": [
                "struct kmMat3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "mat",
                        "type": "float [9]",
                        "definition": [
                            "float mat[9]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct kmQuaternion\n{\n  float x;\n  float y;\n  float z;\n  float w;\n} kmQuaternion",
            "name": "kmQuaternion",
            "names": [
                "struct kmQuaternion"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "x",
                        "type": "float",
                        "definition": [
                            "float x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "float",
                        "definition": [
                            "float y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z",
                        "type": "float",
                        "definition": [
                            "float z"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w",
                        "type": "float",
                        "definition": [
                            "float w"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct kmPlane\n{\n  float a;\n  float b;\n  float c;\n  float d;\n} kmPlane",
            "name": "kmPlane",
            "names": [
                "struct kmPlane"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "float",
                        "definition": [
                            "float a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "float",
                        "definition": [
                            "float b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "float",
                        "definition": [
                            "float c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "float",
                        "definition": [
                            "float d"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "typedef enum KM_POINT_CLASSIFICATION\n{\n  POINT_BEHIND_PLANE = -1,\n  POINT_ON_PLANE = 0,\n  POINT_INFRONT_OF_PLANE = 1\n} KM_POINT_CLASSIFICATION",
            "name": "KM_POINT_CLASSIFICATION",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct kmVec4\n{\n  float x;\n  float y;\n  float z;\n  float w;\n} kmVec4",
            "name": "kmVec4",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "x",
                        "type": "float",
                        "definition": [
                            "float x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "float",
                        "definition": [
                            "float y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z",
                        "type": "float",
                        "definition": [
                            "float z"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w",
                        "type": "float",
                        "definition": [
                            "float w"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct kmRay2\n{\n  kmVec2 start;\n  kmVec2 dir;\n} kmRay2",
            "name": "kmRay2",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "start",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 dir"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct kmRay3\n{\n  kmVec3 start;\n  kmVec3 dir;\n} kmRay3",
            "name": "kmRay3",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "start",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 dir"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        }
    ],
    "global_variable": [
        {
            "path": null,
            "name": "_gamma",
            "type": "float",
            "definition": [
                "extern float _gamma"
            ]
        },
        {
            "path": null,
            "name": "INF",
            "type": "const float",
            "definition": [
                "const float INF = 1E20"
            ]
        },
        {
            "path": null,
            "name": "KM_VEC3_NEG_Z",
            "type": "const kmVec3",
            "definition": [
                "const kmVec3 KM_VEC3_NEG_Z = {0, 0, -1}",
                "extern const kmVec3 KM_VEC3_NEG_Z"
            ]
        },
        {
            "path": null,
            "name": "KM_VEC3_POS_Z",
            "type": "const kmVec3",
            "definition": [
                "const kmVec3 KM_VEC3_POS_Z = {0, 0, 1}",
                "extern const kmVec3 KM_VEC3_POS_Z"
            ]
        },
        {
            "path": null,
            "name": "KM_VEC3_POS_Y",
            "type": "const kmVec3",
            "definition": [
                "const kmVec3 KM_VEC3_POS_Y = {0, 1, 0}",
                "extern const kmVec3 KM_VEC3_POS_Y"
            ]
        },
        {
            "path": null,
            "name": "KM_VEC3_NEG_Y",
            "type": "const kmVec3",
            "definition": [
                "const kmVec3 KM_VEC3_NEG_Y = {0, -1, 0}",
                "extern const kmVec3 KM_VEC3_NEG_Y"
            ]
        },
        {
            "path": null,
            "name": "KM_VEC3_NEG_X",
            "type": "const kmVec3",
            "definition": [
                "const kmVec3 KM_VEC3_NEG_X = {-1, 0, 0}",
                "extern const kmVec3 KM_VEC3_NEG_X"
            ]
        },
        {
            "path": null,
            "name": "KM_VEC3_POS_X",
            "type": "const kmVec3",
            "definition": [
                "const kmVec3 KM_VEC3_POS_X = {1, 0, 0}",
                "extern const kmVec3 KM_VEC3_POS_X"
            ]
        },
        {
            "path": null,
            "name": "KM_VEC3_ZERO",
            "type": "const kmVec3",
            "definition": [
                "const kmVec3 KM_VEC3_ZERO = {0, 0, 0}",
                "extern const kmVec3 KM_VEC3_ZERO"
            ]
        },
        {
            "path": null,
            "name": "SEALEVEL",
            "type": "const float",
            "definition": [
                "static const float SEALEVEL = 0.5"
            ]
        },
        {
            "path": null,
            "name": "DEFAULT_STRENGTH",
            "type": "const float",
            "definition": [
                "static const float DEFAULT_STRENGTH = 0.6"
            ]
        },
        {
            "path": null,
            "name": "_occlusion_scale",
            "type": "float",
            "definition": [
                "static float _occlusion_scale = 1.0f"
            ]
        },
        {
            "path": null,
            "name": "gradients2D",
            "type": "const int8_t []",
            "definition": [
                "static const int8_t gradients2D[] = {5, 2, 2, 5, -5, 2, -2, 5, 5, -2, 2, -5, -5, -2, -2, -5}"
            ]
        },
        {
            "path": null,
            "name": "gradients3D",
            "type": "const signed char []",
            "definition": [
                "static const signed char gradients3D[] = {-11, 4, 4, -4, 11, 4, -4, 4, 11, 11, 4, 4, 4, 11, 4, 4, 4, 11, -11, -4, 4, -4, -11, 4, -4, -4, 11, 11, -4, 4, 4, -11, 4, 4, -4, 11, -11, 4, -4, -4, 11, -4, -4, 4, -11, 11, 4, -4, 4, 11, -4, 4, 4, -11, -11, -4, -4, -4, -11, -4, -4, -4, -11, 11, -4, -4, 4, -11, -4, 4, -4, -11}"
            ]
        },
        {
            "path": null,
            "name": "gradients4D",
            "type": "const signed char []",
            "definition": [
                "static const signed char gradients4D[] = {3, 1, 1, 1, 1, 3, 1, 1, 1, 1, 3, 1, 1, 1, 1, 3, -3, 1, 1, 1, -1, 3, 1, 1, -1, 1, 3, 1, -1, 1, 1, 3, 3, -1, 1, 1, 1, -3, 1, 1, 1, -1, 3, 1, 1, -1, 1, 3, -3, -1, 1, 1, -1, -3, 1, 1, -1, -1, 3, 1, -1, -1, 1, 3, 3, 1, -1, 1, 1, 3, -1, 1, 1, 1, -3, 1, 1, 1, -1, 3, -3, 1, -1, 1, -1, 3, -1, 1, -1, 1, -3, 1, -1, 1, -1, 3, 3, -1, -1, 1, 1, -3, -1, 1, 1, -1, -3, 1, 1, -1, -1, 3, -3, -1, -1, 1, -1, -3, -1, 1, -1, -1, -3, 1, -1, -1, -1, 3, 3, 1, 1, -1, 1, 3, 1, -1, 1, 1, 3, -1, 1, 1, 1, -3, -3, 1, 1, -1, -1, 3, 1, -1, -1, 1, 3, -1, -1, 1, 1, -3, 3, -1, 1, -1, 1, -3, 1, -1, 1, -1, 3, -1, 1, -1, 1, -3, -3, -1, 1, -1, -1, -3, 1, -1, -1, -1, 3, -1, -1, -1, 1, -3, 3, 1, -1, -1, 1, 3, -1, -1, 1, 1, -3, -1, 1, 1, -1, -3, -3, 1, -1, -1, -1, 3, -1, -1, -1, 1, -3, -1, -1, 1, -1, -3, 3, -1, -1, -1, 1, -3, -1, -1, 1, -1, -3, -1, 1, -1, -1, -3, -3, -1, -1, -1, -1, -3, -1, -1, -1, -1, -3, -1, -1, -1, -1, -3}"
            ]
        },
        {
            "path": null,
            "name": "KM_VEC2_POS_Y",
            "type": "const kmVec2",
            "definition": [
                "const kmVec2 KM_VEC2_POS_Y = {0, 1}",
                "extern const kmVec2 KM_VEC2_POS_Y"
            ]
        },
        {
            "path": null,
            "name": "KM_VEC2_NEG_Y",
            "type": "const kmVec2",
            "definition": [
                "const kmVec2 KM_VEC2_NEG_Y = {0, -1}",
                "extern const kmVec2 KM_VEC2_NEG_Y"
            ]
        },
        {
            "path": null,
            "name": "KM_VEC2_NEG_X",
            "type": "const kmVec2",
            "definition": [
                "const kmVec2 KM_VEC2_NEG_X = {-1, 0}",
                "extern const kmVec2 KM_VEC2_NEG_X"
            ]
        },
        {
            "path": null,
            "name": "KM_VEC2_POS_X",
            "type": "const kmVec2",
            "definition": [
                "const kmVec2 KM_VEC2_POS_X = {1, 0}",
                "extern const kmVec2 KM_VEC2_POS_X"
            ]
        },
        {
            "path": null,
            "name": "KM_VEC2_ZERO",
            "type": "const kmVec2",
            "definition": [
                "const kmVec2 KM_VEC2_ZERO = {0, 0}",
                "extern const kmVec2 KM_VEC2_ZERO"
            ]
        }
    ],
    "function": [
        {
            "path": null,
            "name": "heman_color_create_gradient",
            "header": "heman_image *heman_color_create_gradient(int width, int num_colors, const int *cp_locations, const heman_color *cp_colors)",
            "params": [
                "int width",
                "int num_colors",
                "const int *cp_locations",
                "const heman_color *cp_values"
            ],
            "definition": "heman_image *heman_color_create_gradient(int width, int num_colors, const int *cp_locations, const heman_color *cp_values)\n{\n  assert((width > 0) && (num_colors >= 2));\n  assert(cp_locations[0] == 0);\n  assert(cp_locations[num_colors - 1] == (width - 1));\n  float *f32colors = malloc(((sizeof(float)) * 3) * num_colors);\n  float inv = 1.0f / 255.0f;\n  float *f32color = f32colors;\n  unsigned int f32color_idx = 0;\n  const heman_color *u32color = cp_values;\n  unsigned int u32color_idx = 0;\n  for (int index = 0; index < num_colors; index += 1)\n  {\n    heman_color rgb = u32color[u32color_idx];\n    u32color_idx += 1;\n    float r = ((float) (rgb >> 16)) * inv;\n    float g = ((float) ((rgb >> 8) & 0xff)) * inv;\n    float b = ((float) (rgb & 0xff)) * inv;\n    f32color[f32color_idx] = pow(r, _gamma);\n    f32color_idx += 1;\n    *((&f32color[f32color_idx])++) = pow(g, _gamma);\n    *((&f32color[f32color_idx])++) = pow(b, _gamma);\n  }\n\n  heman_image *result = heman_image_create(width, 1, 3);\n  int index0 = 0;\n  int index1 = 1;\n  float *dst = result->data;\n  unsigned int dst_idx = 0;\n  float t;\n  float invgamma = 1.0f / _gamma;\n  for (int x = 0; x < width; x += 1)\n  {\n    helper_heman_color_create_gradient_1(&index0, &index1, &dst_idx, &t, &x, num_colors, cp_locations, f32colors, dst, invgamma);\n  }\n\n  free(f32colors);\n  return result;\n}\n\n",
            "calle": [
                "assert",
                "free",
                "helper_heman_color_create_gradient_1",
                "heman_image_create",
                "malloc",
                "pow"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_colors",
                        "type": "int",
                        "definition": [
                            "int num_colors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cp_locations",
                        "type": "const int *",
                        "definition": [
                            "const int *cp_locations"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cp_values",
                        "type": "const heman_color *",
                        "definition": [
                            "const heman_color *cp_values"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f32colors",
                        "type": "float *",
                        "definition": [
                            "float *f32colors = malloc(((sizeof(float)) * 3) * num_colors)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inv",
                        "type": "float",
                        "definition": [
                            "float inv = 1.0f / 255.0f"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f32color",
                        "type": "float *",
                        "definition": [
                            "float *f32color = f32colors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f32color_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int f32color_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "u32color",
                        "type": "const heman_color *",
                        "definition": [
                            "const heman_color *u32color = cp_values"
                        ]
                    },
                    {
                        "path": null,
                        "name": "u32color_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int u32color_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "int",
                        "definition": [
                            "int index = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rgb",
                        "type": "heman_color",
                        "definition": [
                            "heman_color rgb = u32color[u32color_idx]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "float",
                        "definition": [
                            "float r = ((float) (rgb >> 16)) * inv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "g",
                        "type": "float",
                        "definition": [
                            "float g = ((float) ((rgb >> 8) & 0xff)) * inv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "float",
                        "definition": [
                            "float b = ((float) (rgb & 0xff)) * inv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *result = heman_image_create(width, 1, 3)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index0",
                        "type": "int",
                        "definition": [
                            "int index0 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index1",
                        "type": "int",
                        "definition": [
                            "int index1 = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float *",
                        "definition": [
                            "float *dst = result->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "float",
                        "definition": [
                            "float t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invgamma",
                        "type": "float",
                        "definition": [
                            "float invgamma = 1.0f / _gamma"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "_gamma",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_color_set_gamma",
            "header": "void heman_color_set_gamma(float f)",
            "params": [
                "float g"
            ],
            "definition": "void heman_color_set_gamma(float g)\n{\n  _gamma = g;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "g",
                        "type": "float",
                        "definition": [
                            "float g"
                        ]
                    },
                    {
                        "path": null,
                        "name": "_gamma",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_color_apply_gradient",
            "header": "heman_image *heman_color_apply_gradient(heman_image *heightmap, float minheight, float maxheight, heman_image *gradient)",
            "params": [
                "heman_image *heightmap",
                "float minheight",
                "float maxheight",
                "heman_image *gradient"
            ],
            "definition": "heman_image *heman_color_apply_gradient(heman_image *heightmap, float minheight, float maxheight, heman_image *gradient)\n{\n  assert(heightmap->nbands == 1);\n  assert(gradient->height == 1);\n  assert(gradient->nbands == 3);\n  int w = heightmap->width;\n  int h = heightmap->height;\n  heman_image *result = heman_image_create(w, h, 3);\n  int size = result->height * result->width;\n  float *dst = result->data;\n  unsigned int dst_idx = 0;\n  const float *src = heightmap->data;\n  unsigned int src_idx = 0;\n  float scale = 1.0f / (maxheight - minheight);\n  for (int i = 0; i < size; i += 1, dst_idx += 3, src_idx += 1)\n  {\n    float u = (0.0f > ((1.0f > ((src[src_idx] - minheight) * scale)) ? ((src[src_idx] - minheight) * scale) : (1.0f))) ? (0.0f) : ((1.0f > ((src[src_idx] - minheight) * scale)) ? ((src[src_idx] - minheight) * scale) : (1.0f));\n    heman_image_sample(gradient, u, 0.5f, dst);\n  }\n\n  return result;\n}\n\n",
            "calle": [
                "assert",
                "heman_image_create",
                "heman_image_sample"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "heightmap",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *heightmap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minheight",
                        "type": "float",
                        "definition": [
                            "float minheight"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxheight",
                        "type": "float",
                        "definition": [
                            "float maxheight"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gradient",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *gradient"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w",
                        "type": "int",
                        "definition": [
                            "int w = heightmap->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "int",
                        "definition": [
                            "int h = heightmap->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *result = heman_image_create(w, h, 3)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = result->height * result->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float *",
                        "definition": [
                            "float *dst = result->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "const float *",
                        "definition": [
                            "const float *src = heightmap->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "float",
                        "definition": [
                            "float scale = 1.0f / (maxheight - minheight)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "u",
                        "type": "float",
                        "definition": [
                            "float u = (0.0f > ((1.0f > ((src[src_idx] - minheight) * scale)) ? ((src[src_idx] - minheight) * scale) : (1.0f))) ? (0.0f) : ((1.0f > ((src[src_idx] - minheight) * scale)) ? ((src[src_idx] - minheight) * scale) : (1.0f))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_color_from_grayscale",
            "header": "heman_image *heman_color_from_grayscale(heman_image *gray)",
            "params": [
                "heman_image *grayscale"
            ],
            "definition": "heman_image *heman_color_from_grayscale(heman_image *grayscale)\n{\n  assert(grayscale->nbands == 1);\n  int w = grayscale->width;\n  int h = grayscale->height;\n  heman_image *result = heman_image_create(w, h, 3);\n  int size = w * h;\n  float *dst = result->data;\n  unsigned int dst_idx = 0;\n  const float *src = grayscale->data;\n  unsigned int src_idx = 0;\n  for (int i = 0; i < size; i += 1)\n  {\n    float v = src[src_idx];\n    src_idx += 1;\n    dst[dst_idx] = v;\n    dst_idx += 1;\n    *((&dst[dst_idx])++) = v;\n    *((&dst[dst_idx])++) = v;\n  }\n\n  return result;\n}\n\n",
            "calle": [
                "assert",
                "heman_image_create"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "grayscale",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *grayscale"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w",
                        "type": "int",
                        "definition": [
                            "int w = grayscale->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "int",
                        "definition": [
                            "int h = grayscale->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *result = heman_image_create(w, h, 3)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = w * h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float *",
                        "definition": [
                            "float *dst = result->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "const float *",
                        "definition": [
                            "const float *src = grayscale->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "float",
                        "definition": [
                            "float v = src[src_idx]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_color_to_grayscale",
            "header": "heman_image *heman_color_to_grayscale(heman_image *colorimg)",
            "params": [
                "heman_image *colorimg"
            ],
            "definition": "heman_image *heman_color_to_grayscale(heman_image *colorimg)\n{\n  assert(colorimg->nbands == 3);\n  int w = colorimg->width;\n  int h = colorimg->height;\n  heman_image *result = heman_image_create(w, h, 1);\n  int size = w * h;\n  float *dst = result->data;\n  const float *src = colorimg->data;\n  unsigned int src_idx = 0;\n  for (int i = 0; i < size; i += 1)\n  {\n    float r = src[src_idx];\n    src_idx += 1;\n    float g = src[src_idx];\n    src_idx += 1;\n    float b = *((&src[src_idx])++);\n    *(dst++) = ((0.299 * r) + (0.587 * g)) + (0.114 * b);\n  }\n\n  return result;\n}\n\n",
            "calle": [
                "assert",
                "heman_image_create"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "colorimg",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *colorimg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w",
                        "type": "int",
                        "definition": [
                            "int w = colorimg->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "int",
                        "definition": [
                            "int h = colorimg->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *result = heman_image_create(w, h, 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = w * h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float *",
                        "definition": [
                            "float *dst = result->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "const float *",
                        "definition": [
                            "const float *src = colorimg->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "float",
                        "definition": [
                            "float r = src[src_idx]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "g",
                        "type": "float",
                        "definition": [
                            "float g = src[src_idx]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "float",
                        "definition": [
                            "float b = *((&src[src_idx])++)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_color_from_cpcf",
            "header": "heman_image *heman_color_from_cpcf(heman_image *cfield, heman_image *texture)",
            "params": [
                "heman_image *cfield",
                "heman_image *texture"
            ],
            "definition": "heman_image *heman_color_from_cpcf(heman_image *cfield, heman_image *texture)\n{\n  if (!texture)\n  {\n    return heman_internal_rg(cfield);\n  }\n  assert(cfield->nbands == 2);\n  assert((texture->nbands == 3) || (texture->nbands == 4));\n  assert(cfield->width == texture->width);\n  assert(cfield->height == texture->height);\n  int w = cfield->width;\n  int h = cfield->height;\n  heman_image *target = heman_image_create(w, h, texture->nbands);\n  float *dst = target->data;\n  float *src = cfield->data;\n  unsigned int src_idx = 0;\n  int size = w * h;\n  for (int i = 0; i < size; i += 1)\n  {\n    float u = src[src_idx];\n    src_idx += 1;\n    float v = src[src_idx];\n    src_idx += 1;\n    float *texel = heman_image_texel(texture, u, v);\n    for (int c = 0; c < texture->nbands; c++)\n    {\n      *(dst++) = *(texel++);\n    }\n\n  }\n\n  return target;\n}\n\n",
            "calle": [
                "assert",
                "heman_image_create",
                "heman_image_texel",
                "heman_internal_rg"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "cfield",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *cfield"
                        ]
                    },
                    {
                        "path": null,
                        "name": "texture",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *texture"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w",
                        "type": "int",
                        "definition": [
                            "int w = cfield->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "int",
                        "definition": [
                            "int h = cfield->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "target",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *target = heman_image_create(w, h, texture->nbands)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float *",
                        "definition": [
                            "float *dst = target->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "float *",
                        "definition": [
                            "float *src = cfield->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = w * h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "u",
                        "type": "float",
                        "definition": [
                            "float u = src[src_idx]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "float",
                        "definition": [
                            "float v = src[src_idx]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "texel",
                        "type": "float *",
                        "definition": [
                            "float *texel = heman_image_texel(texture, u, v)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "smoothstep",
            "header": "",
            "params": [
                "float edge0",
                "float edge1",
                "float x"
            ],
            "definition": "inline float smoothstep(float edge0, float edge1, float x)\n{\n  float t;\n  t = (0.0f > ((1.0f > ((x - edge0) / (edge1 - edge0))) ? ((x - edge0) / (edge1 - edge0)) : (1.0f))) ? (0.0f) : ((1.0f > ((x - edge0) / (edge1 - edge0))) ? ((x - edge0) / (edge1 - edge0)) : (1.0f));\n  return (t * t) * (3.0 - (2.0 * t));\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "edge0",
                        "type": "float",
                        "definition": [
                            "float edge0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "edge1",
                        "type": "float",
                        "definition": [
                            "float edge1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "float",
                        "definition": [
                            "float x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "float",
                        "definition": [
                            "float t"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_internal_rg",
            "header": "",
            "params": [
                "heman_image *cfield"
            ],
            "definition": "heman_image *heman_internal_rg(heman_image *cfield)\n{\n  assert(cfield->nbands == 2);\n  int w = cfield->width;\n  int h = cfield->height;\n  heman_image *target = heman_image_create(w, h, 3);\n  float *dst = target->data;\n  unsigned int dst_idx = 0;\n  float *src = cfield->data;\n  unsigned int src_idx = 0;\n  int size = w * h;\n  for (int i = 0; i < size; i += 1)\n  {\n    float u = src[src_idx] / w;\n    src_idx += 1;\n    float v = src[src_idx] / h;\n    src_idx += 1;\n    dst[dst_idx] = u;\n    dst_idx += 1;\n    *((&dst[dst_idx])++) = v;\n    *((&dst[dst_idx])++) = 0;\n  }\n\n  return target;\n}\n\n",
            "calle": [
                "assert",
                "heman_image_create"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "cfield",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *cfield"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w",
                        "type": "int",
                        "definition": [
                            "int w = cfield->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "int",
                        "definition": [
                            "int h = cfield->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "target",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *target = heman_image_create(w, h, 3)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float *",
                        "definition": [
                            "float *dst = target->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "float *",
                        "definition": [
                            "float *src = cfield->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = w * h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "u",
                        "type": "float",
                        "definition": [
                            "float u = src[src_idx] / w"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "float",
                        "definition": [
                            "float v = src[src_idx] / h"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_heman_color_create_gradient_1",
            "header": "",
            "params": [
                "int * const index0_ref",
                "int * const index1_ref",
                "unsigned int * const dst_idx_ref",
                "float * const t_ref",
                "int * const x_ref",
                "int num_colors",
                "const int * const cp_locations",
                "float * const f32colors",
                "float * const dst",
                "float invgamma"
            ],
            "definition": "void helper_heman_color_create_gradient_1(int * const index0_ref, int * const index1_ref, unsigned int * const dst_idx_ref, float * const t_ref, int * const x_ref, int num_colors, const int * const cp_locations, float * const f32colors, float * const dst, float invgamma)\n{\n  int index0 = *index0_ref;\n  int index1 = *index1_ref;\n  unsigned int dst_idx = *dst_idx_ref;\n  float t = *t_ref;\n  int x = *x_ref;\n  int loc0 = cp_locations[index0];\n  int loc1 = cp_locations[index1];\n  if (loc0 == loc1)\n  {\n    t = 0;\n  }\n  else\n  {\n    t = (x - loc0) / ((float) (loc1 - loc0));\n    if (t >= 1)\n    {\n      x -= 1;\n      index0 += 1;\n      index1 = ((index1 + 1) > (num_colors - 1)) ? (num_colors - 1) : (index1 + 1);\n      continue;\n    }\n  }\n  float r0 = f32colors[index0 * 3];\n  float g0 = f32colors[(index0 * 3) + 1];\n  float b0 = f32colors[(index0 * 3) + 2];\n  float r1 = f32colors[index1 * 3];\n  float g1 = f32colors[(index1 * 3) + 1];\n  float b1 = f32colors[(index1 * 3) + 2];\n  float invt = 1.0f - t;\n  float r = (r0 * invt) + (r1 * t);\n  float g = (g0 * invt) + (g1 * t);\n  float b = (b0 * invt) + (b1 * t);\n  dst[dst_idx] = pow(r, invgamma);\n  dst_idx += 1;\n  dst[dst_idx] = pow(g, invgamma);\n  dst_idx += 1;\n  *((&dst[dst_idx])++) = pow(b, invgamma);\n  *index0_ref = index0;\n  *index1_ref = index1;\n  *dst_idx_ref = dst_idx;\n  *t_ref = t;\n  *x_ref = x;\n}\n\n",
            "calle": [
                "pow"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "index0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const index0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const index1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const dst_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t_ref",
                        "type": "float * const",
                        "definition": [
                            "float * const t_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const x_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_colors",
                        "type": "int",
                        "definition": [
                            "int num_colors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cp_locations",
                        "type": "const int * const",
                        "definition": [
                            "const int * const cp_locations"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f32colors",
                        "type": "float * const",
                        "definition": [
                            "float * const f32colors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float * const",
                        "definition": [
                            "float * const dst"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invgamma",
                        "type": "float",
                        "definition": [
                            "float invgamma"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index0",
                        "type": "int",
                        "definition": [
                            "int index0 = *index0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index1",
                        "type": "int",
                        "definition": [
                            "int index1 = *index1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst_idx = *dst_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "float",
                        "definition": [
                            "float t = *t_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x = *x_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "loc0",
                        "type": "int",
                        "definition": [
                            "int loc0 = cp_locations[index0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "loc1",
                        "type": "int",
                        "definition": [
                            "int loc1 = cp_locations[index1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r0",
                        "type": "float",
                        "definition": [
                            "float r0 = f32colors[index0 * 3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "g0",
                        "type": "float",
                        "definition": [
                            "float g0 = f32colors[(index0 * 3) + 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b0",
                        "type": "float",
                        "definition": [
                            "float b0 = f32colors[(index0 * 3) + 2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r1",
                        "type": "float",
                        "definition": [
                            "float r1 = f32colors[index1 * 3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "g1",
                        "type": "float",
                        "definition": [
                            "float g1 = f32colors[(index1 * 3) + 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b1",
                        "type": "float",
                        "definition": [
                            "float b1 = f32colors[(index1 * 3) + 2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invt",
                        "type": "float",
                        "definition": [
                            "float invt = 1.0f - t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "float",
                        "definition": [
                            "float r = (r0 * invt) + (r1 * t)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "g",
                        "type": "float",
                        "definition": [
                            "float g = (g0 * invt) + (g1 * t)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "float",
                        "definition": [
                            "float b = (b0 * invt) + (b1 * t)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_distance_create_sdf",
            "header": "heman_image *heman_distance_create_sdf(heman_image *monochrome)",
            "params": [
                "heman_image *src"
            ],
            "definition": "heman_image *heman_distance_create_sdf(heman_image *src)\n{\n  assert((src->nbands == 1) && \"Distance field input must have only 1 band.\");\n  heman_image *positive = heman_image_create(src->width, src->height, 1);\n  heman_image *negative = heman_image_create(src->width, src->height, 1);\n  int size = src->height * src->width;\n  float *pptr = positive->data;\n  unsigned int pptr_idx = 0;\n  float *nptr = negative->data;\n  unsigned int nptr_idx = 0;\n  float *sptr = src->data;\n  unsigned int sptr_idx = 0;\n  for (int i = 0; i < size; i += 1, sptr_idx += 1)\n  {\n    pptr[pptr_idx] = (sptr[sptr_idx]) ? (INF) : (0);\n    pptr_idx += 1;\n    *((&nptr[nptr_idx])++) = (sptr[sptr_idx]) ? (0) : (INF);\n  }\n\n  transform_to_distance(positive);\n  transform_to_distance(negative);\n  float inv = 1.0f / src->width;\n  pptr_idx = positive->data;\n  nptr_idx = negative->data;\n  for (int i = 0; i < size; i += 1, pptr_idx += 1, nptr_idx += 1)\n  {\n    pptr[pptr_idx] = (sqrt(*(&pptr[pptr_idx])) - sqrt(*(&nptr[nptr_idx]))) * inv;\n  }\n\n  heman_image_destroy(negative);\n  return positive;\n}\n\n",
            "calle": [
                "assert",
                "heman_image_create",
                "heman_image_destroy",
                "sqrt",
                "transform_to_distance"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "src",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *src"
                        ]
                    },
                    {
                        "path": null,
                        "name": "positive",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *positive = heman_image_create(src->width, src->height, 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "negative",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *negative = heman_image_create(src->width, src->height, 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = src->height * src->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pptr",
                        "type": "float *",
                        "definition": [
                            "float *pptr = positive->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pptr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nptr",
                        "type": "float *",
                        "definition": [
                            "float *nptr = negative->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int nptr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sptr",
                        "type": "float *",
                        "definition": [
                            "float *sptr = src->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sptr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inv",
                        "type": "float",
                        "definition": [
                            "float inv = 1.0f / src->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "INF",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_distance_create_df",
            "header": "heman_image *heman_distance_create_df(heman_image *monochrome)",
            "params": [
                "heman_image *src"
            ],
            "definition": "heman_image *heman_distance_create_df(heman_image *src)\n{\n  assert((src->nbands == 1) && \"Distance field input must have only 1 band.\");\n  heman_image *positive = heman_image_create(src->width, src->height, 1);\n  int size = src->height * src->width;\n  float *pptr = positive->data;\n  unsigned int pptr_idx = 0;\n  float *sptr = src->data;\n  unsigned int sptr_idx = 0;\n  for (int i = 0; i < size; i += 1, sptr_idx += 1)\n  {\n    pptr[pptr_idx] = (sptr[sptr_idx]) ? (0) : (INF);\n    pptr_idx += 1;\n  }\n\n  transform_to_distance(positive);\n  float inv = 1.0f / src->width;\n  pptr_idx = positive->data;\n  for (int i = 0; i < size; i += 1, pptr_idx += 1)\n  {\n    pptr[pptr_idx] = sqrt(*(&pptr[pptr_idx])) * inv;\n  }\n\n  return positive;\n}\n\n",
            "calle": [
                "assert",
                "heman_image_create",
                "sqrt",
                "transform_to_distance"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "src",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *src"
                        ]
                    },
                    {
                        "path": null,
                        "name": "positive",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *positive = heman_image_create(src->width, src->height, 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = src->height * src->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pptr",
                        "type": "float *",
                        "definition": [
                            "float *pptr = positive->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pptr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sptr",
                        "type": "float *",
                        "definition": [
                            "float *sptr = src->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sptr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inv",
                        "type": "float",
                        "definition": [
                            "float inv = 1.0f / src->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "INF",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_distance_create_cpcf",
            "header": "heman_image *heman_distance_create_cpcf(heman_image *seed)",
            "params": [
                "heman_image *src"
            ],
            "definition": "heman_image *heman_distance_create_cpcf(heman_image *src)\n{\n  heman_image *negative = heman_image_create(src->width, src->height, 1);\n  int size = src->height * src->width;\n  float *nptr = negative->data;\n  unsigned int nptr_idx = 0;\n  float *sptr = src->data;\n  unsigned int sptr_idx = 0;\n  for (int i = 0; i < size; i += 1)\n  {\n    float val = 0;\n    for (int b = 0; b < src->nbands; b += 1)\n    {\n      val += sptr[sptr_idx];\n      sptr_idx += 1;\n    }\n\n    nptr[nptr_idx] = (val) ? (0) : (INF);\n    nptr_idx += 1;\n  }\n\n  heman_image *coordfield = heman_distance_identity_cpcf(src->width, src->height);\n  transform_to_coordfield(negative, coordfield);\n  heman_image_destroy(negative);\n  return coordfield;\n}\n\n",
            "calle": [
                "heman_distance_identity_cpcf",
                "heman_image_create",
                "heman_image_destroy",
                "transform_to_coordfield"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "src",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *src"
                        ]
                    },
                    {
                        "path": null,
                        "name": "negative",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *negative = heman_image_create(src->width, src->height, 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = src->height * src->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nptr",
                        "type": "float *",
                        "definition": [
                            "float *nptr = negative->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int nptr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sptr",
                        "type": "float *",
                        "definition": [
                            "float *sptr = src->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sptr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "float",
                        "definition": [
                            "float val = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "int",
                        "definition": [
                            "int b = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "coordfield",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *coordfield = heman_distance_identity_cpcf(src->width, src->height)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "INF",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_distance_from_cpcf",
            "header": "heman_image *heman_distance_from_cpcf(heman_image *cf)",
            "params": [
                "heman_image *cf"
            ],
            "definition": "heman_image *heman_distance_from_cpcf(heman_image *cf)\n{\n  assert((cf->nbands == 2) && \"Coordinate field input must have 2 bands.\");\n  heman_image *udf = heman_image_create(cf->width, cf->height, 1);\n  float *dptr = udf->data;\n  float *sptr = cf->data;\n  unsigned int sptr_idx = 0;\n  float scale = 1.0f / sqrt((cf->width * cf->width) + (cf->height * cf->height));\n  for (int y = 0; y < cf->height; y += 1)\n  {\n    for (int x = 0; x < cf->width; x += 1)\n    {\n      float u = sptr[sptr_idx];\n      sptr_idx += 1;\n      float v = sptr[sptr_idx];\n      sptr_idx += 1;\n      float dist = sqrt(((u - x) * (u - x)) + ((v - y) * (v - y))) * scale;\n      *(dptr++) = dist;\n    }\n\n  }\n\n  return udf;\n}\n\n",
            "calle": [
                "assert",
                "heman_image_create",
                "sqrt"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "cf",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *cf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "udf",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *udf = heman_image_create(cf->width, cf->height, 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dptr",
                        "type": "float *",
                        "definition": [
                            "float *dptr = udf->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sptr",
                        "type": "float *",
                        "definition": [
                            "float *sptr = cf->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sptr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "float",
                        "definition": [
                            "float scale = 1.0f / sqrt((cf->width * cf->width) + (cf->height * cf->height))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "u",
                        "type": "float",
                        "definition": [
                            "float u = sptr[sptr_idx]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "float",
                        "definition": [
                            "float v = sptr[sptr_idx]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "float",
                        "definition": [
                            "float dist = sqrt(((u - x) * (u - x)) + ((v - y) * (v - y))) * scale"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_distance_identity_cpcf",
            "header": "heman_image *heman_distance_identity_cpcf(int width, int height)",
            "params": [
                "int width",
                "int height"
            ],
            "definition": "heman_image *heman_distance_identity_cpcf(int width, int height)\n{\n  heman_image *retval = heman_image_create(width, height, 2);\n  float *cdata = retval->data;\n  unsigned int cdata_idx = 0;\n  for (int y = 0; y < height; y += 1)\n  {\n    for (int x = 0; x < width; x += 1)\n    {\n      cdata[cdata_idx] = x;\n      cdata_idx += 1;\n      *((&cdata[cdata_idx])++) = y;\n    }\n\n  }\n\n  return retval;\n}\n\n",
            "calle": [
                "heman_image_create"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *retval = heman_image_create(width, height, 2)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cdata",
                        "type": "float *",
                        "definition": [
                            "float *cdata = retval->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cdata_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int cdata_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "edt",
            "header": "",
            "params": [
                "float *f",
                "float *d",
                "float *z",
                "uint16_t *w",
                "int n"
            ],
            "definition": "static void edt(float *f, float *d, float *z, uint16_t *w, int n)\n{\n  int k = 0;\n  float s;\n  w[0] = 0;\n  z[0] = -INF;\n  z[1] = +INF;\n  for (int q = 1; q < n; q += 1)\n  {\n    s = ((f[q] + (q * q)) - (f[w[k]] + (w[k] * w[k]))) / ((2 * q) - (2 * w[k]));\n    while (s <= z[k])\n    {\n      k -= 1;\n      s = ((f[q] + (q * q)) - (f[w[k]] + (w[k] * w[k]))) / ((2 * q) - (2 * w[k]));\n    }\n\n    k += 1;\n    w[k] = q;\n    z[k] = s;\n    z[k + 1] = +INF;\n  }\n\n  k = 0;\n  for (int q = 0; q < n; q += 1)\n  {\n    while (z[k + 1] < q)\n    {\n      k += 1;\n    }\n\n    d[q] = ((q - w[k]) * (q - w[k])) + f[w[k]];\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "f",
                        "type": "float *",
                        "definition": [
                            "float *f"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "float *",
                        "definition": [
                            "float *d"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z",
                        "type": "float *",
                        "definition": [
                            "float *z"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w",
                        "type": "uint16_t *",
                        "definition": [
                            "uint16_t *w"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "int",
                        "definition": [
                            "int n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "int",
                        "definition": [
                            "int k = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "float",
                        "definition": [
                            "float s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "q",
                        "type": "int",
                        "definition": [
                            "int q = 0",
                            "int q = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "INF",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "edt_with_payload",
            "header": "",
            "params": [
                "float *f",
                "float *d",
                "float *z",
                "uint16_t *w",
                "int n",
                "float *payload_in",
                "float *payload_out"
            ],
            "definition": "static void edt_with_payload(float *f, float *d, float *z, uint16_t *w, int n, float *payload_in, float *payload_out)\n{\n  int k = 0;\n  float s;\n  w[0] = 0;\n  z[0] = -INF;\n  z[1] = +INF;\n  for (int q = 1; q < n; q += 1)\n  {\n    s = ((f[q] + (q * q)) - (f[w[k]] + (w[k] * w[k]))) / ((2 * q) - (2 * w[k]));\n    while (s <= z[k])\n    {\n      k -= 1;\n      s = ((f[q] + (q * q)) - (f[w[k]] + (w[k] * w[k]))) / ((2 * q) - (2 * w[k]));\n    }\n\n    k += 1;\n    w[k] = q;\n    z[k] = s;\n    z[k + 1] = +INF;\n  }\n\n  k = 0;\n  for (int q = 0; q < n; q += 1)\n  {\n    while (z[k + 1] < q)\n    {\n      k += 1;\n    }\n\n    d[q] = ((q - w[k]) * (q - w[k])) + f[w[k]];\n    payload_out[q * 2] = payload_in[w[k] * 2];\n    payload_out[(q * 2) + 1] = payload_in[(w[k] * 2) + 1];\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "f",
                        "type": "float *",
                        "definition": [
                            "float *f"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "float *",
                        "definition": [
                            "float *d"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z",
                        "type": "float *",
                        "definition": [
                            "float *z"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w",
                        "type": "uint16_t *",
                        "definition": [
                            "uint16_t *w"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "int",
                        "definition": [
                            "int n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "payload_in",
                        "type": "float *",
                        "definition": [
                            "float *payload_in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "payload_out",
                        "type": "float *",
                        "definition": [
                            "float *payload_out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "int",
                        "definition": [
                            "int k = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "float",
                        "definition": [
                            "float s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "q",
                        "type": "int",
                        "definition": [
                            "int q = 0",
                            "int q = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "INF",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "transform_to_distance",
            "header": "",
            "params": [
                "heman_image *sdf"
            ],
            "definition": "static void transform_to_distance(heman_image *sdf)\n{\n  int width = sdf->width;\n  int height = sdf->height;\n  int size = width * height;\n  float *ff = calloc(size, sizeof(float));\n  float *dd = calloc(size, sizeof(float));\n  float *zz = calloc((height + 1) * (width + 1), sizeof(float));\n  uint16_t *ww = calloc(size, sizeof(uint16_t));\n  int x;\n  #pragma omp parallel for\n  for (x = 0; x < width; x += 1)\n  {\n    float *f = ff + (height * x);\n    float *d = dd + (height * x);\n    float *z = zz + ((height + 1) * x);\n    uint16_t *w = ww + (height * x);\n    for (int y = 0; y < height; y += 1)\n    {\n      f[y] = *((sdf->data + (y * width)) + x);\n    }\n\n    edt(f, d, z, w, height);\n    for (int y = 0; y < height; y += 1)\n    {\n      *((sdf->data + (y * width)) + x) = d[y];\n    }\n\n  }\n\n  int y;\n  #pragma omp parallel for\n  for (y = 0; y < height; y += 1)\n  {\n    float *f = ff + (width * y);\n    float *d = dd + (width * y);\n    float *z = zz + ((width + 1) * y);\n    uint16_t *w = ww + (width * y);\n    for (int x = 0; x < width; x += 1)\n    {\n      f[x] = *((sdf->data + (y * width)) + x);\n    }\n\n    edt(f, d, z, w, width);\n    for (int x = 0; x < width; x += 1)\n    {\n      *((sdf->data + (y * width)) + x) = d[x];\n    }\n\n  }\n\n  free(ff);\n  free(dd);\n  free(zz);\n  free(ww);\n}\n\n",
            "calle": [
                "calloc",
                "edt",
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "sdf",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *sdf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width = sdf->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height = sdf->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = width * height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ff",
                        "type": "float *",
                        "definition": [
                            "float *ff = calloc(size, sizeof(float))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dd",
                        "type": "float *",
                        "definition": [
                            "float *dd = calloc(size, sizeof(float))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zz",
                        "type": "float *",
                        "definition": [
                            "float *zz = calloc((height + 1) * (width + 1), sizeof(float))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ww",
                        "type": "uint16_t *",
                        "definition": [
                            "uint16_t *ww = calloc(size, sizeof(uint16_t))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x",
                            "int x = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f",
                        "type": "float *",
                        "definition": [
                            "float *f = ff + (height * x)",
                            "float *f = ff + (width * y)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "float *",
                        "definition": [
                            "float *d = dd + (height * x)",
                            "float *d = dd + (width * y)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z",
                        "type": "float *",
                        "definition": [
                            "float *z = zz + ((height + 1) * x)",
                            "float *z = zz + ((width + 1) * y)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w",
                        "type": "uint16_t *",
                        "definition": [
                            "uint16_t *w = ww + (height * x)",
                            "uint16_t *w = ww + (width * y)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y",
                            "int y = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "transform_to_coordfield",
            "header": "",
            "params": [
                "heman_image *sdf",
                "heman_image *cf"
            ],
            "definition": "static void transform_to_coordfield(heman_image *sdf, heman_image *cf)\n{\n  int width = sdf->width;\n  int height = sdf->height;\n  int size = width * height;\n  float *ff = calloc(size, sizeof(float));\n  float *dd = calloc(size, sizeof(float));\n  float *zz = calloc((height + 1) * (width + 1), sizeof(float));\n  uint16_t *ww = calloc(size, sizeof(uint16_t));\n  int x;\n  #pragma omp parallel for\n  for (x = 0; x < width; x += 1)\n  {\n    helper_transform_to_coordfield_1(&width, &x, &x, &x, sdf, cf, height, ff, dd, zz, ww);\n  }\n\n  int y;\n  #pragma omp parallel for\n  for (y = 0; y < height; y += 1)\n  {\n    helper_transform_to_coordfield_2(&width, &y, sdf, cf, ff, dd, zz, ww);\n  }\n\n  free(ff);\n  free(dd);\n  free(zz);\n  free(ww);\n}\n\n",
            "calle": [
                "calloc",
                "free",
                "helper_transform_to_coordfield_1",
                "helper_transform_to_coordfield_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "sdf",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *sdf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cf",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *cf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width = sdf->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height = sdf->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = width * height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ff",
                        "type": "float *",
                        "definition": [
                            "float *ff = calloc(size, sizeof(float))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dd",
                        "type": "float *",
                        "definition": [
                            "float *dd = calloc(size, sizeof(float))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zz",
                        "type": "float *",
                        "definition": [
                            "float *zz = calloc((height + 1) * (width + 1), sizeof(float))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ww",
                        "type": "uint16_t *",
                        "definition": [
                            "uint16_t *ww = calloc(size, sizeof(uint16_t))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_transform_to_coordfield_1",
            "header": "",
            "params": [
                "int * const width_ref",
                "int * const x_ref",
                "int * const x_ref",
                "int * const x_ref",
                "heman_image * const sdf",
                "heman_image * const cf",
                "int height",
                "float * const ff",
                "float * const dd",
                "float * const zz",
                "uint16_t * const ww"
            ],
            "definition": "void helper_transform_to_coordfield_1(int * const width_ref, int * const x_ref, int * const x_ref, int * const x_ref, heman_image * const sdf, heman_image * const cf, int height, float * const ff, float * const dd, float * const zz, uint16_t * const ww)\n{\n  int width = *width_ref;\n  int x = *x_ref;\n  int x = *x_ref;\n  int x = *x_ref;\n  float *pl1 = calloc(height * 2, sizeof(float));\n  float *pl2 = calloc(height * 2, sizeof(float));\n  float *f = ff + (height * x);\n  float *d = dd + (height * x);\n  float *z = zz + ((height + 1) * x);\n  uint16_t *w = ww + (height * x);\n  for (int y = 0; y < height; y += 1)\n  {\n    f[y] = *((sdf->data + (y * width)) + x);\n    pl1[y * 2] = *((cf->data + (2 * ((y * width) + x))) + 0);\n    pl1[(y * 2) + 1] = *((cf->data + (2 * ((y * width) + x))) + 1);\n  }\n\n  edt_with_payload(f, d, z, w, height, pl1, pl2);\n  for (int y = 0; y < height; y += 1)\n  {\n    *((sdf->data + (y * width)) + x) = d[y];\n    *((cf->data + (2 * ((y * width) + x))) + 0) = pl2[2 * y];\n    *((cf->data + (2 * ((y * width) + x))) + 1) = pl2[(2 * y) + 1];\n  }\n\n  free(pl1);\n  free(pl2);\n  *width_ref = width;\n  *x_ref = x;\n  *x_ref = x;\n  *x_ref = x;\n}\n\n",
            "calle": [
                "calloc",
                "edt_with_payload",
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "width_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const width_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const x_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sdf",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const sdf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cf",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const cf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ff",
                        "type": "float * const",
                        "definition": [
                            "float * const ff"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dd",
                        "type": "float * const",
                        "definition": [
                            "float * const dd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zz",
                        "type": "float * const",
                        "definition": [
                            "float * const zz"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ww",
                        "type": "uint16_t * const",
                        "definition": [
                            "uint16_t * const ww"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width = *width_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x = *x_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pl1",
                        "type": "float *",
                        "definition": [
                            "float *pl1 = calloc(height * 2, sizeof(float))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pl2",
                        "type": "float *",
                        "definition": [
                            "float *pl2 = calloc(height * 2, sizeof(float))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f",
                        "type": "float *",
                        "definition": [
                            "float *f = ff + (height * x)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "float *",
                        "definition": [
                            "float *d = dd + (height * x)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z",
                        "type": "float *",
                        "definition": [
                            "float *z = zz + ((height + 1) * x)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w",
                        "type": "uint16_t *",
                        "definition": [
                            "uint16_t *w = ww + (height * x)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_transform_to_coordfield_2",
            "header": "",
            "params": [
                "int * const width_ref",
                "int * const y_ref",
                "heman_image * const sdf",
                "heman_image * const cf",
                "float * const ff",
                "float * const dd",
                "float * const zz",
                "uint16_t * const ww"
            ],
            "definition": "void helper_transform_to_coordfield_2(int * const width_ref, int * const y_ref, heman_image * const sdf, heman_image * const cf, float * const ff, float * const dd, float * const zz, uint16_t * const ww)\n{\n  int width = *width_ref;\n  int y = *y_ref;\n  float *pl1 = calloc(width * 2, sizeof(float));\n  float *pl2 = calloc(width * 2, sizeof(float));\n  float *f = ff + (width * y);\n  float *d = dd + (width * y);\n  float *z = zz + ((width + 1) * y);\n  uint16_t *w = ww + (width * y);\n  for (int x = 0; x < width; x += 1)\n  {\n    f[x] = *((sdf->data + (y * width)) + x);\n    pl1[x * 2] = *((cf->data + (2 * ((y * width) + x))) + 0);\n    pl1[(x * 2) + 1] = *((cf->data + (2 * ((y * width) + x))) + 1);\n  }\n\n  edt_with_payload(f, d, z, w, width, pl1, pl2);\n  for (int x = 0; x < width; x += 1)\n  {\n    *((sdf->data + (y * width)) + x) = d[x];\n    *((cf->data + (2 * ((y * width) + x))) + 0) = pl2[2 * x];\n    *((cf->data + (2 * ((y * width) + x))) + 1) = pl2[(2 * x) + 1];\n  }\n\n  free(pl1);\n  free(pl2);\n  *width_ref = width;\n  *y_ref = y;\n}\n\n",
            "calle": [
                "calloc",
                "edt_with_payload",
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "width_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const width_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const y_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sdf",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const sdf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cf",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const cf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ff",
                        "type": "float * const",
                        "definition": [
                            "float * const ff"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dd",
                        "type": "float * const",
                        "definition": [
                            "float * const dd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zz",
                        "type": "float * const",
                        "definition": [
                            "float * const zz"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ww",
                        "type": "uint16_t * const",
                        "definition": [
                            "uint16_t * const ww"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width = *width_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y = *y_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pl1",
                        "type": "float *",
                        "definition": [
                            "float *pl1 = calloc(width * 2, sizeof(float))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pl2",
                        "type": "float *",
                        "definition": [
                            "float *pl2 = calloc(width * 2, sizeof(float))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f",
                        "type": "float *",
                        "definition": [
                            "float *f = ff + (width * y)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "float *",
                        "definition": [
                            "float *d = dd + (width * y)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z",
                        "type": "float *",
                        "definition": [
                            "float *z = zz + ((width + 1) * y)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w",
                        "type": "uint16_t *",
                        "definition": [
                            "uint16_t *w = ww + (width * y)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_draw_points",
            "header": "void heman_draw_points(heman_image *target, heman_points *pts, float val)",
            "params": [
                "heman_image *target",
                "heman_points *pts",
                "float val"
            ],
            "definition": "void heman_draw_points(heman_image *target, heman_points *pts, float val)\n{\n  float *src = pts->data;\n  unsigned int src_idx = 0;\n  for (int k = 0; k < pts->width; k += 1)\n  {\n    float x = src[0 + src_idx];\n    float y = src[1 + src_idx];\n    src_idx += pts->nbands;\n    int i = x * target->width;\n    int j = y * target->height;\n    if ((((i < 0) || (i >= target->width)) || (j < 0)) || (j >= target->height))\n    {\n      continue;\n    }\n    float *texel = heman_image_texel(target, i, j);\n    unsigned int texel_idx = 0;\n    for (int c = 0; c < target->nbands; c += 1)\n    {\n      texel[texel_idx] = val;\n      texel_idx += 1;\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "heman_image_texel"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "target",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *target"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pts",
                        "type": "heman_points *",
                        "definition": [
                            "heman_points *pts"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "float",
                        "definition": [
                            "float val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "float *",
                        "definition": [
                            "float *src = pts->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "int",
                        "definition": [
                            "int k = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "float",
                        "definition": [
                            "float x = src[0 + src_idx]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "float",
                        "definition": [
                            "float y = src[1 + src_idx]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = x * target->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = y * target->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "texel",
                        "type": "float *",
                        "definition": [
                            "float *texel = heman_image_texel(target, i, j)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "texel_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int texel_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_draw_colored_points",
            "header": "void heman_draw_colored_points(heman_image *target, heman_points *coords, const heman_color *colors)",
            "params": [
                "heman_image *target",
                "heman_points *pts",
                "const heman_color *colors"
            ],
            "definition": "void heman_draw_colored_points(heman_image *target, heman_points *pts, const heman_color *colors)\n{\n  assert((target->nbands == 3) || (target->nbands == 4));\n  float *src = pts->data;\n  unsigned int src_idx = 0;\n  float inv = 1.0f / 255.0f;\n  for (int k = 0; k < pts->width; k += 1)\n  {\n    float x = src[0 + src_idx];\n    float y = src[1 + src_idx];\n    src_idx += pts->nbands;\n    int i = x * target->width;\n    int j = y * target->height;\n    if ((((i < 0) || (i >= target->width)) || (j < 0)) || (j >= target->height))\n    {\n      continue;\n    }\n    float *texel = heman_image_texel(target, i, j);\n    unsigned int texel_idx = 0;\n    heman_color rgb = colors[k];\n    texel[texel_idx] = ((float) ((rgb >> 16) & 0xff)) * inv;\n    texel_idx += 1;\n    texel[texel_idx] = ((float) ((rgb >> 8) & 0xff)) * inv;\n    texel_idx += 1;\n    *((&texel[texel_idx])++) = ((float) (rgb & 0xff)) * inv;\n    if (target->nbands == 4)\n    {\n      texel[texel_idx] = ((float) (rgb >> 24)) * inv;\n    }\n  }\n\n}\n\n",
            "calle": [
                "assert",
                "heman_image_texel"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "target",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *target"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pts",
                        "type": "heman_points *",
                        "definition": [
                            "heman_points *pts"
                        ]
                    },
                    {
                        "path": null,
                        "name": "colors",
                        "type": "const heman_color *",
                        "definition": [
                            "const heman_color *colors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "float *",
                        "definition": [
                            "float *src = pts->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inv",
                        "type": "float",
                        "definition": [
                            "float inv = 1.0f / 255.0f"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "int",
                        "definition": [
                            "int k = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "float",
                        "definition": [
                            "float x = src[0 + src_idx]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "float",
                        "definition": [
                            "float y = src[1 + src_idx]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = x * target->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = y * target->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "texel",
                        "type": "float *",
                        "definition": [
                            "float *texel = heman_image_texel(target, i, j)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "texel_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int texel_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rgb",
                        "type": "heman_color",
                        "definition": [
                            "heman_color rgb = colors[k]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_draw_colored_circles",
            "header": "void heman_draw_colored_circles(heman_image *target, heman_points *pts, int radius, const heman_color *colors)",
            "params": [
                "heman_image *target",
                "heman_points *pts",
                "int radius",
                "const heman_color *colors"
            ],
            "definition": "void heman_draw_colored_circles(heman_image *target, heman_points *pts, int radius, const heman_color *colors)\n{\n  int fwidth = (radius * 2) + 1;\n  int radius2 = radius * radius;\n  float *src = pts->data;\n  unsigned int src_idx = 0;\n  float inv = 1.0f / 255.0f;\n  int w = target->width;\n  int h = target->height;\n  for (int k = 0; k < pts->width; k += 1)\n  {\n    float x = src[0 + src_idx];\n    float y = src[1 + src_idx];\n    src_idx += pts->nbands;\n    int ii = (x * w) - radius;\n    int jj = (y * h) - radius;\n    for (int kj = 0; kj < fwidth; kj += 1)\n    {\n      for (int ki = 0; ki < fwidth; ki += 1)\n      {\n        int i = ii + ki;\n        int j = jj + kj;\n        int r2 = ((i - (x * w)) * (i - (x * w))) + ((j - (y * h)) * (j - (y * h)));\n        if (r2 > radius2)\n        {\n          continue;\n        }\n        float *texel = heman_image_texel(target, i, j);\n        unsigned int texel_idx = 0;\n        heman_color rgb = colors[k];\n        texel[texel_idx] = ((float) (rgb >> 16)) * inv;\n        texel_idx += 1;\n        texel[texel_idx] = ((float) ((rgb >> 8) & 0xff)) * inv;\n        texel_idx += 1;\n        texel[texel_idx] = ((float) (rgb & 0xff)) * inv;\n      }\n\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "heman_image_texel"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "target",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *target"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pts",
                        "type": "heman_points *",
                        "definition": [
                            "heman_points *pts"
                        ]
                    },
                    {
                        "path": null,
                        "name": "radius",
                        "type": "int",
                        "definition": [
                            "int radius"
                        ]
                    },
                    {
                        "path": null,
                        "name": "colors",
                        "type": "const heman_color *",
                        "definition": [
                            "const heman_color *colors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fwidth",
                        "type": "int",
                        "definition": [
                            "int fwidth = (radius * 2) + 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "radius2",
                        "type": "int",
                        "definition": [
                            "int radius2 = radius * radius"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "float *",
                        "definition": [
                            "float *src = pts->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inv",
                        "type": "float",
                        "definition": [
                            "float inv = 1.0f / 255.0f"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w",
                        "type": "int",
                        "definition": [
                            "int w = target->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "int",
                        "definition": [
                            "int h = target->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "int",
                        "definition": [
                            "int k = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "float",
                        "definition": [
                            "float x = src[0 + src_idx]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "float",
                        "definition": [
                            "float y = src[1 + src_idx]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ii",
                        "type": "int",
                        "definition": [
                            "int ii = (x * w) - radius"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jj",
                        "type": "int",
                        "definition": [
                            "int jj = (y * h) - radius"
                        ]
                    },
                    {
                        "path": null,
                        "name": "kj",
                        "type": "int",
                        "definition": [
                            "int kj = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ki",
                        "type": "int",
                        "definition": [
                            "int ki = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = ii + ki"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = jj + kj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r2",
                        "type": "int",
                        "definition": [
                            "int r2 = ((i - (x * w)) * (i - (x * w))) + ((j - (y * h)) * (j - (y * h)))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "texel",
                        "type": "float *",
                        "definition": [
                            "float *texel = heman_image_texel(target, i, j)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "texel_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int texel_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rgb",
                        "type": "heman_color",
                        "definition": [
                            "heman_color rgb = colors[k]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_draw_splats",
            "header": "void heman_draw_splats(heman_image *target, heman_points *pts, int radius, int blend_mode)",
            "params": [
                "heman_image *target",
                "heman_points *pts",
                "int radius",
                "int blend_mode"
            ],
            "definition": "void heman_draw_splats(heman_image *target, heman_points *pts, int radius, int blend_mode)\n{\n  int fwidth = (radius * 2) + 1;\n  float *gaussian_splat = malloc((fwidth * fwidth) * (sizeof(float)));\n  generate_gaussian_splat(gaussian_splat, fwidth);\n  float *src = pts->data;\n  unsigned int src_idx = 0;\n  int w = target->width;\n  int h = target->height;\n  for (int i = 0; i < pts->width; i += 1)\n  {\n    float x = src[src_idx];\n    src_idx += 1;\n    float y = src[src_idx];\n    src_idx += 1;\n    int ii = (x * w) - radius;\n    int jj = (y * h) - radius;\n    for (int kj = 0; kj < fwidth; kj++)\n    {\n      for (int ki = 0; ki < fwidth; ki++)\n      {\n        int i = ii + ki;\n        int j = jj + kj;\n        if ((((i < 0) || (i >= w)) || (j < 0)) || (j >= h))\n        {\n          continue;\n        }\n        float *texel = heman_image_texel(target, i, j);\n        for (int c = 0; c < target->nbands; c++)\n        {\n          *(texel++) += gaussian_splat[(kj * fwidth) + ki];\n        }\n\n      }\n\n    }\n\n  }\n\n  free(gaussian_splat);\n}\n\n",
            "calle": [
                "free",
                "generate_gaussian_splat",
                "heman_image_texel",
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "target",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *target"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pts",
                        "type": "heman_points *",
                        "definition": [
                            "heman_points *pts"
                        ]
                    },
                    {
                        "path": null,
                        "name": "radius",
                        "type": "int",
                        "definition": [
                            "int radius"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blend_mode",
                        "type": "int",
                        "definition": [
                            "int blend_mode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fwidth",
                        "type": "int",
                        "definition": [
                            "int fwidth = (radius * 2) + 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gaussian_splat",
                        "type": "float *",
                        "definition": [
                            "float *gaussian_splat = malloc((fwidth * fwidth) * (sizeof(float)))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "float *",
                        "definition": [
                            "float *src = pts->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w",
                        "type": "int",
                        "definition": [
                            "int w = target->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "int",
                        "definition": [
                            "int h = target->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0",
                            "int i = ii + ki"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "float",
                        "definition": [
                            "float x = src[src_idx]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "float",
                        "definition": [
                            "float y = src[src_idx]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ii",
                        "type": "int",
                        "definition": [
                            "int ii = (x * w) - radius"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jj",
                        "type": "int",
                        "definition": [
                            "int jj = (y * h) - radius"
                        ]
                    },
                    {
                        "path": null,
                        "name": "kj",
                        "type": "int",
                        "definition": [
                            "int kj = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ki",
                        "type": "int",
                        "definition": [
                            "int ki = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = jj + kj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "texel",
                        "type": "float *",
                        "definition": [
                            "float *texel = heman_image_texel(target, i, j)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_draw_contour_from_points",
            "header": "void heman_draw_contour_from_points(heman_image *target, heman_points *coords, heman_color color, float mind, float maxd, int filterd)",
            "params": [
                "heman_image *target",
                "heman_points *coords",
                "heman_color rgb",
                "float mind",
                "float maxd",
                "int filterd"
            ],
            "definition": "void heman_draw_contour_from_points(heman_image *target, heman_points *coords, heman_color rgb, float mind, float maxd, int filterd)\n{\n  assert((target->nbands == 3) || (target->nbands == 4));\n  int width = target->width;\n  int height = target->height;\n  heman_image *seed = heman_image_create(width, height, 1);\n  heman_image_clear(seed, 0);\n  heman_internal_draw_seeds(seed, coords, filterd);\n  float inv = 1.0f / 255.0f;\n  float r = ((float) ((rgb >> 16) & 0xff)) * inv;\n  float g = ((float) ((rgb >> 8) & 0xff)) * inv;\n  float b = ((float) (rgb & 0xff)) * inv;\n  float a = 1;\n  if (target->nbands == 4)\n  {\n    a = ((float) (rgb >> 24)) * inv;\n  }\n  int y;\n  #pragma omp parallel for\n  for (y = 0; y < height; y += 1)\n  {\n    float *dst = target->data + ((y * width) * target->nbands);\n    unsigned int dst_idx = 0;\n    for (int x = 0; x < width; x += 1)\n    {\n      float dist = *heman_image_texel(seed, x, y);\n      if ((dist > mind) && (dist < maxd))\n      {\n        dst[0 + dst_idx] = r;\n        dst[1 + dst_idx] = g;\n        dst[2 + dst_idx] = b;\n        if (target->nbands == 4)\n        {\n          dst[3 + dst_idx] = a;\n        }\n      }\n      dst_idx += target->nbands;\n    }\n\n  }\n\n  heman_points_destroy(seed);\n}\n\n",
            "calle": [
                "assert",
                "heman_image_clear",
                "heman_image_create",
                "heman_image_texel",
                "heman_internal_draw_seeds",
                "heman_points_destroy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "target",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *target"
                        ]
                    },
                    {
                        "path": null,
                        "name": "coords",
                        "type": "heman_points *",
                        "definition": [
                            "heman_points *coords"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rgb",
                        "type": "heman_color",
                        "definition": [
                            "heman_color rgb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mind",
                        "type": "float",
                        "definition": [
                            "float mind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxd",
                        "type": "float",
                        "definition": [
                            "float maxd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filterd",
                        "type": "int",
                        "definition": [
                            "int filterd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width = target->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height = target->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "seed",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *seed = heman_image_create(width, height, 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inv",
                        "type": "float",
                        "definition": [
                            "float inv = 1.0f / 255.0f"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "float",
                        "definition": [
                            "float r = ((float) ((rgb >> 16) & 0xff)) * inv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "g",
                        "type": "float",
                        "definition": [
                            "float g = ((float) ((rgb >> 8) & 0xff)) * inv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "float",
                        "definition": [
                            "float b = ((float) (rgb & 0xff)) * inv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "float",
                        "definition": [
                            "float a = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float *",
                        "definition": [
                            "float *dst = target->data + ((y * width) * target->nbands)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "float",
                        "definition": [
                            "float dist = *heman_image_texel(seed, x, y)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_export_ply",
            "header": "void heman_export_ply(heman_image *, const char *filename)",
            "params": [
                "heman_image *img",
                "const char *filename"
            ],
            "definition": "void heman_export_ply(heman_image *img, const char *filename)\n{\n  assert(img->nbands == 1);\n  FILE *fout = fopen(filename, \"wb\");\n  int ncols = img->width - 1;\n  int nrows = img->height - 1;\n  int ncells = ncols * nrows;\n  int nverts = img->width * img->height;\n  fprintf(fout, \"ply\\nformat binary_little_endian 1.0\\ncomment heman\\nelement vertex %d\\nproperty float32 x\\nproperty float32 y\\nproperty float32 z\\nelement face %d\\nproperty list int32 int32 vertex_indices\\nend_header\\n\", nverts, ncells);\n  float invw = 2.0f / img->width;\n  float invh = 2.0f / img->height;\n  float vert[3];\n  for (int j = 0; j < img->height; j += 1)\n  {\n    for (int i = 0; i < img->width; i += 1)\n    {\n      vert[0] = (-1) + (i * invw);\n      vert[1] = (-1) + (j * invh);\n      vert[2] = *heman_image_texel(img, i, j);\n      fwrite(vert, sizeof(vert), 1, fout);\n    }\n\n  }\n\n  int face[5];\n  face[0] = 4;\n  for (int j = 0; j < nrows; j += 1)\n  {\n    int p = j * img->width;\n    for (int i = 0; i < ncols; i += 1, p += 1)\n    {\n      face[1] = p;\n      face[2] = p + 1;\n      face[3] = (p + img->width) + 1;\n      face[4] = p + img->width;\n      fwrite(face, sizeof(face), 1, fout);\n    }\n\n  }\n\n  fclose(fout);\n}\n\n",
            "calle": [
                "assert",
                "fclose",
                "fopen",
                "fprintf",
                "fwrite",
                "heman_image_texel"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "img",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *img"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filename",
                        "type": "const char *",
                        "definition": [
                            "const char *filename"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fout",
                        "type": "FILE *",
                        "definition": [
                            "FILE *fout = fopen(filename, \"wb\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ncols",
                        "type": "int",
                        "definition": [
                            "int ncols = img->width - 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nrows",
                        "type": "int",
                        "definition": [
                            "int nrows = img->height - 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ncells",
                        "type": "int",
                        "definition": [
                            "int ncells = ncols * nrows"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nverts",
                        "type": "int",
                        "definition": [
                            "int nverts = img->width * img->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invw",
                        "type": "float",
                        "definition": [
                            "float invw = 2.0f / img->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invh",
                        "type": "float",
                        "definition": [
                            "float invh = 2.0f / img->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vert",
                        "type": "float [3]",
                        "definition": [
                            "float vert[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "face",
                        "type": "int [5]",
                        "definition": [
                            "int face[5]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "int",
                        "definition": [
                            "int p = j * img->width"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_export_with_colors_ply",
            "header": "void heman_export_with_colors_ply(heman_image *heightmap, heman_image *colors, const char *filename)",
            "params": [
                "heman_image *hmap",
                "heman_image *colors",
                "const char *filename"
            ],
            "definition": "void heman_export_with_colors_ply(heman_image *hmap, heman_image *colors, const char *filename)\n{\n  int width = hmap->width;\n  int height = hmap->height;\n  assert(hmap->nbands == 1);\n  assert(colors->nbands == 3);\n  assert(colors->width == width);\n  assert(colors->height == height);\n  FILE *fout = fopen(filename, \"wb\");\n  int ncols = hmap->width - 1;\n  int nrows = hmap->height - 1;\n  int ncells = ncols * nrows;\n  int nverts = hmap->width * hmap->height;\n  unsigned char *colordata = malloc((width * height) * 3);\n  heman_export_u8(colors, 0.0, 1.0, colordata);\n  fprintf(fout, \"ply\\nformat binary_little_endian 1.0\\ncomment heman\\nelement vertex %d\\nproperty float32 x\\nproperty float32 y\\nproperty float32 z\\nproperty uchar red\\nproperty uchar green\\nproperty uchar blue\\nproperty uchar alpha\\nelement face %d\\nproperty list int32 int32 vertex_indices\\nend_header\\n\", nverts, ncells);\n  float invw = 2.0f / width;\n  float invh = 2.0f / height;\n  heman_byte *pcolor = colordata;\n  unsigned int pcolor_idx = 0;\n  float vert[3];\n  for (int j = 0; j < height; j += 1)\n  {\n    for (int i = 0; i < width; i += 1)\n    {\n      vert[0] = (-1) + (i * invw);\n      vert[1] = (-1) + (j * invh);\n      vert[2] = *heman_image_texel(hmap, i, j);\n      fwrite(vert, sizeof(vert), 1, fout);\n      fwrite(pcolor, 3, 1, fout);\n      pcolor_idx += 3;\n      fputc(255, fout);\n    }\n\n  }\n\n  int face[5];\n  face[0] = 4;\n  for (int j = 0; j < nrows; j += 1)\n  {\n    int p = j * width;\n    for (int i = 0; i < ncols; i += 1, p += 1)\n    {\n      face[1] = p;\n      face[2] = p + 1;\n      face[3] = (p + hmap->width) + 1;\n      face[4] = p + hmap->width;\n      fwrite(face, sizeof(face), 1, fout);\n    }\n\n  }\n\n  fclose(fout);\n  free(colordata);\n}\n\n",
            "calle": [
                "assert",
                "fclose",
                "fopen",
                "fprintf",
                "fputc",
                "free",
                "fwrite",
                "heman_export_u8",
                "heman_image_texel",
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "hmap",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *hmap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "colors",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *colors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filename",
                        "type": "const char *",
                        "definition": [
                            "const char *filename"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width = hmap->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height = hmap->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fout",
                        "type": "FILE *",
                        "definition": [
                            "FILE *fout = fopen(filename, \"wb\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ncols",
                        "type": "int",
                        "definition": [
                            "int ncols = hmap->width - 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nrows",
                        "type": "int",
                        "definition": [
                            "int nrows = hmap->height - 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ncells",
                        "type": "int",
                        "definition": [
                            "int ncells = ncols * nrows"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nverts",
                        "type": "int",
                        "definition": [
                            "int nverts = hmap->width * hmap->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "colordata",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *colordata = malloc((width * height) * 3)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invw",
                        "type": "float",
                        "definition": [
                            "float invw = 2.0f / width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invh",
                        "type": "float",
                        "definition": [
                            "float invh = 2.0f / height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pcolor",
                        "type": "heman_byte *",
                        "definition": [
                            "heman_byte *pcolor = colordata"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pcolor_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pcolor_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vert",
                        "type": "float [3]",
                        "definition": [
                            "float vert[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "face",
                        "type": "int [5]",
                        "definition": [
                            "int face[5]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "int",
                        "definition": [
                            "int p = j * width"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_export_u8",
            "header": "void heman_export_u8(heman_image *source, float minv, float maxv, heman_byte *outp)",
            "params": [
                "heman_image *source",
                "float minv",
                "float maxv",
                "heman_byte *outp"
            ],
            "definition": "void heman_export_u8(heman_image *source, float minv, float maxv, heman_byte *outp)\n{\n  const float *inp = source->data;\n  unsigned int inp_idx = 0;\n  float scale = 1.0f / (maxv - minv);\n  int size = (source->height * source->width) * source->nbands;\n  for (int i = 0; i < size; i += 1)\n  {\n    float v = (255 * (inp[inp_idx] - minv)) * scale;\n    inp_idx += 1;\n    *(outp++) = (0 > ((255 > v) ? (v) : (255))) ? (0) : ((255 > v) ? (v) : (255));\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "source",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *source"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minv",
                        "type": "float",
                        "definition": [
                            "float minv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxv",
                        "type": "float",
                        "definition": [
                            "float maxv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outp",
                        "type": "heman_byte *",
                        "definition": [
                            "heman_byte *outp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inp",
                        "type": "const float *",
                        "definition": [
                            "const float *inp = source->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inp_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int inp_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "float",
                        "definition": [
                            "float scale = 1.0f / (maxv - minv)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = (source->height * source->width) * source->nbands"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "float",
                        "definition": [
                            "float v = (255 * (inp[inp_idx] - minv)) * scale"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "generate_gaussian_row",
            "header": "void generate_gaussian_row(int *target, int fwidth)",
            "params": [
                "int *target",
                "int fwidth"
            ],
            "definition": "void generate_gaussian_row(int *target, int fwidth)\n{\n  assert(fwidth > 0);\n  int nbytes = fwidth * (sizeof(int));\n  int *tmp = malloc(nbytes);\n  target[0] = (tmp[0] = 1);\n  for (int col = 1; col < fwidth; col += 1)\n  {\n    target[col] = 0;\n    tmp[col] = 0;\n  }\n\n  for (int row = 1; row < fwidth; row += 1)\n  {\n    for (int col = 1; col <= row; col += 1)\n    {\n      target[col] = tmp[col] + tmp[col - 1];\n    }\n\n    for (int col = 1; col <= row; col += 1)\n    {\n      tmp[col] = target[col];\n    }\n\n  }\n\n  free(tmp);\n}\n\n",
            "calle": [
                "assert",
                "free",
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "target",
                        "type": "int *",
                        "definition": [
                            "int *target"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fwidth",
                        "type": "int",
                        "definition": [
                            "int fwidth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nbytes",
                        "type": "int",
                        "definition": [
                            "int nbytes = fwidth * (sizeof(int))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "int *",
                        "definition": [
                            "int *tmp = malloc(nbytes)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "col",
                        "type": "int",
                        "definition": [
                            "int col = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row",
                        "type": "int",
                        "definition": [
                            "int row = 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "generate_gaussian_splat",
            "header": "void generate_gaussian_splat(float *target, int fwidth)",
            "params": [
                "float *target",
                "int fwidth"
            ],
            "definition": "void generate_gaussian_splat(float *target, int fwidth)\n{\n  int *gaussian_row = malloc(fwidth * (sizeof(int)));\n  generate_gaussian_row(gaussian_row, fwidth);\n  int shift = 1 << (fwidth - 1);\n  float scale = 1.0 / (shift * shift);\n  float *gptr = target;\n  unsigned int gptr_idx = 0;\n  for (int j = 0; j < fwidth; j += 1)\n  {\n    for (int i = 0; i < fwidth; i += 1)\n    {\n      gptr[gptr_idx] = (gaussian_row[i] * gaussian_row[j]) * scale;\n      gptr_idx += 1;\n    }\n\n  }\n\n  free(gaussian_row);\n}\n\n",
            "calle": [
                "free",
                "generate_gaussian_row",
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "target",
                        "type": "float *",
                        "definition": [
                            "float *target"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fwidth",
                        "type": "int",
                        "definition": [
                            "int fwidth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gaussian_row",
                        "type": "int *",
                        "definition": [
                            "int *gaussian_row = malloc(fwidth * (sizeof(int)))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "shift",
                        "type": "int",
                        "definition": [
                            "int shift = 1 << (fwidth - 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "float",
                        "definition": [
                            "float scale = 1.0 / (shift * shift)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gptr",
                        "type": "float *",
                        "definition": [
                            "float *gptr = target"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gptr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_generate_island_heightmap",
            "header": "heman_image *heman_generate_island_heightmap(int width, int height, int seed)",
            "params": [
                "int width",
                "int height",
                "int seed"
            ],
            "definition": "heman_image *heman_generate_island_heightmap(int width, int height, int seed)\n{\n  heman_image *noisetex = heman_internal_generate_island_noise(width, height, seed);\n  heman_image *coastmask = heman_image_create(width, height, 1);\n  float *data = coastmask->data;\n  unsigned int data_idx = 0;\n  float invh = 1.0f / height;\n  float invw = 1.0f / width;\n  int hh = height / 2;\n  int hw = width / 2;\n  int y;\n  #pragma omp parallel for\n  for (y = 0; y < height; y += 1)\n  {\n    helper_heman_generate_island_heightmap_1(width, noisetex, data, data_idx, invh, invw, hh, hw, y);\n  }\n\n  heman_image *heightmap = heman_distance_create_sdf(coastmask);\n  heman_image_destroy(coastmask);\n  heman_image *result = heman_image_create(width, height, 1);\n  data_idx = result->data_idx;\n  #pragma omp parallel for\n  for (y = 0; y < height; y += 1)\n  {\n    helper_heman_generate_island_heightmap_2(width, noisetex, data, data_idx, invh, invw, y, heightmap);\n  }\n\n  heman_image_destroy(noisetex);\n  heman_image_destroy(heightmap);\n  return result;\n}\n\n",
            "calle": [
                "helper_heman_generate_island_heightmap_1",
                "helper_heman_generate_island_heightmap_2",
                "heman_distance_create_sdf",
                "heman_image_create",
                "heman_image_destroy",
                "heman_internal_generate_island_noise"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "seed",
                        "type": "int",
                        "definition": [
                            "int seed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "noisetex",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *noisetex = heman_internal_generate_island_noise(width, height, seed)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "coastmask",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *coastmask = heman_image_create(width, height, 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "float *",
                        "definition": [
                            "float *data = coastmask->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int data_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invh",
                        "type": "float",
                        "definition": [
                            "float invh = 1.0f / height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invw",
                        "type": "float",
                        "definition": [
                            "float invw = 1.0f / width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hh",
                        "type": "int",
                        "definition": [
                            "int hh = height / 2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hw",
                        "type": "int",
                        "definition": [
                            "int hw = width / 2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "heightmap",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *heightmap = heman_distance_create_sdf(coastmask)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *result = heman_image_create(width, height, 1)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_generate_rock_heightmap",
            "header": "heman_image *heman_generate_rock_heightmap(int width, int height, int seed)",
            "params": [
                "int width",
                "int height",
                "int seed"
            ],
            "definition": "heman_image *heman_generate_rock_heightmap(int width, int height, int seed)\n{\n  heman_image *noisetex = heman_internal_generate_rock_noise(width, height, seed);\n  heman_image *heightmap = heman_image_create(width, height, 1);\n  float *data = heightmap->data;\n  float invh = 1.0f / height;\n  float invw = 1.0f / width;\n  int hh = height / 2;\n  int hw = width / 2;\n  int y;\n  #pragma omp parallel for\n  for (y = 0; y < height; y += 1)\n  {\n    float vv = (y - hh) * invh;\n    float *dst = data + (y * width);\n    unsigned int dst_idx = 0;\n    for (int x = 0; x < width; x += 1)\n    {\n      float v = y * invh;\n      float u = x * invw;\n      float n;\n      heman_image_sample(noisetex, u, v, &n);\n      u = (x - hw) * invw;\n      v = vv;\n      float r = 0.3 + n;\n      if (((u * u) + (v * v)) > (r * r))\n      {\n        dst[dst_idx] = 0;\n        dst_idx += 1;\n        continue;\n      }\n      float z = sqrt(((r * r) - (u * u)) - (v * v));\n      dst[dst_idx] = z;\n      dst_idx += 1;\n    }\n\n  }\n\n  heman_image_destroy(noisetex);\n  return heightmap;\n}\n\n",
            "calle": [
                "heman_image_create",
                "heman_image_destroy",
                "heman_image_sample",
                "heman_internal_generate_rock_noise",
                "sqrt"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "seed",
                        "type": "int",
                        "definition": [
                            "int seed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "noisetex",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *noisetex = heman_internal_generate_rock_noise(width, height, seed)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "heightmap",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *heightmap = heman_image_create(width, height, 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "float *",
                        "definition": [
                            "float *data = heightmap->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invh",
                        "type": "float",
                        "definition": [
                            "float invh = 1.0f / height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invw",
                        "type": "float",
                        "definition": [
                            "float invw = 1.0f / width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hh",
                        "type": "int",
                        "definition": [
                            "int hh = height / 2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hw",
                        "type": "int",
                        "definition": [
                            "int hw = width / 2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vv",
                        "type": "float",
                        "definition": [
                            "float vv = (y - hh) * invh"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float *",
                        "definition": [
                            "float *dst = data + (y * width)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "float",
                        "definition": [
                            "float v = y * invh"
                        ]
                    },
                    {
                        "path": null,
                        "name": "u",
                        "type": "float",
                        "definition": [
                            "float u = x * invw"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "float",
                        "definition": [
                            "float n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "float",
                        "definition": [
                            "float r = 0.3 + n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z",
                        "type": "float",
                        "definition": [
                            "float z = sqrt(((r * r) - (u * u)) - (v * v))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_generate_planet_heightmap",
            "header": "heman_image *heman_generate_planet_heightmap(int width, int height, int seed)",
            "params": [
                "int width",
                "int height",
                "int seed"
            ],
            "definition": "heman_image *heman_generate_planet_heightmap(int width, int height, int seed)\n{\n  struct osn_context *ctx;\n  open_simplex_noise(seed, &ctx);\n  heman_image *result = heman_image_create(width, height, 1);\n  float scalex = (2.0f * 3.1415926535) / width;\n  float scaley = 3.1415926535 / height;\n  float invh = 1.0f / height;\n  int y;\n  #pragma omp parallel for\n  for (y = 0; y < height; y += 1)\n  {\n    helper_heman_generate_planet_heightmap_1(width, ctx, result, scalex, scaley, invh, y);\n  }\n\n  open_simplex_noise_free(ctx);\n  return result;\n}\n\n",
            "calle": [
                "helper_heman_generate_planet_heightmap_1",
                "heman_image_create",
                "open_simplex_noise",
                "open_simplex_noise_free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "seed",
                        "type": "int",
                        "definition": [
                            "int seed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct osn_context",
                        "type": "struct osn_context *",
                        "definition": [
                            "struct osn_context *ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *result = heman_image_create(width, height, 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scalex",
                        "type": "float",
                        "definition": [
                            "float scalex = (2.0f * 3.1415926535) / width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scaley",
                        "type": "float",
                        "definition": [
                            "float scaley = 3.1415926535 / height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invh",
                        "type": "float",
                        "definition": [
                            "float invh = 1.0f / height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_generate_archipelago_heightmap",
            "header": "heman_image *heman_generate_archipelago_heightmap(int width, int height, heman_points *points, float noiseamt, int seed)",
            "params": [
                "int width",
                "int height",
                "heman_points *points",
                "float noiseamt",
                "int seed"
            ],
            "definition": "heman_image *heman_generate_archipelago_heightmap(int width, int height, heman_points *points, float noiseamt, int seed)\n{\n  heman_image *noisetex = heman_internal_generate_island_noise(width, height, seed);\n  heman_image *coastmask = heman_image_create(width, height, 1);\n  heman_image_clear(coastmask, 0);\n  heman_internal_draw_seeds(coastmask, points, 1);\n  float *data = coastmask->data;\n  unsigned int data_idx = 0;\n  float invh = 1.0f / height;\n  float invw = 1.0f / width;\n  int hh = height / 2;\n  int hw = width / 2;\n  int y;\n  #pragma omp parallel for\n  for (y = 0; y < height; y += 1)\n  {\n    helper_heman_generate_archipelago_heightmap_1(width, noiseamt, noisetex, data, data_idx, invh, invw, hh, hw, y);\n  }\n\n  heman_image *heightmap = heman_distance_create_sdf(coastmask);\n  heman_image_destroy(coastmask);\n  heman_image *result = heman_image_create(width, height, 1);\n  data_idx = result->data_idx;\n  #pragma omp parallel for\n  for (y = 0; y < height; y += 1)\n  {\n    helper_heman_generate_archipelago_heightmap_2(width, noisetex, data, data_idx, invh, invw, y, heightmap);\n  }\n\n  heman_image_destroy(noisetex);\n  heman_image_destroy(heightmap);\n  return result;\n}\n\n",
            "calle": [
                "helper_heman_generate_archipelago_heightmap_1",
                "helper_heman_generate_archipelago_heightmap_2",
                "heman_distance_create_sdf",
                "heman_image_clear",
                "heman_image_create",
                "heman_image_destroy",
                "heman_internal_draw_seeds",
                "heman_internal_generate_island_noise"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "points",
                        "type": "heman_points *",
                        "definition": [
                            "heman_points *points"
                        ]
                    },
                    {
                        "path": null,
                        "name": "noiseamt",
                        "type": "float",
                        "definition": [
                            "float noiseamt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "seed",
                        "type": "int",
                        "definition": [
                            "int seed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "noisetex",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *noisetex = heman_internal_generate_island_noise(width, height, seed)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "coastmask",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *coastmask = heman_image_create(width, height, 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "float *",
                        "definition": [
                            "float *data = coastmask->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int data_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invh",
                        "type": "float",
                        "definition": [
                            "float invh = 1.0f / height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invw",
                        "type": "float",
                        "definition": [
                            "float invw = 1.0f / width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hh",
                        "type": "int",
                        "definition": [
                            "int hh = height / 2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hw",
                        "type": "int",
                        "definition": [
                            "int hw = width / 2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "heightmap",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *heightmap = heman_distance_create_sdf(coastmask)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *result = heman_image_create(width, height, 1)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_generate_archipelago_political",
            "header": "void heman_generate_archipelago_political(int width, int height, heman_points *points, const heman_color *colors, heman_color ocean, int seed, heman_image **elevation, heman_image **political, int elevation_mode)",
            "params": [
                "int width",
                "int height",
                "heman_points *points",
                "const heman_color *colors",
                "heman_color ocean",
                "int seed",
                "heman_image **elevation",
                "heman_image **political",
                "int elevation_mode"
            ],
            "definition": "void heman_generate_archipelago_political(int width, int height, heman_points *points, const heman_color *colors, heman_color ocean, int seed, heman_image **elevation, heman_image **political, int elevation_mode)\n{\n  *political = heman_generate_archipelago_political_1(width, height, points, colors, ocean, seed);\n  if (elevation_mode == 0)\n  {\n    *elevation = heman_generate_archipelago_political_2(width, height, ocean, seed, *political, 0);\n  }\n  else\n  {\n    int ncolors = points->width;\n    *elevation = heman_generate_archipelago_political_3(width, height, colors, ncolors, ocean, seed, *political);\n  }\n}\n\n",
            "calle": [
                "heman_generate_archipelago_political_1",
                "heman_generate_archipelago_political_2",
                "heman_generate_archipelago_political_3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "points",
                        "type": "heman_points *",
                        "definition": [
                            "heman_points *points"
                        ]
                    },
                    {
                        "path": null,
                        "name": "colors",
                        "type": "const heman_color *",
                        "definition": [
                            "const heman_color *colors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ocean",
                        "type": "heman_color",
                        "definition": [
                            "heman_color ocean"
                        ]
                    },
                    {
                        "path": null,
                        "name": "seed",
                        "type": "int",
                        "definition": [
                            "int seed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "elevation",
                        "type": "heman_image **",
                        "definition": [
                            "heman_image **elevation"
                        ]
                    },
                    {
                        "path": null,
                        "name": "political",
                        "type": "heman_image **",
                        "definition": [
                            "heman_image **political"
                        ]
                    },
                    {
                        "path": null,
                        "name": "elevation_mode",
                        "type": "int",
                        "definition": [
                            "int elevation_mode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ncolors",
                        "type": "int",
                        "definition": [
                            "int ncolors = points->width"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_generate_simplex_fbm",
            "header": "heman_image *heman_generate_simplex_fbm(int width, int height, float frequency, float amplitude, int octaves, float lacunarity, float gain, int seed)",
            "params": [
                "int width",
                "int height",
                "float frequency",
                "float amplitude",
                "int octaves",
                "float lacunarity",
                "float gain",
                "int seed"
            ],
            "definition": "heman_image *heman_generate_simplex_fbm(int width, int height, float frequency, float amplitude, int octaves, float lacunarity, float gain, int seed)\n{\n  struct osn_context *ctx;\n  open_simplex_noise(seed, &ctx);\n  heman_image *img = heman_image_create(width, height, 1);\n  float *data = img->data;\n  float invh = 1.0f / height;\n  float invw = 1.0f / width;\n  float ampl = amplitude;\n  float freq = frequency;\n  memset(data, 0, ((sizeof(float)) * width) * height);\n  while (octaves--)\n  {\n    int y;\n    #pragma omp parallel for\n    for (y = 0; y < height; y += 1)\n    {\n      float v = y * invh;\n      float *dst = data + (y * width);\n      unsigned int dst_idx = 0;\n      for (int x = 0; x < width; x += 1)\n      {\n        float u = x * invw;\n        dst[dst_idx] += ampl * open_simplex_noise2(ctx, u * freq, v * freq);\n        dst_idx += 1;\n      }\n\n    }\n\n    ampl *= gain;\n    freq *= lacunarity;\n  }\n\n  open_simplex_noise_free(ctx);\n  return img;\n}\n\n",
            "calle": [
                "heman_image_create",
                "memset",
                "open_simplex_noise",
                "open_simplex_noise2",
                "open_simplex_noise_free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "frequency",
                        "type": "float",
                        "definition": [
                            "float frequency"
                        ]
                    },
                    {
                        "path": null,
                        "name": "amplitude",
                        "type": "float",
                        "definition": [
                            "float amplitude"
                        ]
                    },
                    {
                        "path": null,
                        "name": "octaves",
                        "type": "int",
                        "definition": [
                            "int octaves"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lacunarity",
                        "type": "float",
                        "definition": [
                            "float lacunarity"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gain",
                        "type": "float",
                        "definition": [
                            "float gain"
                        ]
                    },
                    {
                        "path": null,
                        "name": "seed",
                        "type": "int",
                        "definition": [
                            "int seed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct osn_context",
                        "type": "struct osn_context *",
                        "definition": [
                            "struct osn_context *ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "img",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *img = heman_image_create(width, height, 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "float *",
                        "definition": [
                            "float *data = img->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invh",
                        "type": "float",
                        "definition": [
                            "float invh = 1.0f / height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invw",
                        "type": "float",
                        "definition": [
                            "float invw = 1.0f / width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ampl",
                        "type": "float",
                        "definition": [
                            "float ampl = amplitude"
                        ]
                    },
                    {
                        "path": null,
                        "name": "freq",
                        "type": "float",
                        "definition": [
                            "float freq = frequency"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "float",
                        "definition": [
                            "float v = y * invh"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float *",
                        "definition": [
                            "float *dst = data + (y * width)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "u",
                        "type": "float",
                        "definition": [
                            "float u = x * invw"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_internal_generate_island_noise",
            "header": "",
            "params": [
                "int width",
                "int height",
                "int seed"
            ],
            "definition": "heman_image *heman_internal_generate_island_noise(int width, int height, int seed)\n{\n  struct osn_context *ctx;\n  open_simplex_noise(seed, &ctx);\n  heman_image *img = heman_image_create(width, height, 3);\n  float *data = img->data;\n  float invh = 1.0f / ((width > height) ? (width) : (height));\n  float invw = 1.0f / ((width > height) ? (width) : (height));\n  float freqs[] = {4.0, 16.0, 32.0, 64.0, 128.0};\n  float ampls[] = {0.2, 0.1, 0.05, 0.025, 0.0125};\n  int y;\n  #pragma omp parallel for\n  for (y = 0; y < height; y += 1)\n  {\n    float v = y * invh;\n    float *dst = data + ((y * width) * 3);\n    unsigned int dst_idx = 0;\n    for (int x = 0; x < width; x += 1)\n    {\n      float u = x * invw;\n      dst[dst_idx] = ((ampls[0] * open_simplex_noise2(ctx, u * freqs[0], v * freqs[0])) + (ampls[1] * open_simplex_noise2(ctx, u * freqs[1], v * freqs[1]))) + (ampls[2] * open_simplex_noise2(ctx, u * freqs[2], v * freqs[2]));\n      dst_idx += 1;\n      dst[dst_idx] = (ampls[3] * open_simplex_noise2(ctx, u * freqs[3], v * freqs[3])) + (ampls[4] * open_simplex_noise2(ctx, u * freqs[4], v * freqs[4]));\n      dst_idx += 1;\n      u += 0.5;\n      *((&dst[dst_idx])++) = (ampls[3] * open_simplex_noise2(ctx, u * freqs[3], v * freqs[3])) + (ampls[4] * open_simplex_noise2(ctx, u * freqs[4], v * freqs[4]));\n    }\n\n  }\n\n  open_simplex_noise_free(ctx);\n  return img;\n}\n\n",
            "calle": [
                "heman_image_create",
                "open_simplex_noise",
                "open_simplex_noise2",
                "open_simplex_noise_free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "seed",
                        "type": "int",
                        "definition": [
                            "int seed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct osn_context",
                        "type": "struct osn_context *",
                        "definition": [
                            "struct osn_context *ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "img",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *img = heman_image_create(width, height, 3)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "float *",
                        "definition": [
                            "float *data = img->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invh",
                        "type": "float",
                        "definition": [
                            "float invh = 1.0f / ((width > height) ? (width) : (height))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invw",
                        "type": "float",
                        "definition": [
                            "float invw = 1.0f / ((width > height) ? (width) : (height))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "freqs",
                        "type": "float []",
                        "definition": [
                            "float freqs[] = {4.0, 16.0, 32.0, 64.0, 128.0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ampls",
                        "type": "float []",
                        "definition": [
                            "float ampls[] = {0.2, 0.1, 0.05, 0.025, 0.0125}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "float",
                        "definition": [
                            "float v = y * invh"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float *",
                        "definition": [
                            "float *dst = data + ((y * width) * 3)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "u",
                        "type": "float",
                        "definition": [
                            "float u = x * invw"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_internal_generate_rock_noise",
            "header": "",
            "params": [
                "int width",
                "int height",
                "int seed"
            ],
            "definition": "heman_image *heman_internal_generate_rock_noise(int width, int height, int seed)\n{\n  struct osn_context *ctx;\n  open_simplex_noise(seed, &ctx);\n  heman_image *img = heman_image_create(width, height, 1);\n  float *data = img->data;\n  float invh = 1.0f / ((width > height) ? (width) : (height));\n  float invw = 1.0f / ((width > height) ? (width) : (height));\n  float freqs[] = {2.0, 4.0, 16.0};\n  float ampls[] = {0.2, 0.05, 0.01};\n  int y;\n  #pragma omp parallel for\n  for (y = 0; y < height; y += 1)\n  {\n    float v = y * invh;\n    float *dst = data + (y * width);\n    unsigned int dst_idx = 0;\n    for (int x = 0; x < width; x += 1)\n    {\n      float u = x * invw;\n      dst[dst_idx] = ((ampls[0] * open_simplex_noise2(ctx, u * freqs[0], v * freqs[0])) + (ampls[1] * open_simplex_noise2(ctx, u * freqs[1], v * freqs[1]))) + (ampls[2] * open_simplex_noise2(ctx, u * freqs[2], v * freqs[2]));\n      dst_idx += 1;\n    }\n\n  }\n\n  open_simplex_noise_free(ctx);\n  return img;\n}\n\n",
            "calle": [
                "heman_image_create",
                "open_simplex_noise",
                "open_simplex_noise2",
                "open_simplex_noise_free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "seed",
                        "type": "int",
                        "definition": [
                            "int seed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct osn_context",
                        "type": "struct osn_context *",
                        "definition": [
                            "struct osn_context *ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "img",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *img = heman_image_create(width, height, 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "float *",
                        "definition": [
                            "float *data = img->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invh",
                        "type": "float",
                        "definition": [
                            "float invh = 1.0f / ((width > height) ? (width) : (height))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invw",
                        "type": "float",
                        "definition": [
                            "float invw = 1.0f / ((width > height) ? (width) : (height))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "freqs",
                        "type": "float []",
                        "definition": [
                            "float freqs[] = {2.0, 4.0, 16.0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ampls",
                        "type": "float []",
                        "definition": [
                            "float ampls[] = {0.2, 0.05, 0.01}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "float",
                        "definition": [
                            "float v = y * invh"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float *",
                        "definition": [
                            "float *dst = data + (y * width)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "u",
                        "type": "float",
                        "definition": [
                            "float u = x * invw"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "sphere",
            "header": "",
            "params": [
                "float u",
                "float v",
                "float r",
                "kmVec3 *dst"
            ],
            "definition": "static void sphere(float u, float v, float r, kmVec3 *dst)\n{\n  dst->x = (r * sin(v)) * cos(u);\n  dst->y = r * cos(v);\n  dst->z = (r * (-sin(v))) * sin(u);\n}\n\n",
            "calle": [
                "cos",
                "sin"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "u",
                        "type": "float",
                        "definition": [
                            "float u"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "float",
                        "definition": [
                            "float v"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "float",
                        "definition": [
                            "float r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *dst"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_internal_draw_seeds",
            "header": "",
            "params": [
                "heman_image *target",
                "heman_points *pts",
                "int filterd"
            ],
            "definition": "void heman_internal_draw_seeds(heman_image *target, heman_points *pts, int filterd)\n{\n  int radius = target->width / filterd;\n  int fwidth = (radius * 2) + 1;\n  float *src = pts->data;\n  unsigned int src_idx = 0;\n  int w = target->width;\n  int h = target->height;\n  for (int i = 0; i < pts->width; i += 1)\n  {\n    float x = src[src_idx];\n    src_idx += 1;\n    float y = src[src_idx];\n    src_idx += 1;\n    float strength = DEFAULT_STRENGTH;\n    if (pts->nbands == 3)\n    {\n      strength = src[src_idx];\n      src_idx += 1;\n    }\n    strength = SEALEVEL + (strength * 0.1);\n    int ix = x * w;\n    int iy = y * h;\n    int ii = ix - radius;\n    int jj = iy - radius;\n    for (int kj = 0; kj < fwidth; kj++)\n    {\n      for (int ki = 0; ki < fwidth; ki++)\n      {\n        int i = ii + ki;\n        int j = jj + kj;\n        if ((((i < 0) || (i >= w)) || (j < 0)) || (j >= h))\n        {\n          continue;\n        }\n        float *texel = heman_image_texel(target, i, j);\n        int d2 = ((i - ix) * (i - ix)) + ((j - iy) * (j - iy));\n        float dist = 1 - (sqrt(d2) / radius);\n        *texel = ((*texel) > (strength * dist)) ? (*texel) : (strength * dist);\n      }\n\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "heman_image_texel",
                "sqrt"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "target",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *target"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pts",
                        "type": "heman_points *",
                        "definition": [
                            "heman_points *pts"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filterd",
                        "type": "int",
                        "definition": [
                            "int filterd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "radius",
                        "type": "int",
                        "definition": [
                            "int radius = target->width / filterd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fwidth",
                        "type": "int",
                        "definition": [
                            "int fwidth = (radius * 2) + 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "float *",
                        "definition": [
                            "float *src = pts->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w",
                        "type": "int",
                        "definition": [
                            "int w = target->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "int",
                        "definition": [
                            "int h = target->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0",
                            "int i = ii + ki"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "float",
                        "definition": [
                            "float x = src[src_idx]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "float",
                        "definition": [
                            "float y = src[src_idx]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strength",
                        "type": "float",
                        "definition": [
                            "float strength = DEFAULT_STRENGTH"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ix",
                        "type": "int",
                        "definition": [
                            "int ix = x * w"
                        ]
                    },
                    {
                        "path": null,
                        "name": "iy",
                        "type": "int",
                        "definition": [
                            "int iy = y * h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ii",
                        "type": "int",
                        "definition": [
                            "int ii = ix - radius"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jj",
                        "type": "int",
                        "definition": [
                            "int jj = iy - radius"
                        ]
                    },
                    {
                        "path": null,
                        "name": "kj",
                        "type": "int",
                        "definition": [
                            "int kj = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ki",
                        "type": "int",
                        "definition": [
                            "int ki = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = jj + kj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "texel",
                        "type": "float *",
                        "definition": [
                            "float *texel = heman_image_texel(target, i, j)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d2",
                        "type": "int",
                        "definition": [
                            "int d2 = ((i - ix) * (i - ix)) + ((j - iy) * (j - iy))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "float",
                        "definition": [
                            "float dist = 1 - (sqrt(d2) / radius)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "DEFAULT_STRENGTH",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "SEALEVEL",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_generate_archipelago_political_1",
            "header": "",
            "params": [
                "int width",
                "int height",
                "heman_points *points",
                "const heman_color *colors",
                "heman_color ocean",
                "int seed"
            ],
            "definition": "heman_image *heman_generate_archipelago_political_1(int width, int height, heman_points *points, const heman_color *colors, heman_color ocean, int seed)\n{\n  heman_image *contour = heman_image_create(width, height, 3);\n  heman_image_clear(contour, 0);\n  heman_draw_contour_from_points(contour, points, ocean, 0.40, 0.41, 1);\n  heman_draw_colored_points(contour, points, colors);\n  heman_image *cf = heman_distance_create_cpcf(contour);\n  heman_image *warped_cpcf = heman_ops_warp(cf, seed, 4);\n  heman_image *political = heman_color_from_cpcf(warped_cpcf, contour);\n  heman_image_destroy(warped_cpcf);\n  heman_image_destroy(cf);\n  heman_image_destroy(contour);\n  return political;\n}\n\n",
            "calle": [
                "heman_color_from_cpcf",
                "heman_distance_create_cpcf",
                "heman_draw_colored_points",
                "heman_draw_contour_from_points",
                "heman_image_clear",
                "heman_image_create",
                "heman_image_destroy",
                "heman_ops_warp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "points",
                        "type": "heman_points *",
                        "definition": [
                            "heman_points *points"
                        ]
                    },
                    {
                        "path": null,
                        "name": "colors",
                        "type": "const heman_color *",
                        "definition": [
                            "const heman_color *colors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ocean",
                        "type": "heman_color",
                        "definition": [
                            "heman_color ocean"
                        ]
                    },
                    {
                        "path": null,
                        "name": "seed",
                        "type": "int",
                        "definition": [
                            "int seed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "contour",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *contour = heman_image_create(width, height, 3)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cf",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *cf = heman_distance_create_cpcf(contour)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "warped_cpcf",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *warped_cpcf = heman_ops_warp(cf, seed, 4)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "political",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *political = heman_color_from_cpcf(warped_cpcf, contour)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_generate_archipelago_political_2",
            "header": "",
            "params": [
                "int width",
                "int height",
                "heman_color ocean",
                "int seed",
                "heman_image *political",
                "int invert"
            ],
            "definition": "heman_image *heman_generate_archipelago_political_2(int width, int height, heman_color ocean, int seed, heman_image *political, int invert)\n{\n  heman_image *coastmask = heman_ops_extract_mask(political, ocean, invert);\n  heman_image *sdf = heman_distance_create_sdf(coastmask);\n  heman_image_destroy(coastmask);\n  heman_image *elevation = heman_image_create(width, height, 1);\n  heman_image *noisetex = heman_internal_generate_island_noise(width, height, seed);\n  float *data = elevation->data;\n  float invw = 1.0 / width;\n  float invh = 1.0 / height;\n  int y;\n  #pragma omp parallel for\n  for (y = 0; y < height; y += 1)\n  {\n    helper_heman_generate_archipelago_political_2_1(width, sdf, noisetex, data, invw, invh, y);\n  }\n\n  heman_image_destroy(noisetex);\n  heman_image_destroy(sdf);\n  return elevation;\n}\n\n",
            "calle": [
                "helper_heman_generate_archipelago_political_2_1",
                "heman_distance_create_sdf",
                "heman_image_create",
                "heman_image_destroy",
                "heman_internal_generate_island_noise",
                "heman_ops_extract_mask"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ocean",
                        "type": "heman_color",
                        "definition": [
                            "heman_color ocean"
                        ]
                    },
                    {
                        "path": null,
                        "name": "seed",
                        "type": "int",
                        "definition": [
                            "int seed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "political",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *political"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invert",
                        "type": "int",
                        "definition": [
                            "int invert"
                        ]
                    },
                    {
                        "path": null,
                        "name": "coastmask",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *coastmask = heman_ops_extract_mask(political, ocean, invert)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sdf",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *sdf = heman_distance_create_sdf(coastmask)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "elevation",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *elevation = heman_image_create(width, height, 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "noisetex",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *noisetex = heman_internal_generate_island_noise(width, height, seed)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "float *",
                        "definition": [
                            "float *data = elevation->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invw",
                        "type": "float",
                        "definition": [
                            "float invw = 1.0 / width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invh",
                        "type": "float",
                        "definition": [
                            "float invh = 1.0 / height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_generate_archipelago_political_3",
            "header": "",
            "params": [
                "int width",
                "int height",
                "const heman_color *colors",
                "int ncolors",
                "heman_color ocean",
                "int seed",
                "heman_image *political"
            ],
            "definition": "heman_image *heman_generate_archipelago_political_3(int width, int height, const heman_color *colors, int ncolors, heman_color ocean, int seed, heman_image *political)\n{\n  heman_image **elevations = malloc((sizeof(heman_image *)) * ncolors);\n  for (int cindex = 0; cindex < ncolors; cindex += 1)\n  {\n    elevations[cindex] = heman_generate_archipelago_political_2(width, height, colors[cindex], seed, political, 1);\n  }\n\n  heman_image *elevation = heman_image_create(width, height, 1);\n  heman_image_clear(elevation, 0);\n  for (int cindex = 0; cindex < ncolors; cindex += 1)\n  {\n    int y;\n    #pragma omp parallel for\n    for (y = 0; y < height; y += 1)\n    {\n      float *dst = elevation->data + (y * width);\n      unsigned int dst_idx = 0;\n      float *src = elevations[cindex]->data + (y * width);\n      unsigned int src_idx = 0;\n      for (int x = 0; x < width; x += 1, dst_idx += 1, src_idx += 1)\n      {\n        dst[dst_idx] = (src[src_idx] > dst[dst_idx]) ? (src[src_idx]) : (dst[dst_idx]);\n      }\n\n    }\n\n    heman_image_destroy(elevations[cindex]);\n  }\n\n  free(elevations);\n  heman_image *ocean_elevation = heman_generate_archipelago_political_2(width, height, ocean, seed, political, 0);\n  int y;\n  #pragma omp parallel for\n  for (y = 0; y < height; y += 1)\n  {\n    float *dst = elevation->data + (y * width);\n    unsigned int dst_idx = 0;\n    float *src = ocean_elevation->data + (y * width);\n    unsigned int src_idx = 0;\n    for (int x = 0; x < width; x += 1, dst_idx += 1, src_idx += 1)\n    {\n      if (src[src_idx] < 0)\n      {\n        dst[dst_idx] = src[src_idx];\n      }\n    }\n\n  }\n\n  heman_image_destroy(ocean_elevation);\n  return elevation;\n}\n\n",
            "calle": [
                "free",
                "heman_generate_archipelago_political_2",
                "heman_image_clear",
                "heman_image_create",
                "heman_image_destroy",
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "colors",
                        "type": "const heman_color *",
                        "definition": [
                            "const heman_color *colors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ncolors",
                        "type": "int",
                        "definition": [
                            "int ncolors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ocean",
                        "type": "heman_color",
                        "definition": [
                            "heman_color ocean"
                        ]
                    },
                    {
                        "path": null,
                        "name": "seed",
                        "type": "int",
                        "definition": [
                            "int seed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "political",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *political"
                        ]
                    },
                    {
                        "path": null,
                        "name": "elevations",
                        "type": "heman_image **",
                        "definition": [
                            "heman_image **elevations = malloc((sizeof(heman_image *)) * ncolors)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cindex",
                        "type": "int",
                        "definition": [
                            "int cindex = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "elevation",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *elevation = heman_image_create(width, height, 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float *",
                        "definition": [
                            "float *dst = elevation->data + (y * width)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "float *",
                        "definition": [
                            "float *src = elevations[cindex]->data + (y * width)",
                            "float *src = ocean_elevation->data + (y * width)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ocean_elevation",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *ocean_elevation = heman_generate_archipelago_political_2(width, height, ocean, seed, political, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_heman_generate_island_heightmap_1",
            "header": "",
            "params": [
                "int width",
                "heman_image * const noisetex",
                "float * const data",
                "unsigned int data_idx",
                "float invh",
                "float invw",
                "int hh",
                "int hw",
                "int y"
            ],
            "definition": "void helper_heman_generate_island_heightmap_1(int width, heman_image * const noisetex, float * const data, unsigned int data_idx, float invh, float invw, int hh, int hw, int y)\n{\n  float vv = (y - hh) * invh;\n  float *dst = (&data[data_idx]) + (y * width);\n  unsigned int dst_idx = 0;\n  for (int x = 0; x < width; x += 1)\n  {\n    float n[3];\n    float v = y * invh;\n    float u = x * invw;\n    heman_image_sample(noisetex, u, v, n);\n    u = (x - hw) * invw;\n    v = vv;\n    u += n[1];\n    v += n[2];\n    float m = 0.707 - sqrt((u * u) + (v * v));\n    m += n[0];\n    dst[dst_idx] = (m < SEALEVEL) ? (0) : (1);\n    dst_idx += 1;\n  }\n\n}\n\n",
            "calle": [
                "heman_image_sample",
                "sqrt"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "noisetex",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const noisetex"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "float * const",
                        "definition": [
                            "float * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int data_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invh",
                        "type": "float",
                        "definition": [
                            "float invh"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invw",
                        "type": "float",
                        "definition": [
                            "float invw"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hh",
                        "type": "int",
                        "definition": [
                            "int hh"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hw",
                        "type": "int",
                        "definition": [
                            "int hw"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vv",
                        "type": "float",
                        "definition": [
                            "float vv = (y - hh) * invh"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float *",
                        "definition": [
                            "float *dst = (&data[data_idx]) + (y * width)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "float [3]",
                        "definition": [
                            "float n[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "float",
                        "definition": [
                            "float v = y * invh"
                        ]
                    },
                    {
                        "path": null,
                        "name": "u",
                        "type": "float",
                        "definition": [
                            "float u = x * invw"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m",
                        "type": "float",
                        "definition": [
                            "float m = 0.707 - sqrt((u * u) + (v * v))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "SEALEVEL",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_heman_generate_island_heightmap_2",
            "header": "",
            "params": [
                "int width",
                "heman_image * const noisetex",
                "float * const data",
                "unsigned int data_idx",
                "float invh",
                "float invw",
                "int y",
                "heman_image * const heightmap"
            ],
            "definition": "void helper_heman_generate_island_heightmap_2(int width, heman_image * const noisetex, float * const data, unsigned int data_idx, float invh, float invw, int y, heman_image * const heightmap)\n{\n  float *dst = (&data[data_idx]) + (y * width);\n  unsigned int dst_idx = 0;\n  for (int x = 0; x < width; x += 1)\n  {\n    float n[3];\n    float u = x * invw;\n    float v = y * invh;\n    heman_image_sample(noisetex, u, v, n);\n    float z;\n    heman_image_sample(heightmap, u, v, &z);\n    if (z > 0.0)\n    {\n      float influence = z;\n      u += influence * n[1];\n      v += influence * n[2];\n      heman_image_sample(heightmap, u, v, &z);\n      z += (6 * influence) * n[0];\n    }\n    dst[dst_idx] = z;\n    dst_idx += 1;\n  }\n\n}\n\n",
            "calle": [
                "heman_image_sample"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "noisetex",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const noisetex"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "float * const",
                        "definition": [
                            "float * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int data_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invh",
                        "type": "float",
                        "definition": [
                            "float invh"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invw",
                        "type": "float",
                        "definition": [
                            "float invw"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "heightmap",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const heightmap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float *",
                        "definition": [
                            "float *dst = (&data[data_idx]) + (y * width)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "float [3]",
                        "definition": [
                            "float n[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "u",
                        "type": "float",
                        "definition": [
                            "float u = x * invw"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "float",
                        "definition": [
                            "float v = y * invh"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z",
                        "type": "float",
                        "definition": [
                            "float z"
                        ]
                    },
                    {
                        "path": null,
                        "name": "influence",
                        "type": "float",
                        "definition": [
                            "float influence = z"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_heman_generate_planet_heightmap_1",
            "header": "",
            "params": [
                "int width",
                "struct osn_context * const ctx",
                "heman_image * const result",
                "float scalex",
                "float scaley",
                "float invh",
                "int y"
            ],
            "definition": "void helper_heman_generate_planet_heightmap_1(int width, struct osn_context * const ctx, heman_image * const result, float scalex, float scaley, float invh, int y)\n{\n  float *dst = result->data + (y * width);\n  unsigned int dst_idx = 0;\n  kmVec3 p;\n  float v = y * invh;\n  float s = 0.95;\n  float antarctic_influence = (((10 * (v - s)) / s) > (-0.5)) ? ((10 * (v - s)) / s) : (-0.5);\n  v = fabs(v - 0.5);\n  v = 1.5 * (0.5 - v);\n  float equatorial_influence = v * v;\n  v = y * scaley;\n  for (int x = 0; x < width; x += 1)\n  {\n    float u = x * scalex;\n    float freq = 1;\n    float amp = 1;\n    float h = antarctic_influence + equatorial_influence;\n    for (int oct = 0; oct < 6; oct += 1)\n    {\n      sphere(u, v, freq, &p);\n      h += amp * open_simplex_noise3(ctx, p.x, p.y, p.z);\n      amp *= 0.5;\n      freq *= 2;\n    }\n\n    dst[dst_idx] = h;\n    dst_idx += 1;\n  }\n\n}\n\n",
            "calle": [
                "fabs",
                "open_simplex_noise3",
                "sphere"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct osn_context",
                        "type": "struct osn_context * const",
                        "definition": [
                            "struct osn_context * const ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scalex",
                        "type": "float",
                        "definition": [
                            "float scalex"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scaley",
                        "type": "float",
                        "definition": [
                            "float scaley"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invh",
                        "type": "float",
                        "definition": [
                            "float invh"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float *",
                        "definition": [
                            "float *dst = result->data + (y * width)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "float",
                        "definition": [
                            "float v = y * invh"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "float",
                        "definition": [
                            "float s = 0.95"
                        ]
                    },
                    {
                        "path": null,
                        "name": "antarctic_influence",
                        "type": "float",
                        "definition": [
                            "float antarctic_influence = (((10 * (v - s)) / s) > (-0.5)) ? ((10 * (v - s)) / s) : (-0.5)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "equatorial_influence",
                        "type": "float",
                        "definition": [
                            "float equatorial_influence = v * v"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "u",
                        "type": "float",
                        "definition": [
                            "float u = x * scalex"
                        ]
                    },
                    {
                        "path": null,
                        "name": "freq",
                        "type": "float",
                        "definition": [
                            "float freq = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "amp",
                        "type": "float",
                        "definition": [
                            "float amp = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "float",
                        "definition": [
                            "float h = antarctic_influence + equatorial_influence"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oct",
                        "type": "int",
                        "definition": [
                            "int oct = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_heman_generate_archipelago_heightmap_1",
            "header": "",
            "params": [
                "int width",
                "float noiseamt",
                "heman_image * const noisetex",
                "float * const data",
                "unsigned int data_idx",
                "float invh",
                "float invw",
                "int hh",
                "int hw",
                "int y"
            ],
            "definition": "void helper_heman_generate_archipelago_heightmap_1(int width, float noiseamt, heman_image * const noisetex, float * const data, unsigned int data_idx, float invh, float invw, int hh, int hw, int y)\n{\n  float vv = (y - hh) * invh;\n  float *dst = (&data[data_idx]) + (y * width);\n  unsigned int dst_idx = 0;\n  for (int x = 0; x < width; x += 1)\n  {\n    float n[3] = {0};\n    float v = y * invh;\n    float u = x * invw;\n    heman_image_sample(noisetex, u, v, n);\n    u = (x - hw) * invw;\n    v = vv;\n    u += noiseamt * n[1];\n    v += noiseamt * n[2];\n    float m = dst[dst_idx];\n    m += noiseamt * n[0];\n    dst[dst_idx] = (m < SEALEVEL) ? (0) : (1);\n    dst_idx += 1;\n  }\n\n}\n\n",
            "calle": [
                "heman_image_sample"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "noiseamt",
                        "type": "float",
                        "definition": [
                            "float noiseamt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "noisetex",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const noisetex"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "float * const",
                        "definition": [
                            "float * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int data_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invh",
                        "type": "float",
                        "definition": [
                            "float invh"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invw",
                        "type": "float",
                        "definition": [
                            "float invw"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hh",
                        "type": "int",
                        "definition": [
                            "int hh"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hw",
                        "type": "int",
                        "definition": [
                            "int hw"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vv",
                        "type": "float",
                        "definition": [
                            "float vv = (y - hh) * invh"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float *",
                        "definition": [
                            "float *dst = (&data[data_idx]) + (y * width)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "float [3]",
                        "definition": [
                            "float n[3] = {0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "float",
                        "definition": [
                            "float v = y * invh"
                        ]
                    },
                    {
                        "path": null,
                        "name": "u",
                        "type": "float",
                        "definition": [
                            "float u = x * invw"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m",
                        "type": "float",
                        "definition": [
                            "float m = dst[dst_idx]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "SEALEVEL",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_heman_generate_archipelago_heightmap_2",
            "header": "",
            "params": [
                "int width",
                "heman_image * const noisetex",
                "float * const data",
                "unsigned int data_idx",
                "float invh",
                "float invw",
                "int y",
                "heman_image * const heightmap"
            ],
            "definition": "void helper_heman_generate_archipelago_heightmap_2(int width, heman_image * const noisetex, float * const data, unsigned int data_idx, float invh, float invw, int y, heman_image * const heightmap)\n{\n  float *dst = (&data[data_idx]) + (y * width);\n  unsigned int dst_idx = 0;\n  for (int x = 0; x < width; x += 1)\n  {\n    float n[3];\n    float u = x * invw;\n    float v = y * invh;\n    heman_image_sample(noisetex, u, v, n);\n    float z;\n    heman_image_sample(heightmap, u, v, &z);\n    if (z > 0.0)\n    {\n      float influence = z;\n      u += influence * n[1];\n      v += influence * n[2];\n      heman_image_sample(heightmap, u, v, &z);\n      z += (6 * influence) * n[0];\n    }\n    dst[dst_idx] = z;\n    dst_idx += 1;\n  }\n\n}\n\n",
            "calle": [
                "heman_image_sample"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "noisetex",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const noisetex"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "float * const",
                        "definition": [
                            "float * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int data_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invh",
                        "type": "float",
                        "definition": [
                            "float invh"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invw",
                        "type": "float",
                        "definition": [
                            "float invw"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "heightmap",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const heightmap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float *",
                        "definition": [
                            "float *dst = (&data[data_idx]) + (y * width)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "float [3]",
                        "definition": [
                            "float n[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "u",
                        "type": "float",
                        "definition": [
                            "float u = x * invw"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "float",
                        "definition": [
                            "float v = y * invh"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z",
                        "type": "float",
                        "definition": [
                            "float z"
                        ]
                    },
                    {
                        "path": null,
                        "name": "influence",
                        "type": "float",
                        "definition": [
                            "float influence = z"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_heman_generate_archipelago_political_2_1",
            "header": "",
            "params": [
                "int width",
                "heman_image * const sdf",
                "heman_image * const noisetex",
                "float * const data",
                "float invw",
                "float invh",
                "int y"
            ],
            "definition": "void helper_heman_generate_archipelago_political_2_1(int width, heman_image * const sdf, heman_image * const noisetex, float * const data, float invw, float invh, int y)\n{\n  float *dst = data + (y * width);\n  unsigned int dst_idx = 0;\n  for (int x = 0; x < width; x += 1)\n  {\n    float n[3];\n    float u = x * invw;\n    float v = y * invh;\n    heman_image_sample(noisetex, u, v, n);\n    float z;\n    heman_image_sample(sdf, u, v, &z);\n    if (z > 0.0)\n    {\n      float influence = z;\n      u += influence * n[1];\n      v += influence * n[2];\n      heman_image_sample(sdf, u, v, &z);\n      z += (6 * influence) * n[0];\n    }\n    dst[dst_idx] = z;\n    dst_idx += 1;\n  }\n\n}\n\n",
            "calle": [
                "heman_image_sample"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sdf",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const sdf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "noisetex",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const noisetex"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "float * const",
                        "definition": [
                            "float * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invw",
                        "type": "float",
                        "definition": [
                            "float invw"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invh",
                        "type": "float",
                        "definition": [
                            "float invh"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float *",
                        "definition": [
                            "float *dst = data + (y * width)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "float [3]",
                        "definition": [
                            "float n[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "u",
                        "type": "float",
                        "definition": [
                            "float u = x * invw"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "float",
                        "definition": [
                            "float v = y * invh"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z",
                        "type": "float",
                        "definition": [
                            "float z"
                        ]
                    },
                    {
                        "path": null,
                        "name": "influence",
                        "type": "float",
                        "definition": [
                            "float influence = z"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_image_create",
            "header": "heman_image *heman_image_create(int width, int height, int nbands)",
            "params": [
                "int width",
                "int height",
                "int nbands"
            ],
            "definition": "heman_image *heman_image_create(int width, int height, int nbands)\n{\n  heman_image *img = malloc(sizeof(heman_image));\n  img->width = width;\n  img->height = height;\n  img->nbands = nbands;\n  img->data = malloc((((sizeof(float)) * width) * height) * nbands);\n  return img;\n}\n\n",
            "calle": [
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nbands",
                        "type": "int",
                        "definition": [
                            "int nbands"
                        ]
                    },
                    {
                        "path": null,
                        "name": "img",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *img = malloc(sizeof(heman_image))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_image_info",
            "header": "void heman_image_info(heman_image *, int *width, int *height, int *nbands)",
            "params": [
                "heman_image *img",
                "int *width",
                "int *height",
                "int *nbands"
            ],
            "definition": "void heman_image_info(heman_image *img, int *width, int *height, int *nbands)\n{\n  *width = img->width;\n  *height = img->height;\n  *nbands = img->nbands;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "img",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *img"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "int *",
                        "definition": [
                            "int *width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int *",
                        "definition": [
                            "int *height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nbands",
                        "type": "int *",
                        "definition": [
                            "int *nbands"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_image_data",
            "header": "float *heman_image_data(heman_image *)",
            "params": [
                "heman_image *img"
            ],
            "definition": "float *heman_image_data(heman_image *img)\n{\n  return img->data;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "img",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *img"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_image_array",
            "header": "void heman_image_array(heman_image *img, float **outview, int *n)",
            "params": [
                "heman_image *img",
                "float **data",
                "int *nfloats"
            ],
            "definition": "void heman_image_array(heman_image *img, float **data, int *nfloats)\n{\n  *data = img->data;\n  *nfloats = (img->width * img->height) * img->nbands;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "img",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *img"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "float **",
                        "definition": [
                            "float **data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nfloats",
                        "type": "int *",
                        "definition": [
                            "int *nfloats"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_image_texel",
            "header": "float *heman_image_texel(heman_image *, int x, int y)",
            "params": [
                "heman_image *img",
                "int x",
                "int y"
            ],
            "definition": "float *heman_image_texel(heman_image *img, int x, int y)\n{\n  return (img->data + ((y * img->width) * img->nbands)) + (x * img->nbands);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "img",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *img"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_image_sample",
            "header": "void heman_image_sample(heman_image *, float u, float v, float *result)",
            "params": [
                "heman_image *img",
                "float u",
                "float v",
                "float *result"
            ],
            "definition": "void heman_image_sample(heman_image *img, float u, float v, float *result)\n{\n  unsigned int result_idx = 0;\n  int x = (0 > (((img->width - 1) > (img->width * u)) ? (img->width * u) : (img->width - 1))) ? (0) : (((img->width - 1) > (img->width * u)) ? (img->width * u) : (img->width - 1));\n  int y = (0 > (((img->height - 1) > (img->height * v)) ? (img->height * v) : (img->height - 1))) ? (0) : (((img->height - 1) > (img->height * v)) ? (img->height * v) : (img->height - 1));\n  float *data = heman_image_texel(img, x, y);\n  unsigned int data_idx = 0;\n  for (int b = 0; b < img->nbands; b += 1)\n  {\n    result[result_idx] = data[data_idx];\n    data_idx += 1;\n    result_idx += 1;\n  }\n\n}\n\n",
            "calle": [
                "heman_image_texel"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "img",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *img"
                        ]
                    },
                    {
                        "path": null,
                        "name": "u",
                        "type": "float",
                        "definition": [
                            "float u"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "float",
                        "definition": [
                            "float v"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "float *",
                        "definition": [
                            "float *result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int result_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x = (0 > (((img->width - 1) > (img->width * u)) ? (img->width * u) : (img->width - 1))) ? (0) : (((img->width - 1) > (img->width * u)) ? (img->width * u) : (img->width - 1))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y = (0 > (((img->height - 1) > (img->height * v)) ? (img->height * v) : (img->height - 1))) ? (0) : (((img->height - 1) > (img->height * v)) ? (img->height * v) : (img->height - 1))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "float *",
                        "definition": [
                            "float *data = heman_image_texel(img, x, y)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int data_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "int",
                        "definition": [
                            "int b = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_image_clear",
            "header": "void heman_image_clear(heman_image *, float value)",
            "params": [
                "heman_image *img",
                "float value"
            ],
            "definition": "void heman_image_clear(heman_image *img, float value)\n{\n  int size = (img->width * img->height) * img->nbands;\n  float *dst = img->data;\n  unsigned int dst_idx = 0;\n  while (size--)\n  {\n    dst[dst_idx] = value;\n    dst_idx += 1;\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "img",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *img"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "float",
                        "definition": [
                            "float value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = (img->width * img->height) * img->nbands"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float *",
                        "definition": [
                            "float *dst = img->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_image_destroy",
            "header": "void heman_image_destroy(heman_image *)",
            "params": [
                "heman_image *img"
            ],
            "definition": "void heman_image_destroy(heman_image *img)\n{\n  free(img->data);\n  free(img);\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "img",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *img"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_image_extract_alpha",
            "header": "heman_image *heman_image_extract_alpha(heman_image *)",
            "params": [
                "heman_image *img"
            ],
            "definition": "heman_image *heman_image_extract_alpha(heman_image *img)\n{\n  assert(img->nbands == 4);\n  heman_image *retval = heman_image_create(img->width, img->height, 1);\n  int size = img->width * img->height;\n  float *src = img->data;\n  unsigned int src_idx = 0;\n  float *dst = retval->data;\n  unsigned int dst_idx = 0;\n  while (size--)\n  {\n    src_idx += 3;\n    dst[dst_idx] = src[src_idx];\n    src_idx += 1;\n    dst_idx += 1;\n  }\n\n  return retval;\n}\n\n",
            "calle": [
                "assert",
                "heman_image_create"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "img",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *img"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *retval = heman_image_create(img->width, img->height, 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = img->width * img->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "float *",
                        "definition": [
                            "float *src = img->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float *",
                        "definition": [
                            "float *dst = retval->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_image_extract_rgb",
            "header": "heman_image *heman_image_extract_rgb(heman_image *)",
            "params": [
                "heman_image *img"
            ],
            "definition": "heman_image *heman_image_extract_rgb(heman_image *img)\n{\n  assert(img->nbands == 4);\n  heman_image *retval = heman_image_create(img->width, img->height, 3);\n  int size = img->width * img->height;\n  float *src = img->data;\n  unsigned int src_idx = 0;\n  float *dst = retval->data;\n  unsigned int dst_idx = 0;\n  while (size--)\n  {\n    dst[dst_idx] = src[src_idx];\n    src_idx += 1;\n    dst_idx += 1;\n    dst[dst_idx] = src[src_idx];\n    src_idx += 1;\n    dst_idx += 1;\n    *((&dst[dst_idx])++) = *((&src[src_idx])++);\n    ++(&src[src_idx]);\n  }\n\n  return retval;\n}\n\n",
            "calle": [
                "assert",
                "heman_image_create"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "img",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *img"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *retval = heman_image_create(img->width, img->height, 3)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = img->width * img->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "float *",
                        "definition": [
                            "float *src = img->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float *",
                        "definition": [
                            "float *dst = retval->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_import_u8",
            "header": "heman_image *heman_import_u8(int width, int height, int nbands, const heman_byte *source, float minval, float maxval)",
            "params": [
                "int width",
                "int height",
                "int nbands",
                "const heman_byte *source",
                "float minval",
                "float maxval"
            ],
            "definition": "heman_image *heman_import_u8(int width, int height, int nbands, const heman_byte *source, float minval, float maxval)\n{\n  heman_image *result = heman_image_create(width, height, nbands);\n  const heman_byte *inp = source;\n  unsigned int inp_idx = 0;\n  float *outp = result->data;\n  float scale = (maxval - minval) / 255.0f;\n  int size = (height * width) * nbands;\n  for (int i = 0; i < size; i += 1)\n  {\n    float v = (inp[inp_idx] * scale) + minval;\n    inp_idx += 1;\n    *(outp++) = (minval > ((maxval > v) ? (v) : (maxval))) ? (minval) : ((maxval > v) ? (v) : (maxval));\n  }\n\n  return result;\n}\n\n",
            "calle": [
                "heman_image_create"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nbands",
                        "type": "int",
                        "definition": [
                            "int nbands"
                        ]
                    },
                    {
                        "path": null,
                        "name": "source",
                        "type": "const heman_byte *",
                        "definition": [
                            "const heman_byte *source"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minval",
                        "type": "float",
                        "definition": [
                            "float minval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxval",
                        "type": "float",
                        "definition": [
                            "float maxval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *result = heman_image_create(width, height, nbands)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inp",
                        "type": "const heman_byte *",
                        "definition": [
                            "const heman_byte *inp = source"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inp_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int inp_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outp",
                        "type": "float *",
                        "definition": [
                            "float *outp = result->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "float",
                        "definition": [
                            "float scale = (maxval - minval) / 255.0f"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = (height * width) * nbands"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "float",
                        "definition": [
                            "float v = (inp[inp_idx] * scale) + minval"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_lighting_apply",
            "header": "heman_image *heman_lighting_apply(heman_image *heightmap, heman_image *colorbuffer, float occlusion, float diffuse, float diffuse_softening, const float *light_position)",
            "params": [
                "heman_image *heightmap",
                "heman_image *albedo",
                "float occlusion",
                "float diffuse",
                "float diffuse_softening",
                "const float *light_position"
            ],
            "definition": "heman_image *heman_lighting_apply(heman_image *heightmap, heman_image *albedo, float occlusion, float diffuse, float diffuse_softening, const float *light_position)\n{\n  unsigned int light_position_idx = 0;\n  assert(heightmap->nbands == 1);\n  int width = heightmap->width;\n  int height = heightmap->height;\n  heman_image *final = heman_image_create(width, height, 3);\n  heman_image *normals = heman_lighting_compute_normals(heightmap);\n  heman_image *occ = heman_lighting_compute_occlusion(heightmap);\n  if (albedo)\n  {\n    assert(albedo->nbands == 3);\n    assert(albedo->width == width);\n    assert(albedo->height == height);\n  }\n  static float default_pos[] = {-0.5f, 0.5f, 1.0f};\n  if (!(&light_position[light_position_idx]))\n  {\n    light_position_idx = default_pos;\n  }\n  kmVec3 *colors = (kmVec3 *) final->data;\n  float invgamma = 1.0f / _gamma;\n  kmVec3 L;\n  L.x = light_position[0 + light_position_idx];\n  L.y = light_position[1 + light_position_idx];\n  L.z = light_position[2 + light_position_idx];\n  kmVec3Normalize(&L, &L);\n  int y;\n  #pragma omp parallel for\n  for (y = 0; y < height; y += 1)\n  {\n    helper_heman_lighting_apply_1(&y, albedo, occlusion, diffuse, diffuse_softening, width, normals, occ, colors, invgamma, L);\n  }\n\n  heman_image_destroy(normals);\n  heman_image_destroy(occ);\n  return final;\n}\n\n",
            "calle": [
                "assert",
                "helper_heman_lighting_apply_1",
                "heman_image_create",
                "heman_image_destroy",
                "heman_lighting_compute_normals",
                "heman_lighting_compute_occlusion",
                "kmVec3Normalize"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "heightmap",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *heightmap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "albedo",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *albedo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "occlusion",
                        "type": "float",
                        "definition": [
                            "float occlusion"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diffuse",
                        "type": "float",
                        "definition": [
                            "float diffuse"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diffuse_softening",
                        "type": "float",
                        "definition": [
                            "float diffuse_softening"
                        ]
                    },
                    {
                        "path": null,
                        "name": "light_position",
                        "type": "const float *",
                        "definition": [
                            "const float *light_position"
                        ]
                    },
                    {
                        "path": null,
                        "name": "light_position_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int light_position_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width = heightmap->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height = heightmap->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "final",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *final = heman_image_create(width, height, 3)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "normals",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *normals = heman_lighting_compute_normals(heightmap)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "occ",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *occ = heman_lighting_compute_occlusion(heightmap)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "default_pos",
                        "type": "float []",
                        "definition": [
                            "static float default_pos[] = {-0.5f, 0.5f, 1.0f}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "colors",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *colors = (kmVec3 *) final->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invgamma",
                        "type": "float",
                        "definition": [
                            "float invgamma = 1.0f / _gamma"
                        ]
                    },
                    {
                        "path": null,
                        "name": "L",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 L"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "_gamma",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_lighting_compute_normals",
            "header": "heman_image *heman_lighting_compute_normals(heman_image *heightmap)",
            "params": [
                "heman_image *heightmap"
            ],
            "definition": "heman_image *heman_lighting_compute_normals(heman_image *heightmap)\n{\n  assert(heightmap->nbands == 1);\n  int width = heightmap->width;\n  int height = heightmap->height;\n  heman_image *result = heman_image_create(width, height, 3);\n  float invh = 1.0f / height;\n  float invw = 1.0f / width;\n  int maxx = width - 1;\n  int maxy = height - 1;\n  kmVec3 *normals = (kmVec3 *) result->data;\n  int y;\n  #pragma omp parallel for\n  for (y = 0; y < height; y += 1)\n  {\n    helper_heman_lighting_compute_normals_1(&y, heightmap, width, invh, invw, maxx, maxy, normals);\n  }\n\n  return result;\n}\n\n",
            "calle": [
                "assert",
                "helper_heman_lighting_compute_normals_1",
                "heman_image_create"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "heightmap",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *heightmap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width = heightmap->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height = heightmap->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *result = heman_image_create(width, height, 3)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invh",
                        "type": "float",
                        "definition": [
                            "float invh = 1.0f / height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invw",
                        "type": "float",
                        "definition": [
                            "float invw = 1.0f / width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxx",
                        "type": "int",
                        "definition": [
                            "int maxx = width - 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxy",
                        "type": "int",
                        "definition": [
                            "int maxy = height - 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "normals",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *normals = (kmVec3 *) result->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_lighting_compute_occlusion",
            "header": "heman_image *heman_lighting_compute_occlusion(heman_image *heightmap)",
            "params": [
                "heman_image *heightmap"
            ],
            "definition": "heman_image *heman_lighting_compute_occlusion(heman_image *heightmap)\n{\n  assert(heightmap->nbands == 1);\n  int width = heightmap->width;\n  int height = heightmap->height;\n  heman_image *result = heman_image_create(width, height, 1);\n  memset(result->data, 0, ((sizeof(float)) * width) * height);\n  const int scans[16 * 2] = {1, 0, 0, 1, -1, 0, 0, -1, 1, 1, -1, -1, 1, -1, -1, 1, 2, 1, 2, -1, -2, 1, -2, -1, 1, 2, 1, -2, -1, 2, -1, -2};\n  int *startpts = malloc((((sizeof(int)) * 2) * 3) * kmMax(width, height));\n  for (int i = 0; i < 16; i += 1)\n  {\n    int dx = scans[i * 2];\n    int dy = scans[(i * 2) + 1];\n    horizon_scan(heightmap, result, startpts, dx, dy);\n  }\n\n  for (int i = 0; i < (width * height); i += 1)\n  {\n    result->data[i] = 1.0f - result->data[i];\n    assert((result->data[i] >= 0.0) && (result->data[i] <= 1.0f));\n  }\n\n  free(startpts);\n  return result;\n}\n\n",
            "calle": [
                "assert",
                "free",
                "heman_image_create",
                "horizon_scan",
                "kmMax",
                "malloc",
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "heightmap",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *heightmap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width = heightmap->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height = heightmap->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *result = heman_image_create(width, height, 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scans",
                        "type": "const int [16 * 2]",
                        "definition": [
                            "const int scans[16 * 2] = {1, 0, 0, 1, -1, 0, 0, -1, 1, 1, -1, -1, 1, -1, -1, 1, 2, 1, 2, -1, -2, 1, -2, -1, 1, 2, 1, -2, -1, 2, -1, -2}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "startpts",
                        "type": "int *",
                        "definition": [
                            "int *startpts = malloc((((sizeof(int)) * 2) * 3) * kmMax(width, height))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx",
                        "type": "int",
                        "definition": [
                            "int dx = scans[i * 2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy",
                        "type": "int",
                        "definition": [
                            "int dy = scans[(i * 2) + 1]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_lighting_set_occlusion_scale",
            "header": "void heman_lighting_set_occlusion_scale(float s)",
            "params": [
                "float s"
            ],
            "definition": "void heman_lighting_set_occlusion_scale(float s)\n{\n  _occlusion_scale = s;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "float",
                        "definition": [
                            "float s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "_occlusion_scale",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "azimuth_slope",
            "header": "",
            "params": [
                "kmVec3 a",
                "kmVec3 b"
            ],
            "definition": "static float azimuth_slope(kmVec3 a, kmVec3 b)\n{\n  kmVec3 d;\n  kmVec3Subtract(&d, &a, &b);\n  float x = kmVec3Length(&d);\n  float y = b.z - a.z;\n  return y / x;\n}\n\n",
            "calle": [
                "kmVec3Length",
                "kmVec3Subtract"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 d"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "float",
                        "definition": [
                            "float x = kmVec3Length(&d)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "float",
                        "definition": [
                            "float y = b.z - a.z"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "compute_occlusion",
            "header": "",
            "params": [
                "kmVec3 thispt",
                "kmVec3 horizonpt"
            ],
            "definition": "static float compute_occlusion(kmVec3 thispt, kmVec3 horizonpt)\n{\n  kmVec3 direction;\n  kmVec3Subtract(&direction, &horizonpt, &thispt);\n  kmVec3Normalize(&direction, &direction);\n  float dot = kmVec3Dot(&direction, &KM_VEC3_POS_Z);\n  return atan((dot > 0.0f) ? (dot) : (0.0f)) * 0.63661977236;\n}\n\n",
            "calle": [
                "atan",
                "kmVec3Dot",
                "kmVec3Normalize",
                "kmVec3Subtract"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "thispt",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 thispt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "horizonpt",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 horizonpt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "direction",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 direction"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dot",
                        "type": "float",
                        "definition": [
                            "float dot = kmVec3Dot(&direction, &KM_VEC3_POS_Z)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "KM_VEC3_POS_Z",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "horizon_scan",
            "header": "",
            "params": [
                "heman_image *heightmap",
                "heman_image *result",
                "int *startpts",
                "int dx",
                "int dy"
            ],
            "definition": "static void horizon_scan(heman_image *heightmap, heman_image *result, int *startpts, int dx, int dy)\n{\n  int w = heightmap->width;\n  int h = heightmap->height;\n  int sx = (dx > 0) - (dx < 0);\n  int sy = (dy > 0) - (dy < 0);\n  int ax = abs(dx);\n  int ay = abs(dy);\n  int nsweeps = ((ay * w) + (ax * h)) - ((ax + ay) - 1);\n  int *p = startpts;\n  unsigned int p_idx = 0;\n  for (int x = -ax; x < (w - ax); x += 1)\n  {\n    for (int y = -ay; y < (h - ay); y += 1)\n    {\n      if ((((x >= 0) && (x < w)) && (y >= 0)) && (y < h))\n      {\n        continue;\n      }\n      p[p_idx] = (sx < 0) ? ((w - x) - 1) : (x);\n      p_idx += 1;\n      *((&p[p_idx])++) = (sy < 0) ? ((h - y) - 1) : (y);\n    }\n\n  }\n\n  assert(nsweeps == (((&p[p_idx]) - startpts) / 2));\n  int pathlen = 0;\n  int i = startpts[0];\n  int j = startpts[1];\n  do\n  {\n    i += dx;\n    j += dy;\n    pathlen += 1;\n  }\n  while ((((i >= 0) && (i < w)) && (j >= 0)) && (j < h));\n  float cellw = _occlusion_scale / ((w > h) ? (w) : (h));\n  float cellh = _occlusion_scale / ((w > h) ? (w) : (h));\n  kmVec3 *hull_buffer = malloc(((sizeof(kmVec3)) * pathlen) * nsweeps);\n  int sweep;\n  #pragma omp parallel for\n  for (sweep = 0; sweep < nsweeps; sweep += 1)\n  {\n    helper_horizon_scan_1(heightmap, result, startpts, dx, dy, w, h, pathlen, cellw, cellh, hull_buffer, sweep);\n  }\n\n  free(hull_buffer);\n}\n\n",
            "calle": [
                "abs",
                "assert",
                "free",
                "helper_horizon_scan_1",
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "heightmap",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *heightmap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "startpts",
                        "type": "int *",
                        "definition": [
                            "int *startpts"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx",
                        "type": "int",
                        "definition": [
                            "int dx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy",
                        "type": "int",
                        "definition": [
                            "int dy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w",
                        "type": "int",
                        "definition": [
                            "int w = heightmap->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "int",
                        "definition": [
                            "int h = heightmap->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sx",
                        "type": "int",
                        "definition": [
                            "int sx = (dx > 0) - (dx < 0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sy",
                        "type": "int",
                        "definition": [
                            "int sy = (dy > 0) - (dy < 0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ax",
                        "type": "int",
                        "definition": [
                            "int ax = abs(dx)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ay",
                        "type": "int",
                        "definition": [
                            "int ay = abs(dy)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nsweeps",
                        "type": "int",
                        "definition": [
                            "int nsweeps = ((ay * w) + (ax * h)) - ((ax + ay) - 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "int *",
                        "definition": [
                            "int *p = startpts"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x = -ax"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y = -ay"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pathlen",
                        "type": "int",
                        "definition": [
                            "int pathlen = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = startpts[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = startpts[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cellw",
                        "type": "float",
                        "definition": [
                            "float cellw = _occlusion_scale / ((w > h) ? (w) : (h))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cellh",
                        "type": "float",
                        "definition": [
                            "float cellh = _occlusion_scale / ((w > h) ? (w) : (h))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hull_buffer",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *hull_buffer = malloc(((sizeof(kmVec3)) * pathlen) * nsweeps)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sweep",
                        "type": "int",
                        "definition": [
                            "int sweep"
                        ]
                    },
                    {
                        "path": null,
                        "name": "_occlusion_scale",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_heman_lighting_compute_normals_1",
            "header": "",
            "params": [
                "int * const y_ref",
                "heman_image * const heightmap",
                "int width",
                "float invh",
                "float invw",
                "int maxx",
                "int maxy",
                "kmVec3 * const normals"
            ],
            "definition": "void helper_heman_lighting_compute_normals_1(int * const y_ref, heman_image * const heightmap, int width, float invh, float invw, int maxx, int maxy, kmVec3 * const normals)\n{\n  int y = *y_ref;\n  float v = y * invh;\n  int y1 = ((y + 1) > maxy) ? (maxy) : (y + 1);\n  kmVec3 p;\n  kmVec3 px;\n  kmVec3 py;\n  kmVec3 *n = normals + (y * width);\n  unsigned int n_idx = 0;\n  for (int x = 0; x < width; x += 1, n_idx += 1)\n  {\n    float u = x * invw;\n    int x1 = ((x + 1) > maxx) ? (maxx) : (x + 1);\n    p.x = u;\n    p.y = v;\n    p.z = *heman_image_texel(heightmap, x, y);\n    px.x = u + invw;\n    px.y = v;\n    px.z = *heman_image_texel(heightmap, x1, y);\n    py.x = u;\n    py.y = v + invh;\n    py.z = *heman_image_texel(heightmap, x, y1);\n    kmVec3Subtract(&px, &px, &p);\n    kmVec3Subtract(&py, &py, &p);\n    kmVec3Cross(n, &px, &py);\n    kmVec3Normalize(n, n);\n    n->y *= -1;\n  }\n\n  *y_ref = y;\n}\n\n",
            "calle": [
                "heman_image_texel",
                "kmVec3Cross",
                "kmVec3Normalize",
                "kmVec3Subtract"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "y_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const y_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "heightmap",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const heightmap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invh",
                        "type": "float",
                        "definition": [
                            "float invh"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invw",
                        "type": "float",
                        "definition": [
                            "float invw"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxx",
                        "type": "int",
                        "definition": [
                            "int maxx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxy",
                        "type": "int",
                        "definition": [
                            "int maxy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "normals",
                        "type": "kmVec3 * const",
                        "definition": [
                            "kmVec3 * const normals"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y = *y_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "float",
                        "definition": [
                            "float v = y * invh"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y1",
                        "type": "int",
                        "definition": [
                            "int y1 = ((y + 1) > maxy) ? (maxy) : (y + 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "px",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 px"
                        ]
                    },
                    {
                        "path": null,
                        "name": "py",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 py"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *n = normals + (y * width)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int n_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "u",
                        "type": "float",
                        "definition": [
                            "float u = x * invw"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x1",
                        "type": "int",
                        "definition": [
                            "int x1 = ((x + 1) > maxx) ? (maxx) : (x + 1)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_heman_lighting_apply_1",
            "header": "",
            "params": [
                "int * const y_ref",
                "heman_image * const albedo",
                "float occlusion",
                "float diffuse",
                "float diffuse_softening",
                "int width",
                "heman_image * const normals",
                "heman_image * const occ",
                "kmVec3 * const colors",
                "float invgamma",
                "kmVec3 L"
            ],
            "definition": "void helper_heman_lighting_apply_1(int * const y_ref, heman_image * const albedo, float occlusion, float diffuse, float diffuse_softening, int width, heman_image * const normals, heman_image * const occ, kmVec3 * const colors, float invgamma, kmVec3 L)\n{\n  int y = *y_ref;\n  kmVec3 *color = colors + (y * width);\n  unsigned int color_idx = 0;\n  for (int x = 0; x < width; x += 1, color_idx += 1)\n  {\n    kmVec3 *N = (kmVec3 *) heman_image_texel(normals, x, y);\n    kmVec3Lerp(N, N, &KM_VEC3_POS_Z, diffuse_softening);\n    float df = 1 - (diffuse * (1 - kmClamp(kmVec3Dot(N, &L), 0, 1)));\n    float of = 1 - (occlusion * (1 - (*heman_image_texel(occ, x, y))));\n    if (albedo)\n    {\n      color[color_idx] = *((kmVec3 *) heman_image_texel(albedo, x, y));\n    }\n    else\n    {\n      color->x = (color->y = (color->z = 1));\n    }\n    color->x = pow(color->x, _gamma);\n    color->y = pow(color->y, _gamma);\n    color->z = pow(color->z, _gamma);\n    kmVec3Scale(color, color, df * of);\n    color->x = pow(color->x, invgamma);\n    color->y = pow(color->y, invgamma);\n    color->z = pow(color->z, invgamma);\n  }\n\n  *y_ref = y;\n}\n\n",
            "calle": [
                "heman_image_texel",
                "kmClamp",
                "kmVec3Dot",
                "kmVec3Lerp",
                "kmVec3Scale",
                "pow"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "y_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const y_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "albedo",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const albedo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "occlusion",
                        "type": "float",
                        "definition": [
                            "float occlusion"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diffuse",
                        "type": "float",
                        "definition": [
                            "float diffuse"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diffuse_softening",
                        "type": "float",
                        "definition": [
                            "float diffuse_softening"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "normals",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const normals"
                        ]
                    },
                    {
                        "path": null,
                        "name": "occ",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const occ"
                        ]
                    },
                    {
                        "path": null,
                        "name": "colors",
                        "type": "kmVec3 * const",
                        "definition": [
                            "kmVec3 * const colors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invgamma",
                        "type": "float",
                        "definition": [
                            "float invgamma"
                        ]
                    },
                    {
                        "path": null,
                        "name": "L",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 L"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y = *y_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *color = colors + (y * width)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int color_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "N",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *N = (kmVec3 *) heman_image_texel(normals, x, y)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "df",
                        "type": "float",
                        "definition": [
                            "float df = 1 - (diffuse * (1 - kmClamp(kmVec3Dot(N, &L), 0, 1)))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "of",
                        "type": "float",
                        "definition": [
                            "float of = 1 - (occlusion * (1 - (*heman_image_texel(occ, x, y))))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "KM_VEC3_POS_Z",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "_gamma",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_horizon_scan_1",
            "header": "",
            "params": [
                "heman_image * const heightmap",
                "heman_image * const result",
                "int * const startpts",
                "int dx",
                "int dy",
                "int w",
                "int h",
                "int pathlen",
                "float cellw",
                "float cellh",
                "kmVec3 * const hull_buffer",
                "int sweep"
            ],
            "definition": "void helper_horizon_scan_1(heman_image * const heightmap, heman_image * const result, int * const startpts, int dx, int dy, int w, int h, int pathlen, float cellw, float cellh, kmVec3 * const hull_buffer, int sweep)\n{\n  kmVec3 *convex_hull = hull_buffer + (sweep * pathlen);\n  int *p = startpts + (sweep * 2);\n  unsigned int p_idx = 0;\n  int i = p[0 + p_idx];\n  int j = p[1 + p_idx];\n  kmVec3 thispt;\n  kmVec3 horizonpt;\n  thispt.x = i * cellw;\n  thispt.y = j * cellh;\n  thispt.z = *heman_image_texel(heightmap, (0 > (((w - 1) > i) ? (i) : (w - 1))) ? (0) : (((w - 1) > i) ? (i) : (w - 1)), (0 > (((h - 1) > j) ? (j) : (h - 1))) ? (0) : (((h - 1) > j) ? (j) : (h - 1)));\n  int stack_top = 0;\n  convex_hull[0] = thispt;\n  i += dx, j += dy;\n  while ((((i >= 0) && (i < w)) && (j >= 0)) && (j < h))\n  {\n    helper_helper_horizon_scan_1_1(&i, &j, &thispt, &horizonpt, &stack_top, heightmap, result, dx, dy, pathlen, cellw, cellh, convex_hull);\n  }\n\n}\n\n",
            "calle": [
                "helper_helper_horizon_scan_1_1",
                "heman_image_texel"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "heightmap",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const heightmap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "startpts",
                        "type": "int * const",
                        "definition": [
                            "int * const startpts"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx",
                        "type": "int",
                        "definition": [
                            "int dx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy",
                        "type": "int",
                        "definition": [
                            "int dy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w",
                        "type": "int",
                        "definition": [
                            "int w"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "int",
                        "definition": [
                            "int h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pathlen",
                        "type": "int",
                        "definition": [
                            "int pathlen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cellw",
                        "type": "float",
                        "definition": [
                            "float cellw"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cellh",
                        "type": "float",
                        "definition": [
                            "float cellh"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hull_buffer",
                        "type": "kmVec3 * const",
                        "definition": [
                            "kmVec3 * const hull_buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sweep",
                        "type": "int",
                        "definition": [
                            "int sweep"
                        ]
                    },
                    {
                        "path": null,
                        "name": "convex_hull",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *convex_hull = hull_buffer + (sweep * pathlen)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "int *",
                        "definition": [
                            "int *p = startpts + (sweep * 2)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = p[0 + p_idx]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = p[1 + p_idx]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "thispt",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 thispt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "horizonpt",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 horizonpt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stack_top",
                        "type": "int",
                        "definition": [
                            "int stack_top = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_horizon_scan_1_1",
            "header": "",
            "params": [
                "int * const i_ref",
                "int * const j_ref",
                "kmVec3 * const thispt_ref",
                "kmVec3 * const horizonpt_ref",
                "int * const stack_top_ref",
                "heman_image * const heightmap",
                "heman_image * const result",
                "int dx",
                "int dy",
                "int pathlen",
                "float cellw",
                "float cellh",
                "kmVec3 * const convex_hull"
            ],
            "definition": "void helper_helper_horizon_scan_1_1(int * const i_ref, int * const j_ref, kmVec3 * const thispt_ref, kmVec3 * const horizonpt_ref, int * const stack_top_ref, heman_image * const heightmap, heman_image * const result, int dx, int dy, int pathlen, float cellw, float cellh, kmVec3 * const convex_hull)\n{\n  int i = *i_ref;\n  int j = *j_ref;\n  kmVec3 thispt = *thispt_ref;\n  kmVec3 horizonpt = *horizonpt_ref;\n  int stack_top = *stack_top_ref;\n  thispt.x = i * cellw;\n  thispt.y = j * cellh;\n  thispt.z = *heman_image_texel(heightmap, i, j);\n  while (stack_top > 0)\n  {\n    float s1 = azimuth_slope(thispt, convex_hull[stack_top]);\n    float s2 = azimuth_slope(thispt, convex_hull[stack_top - 1]);\n    if (s1 >= s2)\n    {\n      break;\n    }\n    stack_top -= 1;\n  }\n\n  horizonpt = convex_hull[stack_top];\n  stack_top += 1;\n  assert(stack_top < pathlen);\n  convex_hull[stack_top] = thispt;\n  float occlusion = compute_occlusion(thispt, horizonpt);\n  *heman_image_texel(result, i, j) += (1.0f / 16.0f) * occlusion;\n  i += dx;\n  j += dy;\n  *i_ref = i;\n  *j_ref = j;\n  *thispt_ref = thispt;\n  *horizonpt_ref = horizonpt;\n  *stack_top_ref = stack_top;\n}\n\n",
            "calle": [
                "assert",
                "azimuth_slope",
                "compute_occlusion",
                "heman_image_texel"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "thispt_ref",
                        "type": "kmVec3 * const",
                        "definition": [
                            "kmVec3 * const thispt_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "horizonpt_ref",
                        "type": "kmVec3 * const",
                        "definition": [
                            "kmVec3 * const horizonpt_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stack_top_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const stack_top_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "heightmap",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const heightmap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx",
                        "type": "int",
                        "definition": [
                            "int dx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy",
                        "type": "int",
                        "definition": [
                            "int dy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pathlen",
                        "type": "int",
                        "definition": [
                            "int pathlen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cellw",
                        "type": "float",
                        "definition": [
                            "float cellw"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cellh",
                        "type": "float",
                        "definition": [
                            "float cellh"
                        ]
                    },
                    {
                        "path": null,
                        "name": "convex_hull",
                        "type": "kmVec3 * const",
                        "definition": [
                            "kmVec3 * const convex_hull"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "thispt",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 thispt = *thispt_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "horizonpt",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 horizonpt = *horizonpt_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stack_top",
                        "type": "int",
                        "definition": [
                            "int stack_top = *stack_top_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s1",
                        "type": "float",
                        "definition": [
                            "float s1 = azimuth_slope(thispt, convex_hull[stack_top])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s2",
                        "type": "float",
                        "definition": [
                            "float s2 = azimuth_slope(thispt, convex_hull[stack_top - 1])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "occlusion",
                        "type": "float",
                        "definition": [
                            "float occlusion = compute_occlusion(thispt, horizonpt)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "open_simplex_noise",
            "header": "int open_simplex_noise(int64_t seed, struct osn_context **ctx)",
            "params": [
                "int64_t seed",
                "struct osn_context **ctx"
            ],
            "definition": "int open_simplex_noise(int64_t seed, struct osn_context **ctx)\n{\n  int rc;\n  int16_t source[256];\n  int i;\n  int16_t *perm;\n  unsigned int perm_idx = 0;\n  int16_t *permGradIndex3D;\n  unsigned int permGradIndex3D_idx = 0;\n  *ctx = malloc(sizeof(*(*ctx)));\n  if (!(*ctx))\n  {\n    return -ENOMEM;\n  }\n  (*ctx)->perm = 0;\n  (*ctx)->permGradIndex3D = 0;\n  rc = allocate_perm(*ctx, 256, 256);\n  if (rc)\n  {\n    free(*ctx);\n    return rc;\n  }\n  perm_idx = (*ctx)->perm_idx;\n  permGradIndex3D_idx = (*ctx)->permGradIndex3D_idx;\n  for (i = 0; i < 256; i += 1)\n    source[i] = (int16_t) i;\n\n  seed = (seed * 6364136223846793005LL) + 1442695040888963407LL;\n  seed = (seed * 6364136223846793005LL) + 1442695040888963407LL;\n  seed = (seed * 6364136223846793005LL) + 1442695040888963407LL;\n  for (i = 255; i >= 0; i -= 1)\n  {\n    seed = (seed * 6364136223846793005LL) + 1442695040888963407LL;\n    int r = (int) ((seed + 31) % (i + 1));\n    if (r < 0)\n    {\n      r += i + 1;\n    }\n    perm[i + perm_idx] = source[r];\n    permGradIndex3D[i + permGradIndex3D_idx] = (short) ((perm[i + perm_idx] % (((sizeof(gradients3D)) / (sizeof(gradients3D[0]))) / 3)) * 3);\n    source[r] = source[i];\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "allocate_perm",
                "free",
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "seed",
                        "type": "int64_t",
                        "definition": [
                            "int64_t seed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ctx",
                        "type": "struct osn_context **",
                        "definition": [
                            "struct osn_context **ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rc",
                        "type": "int",
                        "definition": [
                            "int rc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "source",
                        "type": "int16_t [256]",
                        "definition": [
                            "int16_t source[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "perm",
                        "type": "int16_t *",
                        "definition": [
                            "int16_t *perm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "perm_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int perm_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "permGradIndex3D",
                        "type": "int16_t *",
                        "definition": [
                            "int16_t *permGradIndex3D"
                        ]
                    },
                    {
                        "path": null,
                        "name": "permGradIndex3D_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int permGradIndex3D_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "int",
                        "definition": [
                            "int r = (int) ((seed + 31) % (i + 1))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gradients3D",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "open_simplex_noise_free",
            "header": "void open_simplex_noise_free(struct osn_context *ctx)",
            "params": [
                "struct osn_context *ctx"
            ],
            "definition": "void open_simplex_noise_free(struct osn_context *ctx)\n{\n  if (!ctx)\n  {\n    return;\n  }\n  if (ctx->perm)\n  {\n    free(ctx->perm);\n    ctx->perm = 0;\n  }\n  if (ctx->permGradIndex3D)\n  {\n    free(ctx->permGradIndex3D);\n    ctx->permGradIndex3D = 0;\n  }\n  free(ctx);\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct osn_context",
                        "type": "struct osn_context *",
                        "definition": [
                            "struct osn_context *ctx"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "open_simplex_noise_init_perm",
            "header": "int open_simplex_noise_init_perm(struct osn_context *ctx, int16_t p[], int nelements)",
            "params": [
                "struct osn_context *ctx",
                "int16_t p[]",
                "int nelements"
            ],
            "definition": "int open_simplex_noise_init_perm(struct osn_context *ctx, int16_t p[], int nelements)\n{\n  int i;\n  int rc;\n  rc = allocate_perm(ctx, nelements, 256);\n  if (rc)\n  {\n    return rc;\n  }\n  memcpy(ctx->perm, p, (sizeof(*ctx->perm)) * nelements);\n  for (i = 0; i < 256; i += 1)\n  {\n    ctx->permGradIndex3D[i] = (int16_t) ((ctx->perm[i] % (((sizeof(gradients3D)) / (sizeof(gradients3D[0]))) / 3)) * 3);\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "allocate_perm",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct osn_context",
                        "type": "struct osn_context *",
                        "definition": [
                            "struct osn_context *ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "int16_t []",
                        "definition": [
                            "int16_t p[]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nelements",
                        "type": "int",
                        "definition": [
                            "int nelements"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rc",
                        "type": "int",
                        "definition": [
                            "int rc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gradients3D",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "open_simplex_noise2",
            "header": "double open_simplex_noise2(struct osn_context *ctx, double x, double y)",
            "params": [
                "struct osn_context *ctx",
                "double x",
                "double y"
            ],
            "definition": "double open_simplex_noise2(struct osn_context *ctx, double x, double y)\n{\n  double stretchOffset = (x + y) * (-0.211324865405187);\n  double xs = x + stretchOffset;\n  double ys = y + stretchOffset;\n  int xsb = fastFloor(xs);\n  int ysb = fastFloor(ys);\n  double squishOffset = (xsb + ysb) * 0.366025403784439;\n  double xb = xsb + squishOffset;\n  double yb = ysb + squishOffset;\n  double xins = xs - xsb;\n  double yins = ys - ysb;\n  double inSum = xins + yins;\n  double dx0 = x - xb;\n  double dy0 = y - yb;\n  double dx_ext;\n  double dy_ext;\n  int xsv_ext;\n  int ysv_ext;\n  double value = 0;\n  double dx1 = (dx0 - 1) - 0.366025403784439;\n  double dy1 = (dy0 - 0) - 0.366025403784439;\n  double attn1 = (2 - (dx1 * dx1)) - (dy1 * dy1);\n  if (attn1 > 0)\n  {\n    attn1 *= attn1;\n    value += (attn1 * attn1) * extrapolate2(ctx, xsb + 1, ysb + 0, dx1, dy1);\n  }\n  double dx2 = (dx0 - 0) - 0.366025403784439;\n  double dy2 = (dy0 - 1) - 0.366025403784439;\n  double attn2 = (2 - (dx2 * dx2)) - (dy2 * dy2);\n  if (attn2 > 0)\n  {\n    attn2 *= attn2;\n    value += (attn2 * attn2) * extrapolate2(ctx, xsb + 0, ysb + 1, dx2, dy2);\n  }\n  if (inSum <= 1)\n  {\n    helper_open_simplex_noise2_1(&dx_ext, &dy_ext, &xsv_ext, &ysv_ext, xsb, ysb, xins, yins, inSum, dx0, dy0);\n  }\n  else\n  {\n    helper_open_simplex_noise2_2(&xsb, &ysb, &dx0, &dy0, &dx_ext, &dy_ext, &xsv_ext, &ysv_ext, xins, yins, inSum);\n  }\n  double attn0 = (2 - (dx0 * dx0)) - (dy0 * dy0);\n  if (attn0 > 0)\n  {\n    attn0 *= attn0;\n    value += (attn0 * attn0) * extrapolate2(ctx, xsb, ysb, dx0, dy0);\n  }\n  double attn_ext = (2 - (dx_ext * dx_ext)) - (dy_ext * dy_ext);\n  if (attn_ext > 0)\n  {\n    attn_ext *= attn_ext;\n    value += (attn_ext * attn_ext) * extrapolate2(ctx, xsv_ext, ysv_ext, dx_ext, dy_ext);\n  }\n  return value / 47.0;\n}\n\n",
            "calle": [
                "extrapolate2",
                "fastFloor",
                "helper_open_simplex_noise2_1",
                "helper_open_simplex_noise2_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct osn_context",
                        "type": "struct osn_context *",
                        "definition": [
                            "struct osn_context *ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "double",
                        "definition": [
                            "double x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "double",
                        "definition": [
                            "double y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stretchOffset",
                        "type": "double",
                        "definition": [
                            "double stretchOffset = (x + y) * (-0.211324865405187)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xs",
                        "type": "double",
                        "definition": [
                            "double xs = x + stretchOffset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ys",
                        "type": "double",
                        "definition": [
                            "double ys = y + stretchOffset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb = fastFloor(xs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb = fastFloor(ys)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "squishOffset",
                        "type": "double",
                        "definition": [
                            "double squishOffset = (xsb + ysb) * 0.366025403784439"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xb",
                        "type": "double",
                        "definition": [
                            "double xb = xsb + squishOffset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yb",
                        "type": "double",
                        "definition": [
                            "double yb = ysb + squishOffset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xins",
                        "type": "double",
                        "definition": [
                            "double xins = xs - xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yins",
                        "type": "double",
                        "definition": [
                            "double yins = ys - ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inSum",
                        "type": "double",
                        "definition": [
                            "double inSum = xins + yins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx0",
                        "type": "double",
                        "definition": [
                            "double dx0 = x - xb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0",
                        "type": "double",
                        "definition": [
                            "double dy0 = y - yb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext",
                        "type": "double",
                        "definition": [
                            "double dx_ext"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext",
                        "type": "double",
                        "definition": [
                            "double dy_ext"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext",
                        "type": "int",
                        "definition": [
                            "int xsv_ext"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext",
                        "type": "int",
                        "definition": [
                            "int ysv_ext"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "double",
                        "definition": [
                            "double value = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx1",
                        "type": "double",
                        "definition": [
                            "double dx1 = (dx0 - 1) - 0.366025403784439"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy1",
                        "type": "double",
                        "definition": [
                            "double dy1 = (dy0 - 0) - 0.366025403784439"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn1",
                        "type": "double",
                        "definition": [
                            "double attn1 = (2 - (dx1 * dx1)) - (dy1 * dy1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx2",
                        "type": "double",
                        "definition": [
                            "double dx2 = (dx0 - 0) - 0.366025403784439"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy2",
                        "type": "double",
                        "definition": [
                            "double dy2 = (dy0 - 1) - 0.366025403784439"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn2",
                        "type": "double",
                        "definition": [
                            "double attn2 = (2 - (dx2 * dx2)) - (dy2 * dy2)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn0",
                        "type": "double",
                        "definition": [
                            "double attn0 = (2 - (dx0 * dx0)) - (dy0 * dy0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn_ext",
                        "type": "double",
                        "definition": [
                            "double attn_ext = (2 - (dx_ext * dx_ext)) - (dy_ext * dy_ext)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "open_simplex_noise3",
            "header": "double open_simplex_noise3(struct osn_context *ctx, double x, double y, double z)",
            "params": [
                "struct osn_context *ctx",
                "double x",
                "double y",
                "double z"
            ],
            "definition": "double open_simplex_noise3(struct osn_context *ctx, double x, double y, double z)\n{\n  double stretchOffset = ((x + y) + z) * ((-1.0) / 6.0);\n  double xs = x + stretchOffset;\n  double ys = y + stretchOffset;\n  double zs = z + stretchOffset;\n  int xsb = fastFloor(xs);\n  int ysb = fastFloor(ys);\n  int zsb = fastFloor(zs);\n  double squishOffset = ((xsb + ysb) + zsb) * (1.0 / 3.0);\n  double xb = xsb + squishOffset;\n  double yb = ysb + squishOffset;\n  double zb = zsb + squishOffset;\n  double xins = xs - xsb;\n  double yins = ys - ysb;\n  double zins = zs - zsb;\n  double inSum = (xins + yins) + zins;\n  double dx0 = x - xb;\n  double dy0 = y - yb;\n  double dz0 = z - zb;\n  double dx_ext0;\n  double dy_ext0;\n  double dz_ext0;\n  double dx_ext1;\n  double dy_ext1;\n  double dz_ext1;\n  int xsv_ext0;\n  int ysv_ext0;\n  int zsv_ext0;\n  int xsv_ext1;\n  int ysv_ext1;\n  int zsv_ext1;\n  double value = 0;\n  if (inSum <= 1)\n  {\n    helper_open_simplex_noise3_1(&dx_ext0, &dy_ext0, &dz_ext0, &dx_ext1, &dy_ext1, &dz_ext1, &xsv_ext0, &ysv_ext0, &zsv_ext0, &xsv_ext1, &ysv_ext1, &zsv_ext1, &value, ctx, xsb, ysb, zsb, xins, yins, zins, inSum, dx0, dy0, dz0);\n  }\n  else\n    if (inSum >= 2)\n  {\n    helper_open_simplex_noise3_2(&dx0, &dy0, &dz0, &dx_ext0, &dy_ext0, &dz_ext0, &dx_ext1, &dy_ext1, &dz_ext1, &xsv_ext0, &ysv_ext0, &zsv_ext0, &xsv_ext1, &ysv_ext1, &zsv_ext1, &value, ctx, xsb, ysb, zsb, xins, yins, zins, inSum);\n  }\n  else\n  {\n    helper_open_simplex_noise3_3(&dx_ext0, &dy_ext0, &dz_ext0, &dx_ext1, &dy_ext1, &dz_ext1, &xsv_ext0, &ysv_ext0, &zsv_ext0, &xsv_ext1, &ysv_ext1, &zsv_ext1, &value, ctx, xsb, ysb, zsb, xins, yins, zins, dx0, dy0, dz0);\n  }\n  double attn_ext0 = ((2 - (dx_ext0 * dx_ext0)) - (dy_ext0 * dy_ext0)) - (dz_ext0 * dz_ext0);\n  if (attn_ext0 > 0)\n  {\n    attn_ext0 *= attn_ext0;\n    value += (attn_ext0 * attn_ext0) * extrapolate3(ctx, xsv_ext0, ysv_ext0, zsv_ext0, dx_ext0, dy_ext0, dz_ext0);\n  }\n  double attn_ext1 = ((2 - (dx_ext1 * dx_ext1)) - (dy_ext1 * dy_ext1)) - (dz_ext1 * dz_ext1);\n  if (attn_ext1 > 0)\n  {\n    attn_ext1 *= attn_ext1;\n    value += (attn_ext1 * attn_ext1) * extrapolate3(ctx, xsv_ext1, ysv_ext1, zsv_ext1, dx_ext1, dy_ext1, dz_ext1);\n  }\n  return value / 103.0;\n}\n\n",
            "calle": [
                "extrapolate3",
                "fastFloor",
                "helper_open_simplex_noise3_1",
                "helper_open_simplex_noise3_2",
                "helper_open_simplex_noise3_3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct osn_context",
                        "type": "struct osn_context *",
                        "definition": [
                            "struct osn_context *ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "double",
                        "definition": [
                            "double x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "double",
                        "definition": [
                            "double y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z",
                        "type": "double",
                        "definition": [
                            "double z"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stretchOffset",
                        "type": "double",
                        "definition": [
                            "double stretchOffset = ((x + y) + z) * ((-1.0) / 6.0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xs",
                        "type": "double",
                        "definition": [
                            "double xs = x + stretchOffset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ys",
                        "type": "double",
                        "definition": [
                            "double ys = y + stretchOffset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zs",
                        "type": "double",
                        "definition": [
                            "double zs = z + stretchOffset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb = fastFloor(xs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb = fastFloor(ys)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsb",
                        "type": "int",
                        "definition": [
                            "int zsb = fastFloor(zs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "squishOffset",
                        "type": "double",
                        "definition": [
                            "double squishOffset = ((xsb + ysb) + zsb) * (1.0 / 3.0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xb",
                        "type": "double",
                        "definition": [
                            "double xb = xsb + squishOffset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yb",
                        "type": "double",
                        "definition": [
                            "double yb = ysb + squishOffset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zb",
                        "type": "double",
                        "definition": [
                            "double zb = zsb + squishOffset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xins",
                        "type": "double",
                        "definition": [
                            "double xins = xs - xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yins",
                        "type": "double",
                        "definition": [
                            "double yins = ys - ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zins",
                        "type": "double",
                        "definition": [
                            "double zins = zs - zsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inSum",
                        "type": "double",
                        "definition": [
                            "double inSum = (xins + yins) + zins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx0",
                        "type": "double",
                        "definition": [
                            "double dx0 = x - xb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0",
                        "type": "double",
                        "definition": [
                            "double dy0 = y - yb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz0",
                        "type": "double",
                        "definition": [
                            "double dz0 = z - zb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext0",
                        "type": "double",
                        "definition": [
                            "double dx_ext0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0",
                        "type": "double",
                        "definition": [
                            "double dy_ext0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0",
                        "type": "double",
                        "definition": [
                            "double dz_ext0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1",
                        "type": "double",
                        "definition": [
                            "double dx_ext1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1",
                        "type": "double",
                        "definition": [
                            "double dy_ext1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1",
                        "type": "double",
                        "definition": [
                            "double dz_ext1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0",
                        "type": "int",
                        "definition": [
                            "int xsv_ext0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0",
                        "type": "int",
                        "definition": [
                            "int ysv_ext0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0",
                        "type": "int",
                        "definition": [
                            "int zsv_ext0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1",
                        "type": "int",
                        "definition": [
                            "int xsv_ext1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1",
                        "type": "int",
                        "definition": [
                            "int ysv_ext1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1",
                        "type": "int",
                        "definition": [
                            "int zsv_ext1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "double",
                        "definition": [
                            "double value = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn_ext0",
                        "type": "double",
                        "definition": [
                            "double attn_ext0 = ((2 - (dx_ext0 * dx_ext0)) - (dy_ext0 * dy_ext0)) - (dz_ext0 * dz_ext0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn_ext1",
                        "type": "double",
                        "definition": [
                            "double attn_ext1 = ((2 - (dx_ext1 * dx_ext1)) - (dy_ext1 * dy_ext1)) - (dz_ext1 * dz_ext1)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "open_simplex_noise4",
            "header": "double open_simplex_noise4(struct osn_context *ctx, double x, double y, double z, double w)",
            "params": [
                "struct osn_context *ctx",
                "double x",
                "double y",
                "double z",
                "double w"
            ],
            "definition": "double open_simplex_noise4(struct osn_context *ctx, double x, double y, double z, double w)\n{\n  double stretchOffset = (((x + y) + z) + w) * (-0.138196601125011);\n  double xs = x + stretchOffset;\n  double ys = y + stretchOffset;\n  double zs = z + stretchOffset;\n  double ws = w + stretchOffset;\n  int xsb = fastFloor(xs);\n  int ysb = fastFloor(ys);\n  int zsb = fastFloor(zs);\n  int wsb = fastFloor(ws);\n  double squishOffset = (((xsb + ysb) + zsb) + wsb) * 0.309016994374947;\n  double xb = xsb + squishOffset;\n  double yb = ysb + squishOffset;\n  double zb = zsb + squishOffset;\n  double wb = wsb + squishOffset;\n  double xins = xs - xsb;\n  double yins = ys - ysb;\n  double zins = zs - zsb;\n  double wins = ws - wsb;\n  double inSum = ((xins + yins) + zins) + wins;\n  double dx0 = x - xb;\n  double dy0 = y - yb;\n  double dz0 = z - zb;\n  double dw0 = w - wb;\n  double dx_ext0;\n  double dy_ext0;\n  double dz_ext0;\n  double dw_ext0;\n  double dx_ext1;\n  double dy_ext1;\n  double dz_ext1;\n  double dw_ext1;\n  double dx_ext2;\n  double dy_ext2;\n  double dz_ext2;\n  double dw_ext2;\n  int xsv_ext0;\n  int ysv_ext0;\n  int zsv_ext0;\n  int wsv_ext0;\n  int xsv_ext1;\n  int ysv_ext1;\n  int zsv_ext1;\n  int wsv_ext1;\n  int xsv_ext2;\n  int ysv_ext2;\n  int zsv_ext2;\n  int wsv_ext2;\n  double value = 0;\n  if (inSum <= 1)\n  {\n    helper_open_simplex_noise4_1(&dx_ext0, &dy_ext0, &dz_ext0, &dw_ext0, &dx_ext1, &dy_ext1, &dz_ext1, &dw_ext1, &dx_ext2, &dy_ext2, &dz_ext2, &dw_ext2, &xsv_ext0, &ysv_ext0, &zsv_ext0, &wsv_ext0, &xsv_ext1, &ysv_ext1, &zsv_ext1, &ysv_ext2, &zsv_ext2, &wsv_ext2, &value, ctx, xsb, ysb, zsb, wsb, xins, yins, zins, wins, inSum, dx0, dy0, dz0, dw0, wsv_ext1, xsv_ext2);\n  }\n  else\n    if (inSum >= 3)\n  {\n    helper_open_simplex_noise4_2(&dx0, &dy0, &dz0, &dw0, &dx_ext0, &dy_ext0, &dz_ext0, &dw_ext0, &dx_ext1, &dy_ext1, &dz_ext1, &dw_ext1, &dx_ext2, &dy_ext2, &dz_ext2, &dw_ext2, &xsv_ext0, &ysv_ext0, &zsv_ext0, &wsv_ext0, &xsv_ext1, &ysv_ext1, &zsv_ext1, &ysv_ext2, &zsv_ext2, &wsv_ext2, &value, ctx, xsb, ysb, zsb, wsb, xins, yins, zins, wins, inSum, wsv_ext1, xsv_ext2);\n  }\n  else\n    if (inSum <= 2)\n  {\n    helper_open_simplex_noise4_4(&dx_ext0, &dy_ext0, &dz_ext0, &dw_ext0, &dx_ext1, &dy_ext1, &dz_ext1, &dw_ext1, &dx_ext2, &dy_ext2, &dz_ext2, &dw_ext2, &xsv_ext0, &ysv_ext0, &zsv_ext0, &wsv_ext0, &xsv_ext1, &ysv_ext1, &zsv_ext1, &wsv_ext1, &xsv_ext2, &ysv_ext2, &zsv_ext2, &wsv_ext2, &value, ctx, xsb, ysb, zsb, wsb, xins, yins, zins, wins, inSum, dx0, dy0, dz0, dw0);\n  }\n  else\n  {\n    helper_open_simplex_noise4_3(&dx_ext0, &dy_ext0, &dz_ext0, &dw_ext0, &dx_ext1, &dy_ext1, &dz_ext1, &dw_ext1, &dx_ext2, &dy_ext2, &dz_ext2, &dw_ext2, &xsv_ext0, &ysv_ext0, &zsv_ext0, &wsv_ext0, &xsv_ext1, &ysv_ext1, &zsv_ext1, &wsv_ext1, &xsv_ext2, &ysv_ext2, &zsv_ext2, &wsv_ext2, &value, ctx, xsb, ysb, zsb, wsb, xins, yins, zins, wins, inSum, dx0, dy0, dz0, dw0);\n  }\n  double attn_ext0 = (((2 - (dx_ext0 * dx_ext0)) - (dy_ext0 * dy_ext0)) - (dz_ext0 * dz_ext0)) - (dw_ext0 * dw_ext0);\n  if (attn_ext0 > 0)\n  {\n    attn_ext0 *= attn_ext0;\n    value += (attn_ext0 * attn_ext0) * extrapolate4(ctx, xsv_ext0, ysv_ext0, zsv_ext0, wsv_ext0, dx_ext0, dy_ext0, dz_ext0, dw_ext0);\n  }\n  double attn_ext1 = (((2 - (dx_ext1 * dx_ext1)) - (dy_ext1 * dy_ext1)) - (dz_ext1 * dz_ext1)) - (dw_ext1 * dw_ext1);\n  if (attn_ext1 > 0)\n  {\n    attn_ext1 *= attn_ext1;\n    value += (attn_ext1 * attn_ext1) * extrapolate4(ctx, xsv_ext1, ysv_ext1, zsv_ext1, wsv_ext1, dx_ext1, dy_ext1, dz_ext1, dw_ext1);\n  }\n  double attn_ext2 = (((2 - (dx_ext2 * dx_ext2)) - (dy_ext2 * dy_ext2)) - (dz_ext2 * dz_ext2)) - (dw_ext2 * dw_ext2);\n  if (attn_ext2 > 0)\n  {\n    attn_ext2 *= attn_ext2;\n    value += (attn_ext2 * attn_ext2) * extrapolate4(ctx, xsv_ext2, ysv_ext2, zsv_ext2, wsv_ext2, dx_ext2, dy_ext2, dz_ext2, dw_ext2);\n  }\n  return value / 30.0;\n}\n\n",
            "calle": [
                "extrapolate4",
                "fastFloor",
                "helper_open_simplex_noise4_1",
                "helper_open_simplex_noise4_2",
                "helper_open_simplex_noise4_3",
                "helper_open_simplex_noise4_4"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct osn_context",
                        "type": "struct osn_context *",
                        "definition": [
                            "struct osn_context *ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "double",
                        "definition": [
                            "double x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "double",
                        "definition": [
                            "double y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z",
                        "type": "double",
                        "definition": [
                            "double z"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w",
                        "type": "double",
                        "definition": [
                            "double w"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stretchOffset",
                        "type": "double",
                        "definition": [
                            "double stretchOffset = (((x + y) + z) + w) * (-0.138196601125011)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xs",
                        "type": "double",
                        "definition": [
                            "double xs = x + stretchOffset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ys",
                        "type": "double",
                        "definition": [
                            "double ys = y + stretchOffset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zs",
                        "type": "double",
                        "definition": [
                            "double zs = z + stretchOffset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ws",
                        "type": "double",
                        "definition": [
                            "double ws = w + stretchOffset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb = fastFloor(xs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb = fastFloor(ys)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsb",
                        "type": "int",
                        "definition": [
                            "int zsb = fastFloor(zs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsb",
                        "type": "int",
                        "definition": [
                            "int wsb = fastFloor(ws)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "squishOffset",
                        "type": "double",
                        "definition": [
                            "double squishOffset = (((xsb + ysb) + zsb) + wsb) * 0.309016994374947"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xb",
                        "type": "double",
                        "definition": [
                            "double xb = xsb + squishOffset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yb",
                        "type": "double",
                        "definition": [
                            "double yb = ysb + squishOffset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zb",
                        "type": "double",
                        "definition": [
                            "double zb = zsb + squishOffset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wb",
                        "type": "double",
                        "definition": [
                            "double wb = wsb + squishOffset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xins",
                        "type": "double",
                        "definition": [
                            "double xins = xs - xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yins",
                        "type": "double",
                        "definition": [
                            "double yins = ys - ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zins",
                        "type": "double",
                        "definition": [
                            "double zins = zs - zsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wins",
                        "type": "double",
                        "definition": [
                            "double wins = ws - wsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inSum",
                        "type": "double",
                        "definition": [
                            "double inSum = ((xins + yins) + zins) + wins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx0",
                        "type": "double",
                        "definition": [
                            "double dx0 = x - xb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0",
                        "type": "double",
                        "definition": [
                            "double dy0 = y - yb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz0",
                        "type": "double",
                        "definition": [
                            "double dz0 = z - zb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw0",
                        "type": "double",
                        "definition": [
                            "double dw0 = w - wb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext0",
                        "type": "double",
                        "definition": [
                            "double dx_ext0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0",
                        "type": "double",
                        "definition": [
                            "double dy_ext0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0",
                        "type": "double",
                        "definition": [
                            "double dz_ext0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext0",
                        "type": "double",
                        "definition": [
                            "double dw_ext0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1",
                        "type": "double",
                        "definition": [
                            "double dx_ext1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1",
                        "type": "double",
                        "definition": [
                            "double dy_ext1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1",
                        "type": "double",
                        "definition": [
                            "double dz_ext1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext1",
                        "type": "double",
                        "definition": [
                            "double dw_ext1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext2",
                        "type": "double",
                        "definition": [
                            "double dx_ext2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext2",
                        "type": "double",
                        "definition": [
                            "double dy_ext2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext2",
                        "type": "double",
                        "definition": [
                            "double dz_ext2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext2",
                        "type": "double",
                        "definition": [
                            "double dw_ext2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0",
                        "type": "int",
                        "definition": [
                            "int xsv_ext0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0",
                        "type": "int",
                        "definition": [
                            "int ysv_ext0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0",
                        "type": "int",
                        "definition": [
                            "int zsv_ext0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext0",
                        "type": "int",
                        "definition": [
                            "int wsv_ext0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1",
                        "type": "int",
                        "definition": [
                            "int xsv_ext1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1",
                        "type": "int",
                        "definition": [
                            "int ysv_ext1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1",
                        "type": "int",
                        "definition": [
                            "int zsv_ext1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext1",
                        "type": "int",
                        "definition": [
                            "int wsv_ext1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext2",
                        "type": "int",
                        "definition": [
                            "int xsv_ext2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext2",
                        "type": "int",
                        "definition": [
                            "int ysv_ext2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext2",
                        "type": "int",
                        "definition": [
                            "int zsv_ext2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext2",
                        "type": "int",
                        "definition": [
                            "int wsv_ext2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "double",
                        "definition": [
                            "double value = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn_ext0",
                        "type": "double",
                        "definition": [
                            "double attn_ext0 = (((2 - (dx_ext0 * dx_ext0)) - (dy_ext0 * dy_ext0)) - (dz_ext0 * dz_ext0)) - (dw_ext0 * dw_ext0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn_ext1",
                        "type": "double",
                        "definition": [
                            "double attn_ext1 = (((2 - (dx_ext1 * dx_ext1)) - (dy_ext1 * dy_ext1)) - (dz_ext1 * dz_ext1)) - (dw_ext1 * dw_ext1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn_ext2",
                        "type": "double",
                        "definition": [
                            "double attn_ext2 = (((2 - (dx_ext2 * dx_ext2)) - (dy_ext2 * dy_ext2)) - (dz_ext2 * dz_ext2)) - (dw_ext2 * dw_ext2)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "extrapolate2",
            "header": "",
            "params": [
                "struct osn_context *ctx",
                "int xsb",
                "int ysb",
                "double dx",
                "double dy"
            ],
            "definition": "static double extrapolate2(struct osn_context *ctx, int xsb, int ysb, double dx, double dy)\n{\n  int16_t *perm = ctx->perm;\n  int index = perm[(perm[xsb & 0xFF] + ysb) & 0xFF] & 0x0E;\n  return (gradients2D[index] * dx) + (gradients2D[index + 1] * dy);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct osn_context",
                        "type": "struct osn_context *",
                        "definition": [
                            "struct osn_context *ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx",
                        "type": "double",
                        "definition": [
                            "double dx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy",
                        "type": "double",
                        "definition": [
                            "double dy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "perm",
                        "type": "int16_t *",
                        "definition": [
                            "int16_t *perm = ctx->perm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "int",
                        "definition": [
                            "int index = perm[(perm[xsb & 0xFF] + ysb) & 0xFF] & 0x0E"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gradients2D",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "extrapolate3",
            "header": "",
            "params": [
                "struct osn_context *ctx",
                "int xsb",
                "int ysb",
                "int zsb",
                "double dx",
                "double dy",
                "double dz"
            ],
            "definition": "static double extrapolate3(struct osn_context *ctx, int xsb, int ysb, int zsb, double dx, double dy, double dz)\n{\n  int16_t *perm = ctx->perm;\n  int16_t *permGradIndex3D = ctx->permGradIndex3D;\n  int index = permGradIndex3D[(perm[(perm[xsb & 0xFF] + ysb) & 0xFF] + zsb) & 0xFF];\n  return ((gradients3D[index] * dx) + (gradients3D[index + 1] * dy)) + (gradients3D[index + 2] * dz);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct osn_context",
                        "type": "struct osn_context *",
                        "definition": [
                            "struct osn_context *ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsb",
                        "type": "int",
                        "definition": [
                            "int zsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx",
                        "type": "double",
                        "definition": [
                            "double dx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy",
                        "type": "double",
                        "definition": [
                            "double dy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz",
                        "type": "double",
                        "definition": [
                            "double dz"
                        ]
                    },
                    {
                        "path": null,
                        "name": "perm",
                        "type": "int16_t *",
                        "definition": [
                            "int16_t *perm = ctx->perm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "permGradIndex3D",
                        "type": "int16_t *",
                        "definition": [
                            "int16_t *permGradIndex3D = ctx->permGradIndex3D"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "int",
                        "definition": [
                            "int index = permGradIndex3D[(perm[(perm[xsb & 0xFF] + ysb) & 0xFF] + zsb) & 0xFF]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gradients3D",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "extrapolate4",
            "header": "",
            "params": [
                "struct osn_context *ctx",
                "int xsb",
                "int ysb",
                "int zsb",
                "int wsb",
                "double dx",
                "double dy",
                "double dz",
                "double dw"
            ],
            "definition": "static double extrapolate4(struct osn_context *ctx, int xsb, int ysb, int zsb, int wsb, double dx, double dy, double dz, double dw)\n{\n  int16_t *perm = ctx->perm;\n  int index = perm[(perm[(perm[(perm[xsb & 0xFF] + ysb) & 0xFF] + zsb) & 0xFF] + wsb) & 0xFF] & 0xFC;\n  return (((gradients4D[index] * dx) + (gradients4D[index + 1] * dy)) + (gradients4D[index + 2] * dz)) + (gradients4D[index + 3] * dw);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct osn_context",
                        "type": "struct osn_context *",
                        "definition": [
                            "struct osn_context *ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsb",
                        "type": "int",
                        "definition": [
                            "int zsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsb",
                        "type": "int",
                        "definition": [
                            "int wsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx",
                        "type": "double",
                        "definition": [
                            "double dx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy",
                        "type": "double",
                        "definition": [
                            "double dy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz",
                        "type": "double",
                        "definition": [
                            "double dz"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw",
                        "type": "double",
                        "definition": [
                            "double dw"
                        ]
                    },
                    {
                        "path": null,
                        "name": "perm",
                        "type": "int16_t *",
                        "definition": [
                            "int16_t *perm = ctx->perm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "int",
                        "definition": [
                            "int index = perm[(perm[(perm[(perm[xsb & 0xFF] + ysb) & 0xFF] + zsb) & 0xFF] + wsb) & 0xFF] & 0xFC"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gradients4D",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fastFloor",
            "header": "",
            "params": [
                "double x"
            ],
            "definition": "inline static int fastFloor(double x)\n{\n  int xi = (int) x;\n  return (x < xi) ? (xi - 1) : (xi);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "x",
                        "type": "double",
                        "definition": [
                            "double x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xi",
                        "type": "int",
                        "definition": [
                            "int xi = (int) x"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "allocate_perm",
            "header": "",
            "params": [
                "struct osn_context *ctx",
                "int nperm",
                "int ngrad"
            ],
            "definition": "static int allocate_perm(struct osn_context *ctx, int nperm, int ngrad)\n{\n  if (ctx->perm)\n  {\n    free(ctx->perm);\n  }\n  if (ctx->permGradIndex3D)\n  {\n    free(ctx->permGradIndex3D);\n  }\n  ctx->perm = malloc((sizeof(*ctx->perm)) * nperm);\n  if (!ctx->perm)\n  {\n    return -ENOMEM;\n  }\n  ctx->permGradIndex3D = malloc((sizeof(*ctx->permGradIndex3D)) * ngrad);\n  if (!ctx->permGradIndex3D)\n  {\n    free(ctx->perm);\n    return -ENOMEM;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "free",
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct osn_context",
                        "type": "struct osn_context *",
                        "definition": [
                            "struct osn_context *ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nperm",
                        "type": "int",
                        "definition": [
                            "int nperm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ngrad",
                        "type": "int",
                        "definition": [
                            "int ngrad"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_open_simplex_noise2_1",
            "header": "",
            "params": [
                "double * const dx_ext_ref",
                "double * const dy_ext_ref",
                "int * const xsv_ext_ref",
                "int * const ysv_ext_ref",
                "int xsb",
                "int ysb",
                "double xins",
                "double yins",
                "double inSum",
                "double dx0",
                "double dy0"
            ],
            "definition": "void helper_open_simplex_noise2_1(double * const dx_ext_ref, double * const dy_ext_ref, int * const xsv_ext_ref, int * const ysv_ext_ref, int xsb, int ysb, double xins, double yins, double inSum, double dx0, double dy0)\n{\n  double dx_ext = *dx_ext_ref;\n  double dy_ext = *dy_ext_ref;\n  int xsv_ext = *xsv_ext_ref;\n  int ysv_ext = *ysv_ext_ref;\n  double zins = 1 - inSum;\n  if ((zins > xins) || (zins > yins))\n  {\n    if (xins > yins)\n    {\n      xsv_ext = xsb + 1;\n      ysv_ext = ysb - 1;\n      dx_ext = dx0 - 1;\n      dy_ext = dy0 + 1;\n    }\n    else\n    {\n      xsv_ext = xsb - 1;\n      ysv_ext = ysb + 1;\n      dx_ext = dx0 + 1;\n      dy_ext = dy0 - 1;\n    }\n  }\n  else\n  {\n    xsv_ext = xsb + 1;\n    ysv_ext = ysb + 1;\n    dx_ext = (dx0 - 1) - (2 * 0.366025403784439);\n    dy_ext = (dy0 - 1) - (2 * 0.366025403784439);\n  }\n  *dx_ext_ref = dx_ext;\n  *dy_ext_ref = dy_ext;\n  *xsv_ext_ref = xsv_ext;\n  *ysv_ext_ref = ysv_ext;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dx_ext_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xins",
                        "type": "double",
                        "definition": [
                            "double xins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yins",
                        "type": "double",
                        "definition": [
                            "double yins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inSum",
                        "type": "double",
                        "definition": [
                            "double inSum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx0",
                        "type": "double",
                        "definition": [
                            "double dx0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0",
                        "type": "double",
                        "definition": [
                            "double dy0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext",
                        "type": "double",
                        "definition": [
                            "double dx_ext = *dx_ext_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext",
                        "type": "double",
                        "definition": [
                            "double dy_ext = *dy_ext_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext",
                        "type": "int",
                        "definition": [
                            "int xsv_ext = *xsv_ext_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext",
                        "type": "int",
                        "definition": [
                            "int ysv_ext = *ysv_ext_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zins",
                        "type": "double",
                        "definition": [
                            "double zins = 1 - inSum"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_open_simplex_noise2_2",
            "header": "",
            "params": [
                "int * const xsb_ref",
                "int * const ysb_ref",
                "double * const dx0_ref",
                "double * const dy0_ref",
                "double * const dx_ext_ref",
                "double * const dy_ext_ref",
                "int * const xsv_ext_ref",
                "int * const ysv_ext_ref",
                "double xins",
                "double yins",
                "double inSum"
            ],
            "definition": "void helper_open_simplex_noise2_2(int * const xsb_ref, int * const ysb_ref, double * const dx0_ref, double * const dy0_ref, double * const dx_ext_ref, double * const dy_ext_ref, int * const xsv_ext_ref, int * const ysv_ext_ref, double xins, double yins, double inSum)\n{\n  int xsb = *xsb_ref;\n  int ysb = *ysb_ref;\n  double dx0 = *dx0_ref;\n  double dy0 = *dy0_ref;\n  double dx_ext = *dx_ext_ref;\n  double dy_ext = *dy_ext_ref;\n  int xsv_ext = *xsv_ext_ref;\n  int ysv_ext = *ysv_ext_ref;\n  double zins = 2 - inSum;\n  if ((zins < xins) || (zins < yins))\n  {\n    if (xins > yins)\n    {\n      xsv_ext = xsb + 2;\n      ysv_ext = ysb + 0;\n      dx_ext = (dx0 - 2) - (2 * 0.366025403784439);\n      dy_ext = (dy0 + 0) - (2 * 0.366025403784439);\n    }\n    else\n    {\n      xsv_ext = xsb + 0;\n      ysv_ext = ysb + 2;\n      dx_ext = (dx0 + 0) - (2 * 0.366025403784439);\n      dy_ext = (dy0 - 2) - (2 * 0.366025403784439);\n    }\n  }\n  else\n  {\n    dx_ext = dx0;\n    dy_ext = dy0;\n    xsv_ext = xsb;\n    ysv_ext = ysb;\n  }\n  xsb += 1;\n  ysb += 1;\n  dx0 = (dx0 - 1) - (2 * 0.366025403784439);\n  dy0 = (dy0 - 1) - (2 * 0.366025403784439);\n  *xsb_ref = xsb;\n  *ysb_ref = ysb;\n  *dx0_ref = dx0;\n  *dy0_ref = dy0;\n  *dx_ext_ref = dx_ext;\n  *dy_ext_ref = dy_ext;\n  *xsv_ext_ref = xsv_ext;\n  *ysv_ext_ref = ysv_ext;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "xsb_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsb_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysb_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xins",
                        "type": "double",
                        "definition": [
                            "double xins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yins",
                        "type": "double",
                        "definition": [
                            "double yins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inSum",
                        "type": "double",
                        "definition": [
                            "double inSum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb = *xsb_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb = *ysb_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx0",
                        "type": "double",
                        "definition": [
                            "double dx0 = *dx0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0",
                        "type": "double",
                        "definition": [
                            "double dy0 = *dy0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext",
                        "type": "double",
                        "definition": [
                            "double dx_ext = *dx_ext_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext",
                        "type": "double",
                        "definition": [
                            "double dy_ext = *dy_ext_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext",
                        "type": "int",
                        "definition": [
                            "int xsv_ext = *xsv_ext_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext",
                        "type": "int",
                        "definition": [
                            "int ysv_ext = *ysv_ext_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zins",
                        "type": "double",
                        "definition": [
                            "double zins = 2 - inSum"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_open_simplex_noise3_1",
            "header": "",
            "params": [
                "double * const dx_ext0_ref",
                "double * const dy_ext0_ref",
                "double * const dz_ext0_ref",
                "double * const dx_ext1_ref",
                "double * const dy_ext1_ref",
                "double * const dz_ext1_ref",
                "int * const xsv_ext0_ref",
                "int * const ysv_ext0_ref",
                "int * const zsv_ext0_ref",
                "int * const xsv_ext1_ref",
                "int * const ysv_ext1_ref",
                "int * const zsv_ext1_ref",
                "double * const value_ref",
                "struct osn_context * const ctx",
                "int xsb",
                "int ysb",
                "int zsb",
                "double xins",
                "double yins",
                "double zins",
                "double inSum",
                "double dx0",
                "double dy0",
                "double dz0"
            ],
            "definition": "void helper_open_simplex_noise3_1(double * const dx_ext0_ref, double * const dy_ext0_ref, double * const dz_ext0_ref, double * const dx_ext1_ref, double * const dy_ext1_ref, double * const dz_ext1_ref, int * const xsv_ext0_ref, int * const ysv_ext0_ref, int * const zsv_ext0_ref, int * const xsv_ext1_ref, int * const ysv_ext1_ref, int * const zsv_ext1_ref, double * const value_ref, struct osn_context * const ctx, int xsb, int ysb, int zsb, double xins, double yins, double zins, double inSum, double dx0, double dy0, double dz0)\n{\n  double dx_ext0 = *dx_ext0_ref;\n  double dy_ext0 = *dy_ext0_ref;\n  double dz_ext0 = *dz_ext0_ref;\n  double dx_ext1 = *dx_ext1_ref;\n  double dy_ext1 = *dy_ext1_ref;\n  double dz_ext1 = *dz_ext1_ref;\n  int xsv_ext0 = *xsv_ext0_ref;\n  int ysv_ext0 = *ysv_ext0_ref;\n  int zsv_ext0 = *zsv_ext0_ref;\n  int xsv_ext1 = *xsv_ext1_ref;\n  int ysv_ext1 = *ysv_ext1_ref;\n  int zsv_ext1 = *zsv_ext1_ref;\n  double value = *value_ref;\n  int8_t aPoint = 0x01;\n  double aScore = xins;\n  int8_t bPoint = 0x02;\n  double bScore = yins;\n  if ((aScore >= bScore) && (zins > bScore))\n  {\n    bScore = zins;\n    bPoint = 0x04;\n  }\n  else\n    if ((aScore < bScore) && (zins > aScore))\n  {\n    aScore = zins;\n    aPoint = 0x04;\n  }\n  double wins = 1 - inSum;\n  if ((wins > aScore) || (wins > bScore))\n  {\n    helper_helper_open_simplex_noise3_1_1(&dx_ext0, &dy_ext0, &dz_ext0, &dx_ext1, &dy_ext1, &dz_ext1, &xsv_ext0, &ysv_ext0, &zsv_ext0, &xsv_ext1, &ysv_ext1, &zsv_ext1, xsb, ysb, zsb, dx0, dy0, dz0, aPoint, aScore, bPoint, bScore);\n  }\n  else\n  {\n    helper_helper_open_simplex_noise3_1_2(&dx_ext0, &dy_ext0, &dz_ext0, &dx_ext1, &dy_ext1, &dz_ext1, &xsv_ext0, &ysv_ext0, &zsv_ext0, &xsv_ext1, &ysv_ext1, &zsv_ext1, xsb, ysb, zsb, dx0, dy0, dz0, aPoint, bPoint);\n  }\n  double attn0 = ((2 - (dx0 * dx0)) - (dy0 * dy0)) - (dz0 * dz0);\n  if (attn0 > 0)\n  {\n    attn0 *= attn0;\n    value += (attn0 * attn0) * extrapolate3(ctx, xsb + 0, ysb + 0, zsb + 0, dx0, dy0, dz0);\n  }\n  double dx1 = (dx0 - 1) - (1.0 / 3.0);\n  double dy1 = (dy0 - 0) - (1.0 / 3.0);\n  double dz1 = (dz0 - 0) - (1.0 / 3.0);\n  double attn1 = ((2 - (dx1 * dx1)) - (dy1 * dy1)) - (dz1 * dz1);\n  if (attn1 > 0)\n  {\n    attn1 *= attn1;\n    value += (attn1 * attn1) * extrapolate3(ctx, xsb + 1, ysb + 0, zsb + 0, dx1, dy1, dz1);\n  }\n  double dx2 = (dx0 - 0) - (1.0 / 3.0);\n  double dy2 = (dy0 - 1) - (1.0 / 3.0);\n  double dz2 = dz1;\n  double attn2 = ((2 - (dx2 * dx2)) - (dy2 * dy2)) - (dz2 * dz2);\n  if (attn2 > 0)\n  {\n    attn2 *= attn2;\n    value += (attn2 * attn2) * extrapolate3(ctx, xsb + 0, ysb + 1, zsb + 0, dx2, dy2, dz2);\n  }\n  double dx3 = dx2;\n  double dy3 = dy1;\n  double dz3 = (dz0 - 1) - (1.0 / 3.0);\n  double attn3 = ((2 - (dx3 * dx3)) - (dy3 * dy3)) - (dz3 * dz3);\n  if (attn3 > 0)\n  {\n    attn3 *= attn3;\n    value += (attn3 * attn3) * extrapolate3(ctx, xsb + 0, ysb + 0, zsb + 1, dx3, dy3, dz3);\n  }\n  *dx_ext0_ref = dx_ext0;\n  *dy_ext0_ref = dy_ext0;\n  *dz_ext0_ref = dz_ext0;\n  *dx_ext1_ref = dx_ext1;\n  *dy_ext1_ref = dy_ext1;\n  *dz_ext1_ref = dz_ext1;\n  *xsv_ext0_ref = xsv_ext0;\n  *ysv_ext0_ref = ysv_ext0;\n  *zsv_ext0_ref = zsv_ext0;\n  *xsv_ext1_ref = xsv_ext1;\n  *ysv_ext1_ref = ysv_ext1;\n  *zsv_ext1_ref = zsv_ext1;\n  *value_ref = value;\n}\n\n",
            "calle": [
                "extrapolate3",
                "helper_helper_open_simplex_noise3_1_1",
                "helper_helper_open_simplex_noise3_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dx_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const value_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct osn_context",
                        "type": "struct osn_context * const",
                        "definition": [
                            "struct osn_context * const ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsb",
                        "type": "int",
                        "definition": [
                            "int zsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xins",
                        "type": "double",
                        "definition": [
                            "double xins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yins",
                        "type": "double",
                        "definition": [
                            "double yins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zins",
                        "type": "double",
                        "definition": [
                            "double zins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inSum",
                        "type": "double",
                        "definition": [
                            "double inSum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx0",
                        "type": "double",
                        "definition": [
                            "double dx0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0",
                        "type": "double",
                        "definition": [
                            "double dy0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz0",
                        "type": "double",
                        "definition": [
                            "double dz0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext0",
                        "type": "double",
                        "definition": [
                            "double dx_ext0 = *dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0",
                        "type": "double",
                        "definition": [
                            "double dy_ext0 = *dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0",
                        "type": "double",
                        "definition": [
                            "double dz_ext0 = *dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1",
                        "type": "double",
                        "definition": [
                            "double dx_ext1 = *dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1",
                        "type": "double",
                        "definition": [
                            "double dy_ext1 = *dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1",
                        "type": "double",
                        "definition": [
                            "double dz_ext1 = *dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0",
                        "type": "int",
                        "definition": [
                            "int xsv_ext0 = *xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0",
                        "type": "int",
                        "definition": [
                            "int ysv_ext0 = *ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0",
                        "type": "int",
                        "definition": [
                            "int zsv_ext0 = *zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1",
                        "type": "int",
                        "definition": [
                            "int xsv_ext1 = *xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1",
                        "type": "int",
                        "definition": [
                            "int ysv_ext1 = *ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1",
                        "type": "int",
                        "definition": [
                            "int zsv_ext1 = *zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "double",
                        "definition": [
                            "double value = *value_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t aPoint = 0x01"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aScore",
                        "type": "double",
                        "definition": [
                            "double aScore = xins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t bPoint = 0x02"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bScore",
                        "type": "double",
                        "definition": [
                            "double bScore = yins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wins",
                        "type": "double",
                        "definition": [
                            "double wins = 1 - inSum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn0",
                        "type": "double",
                        "definition": [
                            "double attn0 = ((2 - (dx0 * dx0)) - (dy0 * dy0)) - (dz0 * dz0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx1",
                        "type": "double",
                        "definition": [
                            "double dx1 = (dx0 - 1) - (1.0 / 3.0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy1",
                        "type": "double",
                        "definition": [
                            "double dy1 = (dy0 - 0) - (1.0 / 3.0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz1",
                        "type": "double",
                        "definition": [
                            "double dz1 = (dz0 - 0) - (1.0 / 3.0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn1",
                        "type": "double",
                        "definition": [
                            "double attn1 = ((2 - (dx1 * dx1)) - (dy1 * dy1)) - (dz1 * dz1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx2",
                        "type": "double",
                        "definition": [
                            "double dx2 = (dx0 - 0) - (1.0 / 3.0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy2",
                        "type": "double",
                        "definition": [
                            "double dy2 = (dy0 - 1) - (1.0 / 3.0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz2",
                        "type": "double",
                        "definition": [
                            "double dz2 = dz1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn2",
                        "type": "double",
                        "definition": [
                            "double attn2 = ((2 - (dx2 * dx2)) - (dy2 * dy2)) - (dz2 * dz2)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx3",
                        "type": "double",
                        "definition": [
                            "double dx3 = dx2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy3",
                        "type": "double",
                        "definition": [
                            "double dy3 = dy1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz3",
                        "type": "double",
                        "definition": [
                            "double dz3 = (dz0 - 1) - (1.0 / 3.0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn3",
                        "type": "double",
                        "definition": [
                            "double attn3 = ((2 - (dx3 * dx3)) - (dy3 * dy3)) - (dz3 * dz3)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_open_simplex_noise3_2",
            "header": "",
            "params": [
                "double * const dx0_ref",
                "double * const dy0_ref",
                "double * const dz0_ref",
                "double * const dx_ext0_ref",
                "double * const dy_ext0_ref",
                "double * const dz_ext0_ref",
                "double * const dx_ext1_ref",
                "double * const dy_ext1_ref",
                "double * const dz_ext1_ref",
                "int * const xsv_ext0_ref",
                "int * const ysv_ext0_ref",
                "int * const zsv_ext0_ref",
                "int * const xsv_ext1_ref",
                "int * const ysv_ext1_ref",
                "int * const zsv_ext1_ref",
                "double * const value_ref",
                "struct osn_context * const ctx",
                "int xsb",
                "int ysb",
                "int zsb",
                "double xins",
                "double yins",
                "double zins",
                "double inSum"
            ],
            "definition": "void helper_open_simplex_noise3_2(double * const dx0_ref, double * const dy0_ref, double * const dz0_ref, double * const dx_ext0_ref, double * const dy_ext0_ref, double * const dz_ext0_ref, double * const dx_ext1_ref, double * const dy_ext1_ref, double * const dz_ext1_ref, int * const xsv_ext0_ref, int * const ysv_ext0_ref, int * const zsv_ext0_ref, int * const xsv_ext1_ref, int * const ysv_ext1_ref, int * const zsv_ext1_ref, double * const value_ref, struct osn_context * const ctx, int xsb, int ysb, int zsb, double xins, double yins, double zins, double inSum)\n{\n  double dx0 = *dx0_ref;\n  double dy0 = *dy0_ref;\n  double dz0 = *dz0_ref;\n  double dx_ext0 = *dx_ext0_ref;\n  double dy_ext0 = *dy_ext0_ref;\n  double dz_ext0 = *dz_ext0_ref;\n  double dx_ext1 = *dx_ext1_ref;\n  double dy_ext1 = *dy_ext1_ref;\n  double dz_ext1 = *dz_ext1_ref;\n  int xsv_ext0 = *xsv_ext0_ref;\n  int ysv_ext0 = *ysv_ext0_ref;\n  int zsv_ext0 = *zsv_ext0_ref;\n  int xsv_ext1 = *xsv_ext1_ref;\n  int ysv_ext1 = *ysv_ext1_ref;\n  int zsv_ext1 = *zsv_ext1_ref;\n  double value = *value_ref;\n  int8_t aPoint = 0x06;\n  double aScore = xins;\n  int8_t bPoint = 0x05;\n  double bScore = yins;\n  if ((aScore <= bScore) && (zins < bScore))\n  {\n    bScore = zins;\n    bPoint = 0x03;\n  }\n  else\n    if ((aScore > bScore) && (zins < aScore))\n  {\n    aScore = zins;\n    aPoint = 0x03;\n  }\n  double wins = 3 - inSum;\n  if ((wins < aScore) || (wins < bScore))\n  {\n    helper_helper_open_simplex_noise3_2_1(&dx_ext0, &dy_ext0, &dz_ext0, &dx_ext1, &dy_ext1, &dz_ext1, &xsv_ext0, &ysv_ext0, &zsv_ext0, &xsv_ext1, &ysv_ext1, &zsv_ext1, xsb, ysb, zsb, dx0, dy0, dz0, aPoint, aScore, bPoint, bScore);\n  }\n  else\n  {\n    helper_helper_open_simplex_noise3_2_2(&dx_ext0, &dy_ext0, &dz_ext0, &dx_ext1, &dy_ext1, &dz_ext1, &xsv_ext0, &ysv_ext0, &zsv_ext0, &xsv_ext1, &ysv_ext1, &zsv_ext1, xsb, ysb, zsb, dx0, dy0, dz0, aPoint, bPoint);\n  }\n  double dx3 = (dx0 - 1) - (2 * (1.0 / 3.0));\n  double dy3 = (dy0 - 1) - (2 * (1.0 / 3.0));\n  double dz3 = (dz0 - 0) - (2 * (1.0 / 3.0));\n  double attn3 = ((2 - (dx3 * dx3)) - (dy3 * dy3)) - (dz3 * dz3);\n  if (attn3 > 0)\n  {\n    attn3 *= attn3;\n    value += (attn3 * attn3) * extrapolate3(ctx, xsb + 1, ysb + 1, zsb + 0, dx3, dy3, dz3);\n  }\n  double dx2 = dx3;\n  double dy2 = (dy0 - 0) - (2 * (1.0 / 3.0));\n  double dz2 = (dz0 - 1) - (2 * (1.0 / 3.0));\n  double attn2 = ((2 - (dx2 * dx2)) - (dy2 * dy2)) - (dz2 * dz2);\n  if (attn2 > 0)\n  {\n    attn2 *= attn2;\n    value += (attn2 * attn2) * extrapolate3(ctx, xsb + 1, ysb + 0, zsb + 1, dx2, dy2, dz2);\n  }\n  double dx1 = (dx0 - 0) - (2 * (1.0 / 3.0));\n  double dy1 = dy3;\n  double dz1 = dz2;\n  double attn1 = ((2 - (dx1 * dx1)) - (dy1 * dy1)) - (dz1 * dz1);\n  if (attn1 > 0)\n  {\n    attn1 *= attn1;\n    value += (attn1 * attn1) * extrapolate3(ctx, xsb + 0, ysb + 1, zsb + 1, dx1, dy1, dz1);\n  }\n  dx0 = (dx0 - 1) - (3 * (1.0 / 3.0));\n  dy0 = (dy0 - 1) - (3 * (1.0 / 3.0));\n  dz0 = (dz0 - 1) - (3 * (1.0 / 3.0));\n  double attn0 = ((2 - (dx0 * dx0)) - (dy0 * dy0)) - (dz0 * dz0);\n  if (attn0 > 0)\n  {\n    attn0 *= attn0;\n    value += (attn0 * attn0) * extrapolate3(ctx, xsb + 1, ysb + 1, zsb + 1, dx0, dy0, dz0);\n  }\n  *dx0_ref = dx0;\n  *dy0_ref = dy0;\n  *dz0_ref = dz0;\n  *dx_ext0_ref = dx_ext0;\n  *dy_ext0_ref = dy_ext0;\n  *dz_ext0_ref = dz_ext0;\n  *dx_ext1_ref = dx_ext1;\n  *dy_ext1_ref = dy_ext1;\n  *dz_ext1_ref = dz_ext1;\n  *xsv_ext0_ref = xsv_ext0;\n  *ysv_ext0_ref = ysv_ext0;\n  *zsv_ext0_ref = zsv_ext0;\n  *xsv_ext1_ref = xsv_ext1;\n  *ysv_ext1_ref = ysv_ext1;\n  *zsv_ext1_ref = zsv_ext1;\n  *value_ref = value;\n}\n\n",
            "calle": [
                "extrapolate3",
                "helper_helper_open_simplex_noise3_2_1",
                "helper_helper_open_simplex_noise3_2_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dx0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const value_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct osn_context",
                        "type": "struct osn_context * const",
                        "definition": [
                            "struct osn_context * const ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsb",
                        "type": "int",
                        "definition": [
                            "int zsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xins",
                        "type": "double",
                        "definition": [
                            "double xins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yins",
                        "type": "double",
                        "definition": [
                            "double yins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zins",
                        "type": "double",
                        "definition": [
                            "double zins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inSum",
                        "type": "double",
                        "definition": [
                            "double inSum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx0",
                        "type": "double",
                        "definition": [
                            "double dx0 = *dx0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0",
                        "type": "double",
                        "definition": [
                            "double dy0 = *dy0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz0",
                        "type": "double",
                        "definition": [
                            "double dz0 = *dz0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext0",
                        "type": "double",
                        "definition": [
                            "double dx_ext0 = *dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0",
                        "type": "double",
                        "definition": [
                            "double dy_ext0 = *dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0",
                        "type": "double",
                        "definition": [
                            "double dz_ext0 = *dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1",
                        "type": "double",
                        "definition": [
                            "double dx_ext1 = *dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1",
                        "type": "double",
                        "definition": [
                            "double dy_ext1 = *dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1",
                        "type": "double",
                        "definition": [
                            "double dz_ext1 = *dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0",
                        "type": "int",
                        "definition": [
                            "int xsv_ext0 = *xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0",
                        "type": "int",
                        "definition": [
                            "int ysv_ext0 = *ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0",
                        "type": "int",
                        "definition": [
                            "int zsv_ext0 = *zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1",
                        "type": "int",
                        "definition": [
                            "int xsv_ext1 = *xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1",
                        "type": "int",
                        "definition": [
                            "int ysv_ext1 = *ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1",
                        "type": "int",
                        "definition": [
                            "int zsv_ext1 = *zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "double",
                        "definition": [
                            "double value = *value_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t aPoint = 0x06"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aScore",
                        "type": "double",
                        "definition": [
                            "double aScore = xins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t bPoint = 0x05"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bScore",
                        "type": "double",
                        "definition": [
                            "double bScore = yins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wins",
                        "type": "double",
                        "definition": [
                            "double wins = 3 - inSum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx3",
                        "type": "double",
                        "definition": [
                            "double dx3 = (dx0 - 1) - (2 * (1.0 / 3.0))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy3",
                        "type": "double",
                        "definition": [
                            "double dy3 = (dy0 - 1) - (2 * (1.0 / 3.0))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz3",
                        "type": "double",
                        "definition": [
                            "double dz3 = (dz0 - 0) - (2 * (1.0 / 3.0))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn3",
                        "type": "double",
                        "definition": [
                            "double attn3 = ((2 - (dx3 * dx3)) - (dy3 * dy3)) - (dz3 * dz3)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx2",
                        "type": "double",
                        "definition": [
                            "double dx2 = dx3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy2",
                        "type": "double",
                        "definition": [
                            "double dy2 = (dy0 - 0) - (2 * (1.0 / 3.0))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz2",
                        "type": "double",
                        "definition": [
                            "double dz2 = (dz0 - 1) - (2 * (1.0 / 3.0))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn2",
                        "type": "double",
                        "definition": [
                            "double attn2 = ((2 - (dx2 * dx2)) - (dy2 * dy2)) - (dz2 * dz2)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx1",
                        "type": "double",
                        "definition": [
                            "double dx1 = (dx0 - 0) - (2 * (1.0 / 3.0))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy1",
                        "type": "double",
                        "definition": [
                            "double dy1 = dy3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz1",
                        "type": "double",
                        "definition": [
                            "double dz1 = dz2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn1",
                        "type": "double",
                        "definition": [
                            "double attn1 = ((2 - (dx1 * dx1)) - (dy1 * dy1)) - (dz1 * dz1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn0",
                        "type": "double",
                        "definition": [
                            "double attn0 = ((2 - (dx0 * dx0)) - (dy0 * dy0)) - (dz0 * dz0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_open_simplex_noise3_3",
            "header": "",
            "params": [
                "double * const dx_ext0_ref",
                "double * const dy_ext0_ref",
                "double * const dz_ext0_ref",
                "double * const dx_ext1_ref",
                "double * const dy_ext1_ref",
                "double * const dz_ext1_ref",
                "int * const xsv_ext0_ref",
                "int * const ysv_ext0_ref",
                "int * const zsv_ext0_ref",
                "int * const xsv_ext1_ref",
                "int * const ysv_ext1_ref",
                "int * const zsv_ext1_ref",
                "double * const value_ref",
                "struct osn_context * const ctx",
                "int xsb",
                "int ysb",
                "int zsb",
                "double xins",
                "double yins",
                "double zins",
                "double dx0",
                "double dy0",
                "double dz0"
            ],
            "definition": "void helper_open_simplex_noise3_3(double * const dx_ext0_ref, double * const dy_ext0_ref, double * const dz_ext0_ref, double * const dx_ext1_ref, double * const dy_ext1_ref, double * const dz_ext1_ref, int * const xsv_ext0_ref, int * const ysv_ext0_ref, int * const zsv_ext0_ref, int * const xsv_ext1_ref, int * const ysv_ext1_ref, int * const zsv_ext1_ref, double * const value_ref, struct osn_context * const ctx, int xsb, int ysb, int zsb, double xins, double yins, double zins, double dx0, double dy0, double dz0)\n{\n  double dx_ext0 = *dx_ext0_ref;\n  double dy_ext0 = *dy_ext0_ref;\n  double dz_ext0 = *dz_ext0_ref;\n  double dx_ext1 = *dx_ext1_ref;\n  double dy_ext1 = *dy_ext1_ref;\n  double dz_ext1 = *dz_ext1_ref;\n  int xsv_ext0 = *xsv_ext0_ref;\n  int ysv_ext0 = *ysv_ext0_ref;\n  int zsv_ext0 = *zsv_ext0_ref;\n  int xsv_ext1 = *xsv_ext1_ref;\n  int ysv_ext1 = *ysv_ext1_ref;\n  int zsv_ext1 = *zsv_ext1_ref;\n  double value = *value_ref;\n  double aScore;\n  int8_t aPoint;\n  int aIsFurtherSide;\n  double bScore;\n  int8_t bPoint;\n  int bIsFurtherSide;\n  double p1 = xins + yins;\n  if (p1 > 1)\n  {\n    aScore = p1 - 1;\n    aPoint = 0x03;\n    aIsFurtherSide = 1;\n  }\n  else\n  {\n    aScore = 1 - p1;\n    aPoint = 0x04;\n    aIsFurtherSide = 0;\n  }\n  double p2 = xins + zins;\n  if (p2 > 1)\n  {\n    bScore = p2 - 1;\n    bPoint = 0x05;\n    bIsFurtherSide = 1;\n  }\n  else\n  {\n    bScore = 1 - p2;\n    bPoint = 0x02;\n    bIsFurtherSide = 0;\n  }\n  double p3 = yins + zins;\n  if (p3 > 1)\n  {\n    double score = p3 - 1;\n    if ((aScore <= bScore) && (aScore < score))\n    {\n      aScore = score;\n      aPoint = 0x06;\n      aIsFurtherSide = 1;\n    }\n    else\n      if ((aScore > bScore) && (bScore < score))\n    {\n      bScore = score;\n      bPoint = 0x06;\n      bIsFurtherSide = 1;\n    }\n  }\n  else\n  {\n    double score = 1 - p3;\n    if ((aScore <= bScore) && (aScore < score))\n    {\n      aScore = score;\n      aPoint = 0x01;\n      aIsFurtherSide = 0;\n    }\n    else\n      if ((aScore > bScore) && (bScore < score))\n    {\n      bScore = score;\n      bPoint = 0x01;\n      bIsFurtherSide = 0;\n    }\n  }\n  if (aIsFurtherSide == bIsFurtherSide)\n  {\n    helper_helper_open_simplex_noise3_3_2(&dx_ext0, &dy_ext0, &dz_ext0, &dx_ext1, &dy_ext1, &dz_ext1, &xsv_ext0, &ysv_ext0, &zsv_ext0, &xsv_ext1, &ysv_ext1, &zsv_ext1, xsb, ysb, zsb, dx0, dy0, dz0, aPoint, aIsFurtherSide, bPoint);\n  }\n  else\n  {\n    helper_helper_open_simplex_noise3_3_1(&dx_ext0, &dy_ext0, &dz_ext0, &dx_ext1, &dy_ext1, &dz_ext1, &xsv_ext0, &ysv_ext0, &zsv_ext0, &xsv_ext1, &ysv_ext1, &zsv_ext1, xsb, ysb, zsb, dx0, dy0, dz0, aPoint, aIsFurtherSide, bPoint);\n  }\n  double dx1 = (dx0 - 1) - (1.0 / 3.0);\n  double dy1 = (dy0 - 0) - (1.0 / 3.0);\n  double dz1 = (dz0 - 0) - (1.0 / 3.0);\n  double attn1 = ((2 - (dx1 * dx1)) - (dy1 * dy1)) - (dz1 * dz1);\n  if (attn1 > 0)\n  {\n    attn1 *= attn1;\n    value += (attn1 * attn1) * extrapolate3(ctx, xsb + 1, ysb + 0, zsb + 0, dx1, dy1, dz1);\n  }\n  double dx2 = (dx0 - 0) - (1.0 / 3.0);\n  double dy2 = (dy0 - 1) - (1.0 / 3.0);\n  double dz2 = dz1;\n  double attn2 = ((2 - (dx2 * dx2)) - (dy2 * dy2)) - (dz2 * dz2);\n  if (attn2 > 0)\n  {\n    attn2 *= attn2;\n    value += (attn2 * attn2) * extrapolate3(ctx, xsb + 0, ysb + 1, zsb + 0, dx2, dy2, dz2);\n  }\n  double dx3 = dx2;\n  double dy3 = dy1;\n  double dz3 = (dz0 - 1) - (1.0 / 3.0);\n  double attn3 = ((2 - (dx3 * dx3)) - (dy3 * dy3)) - (dz3 * dz3);\n  if (attn3 > 0)\n  {\n    attn3 *= attn3;\n    value += (attn3 * attn3) * extrapolate3(ctx, xsb + 0, ysb + 0, zsb + 1, dx3, dy3, dz3);\n  }\n  double dx4 = (dx0 - 1) - (2 * (1.0 / 3.0));\n  double dy4 = (dy0 - 1) - (2 * (1.0 / 3.0));\n  double dz4 = (dz0 - 0) - (2 * (1.0 / 3.0));\n  double attn4 = ((2 - (dx4 * dx4)) - (dy4 * dy4)) - (dz4 * dz4);\n  if (attn4 > 0)\n  {\n    attn4 *= attn4;\n    value += (attn4 * attn4) * extrapolate3(ctx, xsb + 1, ysb + 1, zsb + 0, dx4, dy4, dz4);\n  }\n  double dx5 = dx4;\n  double dy5 = (dy0 - 0) - (2 * (1.0 / 3.0));\n  double dz5 = (dz0 - 1) - (2 * (1.0 / 3.0));\n  double attn5 = ((2 - (dx5 * dx5)) - (dy5 * dy5)) - (dz5 * dz5);\n  if (attn5 > 0)\n  {\n    attn5 *= attn5;\n    value += (attn5 * attn5) * extrapolate3(ctx, xsb + 1, ysb + 0, zsb + 1, dx5, dy5, dz5);\n  }\n  double dx6 = (dx0 - 0) - (2 * (1.0 / 3.0));\n  double dy6 = dy4;\n  double dz6 = dz5;\n  double attn6 = ((2 - (dx6 * dx6)) - (dy6 * dy6)) - (dz6 * dz6);\n  if (attn6 > 0)\n  {\n    attn6 *= attn6;\n    value += (attn6 * attn6) * extrapolate3(ctx, xsb + 0, ysb + 1, zsb + 1, dx6, dy6, dz6);\n  }\n  *dx_ext0_ref = dx_ext0;\n  *dy_ext0_ref = dy_ext0;\n  *dz_ext0_ref = dz_ext0;\n  *dx_ext1_ref = dx_ext1;\n  *dy_ext1_ref = dy_ext1;\n  *dz_ext1_ref = dz_ext1;\n  *xsv_ext0_ref = xsv_ext0;\n  *ysv_ext0_ref = ysv_ext0;\n  *zsv_ext0_ref = zsv_ext0;\n  *xsv_ext1_ref = xsv_ext1;\n  *ysv_ext1_ref = ysv_ext1;\n  *zsv_ext1_ref = zsv_ext1;\n  *value_ref = value;\n}\n\n",
            "calle": [
                "extrapolate3",
                "helper_helper_open_simplex_noise3_3_1",
                "helper_helper_open_simplex_noise3_3_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dx_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const value_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct osn_context",
                        "type": "struct osn_context * const",
                        "definition": [
                            "struct osn_context * const ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsb",
                        "type": "int",
                        "definition": [
                            "int zsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xins",
                        "type": "double",
                        "definition": [
                            "double xins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yins",
                        "type": "double",
                        "definition": [
                            "double yins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zins",
                        "type": "double",
                        "definition": [
                            "double zins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx0",
                        "type": "double",
                        "definition": [
                            "double dx0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0",
                        "type": "double",
                        "definition": [
                            "double dy0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz0",
                        "type": "double",
                        "definition": [
                            "double dz0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext0",
                        "type": "double",
                        "definition": [
                            "double dx_ext0 = *dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0",
                        "type": "double",
                        "definition": [
                            "double dy_ext0 = *dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0",
                        "type": "double",
                        "definition": [
                            "double dz_ext0 = *dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1",
                        "type": "double",
                        "definition": [
                            "double dx_ext1 = *dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1",
                        "type": "double",
                        "definition": [
                            "double dy_ext1 = *dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1",
                        "type": "double",
                        "definition": [
                            "double dz_ext1 = *dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0",
                        "type": "int",
                        "definition": [
                            "int xsv_ext0 = *xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0",
                        "type": "int",
                        "definition": [
                            "int ysv_ext0 = *ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0",
                        "type": "int",
                        "definition": [
                            "int zsv_ext0 = *zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1",
                        "type": "int",
                        "definition": [
                            "int xsv_ext1 = *xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1",
                        "type": "int",
                        "definition": [
                            "int ysv_ext1 = *ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1",
                        "type": "int",
                        "definition": [
                            "int zsv_ext1 = *zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "double",
                        "definition": [
                            "double value = *value_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aScore",
                        "type": "double",
                        "definition": [
                            "double aScore"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t aPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aIsFurtherSide",
                        "type": "int",
                        "definition": [
                            "int aIsFurtherSide"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bScore",
                        "type": "double",
                        "definition": [
                            "double bScore"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t bPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bIsFurtherSide",
                        "type": "int",
                        "definition": [
                            "int bIsFurtherSide"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p1",
                        "type": "double",
                        "definition": [
                            "double p1 = xins + yins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p2",
                        "type": "double",
                        "definition": [
                            "double p2 = xins + zins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p3",
                        "type": "double",
                        "definition": [
                            "double p3 = yins + zins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "score",
                        "type": "double",
                        "definition": [
                            "double score = 1 - p3",
                            "double score = p3 - 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx1",
                        "type": "double",
                        "definition": [
                            "double dx1 = (dx0 - 1) - (1.0 / 3.0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy1",
                        "type": "double",
                        "definition": [
                            "double dy1 = (dy0 - 0) - (1.0 / 3.0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz1",
                        "type": "double",
                        "definition": [
                            "double dz1 = (dz0 - 0) - (1.0 / 3.0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn1",
                        "type": "double",
                        "definition": [
                            "double attn1 = ((2 - (dx1 * dx1)) - (dy1 * dy1)) - (dz1 * dz1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx2",
                        "type": "double",
                        "definition": [
                            "double dx2 = (dx0 - 0) - (1.0 / 3.0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy2",
                        "type": "double",
                        "definition": [
                            "double dy2 = (dy0 - 1) - (1.0 / 3.0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz2",
                        "type": "double",
                        "definition": [
                            "double dz2 = dz1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn2",
                        "type": "double",
                        "definition": [
                            "double attn2 = ((2 - (dx2 * dx2)) - (dy2 * dy2)) - (dz2 * dz2)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx3",
                        "type": "double",
                        "definition": [
                            "double dx3 = dx2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy3",
                        "type": "double",
                        "definition": [
                            "double dy3 = dy1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz3",
                        "type": "double",
                        "definition": [
                            "double dz3 = (dz0 - 1) - (1.0 / 3.0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn3",
                        "type": "double",
                        "definition": [
                            "double attn3 = ((2 - (dx3 * dx3)) - (dy3 * dy3)) - (dz3 * dz3)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx4",
                        "type": "double",
                        "definition": [
                            "double dx4 = (dx0 - 1) - (2 * (1.0 / 3.0))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy4",
                        "type": "double",
                        "definition": [
                            "double dy4 = (dy0 - 1) - (2 * (1.0 / 3.0))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz4",
                        "type": "double",
                        "definition": [
                            "double dz4 = (dz0 - 0) - (2 * (1.0 / 3.0))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn4",
                        "type": "double",
                        "definition": [
                            "double attn4 = ((2 - (dx4 * dx4)) - (dy4 * dy4)) - (dz4 * dz4)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx5",
                        "type": "double",
                        "definition": [
                            "double dx5 = dx4"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy5",
                        "type": "double",
                        "definition": [
                            "double dy5 = (dy0 - 0) - (2 * (1.0 / 3.0))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz5",
                        "type": "double",
                        "definition": [
                            "double dz5 = (dz0 - 1) - (2 * (1.0 / 3.0))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn5",
                        "type": "double",
                        "definition": [
                            "double attn5 = ((2 - (dx5 * dx5)) - (dy5 * dy5)) - (dz5 * dz5)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx6",
                        "type": "double",
                        "definition": [
                            "double dx6 = (dx0 - 0) - (2 * (1.0 / 3.0))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy6",
                        "type": "double",
                        "definition": [
                            "double dy6 = dy4"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz6",
                        "type": "double",
                        "definition": [
                            "double dz6 = dz5"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn6",
                        "type": "double",
                        "definition": [
                            "double attn6 = ((2 - (dx6 * dx6)) - (dy6 * dy6)) - (dz6 * dz6)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_open_simplex_noise4_1",
            "header": "",
            "params": [
                "double * const dx_ext0_ref",
                "double * const dy_ext0_ref",
                "double * const dz_ext0_ref",
                "double * const dw_ext0_ref",
                "double * const dx_ext1_ref",
                "double * const dy_ext1_ref",
                "double * const dz_ext1_ref",
                "double * const dw_ext1_ref",
                "double * const dx_ext2_ref",
                "double * const dy_ext2_ref",
                "double * const dz_ext2_ref",
                "double * const dw_ext2_ref",
                "int * const xsv_ext0_ref",
                "int * const ysv_ext0_ref",
                "int * const zsv_ext0_ref",
                "int * const wsv_ext0_ref",
                "int * const xsv_ext1_ref",
                "int * const ysv_ext1_ref",
                "int * const zsv_ext1_ref",
                "int * const ysv_ext2_ref",
                "int * const zsv_ext2_ref",
                "int * const wsv_ext2_ref",
                "double * const value_ref",
                "struct osn_context * const ctx",
                "int xsb",
                "int ysb",
                "int zsb",
                "int wsb",
                "double xins",
                "double yins",
                "double zins",
                "double wins",
                "double inSum",
                "double dx0",
                "double dy0",
                "double dz0",
                "double dw0",
                "int wsv_ext1",
                "int xsv_ext2"
            ],
            "definition": "void helper_open_simplex_noise4_1(double * const dx_ext0_ref, double * const dy_ext0_ref, double * const dz_ext0_ref, double * const dw_ext0_ref, double * const dx_ext1_ref, double * const dy_ext1_ref, double * const dz_ext1_ref, double * const dw_ext1_ref, double * const dx_ext2_ref, double * const dy_ext2_ref, double * const dz_ext2_ref, double * const dw_ext2_ref, int * const xsv_ext0_ref, int * const ysv_ext0_ref, int * const zsv_ext0_ref, int * const wsv_ext0_ref, int * const xsv_ext1_ref, int * const ysv_ext1_ref, int * const zsv_ext1_ref, int * const ysv_ext2_ref, int * const zsv_ext2_ref, int * const wsv_ext2_ref, double * const value_ref, struct osn_context * const ctx, int xsb, int ysb, int zsb, int wsb, double xins, double yins, double zins, double wins, double inSum, double dx0, double dy0, double dz0, double dw0, int wsv_ext1, int xsv_ext2)\n{\n  double dx_ext0 = *dx_ext0_ref;\n  double dy_ext0 = *dy_ext0_ref;\n  double dz_ext0 = *dz_ext0_ref;\n  double dw_ext0 = *dw_ext0_ref;\n  double dx_ext1 = *dx_ext1_ref;\n  double dy_ext1 = *dy_ext1_ref;\n  double dz_ext1 = *dz_ext1_ref;\n  double dw_ext1 = *dw_ext1_ref;\n  double dx_ext2 = *dx_ext2_ref;\n  double dy_ext2 = *dy_ext2_ref;\n  double dz_ext2 = *dz_ext2_ref;\n  double dw_ext2 = *dw_ext2_ref;\n  int xsv_ext0 = *xsv_ext0_ref;\n  int ysv_ext0 = *ysv_ext0_ref;\n  int zsv_ext0 = *zsv_ext0_ref;\n  int wsv_ext0 = *wsv_ext0_ref;\n  int xsv_ext1 = *xsv_ext1_ref;\n  int ysv_ext1 = *ysv_ext1_ref;\n  int zsv_ext1 = *zsv_ext1_ref;\n  int ysv_ext2 = *ysv_ext2_ref;\n  int zsv_ext2 = *zsv_ext2_ref;\n  int wsv_ext2 = *wsv_ext2_ref;\n  double value = *value_ref;\n  int8_t aPoint = 0x01;\n  double aScore = xins;\n  int8_t bPoint = 0x02;\n  double bScore = yins;\n  if ((aScore >= bScore) && (zins > bScore))\n  {\n    bScore = zins;\n    bPoint = 0x04;\n  }\n  else\n    if ((aScore < bScore) && (zins > aScore))\n  {\n    aScore = zins;\n    aPoint = 0x04;\n  }\n  if ((aScore >= bScore) && (wins > bScore))\n  {\n    bScore = wins;\n    bPoint = 0x08;\n  }\n  else\n    if ((aScore < bScore) && (wins > aScore))\n  {\n    aScore = wins;\n    aPoint = 0x08;\n  }\n  double uins = 1 - inSum;\n  if ((uins > aScore) || (uins > bScore))\n  {\n    helper_helper_open_simplex_noise4_1_1(&dx_ext0, &dy_ext0, &dz_ext0, &dw_ext0, &dx_ext1, &dy_ext1, &dz_ext1, &dz_ext2, &dw_ext2, &xsv_ext0, &ysv_ext0, &zsv_ext0, &wsv_ext0, &xsv_ext1, &ysv_ext1, &zsv_ext1, &zsv_ext2, &wsv_ext2, xsb, ysb, zsb, wsb, dx0, dy0, dz0, dw0, wsv_ext1, xsv_ext2, dw_ext1, dx_ext2, dy_ext2, ysv_ext2, aPoint, aScore, bPoint, bScore);\n  }\n  else\n  {\n    helper_helper_open_simplex_noise4_1_2(&dx_ext0, &dy_ext0, &dz_ext0, &dw_ext0, &dx_ext1, &dy_ext1, &dz_ext1, &dw_ext1, &dx_ext2, &dy_ext2, &dz_ext2, &dw_ext2, &xsv_ext0, &ysv_ext0, &zsv_ext0, &wsv_ext0, &xsv_ext1, &ysv_ext1, &zsv_ext1, &ysv_ext2, &zsv_ext2, &wsv_ext2, xsb, ysb, zsb, wsb, dx0, dy0, dz0, dw0, wsv_ext1, xsv_ext2, aPoint, bPoint);\n  }\n  double attn0 = (((2 - (dx0 * dx0)) - (dy0 * dy0)) - (dz0 * dz0)) - (dw0 * dw0);\n  if (attn0 > 0)\n  {\n    attn0 *= attn0;\n    value += (attn0 * attn0) * extrapolate4(ctx, xsb + 0, ysb + 0, zsb + 0, wsb + 0, dx0, dy0, dz0, dw0);\n  }\n  double dx1 = (dx0 - 1) - 0.309016994374947;\n  double dy1 = (dy0 - 0) - 0.309016994374947;\n  double dz1 = (dz0 - 0) - 0.309016994374947;\n  double dw1 = (dw0 - 0) - 0.309016994374947;\n  double attn1 = (((2 - (dx1 * dx1)) - (dy1 * dy1)) - (dz1 * dz1)) - (dw1 * dw1);\n  if (attn1 > 0)\n  {\n    attn1 *= attn1;\n    value += (attn1 * attn1) * extrapolate4(ctx, xsb + 1, ysb + 0, zsb + 0, wsb + 0, dx1, dy1, dz1, dw1);\n  }\n  double dx2 = (dx0 - 0) - 0.309016994374947;\n  double dy2 = (dy0 - 1) - 0.309016994374947;\n  double dz2 = dz1;\n  double dw2 = dw1;\n  double attn2 = (((2 - (dx2 * dx2)) - (dy2 * dy2)) - (dz2 * dz2)) - (dw2 * dw2);\n  if (attn2 > 0)\n  {\n    attn2 *= attn2;\n    value += (attn2 * attn2) * extrapolate4(ctx, xsb + 0, ysb + 1, zsb + 0, wsb + 0, dx2, dy2, dz2, dw2);\n  }\n  double dx3 = dx2;\n  double dy3 = dy1;\n  double dz3 = (dz0 - 1) - 0.309016994374947;\n  double dw3 = dw1;\n  double attn3 = (((2 - (dx3 * dx3)) - (dy3 * dy3)) - (dz3 * dz3)) - (dw3 * dw3);\n  if (attn3 > 0)\n  {\n    attn3 *= attn3;\n    value += (attn3 * attn3) * extrapolate4(ctx, xsb + 0, ysb + 0, zsb + 1, wsb + 0, dx3, dy3, dz3, dw3);\n  }\n  double dx4 = dx2;\n  double dy4 = dy1;\n  double dz4 = dz1;\n  double dw4 = (dw0 - 1) - 0.309016994374947;\n  double attn4 = (((2 - (dx4 * dx4)) - (dy4 * dy4)) - (dz4 * dz4)) - (dw4 * dw4);\n  if (attn4 > 0)\n  {\n    attn4 *= attn4;\n    value += (attn4 * attn4) * extrapolate4(ctx, xsb + 0, ysb + 0, zsb + 0, wsb + 1, dx4, dy4, dz4, dw4);\n  }\n  *dx_ext0_ref = dx_ext0;\n  *dy_ext0_ref = dy_ext0;\n  *dz_ext0_ref = dz_ext0;\n  *dw_ext0_ref = dw_ext0;\n  *dx_ext1_ref = dx_ext1;\n  *dy_ext1_ref = dy_ext1;\n  *dz_ext1_ref = dz_ext1;\n  *dw_ext1_ref = dw_ext1;\n  *dx_ext2_ref = dx_ext2;\n  *dy_ext2_ref = dy_ext2;\n  *dz_ext2_ref = dz_ext2;\n  *dw_ext2_ref = dw_ext2;\n  *xsv_ext0_ref = xsv_ext0;\n  *ysv_ext0_ref = ysv_ext0;\n  *zsv_ext0_ref = zsv_ext0;\n  *wsv_ext0_ref = wsv_ext0;\n  *xsv_ext1_ref = xsv_ext1;\n  *ysv_ext1_ref = ysv_ext1;\n  *zsv_ext1_ref = zsv_ext1;\n  *ysv_ext2_ref = ysv_ext2;\n  *zsv_ext2_ref = zsv_ext2;\n  *wsv_ext2_ref = wsv_ext2;\n  *value_ref = value;\n}\n\n",
            "calle": [
                "extrapolate4",
                "helper_helper_open_simplex_noise4_1_1",
                "helper_helper_open_simplex_noise4_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dx_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const value_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct osn_context",
                        "type": "struct osn_context * const",
                        "definition": [
                            "struct osn_context * const ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsb",
                        "type": "int",
                        "definition": [
                            "int zsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsb",
                        "type": "int",
                        "definition": [
                            "int wsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xins",
                        "type": "double",
                        "definition": [
                            "double xins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yins",
                        "type": "double",
                        "definition": [
                            "double yins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zins",
                        "type": "double",
                        "definition": [
                            "double zins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wins",
                        "type": "double",
                        "definition": [
                            "double wins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inSum",
                        "type": "double",
                        "definition": [
                            "double inSum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx0",
                        "type": "double",
                        "definition": [
                            "double dx0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0",
                        "type": "double",
                        "definition": [
                            "double dy0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz0",
                        "type": "double",
                        "definition": [
                            "double dz0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw0",
                        "type": "double",
                        "definition": [
                            "double dw0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext1",
                        "type": "int",
                        "definition": [
                            "int wsv_ext1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext2",
                        "type": "int",
                        "definition": [
                            "int xsv_ext2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext0",
                        "type": "double",
                        "definition": [
                            "double dx_ext0 = *dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0",
                        "type": "double",
                        "definition": [
                            "double dy_ext0 = *dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0",
                        "type": "double",
                        "definition": [
                            "double dz_ext0 = *dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext0",
                        "type": "double",
                        "definition": [
                            "double dw_ext0 = *dw_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1",
                        "type": "double",
                        "definition": [
                            "double dx_ext1 = *dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1",
                        "type": "double",
                        "definition": [
                            "double dy_ext1 = *dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1",
                        "type": "double",
                        "definition": [
                            "double dz_ext1 = *dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext1",
                        "type": "double",
                        "definition": [
                            "double dw_ext1 = *dw_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext2",
                        "type": "double",
                        "definition": [
                            "double dx_ext2 = *dx_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext2",
                        "type": "double",
                        "definition": [
                            "double dy_ext2 = *dy_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext2",
                        "type": "double",
                        "definition": [
                            "double dz_ext2 = *dz_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext2",
                        "type": "double",
                        "definition": [
                            "double dw_ext2 = *dw_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0",
                        "type": "int",
                        "definition": [
                            "int xsv_ext0 = *xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0",
                        "type": "int",
                        "definition": [
                            "int ysv_ext0 = *ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0",
                        "type": "int",
                        "definition": [
                            "int zsv_ext0 = *zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext0",
                        "type": "int",
                        "definition": [
                            "int wsv_ext0 = *wsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1",
                        "type": "int",
                        "definition": [
                            "int xsv_ext1 = *xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1",
                        "type": "int",
                        "definition": [
                            "int ysv_ext1 = *ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1",
                        "type": "int",
                        "definition": [
                            "int zsv_ext1 = *zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext2",
                        "type": "int",
                        "definition": [
                            "int ysv_ext2 = *ysv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext2",
                        "type": "int",
                        "definition": [
                            "int zsv_ext2 = *zsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext2",
                        "type": "int",
                        "definition": [
                            "int wsv_ext2 = *wsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "double",
                        "definition": [
                            "double value = *value_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t aPoint = 0x01"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aScore",
                        "type": "double",
                        "definition": [
                            "double aScore = xins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t bPoint = 0x02"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bScore",
                        "type": "double",
                        "definition": [
                            "double bScore = yins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uins",
                        "type": "double",
                        "definition": [
                            "double uins = 1 - inSum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn0",
                        "type": "double",
                        "definition": [
                            "double attn0 = (((2 - (dx0 * dx0)) - (dy0 * dy0)) - (dz0 * dz0)) - (dw0 * dw0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx1",
                        "type": "double",
                        "definition": [
                            "double dx1 = (dx0 - 1) - 0.309016994374947"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy1",
                        "type": "double",
                        "definition": [
                            "double dy1 = (dy0 - 0) - 0.309016994374947"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz1",
                        "type": "double",
                        "definition": [
                            "double dz1 = (dz0 - 0) - 0.309016994374947"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw1",
                        "type": "double",
                        "definition": [
                            "double dw1 = (dw0 - 0) - 0.309016994374947"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn1",
                        "type": "double",
                        "definition": [
                            "double attn1 = (((2 - (dx1 * dx1)) - (dy1 * dy1)) - (dz1 * dz1)) - (dw1 * dw1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx2",
                        "type": "double",
                        "definition": [
                            "double dx2 = (dx0 - 0) - 0.309016994374947"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy2",
                        "type": "double",
                        "definition": [
                            "double dy2 = (dy0 - 1) - 0.309016994374947"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz2",
                        "type": "double",
                        "definition": [
                            "double dz2 = dz1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw2",
                        "type": "double",
                        "definition": [
                            "double dw2 = dw1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn2",
                        "type": "double",
                        "definition": [
                            "double attn2 = (((2 - (dx2 * dx2)) - (dy2 * dy2)) - (dz2 * dz2)) - (dw2 * dw2)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx3",
                        "type": "double",
                        "definition": [
                            "double dx3 = dx2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy3",
                        "type": "double",
                        "definition": [
                            "double dy3 = dy1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz3",
                        "type": "double",
                        "definition": [
                            "double dz3 = (dz0 - 1) - 0.309016994374947"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw3",
                        "type": "double",
                        "definition": [
                            "double dw3 = dw1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn3",
                        "type": "double",
                        "definition": [
                            "double attn3 = (((2 - (dx3 * dx3)) - (dy3 * dy3)) - (dz3 * dz3)) - (dw3 * dw3)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx4",
                        "type": "double",
                        "definition": [
                            "double dx4 = dx2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy4",
                        "type": "double",
                        "definition": [
                            "double dy4 = dy1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz4",
                        "type": "double",
                        "definition": [
                            "double dz4 = dz1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw4",
                        "type": "double",
                        "definition": [
                            "double dw4 = (dw0 - 1) - 0.309016994374947"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn4",
                        "type": "double",
                        "definition": [
                            "double attn4 = (((2 - (dx4 * dx4)) - (dy4 * dy4)) - (dz4 * dz4)) - (dw4 * dw4)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_open_simplex_noise4_2",
            "header": "",
            "params": [
                "double * const dx0_ref",
                "double * const dy0_ref",
                "double * const dz0_ref",
                "double * const dw0_ref",
                "double * const dx_ext0_ref",
                "double * const dy_ext0_ref",
                "double * const dz_ext0_ref",
                "double * const dw_ext0_ref",
                "double * const dx_ext1_ref",
                "double * const dy_ext1_ref",
                "double * const dz_ext1_ref",
                "double * const dw_ext1_ref",
                "double * const dx_ext2_ref",
                "double * const dy_ext2_ref",
                "double * const dz_ext2_ref",
                "double * const dw_ext2_ref",
                "int * const xsv_ext0_ref",
                "int * const ysv_ext0_ref",
                "int * const zsv_ext0_ref",
                "int * const wsv_ext0_ref",
                "int * const xsv_ext1_ref",
                "int * const ysv_ext1_ref",
                "int * const zsv_ext1_ref",
                "int * const ysv_ext2_ref",
                "int * const zsv_ext2_ref",
                "int * const wsv_ext2_ref",
                "double * const value_ref",
                "struct osn_context * const ctx",
                "int xsb",
                "int ysb",
                "int zsb",
                "int wsb",
                "double xins",
                "double yins",
                "double zins",
                "double wins",
                "double inSum",
                "int wsv_ext1",
                "int xsv_ext2"
            ],
            "definition": "void helper_open_simplex_noise4_2(double * const dx0_ref, double * const dy0_ref, double * const dz0_ref, double * const dw0_ref, double * const dx_ext0_ref, double * const dy_ext0_ref, double * const dz_ext0_ref, double * const dw_ext0_ref, double * const dx_ext1_ref, double * const dy_ext1_ref, double * const dz_ext1_ref, double * const dw_ext1_ref, double * const dx_ext2_ref, double * const dy_ext2_ref, double * const dz_ext2_ref, double * const dw_ext2_ref, int * const xsv_ext0_ref, int * const ysv_ext0_ref, int * const zsv_ext0_ref, int * const wsv_ext0_ref, int * const xsv_ext1_ref, int * const ysv_ext1_ref, int * const zsv_ext1_ref, int * const ysv_ext2_ref, int * const zsv_ext2_ref, int * const wsv_ext2_ref, double * const value_ref, struct osn_context * const ctx, int xsb, int ysb, int zsb, int wsb, double xins, double yins, double zins, double wins, double inSum, int wsv_ext1, int xsv_ext2)\n{\n  double dx0 = *dx0_ref;\n  double dy0 = *dy0_ref;\n  double dz0 = *dz0_ref;\n  double dw0 = *dw0_ref;\n  double dx_ext0 = *dx_ext0_ref;\n  double dy_ext0 = *dy_ext0_ref;\n  double dz_ext0 = *dz_ext0_ref;\n  double dw_ext0 = *dw_ext0_ref;\n  double dx_ext1 = *dx_ext1_ref;\n  double dy_ext1 = *dy_ext1_ref;\n  double dz_ext1 = *dz_ext1_ref;\n  double dw_ext1 = *dw_ext1_ref;\n  double dx_ext2 = *dx_ext2_ref;\n  double dy_ext2 = *dy_ext2_ref;\n  double dz_ext2 = *dz_ext2_ref;\n  double dw_ext2 = *dw_ext2_ref;\n  int xsv_ext0 = *xsv_ext0_ref;\n  int ysv_ext0 = *ysv_ext0_ref;\n  int zsv_ext0 = *zsv_ext0_ref;\n  int wsv_ext0 = *wsv_ext0_ref;\n  int xsv_ext1 = *xsv_ext1_ref;\n  int ysv_ext1 = *ysv_ext1_ref;\n  int zsv_ext1 = *zsv_ext1_ref;\n  int ysv_ext2 = *ysv_ext2_ref;\n  int zsv_ext2 = *zsv_ext2_ref;\n  int wsv_ext2 = *wsv_ext2_ref;\n  double value = *value_ref;\n  int8_t aPoint = 0x0E;\n  double aScore = xins;\n  int8_t bPoint = 0x0D;\n  double bScore = yins;\n  if ((aScore <= bScore) && (zins < bScore))\n  {\n    bScore = zins;\n    bPoint = 0x0B;\n  }\n  else\n    if ((aScore > bScore) && (zins < aScore))\n  {\n    aScore = zins;\n    aPoint = 0x0B;\n  }\n  if ((aScore <= bScore) && (wins < bScore))\n  {\n    bScore = wins;\n    bPoint = 0x07;\n  }\n  else\n    if ((aScore > bScore) && (wins < aScore))\n  {\n    aScore = wins;\n    aPoint = 0x07;\n  }\n  double uins = 4 - inSum;\n  if ((uins < aScore) || (uins < bScore))\n  {\n    helper_helper_open_simplex_noise4_2_1(&dx_ext0, &dy_ext0, &dz_ext0, &dw_ext0, &dx_ext1, &dy_ext1, &dz_ext1, &dz_ext2, &dw_ext2, &xsv_ext0, &ysv_ext0, &zsv_ext0, &wsv_ext0, &xsv_ext1, &ysv_ext1, &zsv_ext1, &zsv_ext2, &wsv_ext2, xsb, ysb, zsb, wsb, wsv_ext1, xsv_ext2, dx0, dy0, dz0, dw0, dw_ext1, dx_ext2, dy_ext2, ysv_ext2, aPoint, aScore, bPoint, bScore);\n  }\n  else\n  {\n    helper_helper_open_simplex_noise4_2_2(&dx_ext0, &dy_ext0, &dz_ext0, &dw_ext0, &dx_ext1, &dy_ext1, &dz_ext1, &dw_ext1, &dx_ext2, &dy_ext2, &dz_ext2, &dw_ext2, &xsv_ext0, &ysv_ext0, &zsv_ext0, &wsv_ext0, &xsv_ext1, &ysv_ext1, &zsv_ext1, &ysv_ext2, &zsv_ext2, &wsv_ext2, xsb, ysb, zsb, wsb, wsv_ext1, xsv_ext2, dx0, dy0, dz0, dw0, aPoint, bPoint);\n  }\n  double dx4 = (dx0 - 1) - (3 * 0.309016994374947);\n  double dy4 = (dy0 - 1) - (3 * 0.309016994374947);\n  double dz4 = (dz0 - 1) - (3 * 0.309016994374947);\n  double dw4 = dw0 - (3 * 0.309016994374947);\n  double attn4 = (((2 - (dx4 * dx4)) - (dy4 * dy4)) - (dz4 * dz4)) - (dw4 * dw4);\n  if (attn4 > 0)\n  {\n    attn4 *= attn4;\n    value += (attn4 * attn4) * extrapolate4(ctx, xsb + 1, ysb + 1, zsb + 1, wsb + 0, dx4, dy4, dz4, dw4);\n  }\n  double dx3 = dx4;\n  double dy3 = dy4;\n  double dz3 = dz0 - (3 * 0.309016994374947);\n  double dw3 = (dw0 - 1) - (3 * 0.309016994374947);\n  double attn3 = (((2 - (dx3 * dx3)) - (dy3 * dy3)) - (dz3 * dz3)) - (dw3 * dw3);\n  if (attn3 > 0)\n  {\n    attn3 *= attn3;\n    value += (attn3 * attn3) * extrapolate4(ctx, xsb + 1, ysb + 1, zsb + 0, wsb + 1, dx3, dy3, dz3, dw3);\n  }\n  double dx2 = dx4;\n  double dy2 = dy0 - (3 * 0.309016994374947);\n  double dz2 = dz4;\n  double dw2 = dw3;\n  double attn2 = (((2 - (dx2 * dx2)) - (dy2 * dy2)) - (dz2 * dz2)) - (dw2 * dw2);\n  if (attn2 > 0)\n  {\n    attn2 *= attn2;\n    value += (attn2 * attn2) * extrapolate4(ctx, xsb + 1, ysb + 0, zsb + 1, wsb + 1, dx2, dy2, dz2, dw2);\n  }\n  double dx1 = dx0 - (3 * 0.309016994374947);\n  double dz1 = dz4;\n  double dy1 = dy4;\n  double dw1 = dw3;\n  double attn1 = (((2 - (dx1 * dx1)) - (dy1 * dy1)) - (dz1 * dz1)) - (dw1 * dw1);\n  if (attn1 > 0)\n  {\n    attn1 *= attn1;\n    value += (attn1 * attn1) * extrapolate4(ctx, xsb + 0, ysb + 1, zsb + 1, wsb + 1, dx1, dy1, dz1, dw1);\n  }\n  dx0 = (dx0 - 1) - (4 * 0.309016994374947);\n  dy0 = (dy0 - 1) - (4 * 0.309016994374947);\n  dz0 = (dz0 - 1) - (4 * 0.309016994374947);\n  dw0 = (dw0 - 1) - (4 * 0.309016994374947);\n  double attn0 = (((2 - (dx0 * dx0)) - (dy0 * dy0)) - (dz0 * dz0)) - (dw0 * dw0);\n  if (attn0 > 0)\n  {\n    attn0 *= attn0;\n    value += (attn0 * attn0) * extrapolate4(ctx, xsb + 1, ysb + 1, zsb + 1, wsb + 1, dx0, dy0, dz0, dw0);\n  }\n  *dx0_ref = dx0;\n  *dy0_ref = dy0;\n  *dz0_ref = dz0;\n  *dw0_ref = dw0;\n  *dx_ext0_ref = dx_ext0;\n  *dy_ext0_ref = dy_ext0;\n  *dz_ext0_ref = dz_ext0;\n  *dw_ext0_ref = dw_ext0;\n  *dx_ext1_ref = dx_ext1;\n  *dy_ext1_ref = dy_ext1;\n  *dz_ext1_ref = dz_ext1;\n  *dw_ext1_ref = dw_ext1;\n  *dx_ext2_ref = dx_ext2;\n  *dy_ext2_ref = dy_ext2;\n  *dz_ext2_ref = dz_ext2;\n  *dw_ext2_ref = dw_ext2;\n  *xsv_ext0_ref = xsv_ext0;\n  *ysv_ext0_ref = ysv_ext0;\n  *zsv_ext0_ref = zsv_ext0;\n  *wsv_ext0_ref = wsv_ext0;\n  *xsv_ext1_ref = xsv_ext1;\n  *ysv_ext1_ref = ysv_ext1;\n  *zsv_ext1_ref = zsv_ext1;\n  *ysv_ext2_ref = ysv_ext2;\n  *zsv_ext2_ref = zsv_ext2;\n  *wsv_ext2_ref = wsv_ext2;\n  *value_ref = value;\n}\n\n",
            "calle": [
                "extrapolate4",
                "helper_helper_open_simplex_noise4_2_1",
                "helper_helper_open_simplex_noise4_2_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dx0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const value_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct osn_context",
                        "type": "struct osn_context * const",
                        "definition": [
                            "struct osn_context * const ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsb",
                        "type": "int",
                        "definition": [
                            "int zsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsb",
                        "type": "int",
                        "definition": [
                            "int wsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xins",
                        "type": "double",
                        "definition": [
                            "double xins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yins",
                        "type": "double",
                        "definition": [
                            "double yins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zins",
                        "type": "double",
                        "definition": [
                            "double zins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wins",
                        "type": "double",
                        "definition": [
                            "double wins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inSum",
                        "type": "double",
                        "definition": [
                            "double inSum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext1",
                        "type": "int",
                        "definition": [
                            "int wsv_ext1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext2",
                        "type": "int",
                        "definition": [
                            "int xsv_ext2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx0",
                        "type": "double",
                        "definition": [
                            "double dx0 = *dx0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0",
                        "type": "double",
                        "definition": [
                            "double dy0 = *dy0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz0",
                        "type": "double",
                        "definition": [
                            "double dz0 = *dz0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw0",
                        "type": "double",
                        "definition": [
                            "double dw0 = *dw0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext0",
                        "type": "double",
                        "definition": [
                            "double dx_ext0 = *dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0",
                        "type": "double",
                        "definition": [
                            "double dy_ext0 = *dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0",
                        "type": "double",
                        "definition": [
                            "double dz_ext0 = *dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext0",
                        "type": "double",
                        "definition": [
                            "double dw_ext0 = *dw_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1",
                        "type": "double",
                        "definition": [
                            "double dx_ext1 = *dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1",
                        "type": "double",
                        "definition": [
                            "double dy_ext1 = *dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1",
                        "type": "double",
                        "definition": [
                            "double dz_ext1 = *dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext1",
                        "type": "double",
                        "definition": [
                            "double dw_ext1 = *dw_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext2",
                        "type": "double",
                        "definition": [
                            "double dx_ext2 = *dx_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext2",
                        "type": "double",
                        "definition": [
                            "double dy_ext2 = *dy_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext2",
                        "type": "double",
                        "definition": [
                            "double dz_ext2 = *dz_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext2",
                        "type": "double",
                        "definition": [
                            "double dw_ext2 = *dw_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0",
                        "type": "int",
                        "definition": [
                            "int xsv_ext0 = *xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0",
                        "type": "int",
                        "definition": [
                            "int ysv_ext0 = *ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0",
                        "type": "int",
                        "definition": [
                            "int zsv_ext0 = *zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext0",
                        "type": "int",
                        "definition": [
                            "int wsv_ext0 = *wsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1",
                        "type": "int",
                        "definition": [
                            "int xsv_ext1 = *xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1",
                        "type": "int",
                        "definition": [
                            "int ysv_ext1 = *ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1",
                        "type": "int",
                        "definition": [
                            "int zsv_ext1 = *zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext2",
                        "type": "int",
                        "definition": [
                            "int ysv_ext2 = *ysv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext2",
                        "type": "int",
                        "definition": [
                            "int zsv_ext2 = *zsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext2",
                        "type": "int",
                        "definition": [
                            "int wsv_ext2 = *wsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "double",
                        "definition": [
                            "double value = *value_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t aPoint = 0x0E"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aScore",
                        "type": "double",
                        "definition": [
                            "double aScore = xins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t bPoint = 0x0D"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bScore",
                        "type": "double",
                        "definition": [
                            "double bScore = yins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uins",
                        "type": "double",
                        "definition": [
                            "double uins = 4 - inSum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx4",
                        "type": "double",
                        "definition": [
                            "double dx4 = (dx0 - 1) - (3 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy4",
                        "type": "double",
                        "definition": [
                            "double dy4 = (dy0 - 1) - (3 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz4",
                        "type": "double",
                        "definition": [
                            "double dz4 = (dz0 - 1) - (3 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw4",
                        "type": "double",
                        "definition": [
                            "double dw4 = dw0 - (3 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn4",
                        "type": "double",
                        "definition": [
                            "double attn4 = (((2 - (dx4 * dx4)) - (dy4 * dy4)) - (dz4 * dz4)) - (dw4 * dw4)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx3",
                        "type": "double",
                        "definition": [
                            "double dx3 = dx4"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy3",
                        "type": "double",
                        "definition": [
                            "double dy3 = dy4"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz3",
                        "type": "double",
                        "definition": [
                            "double dz3 = dz0 - (3 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw3",
                        "type": "double",
                        "definition": [
                            "double dw3 = (dw0 - 1) - (3 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn3",
                        "type": "double",
                        "definition": [
                            "double attn3 = (((2 - (dx3 * dx3)) - (dy3 * dy3)) - (dz3 * dz3)) - (dw3 * dw3)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx2",
                        "type": "double",
                        "definition": [
                            "double dx2 = dx4"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy2",
                        "type": "double",
                        "definition": [
                            "double dy2 = dy0 - (3 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz2",
                        "type": "double",
                        "definition": [
                            "double dz2 = dz4"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw2",
                        "type": "double",
                        "definition": [
                            "double dw2 = dw3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn2",
                        "type": "double",
                        "definition": [
                            "double attn2 = (((2 - (dx2 * dx2)) - (dy2 * dy2)) - (dz2 * dz2)) - (dw2 * dw2)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx1",
                        "type": "double",
                        "definition": [
                            "double dx1 = dx0 - (3 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz1",
                        "type": "double",
                        "definition": [
                            "double dz1 = dz4"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy1",
                        "type": "double",
                        "definition": [
                            "double dy1 = dy4"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw1",
                        "type": "double",
                        "definition": [
                            "double dw1 = dw3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn1",
                        "type": "double",
                        "definition": [
                            "double attn1 = (((2 - (dx1 * dx1)) - (dy1 * dy1)) - (dz1 * dz1)) - (dw1 * dw1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn0",
                        "type": "double",
                        "definition": [
                            "double attn0 = (((2 - (dx0 * dx0)) - (dy0 * dy0)) - (dz0 * dz0)) - (dw0 * dw0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_open_simplex_noise4_3",
            "header": "",
            "params": [
                "double * const dx_ext0_ref",
                "double * const dy_ext0_ref",
                "double * const dz_ext0_ref",
                "double * const dw_ext0_ref",
                "double * const dx_ext1_ref",
                "double * const dy_ext1_ref",
                "double * const dz_ext1_ref",
                "double * const dw_ext1_ref",
                "double * const dx_ext2_ref",
                "double * const dy_ext2_ref",
                "double * const dz_ext2_ref",
                "double * const dw_ext2_ref",
                "int * const xsv_ext0_ref",
                "int * const ysv_ext0_ref",
                "int * const zsv_ext0_ref",
                "int * const wsv_ext0_ref",
                "int * const xsv_ext1_ref",
                "int * const ysv_ext1_ref",
                "int * const zsv_ext1_ref",
                "int * const wsv_ext1_ref",
                "int * const xsv_ext2_ref",
                "int * const ysv_ext2_ref",
                "int * const zsv_ext2_ref",
                "int * const wsv_ext2_ref",
                "double * const value_ref",
                "struct osn_context * const ctx",
                "int xsb",
                "int ysb",
                "int zsb",
                "int wsb",
                "double xins",
                "double yins",
                "double zins",
                "double wins",
                "double inSum",
                "double dx0",
                "double dy0",
                "double dz0",
                "double dw0"
            ],
            "definition": "void helper_open_simplex_noise4_3(double * const dx_ext0_ref, double * const dy_ext0_ref, double * const dz_ext0_ref, double * const dw_ext0_ref, double * const dx_ext1_ref, double * const dy_ext1_ref, double * const dz_ext1_ref, double * const dw_ext1_ref, double * const dx_ext2_ref, double * const dy_ext2_ref, double * const dz_ext2_ref, double * const dw_ext2_ref, int * const xsv_ext0_ref, int * const ysv_ext0_ref, int * const zsv_ext0_ref, int * const wsv_ext0_ref, int * const xsv_ext1_ref, int * const ysv_ext1_ref, int * const zsv_ext1_ref, int * const wsv_ext1_ref, int * const xsv_ext2_ref, int * const ysv_ext2_ref, int * const zsv_ext2_ref, int * const wsv_ext2_ref, double * const value_ref, struct osn_context * const ctx, int xsb, int ysb, int zsb, int wsb, double xins, double yins, double zins, double wins, double inSum, double dx0, double dy0, double dz0, double dw0)\n{\n  double dx_ext0 = *dx_ext0_ref;\n  double dy_ext0 = *dy_ext0_ref;\n  double dz_ext0 = *dz_ext0_ref;\n  double dw_ext0 = *dw_ext0_ref;\n  double dx_ext1 = *dx_ext1_ref;\n  double dy_ext1 = *dy_ext1_ref;\n  double dz_ext1 = *dz_ext1_ref;\n  double dw_ext1 = *dw_ext1_ref;\n  double dx_ext2 = *dx_ext2_ref;\n  double dy_ext2 = *dy_ext2_ref;\n  double dz_ext2 = *dz_ext2_ref;\n  double dw_ext2 = *dw_ext2_ref;\n  int xsv_ext0 = *xsv_ext0_ref;\n  int ysv_ext0 = *ysv_ext0_ref;\n  int zsv_ext0 = *zsv_ext0_ref;\n  int wsv_ext0 = *wsv_ext0_ref;\n  int xsv_ext1 = *xsv_ext1_ref;\n  int ysv_ext1 = *ysv_ext1_ref;\n  int zsv_ext1 = *zsv_ext1_ref;\n  int wsv_ext1 = *wsv_ext1_ref;\n  int xsv_ext2 = *xsv_ext2_ref;\n  int ysv_ext2 = *ysv_ext2_ref;\n  int zsv_ext2 = *zsv_ext2_ref;\n  int wsv_ext2 = *wsv_ext2_ref;\n  double value = *value_ref;\n  double aScore;\n  int8_t aPoint;\n  int aIsBiggerSide = 1;\n  double bScore;\n  int8_t bPoint;\n  int bIsBiggerSide = 1;\n  if ((xins + yins) < (zins + wins))\n  {\n    aScore = xins + yins;\n    aPoint = 0x0C;\n  }\n  else\n  {\n    aScore = zins + wins;\n    aPoint = 0x03;\n  }\n  if ((xins + zins) < (yins + wins))\n  {\n    bScore = xins + zins;\n    bPoint = 0x0A;\n  }\n  else\n  {\n    bScore = yins + wins;\n    bPoint = 0x05;\n  }\n  if ((xins + wins) < (yins + zins))\n  {\n    double score = xins + wins;\n    if ((aScore <= bScore) && (score < bScore))\n    {\n      bScore = score;\n      bPoint = 0x06;\n    }\n    else\n      if ((aScore > bScore) && (score < aScore))\n    {\n      aScore = score;\n      aPoint = 0x06;\n    }\n  }\n  else\n  {\n    double score = yins + zins;\n    if ((aScore <= bScore) && (score < bScore))\n    {\n      bScore = score;\n      bPoint = 0x09;\n    }\n    else\n      if ((aScore > bScore) && (score < aScore))\n    {\n      aScore = score;\n      aPoint = 0x09;\n    }\n  }\n  double p1 = (3 - inSum) + xins;\n  if ((aScore <= bScore) && (p1 < bScore))\n  {\n    bScore = p1;\n    bPoint = 0x0E;\n    bIsBiggerSide = 0;\n  }\n  else\n    if ((aScore > bScore) && (p1 < aScore))\n  {\n    aScore = p1;\n    aPoint = 0x0E;\n    aIsBiggerSide = 0;\n  }\n  double p2 = (3 - inSum) + yins;\n  if ((aScore <= bScore) && (p2 < bScore))\n  {\n    bScore = p2;\n    bPoint = 0x0D;\n    bIsBiggerSide = 0;\n  }\n  else\n    if ((aScore > bScore) && (p2 < aScore))\n  {\n    aScore = p2;\n    aPoint = 0x0D;\n    aIsBiggerSide = 0;\n  }\n  double p3 = (3 - inSum) + zins;\n  if ((aScore <= bScore) && (p3 < bScore))\n  {\n    bScore = p3;\n    bPoint = 0x0B;\n    bIsBiggerSide = 0;\n  }\n  else\n    if ((aScore > bScore) && (p3 < aScore))\n  {\n    aScore = p3;\n    aPoint = 0x0B;\n    aIsBiggerSide = 0;\n  }\n  double p4 = (3 - inSum) + wins;\n  if ((aScore <= bScore) && (p4 < bScore))\n  {\n    bScore = p4;\n    bPoint = 0x07;\n    bIsBiggerSide = 0;\n  }\n  else\n    if ((aScore > bScore) && (p4 < aScore))\n  {\n    aScore = p4;\n    aPoint = 0x07;\n    aIsBiggerSide = 0;\n  }\n  if (aIsBiggerSide == bIsBiggerSide)\n  {\n    helper_helper_open_simplex_noise4_3_2(&dx_ext0, &dy_ext0, &dz_ext0, &dw_ext0, &dx_ext1, &dy_ext1, &dz_ext1, &dw_ext1, &dx_ext2, &dy_ext2, &dz_ext2, &dw_ext2, &xsv_ext0, &ysv_ext0, &zsv_ext0, &wsv_ext0, &xsv_ext1, &ysv_ext1, &zsv_ext1, &wsv_ext1, &xsv_ext2, &ysv_ext2, &zsv_ext2, &wsv_ext2, xsb, ysb, zsb, wsb, dx0, dy0, dz0, dw0, aPoint, aIsBiggerSide, bPoint);\n  }\n  else\n  {\n    helper_helper_open_simplex_noise4_3_1(&dx_ext0, &dy_ext0, &dz_ext0, &dw_ext0, &dx_ext1, &dy_ext1, &dz_ext1, &dw_ext1, &dx_ext2, &dy_ext2, &dz_ext2, &dw_ext2, &xsv_ext0, &ysv_ext0, &zsv_ext0, &wsv_ext0, &xsv_ext1, &ysv_ext1, &zsv_ext1, &wsv_ext1, &xsv_ext2, &ysv_ext2, &zsv_ext2, &wsv_ext2, xsb, ysb, zsb, wsb, dx0, dy0, dz0, dw0, aPoint, aIsBiggerSide, bPoint);\n  }\n  double dx4 = (dx0 - 1) - (3 * 0.309016994374947);\n  double dy4 = (dy0 - 1) - (3 * 0.309016994374947);\n  double dz4 = (dz0 - 1) - (3 * 0.309016994374947);\n  double dw4 = dw0 - (3 * 0.309016994374947);\n  double attn4 = (((2 - (dx4 * dx4)) - (dy4 * dy4)) - (dz4 * dz4)) - (dw4 * dw4);\n  if (attn4 > 0)\n  {\n    attn4 *= attn4;\n    value += (attn4 * attn4) * extrapolate4(ctx, xsb + 1, ysb + 1, zsb + 1, wsb + 0, dx4, dy4, dz4, dw4);\n  }\n  double dx3 = dx4;\n  double dy3 = dy4;\n  double dz3 = dz0 - (3 * 0.309016994374947);\n  double dw3 = (dw0 - 1) - (3 * 0.309016994374947);\n  double attn3 = (((2 - (dx3 * dx3)) - (dy3 * dy3)) - (dz3 * dz3)) - (dw3 * dw3);\n  if (attn3 > 0)\n  {\n    attn3 *= attn3;\n    value += (attn3 * attn3) * extrapolate4(ctx, xsb + 1, ysb + 1, zsb + 0, wsb + 1, dx3, dy3, dz3, dw3);\n  }\n  double dx2 = dx4;\n  double dy2 = dy0 - (3 * 0.309016994374947);\n  double dz2 = dz4;\n  double dw2 = dw3;\n  double attn2 = (((2 - (dx2 * dx2)) - (dy2 * dy2)) - (dz2 * dz2)) - (dw2 * dw2);\n  if (attn2 > 0)\n  {\n    attn2 *= attn2;\n    value += (attn2 * attn2) * extrapolate4(ctx, xsb + 1, ysb + 0, zsb + 1, wsb + 1, dx2, dy2, dz2, dw2);\n  }\n  double dx1 = dx0 - (3 * 0.309016994374947);\n  double dz1 = dz4;\n  double dy1 = dy4;\n  double dw1 = dw3;\n  double attn1 = (((2 - (dx1 * dx1)) - (dy1 * dy1)) - (dz1 * dz1)) - (dw1 * dw1);\n  if (attn1 > 0)\n  {\n    attn1 *= attn1;\n    value += (attn1 * attn1) * extrapolate4(ctx, xsb + 0, ysb + 1, zsb + 1, wsb + 1, dx1, dy1, dz1, dw1);\n  }\n  double dx5 = (dx0 - 1) - (2 * 0.309016994374947);\n  double dy5 = (dy0 - 1) - (2 * 0.309016994374947);\n  double dz5 = (dz0 - 0) - (2 * 0.309016994374947);\n  double dw5 = (dw0 - 0) - (2 * 0.309016994374947);\n  double attn5 = (((2 - (dx5 * dx5)) - (dy5 * dy5)) - (dz5 * dz5)) - (dw5 * dw5);\n  if (attn5 > 0)\n  {\n    attn5 *= attn5;\n    value += (attn5 * attn5) * extrapolate4(ctx, xsb + 1, ysb + 1, zsb + 0, wsb + 0, dx5, dy5, dz5, dw5);\n  }\n  double dx6 = (dx0 - 1) - (2 * 0.309016994374947);\n  double dy6 = (dy0 - 0) - (2 * 0.309016994374947);\n  double dz6 = (dz0 - 1) - (2 * 0.309016994374947);\n  double dw6 = (dw0 - 0) - (2 * 0.309016994374947);\n  double attn6 = (((2 - (dx6 * dx6)) - (dy6 * dy6)) - (dz6 * dz6)) - (dw6 * dw6);\n  if (attn6 > 0)\n  {\n    attn6 *= attn6;\n    value += (attn6 * attn6) * extrapolate4(ctx, xsb + 1, ysb + 0, zsb + 1, wsb + 0, dx6, dy6, dz6, dw6);\n  }\n  double dx7 = (dx0 - 1) - (2 * 0.309016994374947);\n  double dy7 = (dy0 - 0) - (2 * 0.309016994374947);\n  double dz7 = (dz0 - 0) - (2 * 0.309016994374947);\n  double dw7 = (dw0 - 1) - (2 * 0.309016994374947);\n  double attn7 = (((2 - (dx7 * dx7)) - (dy7 * dy7)) - (dz7 * dz7)) - (dw7 * dw7);\n  if (attn7 > 0)\n  {\n    attn7 *= attn7;\n    value += (attn7 * attn7) * extrapolate4(ctx, xsb + 1, ysb + 0, zsb + 0, wsb + 1, dx7, dy7, dz7, dw7);\n  }\n  double dx8 = (dx0 - 0) - (2 * 0.309016994374947);\n  double dy8 = (dy0 - 1) - (2 * 0.309016994374947);\n  double dz8 = (dz0 - 1) - (2 * 0.309016994374947);\n  double dw8 = (dw0 - 0) - (2 * 0.309016994374947);\n  double attn8 = (((2 - (dx8 * dx8)) - (dy8 * dy8)) - (dz8 * dz8)) - (dw8 * dw8);\n  if (attn8 > 0)\n  {\n    attn8 *= attn8;\n    value += (attn8 * attn8) * extrapolate4(ctx, xsb + 0, ysb + 1, zsb + 1, wsb + 0, dx8, dy8, dz8, dw8);\n  }\n  double dx9 = (dx0 - 0) - (2 * 0.309016994374947);\n  double dy9 = (dy0 - 1) - (2 * 0.309016994374947);\n  double dz9 = (dz0 - 0) - (2 * 0.309016994374947);\n  double dw9 = (dw0 - 1) - (2 * 0.309016994374947);\n  double attn9 = (((2 - (dx9 * dx9)) - (dy9 * dy9)) - (dz9 * dz9)) - (dw9 * dw9);\n  if (attn9 > 0)\n  {\n    attn9 *= attn9;\n    value += (attn9 * attn9) * extrapolate4(ctx, xsb + 0, ysb + 1, zsb + 0, wsb + 1, dx9, dy9, dz9, dw9);\n  }\n  double dx10 = (dx0 - 0) - (2 * 0.309016994374947);\n  double dy10 = (dy0 - 0) - (2 * 0.309016994374947);\n  double dz10 = (dz0 - 1) - (2 * 0.309016994374947);\n  double dw10 = (dw0 - 1) - (2 * 0.309016994374947);\n  double attn10 = (((2 - (dx10 * dx10)) - (dy10 * dy10)) - (dz10 * dz10)) - (dw10 * dw10);\n  if (attn10 > 0)\n  {\n    attn10 *= attn10;\n    value += (attn10 * attn10) * extrapolate4(ctx, xsb + 0, ysb + 0, zsb + 1, wsb + 1, dx10, dy10, dz10, dw10);\n  }\n  *dx_ext0_ref = dx_ext0;\n  *dy_ext0_ref = dy_ext0;\n  *dz_ext0_ref = dz_ext0;\n  *dw_ext0_ref = dw_ext0;\n  *dx_ext1_ref = dx_ext1;\n  *dy_ext1_ref = dy_ext1;\n  *dz_ext1_ref = dz_ext1;\n  *dw_ext1_ref = dw_ext1;\n  *dx_ext2_ref = dx_ext2;\n  *dy_ext2_ref = dy_ext2;\n  *dz_ext2_ref = dz_ext2;\n  *dw_ext2_ref = dw_ext2;\n  *xsv_ext0_ref = xsv_ext0;\n  *ysv_ext0_ref = ysv_ext0;\n  *zsv_ext0_ref = zsv_ext0;\n  *wsv_ext0_ref = wsv_ext0;\n  *xsv_ext1_ref = xsv_ext1;\n  *ysv_ext1_ref = ysv_ext1;\n  *zsv_ext1_ref = zsv_ext1;\n  *wsv_ext1_ref = wsv_ext1;\n  *xsv_ext2_ref = xsv_ext2;\n  *ysv_ext2_ref = ysv_ext2;\n  *zsv_ext2_ref = zsv_ext2;\n  *wsv_ext2_ref = wsv_ext2;\n  *value_ref = value;\n}\n\n",
            "calle": [
                "extrapolate4",
                "helper_helper_open_simplex_noise4_3_1",
                "helper_helper_open_simplex_noise4_3_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dx_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const value_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct osn_context",
                        "type": "struct osn_context * const",
                        "definition": [
                            "struct osn_context * const ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsb",
                        "type": "int",
                        "definition": [
                            "int zsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsb",
                        "type": "int",
                        "definition": [
                            "int wsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xins",
                        "type": "double",
                        "definition": [
                            "double xins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yins",
                        "type": "double",
                        "definition": [
                            "double yins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zins",
                        "type": "double",
                        "definition": [
                            "double zins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wins",
                        "type": "double",
                        "definition": [
                            "double wins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inSum",
                        "type": "double",
                        "definition": [
                            "double inSum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx0",
                        "type": "double",
                        "definition": [
                            "double dx0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0",
                        "type": "double",
                        "definition": [
                            "double dy0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz0",
                        "type": "double",
                        "definition": [
                            "double dz0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw0",
                        "type": "double",
                        "definition": [
                            "double dw0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext0",
                        "type": "double",
                        "definition": [
                            "double dx_ext0 = *dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0",
                        "type": "double",
                        "definition": [
                            "double dy_ext0 = *dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0",
                        "type": "double",
                        "definition": [
                            "double dz_ext0 = *dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext0",
                        "type": "double",
                        "definition": [
                            "double dw_ext0 = *dw_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1",
                        "type": "double",
                        "definition": [
                            "double dx_ext1 = *dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1",
                        "type": "double",
                        "definition": [
                            "double dy_ext1 = *dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1",
                        "type": "double",
                        "definition": [
                            "double dz_ext1 = *dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext1",
                        "type": "double",
                        "definition": [
                            "double dw_ext1 = *dw_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext2",
                        "type": "double",
                        "definition": [
                            "double dx_ext2 = *dx_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext2",
                        "type": "double",
                        "definition": [
                            "double dy_ext2 = *dy_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext2",
                        "type": "double",
                        "definition": [
                            "double dz_ext2 = *dz_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext2",
                        "type": "double",
                        "definition": [
                            "double dw_ext2 = *dw_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0",
                        "type": "int",
                        "definition": [
                            "int xsv_ext0 = *xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0",
                        "type": "int",
                        "definition": [
                            "int ysv_ext0 = *ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0",
                        "type": "int",
                        "definition": [
                            "int zsv_ext0 = *zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext0",
                        "type": "int",
                        "definition": [
                            "int wsv_ext0 = *wsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1",
                        "type": "int",
                        "definition": [
                            "int xsv_ext1 = *xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1",
                        "type": "int",
                        "definition": [
                            "int ysv_ext1 = *ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1",
                        "type": "int",
                        "definition": [
                            "int zsv_ext1 = *zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext1",
                        "type": "int",
                        "definition": [
                            "int wsv_ext1 = *wsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext2",
                        "type": "int",
                        "definition": [
                            "int xsv_ext2 = *xsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext2",
                        "type": "int",
                        "definition": [
                            "int ysv_ext2 = *ysv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext2",
                        "type": "int",
                        "definition": [
                            "int zsv_ext2 = *zsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext2",
                        "type": "int",
                        "definition": [
                            "int wsv_ext2 = *wsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "double",
                        "definition": [
                            "double value = *value_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aScore",
                        "type": "double",
                        "definition": [
                            "double aScore"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t aPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aIsBiggerSide",
                        "type": "int",
                        "definition": [
                            "int aIsBiggerSide = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bScore",
                        "type": "double",
                        "definition": [
                            "double bScore"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t bPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bIsBiggerSide",
                        "type": "int",
                        "definition": [
                            "int bIsBiggerSide = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "score",
                        "type": "double",
                        "definition": [
                            "double score = xins + wins",
                            "double score = yins + zins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p1",
                        "type": "double",
                        "definition": [
                            "double p1 = (3 - inSum) + xins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p2",
                        "type": "double",
                        "definition": [
                            "double p2 = (3 - inSum) + yins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p3",
                        "type": "double",
                        "definition": [
                            "double p3 = (3 - inSum) + zins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p4",
                        "type": "double",
                        "definition": [
                            "double p4 = (3 - inSum) + wins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx4",
                        "type": "double",
                        "definition": [
                            "double dx4 = (dx0 - 1) - (3 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy4",
                        "type": "double",
                        "definition": [
                            "double dy4 = (dy0 - 1) - (3 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz4",
                        "type": "double",
                        "definition": [
                            "double dz4 = (dz0 - 1) - (3 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw4",
                        "type": "double",
                        "definition": [
                            "double dw4 = dw0 - (3 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn4",
                        "type": "double",
                        "definition": [
                            "double attn4 = (((2 - (dx4 * dx4)) - (dy4 * dy4)) - (dz4 * dz4)) - (dw4 * dw4)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx3",
                        "type": "double",
                        "definition": [
                            "double dx3 = dx4"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy3",
                        "type": "double",
                        "definition": [
                            "double dy3 = dy4"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz3",
                        "type": "double",
                        "definition": [
                            "double dz3 = dz0 - (3 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw3",
                        "type": "double",
                        "definition": [
                            "double dw3 = (dw0 - 1) - (3 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn3",
                        "type": "double",
                        "definition": [
                            "double attn3 = (((2 - (dx3 * dx3)) - (dy3 * dy3)) - (dz3 * dz3)) - (dw3 * dw3)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx2",
                        "type": "double",
                        "definition": [
                            "double dx2 = dx4"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy2",
                        "type": "double",
                        "definition": [
                            "double dy2 = dy0 - (3 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz2",
                        "type": "double",
                        "definition": [
                            "double dz2 = dz4"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw2",
                        "type": "double",
                        "definition": [
                            "double dw2 = dw3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn2",
                        "type": "double",
                        "definition": [
                            "double attn2 = (((2 - (dx2 * dx2)) - (dy2 * dy2)) - (dz2 * dz2)) - (dw2 * dw2)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx1",
                        "type": "double",
                        "definition": [
                            "double dx1 = dx0 - (3 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz1",
                        "type": "double",
                        "definition": [
                            "double dz1 = dz4"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy1",
                        "type": "double",
                        "definition": [
                            "double dy1 = dy4"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw1",
                        "type": "double",
                        "definition": [
                            "double dw1 = dw3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn1",
                        "type": "double",
                        "definition": [
                            "double attn1 = (((2 - (dx1 * dx1)) - (dy1 * dy1)) - (dz1 * dz1)) - (dw1 * dw1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx5",
                        "type": "double",
                        "definition": [
                            "double dx5 = (dx0 - 1) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy5",
                        "type": "double",
                        "definition": [
                            "double dy5 = (dy0 - 1) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz5",
                        "type": "double",
                        "definition": [
                            "double dz5 = (dz0 - 0) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw5",
                        "type": "double",
                        "definition": [
                            "double dw5 = (dw0 - 0) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn5",
                        "type": "double",
                        "definition": [
                            "double attn5 = (((2 - (dx5 * dx5)) - (dy5 * dy5)) - (dz5 * dz5)) - (dw5 * dw5)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx6",
                        "type": "double",
                        "definition": [
                            "double dx6 = (dx0 - 1) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy6",
                        "type": "double",
                        "definition": [
                            "double dy6 = (dy0 - 0) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz6",
                        "type": "double",
                        "definition": [
                            "double dz6 = (dz0 - 1) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw6",
                        "type": "double",
                        "definition": [
                            "double dw6 = (dw0 - 0) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn6",
                        "type": "double",
                        "definition": [
                            "double attn6 = (((2 - (dx6 * dx6)) - (dy6 * dy6)) - (dz6 * dz6)) - (dw6 * dw6)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx7",
                        "type": "double",
                        "definition": [
                            "double dx7 = (dx0 - 1) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy7",
                        "type": "double",
                        "definition": [
                            "double dy7 = (dy0 - 0) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz7",
                        "type": "double",
                        "definition": [
                            "double dz7 = (dz0 - 0) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw7",
                        "type": "double",
                        "definition": [
                            "double dw7 = (dw0 - 1) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn7",
                        "type": "double",
                        "definition": [
                            "double attn7 = (((2 - (dx7 * dx7)) - (dy7 * dy7)) - (dz7 * dz7)) - (dw7 * dw7)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx8",
                        "type": "double",
                        "definition": [
                            "double dx8 = (dx0 - 0) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy8",
                        "type": "double",
                        "definition": [
                            "double dy8 = (dy0 - 1) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz8",
                        "type": "double",
                        "definition": [
                            "double dz8 = (dz0 - 1) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw8",
                        "type": "double",
                        "definition": [
                            "double dw8 = (dw0 - 0) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn8",
                        "type": "double",
                        "definition": [
                            "double attn8 = (((2 - (dx8 * dx8)) - (dy8 * dy8)) - (dz8 * dz8)) - (dw8 * dw8)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx9",
                        "type": "double",
                        "definition": [
                            "double dx9 = (dx0 - 0) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy9",
                        "type": "double",
                        "definition": [
                            "double dy9 = (dy0 - 1) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz9",
                        "type": "double",
                        "definition": [
                            "double dz9 = (dz0 - 0) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw9",
                        "type": "double",
                        "definition": [
                            "double dw9 = (dw0 - 1) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn9",
                        "type": "double",
                        "definition": [
                            "double attn9 = (((2 - (dx9 * dx9)) - (dy9 * dy9)) - (dz9 * dz9)) - (dw9 * dw9)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx10",
                        "type": "double",
                        "definition": [
                            "double dx10 = (dx0 - 0) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy10",
                        "type": "double",
                        "definition": [
                            "double dy10 = (dy0 - 0) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz10",
                        "type": "double",
                        "definition": [
                            "double dz10 = (dz0 - 1) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw10",
                        "type": "double",
                        "definition": [
                            "double dw10 = (dw0 - 1) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn10",
                        "type": "double",
                        "definition": [
                            "double attn10 = (((2 - (dx10 * dx10)) - (dy10 * dy10)) - (dz10 * dz10)) - (dw10 * dw10)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_open_simplex_noise4_4",
            "header": "",
            "params": [
                "double * const dx_ext0_ref",
                "double * const dy_ext0_ref",
                "double * const dz_ext0_ref",
                "double * const dw_ext0_ref",
                "double * const dx_ext1_ref",
                "double * const dy_ext1_ref",
                "double * const dz_ext1_ref",
                "double * const dw_ext1_ref",
                "double * const dx_ext2_ref",
                "double * const dy_ext2_ref",
                "double * const dz_ext2_ref",
                "double * const dw_ext2_ref",
                "int * const xsv_ext0_ref",
                "int * const ysv_ext0_ref",
                "int * const zsv_ext0_ref",
                "int * const wsv_ext0_ref",
                "int * const xsv_ext1_ref",
                "int * const ysv_ext1_ref",
                "int * const zsv_ext1_ref",
                "int * const wsv_ext1_ref",
                "int * const xsv_ext2_ref",
                "int * const ysv_ext2_ref",
                "int * const zsv_ext2_ref",
                "int * const wsv_ext2_ref",
                "double * const value_ref",
                "struct osn_context * const ctx",
                "int xsb",
                "int ysb",
                "int zsb",
                "int wsb",
                "double xins",
                "double yins",
                "double zins",
                "double wins",
                "double inSum",
                "double dx0",
                "double dy0",
                "double dz0",
                "double dw0"
            ],
            "definition": "void helper_open_simplex_noise4_4(double * const dx_ext0_ref, double * const dy_ext0_ref, double * const dz_ext0_ref, double * const dw_ext0_ref, double * const dx_ext1_ref, double * const dy_ext1_ref, double * const dz_ext1_ref, double * const dw_ext1_ref, double * const dx_ext2_ref, double * const dy_ext2_ref, double * const dz_ext2_ref, double * const dw_ext2_ref, int * const xsv_ext0_ref, int * const ysv_ext0_ref, int * const zsv_ext0_ref, int * const wsv_ext0_ref, int * const xsv_ext1_ref, int * const ysv_ext1_ref, int * const zsv_ext1_ref, int * const wsv_ext1_ref, int * const xsv_ext2_ref, int * const ysv_ext2_ref, int * const zsv_ext2_ref, int * const wsv_ext2_ref, double * const value_ref, struct osn_context * const ctx, int xsb, int ysb, int zsb, int wsb, double xins, double yins, double zins, double wins, double inSum, double dx0, double dy0, double dz0, double dw0)\n{\n  double dx_ext0 = *dx_ext0_ref;\n  double dy_ext0 = *dy_ext0_ref;\n  double dz_ext0 = *dz_ext0_ref;\n  double dw_ext0 = *dw_ext0_ref;\n  double dx_ext1 = *dx_ext1_ref;\n  double dy_ext1 = *dy_ext1_ref;\n  double dz_ext1 = *dz_ext1_ref;\n  double dw_ext1 = *dw_ext1_ref;\n  double dx_ext2 = *dx_ext2_ref;\n  double dy_ext2 = *dy_ext2_ref;\n  double dz_ext2 = *dz_ext2_ref;\n  double dw_ext2 = *dw_ext2_ref;\n  int xsv_ext0 = *xsv_ext0_ref;\n  int ysv_ext0 = *ysv_ext0_ref;\n  int zsv_ext0 = *zsv_ext0_ref;\n  int wsv_ext0 = *wsv_ext0_ref;\n  int xsv_ext1 = *xsv_ext1_ref;\n  int ysv_ext1 = *ysv_ext1_ref;\n  int zsv_ext1 = *zsv_ext1_ref;\n  int wsv_ext1 = *wsv_ext1_ref;\n  int xsv_ext2 = *xsv_ext2_ref;\n  int ysv_ext2 = *ysv_ext2_ref;\n  int zsv_ext2 = *zsv_ext2_ref;\n  int wsv_ext2 = *wsv_ext2_ref;\n  double value = *value_ref;\n  double aScore;\n  int8_t aPoint;\n  int aIsBiggerSide = 1;\n  double bScore;\n  int8_t bPoint;\n  int bIsBiggerSide = 1;\n  if ((xins + yins) > (zins + wins))\n  {\n    aScore = xins + yins;\n    aPoint = 0x03;\n  }\n  else\n  {\n    aScore = zins + wins;\n    aPoint = 0x0C;\n  }\n  if ((xins + zins) > (yins + wins))\n  {\n    bScore = xins + zins;\n    bPoint = 0x05;\n  }\n  else\n  {\n    bScore = yins + wins;\n    bPoint = 0x0A;\n  }\n  if ((xins + wins) > (yins + zins))\n  {\n    double score = xins + wins;\n    if ((aScore >= bScore) && (score > bScore))\n    {\n      bScore = score;\n      bPoint = 0x09;\n    }\n    else\n      if ((aScore < bScore) && (score > aScore))\n    {\n      aScore = score;\n      aPoint = 0x09;\n    }\n  }\n  else\n  {\n    double score = yins + zins;\n    if ((aScore >= bScore) && (score > bScore))\n    {\n      bScore = score;\n      bPoint = 0x06;\n    }\n    else\n      if ((aScore < bScore) && (score > aScore))\n    {\n      aScore = score;\n      aPoint = 0x06;\n    }\n  }\n  double p1 = (2 - inSum) + xins;\n  if ((aScore >= bScore) && (p1 > bScore))\n  {\n    bScore = p1;\n    bPoint = 0x01;\n    bIsBiggerSide = 0;\n  }\n  else\n    if ((aScore < bScore) && (p1 > aScore))\n  {\n    aScore = p1;\n    aPoint = 0x01;\n    aIsBiggerSide = 0;\n  }\n  double p2 = (2 - inSum) + yins;\n  if ((aScore >= bScore) && (p2 > bScore))\n  {\n    bScore = p2;\n    bPoint = 0x02;\n    bIsBiggerSide = 0;\n  }\n  else\n    if ((aScore < bScore) && (p2 > aScore))\n  {\n    aScore = p2;\n    aPoint = 0x02;\n    aIsBiggerSide = 0;\n  }\n  double p3 = (2 - inSum) + zins;\n  if ((aScore >= bScore) && (p3 > bScore))\n  {\n    bScore = p3;\n    bPoint = 0x04;\n    bIsBiggerSide = 0;\n  }\n  else\n    if ((aScore < bScore) && (p3 > aScore))\n  {\n    aScore = p3;\n    aPoint = 0x04;\n    aIsBiggerSide = 0;\n  }\n  double p4 = (2 - inSum) + wins;\n  if ((aScore >= bScore) && (p4 > bScore))\n  {\n    bScore = p4;\n    bPoint = 0x08;\n    bIsBiggerSide = 0;\n  }\n  else\n    if ((aScore < bScore) && (p4 > aScore))\n  {\n    aScore = p4;\n    aPoint = 0x08;\n    aIsBiggerSide = 0;\n  }\n  if (aIsBiggerSide == bIsBiggerSide)\n  {\n    helper_helper_open_simplex_noise4_4_2(&dx_ext0, &dy_ext0, &dz_ext0, &dw_ext0, &dx_ext1, &dy_ext1, &dz_ext1, &dw_ext1, &dx_ext2, &dy_ext2, &dz_ext2, &dw_ext2, &xsv_ext0, &ysv_ext0, &zsv_ext0, &wsv_ext0, &xsv_ext1, &ysv_ext1, &zsv_ext1, &wsv_ext1, &xsv_ext2, &ysv_ext2, &zsv_ext2, &wsv_ext2, xsb, ysb, zsb, wsb, dx0, dy0, dz0, dw0, aPoint, aIsBiggerSide, bPoint);\n  }\n  else\n  {\n    helper_helper_open_simplex_noise4_4_1(&dx_ext0, &dy_ext0, &dz_ext0, &dw_ext0, &dx_ext1, &dy_ext1, &dz_ext1, &dw_ext1, &dx_ext2, &dy_ext2, &dz_ext2, &dw_ext2, &xsv_ext0, &ysv_ext0, &zsv_ext0, &wsv_ext0, &xsv_ext1, &ysv_ext1, &zsv_ext1, &wsv_ext1, &xsv_ext2, &ysv_ext2, &zsv_ext2, &wsv_ext2, xsb, ysb, zsb, wsb, dx0, dy0, dz0, dw0, aPoint, aIsBiggerSide, bPoint);\n  }\n  double dx1 = (dx0 - 1) - 0.309016994374947;\n  double dy1 = (dy0 - 0) - 0.309016994374947;\n  double dz1 = (dz0 - 0) - 0.309016994374947;\n  double dw1 = (dw0 - 0) - 0.309016994374947;\n  double attn1 = (((2 - (dx1 * dx1)) - (dy1 * dy1)) - (dz1 * dz1)) - (dw1 * dw1);\n  if (attn1 > 0)\n  {\n    attn1 *= attn1;\n    value += (attn1 * attn1) * extrapolate4(ctx, xsb + 1, ysb + 0, zsb + 0, wsb + 0, dx1, dy1, dz1, dw1);\n  }\n  double dx2 = (dx0 - 0) - 0.309016994374947;\n  double dy2 = (dy0 - 1) - 0.309016994374947;\n  double dz2 = dz1;\n  double dw2 = dw1;\n  double attn2 = (((2 - (dx2 * dx2)) - (dy2 * dy2)) - (dz2 * dz2)) - (dw2 * dw2);\n  if (attn2 > 0)\n  {\n    attn2 *= attn2;\n    value += (attn2 * attn2) * extrapolate4(ctx, xsb + 0, ysb + 1, zsb + 0, wsb + 0, dx2, dy2, dz2, dw2);\n  }\n  double dx3 = dx2;\n  double dy3 = dy1;\n  double dz3 = (dz0 - 1) - 0.309016994374947;\n  double dw3 = dw1;\n  double attn3 = (((2 - (dx3 * dx3)) - (dy3 * dy3)) - (dz3 * dz3)) - (dw3 * dw3);\n  if (attn3 > 0)\n  {\n    attn3 *= attn3;\n    value += (attn3 * attn3) * extrapolate4(ctx, xsb + 0, ysb + 0, zsb + 1, wsb + 0, dx3, dy3, dz3, dw3);\n  }\n  double dx4 = dx2;\n  double dy4 = dy1;\n  double dz4 = dz1;\n  double dw4 = (dw0 - 1) - 0.309016994374947;\n  double attn4 = (((2 - (dx4 * dx4)) - (dy4 * dy4)) - (dz4 * dz4)) - (dw4 * dw4);\n  if (attn4 > 0)\n  {\n    attn4 *= attn4;\n    value += (attn4 * attn4) * extrapolate4(ctx, xsb + 0, ysb + 0, zsb + 0, wsb + 1, dx4, dy4, dz4, dw4);\n  }\n  double dx5 = (dx0 - 1) - (2 * 0.309016994374947);\n  double dy5 = (dy0 - 1) - (2 * 0.309016994374947);\n  double dz5 = (dz0 - 0) - (2 * 0.309016994374947);\n  double dw5 = (dw0 - 0) - (2 * 0.309016994374947);\n  double attn5 = (((2 - (dx5 * dx5)) - (dy5 * dy5)) - (dz5 * dz5)) - (dw5 * dw5);\n  if (attn5 > 0)\n  {\n    attn5 *= attn5;\n    value += (attn5 * attn5) * extrapolate4(ctx, xsb + 1, ysb + 1, zsb + 0, wsb + 0, dx5, dy5, dz5, dw5);\n  }\n  double dx6 = (dx0 - 1) - (2 * 0.309016994374947);\n  double dy6 = (dy0 - 0) - (2 * 0.309016994374947);\n  double dz6 = (dz0 - 1) - (2 * 0.309016994374947);\n  double dw6 = (dw0 - 0) - (2 * 0.309016994374947);\n  double attn6 = (((2 - (dx6 * dx6)) - (dy6 * dy6)) - (dz6 * dz6)) - (dw6 * dw6);\n  if (attn6 > 0)\n  {\n    attn6 *= attn6;\n    value += (attn6 * attn6) * extrapolate4(ctx, xsb + 1, ysb + 0, zsb + 1, wsb + 0, dx6, dy6, dz6, dw6);\n  }\n  double dx7 = (dx0 - 1) - (2 * 0.309016994374947);\n  double dy7 = (dy0 - 0) - (2 * 0.309016994374947);\n  double dz7 = (dz0 - 0) - (2 * 0.309016994374947);\n  double dw7 = (dw0 - 1) - (2 * 0.309016994374947);\n  double attn7 = (((2 - (dx7 * dx7)) - (dy7 * dy7)) - (dz7 * dz7)) - (dw7 * dw7);\n  if (attn7 > 0)\n  {\n    attn7 *= attn7;\n    value += (attn7 * attn7) * extrapolate4(ctx, xsb + 1, ysb + 0, zsb + 0, wsb + 1, dx7, dy7, dz7, dw7);\n  }\n  double dx8 = (dx0 - 0) - (2 * 0.309016994374947);\n  double dy8 = (dy0 - 1) - (2 * 0.309016994374947);\n  double dz8 = (dz0 - 1) - (2 * 0.309016994374947);\n  double dw8 = (dw0 - 0) - (2 * 0.309016994374947);\n  double attn8 = (((2 - (dx8 * dx8)) - (dy8 * dy8)) - (dz8 * dz8)) - (dw8 * dw8);\n  if (attn8 > 0)\n  {\n    attn8 *= attn8;\n    value += (attn8 * attn8) * extrapolate4(ctx, xsb + 0, ysb + 1, zsb + 1, wsb + 0, dx8, dy8, dz8, dw8);\n  }\n  double dx9 = (dx0 - 0) - (2 * 0.309016994374947);\n  double dy9 = (dy0 - 1) - (2 * 0.309016994374947);\n  double dz9 = (dz0 - 0) - (2 * 0.309016994374947);\n  double dw9 = (dw0 - 1) - (2 * 0.309016994374947);\n  double attn9 = (((2 - (dx9 * dx9)) - (dy9 * dy9)) - (dz9 * dz9)) - (dw9 * dw9);\n  if (attn9 > 0)\n  {\n    attn9 *= attn9;\n    value += (attn9 * attn9) * extrapolate4(ctx, xsb + 0, ysb + 1, zsb + 0, wsb + 1, dx9, dy9, dz9, dw9);\n  }\n  double dx10 = (dx0 - 0) - (2 * 0.309016994374947);\n  double dy10 = (dy0 - 0) - (2 * 0.309016994374947);\n  double dz10 = (dz0 - 1) - (2 * 0.309016994374947);\n  double dw10 = (dw0 - 1) - (2 * 0.309016994374947);\n  double attn10 = (((2 - (dx10 * dx10)) - (dy10 * dy10)) - (dz10 * dz10)) - (dw10 * dw10);\n  if (attn10 > 0)\n  {\n    attn10 *= attn10;\n    value += (attn10 * attn10) * extrapolate4(ctx, xsb + 0, ysb + 0, zsb + 1, wsb + 1, dx10, dy10, dz10, dw10);\n  }\n  *dx_ext0_ref = dx_ext0;\n  *dy_ext0_ref = dy_ext0;\n  *dz_ext0_ref = dz_ext0;\n  *dw_ext0_ref = dw_ext0;\n  *dx_ext1_ref = dx_ext1;\n  *dy_ext1_ref = dy_ext1;\n  *dz_ext1_ref = dz_ext1;\n  *dw_ext1_ref = dw_ext1;\n  *dx_ext2_ref = dx_ext2;\n  *dy_ext2_ref = dy_ext2;\n  *dz_ext2_ref = dz_ext2;\n  *dw_ext2_ref = dw_ext2;\n  *xsv_ext0_ref = xsv_ext0;\n  *ysv_ext0_ref = ysv_ext0;\n  *zsv_ext0_ref = zsv_ext0;\n  *wsv_ext0_ref = wsv_ext0;\n  *xsv_ext1_ref = xsv_ext1;\n  *ysv_ext1_ref = ysv_ext1;\n  *zsv_ext1_ref = zsv_ext1;\n  *wsv_ext1_ref = wsv_ext1;\n  *xsv_ext2_ref = xsv_ext2;\n  *ysv_ext2_ref = ysv_ext2;\n  *zsv_ext2_ref = zsv_ext2;\n  *wsv_ext2_ref = wsv_ext2;\n  *value_ref = value;\n}\n\n",
            "calle": [
                "extrapolate4",
                "helper_helper_open_simplex_noise4_4_1",
                "helper_helper_open_simplex_noise4_4_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dx_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const value_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct osn_context",
                        "type": "struct osn_context * const",
                        "definition": [
                            "struct osn_context * const ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsb",
                        "type": "int",
                        "definition": [
                            "int zsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsb",
                        "type": "int",
                        "definition": [
                            "int wsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xins",
                        "type": "double",
                        "definition": [
                            "double xins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yins",
                        "type": "double",
                        "definition": [
                            "double yins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zins",
                        "type": "double",
                        "definition": [
                            "double zins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wins",
                        "type": "double",
                        "definition": [
                            "double wins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inSum",
                        "type": "double",
                        "definition": [
                            "double inSum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx0",
                        "type": "double",
                        "definition": [
                            "double dx0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0",
                        "type": "double",
                        "definition": [
                            "double dy0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz0",
                        "type": "double",
                        "definition": [
                            "double dz0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw0",
                        "type": "double",
                        "definition": [
                            "double dw0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext0",
                        "type": "double",
                        "definition": [
                            "double dx_ext0 = *dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0",
                        "type": "double",
                        "definition": [
                            "double dy_ext0 = *dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0",
                        "type": "double",
                        "definition": [
                            "double dz_ext0 = *dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext0",
                        "type": "double",
                        "definition": [
                            "double dw_ext0 = *dw_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1",
                        "type": "double",
                        "definition": [
                            "double dx_ext1 = *dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1",
                        "type": "double",
                        "definition": [
                            "double dy_ext1 = *dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1",
                        "type": "double",
                        "definition": [
                            "double dz_ext1 = *dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext1",
                        "type": "double",
                        "definition": [
                            "double dw_ext1 = *dw_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext2",
                        "type": "double",
                        "definition": [
                            "double dx_ext2 = *dx_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext2",
                        "type": "double",
                        "definition": [
                            "double dy_ext2 = *dy_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext2",
                        "type": "double",
                        "definition": [
                            "double dz_ext2 = *dz_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext2",
                        "type": "double",
                        "definition": [
                            "double dw_ext2 = *dw_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0",
                        "type": "int",
                        "definition": [
                            "int xsv_ext0 = *xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0",
                        "type": "int",
                        "definition": [
                            "int ysv_ext0 = *ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0",
                        "type": "int",
                        "definition": [
                            "int zsv_ext0 = *zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext0",
                        "type": "int",
                        "definition": [
                            "int wsv_ext0 = *wsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1",
                        "type": "int",
                        "definition": [
                            "int xsv_ext1 = *xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1",
                        "type": "int",
                        "definition": [
                            "int ysv_ext1 = *ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1",
                        "type": "int",
                        "definition": [
                            "int zsv_ext1 = *zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext1",
                        "type": "int",
                        "definition": [
                            "int wsv_ext1 = *wsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext2",
                        "type": "int",
                        "definition": [
                            "int xsv_ext2 = *xsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext2",
                        "type": "int",
                        "definition": [
                            "int ysv_ext2 = *ysv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext2",
                        "type": "int",
                        "definition": [
                            "int zsv_ext2 = *zsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext2",
                        "type": "int",
                        "definition": [
                            "int wsv_ext2 = *wsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "double",
                        "definition": [
                            "double value = *value_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aScore",
                        "type": "double",
                        "definition": [
                            "double aScore"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t aPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aIsBiggerSide",
                        "type": "int",
                        "definition": [
                            "int aIsBiggerSide = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bScore",
                        "type": "double",
                        "definition": [
                            "double bScore"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t bPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bIsBiggerSide",
                        "type": "int",
                        "definition": [
                            "int bIsBiggerSide = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "score",
                        "type": "double",
                        "definition": [
                            "double score = xins + wins",
                            "double score = yins + zins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p1",
                        "type": "double",
                        "definition": [
                            "double p1 = (2 - inSum) + xins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p2",
                        "type": "double",
                        "definition": [
                            "double p2 = (2 - inSum) + yins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p3",
                        "type": "double",
                        "definition": [
                            "double p3 = (2 - inSum) + zins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p4",
                        "type": "double",
                        "definition": [
                            "double p4 = (2 - inSum) + wins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx1",
                        "type": "double",
                        "definition": [
                            "double dx1 = (dx0 - 1) - 0.309016994374947"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy1",
                        "type": "double",
                        "definition": [
                            "double dy1 = (dy0 - 0) - 0.309016994374947"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz1",
                        "type": "double",
                        "definition": [
                            "double dz1 = (dz0 - 0) - 0.309016994374947"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw1",
                        "type": "double",
                        "definition": [
                            "double dw1 = (dw0 - 0) - 0.309016994374947"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn1",
                        "type": "double",
                        "definition": [
                            "double attn1 = (((2 - (dx1 * dx1)) - (dy1 * dy1)) - (dz1 * dz1)) - (dw1 * dw1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx2",
                        "type": "double",
                        "definition": [
                            "double dx2 = (dx0 - 0) - 0.309016994374947"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy2",
                        "type": "double",
                        "definition": [
                            "double dy2 = (dy0 - 1) - 0.309016994374947"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz2",
                        "type": "double",
                        "definition": [
                            "double dz2 = dz1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw2",
                        "type": "double",
                        "definition": [
                            "double dw2 = dw1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn2",
                        "type": "double",
                        "definition": [
                            "double attn2 = (((2 - (dx2 * dx2)) - (dy2 * dy2)) - (dz2 * dz2)) - (dw2 * dw2)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx3",
                        "type": "double",
                        "definition": [
                            "double dx3 = dx2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy3",
                        "type": "double",
                        "definition": [
                            "double dy3 = dy1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz3",
                        "type": "double",
                        "definition": [
                            "double dz3 = (dz0 - 1) - 0.309016994374947"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw3",
                        "type": "double",
                        "definition": [
                            "double dw3 = dw1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn3",
                        "type": "double",
                        "definition": [
                            "double attn3 = (((2 - (dx3 * dx3)) - (dy3 * dy3)) - (dz3 * dz3)) - (dw3 * dw3)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx4",
                        "type": "double",
                        "definition": [
                            "double dx4 = dx2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy4",
                        "type": "double",
                        "definition": [
                            "double dy4 = dy1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz4",
                        "type": "double",
                        "definition": [
                            "double dz4 = dz1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw4",
                        "type": "double",
                        "definition": [
                            "double dw4 = (dw0 - 1) - 0.309016994374947"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn4",
                        "type": "double",
                        "definition": [
                            "double attn4 = (((2 - (dx4 * dx4)) - (dy4 * dy4)) - (dz4 * dz4)) - (dw4 * dw4)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx5",
                        "type": "double",
                        "definition": [
                            "double dx5 = (dx0 - 1) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy5",
                        "type": "double",
                        "definition": [
                            "double dy5 = (dy0 - 1) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz5",
                        "type": "double",
                        "definition": [
                            "double dz5 = (dz0 - 0) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw5",
                        "type": "double",
                        "definition": [
                            "double dw5 = (dw0 - 0) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn5",
                        "type": "double",
                        "definition": [
                            "double attn5 = (((2 - (dx5 * dx5)) - (dy5 * dy5)) - (dz5 * dz5)) - (dw5 * dw5)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx6",
                        "type": "double",
                        "definition": [
                            "double dx6 = (dx0 - 1) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy6",
                        "type": "double",
                        "definition": [
                            "double dy6 = (dy0 - 0) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz6",
                        "type": "double",
                        "definition": [
                            "double dz6 = (dz0 - 1) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw6",
                        "type": "double",
                        "definition": [
                            "double dw6 = (dw0 - 0) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn6",
                        "type": "double",
                        "definition": [
                            "double attn6 = (((2 - (dx6 * dx6)) - (dy6 * dy6)) - (dz6 * dz6)) - (dw6 * dw6)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx7",
                        "type": "double",
                        "definition": [
                            "double dx7 = (dx0 - 1) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy7",
                        "type": "double",
                        "definition": [
                            "double dy7 = (dy0 - 0) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz7",
                        "type": "double",
                        "definition": [
                            "double dz7 = (dz0 - 0) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw7",
                        "type": "double",
                        "definition": [
                            "double dw7 = (dw0 - 1) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn7",
                        "type": "double",
                        "definition": [
                            "double attn7 = (((2 - (dx7 * dx7)) - (dy7 * dy7)) - (dz7 * dz7)) - (dw7 * dw7)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx8",
                        "type": "double",
                        "definition": [
                            "double dx8 = (dx0 - 0) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy8",
                        "type": "double",
                        "definition": [
                            "double dy8 = (dy0 - 1) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz8",
                        "type": "double",
                        "definition": [
                            "double dz8 = (dz0 - 1) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw8",
                        "type": "double",
                        "definition": [
                            "double dw8 = (dw0 - 0) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn8",
                        "type": "double",
                        "definition": [
                            "double attn8 = (((2 - (dx8 * dx8)) - (dy8 * dy8)) - (dz8 * dz8)) - (dw8 * dw8)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx9",
                        "type": "double",
                        "definition": [
                            "double dx9 = (dx0 - 0) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy9",
                        "type": "double",
                        "definition": [
                            "double dy9 = (dy0 - 1) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz9",
                        "type": "double",
                        "definition": [
                            "double dz9 = (dz0 - 0) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw9",
                        "type": "double",
                        "definition": [
                            "double dw9 = (dw0 - 1) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn9",
                        "type": "double",
                        "definition": [
                            "double attn9 = (((2 - (dx9 * dx9)) - (dy9 * dy9)) - (dz9 * dz9)) - (dw9 * dw9)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx10",
                        "type": "double",
                        "definition": [
                            "double dx10 = (dx0 - 0) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy10",
                        "type": "double",
                        "definition": [
                            "double dy10 = (dy0 - 0) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz10",
                        "type": "double",
                        "definition": [
                            "double dz10 = (dz0 - 1) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw10",
                        "type": "double",
                        "definition": [
                            "double dw10 = (dw0 - 1) - (2 * 0.309016994374947)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attn10",
                        "type": "double",
                        "definition": [
                            "double attn10 = (((2 - (dx10 * dx10)) - (dy10 * dy10)) - (dz10 * dz10)) - (dw10 * dw10)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_open_simplex_noise3_1_1",
            "header": "",
            "params": [
                "double * const dx_ext0_ref",
                "double * const dy_ext0_ref",
                "double * const dz_ext0_ref",
                "double * const dx_ext1_ref",
                "double * const dy_ext1_ref",
                "double * const dz_ext1_ref",
                "int * const xsv_ext0_ref",
                "int * const ysv_ext0_ref",
                "int * const zsv_ext0_ref",
                "int * const xsv_ext1_ref",
                "int * const ysv_ext1_ref",
                "int * const zsv_ext1_ref",
                "int xsb",
                "int ysb",
                "int zsb",
                "double dx0",
                "double dy0",
                "double dz0",
                "int8_t aPoint",
                "double aScore",
                "int8_t bPoint",
                "double bScore"
            ],
            "definition": "void helper_helper_open_simplex_noise3_1_1(double * const dx_ext0_ref, double * const dy_ext0_ref, double * const dz_ext0_ref, double * const dx_ext1_ref, double * const dy_ext1_ref, double * const dz_ext1_ref, int * const xsv_ext0_ref, int * const ysv_ext0_ref, int * const zsv_ext0_ref, int * const xsv_ext1_ref, int * const ysv_ext1_ref, int * const zsv_ext1_ref, int xsb, int ysb, int zsb, double dx0, double dy0, double dz0, int8_t aPoint, double aScore, int8_t bPoint, double bScore)\n{\n  double dx_ext0 = *dx_ext0_ref;\n  double dy_ext0 = *dy_ext0_ref;\n  double dz_ext0 = *dz_ext0_ref;\n  double dx_ext1 = *dx_ext1_ref;\n  double dy_ext1 = *dy_ext1_ref;\n  double dz_ext1 = *dz_ext1_ref;\n  int xsv_ext0 = *xsv_ext0_ref;\n  int ysv_ext0 = *ysv_ext0_ref;\n  int zsv_ext0 = *zsv_ext0_ref;\n  int xsv_ext1 = *xsv_ext1_ref;\n  int ysv_ext1 = *ysv_ext1_ref;\n  int zsv_ext1 = *zsv_ext1_ref;\n  int8_t c = (bScore > aScore) ? (bPoint) : (aPoint);\n  if ((c & 0x01) == 0)\n  {\n    xsv_ext0 = xsb - 1;\n    xsv_ext1 = xsb;\n    dx_ext0 = dx0 + 1;\n    dx_ext1 = dx0;\n  }\n  else\n  {\n    xsv_ext0 = (xsv_ext1 = xsb + 1);\n    dx_ext0 = (dx_ext1 = dx0 - 1);\n  }\n  if ((c & 0x02) == 0)\n  {\n    ysv_ext0 = (ysv_ext1 = ysb);\n    dy_ext0 = (dy_ext1 = dy0);\n    if ((c & 0x01) == 0)\n    {\n      ysv_ext1 -= 1;\n      dy_ext1 += 1;\n    }\n    else\n    {\n      ysv_ext0 -= 1;\n      dy_ext0 += 1;\n    }\n  }\n  else\n  {\n    ysv_ext0 = (ysv_ext1 = ysb + 1);\n    dy_ext0 = (dy_ext1 = dy0 - 1);\n  }\n  if ((c & 0x04) == 0)\n  {\n    zsv_ext0 = zsb;\n    zsv_ext1 = zsb - 1;\n    dz_ext0 = dz0;\n    dz_ext1 = dz0 + 1;\n  }\n  else\n  {\n    zsv_ext0 = (zsv_ext1 = zsb + 1);\n    dz_ext0 = (dz_ext1 = dz0 - 1);\n  }\n  *dx_ext0_ref = dx_ext0;\n  *dy_ext0_ref = dy_ext0;\n  *dz_ext0_ref = dz_ext0;\n  *dx_ext1_ref = dx_ext1;\n  *dy_ext1_ref = dy_ext1;\n  *dz_ext1_ref = dz_ext1;\n  *xsv_ext0_ref = xsv_ext0;\n  *ysv_ext0_ref = ysv_ext0;\n  *zsv_ext0_ref = zsv_ext0;\n  *xsv_ext1_ref = xsv_ext1;\n  *ysv_ext1_ref = ysv_ext1;\n  *zsv_ext1_ref = zsv_ext1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dx_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsb",
                        "type": "int",
                        "definition": [
                            "int zsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx0",
                        "type": "double",
                        "definition": [
                            "double dx0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0",
                        "type": "double",
                        "definition": [
                            "double dy0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz0",
                        "type": "double",
                        "definition": [
                            "double dz0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t aPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aScore",
                        "type": "double",
                        "definition": [
                            "double aScore"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t bPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bScore",
                        "type": "double",
                        "definition": [
                            "double bScore"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext0",
                        "type": "double",
                        "definition": [
                            "double dx_ext0 = *dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0",
                        "type": "double",
                        "definition": [
                            "double dy_ext0 = *dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0",
                        "type": "double",
                        "definition": [
                            "double dz_ext0 = *dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1",
                        "type": "double",
                        "definition": [
                            "double dx_ext1 = *dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1",
                        "type": "double",
                        "definition": [
                            "double dy_ext1 = *dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1",
                        "type": "double",
                        "definition": [
                            "double dz_ext1 = *dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0",
                        "type": "int",
                        "definition": [
                            "int xsv_ext0 = *xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0",
                        "type": "int",
                        "definition": [
                            "int ysv_ext0 = *ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0",
                        "type": "int",
                        "definition": [
                            "int zsv_ext0 = *zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1",
                        "type": "int",
                        "definition": [
                            "int xsv_ext1 = *xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1",
                        "type": "int",
                        "definition": [
                            "int ysv_ext1 = *ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1",
                        "type": "int",
                        "definition": [
                            "int zsv_ext1 = *zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int8_t",
                        "definition": [
                            "int8_t c = (bScore > aScore) ? (bPoint) : (aPoint)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_open_simplex_noise3_1_2",
            "header": "",
            "params": [
                "double * const dx_ext0_ref",
                "double * const dy_ext0_ref",
                "double * const dz_ext0_ref",
                "double * const dx_ext1_ref",
                "double * const dy_ext1_ref",
                "double * const dz_ext1_ref",
                "int * const xsv_ext0_ref",
                "int * const ysv_ext0_ref",
                "int * const zsv_ext0_ref",
                "int * const xsv_ext1_ref",
                "int * const ysv_ext1_ref",
                "int * const zsv_ext1_ref",
                "int xsb",
                "int ysb",
                "int zsb",
                "double dx0",
                "double dy0",
                "double dz0",
                "int8_t aPoint",
                "int8_t bPoint"
            ],
            "definition": "void helper_helper_open_simplex_noise3_1_2(double * const dx_ext0_ref, double * const dy_ext0_ref, double * const dz_ext0_ref, double * const dx_ext1_ref, double * const dy_ext1_ref, double * const dz_ext1_ref, int * const xsv_ext0_ref, int * const ysv_ext0_ref, int * const zsv_ext0_ref, int * const xsv_ext1_ref, int * const ysv_ext1_ref, int * const zsv_ext1_ref, int xsb, int ysb, int zsb, double dx0, double dy0, double dz0, int8_t aPoint, int8_t bPoint)\n{\n  double dx_ext0 = *dx_ext0_ref;\n  double dy_ext0 = *dy_ext0_ref;\n  double dz_ext0 = *dz_ext0_ref;\n  double dx_ext1 = *dx_ext1_ref;\n  double dy_ext1 = *dy_ext1_ref;\n  double dz_ext1 = *dz_ext1_ref;\n  int xsv_ext0 = *xsv_ext0_ref;\n  int ysv_ext0 = *ysv_ext0_ref;\n  int zsv_ext0 = *zsv_ext0_ref;\n  int xsv_ext1 = *xsv_ext1_ref;\n  int ysv_ext1 = *ysv_ext1_ref;\n  int zsv_ext1 = *zsv_ext1_ref;\n  int8_t c = (int8_t) (aPoint | bPoint);\n  if ((c & 0x01) == 0)\n  {\n    xsv_ext0 = xsb;\n    xsv_ext1 = xsb - 1;\n    dx_ext0 = dx0 - (2 * (1.0 / 3.0));\n    dx_ext1 = (dx0 + 1) - (1.0 / 3.0);\n  }\n  else\n  {\n    xsv_ext0 = (xsv_ext1 = xsb + 1);\n    dx_ext0 = (dx0 - 1) - (2 * (1.0 / 3.0));\n    dx_ext1 = (dx0 - 1) - (1.0 / 3.0);\n  }\n  if ((c & 0x02) == 0)\n  {\n    ysv_ext0 = ysb;\n    ysv_ext1 = ysb - 1;\n    dy_ext0 = dy0 - (2 * (1.0 / 3.0));\n    dy_ext1 = (dy0 + 1) - (1.0 / 3.0);\n  }\n  else\n  {\n    ysv_ext0 = (ysv_ext1 = ysb + 1);\n    dy_ext0 = (dy0 - 1) - (2 * (1.0 / 3.0));\n    dy_ext1 = (dy0 - 1) - (1.0 / 3.0);\n  }\n  if ((c & 0x04) == 0)\n  {\n    zsv_ext0 = zsb;\n    zsv_ext1 = zsb - 1;\n    dz_ext0 = dz0 - (2 * (1.0 / 3.0));\n    dz_ext1 = (dz0 + 1) - (1.0 / 3.0);\n  }\n  else\n  {\n    zsv_ext0 = (zsv_ext1 = zsb + 1);\n    dz_ext0 = (dz0 - 1) - (2 * (1.0 / 3.0));\n    dz_ext1 = (dz0 - 1) - (1.0 / 3.0);\n  }\n  *dx_ext0_ref = dx_ext0;\n  *dy_ext0_ref = dy_ext0;\n  *dz_ext0_ref = dz_ext0;\n  *dx_ext1_ref = dx_ext1;\n  *dy_ext1_ref = dy_ext1;\n  *dz_ext1_ref = dz_ext1;\n  *xsv_ext0_ref = xsv_ext0;\n  *ysv_ext0_ref = ysv_ext0;\n  *zsv_ext0_ref = zsv_ext0;\n  *xsv_ext1_ref = xsv_ext1;\n  *ysv_ext1_ref = ysv_ext1;\n  *zsv_ext1_ref = zsv_ext1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dx_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsb",
                        "type": "int",
                        "definition": [
                            "int zsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx0",
                        "type": "double",
                        "definition": [
                            "double dx0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0",
                        "type": "double",
                        "definition": [
                            "double dy0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz0",
                        "type": "double",
                        "definition": [
                            "double dz0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t aPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t bPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext0",
                        "type": "double",
                        "definition": [
                            "double dx_ext0 = *dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0",
                        "type": "double",
                        "definition": [
                            "double dy_ext0 = *dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0",
                        "type": "double",
                        "definition": [
                            "double dz_ext0 = *dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1",
                        "type": "double",
                        "definition": [
                            "double dx_ext1 = *dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1",
                        "type": "double",
                        "definition": [
                            "double dy_ext1 = *dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1",
                        "type": "double",
                        "definition": [
                            "double dz_ext1 = *dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0",
                        "type": "int",
                        "definition": [
                            "int xsv_ext0 = *xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0",
                        "type": "int",
                        "definition": [
                            "int ysv_ext0 = *ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0",
                        "type": "int",
                        "definition": [
                            "int zsv_ext0 = *zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1",
                        "type": "int",
                        "definition": [
                            "int xsv_ext1 = *xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1",
                        "type": "int",
                        "definition": [
                            "int ysv_ext1 = *ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1",
                        "type": "int",
                        "definition": [
                            "int zsv_ext1 = *zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int8_t",
                        "definition": [
                            "int8_t c = (int8_t) (aPoint | bPoint)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_open_simplex_noise3_2_1",
            "header": "",
            "params": [
                "double * const dx_ext0_ref",
                "double * const dy_ext0_ref",
                "double * const dz_ext0_ref",
                "double * const dx_ext1_ref",
                "double * const dy_ext1_ref",
                "double * const dz_ext1_ref",
                "int * const xsv_ext0_ref",
                "int * const ysv_ext0_ref",
                "int * const zsv_ext0_ref",
                "int * const xsv_ext1_ref",
                "int * const ysv_ext1_ref",
                "int * const zsv_ext1_ref",
                "int xsb",
                "int ysb",
                "int zsb",
                "double dx0",
                "double dy0",
                "double dz0",
                "int8_t aPoint",
                "double aScore",
                "int8_t bPoint",
                "double bScore"
            ],
            "definition": "void helper_helper_open_simplex_noise3_2_1(double * const dx_ext0_ref, double * const dy_ext0_ref, double * const dz_ext0_ref, double * const dx_ext1_ref, double * const dy_ext1_ref, double * const dz_ext1_ref, int * const xsv_ext0_ref, int * const ysv_ext0_ref, int * const zsv_ext0_ref, int * const xsv_ext1_ref, int * const ysv_ext1_ref, int * const zsv_ext1_ref, int xsb, int ysb, int zsb, double dx0, double dy0, double dz0, int8_t aPoint, double aScore, int8_t bPoint, double bScore)\n{\n  double dx_ext0 = *dx_ext0_ref;\n  double dy_ext0 = *dy_ext0_ref;\n  double dz_ext0 = *dz_ext0_ref;\n  double dx_ext1 = *dx_ext1_ref;\n  double dy_ext1 = *dy_ext1_ref;\n  double dz_ext1 = *dz_ext1_ref;\n  int xsv_ext0 = *xsv_ext0_ref;\n  int ysv_ext0 = *ysv_ext0_ref;\n  int zsv_ext0 = *zsv_ext0_ref;\n  int xsv_ext1 = *xsv_ext1_ref;\n  int ysv_ext1 = *ysv_ext1_ref;\n  int zsv_ext1 = *zsv_ext1_ref;\n  int8_t c = (bScore < aScore) ? (bPoint) : (aPoint);\n  if ((c & 0x01) != 0)\n  {\n    xsv_ext0 = xsb + 2;\n    xsv_ext1 = xsb + 1;\n    dx_ext0 = (dx0 - 2) - (3 * (1.0 / 3.0));\n    dx_ext1 = (dx0 - 1) - (3 * (1.0 / 3.0));\n  }\n  else\n  {\n    xsv_ext0 = (xsv_ext1 = xsb);\n    dx_ext0 = (dx_ext1 = dx0 - (3 * (1.0 / 3.0)));\n  }\n  if ((c & 0x02) != 0)\n  {\n    ysv_ext0 = (ysv_ext1 = ysb + 1);\n    dy_ext0 = (dy_ext1 = (dy0 - 1) - (3 * (1.0 / 3.0)));\n    if ((c & 0x01) != 0)\n    {\n      ysv_ext1 += 1;\n      dy_ext1 -= 1;\n    }\n    else\n    {\n      ysv_ext0 += 1;\n      dy_ext0 -= 1;\n    }\n  }\n  else\n  {\n    ysv_ext0 = (ysv_ext1 = ysb);\n    dy_ext0 = (dy_ext1 = dy0 - (3 * (1.0 / 3.0)));\n  }\n  if ((c & 0x04) != 0)\n  {\n    zsv_ext0 = zsb + 1;\n    zsv_ext1 = zsb + 2;\n    dz_ext0 = (dz0 - 1) - (3 * (1.0 / 3.0));\n    dz_ext1 = (dz0 - 2) - (3 * (1.0 / 3.0));\n  }\n  else\n  {\n    zsv_ext0 = (zsv_ext1 = zsb);\n    dz_ext0 = (dz_ext1 = dz0 - (3 * (1.0 / 3.0)));\n  }\n  *dx_ext0_ref = dx_ext0;\n  *dy_ext0_ref = dy_ext0;\n  *dz_ext0_ref = dz_ext0;\n  *dx_ext1_ref = dx_ext1;\n  *dy_ext1_ref = dy_ext1;\n  *dz_ext1_ref = dz_ext1;\n  *xsv_ext0_ref = xsv_ext0;\n  *ysv_ext0_ref = ysv_ext0;\n  *zsv_ext0_ref = zsv_ext0;\n  *xsv_ext1_ref = xsv_ext1;\n  *ysv_ext1_ref = ysv_ext1;\n  *zsv_ext1_ref = zsv_ext1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dx_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsb",
                        "type": "int",
                        "definition": [
                            "int zsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx0",
                        "type": "double",
                        "definition": [
                            "double dx0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0",
                        "type": "double",
                        "definition": [
                            "double dy0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz0",
                        "type": "double",
                        "definition": [
                            "double dz0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t aPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aScore",
                        "type": "double",
                        "definition": [
                            "double aScore"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t bPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bScore",
                        "type": "double",
                        "definition": [
                            "double bScore"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext0",
                        "type": "double",
                        "definition": [
                            "double dx_ext0 = *dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0",
                        "type": "double",
                        "definition": [
                            "double dy_ext0 = *dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0",
                        "type": "double",
                        "definition": [
                            "double dz_ext0 = *dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1",
                        "type": "double",
                        "definition": [
                            "double dx_ext1 = *dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1",
                        "type": "double",
                        "definition": [
                            "double dy_ext1 = *dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1",
                        "type": "double",
                        "definition": [
                            "double dz_ext1 = *dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0",
                        "type": "int",
                        "definition": [
                            "int xsv_ext0 = *xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0",
                        "type": "int",
                        "definition": [
                            "int ysv_ext0 = *ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0",
                        "type": "int",
                        "definition": [
                            "int zsv_ext0 = *zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1",
                        "type": "int",
                        "definition": [
                            "int xsv_ext1 = *xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1",
                        "type": "int",
                        "definition": [
                            "int ysv_ext1 = *ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1",
                        "type": "int",
                        "definition": [
                            "int zsv_ext1 = *zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int8_t",
                        "definition": [
                            "int8_t c = (bScore < aScore) ? (bPoint) : (aPoint)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_open_simplex_noise3_2_2",
            "header": "",
            "params": [
                "double * const dx_ext0_ref",
                "double * const dy_ext0_ref",
                "double * const dz_ext0_ref",
                "double * const dx_ext1_ref",
                "double * const dy_ext1_ref",
                "double * const dz_ext1_ref",
                "int * const xsv_ext0_ref",
                "int * const ysv_ext0_ref",
                "int * const zsv_ext0_ref",
                "int * const xsv_ext1_ref",
                "int * const ysv_ext1_ref",
                "int * const zsv_ext1_ref",
                "int xsb",
                "int ysb",
                "int zsb",
                "double dx0",
                "double dy0",
                "double dz0",
                "int8_t aPoint",
                "int8_t bPoint"
            ],
            "definition": "void helper_helper_open_simplex_noise3_2_2(double * const dx_ext0_ref, double * const dy_ext0_ref, double * const dz_ext0_ref, double * const dx_ext1_ref, double * const dy_ext1_ref, double * const dz_ext1_ref, int * const xsv_ext0_ref, int * const ysv_ext0_ref, int * const zsv_ext0_ref, int * const xsv_ext1_ref, int * const ysv_ext1_ref, int * const zsv_ext1_ref, int xsb, int ysb, int zsb, double dx0, double dy0, double dz0, int8_t aPoint, int8_t bPoint)\n{\n  double dx_ext0 = *dx_ext0_ref;\n  double dy_ext0 = *dy_ext0_ref;\n  double dz_ext0 = *dz_ext0_ref;\n  double dx_ext1 = *dx_ext1_ref;\n  double dy_ext1 = *dy_ext1_ref;\n  double dz_ext1 = *dz_ext1_ref;\n  int xsv_ext0 = *xsv_ext0_ref;\n  int ysv_ext0 = *ysv_ext0_ref;\n  int zsv_ext0 = *zsv_ext0_ref;\n  int xsv_ext1 = *xsv_ext1_ref;\n  int ysv_ext1 = *ysv_ext1_ref;\n  int zsv_ext1 = *zsv_ext1_ref;\n  int8_t c = (int8_t) (aPoint & bPoint);\n  if ((c & 0x01) != 0)\n  {\n    xsv_ext0 = xsb + 1;\n    xsv_ext1 = xsb + 2;\n    dx_ext0 = (dx0 - 1) - (1.0 / 3.0);\n    dx_ext1 = (dx0 - 2) - (2 * (1.0 / 3.0));\n  }\n  else\n  {\n    xsv_ext0 = (xsv_ext1 = xsb);\n    dx_ext0 = dx0 - (1.0 / 3.0);\n    dx_ext1 = dx0 - (2 * (1.0 / 3.0));\n  }\n  if ((c & 0x02) != 0)\n  {\n    ysv_ext0 = ysb + 1;\n    ysv_ext1 = ysb + 2;\n    dy_ext0 = (dy0 - 1) - (1.0 / 3.0);\n    dy_ext1 = (dy0 - 2) - (2 * (1.0 / 3.0));\n  }\n  else\n  {\n    ysv_ext0 = (ysv_ext1 = ysb);\n    dy_ext0 = dy0 - (1.0 / 3.0);\n    dy_ext1 = dy0 - (2 * (1.0 / 3.0));\n  }\n  if ((c & 0x04) != 0)\n  {\n    zsv_ext0 = zsb + 1;\n    zsv_ext1 = zsb + 2;\n    dz_ext0 = (dz0 - 1) - (1.0 / 3.0);\n    dz_ext1 = (dz0 - 2) - (2 * (1.0 / 3.0));\n  }\n  else\n  {\n    zsv_ext0 = (zsv_ext1 = zsb);\n    dz_ext0 = dz0 - (1.0 / 3.0);\n    dz_ext1 = dz0 - (2 * (1.0 / 3.0));\n  }\n  *dx_ext0_ref = dx_ext0;\n  *dy_ext0_ref = dy_ext0;\n  *dz_ext0_ref = dz_ext0;\n  *dx_ext1_ref = dx_ext1;\n  *dy_ext1_ref = dy_ext1;\n  *dz_ext1_ref = dz_ext1;\n  *xsv_ext0_ref = xsv_ext0;\n  *ysv_ext0_ref = ysv_ext0;\n  *zsv_ext0_ref = zsv_ext0;\n  *xsv_ext1_ref = xsv_ext1;\n  *ysv_ext1_ref = ysv_ext1;\n  *zsv_ext1_ref = zsv_ext1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dx_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsb",
                        "type": "int",
                        "definition": [
                            "int zsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx0",
                        "type": "double",
                        "definition": [
                            "double dx0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0",
                        "type": "double",
                        "definition": [
                            "double dy0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz0",
                        "type": "double",
                        "definition": [
                            "double dz0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t aPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t bPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext0",
                        "type": "double",
                        "definition": [
                            "double dx_ext0 = *dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0",
                        "type": "double",
                        "definition": [
                            "double dy_ext0 = *dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0",
                        "type": "double",
                        "definition": [
                            "double dz_ext0 = *dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1",
                        "type": "double",
                        "definition": [
                            "double dx_ext1 = *dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1",
                        "type": "double",
                        "definition": [
                            "double dy_ext1 = *dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1",
                        "type": "double",
                        "definition": [
                            "double dz_ext1 = *dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0",
                        "type": "int",
                        "definition": [
                            "int xsv_ext0 = *xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0",
                        "type": "int",
                        "definition": [
                            "int ysv_ext0 = *ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0",
                        "type": "int",
                        "definition": [
                            "int zsv_ext0 = *zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1",
                        "type": "int",
                        "definition": [
                            "int xsv_ext1 = *xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1",
                        "type": "int",
                        "definition": [
                            "int ysv_ext1 = *ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1",
                        "type": "int",
                        "definition": [
                            "int zsv_ext1 = *zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int8_t",
                        "definition": [
                            "int8_t c = (int8_t) (aPoint & bPoint)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_open_simplex_noise3_3_1",
            "header": "",
            "params": [
                "double * const dx_ext0_ref",
                "double * const dy_ext0_ref",
                "double * const dz_ext0_ref",
                "double * const dx_ext1_ref",
                "double * const dy_ext1_ref",
                "double * const dz_ext1_ref",
                "int * const xsv_ext0_ref",
                "int * const ysv_ext0_ref",
                "int * const zsv_ext0_ref",
                "int * const xsv_ext1_ref",
                "int * const ysv_ext1_ref",
                "int * const zsv_ext1_ref",
                "int xsb",
                "int ysb",
                "int zsb",
                "double dx0",
                "double dy0",
                "double dz0",
                "int8_t aPoint",
                "int aIsFurtherSide",
                "int8_t bPoint"
            ],
            "definition": "void helper_helper_open_simplex_noise3_3_1(double * const dx_ext0_ref, double * const dy_ext0_ref, double * const dz_ext0_ref, double * const dx_ext1_ref, double * const dy_ext1_ref, double * const dz_ext1_ref, int * const xsv_ext0_ref, int * const ysv_ext0_ref, int * const zsv_ext0_ref, int * const xsv_ext1_ref, int * const ysv_ext1_ref, int * const zsv_ext1_ref, int xsb, int ysb, int zsb, double dx0, double dy0, double dz0, int8_t aPoint, int aIsFurtherSide, int8_t bPoint)\n{\n  double dx_ext0 = *dx_ext0_ref;\n  double dy_ext0 = *dy_ext0_ref;\n  double dz_ext0 = *dz_ext0_ref;\n  double dx_ext1 = *dx_ext1_ref;\n  double dy_ext1 = *dy_ext1_ref;\n  double dz_ext1 = *dz_ext1_ref;\n  int xsv_ext0 = *xsv_ext0_ref;\n  int ysv_ext0 = *ysv_ext0_ref;\n  int zsv_ext0 = *zsv_ext0_ref;\n  int xsv_ext1 = *xsv_ext1_ref;\n  int ysv_ext1 = *ysv_ext1_ref;\n  int zsv_ext1 = *zsv_ext1_ref;\n  int8_t c1;\n  int8_t c2;\n  if (aIsFurtherSide)\n  {\n    c1 = aPoint;\n    c2 = bPoint;\n  }\n  else\n  {\n    c1 = bPoint;\n    c2 = aPoint;\n  }\n  if ((c1 & 0x01) == 0)\n  {\n    dx_ext0 = (dx0 + 1) - (1.0 / 3.0);\n    dy_ext0 = (dy0 - 1) - (1.0 / 3.0);\n    dz_ext0 = (dz0 - 1) - (1.0 / 3.0);\n    xsv_ext0 = xsb - 1;\n    ysv_ext0 = ysb + 1;\n    zsv_ext0 = zsb + 1;\n  }\n  else\n    if ((c1 & 0x02) == 0)\n  {\n    dx_ext0 = (dx0 - 1) - (1.0 / 3.0);\n    dy_ext0 = (dy0 + 1) - (1.0 / 3.0);\n    dz_ext0 = (dz0 - 1) - (1.0 / 3.0);\n    xsv_ext0 = xsb + 1;\n    ysv_ext0 = ysb - 1;\n    zsv_ext0 = zsb + 1;\n  }\n  else\n  {\n    dx_ext0 = (dx0 - 1) - (1.0 / 3.0);\n    dy_ext0 = (dy0 - 1) - (1.0 / 3.0);\n    dz_ext0 = (dz0 + 1) - (1.0 / 3.0);\n    xsv_ext0 = xsb + 1;\n    ysv_ext0 = ysb + 1;\n    zsv_ext0 = zsb - 1;\n  }\n  dx_ext1 = dx0 - (2 * (1.0 / 3.0));\n  dy_ext1 = dy0 - (2 * (1.0 / 3.0));\n  dz_ext1 = dz0 - (2 * (1.0 / 3.0));\n  xsv_ext1 = xsb;\n  ysv_ext1 = ysb;\n  zsv_ext1 = zsb;\n  if ((c2 & 0x01) != 0)\n  {\n    dx_ext1 -= 2;\n    xsv_ext1 += 2;\n  }\n  else\n    if ((c2 & 0x02) != 0)\n  {\n    dy_ext1 -= 2;\n    ysv_ext1 += 2;\n  }\n  else\n  {\n    dz_ext1 -= 2;\n    zsv_ext1 += 2;\n  }\n  *dx_ext0_ref = dx_ext0;\n  *dy_ext0_ref = dy_ext0;\n  *dz_ext0_ref = dz_ext0;\n  *dx_ext1_ref = dx_ext1;\n  *dy_ext1_ref = dy_ext1;\n  *dz_ext1_ref = dz_ext1;\n  *xsv_ext0_ref = xsv_ext0;\n  *ysv_ext0_ref = ysv_ext0;\n  *zsv_ext0_ref = zsv_ext0;\n  *xsv_ext1_ref = xsv_ext1;\n  *ysv_ext1_ref = ysv_ext1;\n  *zsv_ext1_ref = zsv_ext1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dx_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsb",
                        "type": "int",
                        "definition": [
                            "int zsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx0",
                        "type": "double",
                        "definition": [
                            "double dx0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0",
                        "type": "double",
                        "definition": [
                            "double dy0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz0",
                        "type": "double",
                        "definition": [
                            "double dz0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t aPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aIsFurtherSide",
                        "type": "int",
                        "definition": [
                            "int aIsFurtherSide"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t bPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext0",
                        "type": "double",
                        "definition": [
                            "double dx_ext0 = *dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0",
                        "type": "double",
                        "definition": [
                            "double dy_ext0 = *dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0",
                        "type": "double",
                        "definition": [
                            "double dz_ext0 = *dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1",
                        "type": "double",
                        "definition": [
                            "double dx_ext1 = *dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1",
                        "type": "double",
                        "definition": [
                            "double dy_ext1 = *dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1",
                        "type": "double",
                        "definition": [
                            "double dz_ext1 = *dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0",
                        "type": "int",
                        "definition": [
                            "int xsv_ext0 = *xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0",
                        "type": "int",
                        "definition": [
                            "int ysv_ext0 = *ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0",
                        "type": "int",
                        "definition": [
                            "int zsv_ext0 = *zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1",
                        "type": "int",
                        "definition": [
                            "int xsv_ext1 = *xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1",
                        "type": "int",
                        "definition": [
                            "int ysv_ext1 = *ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1",
                        "type": "int",
                        "definition": [
                            "int zsv_ext1 = *zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c1",
                        "type": "int8_t",
                        "definition": [
                            "int8_t c1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c2",
                        "type": "int8_t",
                        "definition": [
                            "int8_t c2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_open_simplex_noise3_3_2",
            "header": "",
            "params": [
                "double * const dx_ext0_ref",
                "double * const dy_ext0_ref",
                "double * const dz_ext0_ref",
                "double * const dx_ext1_ref",
                "double * const dy_ext1_ref",
                "double * const dz_ext1_ref",
                "int * const xsv_ext0_ref",
                "int * const ysv_ext0_ref",
                "int * const zsv_ext0_ref",
                "int * const xsv_ext1_ref",
                "int * const ysv_ext1_ref",
                "int * const zsv_ext1_ref",
                "int xsb",
                "int ysb",
                "int zsb",
                "double dx0",
                "double dy0",
                "double dz0",
                "int8_t aPoint",
                "int aIsFurtherSide",
                "int8_t bPoint"
            ],
            "definition": "void helper_helper_open_simplex_noise3_3_2(double * const dx_ext0_ref, double * const dy_ext0_ref, double * const dz_ext0_ref, double * const dx_ext1_ref, double * const dy_ext1_ref, double * const dz_ext1_ref, int * const xsv_ext0_ref, int * const ysv_ext0_ref, int * const zsv_ext0_ref, int * const xsv_ext1_ref, int * const ysv_ext1_ref, int * const zsv_ext1_ref, int xsb, int ysb, int zsb, double dx0, double dy0, double dz0, int8_t aPoint, int aIsFurtherSide, int8_t bPoint)\n{\n  double dx_ext0 = *dx_ext0_ref;\n  double dy_ext0 = *dy_ext0_ref;\n  double dz_ext0 = *dz_ext0_ref;\n  double dx_ext1 = *dx_ext1_ref;\n  double dy_ext1 = *dy_ext1_ref;\n  double dz_ext1 = *dz_ext1_ref;\n  int xsv_ext0 = *xsv_ext0_ref;\n  int ysv_ext0 = *ysv_ext0_ref;\n  int zsv_ext0 = *zsv_ext0_ref;\n  int xsv_ext1 = *xsv_ext1_ref;\n  int ysv_ext1 = *ysv_ext1_ref;\n  int zsv_ext1 = *zsv_ext1_ref;\n  if (aIsFurtherSide)\n  {\n    helper_helper_helper_open_simplex_noise3_3_2_1(&dx_ext0, &dy_ext0, &dz_ext0, &dx_ext1, &dy_ext1, &dz_ext1, &xsv_ext0, &ysv_ext0, &zsv_ext0, &xsv_ext1, &ysv_ext1, &zsv_ext1, xsb, ysb, zsb, dx0, dy0, dz0, aPoint, bPoint);\n  }\n  else\n  {\n    helper_helper_helper_open_simplex_noise3_3_2_2(&dx_ext0, &dy_ext0, &dz_ext0, &dx_ext1, &dy_ext1, &dz_ext1, &xsv_ext0, &ysv_ext0, &zsv_ext0, &xsv_ext1, &ysv_ext1, &zsv_ext1, xsb, ysb, zsb, dx0, dy0, dz0, aPoint, bPoint);\n  }\n  *dx_ext0_ref = dx_ext0;\n  *dy_ext0_ref = dy_ext0;\n  *dz_ext0_ref = dz_ext0;\n  *dx_ext1_ref = dx_ext1;\n  *dy_ext1_ref = dy_ext1;\n  *dz_ext1_ref = dz_ext1;\n  *xsv_ext0_ref = xsv_ext0;\n  *ysv_ext0_ref = ysv_ext0;\n  *zsv_ext0_ref = zsv_ext0;\n  *xsv_ext1_ref = xsv_ext1;\n  *ysv_ext1_ref = ysv_ext1;\n  *zsv_ext1_ref = zsv_ext1;\n}\n\n",
            "calle": [
                "helper_helper_helper_open_simplex_noise3_3_2_1",
                "helper_helper_helper_open_simplex_noise3_3_2_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dx_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsb",
                        "type": "int",
                        "definition": [
                            "int zsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx0",
                        "type": "double",
                        "definition": [
                            "double dx0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0",
                        "type": "double",
                        "definition": [
                            "double dy0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz0",
                        "type": "double",
                        "definition": [
                            "double dz0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t aPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aIsFurtherSide",
                        "type": "int",
                        "definition": [
                            "int aIsFurtherSide"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t bPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext0",
                        "type": "double",
                        "definition": [
                            "double dx_ext0 = *dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0",
                        "type": "double",
                        "definition": [
                            "double dy_ext0 = *dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0",
                        "type": "double",
                        "definition": [
                            "double dz_ext0 = *dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1",
                        "type": "double",
                        "definition": [
                            "double dx_ext1 = *dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1",
                        "type": "double",
                        "definition": [
                            "double dy_ext1 = *dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1",
                        "type": "double",
                        "definition": [
                            "double dz_ext1 = *dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0",
                        "type": "int",
                        "definition": [
                            "int xsv_ext0 = *xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0",
                        "type": "int",
                        "definition": [
                            "int ysv_ext0 = *ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0",
                        "type": "int",
                        "definition": [
                            "int zsv_ext0 = *zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1",
                        "type": "int",
                        "definition": [
                            "int xsv_ext1 = *xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1",
                        "type": "int",
                        "definition": [
                            "int ysv_ext1 = *ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1",
                        "type": "int",
                        "definition": [
                            "int zsv_ext1 = *zsv_ext1_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_open_simplex_noise4_1_1",
            "header": "",
            "params": [
                "double * const dx_ext0_ref",
                "double * const dy_ext0_ref",
                "double * const dz_ext0_ref",
                "double * const dw_ext0_ref",
                "double * const dx_ext1_ref",
                "double * const dy_ext1_ref",
                "double * const dz_ext1_ref",
                "double * const dz_ext2_ref",
                "double * const dw_ext2_ref",
                "int * const xsv_ext0_ref",
                "int * const ysv_ext0_ref",
                "int * const zsv_ext0_ref",
                "int * const wsv_ext0_ref",
                "int * const xsv_ext1_ref",
                "int * const ysv_ext1_ref",
                "int * const zsv_ext1_ref",
                "int * const zsv_ext2_ref",
                "int * const wsv_ext2_ref",
                "int xsb",
                "int ysb",
                "int zsb",
                "int wsb",
                "double dx0",
                "double dy0",
                "double dz0",
                "double dw0",
                "int wsv_ext1",
                "int xsv_ext2",
                "double dw_ext1",
                "double dx_ext2",
                "double dy_ext2",
                "int ysv_ext2",
                "int8_t aPoint",
                "double aScore",
                "int8_t bPoint",
                "double bScore"
            ],
            "definition": "void helper_helper_open_simplex_noise4_1_1(double * const dx_ext0_ref, double * const dy_ext0_ref, double * const dz_ext0_ref, double * const dw_ext0_ref, double * const dx_ext1_ref, double * const dy_ext1_ref, double * const dz_ext1_ref, double * const dz_ext2_ref, double * const dw_ext2_ref, int * const xsv_ext0_ref, int * const ysv_ext0_ref, int * const zsv_ext0_ref, int * const wsv_ext0_ref, int * const xsv_ext1_ref, int * const ysv_ext1_ref, int * const zsv_ext1_ref, int * const zsv_ext2_ref, int * const wsv_ext2_ref, int xsb, int ysb, int zsb, int wsb, double dx0, double dy0, double dz0, double dw0, int wsv_ext1, int xsv_ext2, double dw_ext1, double dx_ext2, double dy_ext2, int ysv_ext2, int8_t aPoint, double aScore, int8_t bPoint, double bScore)\n{\n  double dx_ext0 = *dx_ext0_ref;\n  double dy_ext0 = *dy_ext0_ref;\n  double dz_ext0 = *dz_ext0_ref;\n  double dw_ext0 = *dw_ext0_ref;\n  double dx_ext1 = *dx_ext1_ref;\n  double dy_ext1 = *dy_ext1_ref;\n  double dz_ext1 = *dz_ext1_ref;\n  double dz_ext2 = *dz_ext2_ref;\n  double dw_ext2 = *dw_ext2_ref;\n  int xsv_ext0 = *xsv_ext0_ref;\n  int ysv_ext0 = *ysv_ext0_ref;\n  int zsv_ext0 = *zsv_ext0_ref;\n  int wsv_ext0 = *wsv_ext0_ref;\n  int xsv_ext1 = *xsv_ext1_ref;\n  int ysv_ext1 = *ysv_ext1_ref;\n  int zsv_ext1 = *zsv_ext1_ref;\n  int zsv_ext2 = *zsv_ext2_ref;\n  int wsv_ext2 = *wsv_ext2_ref;\n  int8_t c = (bScore > aScore) ? (bPoint) : (aPoint);\n  if ((c & 0x01) == 0)\n  {\n    xsv_ext0 = xsb - 1;\n    xsv_ext1 = (xsv_ext2 = xsb);\n    dx_ext0 = dx0 + 1;\n    dx_ext1 = (dx_ext2 = dx0);\n  }\n  else\n  {\n    xsv_ext0 = (xsv_ext1 = (xsv_ext2 = xsb + 1));\n    dx_ext0 = (dx_ext1 = (dx_ext2 = dx0 - 1));\n  }\n  if ((c & 0x02) == 0)\n  {\n    ysv_ext0 = (ysv_ext1 = (ysv_ext2 = ysb));\n    dy_ext0 = (dy_ext1 = (dy_ext2 = dy0));\n    if ((c & 0x01) == 0x01)\n    {\n      ysv_ext0 -= 1;\n      dy_ext0 += 1;\n    }\n    else\n    {\n      ysv_ext1 -= 1;\n      dy_ext1 += 1;\n    }\n  }\n  else\n  {\n    ysv_ext0 = (ysv_ext1 = (ysv_ext2 = ysb + 1));\n    dy_ext0 = (dy_ext1 = (dy_ext2 = dy0 - 1));\n  }\n  if ((c & 0x04) == 0)\n  {\n    zsv_ext0 = (zsv_ext1 = (zsv_ext2 = zsb));\n    dz_ext0 = (dz_ext1 = (dz_ext2 = dz0));\n    if ((c & 0x03) != 0)\n    {\n      if ((c & 0x03) == 0x03)\n      {\n        zsv_ext0 -= 1;\n        dz_ext0 += 1;\n      }\n      else\n      {\n        zsv_ext1 -= 1;\n        dz_ext1 += 1;\n      }\n    }\n    else\n    {\n      zsv_ext2 -= 1;\n      dz_ext2 += 1;\n    }\n  }\n  else\n  {\n    zsv_ext0 = (zsv_ext1 = (zsv_ext2 = zsb + 1));\n    dz_ext0 = (dz_ext1 = (dz_ext2 = dz0 - 1));\n  }\n  if ((c & 0x08) == 0)\n  {\n    wsv_ext0 = (wsv_ext1 = wsb);\n    wsv_ext2 = wsb - 1;\n    dw_ext0 = (dw_ext1 = dw0);\n    dw_ext2 = dw0 + 1;\n  }\n  else\n  {\n    wsv_ext0 = (wsv_ext1 = (wsv_ext2 = wsb + 1));\n    dw_ext0 = (dw_ext1 = (dw_ext2 = dw0 - 1));\n  }\n  *dx_ext0_ref = dx_ext0;\n  *dy_ext0_ref = dy_ext0;\n  *dz_ext0_ref = dz_ext0;\n  *dw_ext0_ref = dw_ext0;\n  *dx_ext1_ref = dx_ext1;\n  *dy_ext1_ref = dy_ext1;\n  *dz_ext1_ref = dz_ext1;\n  *dz_ext2_ref = dz_ext2;\n  *dw_ext2_ref = dw_ext2;\n  *xsv_ext0_ref = xsv_ext0;\n  *ysv_ext0_ref = ysv_ext0;\n  *zsv_ext0_ref = zsv_ext0;\n  *wsv_ext0_ref = wsv_ext0;\n  *xsv_ext1_ref = xsv_ext1;\n  *ysv_ext1_ref = ysv_ext1;\n  *zsv_ext1_ref = zsv_ext1;\n  *zsv_ext2_ref = zsv_ext2;\n  *wsv_ext2_ref = wsv_ext2;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dx_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsb",
                        "type": "int",
                        "definition": [
                            "int zsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsb",
                        "type": "int",
                        "definition": [
                            "int wsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx0",
                        "type": "double",
                        "definition": [
                            "double dx0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0",
                        "type": "double",
                        "definition": [
                            "double dy0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz0",
                        "type": "double",
                        "definition": [
                            "double dz0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw0",
                        "type": "double",
                        "definition": [
                            "double dw0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext1",
                        "type": "int",
                        "definition": [
                            "int wsv_ext1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext2",
                        "type": "int",
                        "definition": [
                            "int xsv_ext2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext1",
                        "type": "double",
                        "definition": [
                            "double dw_ext1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext2",
                        "type": "double",
                        "definition": [
                            "double dx_ext2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext2",
                        "type": "double",
                        "definition": [
                            "double dy_ext2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext2",
                        "type": "int",
                        "definition": [
                            "int ysv_ext2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t aPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aScore",
                        "type": "double",
                        "definition": [
                            "double aScore"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t bPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bScore",
                        "type": "double",
                        "definition": [
                            "double bScore"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext0",
                        "type": "double",
                        "definition": [
                            "double dx_ext0 = *dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0",
                        "type": "double",
                        "definition": [
                            "double dy_ext0 = *dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0",
                        "type": "double",
                        "definition": [
                            "double dz_ext0 = *dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext0",
                        "type": "double",
                        "definition": [
                            "double dw_ext0 = *dw_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1",
                        "type": "double",
                        "definition": [
                            "double dx_ext1 = *dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1",
                        "type": "double",
                        "definition": [
                            "double dy_ext1 = *dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1",
                        "type": "double",
                        "definition": [
                            "double dz_ext1 = *dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext2",
                        "type": "double",
                        "definition": [
                            "double dz_ext2 = *dz_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext2",
                        "type": "double",
                        "definition": [
                            "double dw_ext2 = *dw_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0",
                        "type": "int",
                        "definition": [
                            "int xsv_ext0 = *xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0",
                        "type": "int",
                        "definition": [
                            "int ysv_ext0 = *ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0",
                        "type": "int",
                        "definition": [
                            "int zsv_ext0 = *zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext0",
                        "type": "int",
                        "definition": [
                            "int wsv_ext0 = *wsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1",
                        "type": "int",
                        "definition": [
                            "int xsv_ext1 = *xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1",
                        "type": "int",
                        "definition": [
                            "int ysv_ext1 = *ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1",
                        "type": "int",
                        "definition": [
                            "int zsv_ext1 = *zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext2",
                        "type": "int",
                        "definition": [
                            "int zsv_ext2 = *zsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext2",
                        "type": "int",
                        "definition": [
                            "int wsv_ext2 = *wsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int8_t",
                        "definition": [
                            "int8_t c = (bScore > aScore) ? (bPoint) : (aPoint)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_open_simplex_noise4_1_2",
            "header": "",
            "params": [
                "double * const dx_ext0_ref",
                "double * const dy_ext0_ref",
                "double * const dz_ext0_ref",
                "double * const dw_ext0_ref",
                "double * const dx_ext1_ref",
                "double * const dy_ext1_ref",
                "double * const dz_ext1_ref",
                "double * const dw_ext1_ref",
                "double * const dx_ext2_ref",
                "double * const dy_ext2_ref",
                "double * const dz_ext2_ref",
                "double * const dw_ext2_ref",
                "int * const xsv_ext0_ref",
                "int * const ysv_ext0_ref",
                "int * const zsv_ext0_ref",
                "int * const wsv_ext0_ref",
                "int * const xsv_ext1_ref",
                "int * const ysv_ext1_ref",
                "int * const zsv_ext1_ref",
                "int * const ysv_ext2_ref",
                "int * const zsv_ext2_ref",
                "int * const wsv_ext2_ref",
                "int xsb",
                "int ysb",
                "int zsb",
                "int wsb",
                "double dx0",
                "double dy0",
                "double dz0",
                "double dw0",
                "int wsv_ext1",
                "int xsv_ext2",
                "int8_t aPoint",
                "int8_t bPoint"
            ],
            "definition": "void helper_helper_open_simplex_noise4_1_2(double * const dx_ext0_ref, double * const dy_ext0_ref, double * const dz_ext0_ref, double * const dw_ext0_ref, double * const dx_ext1_ref, double * const dy_ext1_ref, double * const dz_ext1_ref, double * const dw_ext1_ref, double * const dx_ext2_ref, double * const dy_ext2_ref, double * const dz_ext2_ref, double * const dw_ext2_ref, int * const xsv_ext0_ref, int * const ysv_ext0_ref, int * const zsv_ext0_ref, int * const wsv_ext0_ref, int * const xsv_ext1_ref, int * const ysv_ext1_ref, int * const zsv_ext1_ref, int * const ysv_ext2_ref, int * const zsv_ext2_ref, int * const wsv_ext2_ref, int xsb, int ysb, int zsb, int wsb, double dx0, double dy0, double dz0, double dw0, int wsv_ext1, int xsv_ext2, int8_t aPoint, int8_t bPoint)\n{\n  double dx_ext0 = *dx_ext0_ref;\n  double dy_ext0 = *dy_ext0_ref;\n  double dz_ext0 = *dz_ext0_ref;\n  double dw_ext0 = *dw_ext0_ref;\n  double dx_ext1 = *dx_ext1_ref;\n  double dy_ext1 = *dy_ext1_ref;\n  double dz_ext1 = *dz_ext1_ref;\n  double dw_ext1 = *dw_ext1_ref;\n  double dx_ext2 = *dx_ext2_ref;\n  double dy_ext2 = *dy_ext2_ref;\n  double dz_ext2 = *dz_ext2_ref;\n  double dw_ext2 = *dw_ext2_ref;\n  int xsv_ext0 = *xsv_ext0_ref;\n  int ysv_ext0 = *ysv_ext0_ref;\n  int zsv_ext0 = *zsv_ext0_ref;\n  int wsv_ext0 = *wsv_ext0_ref;\n  int xsv_ext1 = *xsv_ext1_ref;\n  int ysv_ext1 = *ysv_ext1_ref;\n  int zsv_ext1 = *zsv_ext1_ref;\n  int ysv_ext2 = *ysv_ext2_ref;\n  int zsv_ext2 = *zsv_ext2_ref;\n  int wsv_ext2 = *wsv_ext2_ref;\n  int8_t c = (int8_t) (aPoint | bPoint);\n  if ((c & 0x01) == 0)\n  {\n    xsv_ext0 = (xsv_ext2 = xsb);\n    xsv_ext1 = xsb - 1;\n    dx_ext0 = dx0 - (2 * 0.309016994374947);\n    dx_ext1 = (dx0 + 1) - 0.309016994374947;\n    dx_ext2 = dx0 - 0.309016994374947;\n  }\n  else\n  {\n    xsv_ext0 = (xsv_ext1 = (xsv_ext2 = xsb + 1));\n    dx_ext0 = (dx0 - 1) - (2 * 0.309016994374947);\n    dx_ext1 = (dx_ext2 = (dx0 - 1) - 0.309016994374947);\n  }\n  if ((c & 0x02) == 0)\n  {\n    ysv_ext0 = (ysv_ext1 = (ysv_ext2 = ysb));\n    dy_ext0 = dy0 - (2 * 0.309016994374947);\n    dy_ext1 = (dy_ext2 = dy0 - 0.309016994374947);\n    if ((c & 0x01) == 0x01)\n    {\n      ysv_ext1 -= 1;\n      dy_ext1 += 1;\n    }\n    else\n    {\n      ysv_ext2 -= 1;\n      dy_ext2 += 1;\n    }\n  }\n  else\n  {\n    ysv_ext0 = (ysv_ext1 = (ysv_ext2 = ysb + 1));\n    dy_ext0 = (dy0 - 1) - (2 * 0.309016994374947);\n    dy_ext1 = (dy_ext2 = (dy0 - 1) - 0.309016994374947);\n  }\n  if ((c & 0x04) == 0)\n  {\n    zsv_ext0 = (zsv_ext1 = (zsv_ext2 = zsb));\n    dz_ext0 = dz0 - (2 * 0.309016994374947);\n    dz_ext1 = (dz_ext2 = dz0 - 0.309016994374947);\n    if ((c & 0x03) == 0x03)\n    {\n      zsv_ext1 -= 1;\n      dz_ext1 += 1;\n    }\n    else\n    {\n      zsv_ext2 -= 1;\n      dz_ext2 += 1;\n    }\n  }\n  else\n  {\n    zsv_ext0 = (zsv_ext1 = (zsv_ext2 = zsb + 1));\n    dz_ext0 = (dz0 - 1) - (2 * 0.309016994374947);\n    dz_ext1 = (dz_ext2 = (dz0 - 1) - 0.309016994374947);\n  }\n  if ((c & 0x08) == 0)\n  {\n    wsv_ext0 = (wsv_ext1 = wsb);\n    wsv_ext2 = wsb - 1;\n    dw_ext0 = dw0 - (2 * 0.309016994374947);\n    dw_ext1 = dw0 - 0.309016994374947;\n    dw_ext2 = (dw0 + 1) - 0.309016994374947;\n  }\n  else\n  {\n    wsv_ext0 = (wsv_ext1 = (wsv_ext2 = wsb + 1));\n    dw_ext0 = (dw0 - 1) - (2 * 0.309016994374947);\n    dw_ext1 = (dw_ext2 = (dw0 - 1) - 0.309016994374947);\n  }\n  *dx_ext0_ref = dx_ext0;\n  *dy_ext0_ref = dy_ext0;\n  *dz_ext0_ref = dz_ext0;\n  *dw_ext0_ref = dw_ext0;\n  *dx_ext1_ref = dx_ext1;\n  *dy_ext1_ref = dy_ext1;\n  *dz_ext1_ref = dz_ext1;\n  *dw_ext1_ref = dw_ext1;\n  *dx_ext2_ref = dx_ext2;\n  *dy_ext2_ref = dy_ext2;\n  *dz_ext2_ref = dz_ext2;\n  *dw_ext2_ref = dw_ext2;\n  *xsv_ext0_ref = xsv_ext0;\n  *ysv_ext0_ref = ysv_ext0;\n  *zsv_ext0_ref = zsv_ext0;\n  *wsv_ext0_ref = wsv_ext0;\n  *xsv_ext1_ref = xsv_ext1;\n  *ysv_ext1_ref = ysv_ext1;\n  *zsv_ext1_ref = zsv_ext1;\n  *ysv_ext2_ref = ysv_ext2;\n  *zsv_ext2_ref = zsv_ext2;\n  *wsv_ext2_ref = wsv_ext2;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dx_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsb",
                        "type": "int",
                        "definition": [
                            "int zsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsb",
                        "type": "int",
                        "definition": [
                            "int wsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx0",
                        "type": "double",
                        "definition": [
                            "double dx0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0",
                        "type": "double",
                        "definition": [
                            "double dy0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz0",
                        "type": "double",
                        "definition": [
                            "double dz0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw0",
                        "type": "double",
                        "definition": [
                            "double dw0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext1",
                        "type": "int",
                        "definition": [
                            "int wsv_ext1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext2",
                        "type": "int",
                        "definition": [
                            "int xsv_ext2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t aPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t bPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext0",
                        "type": "double",
                        "definition": [
                            "double dx_ext0 = *dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0",
                        "type": "double",
                        "definition": [
                            "double dy_ext0 = *dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0",
                        "type": "double",
                        "definition": [
                            "double dz_ext0 = *dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext0",
                        "type": "double",
                        "definition": [
                            "double dw_ext0 = *dw_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1",
                        "type": "double",
                        "definition": [
                            "double dx_ext1 = *dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1",
                        "type": "double",
                        "definition": [
                            "double dy_ext1 = *dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1",
                        "type": "double",
                        "definition": [
                            "double dz_ext1 = *dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext1",
                        "type": "double",
                        "definition": [
                            "double dw_ext1 = *dw_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext2",
                        "type": "double",
                        "definition": [
                            "double dx_ext2 = *dx_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext2",
                        "type": "double",
                        "definition": [
                            "double dy_ext2 = *dy_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext2",
                        "type": "double",
                        "definition": [
                            "double dz_ext2 = *dz_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext2",
                        "type": "double",
                        "definition": [
                            "double dw_ext2 = *dw_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0",
                        "type": "int",
                        "definition": [
                            "int xsv_ext0 = *xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0",
                        "type": "int",
                        "definition": [
                            "int ysv_ext0 = *ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0",
                        "type": "int",
                        "definition": [
                            "int zsv_ext0 = *zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext0",
                        "type": "int",
                        "definition": [
                            "int wsv_ext0 = *wsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1",
                        "type": "int",
                        "definition": [
                            "int xsv_ext1 = *xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1",
                        "type": "int",
                        "definition": [
                            "int ysv_ext1 = *ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1",
                        "type": "int",
                        "definition": [
                            "int zsv_ext1 = *zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext2",
                        "type": "int",
                        "definition": [
                            "int ysv_ext2 = *ysv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext2",
                        "type": "int",
                        "definition": [
                            "int zsv_ext2 = *zsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext2",
                        "type": "int",
                        "definition": [
                            "int wsv_ext2 = *wsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int8_t",
                        "definition": [
                            "int8_t c = (int8_t) (aPoint | bPoint)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_open_simplex_noise4_2_1",
            "header": "",
            "params": [
                "double * const dx_ext0_ref",
                "double * const dy_ext0_ref",
                "double * const dz_ext0_ref",
                "double * const dw_ext0_ref",
                "double * const dx_ext1_ref",
                "double * const dy_ext1_ref",
                "double * const dz_ext1_ref",
                "double * const dz_ext2_ref",
                "double * const dw_ext2_ref",
                "int * const xsv_ext0_ref",
                "int * const ysv_ext0_ref",
                "int * const zsv_ext0_ref",
                "int * const wsv_ext0_ref",
                "int * const xsv_ext1_ref",
                "int * const ysv_ext1_ref",
                "int * const zsv_ext1_ref",
                "int * const zsv_ext2_ref",
                "int * const wsv_ext2_ref",
                "int xsb",
                "int ysb",
                "int zsb",
                "int wsb",
                "int wsv_ext1",
                "int xsv_ext2",
                "double dx0",
                "double dy0",
                "double dz0",
                "double dw0",
                "double dw_ext1",
                "double dx_ext2",
                "double dy_ext2",
                "int ysv_ext2",
                "int8_t aPoint",
                "double aScore",
                "int8_t bPoint",
                "double bScore"
            ],
            "definition": "void helper_helper_open_simplex_noise4_2_1(double * const dx_ext0_ref, double * const dy_ext0_ref, double * const dz_ext0_ref, double * const dw_ext0_ref, double * const dx_ext1_ref, double * const dy_ext1_ref, double * const dz_ext1_ref, double * const dz_ext2_ref, double * const dw_ext2_ref, int * const xsv_ext0_ref, int * const ysv_ext0_ref, int * const zsv_ext0_ref, int * const wsv_ext0_ref, int * const xsv_ext1_ref, int * const ysv_ext1_ref, int * const zsv_ext1_ref, int * const zsv_ext2_ref, int * const wsv_ext2_ref, int xsb, int ysb, int zsb, int wsb, int wsv_ext1, int xsv_ext2, double dx0, double dy0, double dz0, double dw0, double dw_ext1, double dx_ext2, double dy_ext2, int ysv_ext2, int8_t aPoint, double aScore, int8_t bPoint, double bScore)\n{\n  double dx_ext0 = *dx_ext0_ref;\n  double dy_ext0 = *dy_ext0_ref;\n  double dz_ext0 = *dz_ext0_ref;\n  double dw_ext0 = *dw_ext0_ref;\n  double dx_ext1 = *dx_ext1_ref;\n  double dy_ext1 = *dy_ext1_ref;\n  double dz_ext1 = *dz_ext1_ref;\n  double dz_ext2 = *dz_ext2_ref;\n  double dw_ext2 = *dw_ext2_ref;\n  int xsv_ext0 = *xsv_ext0_ref;\n  int ysv_ext0 = *ysv_ext0_ref;\n  int zsv_ext0 = *zsv_ext0_ref;\n  int wsv_ext0 = *wsv_ext0_ref;\n  int xsv_ext1 = *xsv_ext1_ref;\n  int ysv_ext1 = *ysv_ext1_ref;\n  int zsv_ext1 = *zsv_ext1_ref;\n  int zsv_ext2 = *zsv_ext2_ref;\n  int wsv_ext2 = *wsv_ext2_ref;\n  int8_t c = (bScore < aScore) ? (bPoint) : (aPoint);\n  if ((c & 0x01) != 0)\n  {\n    xsv_ext0 = xsb + 2;\n    xsv_ext1 = (xsv_ext2 = xsb + 1);\n    dx_ext0 = (dx0 - 2) - (4 * 0.309016994374947);\n    dx_ext1 = (dx_ext2 = (dx0 - 1) - (4 * 0.309016994374947));\n  }\n  else\n  {\n    xsv_ext0 = (xsv_ext1 = (xsv_ext2 = xsb));\n    dx_ext0 = (dx_ext1 = (dx_ext2 = dx0 - (4 * 0.309016994374947)));\n  }\n  if ((c & 0x02) != 0)\n  {\n    ysv_ext0 = (ysv_ext1 = (ysv_ext2 = ysb + 1));\n    dy_ext0 = (dy_ext1 = (dy_ext2 = (dy0 - 1) - (4 * 0.309016994374947)));\n    if ((c & 0x01) != 0)\n    {\n      ysv_ext1 += 1;\n      dy_ext1 -= 1;\n    }\n    else\n    {\n      ysv_ext0 += 1;\n      dy_ext0 -= 1;\n    }\n  }\n  else\n  {\n    ysv_ext0 = (ysv_ext1 = (ysv_ext2 = ysb));\n    dy_ext0 = (dy_ext1 = (dy_ext2 = dy0 - (4 * 0.309016994374947)));\n  }\n  if ((c & 0x04) != 0)\n  {\n    zsv_ext0 = (zsv_ext1 = (zsv_ext2 = zsb + 1));\n    dz_ext0 = (dz_ext1 = (dz_ext2 = (dz0 - 1) - (4 * 0.309016994374947)));\n    if ((c & 0x03) != 0x03)\n    {\n      if ((c & 0x03) == 0)\n      {\n        zsv_ext0 += 1;\n        dz_ext0 -= 1;\n      }\n      else\n      {\n        zsv_ext1 += 1;\n        dz_ext1 -= 1;\n      }\n    }\n    else\n    {\n      zsv_ext2 += 1;\n      dz_ext2 -= 1;\n    }\n  }\n  else\n  {\n    zsv_ext0 = (zsv_ext1 = (zsv_ext2 = zsb));\n    dz_ext0 = (dz_ext1 = (dz_ext2 = dz0 - (4 * 0.309016994374947)));\n  }\n  if ((c & 0x08) != 0)\n  {\n    wsv_ext0 = (wsv_ext1 = wsb + 1);\n    wsv_ext2 = wsb + 2;\n    dw_ext0 = (dw_ext1 = (dw0 - 1) - (4 * 0.309016994374947));\n    dw_ext2 = (dw0 - 2) - (4 * 0.309016994374947);\n  }\n  else\n  {\n    wsv_ext0 = (wsv_ext1 = (wsv_ext2 = wsb));\n    dw_ext0 = (dw_ext1 = (dw_ext2 = dw0 - (4 * 0.309016994374947)));\n  }\n  *dx_ext0_ref = dx_ext0;\n  *dy_ext0_ref = dy_ext0;\n  *dz_ext0_ref = dz_ext0;\n  *dw_ext0_ref = dw_ext0;\n  *dx_ext1_ref = dx_ext1;\n  *dy_ext1_ref = dy_ext1;\n  *dz_ext1_ref = dz_ext1;\n  *dz_ext2_ref = dz_ext2;\n  *dw_ext2_ref = dw_ext2;\n  *xsv_ext0_ref = xsv_ext0;\n  *ysv_ext0_ref = ysv_ext0;\n  *zsv_ext0_ref = zsv_ext0;\n  *wsv_ext0_ref = wsv_ext0;\n  *xsv_ext1_ref = xsv_ext1;\n  *ysv_ext1_ref = ysv_ext1;\n  *zsv_ext1_ref = zsv_ext1;\n  *zsv_ext2_ref = zsv_ext2;\n  *wsv_ext2_ref = wsv_ext2;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dx_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsb",
                        "type": "int",
                        "definition": [
                            "int zsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsb",
                        "type": "int",
                        "definition": [
                            "int wsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext1",
                        "type": "int",
                        "definition": [
                            "int wsv_ext1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext2",
                        "type": "int",
                        "definition": [
                            "int xsv_ext2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx0",
                        "type": "double",
                        "definition": [
                            "double dx0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0",
                        "type": "double",
                        "definition": [
                            "double dy0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz0",
                        "type": "double",
                        "definition": [
                            "double dz0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw0",
                        "type": "double",
                        "definition": [
                            "double dw0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext1",
                        "type": "double",
                        "definition": [
                            "double dw_ext1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext2",
                        "type": "double",
                        "definition": [
                            "double dx_ext2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext2",
                        "type": "double",
                        "definition": [
                            "double dy_ext2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext2",
                        "type": "int",
                        "definition": [
                            "int ysv_ext2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t aPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aScore",
                        "type": "double",
                        "definition": [
                            "double aScore"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t bPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bScore",
                        "type": "double",
                        "definition": [
                            "double bScore"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext0",
                        "type": "double",
                        "definition": [
                            "double dx_ext0 = *dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0",
                        "type": "double",
                        "definition": [
                            "double dy_ext0 = *dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0",
                        "type": "double",
                        "definition": [
                            "double dz_ext0 = *dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext0",
                        "type": "double",
                        "definition": [
                            "double dw_ext0 = *dw_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1",
                        "type": "double",
                        "definition": [
                            "double dx_ext1 = *dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1",
                        "type": "double",
                        "definition": [
                            "double dy_ext1 = *dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1",
                        "type": "double",
                        "definition": [
                            "double dz_ext1 = *dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext2",
                        "type": "double",
                        "definition": [
                            "double dz_ext2 = *dz_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext2",
                        "type": "double",
                        "definition": [
                            "double dw_ext2 = *dw_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0",
                        "type": "int",
                        "definition": [
                            "int xsv_ext0 = *xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0",
                        "type": "int",
                        "definition": [
                            "int ysv_ext0 = *ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0",
                        "type": "int",
                        "definition": [
                            "int zsv_ext0 = *zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext0",
                        "type": "int",
                        "definition": [
                            "int wsv_ext0 = *wsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1",
                        "type": "int",
                        "definition": [
                            "int xsv_ext1 = *xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1",
                        "type": "int",
                        "definition": [
                            "int ysv_ext1 = *ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1",
                        "type": "int",
                        "definition": [
                            "int zsv_ext1 = *zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext2",
                        "type": "int",
                        "definition": [
                            "int zsv_ext2 = *zsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext2",
                        "type": "int",
                        "definition": [
                            "int wsv_ext2 = *wsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int8_t",
                        "definition": [
                            "int8_t c = (bScore < aScore) ? (bPoint) : (aPoint)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_open_simplex_noise4_2_2",
            "header": "",
            "params": [
                "double * const dx_ext0_ref",
                "double * const dy_ext0_ref",
                "double * const dz_ext0_ref",
                "double * const dw_ext0_ref",
                "double * const dx_ext1_ref",
                "double * const dy_ext1_ref",
                "double * const dz_ext1_ref",
                "double * const dw_ext1_ref",
                "double * const dx_ext2_ref",
                "double * const dy_ext2_ref",
                "double * const dz_ext2_ref",
                "double * const dw_ext2_ref",
                "int * const xsv_ext0_ref",
                "int * const ysv_ext0_ref",
                "int * const zsv_ext0_ref",
                "int * const wsv_ext0_ref",
                "int * const xsv_ext1_ref",
                "int * const ysv_ext1_ref",
                "int * const zsv_ext1_ref",
                "int * const ysv_ext2_ref",
                "int * const zsv_ext2_ref",
                "int * const wsv_ext2_ref",
                "int xsb",
                "int ysb",
                "int zsb",
                "int wsb",
                "int wsv_ext1",
                "int xsv_ext2",
                "double dx0",
                "double dy0",
                "double dz0",
                "double dw0",
                "int8_t aPoint",
                "int8_t bPoint"
            ],
            "definition": "void helper_helper_open_simplex_noise4_2_2(double * const dx_ext0_ref, double * const dy_ext0_ref, double * const dz_ext0_ref, double * const dw_ext0_ref, double * const dx_ext1_ref, double * const dy_ext1_ref, double * const dz_ext1_ref, double * const dw_ext1_ref, double * const dx_ext2_ref, double * const dy_ext2_ref, double * const dz_ext2_ref, double * const dw_ext2_ref, int * const xsv_ext0_ref, int * const ysv_ext0_ref, int * const zsv_ext0_ref, int * const wsv_ext0_ref, int * const xsv_ext1_ref, int * const ysv_ext1_ref, int * const zsv_ext1_ref, int * const ysv_ext2_ref, int * const zsv_ext2_ref, int * const wsv_ext2_ref, int xsb, int ysb, int zsb, int wsb, int wsv_ext1, int xsv_ext2, double dx0, double dy0, double dz0, double dw0, int8_t aPoint, int8_t bPoint)\n{\n  double dx_ext0 = *dx_ext0_ref;\n  double dy_ext0 = *dy_ext0_ref;\n  double dz_ext0 = *dz_ext0_ref;\n  double dw_ext0 = *dw_ext0_ref;\n  double dx_ext1 = *dx_ext1_ref;\n  double dy_ext1 = *dy_ext1_ref;\n  double dz_ext1 = *dz_ext1_ref;\n  double dw_ext1 = *dw_ext1_ref;\n  double dx_ext2 = *dx_ext2_ref;\n  double dy_ext2 = *dy_ext2_ref;\n  double dz_ext2 = *dz_ext2_ref;\n  double dw_ext2 = *dw_ext2_ref;\n  int xsv_ext0 = *xsv_ext0_ref;\n  int ysv_ext0 = *ysv_ext0_ref;\n  int zsv_ext0 = *zsv_ext0_ref;\n  int wsv_ext0 = *wsv_ext0_ref;\n  int xsv_ext1 = *xsv_ext1_ref;\n  int ysv_ext1 = *ysv_ext1_ref;\n  int zsv_ext1 = *zsv_ext1_ref;\n  int ysv_ext2 = *ysv_ext2_ref;\n  int zsv_ext2 = *zsv_ext2_ref;\n  int wsv_ext2 = *wsv_ext2_ref;\n  int8_t c = (int8_t) (aPoint & bPoint);\n  if ((c & 0x01) != 0)\n  {\n    xsv_ext0 = (xsv_ext2 = xsb + 1);\n    xsv_ext1 = xsb + 2;\n    dx_ext0 = (dx0 - 1) - (2 * 0.309016994374947);\n    dx_ext1 = (dx0 - 2) - (3 * 0.309016994374947);\n    dx_ext2 = (dx0 - 1) - (3 * 0.309016994374947);\n  }\n  else\n  {\n    xsv_ext0 = (xsv_ext1 = (xsv_ext2 = xsb));\n    dx_ext0 = dx0 - (2 * 0.309016994374947);\n    dx_ext1 = (dx_ext2 = dx0 - (3 * 0.309016994374947));\n  }\n  if ((c & 0x02) != 0)\n  {\n    ysv_ext0 = (ysv_ext1 = (ysv_ext2 = ysb + 1));\n    dy_ext0 = (dy0 - 1) - (2 * 0.309016994374947);\n    dy_ext1 = (dy_ext2 = (dy0 - 1) - (3 * 0.309016994374947));\n    if ((c & 0x01) != 0)\n    {\n      ysv_ext2 += 1;\n      dy_ext2 -= 1;\n    }\n    else\n    {\n      ysv_ext1 += 1;\n      dy_ext1 -= 1;\n    }\n  }\n  else\n  {\n    ysv_ext0 = (ysv_ext1 = (ysv_ext2 = ysb));\n    dy_ext0 = dy0 - (2 * 0.309016994374947);\n    dy_ext1 = (dy_ext2 = dy0 - (3 * 0.309016994374947));\n  }\n  if ((c & 0x04) != 0)\n  {\n    zsv_ext0 = (zsv_ext1 = (zsv_ext2 = zsb + 1));\n    dz_ext0 = (dz0 - 1) - (2 * 0.309016994374947);\n    dz_ext1 = (dz_ext2 = (dz0 - 1) - (3 * 0.309016994374947));\n    if ((c & 0x03) != 0)\n    {\n      zsv_ext2 += 1;\n      dz_ext2 -= 1;\n    }\n    else\n    {\n      zsv_ext1 += 1;\n      dz_ext1 -= 1;\n    }\n  }\n  else\n  {\n    zsv_ext0 = (zsv_ext1 = (zsv_ext2 = zsb));\n    dz_ext0 = dz0 - (2 * 0.309016994374947);\n    dz_ext1 = (dz_ext2 = dz0 - (3 * 0.309016994374947));\n  }\n  if ((c & 0x08) != 0)\n  {\n    wsv_ext0 = (wsv_ext1 = wsb + 1);\n    wsv_ext2 = wsb + 2;\n    dw_ext0 = (dw0 - 1) - (2 * 0.309016994374947);\n    dw_ext1 = (dw0 - 1) - (3 * 0.309016994374947);\n    dw_ext2 = (dw0 - 2) - (3 * 0.309016994374947);\n  }\n  else\n  {\n    wsv_ext0 = (wsv_ext1 = (wsv_ext2 = wsb));\n    dw_ext0 = dw0 - (2 * 0.309016994374947);\n    dw_ext1 = (dw_ext2 = dw0 - (3 * 0.309016994374947));\n  }\n  *dx_ext0_ref = dx_ext0;\n  *dy_ext0_ref = dy_ext0;\n  *dz_ext0_ref = dz_ext0;\n  *dw_ext0_ref = dw_ext0;\n  *dx_ext1_ref = dx_ext1;\n  *dy_ext1_ref = dy_ext1;\n  *dz_ext1_ref = dz_ext1;\n  *dw_ext1_ref = dw_ext1;\n  *dx_ext2_ref = dx_ext2;\n  *dy_ext2_ref = dy_ext2;\n  *dz_ext2_ref = dz_ext2;\n  *dw_ext2_ref = dw_ext2;\n  *xsv_ext0_ref = xsv_ext0;\n  *ysv_ext0_ref = ysv_ext0;\n  *zsv_ext0_ref = zsv_ext0;\n  *wsv_ext0_ref = wsv_ext0;\n  *xsv_ext1_ref = xsv_ext1;\n  *ysv_ext1_ref = ysv_ext1;\n  *zsv_ext1_ref = zsv_ext1;\n  *ysv_ext2_ref = ysv_ext2;\n  *zsv_ext2_ref = zsv_ext2;\n  *wsv_ext2_ref = wsv_ext2;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dx_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsb",
                        "type": "int",
                        "definition": [
                            "int zsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsb",
                        "type": "int",
                        "definition": [
                            "int wsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext1",
                        "type": "int",
                        "definition": [
                            "int wsv_ext1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext2",
                        "type": "int",
                        "definition": [
                            "int xsv_ext2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx0",
                        "type": "double",
                        "definition": [
                            "double dx0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0",
                        "type": "double",
                        "definition": [
                            "double dy0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz0",
                        "type": "double",
                        "definition": [
                            "double dz0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw0",
                        "type": "double",
                        "definition": [
                            "double dw0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t aPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t bPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext0",
                        "type": "double",
                        "definition": [
                            "double dx_ext0 = *dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0",
                        "type": "double",
                        "definition": [
                            "double dy_ext0 = *dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0",
                        "type": "double",
                        "definition": [
                            "double dz_ext0 = *dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext0",
                        "type": "double",
                        "definition": [
                            "double dw_ext0 = *dw_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1",
                        "type": "double",
                        "definition": [
                            "double dx_ext1 = *dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1",
                        "type": "double",
                        "definition": [
                            "double dy_ext1 = *dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1",
                        "type": "double",
                        "definition": [
                            "double dz_ext1 = *dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext1",
                        "type": "double",
                        "definition": [
                            "double dw_ext1 = *dw_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext2",
                        "type": "double",
                        "definition": [
                            "double dx_ext2 = *dx_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext2",
                        "type": "double",
                        "definition": [
                            "double dy_ext2 = *dy_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext2",
                        "type": "double",
                        "definition": [
                            "double dz_ext2 = *dz_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext2",
                        "type": "double",
                        "definition": [
                            "double dw_ext2 = *dw_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0",
                        "type": "int",
                        "definition": [
                            "int xsv_ext0 = *xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0",
                        "type": "int",
                        "definition": [
                            "int ysv_ext0 = *ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0",
                        "type": "int",
                        "definition": [
                            "int zsv_ext0 = *zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext0",
                        "type": "int",
                        "definition": [
                            "int wsv_ext0 = *wsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1",
                        "type": "int",
                        "definition": [
                            "int xsv_ext1 = *xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1",
                        "type": "int",
                        "definition": [
                            "int ysv_ext1 = *ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1",
                        "type": "int",
                        "definition": [
                            "int zsv_ext1 = *zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext2",
                        "type": "int",
                        "definition": [
                            "int ysv_ext2 = *ysv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext2",
                        "type": "int",
                        "definition": [
                            "int zsv_ext2 = *zsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext2",
                        "type": "int",
                        "definition": [
                            "int wsv_ext2 = *wsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int8_t",
                        "definition": [
                            "int8_t c = (int8_t) (aPoint & bPoint)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_open_simplex_noise4_3_1",
            "header": "",
            "params": [
                "double * const dx_ext0_ref",
                "double * const dy_ext0_ref",
                "double * const dz_ext0_ref",
                "double * const dw_ext0_ref",
                "double * const dx_ext1_ref",
                "double * const dy_ext1_ref",
                "double * const dz_ext1_ref",
                "double * const dw_ext1_ref",
                "double * const dx_ext2_ref",
                "double * const dy_ext2_ref",
                "double * const dz_ext2_ref",
                "double * const dw_ext2_ref",
                "int * const xsv_ext0_ref",
                "int * const ysv_ext0_ref",
                "int * const zsv_ext0_ref",
                "int * const wsv_ext0_ref",
                "int * const xsv_ext1_ref",
                "int * const ysv_ext1_ref",
                "int * const zsv_ext1_ref",
                "int * const wsv_ext1_ref",
                "int * const xsv_ext2_ref",
                "int * const ysv_ext2_ref",
                "int * const zsv_ext2_ref",
                "int * const wsv_ext2_ref",
                "int xsb",
                "int ysb",
                "int zsb",
                "int wsb",
                "double dx0",
                "double dy0",
                "double dz0",
                "double dw0",
                "int8_t aPoint",
                "int aIsBiggerSide",
                "int8_t bPoint"
            ],
            "definition": "void helper_helper_open_simplex_noise4_3_1(double * const dx_ext0_ref, double * const dy_ext0_ref, double * const dz_ext0_ref, double * const dw_ext0_ref, double * const dx_ext1_ref, double * const dy_ext1_ref, double * const dz_ext1_ref, double * const dw_ext1_ref, double * const dx_ext2_ref, double * const dy_ext2_ref, double * const dz_ext2_ref, double * const dw_ext2_ref, int * const xsv_ext0_ref, int * const ysv_ext0_ref, int * const zsv_ext0_ref, int * const wsv_ext0_ref, int * const xsv_ext1_ref, int * const ysv_ext1_ref, int * const zsv_ext1_ref, int * const wsv_ext1_ref, int * const xsv_ext2_ref, int * const ysv_ext2_ref, int * const zsv_ext2_ref, int * const wsv_ext2_ref, int xsb, int ysb, int zsb, int wsb, double dx0, double dy0, double dz0, double dw0, int8_t aPoint, int aIsBiggerSide, int8_t bPoint)\n{\n  double dx_ext0 = *dx_ext0_ref;\n  double dy_ext0 = *dy_ext0_ref;\n  double dz_ext0 = *dz_ext0_ref;\n  double dw_ext0 = *dw_ext0_ref;\n  double dx_ext1 = *dx_ext1_ref;\n  double dy_ext1 = *dy_ext1_ref;\n  double dz_ext1 = *dz_ext1_ref;\n  double dw_ext1 = *dw_ext1_ref;\n  double dx_ext2 = *dx_ext2_ref;\n  double dy_ext2 = *dy_ext2_ref;\n  double dz_ext2 = *dz_ext2_ref;\n  double dw_ext2 = *dw_ext2_ref;\n  int xsv_ext0 = *xsv_ext0_ref;\n  int ysv_ext0 = *ysv_ext0_ref;\n  int zsv_ext0 = *zsv_ext0_ref;\n  int wsv_ext0 = *wsv_ext0_ref;\n  int xsv_ext1 = *xsv_ext1_ref;\n  int ysv_ext1 = *ysv_ext1_ref;\n  int zsv_ext1 = *zsv_ext1_ref;\n  int wsv_ext1 = *wsv_ext1_ref;\n  int xsv_ext2 = *xsv_ext2_ref;\n  int ysv_ext2 = *ysv_ext2_ref;\n  int zsv_ext2 = *zsv_ext2_ref;\n  int wsv_ext2 = *wsv_ext2_ref;\n  int8_t c1;\n  int8_t c2;\n  if (aIsBiggerSide)\n  {\n    c1 = aPoint;\n    c2 = bPoint;\n  }\n  else\n  {\n    c1 = bPoint;\n    c2 = aPoint;\n  }\n  if ((c1 & 0x01) != 0)\n  {\n    xsv_ext0 = xsb + 2;\n    xsv_ext1 = xsb + 1;\n    dx_ext0 = (dx0 - 2) - (3 * 0.309016994374947);\n    dx_ext1 = (dx0 - 1) - (3 * 0.309016994374947);\n  }\n  else\n  {\n    xsv_ext0 = (xsv_ext1 = xsb);\n    dx_ext0 = (dx_ext1 = dx0 - (3 * 0.309016994374947));\n  }\n  if ((c1 & 0x02) != 0)\n  {\n    ysv_ext0 = (ysv_ext1 = ysb + 1);\n    dy_ext0 = (dy_ext1 = (dy0 - 1) - (3 * 0.309016994374947));\n    if ((c1 & 0x01) == 0)\n    {\n      ysv_ext0 += 1;\n      dy_ext0 -= 1;\n    }\n    else\n    {\n      ysv_ext1 += 1;\n      dy_ext1 -= 1;\n    }\n  }\n  else\n  {\n    ysv_ext0 = (ysv_ext1 = ysb);\n    dy_ext0 = (dy_ext1 = dy0 - (3 * 0.309016994374947));\n  }\n  if ((c1 & 0x04) != 0)\n  {\n    zsv_ext0 = (zsv_ext1 = zsb + 1);\n    dz_ext0 = (dz_ext1 = (dz0 - 1) - (3 * 0.309016994374947));\n    if ((c1 & 0x03) == 0)\n    {\n      zsv_ext0 += 1;\n      dz_ext0 -= 1;\n    }\n    else\n    {\n      zsv_ext1 += 1;\n      dz_ext1 -= 1;\n    }\n  }\n  else\n  {\n    zsv_ext0 = (zsv_ext1 = zsb);\n    dz_ext0 = (dz_ext1 = dz0 - (3 * 0.309016994374947));\n  }\n  if ((c1 & 0x08) != 0)\n  {\n    wsv_ext0 = wsb + 1;\n    wsv_ext1 = wsb + 2;\n    dw_ext0 = (dw0 - 1) - (3 * 0.309016994374947);\n    dw_ext1 = (dw0 - 2) - (3 * 0.309016994374947);\n  }\n  else\n  {\n    wsv_ext0 = (wsv_ext1 = wsb);\n    dw_ext0 = (dw_ext1 = dw0 - (3 * 0.309016994374947));\n  }\n  xsv_ext2 = xsb + 1;\n  ysv_ext2 = ysb + 1;\n  zsv_ext2 = zsb + 1;\n  wsv_ext2 = wsb + 1;\n  dx_ext2 = (dx0 - 1) - (2 * 0.309016994374947);\n  dy_ext2 = (dy0 - 1) - (2 * 0.309016994374947);\n  dz_ext2 = (dz0 - 1) - (2 * 0.309016994374947);\n  dw_ext2 = (dw0 - 1) - (2 * 0.309016994374947);\n  if ((c2 & 0x01) == 0)\n  {\n    xsv_ext2 -= 2;\n    dx_ext2 += 2;\n  }\n  else\n    if ((c2 & 0x02) == 0)\n  {\n    ysv_ext2 -= 2;\n    dy_ext2 += 2;\n  }\n  else\n    if ((c2 & 0x04) == 0)\n  {\n    zsv_ext2 -= 2;\n    dz_ext2 += 2;\n  }\n  else\n  {\n    wsv_ext2 -= 2;\n    dw_ext2 += 2;\n  }\n  *dx_ext0_ref = dx_ext0;\n  *dy_ext0_ref = dy_ext0;\n  *dz_ext0_ref = dz_ext0;\n  *dw_ext0_ref = dw_ext0;\n  *dx_ext1_ref = dx_ext1;\n  *dy_ext1_ref = dy_ext1;\n  *dz_ext1_ref = dz_ext1;\n  *dw_ext1_ref = dw_ext1;\n  *dx_ext2_ref = dx_ext2;\n  *dy_ext2_ref = dy_ext2;\n  *dz_ext2_ref = dz_ext2;\n  *dw_ext2_ref = dw_ext2;\n  *xsv_ext0_ref = xsv_ext0;\n  *ysv_ext0_ref = ysv_ext0;\n  *zsv_ext0_ref = zsv_ext0;\n  *wsv_ext0_ref = wsv_ext0;\n  *xsv_ext1_ref = xsv_ext1;\n  *ysv_ext1_ref = ysv_ext1;\n  *zsv_ext1_ref = zsv_ext1;\n  *wsv_ext1_ref = wsv_ext1;\n  *xsv_ext2_ref = xsv_ext2;\n  *ysv_ext2_ref = ysv_ext2;\n  *zsv_ext2_ref = zsv_ext2;\n  *wsv_ext2_ref = wsv_ext2;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dx_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsb",
                        "type": "int",
                        "definition": [
                            "int zsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsb",
                        "type": "int",
                        "definition": [
                            "int wsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx0",
                        "type": "double",
                        "definition": [
                            "double dx0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0",
                        "type": "double",
                        "definition": [
                            "double dy0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz0",
                        "type": "double",
                        "definition": [
                            "double dz0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw0",
                        "type": "double",
                        "definition": [
                            "double dw0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t aPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aIsBiggerSide",
                        "type": "int",
                        "definition": [
                            "int aIsBiggerSide"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t bPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext0",
                        "type": "double",
                        "definition": [
                            "double dx_ext0 = *dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0",
                        "type": "double",
                        "definition": [
                            "double dy_ext0 = *dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0",
                        "type": "double",
                        "definition": [
                            "double dz_ext0 = *dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext0",
                        "type": "double",
                        "definition": [
                            "double dw_ext0 = *dw_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1",
                        "type": "double",
                        "definition": [
                            "double dx_ext1 = *dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1",
                        "type": "double",
                        "definition": [
                            "double dy_ext1 = *dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1",
                        "type": "double",
                        "definition": [
                            "double dz_ext1 = *dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext1",
                        "type": "double",
                        "definition": [
                            "double dw_ext1 = *dw_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext2",
                        "type": "double",
                        "definition": [
                            "double dx_ext2 = *dx_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext2",
                        "type": "double",
                        "definition": [
                            "double dy_ext2 = *dy_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext2",
                        "type": "double",
                        "definition": [
                            "double dz_ext2 = *dz_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext2",
                        "type": "double",
                        "definition": [
                            "double dw_ext2 = *dw_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0",
                        "type": "int",
                        "definition": [
                            "int xsv_ext0 = *xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0",
                        "type": "int",
                        "definition": [
                            "int ysv_ext0 = *ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0",
                        "type": "int",
                        "definition": [
                            "int zsv_ext0 = *zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext0",
                        "type": "int",
                        "definition": [
                            "int wsv_ext0 = *wsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1",
                        "type": "int",
                        "definition": [
                            "int xsv_ext1 = *xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1",
                        "type": "int",
                        "definition": [
                            "int ysv_ext1 = *ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1",
                        "type": "int",
                        "definition": [
                            "int zsv_ext1 = *zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext1",
                        "type": "int",
                        "definition": [
                            "int wsv_ext1 = *wsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext2",
                        "type": "int",
                        "definition": [
                            "int xsv_ext2 = *xsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext2",
                        "type": "int",
                        "definition": [
                            "int ysv_ext2 = *ysv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext2",
                        "type": "int",
                        "definition": [
                            "int zsv_ext2 = *zsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext2",
                        "type": "int",
                        "definition": [
                            "int wsv_ext2 = *wsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c1",
                        "type": "int8_t",
                        "definition": [
                            "int8_t c1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c2",
                        "type": "int8_t",
                        "definition": [
                            "int8_t c2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_open_simplex_noise4_3_2",
            "header": "",
            "params": [
                "double * const dx_ext0_ref",
                "double * const dy_ext0_ref",
                "double * const dz_ext0_ref",
                "double * const dw_ext0_ref",
                "double * const dx_ext1_ref",
                "double * const dy_ext1_ref",
                "double * const dz_ext1_ref",
                "double * const dw_ext1_ref",
                "double * const dx_ext2_ref",
                "double * const dy_ext2_ref",
                "double * const dz_ext2_ref",
                "double * const dw_ext2_ref",
                "int * const xsv_ext0_ref",
                "int * const ysv_ext0_ref",
                "int * const zsv_ext0_ref",
                "int * const wsv_ext0_ref",
                "int * const xsv_ext1_ref",
                "int * const ysv_ext1_ref",
                "int * const zsv_ext1_ref",
                "int * const wsv_ext1_ref",
                "int * const xsv_ext2_ref",
                "int * const ysv_ext2_ref",
                "int * const zsv_ext2_ref",
                "int * const wsv_ext2_ref",
                "int xsb",
                "int ysb",
                "int zsb",
                "int wsb",
                "double dx0",
                "double dy0",
                "double dz0",
                "double dw0",
                "int8_t aPoint",
                "int aIsBiggerSide",
                "int8_t bPoint"
            ],
            "definition": "void helper_helper_open_simplex_noise4_3_2(double * const dx_ext0_ref, double * const dy_ext0_ref, double * const dz_ext0_ref, double * const dw_ext0_ref, double * const dx_ext1_ref, double * const dy_ext1_ref, double * const dz_ext1_ref, double * const dw_ext1_ref, double * const dx_ext2_ref, double * const dy_ext2_ref, double * const dz_ext2_ref, double * const dw_ext2_ref, int * const xsv_ext0_ref, int * const ysv_ext0_ref, int * const zsv_ext0_ref, int * const wsv_ext0_ref, int * const xsv_ext1_ref, int * const ysv_ext1_ref, int * const zsv_ext1_ref, int * const wsv_ext1_ref, int * const xsv_ext2_ref, int * const ysv_ext2_ref, int * const zsv_ext2_ref, int * const wsv_ext2_ref, int xsb, int ysb, int zsb, int wsb, double dx0, double dy0, double dz0, double dw0, int8_t aPoint, int aIsBiggerSide, int8_t bPoint)\n{\n  double dx_ext0 = *dx_ext0_ref;\n  double dy_ext0 = *dy_ext0_ref;\n  double dz_ext0 = *dz_ext0_ref;\n  double dw_ext0 = *dw_ext0_ref;\n  double dx_ext1 = *dx_ext1_ref;\n  double dy_ext1 = *dy_ext1_ref;\n  double dz_ext1 = *dz_ext1_ref;\n  double dw_ext1 = *dw_ext1_ref;\n  double dx_ext2 = *dx_ext2_ref;\n  double dy_ext2 = *dy_ext2_ref;\n  double dz_ext2 = *dz_ext2_ref;\n  double dw_ext2 = *dw_ext2_ref;\n  int xsv_ext0 = *xsv_ext0_ref;\n  int ysv_ext0 = *ysv_ext0_ref;\n  int zsv_ext0 = *zsv_ext0_ref;\n  int wsv_ext0 = *wsv_ext0_ref;\n  int xsv_ext1 = *xsv_ext1_ref;\n  int ysv_ext1 = *ysv_ext1_ref;\n  int zsv_ext1 = *zsv_ext1_ref;\n  int wsv_ext1 = *wsv_ext1_ref;\n  int xsv_ext2 = *xsv_ext2_ref;\n  int ysv_ext2 = *ysv_ext2_ref;\n  int zsv_ext2 = *zsv_ext2_ref;\n  int wsv_ext2 = *wsv_ext2_ref;\n  if (aIsBiggerSide)\n  {\n    helper_helper_helper_open_simplex_noise4_3_2_2(&dx_ext0, &dy_ext0, &dz_ext0, &dw_ext0, &dx_ext1, &dy_ext1, &dz_ext1, &dw_ext1, &dx_ext2, &dy_ext2, &dz_ext2, &dw_ext2, &xsv_ext0, &ysv_ext0, &zsv_ext0, &wsv_ext0, &xsv_ext1, &ysv_ext1, &zsv_ext1, &wsv_ext1, &xsv_ext2, &ysv_ext2, &zsv_ext2, &wsv_ext2, xsb, ysb, zsb, wsb, dx0, dy0, dz0, dw0, aPoint, bPoint);\n  }\n  else\n  {\n    helper_helper_helper_open_simplex_noise4_3_2_1(&dx_ext0, &dy_ext0, &dz_ext0, &dw_ext0, &dx_ext1, &dy_ext1, &dz_ext1, &dw_ext1, &dx_ext2, &dy_ext2, &dz_ext2, &dw_ext2, &xsv_ext0, &ysv_ext0, &zsv_ext0, &wsv_ext0, &xsv_ext1, &ysv_ext1, &zsv_ext1, &wsv_ext1, &xsv_ext2, &ysv_ext2, &zsv_ext2, &wsv_ext2, xsb, ysb, zsb, wsb, dx0, dy0, dz0, dw0, aPoint, bPoint);\n  }\n  *dx_ext0_ref = dx_ext0;\n  *dy_ext0_ref = dy_ext0;\n  *dz_ext0_ref = dz_ext0;\n  *dw_ext0_ref = dw_ext0;\n  *dx_ext1_ref = dx_ext1;\n  *dy_ext1_ref = dy_ext1;\n  *dz_ext1_ref = dz_ext1;\n  *dw_ext1_ref = dw_ext1;\n  *dx_ext2_ref = dx_ext2;\n  *dy_ext2_ref = dy_ext2;\n  *dz_ext2_ref = dz_ext2;\n  *dw_ext2_ref = dw_ext2;\n  *xsv_ext0_ref = xsv_ext0;\n  *ysv_ext0_ref = ysv_ext0;\n  *zsv_ext0_ref = zsv_ext0;\n  *wsv_ext0_ref = wsv_ext0;\n  *xsv_ext1_ref = xsv_ext1;\n  *ysv_ext1_ref = ysv_ext1;\n  *zsv_ext1_ref = zsv_ext1;\n  *wsv_ext1_ref = wsv_ext1;\n  *xsv_ext2_ref = xsv_ext2;\n  *ysv_ext2_ref = ysv_ext2;\n  *zsv_ext2_ref = zsv_ext2;\n  *wsv_ext2_ref = wsv_ext2;\n}\n\n",
            "calle": [
                "helper_helper_helper_open_simplex_noise4_3_2_1",
                "helper_helper_helper_open_simplex_noise4_3_2_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dx_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsb",
                        "type": "int",
                        "definition": [
                            "int zsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsb",
                        "type": "int",
                        "definition": [
                            "int wsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx0",
                        "type": "double",
                        "definition": [
                            "double dx0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0",
                        "type": "double",
                        "definition": [
                            "double dy0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz0",
                        "type": "double",
                        "definition": [
                            "double dz0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw0",
                        "type": "double",
                        "definition": [
                            "double dw0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t aPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aIsBiggerSide",
                        "type": "int",
                        "definition": [
                            "int aIsBiggerSide"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t bPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext0",
                        "type": "double",
                        "definition": [
                            "double dx_ext0 = *dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0",
                        "type": "double",
                        "definition": [
                            "double dy_ext0 = *dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0",
                        "type": "double",
                        "definition": [
                            "double dz_ext0 = *dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext0",
                        "type": "double",
                        "definition": [
                            "double dw_ext0 = *dw_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1",
                        "type": "double",
                        "definition": [
                            "double dx_ext1 = *dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1",
                        "type": "double",
                        "definition": [
                            "double dy_ext1 = *dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1",
                        "type": "double",
                        "definition": [
                            "double dz_ext1 = *dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext1",
                        "type": "double",
                        "definition": [
                            "double dw_ext1 = *dw_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext2",
                        "type": "double",
                        "definition": [
                            "double dx_ext2 = *dx_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext2",
                        "type": "double",
                        "definition": [
                            "double dy_ext2 = *dy_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext2",
                        "type": "double",
                        "definition": [
                            "double dz_ext2 = *dz_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext2",
                        "type": "double",
                        "definition": [
                            "double dw_ext2 = *dw_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0",
                        "type": "int",
                        "definition": [
                            "int xsv_ext0 = *xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0",
                        "type": "int",
                        "definition": [
                            "int ysv_ext0 = *ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0",
                        "type": "int",
                        "definition": [
                            "int zsv_ext0 = *zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext0",
                        "type": "int",
                        "definition": [
                            "int wsv_ext0 = *wsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1",
                        "type": "int",
                        "definition": [
                            "int xsv_ext1 = *xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1",
                        "type": "int",
                        "definition": [
                            "int ysv_ext1 = *ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1",
                        "type": "int",
                        "definition": [
                            "int zsv_ext1 = *zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext1",
                        "type": "int",
                        "definition": [
                            "int wsv_ext1 = *wsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext2",
                        "type": "int",
                        "definition": [
                            "int xsv_ext2 = *xsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext2",
                        "type": "int",
                        "definition": [
                            "int ysv_ext2 = *ysv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext2",
                        "type": "int",
                        "definition": [
                            "int zsv_ext2 = *zsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext2",
                        "type": "int",
                        "definition": [
                            "int wsv_ext2 = *wsv_ext2_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_open_simplex_noise4_4_1",
            "header": "",
            "params": [
                "double * const dx_ext0_ref",
                "double * const dy_ext0_ref",
                "double * const dz_ext0_ref",
                "double * const dw_ext0_ref",
                "double * const dx_ext1_ref",
                "double * const dy_ext1_ref",
                "double * const dz_ext1_ref",
                "double * const dw_ext1_ref",
                "double * const dx_ext2_ref",
                "double * const dy_ext2_ref",
                "double * const dz_ext2_ref",
                "double * const dw_ext2_ref",
                "int * const xsv_ext0_ref",
                "int * const ysv_ext0_ref",
                "int * const zsv_ext0_ref",
                "int * const wsv_ext0_ref",
                "int * const xsv_ext1_ref",
                "int * const ysv_ext1_ref",
                "int * const zsv_ext1_ref",
                "int * const wsv_ext1_ref",
                "int * const xsv_ext2_ref",
                "int * const ysv_ext2_ref",
                "int * const zsv_ext2_ref",
                "int * const wsv_ext2_ref",
                "int xsb",
                "int ysb",
                "int zsb",
                "int wsb",
                "double dx0",
                "double dy0",
                "double dz0",
                "double dw0",
                "int8_t aPoint",
                "int aIsBiggerSide",
                "int8_t bPoint"
            ],
            "definition": "void helper_helper_open_simplex_noise4_4_1(double * const dx_ext0_ref, double * const dy_ext0_ref, double * const dz_ext0_ref, double * const dw_ext0_ref, double * const dx_ext1_ref, double * const dy_ext1_ref, double * const dz_ext1_ref, double * const dw_ext1_ref, double * const dx_ext2_ref, double * const dy_ext2_ref, double * const dz_ext2_ref, double * const dw_ext2_ref, int * const xsv_ext0_ref, int * const ysv_ext0_ref, int * const zsv_ext0_ref, int * const wsv_ext0_ref, int * const xsv_ext1_ref, int * const ysv_ext1_ref, int * const zsv_ext1_ref, int * const wsv_ext1_ref, int * const xsv_ext2_ref, int * const ysv_ext2_ref, int * const zsv_ext2_ref, int * const wsv_ext2_ref, int xsb, int ysb, int zsb, int wsb, double dx0, double dy0, double dz0, double dw0, int8_t aPoint, int aIsBiggerSide, int8_t bPoint)\n{\n  double dx_ext0 = *dx_ext0_ref;\n  double dy_ext0 = *dy_ext0_ref;\n  double dz_ext0 = *dz_ext0_ref;\n  double dw_ext0 = *dw_ext0_ref;\n  double dx_ext1 = *dx_ext1_ref;\n  double dy_ext1 = *dy_ext1_ref;\n  double dz_ext1 = *dz_ext1_ref;\n  double dw_ext1 = *dw_ext1_ref;\n  double dx_ext2 = *dx_ext2_ref;\n  double dy_ext2 = *dy_ext2_ref;\n  double dz_ext2 = *dz_ext2_ref;\n  double dw_ext2 = *dw_ext2_ref;\n  int xsv_ext0 = *xsv_ext0_ref;\n  int ysv_ext0 = *ysv_ext0_ref;\n  int zsv_ext0 = *zsv_ext0_ref;\n  int wsv_ext0 = *wsv_ext0_ref;\n  int xsv_ext1 = *xsv_ext1_ref;\n  int ysv_ext1 = *ysv_ext1_ref;\n  int zsv_ext1 = *zsv_ext1_ref;\n  int wsv_ext1 = *wsv_ext1_ref;\n  int xsv_ext2 = *xsv_ext2_ref;\n  int ysv_ext2 = *ysv_ext2_ref;\n  int zsv_ext2 = *zsv_ext2_ref;\n  int wsv_ext2 = *wsv_ext2_ref;\n  int8_t c1;\n  int8_t c2;\n  if (aIsBiggerSide)\n  {\n    c1 = aPoint;\n    c2 = bPoint;\n  }\n  else\n  {\n    c1 = bPoint;\n    c2 = aPoint;\n  }\n  if ((c1 & 0x01) == 0)\n  {\n    xsv_ext0 = xsb - 1;\n    xsv_ext1 = xsb;\n    dx_ext0 = (dx0 + 1) - 0.309016994374947;\n    dx_ext1 = dx0 - 0.309016994374947;\n  }\n  else\n  {\n    xsv_ext0 = (xsv_ext1 = xsb + 1);\n    dx_ext0 = (dx_ext1 = (dx0 - 1) - 0.309016994374947);\n  }\n  if ((c1 & 0x02) == 0)\n  {\n    ysv_ext0 = (ysv_ext1 = ysb);\n    dy_ext0 = (dy_ext1 = dy0 - 0.309016994374947);\n    if ((c1 & 0x01) == 0x01)\n    {\n      ysv_ext0 -= 1;\n      dy_ext0 += 1;\n    }\n    else\n    {\n      ysv_ext1 -= 1;\n      dy_ext1 += 1;\n    }\n  }\n  else\n  {\n    ysv_ext0 = (ysv_ext1 = ysb + 1);\n    dy_ext0 = (dy_ext1 = (dy0 - 1) - 0.309016994374947);\n  }\n  if ((c1 & 0x04) == 0)\n  {\n    zsv_ext0 = (zsv_ext1 = zsb);\n    dz_ext0 = (dz_ext1 = dz0 - 0.309016994374947);\n    if ((c1 & 0x03) == 0x03)\n    {\n      zsv_ext0 -= 1;\n      dz_ext0 += 1;\n    }\n    else\n    {\n      zsv_ext1 -= 1;\n      dz_ext1 += 1;\n    }\n  }\n  else\n  {\n    zsv_ext0 = (zsv_ext1 = zsb + 1);\n    dz_ext0 = (dz_ext1 = (dz0 - 1) - 0.309016994374947);\n  }\n  if ((c1 & 0x08) == 0)\n  {\n    wsv_ext0 = wsb;\n    wsv_ext1 = wsb - 1;\n    dw_ext0 = dw0 - 0.309016994374947;\n    dw_ext1 = (dw0 + 1) - 0.309016994374947;\n  }\n  else\n  {\n    wsv_ext0 = (wsv_ext1 = wsb + 1);\n    dw_ext0 = (dw_ext1 = (dw0 - 1) - 0.309016994374947);\n  }\n  xsv_ext2 = xsb;\n  ysv_ext2 = ysb;\n  zsv_ext2 = zsb;\n  wsv_ext2 = wsb;\n  dx_ext2 = dx0 - (2 * 0.309016994374947);\n  dy_ext2 = dy0 - (2 * 0.309016994374947);\n  dz_ext2 = dz0 - (2 * 0.309016994374947);\n  dw_ext2 = dw0 - (2 * 0.309016994374947);\n  if ((c2 & 0x01) != 0)\n  {\n    xsv_ext2 += 2;\n    dx_ext2 -= 2;\n  }\n  else\n    if ((c2 & 0x02) != 0)\n  {\n    ysv_ext2 += 2;\n    dy_ext2 -= 2;\n  }\n  else\n    if ((c2 & 0x04) != 0)\n  {\n    zsv_ext2 += 2;\n    dz_ext2 -= 2;\n  }\n  else\n  {\n    wsv_ext2 += 2;\n    dw_ext2 -= 2;\n  }\n  *dx_ext0_ref = dx_ext0;\n  *dy_ext0_ref = dy_ext0;\n  *dz_ext0_ref = dz_ext0;\n  *dw_ext0_ref = dw_ext0;\n  *dx_ext1_ref = dx_ext1;\n  *dy_ext1_ref = dy_ext1;\n  *dz_ext1_ref = dz_ext1;\n  *dw_ext1_ref = dw_ext1;\n  *dx_ext2_ref = dx_ext2;\n  *dy_ext2_ref = dy_ext2;\n  *dz_ext2_ref = dz_ext2;\n  *dw_ext2_ref = dw_ext2;\n  *xsv_ext0_ref = xsv_ext0;\n  *ysv_ext0_ref = ysv_ext0;\n  *zsv_ext0_ref = zsv_ext0;\n  *wsv_ext0_ref = wsv_ext0;\n  *xsv_ext1_ref = xsv_ext1;\n  *ysv_ext1_ref = ysv_ext1;\n  *zsv_ext1_ref = zsv_ext1;\n  *wsv_ext1_ref = wsv_ext1;\n  *xsv_ext2_ref = xsv_ext2;\n  *ysv_ext2_ref = ysv_ext2;\n  *zsv_ext2_ref = zsv_ext2;\n  *wsv_ext2_ref = wsv_ext2;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dx_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsb",
                        "type": "int",
                        "definition": [
                            "int zsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsb",
                        "type": "int",
                        "definition": [
                            "int wsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx0",
                        "type": "double",
                        "definition": [
                            "double dx0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0",
                        "type": "double",
                        "definition": [
                            "double dy0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz0",
                        "type": "double",
                        "definition": [
                            "double dz0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw0",
                        "type": "double",
                        "definition": [
                            "double dw0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t aPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aIsBiggerSide",
                        "type": "int",
                        "definition": [
                            "int aIsBiggerSide"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t bPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext0",
                        "type": "double",
                        "definition": [
                            "double dx_ext0 = *dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0",
                        "type": "double",
                        "definition": [
                            "double dy_ext0 = *dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0",
                        "type": "double",
                        "definition": [
                            "double dz_ext0 = *dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext0",
                        "type": "double",
                        "definition": [
                            "double dw_ext0 = *dw_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1",
                        "type": "double",
                        "definition": [
                            "double dx_ext1 = *dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1",
                        "type": "double",
                        "definition": [
                            "double dy_ext1 = *dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1",
                        "type": "double",
                        "definition": [
                            "double dz_ext1 = *dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext1",
                        "type": "double",
                        "definition": [
                            "double dw_ext1 = *dw_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext2",
                        "type": "double",
                        "definition": [
                            "double dx_ext2 = *dx_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext2",
                        "type": "double",
                        "definition": [
                            "double dy_ext2 = *dy_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext2",
                        "type": "double",
                        "definition": [
                            "double dz_ext2 = *dz_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext2",
                        "type": "double",
                        "definition": [
                            "double dw_ext2 = *dw_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0",
                        "type": "int",
                        "definition": [
                            "int xsv_ext0 = *xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0",
                        "type": "int",
                        "definition": [
                            "int ysv_ext0 = *ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0",
                        "type": "int",
                        "definition": [
                            "int zsv_ext0 = *zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext0",
                        "type": "int",
                        "definition": [
                            "int wsv_ext0 = *wsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1",
                        "type": "int",
                        "definition": [
                            "int xsv_ext1 = *xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1",
                        "type": "int",
                        "definition": [
                            "int ysv_ext1 = *ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1",
                        "type": "int",
                        "definition": [
                            "int zsv_ext1 = *zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext1",
                        "type": "int",
                        "definition": [
                            "int wsv_ext1 = *wsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext2",
                        "type": "int",
                        "definition": [
                            "int xsv_ext2 = *xsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext2",
                        "type": "int",
                        "definition": [
                            "int ysv_ext2 = *ysv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext2",
                        "type": "int",
                        "definition": [
                            "int zsv_ext2 = *zsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext2",
                        "type": "int",
                        "definition": [
                            "int wsv_ext2 = *wsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c1",
                        "type": "int8_t",
                        "definition": [
                            "int8_t c1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c2",
                        "type": "int8_t",
                        "definition": [
                            "int8_t c2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_open_simplex_noise4_4_2",
            "header": "",
            "params": [
                "double * const dx_ext0_ref",
                "double * const dy_ext0_ref",
                "double * const dz_ext0_ref",
                "double * const dw_ext0_ref",
                "double * const dx_ext1_ref",
                "double * const dy_ext1_ref",
                "double * const dz_ext1_ref",
                "double * const dw_ext1_ref",
                "double * const dx_ext2_ref",
                "double * const dy_ext2_ref",
                "double * const dz_ext2_ref",
                "double * const dw_ext2_ref",
                "int * const xsv_ext0_ref",
                "int * const ysv_ext0_ref",
                "int * const zsv_ext0_ref",
                "int * const wsv_ext0_ref",
                "int * const xsv_ext1_ref",
                "int * const ysv_ext1_ref",
                "int * const zsv_ext1_ref",
                "int * const wsv_ext1_ref",
                "int * const xsv_ext2_ref",
                "int * const ysv_ext2_ref",
                "int * const zsv_ext2_ref",
                "int * const wsv_ext2_ref",
                "int xsb",
                "int ysb",
                "int zsb",
                "int wsb",
                "double dx0",
                "double dy0",
                "double dz0",
                "double dw0",
                "int8_t aPoint",
                "int aIsBiggerSide",
                "int8_t bPoint"
            ],
            "definition": "void helper_helper_open_simplex_noise4_4_2(double * const dx_ext0_ref, double * const dy_ext0_ref, double * const dz_ext0_ref, double * const dw_ext0_ref, double * const dx_ext1_ref, double * const dy_ext1_ref, double * const dz_ext1_ref, double * const dw_ext1_ref, double * const dx_ext2_ref, double * const dy_ext2_ref, double * const dz_ext2_ref, double * const dw_ext2_ref, int * const xsv_ext0_ref, int * const ysv_ext0_ref, int * const zsv_ext0_ref, int * const wsv_ext0_ref, int * const xsv_ext1_ref, int * const ysv_ext1_ref, int * const zsv_ext1_ref, int * const wsv_ext1_ref, int * const xsv_ext2_ref, int * const ysv_ext2_ref, int * const zsv_ext2_ref, int * const wsv_ext2_ref, int xsb, int ysb, int zsb, int wsb, double dx0, double dy0, double dz0, double dw0, int8_t aPoint, int aIsBiggerSide, int8_t bPoint)\n{\n  double dx_ext0 = *dx_ext0_ref;\n  double dy_ext0 = *dy_ext0_ref;\n  double dz_ext0 = *dz_ext0_ref;\n  double dw_ext0 = *dw_ext0_ref;\n  double dx_ext1 = *dx_ext1_ref;\n  double dy_ext1 = *dy_ext1_ref;\n  double dz_ext1 = *dz_ext1_ref;\n  double dw_ext1 = *dw_ext1_ref;\n  double dx_ext2 = *dx_ext2_ref;\n  double dy_ext2 = *dy_ext2_ref;\n  double dz_ext2 = *dz_ext2_ref;\n  double dw_ext2 = *dw_ext2_ref;\n  int xsv_ext0 = *xsv_ext0_ref;\n  int ysv_ext0 = *ysv_ext0_ref;\n  int zsv_ext0 = *zsv_ext0_ref;\n  int wsv_ext0 = *wsv_ext0_ref;\n  int xsv_ext1 = *xsv_ext1_ref;\n  int ysv_ext1 = *ysv_ext1_ref;\n  int zsv_ext1 = *zsv_ext1_ref;\n  int wsv_ext1 = *wsv_ext1_ref;\n  int xsv_ext2 = *xsv_ext2_ref;\n  int ysv_ext2 = *ysv_ext2_ref;\n  int zsv_ext2 = *zsv_ext2_ref;\n  int wsv_ext2 = *wsv_ext2_ref;\n  if (aIsBiggerSide)\n  {\n    helper_helper_helper_open_simplex_noise4_4_2_2(&dx_ext0, &dy_ext0, &dz_ext0, &dw_ext0, &dx_ext1, &dy_ext1, &dz_ext1, &dw_ext1, &dx_ext2, &dy_ext2, &dz_ext2, &dw_ext2, &xsv_ext0, &ysv_ext0, &zsv_ext0, &wsv_ext0, &xsv_ext1, &ysv_ext1, &zsv_ext1, &wsv_ext1, &xsv_ext2, &ysv_ext2, &zsv_ext2, &wsv_ext2, xsb, ysb, zsb, wsb, dx0, dy0, dz0, dw0, aPoint, bPoint);\n  }\n  else\n  {\n    helper_helper_helper_open_simplex_noise4_4_2_1(&dx_ext0, &dy_ext0, &dz_ext0, &dw_ext0, &dx_ext1, &dy_ext1, &dz_ext1, &dw_ext1, &dx_ext2, &dy_ext2, &dz_ext2, &dw_ext2, &xsv_ext0, &ysv_ext0, &zsv_ext0, &wsv_ext0, &xsv_ext1, &ysv_ext1, &zsv_ext1, &wsv_ext1, &xsv_ext2, &ysv_ext2, &zsv_ext2, &wsv_ext2, xsb, ysb, zsb, wsb, dx0, dy0, dz0, dw0, aPoint, bPoint);\n  }\n  *dx_ext0_ref = dx_ext0;\n  *dy_ext0_ref = dy_ext0;\n  *dz_ext0_ref = dz_ext0;\n  *dw_ext0_ref = dw_ext0;\n  *dx_ext1_ref = dx_ext1;\n  *dy_ext1_ref = dy_ext1;\n  *dz_ext1_ref = dz_ext1;\n  *dw_ext1_ref = dw_ext1;\n  *dx_ext2_ref = dx_ext2;\n  *dy_ext2_ref = dy_ext2;\n  *dz_ext2_ref = dz_ext2;\n  *dw_ext2_ref = dw_ext2;\n  *xsv_ext0_ref = xsv_ext0;\n  *ysv_ext0_ref = ysv_ext0;\n  *zsv_ext0_ref = zsv_ext0;\n  *wsv_ext0_ref = wsv_ext0;\n  *xsv_ext1_ref = xsv_ext1;\n  *ysv_ext1_ref = ysv_ext1;\n  *zsv_ext1_ref = zsv_ext1;\n  *wsv_ext1_ref = wsv_ext1;\n  *xsv_ext2_ref = xsv_ext2;\n  *ysv_ext2_ref = ysv_ext2;\n  *zsv_ext2_ref = zsv_ext2;\n  *wsv_ext2_ref = wsv_ext2;\n}\n\n",
            "calle": [
                "helper_helper_helper_open_simplex_noise4_4_2_1",
                "helper_helper_helper_open_simplex_noise4_4_2_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dx_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsb",
                        "type": "int",
                        "definition": [
                            "int zsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsb",
                        "type": "int",
                        "definition": [
                            "int wsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx0",
                        "type": "double",
                        "definition": [
                            "double dx0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0",
                        "type": "double",
                        "definition": [
                            "double dy0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz0",
                        "type": "double",
                        "definition": [
                            "double dz0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw0",
                        "type": "double",
                        "definition": [
                            "double dw0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t aPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aIsBiggerSide",
                        "type": "int",
                        "definition": [
                            "int aIsBiggerSide"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t bPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext0",
                        "type": "double",
                        "definition": [
                            "double dx_ext0 = *dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0",
                        "type": "double",
                        "definition": [
                            "double dy_ext0 = *dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0",
                        "type": "double",
                        "definition": [
                            "double dz_ext0 = *dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext0",
                        "type": "double",
                        "definition": [
                            "double dw_ext0 = *dw_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1",
                        "type": "double",
                        "definition": [
                            "double dx_ext1 = *dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1",
                        "type": "double",
                        "definition": [
                            "double dy_ext1 = *dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1",
                        "type": "double",
                        "definition": [
                            "double dz_ext1 = *dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext1",
                        "type": "double",
                        "definition": [
                            "double dw_ext1 = *dw_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext2",
                        "type": "double",
                        "definition": [
                            "double dx_ext2 = *dx_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext2",
                        "type": "double",
                        "definition": [
                            "double dy_ext2 = *dy_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext2",
                        "type": "double",
                        "definition": [
                            "double dz_ext2 = *dz_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext2",
                        "type": "double",
                        "definition": [
                            "double dw_ext2 = *dw_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0",
                        "type": "int",
                        "definition": [
                            "int xsv_ext0 = *xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0",
                        "type": "int",
                        "definition": [
                            "int ysv_ext0 = *ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0",
                        "type": "int",
                        "definition": [
                            "int zsv_ext0 = *zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext0",
                        "type": "int",
                        "definition": [
                            "int wsv_ext0 = *wsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1",
                        "type": "int",
                        "definition": [
                            "int xsv_ext1 = *xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1",
                        "type": "int",
                        "definition": [
                            "int ysv_ext1 = *ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1",
                        "type": "int",
                        "definition": [
                            "int zsv_ext1 = *zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext1",
                        "type": "int",
                        "definition": [
                            "int wsv_ext1 = *wsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext2",
                        "type": "int",
                        "definition": [
                            "int xsv_ext2 = *xsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext2",
                        "type": "int",
                        "definition": [
                            "int ysv_ext2 = *ysv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext2",
                        "type": "int",
                        "definition": [
                            "int zsv_ext2 = *zsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext2",
                        "type": "int",
                        "definition": [
                            "int wsv_ext2 = *wsv_ext2_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_open_simplex_noise3_3_2_1",
            "header": "",
            "params": [
                "double * const dx_ext0_ref",
                "double * const dy_ext0_ref",
                "double * const dz_ext0_ref",
                "double * const dx_ext1_ref",
                "double * const dy_ext1_ref",
                "double * const dz_ext1_ref",
                "int * const xsv_ext0_ref",
                "int * const ysv_ext0_ref",
                "int * const zsv_ext0_ref",
                "int * const xsv_ext1_ref",
                "int * const ysv_ext1_ref",
                "int * const zsv_ext1_ref",
                "int xsb",
                "int ysb",
                "int zsb",
                "double dx0",
                "double dy0",
                "double dz0",
                "int8_t aPoint",
                "int8_t bPoint"
            ],
            "definition": "void helper_helper_helper_open_simplex_noise3_3_2_1(double * const dx_ext0_ref, double * const dy_ext0_ref, double * const dz_ext0_ref, double * const dx_ext1_ref, double * const dy_ext1_ref, double * const dz_ext1_ref, int * const xsv_ext0_ref, int * const ysv_ext0_ref, int * const zsv_ext0_ref, int * const xsv_ext1_ref, int * const ysv_ext1_ref, int * const zsv_ext1_ref, int xsb, int ysb, int zsb, double dx0, double dy0, double dz0, int8_t aPoint, int8_t bPoint)\n{\n  double dx_ext0 = *dx_ext0_ref;\n  double dy_ext0 = *dy_ext0_ref;\n  double dz_ext0 = *dz_ext0_ref;\n  double dx_ext1 = *dx_ext1_ref;\n  double dy_ext1 = *dy_ext1_ref;\n  double dz_ext1 = *dz_ext1_ref;\n  int xsv_ext0 = *xsv_ext0_ref;\n  int ysv_ext0 = *ysv_ext0_ref;\n  int zsv_ext0 = *zsv_ext0_ref;\n  int xsv_ext1 = *xsv_ext1_ref;\n  int ysv_ext1 = *ysv_ext1_ref;\n  int zsv_ext1 = *zsv_ext1_ref;\n  dx_ext0 = (dx0 - 1) - (3 * (1.0 / 3.0));\n  dy_ext0 = (dy0 - 1) - (3 * (1.0 / 3.0));\n  dz_ext0 = (dz0 - 1) - (3 * (1.0 / 3.0));\n  xsv_ext0 = xsb + 1;\n  ysv_ext0 = ysb + 1;\n  zsv_ext0 = zsb + 1;\n  int8_t c = (int8_t) (aPoint & bPoint);\n  if ((c & 0x01) != 0)\n  {\n    dx_ext1 = (dx0 - 2) - (2 * (1.0 / 3.0));\n    dy_ext1 = dy0 - (2 * (1.0 / 3.0));\n    dz_ext1 = dz0 - (2 * (1.0 / 3.0));\n    xsv_ext1 = xsb + 2;\n    ysv_ext1 = ysb;\n    zsv_ext1 = zsb;\n  }\n  else\n    if ((c & 0x02) != 0)\n  {\n    dx_ext1 = dx0 - (2 * (1.0 / 3.0));\n    dy_ext1 = (dy0 - 2) - (2 * (1.0 / 3.0));\n    dz_ext1 = dz0 - (2 * (1.0 / 3.0));\n    xsv_ext1 = xsb;\n    ysv_ext1 = ysb + 2;\n    zsv_ext1 = zsb;\n  }\n  else\n  {\n    dx_ext1 = dx0 - (2 * (1.0 / 3.0));\n    dy_ext1 = dy0 - (2 * (1.0 / 3.0));\n    dz_ext1 = (dz0 - 2) - (2 * (1.0 / 3.0));\n    xsv_ext1 = xsb;\n    ysv_ext1 = ysb;\n    zsv_ext1 = zsb + 2;\n  }\n  *dx_ext0_ref = dx_ext0;\n  *dy_ext0_ref = dy_ext0;\n  *dz_ext0_ref = dz_ext0;\n  *dx_ext1_ref = dx_ext1;\n  *dy_ext1_ref = dy_ext1;\n  *dz_ext1_ref = dz_ext1;\n  *xsv_ext0_ref = xsv_ext0;\n  *ysv_ext0_ref = ysv_ext0;\n  *zsv_ext0_ref = zsv_ext0;\n  *xsv_ext1_ref = xsv_ext1;\n  *ysv_ext1_ref = ysv_ext1;\n  *zsv_ext1_ref = zsv_ext1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dx_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsb",
                        "type": "int",
                        "definition": [
                            "int zsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx0",
                        "type": "double",
                        "definition": [
                            "double dx0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0",
                        "type": "double",
                        "definition": [
                            "double dy0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz0",
                        "type": "double",
                        "definition": [
                            "double dz0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t aPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t bPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext0",
                        "type": "double",
                        "definition": [
                            "double dx_ext0 = *dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0",
                        "type": "double",
                        "definition": [
                            "double dy_ext0 = *dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0",
                        "type": "double",
                        "definition": [
                            "double dz_ext0 = *dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1",
                        "type": "double",
                        "definition": [
                            "double dx_ext1 = *dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1",
                        "type": "double",
                        "definition": [
                            "double dy_ext1 = *dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1",
                        "type": "double",
                        "definition": [
                            "double dz_ext1 = *dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0",
                        "type": "int",
                        "definition": [
                            "int xsv_ext0 = *xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0",
                        "type": "int",
                        "definition": [
                            "int ysv_ext0 = *ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0",
                        "type": "int",
                        "definition": [
                            "int zsv_ext0 = *zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1",
                        "type": "int",
                        "definition": [
                            "int xsv_ext1 = *xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1",
                        "type": "int",
                        "definition": [
                            "int ysv_ext1 = *ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1",
                        "type": "int",
                        "definition": [
                            "int zsv_ext1 = *zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int8_t",
                        "definition": [
                            "int8_t c = (int8_t) (aPoint & bPoint)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_open_simplex_noise3_3_2_2",
            "header": "",
            "params": [
                "double * const dx_ext0_ref",
                "double * const dy_ext0_ref",
                "double * const dz_ext0_ref",
                "double * const dx_ext1_ref",
                "double * const dy_ext1_ref",
                "double * const dz_ext1_ref",
                "int * const xsv_ext0_ref",
                "int * const ysv_ext0_ref",
                "int * const zsv_ext0_ref",
                "int * const xsv_ext1_ref",
                "int * const ysv_ext1_ref",
                "int * const zsv_ext1_ref",
                "int xsb",
                "int ysb",
                "int zsb",
                "double dx0",
                "double dy0",
                "double dz0",
                "int8_t aPoint",
                "int8_t bPoint"
            ],
            "definition": "void helper_helper_helper_open_simplex_noise3_3_2_2(double * const dx_ext0_ref, double * const dy_ext0_ref, double * const dz_ext0_ref, double * const dx_ext1_ref, double * const dy_ext1_ref, double * const dz_ext1_ref, int * const xsv_ext0_ref, int * const ysv_ext0_ref, int * const zsv_ext0_ref, int * const xsv_ext1_ref, int * const ysv_ext1_ref, int * const zsv_ext1_ref, int xsb, int ysb, int zsb, double dx0, double dy0, double dz0, int8_t aPoint, int8_t bPoint)\n{\n  double dx_ext0 = *dx_ext0_ref;\n  double dy_ext0 = *dy_ext0_ref;\n  double dz_ext0 = *dz_ext0_ref;\n  double dx_ext1 = *dx_ext1_ref;\n  double dy_ext1 = *dy_ext1_ref;\n  double dz_ext1 = *dz_ext1_ref;\n  int xsv_ext0 = *xsv_ext0_ref;\n  int ysv_ext0 = *ysv_ext0_ref;\n  int zsv_ext0 = *zsv_ext0_ref;\n  int xsv_ext1 = *xsv_ext1_ref;\n  int ysv_ext1 = *ysv_ext1_ref;\n  int zsv_ext1 = *zsv_ext1_ref;\n  dx_ext0 = dx0;\n  dy_ext0 = dy0;\n  dz_ext0 = dz0;\n  xsv_ext0 = xsb;\n  ysv_ext0 = ysb;\n  zsv_ext0 = zsb;\n  int8_t c = (int8_t) (aPoint | bPoint);\n  if ((c & 0x01) == 0)\n  {\n    dx_ext1 = (dx0 + 1) - (1.0 / 3.0);\n    dy_ext1 = (dy0 - 1) - (1.0 / 3.0);\n    dz_ext1 = (dz0 - 1) - (1.0 / 3.0);\n    xsv_ext1 = xsb - 1;\n    ysv_ext1 = ysb + 1;\n    zsv_ext1 = zsb + 1;\n  }\n  else\n    if ((c & 0x02) == 0)\n  {\n    dx_ext1 = (dx0 - 1) - (1.0 / 3.0);\n    dy_ext1 = (dy0 + 1) - (1.0 / 3.0);\n    dz_ext1 = (dz0 - 1) - (1.0 / 3.0);\n    xsv_ext1 = xsb + 1;\n    ysv_ext1 = ysb - 1;\n    zsv_ext1 = zsb + 1;\n  }\n  else\n  {\n    dx_ext1 = (dx0 - 1) - (1.0 / 3.0);\n    dy_ext1 = (dy0 - 1) - (1.0 / 3.0);\n    dz_ext1 = (dz0 + 1) - (1.0 / 3.0);\n    xsv_ext1 = xsb + 1;\n    ysv_ext1 = ysb + 1;\n    zsv_ext1 = zsb - 1;\n  }\n  *dx_ext0_ref = dx_ext0;\n  *dy_ext0_ref = dy_ext0;\n  *dz_ext0_ref = dz_ext0;\n  *dx_ext1_ref = dx_ext1;\n  *dy_ext1_ref = dy_ext1;\n  *dz_ext1_ref = dz_ext1;\n  *xsv_ext0_ref = xsv_ext0;\n  *ysv_ext0_ref = ysv_ext0;\n  *zsv_ext0_ref = zsv_ext0;\n  *xsv_ext1_ref = xsv_ext1;\n  *ysv_ext1_ref = ysv_ext1;\n  *zsv_ext1_ref = zsv_ext1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dx_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsb",
                        "type": "int",
                        "definition": [
                            "int zsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx0",
                        "type": "double",
                        "definition": [
                            "double dx0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0",
                        "type": "double",
                        "definition": [
                            "double dy0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz0",
                        "type": "double",
                        "definition": [
                            "double dz0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t aPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t bPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext0",
                        "type": "double",
                        "definition": [
                            "double dx_ext0 = *dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0",
                        "type": "double",
                        "definition": [
                            "double dy_ext0 = *dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0",
                        "type": "double",
                        "definition": [
                            "double dz_ext0 = *dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1",
                        "type": "double",
                        "definition": [
                            "double dx_ext1 = *dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1",
                        "type": "double",
                        "definition": [
                            "double dy_ext1 = *dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1",
                        "type": "double",
                        "definition": [
                            "double dz_ext1 = *dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0",
                        "type": "int",
                        "definition": [
                            "int xsv_ext0 = *xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0",
                        "type": "int",
                        "definition": [
                            "int ysv_ext0 = *ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0",
                        "type": "int",
                        "definition": [
                            "int zsv_ext0 = *zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1",
                        "type": "int",
                        "definition": [
                            "int xsv_ext1 = *xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1",
                        "type": "int",
                        "definition": [
                            "int ysv_ext1 = *ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1",
                        "type": "int",
                        "definition": [
                            "int zsv_ext1 = *zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int8_t",
                        "definition": [
                            "int8_t c = (int8_t) (aPoint | bPoint)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_open_simplex_noise4_3_2_1",
            "header": "",
            "params": [
                "double * const dx_ext0_ref",
                "double * const dy_ext0_ref",
                "double * const dz_ext0_ref",
                "double * const dw_ext0_ref",
                "double * const dx_ext1_ref",
                "double * const dy_ext1_ref",
                "double * const dz_ext1_ref",
                "double * const dw_ext1_ref",
                "double * const dx_ext2_ref",
                "double * const dy_ext2_ref",
                "double * const dz_ext2_ref",
                "double * const dw_ext2_ref",
                "int * const xsv_ext0_ref",
                "int * const ysv_ext0_ref",
                "int * const zsv_ext0_ref",
                "int * const wsv_ext0_ref",
                "int * const xsv_ext1_ref",
                "int * const ysv_ext1_ref",
                "int * const zsv_ext1_ref",
                "int * const wsv_ext1_ref",
                "int * const xsv_ext2_ref",
                "int * const ysv_ext2_ref",
                "int * const zsv_ext2_ref",
                "int * const wsv_ext2_ref",
                "int xsb",
                "int ysb",
                "int zsb",
                "int wsb",
                "double dx0",
                "double dy0",
                "double dz0",
                "double dw0",
                "int8_t aPoint",
                "int8_t bPoint"
            ],
            "definition": "void helper_helper_helper_open_simplex_noise4_3_2_1(double * const dx_ext0_ref, double * const dy_ext0_ref, double * const dz_ext0_ref, double * const dw_ext0_ref, double * const dx_ext1_ref, double * const dy_ext1_ref, double * const dz_ext1_ref, double * const dw_ext1_ref, double * const dx_ext2_ref, double * const dy_ext2_ref, double * const dz_ext2_ref, double * const dw_ext2_ref, int * const xsv_ext0_ref, int * const ysv_ext0_ref, int * const zsv_ext0_ref, int * const wsv_ext0_ref, int * const xsv_ext1_ref, int * const ysv_ext1_ref, int * const zsv_ext1_ref, int * const wsv_ext1_ref, int * const xsv_ext2_ref, int * const ysv_ext2_ref, int * const zsv_ext2_ref, int * const wsv_ext2_ref, int xsb, int ysb, int zsb, int wsb, double dx0, double dy0, double dz0, double dw0, int8_t aPoint, int8_t bPoint)\n{\n  double dx_ext0 = *dx_ext0_ref;\n  double dy_ext0 = *dy_ext0_ref;\n  double dz_ext0 = *dz_ext0_ref;\n  double dw_ext0 = *dw_ext0_ref;\n  double dx_ext1 = *dx_ext1_ref;\n  double dy_ext1 = *dy_ext1_ref;\n  double dz_ext1 = *dz_ext1_ref;\n  double dw_ext1 = *dw_ext1_ref;\n  double dx_ext2 = *dx_ext2_ref;\n  double dy_ext2 = *dy_ext2_ref;\n  double dz_ext2 = *dz_ext2_ref;\n  double dw_ext2 = *dw_ext2_ref;\n  int xsv_ext0 = *xsv_ext0_ref;\n  int ysv_ext0 = *ysv_ext0_ref;\n  int zsv_ext0 = *zsv_ext0_ref;\n  int wsv_ext0 = *wsv_ext0_ref;\n  int xsv_ext1 = *xsv_ext1_ref;\n  int ysv_ext1 = *ysv_ext1_ref;\n  int zsv_ext1 = *zsv_ext1_ref;\n  int wsv_ext1 = *wsv_ext1_ref;\n  int xsv_ext2 = *xsv_ext2_ref;\n  int ysv_ext2 = *ysv_ext2_ref;\n  int zsv_ext2 = *zsv_ext2_ref;\n  int wsv_ext2 = *wsv_ext2_ref;\n  xsv_ext2 = xsb + 1;\n  ysv_ext2 = ysb + 1;\n  zsv_ext2 = zsb + 1;\n  wsv_ext2 = wsb + 1;\n  dx_ext2 = (dx0 - 1) - (4 * 0.309016994374947);\n  dy_ext2 = (dy0 - 1) - (4 * 0.309016994374947);\n  dz_ext2 = (dz0 - 1) - (4 * 0.309016994374947);\n  dw_ext2 = (dw0 - 1) - (4 * 0.309016994374947);\n  int8_t c = (int8_t) (aPoint & bPoint);\n  if ((c & 0x01) != 0)\n  {\n    xsv_ext0 = xsb + 2;\n    xsv_ext1 = xsb + 1;\n    dx_ext0 = (dx0 - 2) - (3 * 0.309016994374947);\n    dx_ext1 = (dx0 - 1) - (3 * 0.309016994374947);\n  }\n  else\n  {\n    xsv_ext0 = (xsv_ext1 = xsb);\n    dx_ext0 = (dx_ext1 = dx0 - (3 * 0.309016994374947));\n  }\n  if ((c & 0x02) != 0)\n  {\n    ysv_ext0 = (ysv_ext1 = ysb + 1);\n    dy_ext0 = (dy_ext1 = (dy0 - 1) - (3 * 0.309016994374947));\n    if ((c & 0x01) == 0)\n    {\n      ysv_ext0 += 1;\n      dy_ext0 -= 1;\n    }\n    else\n    {\n      ysv_ext1 += 1;\n      dy_ext1 -= 1;\n    }\n  }\n  else\n  {\n    ysv_ext0 = (ysv_ext1 = ysb);\n    dy_ext0 = (dy_ext1 = dy0 - (3 * 0.309016994374947));\n  }\n  if ((c & 0x04) != 0)\n  {\n    zsv_ext0 = (zsv_ext1 = zsb + 1);\n    dz_ext0 = (dz_ext1 = (dz0 - 1) - (3 * 0.309016994374947));\n    if ((c & 0x03) == 0)\n    {\n      zsv_ext0 += 1;\n      dz_ext0 -= 1;\n    }\n    else\n    {\n      zsv_ext1 += 1;\n      dz_ext1 -= 1;\n    }\n  }\n  else\n  {\n    zsv_ext0 = (zsv_ext1 = zsb);\n    dz_ext0 = (dz_ext1 = dz0 - (3 * 0.309016994374947));\n  }\n  if ((c & 0x08) != 0)\n  {\n    wsv_ext0 = wsb + 1;\n    wsv_ext1 = wsb + 2;\n    dw_ext0 = (dw0 - 1) - (3 * 0.309016994374947);\n    dw_ext1 = (dw0 - 2) - (3 * 0.309016994374947);\n  }\n  else\n  {\n    wsv_ext0 = (wsv_ext1 = wsb);\n    dw_ext0 = (dw_ext1 = dw0 - (3 * 0.309016994374947));\n  }\n  *dx_ext0_ref = dx_ext0;\n  *dy_ext0_ref = dy_ext0;\n  *dz_ext0_ref = dz_ext0;\n  *dw_ext0_ref = dw_ext0;\n  *dx_ext1_ref = dx_ext1;\n  *dy_ext1_ref = dy_ext1;\n  *dz_ext1_ref = dz_ext1;\n  *dw_ext1_ref = dw_ext1;\n  *dx_ext2_ref = dx_ext2;\n  *dy_ext2_ref = dy_ext2;\n  *dz_ext2_ref = dz_ext2;\n  *dw_ext2_ref = dw_ext2;\n  *xsv_ext0_ref = xsv_ext0;\n  *ysv_ext0_ref = ysv_ext0;\n  *zsv_ext0_ref = zsv_ext0;\n  *wsv_ext0_ref = wsv_ext0;\n  *xsv_ext1_ref = xsv_ext1;\n  *ysv_ext1_ref = ysv_ext1;\n  *zsv_ext1_ref = zsv_ext1;\n  *wsv_ext1_ref = wsv_ext1;\n  *xsv_ext2_ref = xsv_ext2;\n  *ysv_ext2_ref = ysv_ext2;\n  *zsv_ext2_ref = zsv_ext2;\n  *wsv_ext2_ref = wsv_ext2;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dx_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsb",
                        "type": "int",
                        "definition": [
                            "int zsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsb",
                        "type": "int",
                        "definition": [
                            "int wsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx0",
                        "type": "double",
                        "definition": [
                            "double dx0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0",
                        "type": "double",
                        "definition": [
                            "double dy0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz0",
                        "type": "double",
                        "definition": [
                            "double dz0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw0",
                        "type": "double",
                        "definition": [
                            "double dw0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t aPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t bPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext0",
                        "type": "double",
                        "definition": [
                            "double dx_ext0 = *dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0",
                        "type": "double",
                        "definition": [
                            "double dy_ext0 = *dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0",
                        "type": "double",
                        "definition": [
                            "double dz_ext0 = *dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext0",
                        "type": "double",
                        "definition": [
                            "double dw_ext0 = *dw_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1",
                        "type": "double",
                        "definition": [
                            "double dx_ext1 = *dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1",
                        "type": "double",
                        "definition": [
                            "double dy_ext1 = *dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1",
                        "type": "double",
                        "definition": [
                            "double dz_ext1 = *dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext1",
                        "type": "double",
                        "definition": [
                            "double dw_ext1 = *dw_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext2",
                        "type": "double",
                        "definition": [
                            "double dx_ext2 = *dx_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext2",
                        "type": "double",
                        "definition": [
                            "double dy_ext2 = *dy_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext2",
                        "type": "double",
                        "definition": [
                            "double dz_ext2 = *dz_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext2",
                        "type": "double",
                        "definition": [
                            "double dw_ext2 = *dw_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0",
                        "type": "int",
                        "definition": [
                            "int xsv_ext0 = *xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0",
                        "type": "int",
                        "definition": [
                            "int ysv_ext0 = *ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0",
                        "type": "int",
                        "definition": [
                            "int zsv_ext0 = *zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext0",
                        "type": "int",
                        "definition": [
                            "int wsv_ext0 = *wsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1",
                        "type": "int",
                        "definition": [
                            "int xsv_ext1 = *xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1",
                        "type": "int",
                        "definition": [
                            "int ysv_ext1 = *ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1",
                        "type": "int",
                        "definition": [
                            "int zsv_ext1 = *zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext1",
                        "type": "int",
                        "definition": [
                            "int wsv_ext1 = *wsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext2",
                        "type": "int",
                        "definition": [
                            "int xsv_ext2 = *xsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext2",
                        "type": "int",
                        "definition": [
                            "int ysv_ext2 = *ysv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext2",
                        "type": "int",
                        "definition": [
                            "int zsv_ext2 = *zsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext2",
                        "type": "int",
                        "definition": [
                            "int wsv_ext2 = *wsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int8_t",
                        "definition": [
                            "int8_t c = (int8_t) (aPoint & bPoint)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_open_simplex_noise4_3_2_2",
            "header": "",
            "params": [
                "double * const dx_ext0_ref",
                "double * const dy_ext0_ref",
                "double * const dz_ext0_ref",
                "double * const dw_ext0_ref",
                "double * const dx_ext1_ref",
                "double * const dy_ext1_ref",
                "double * const dz_ext1_ref",
                "double * const dw_ext1_ref",
                "double * const dx_ext2_ref",
                "double * const dy_ext2_ref",
                "double * const dz_ext2_ref",
                "double * const dw_ext2_ref",
                "int * const xsv_ext0_ref",
                "int * const ysv_ext0_ref",
                "int * const zsv_ext0_ref",
                "int * const wsv_ext0_ref",
                "int * const xsv_ext1_ref",
                "int * const ysv_ext1_ref",
                "int * const zsv_ext1_ref",
                "int * const wsv_ext1_ref",
                "int * const xsv_ext2_ref",
                "int * const ysv_ext2_ref",
                "int * const zsv_ext2_ref",
                "int * const wsv_ext2_ref",
                "int xsb",
                "int ysb",
                "int zsb",
                "int wsb",
                "double dx0",
                "double dy0",
                "double dz0",
                "double dw0",
                "int8_t aPoint",
                "int8_t bPoint"
            ],
            "definition": "void helper_helper_helper_open_simplex_noise4_3_2_2(double * const dx_ext0_ref, double * const dy_ext0_ref, double * const dz_ext0_ref, double * const dw_ext0_ref, double * const dx_ext1_ref, double * const dy_ext1_ref, double * const dz_ext1_ref, double * const dw_ext1_ref, double * const dx_ext2_ref, double * const dy_ext2_ref, double * const dz_ext2_ref, double * const dw_ext2_ref, int * const xsv_ext0_ref, int * const ysv_ext0_ref, int * const zsv_ext0_ref, int * const wsv_ext0_ref, int * const xsv_ext1_ref, int * const ysv_ext1_ref, int * const zsv_ext1_ref, int * const wsv_ext1_ref, int * const xsv_ext2_ref, int * const ysv_ext2_ref, int * const zsv_ext2_ref, int * const wsv_ext2_ref, int xsb, int ysb, int zsb, int wsb, double dx0, double dy0, double dz0, double dw0, int8_t aPoint, int8_t bPoint)\n{\n  double dx_ext0 = *dx_ext0_ref;\n  double dy_ext0 = *dy_ext0_ref;\n  double dz_ext0 = *dz_ext0_ref;\n  double dw_ext0 = *dw_ext0_ref;\n  double dx_ext1 = *dx_ext1_ref;\n  double dy_ext1 = *dy_ext1_ref;\n  double dz_ext1 = *dz_ext1_ref;\n  double dw_ext1 = *dw_ext1_ref;\n  double dx_ext2 = *dx_ext2_ref;\n  double dy_ext2 = *dy_ext2_ref;\n  double dz_ext2 = *dz_ext2_ref;\n  double dw_ext2 = *dw_ext2_ref;\n  int xsv_ext0 = *xsv_ext0_ref;\n  int ysv_ext0 = *ysv_ext0_ref;\n  int zsv_ext0 = *zsv_ext0_ref;\n  int wsv_ext0 = *wsv_ext0_ref;\n  int xsv_ext1 = *xsv_ext1_ref;\n  int ysv_ext1 = *ysv_ext1_ref;\n  int zsv_ext1 = *zsv_ext1_ref;\n  int wsv_ext1 = *wsv_ext1_ref;\n  int xsv_ext2 = *xsv_ext2_ref;\n  int ysv_ext2 = *ysv_ext2_ref;\n  int zsv_ext2 = *zsv_ext2_ref;\n  int wsv_ext2 = *wsv_ext2_ref;\n  int8_t c1 = (int8_t) (aPoint & bPoint);\n  int8_t c2 = (int8_t) (aPoint | bPoint);\n  xsv_ext0 = (xsv_ext1 = xsb);\n  ysv_ext0 = (ysv_ext1 = ysb);\n  zsv_ext0 = (zsv_ext1 = zsb);\n  wsv_ext0 = (wsv_ext1 = wsb);\n  dx_ext0 = dx0 - 0.309016994374947;\n  dy_ext0 = dy0 - 0.309016994374947;\n  dz_ext0 = dz0 - 0.309016994374947;\n  dw_ext0 = dw0 - 0.309016994374947;\n  dx_ext1 = dx0 - (2 * 0.309016994374947);\n  dy_ext1 = dy0 - (2 * 0.309016994374947);\n  dz_ext1 = dz0 - (2 * 0.309016994374947);\n  dw_ext1 = dw0 - (2 * 0.309016994374947);\n  if ((c1 & 0x01) != 0)\n  {\n    xsv_ext0 += 1;\n    dx_ext0 -= 1;\n    xsv_ext1 += 2;\n    dx_ext1 -= 2;\n  }\n  else\n    if ((c1 & 0x02) != 0)\n  {\n    ysv_ext0 += 1;\n    dy_ext0 -= 1;\n    ysv_ext1 += 2;\n    dy_ext1 -= 2;\n  }\n  else\n    if ((c1 & 0x04) != 0)\n  {\n    zsv_ext0 += 1;\n    dz_ext0 -= 1;\n    zsv_ext1 += 2;\n    dz_ext1 -= 2;\n  }\n  else\n  {\n    wsv_ext0 += 1;\n    dw_ext0 -= 1;\n    wsv_ext1 += 2;\n    dw_ext1 -= 2;\n  }\n  xsv_ext2 = xsb + 1;\n  ysv_ext2 = ysb + 1;\n  zsv_ext2 = zsb + 1;\n  wsv_ext2 = wsb + 1;\n  dx_ext2 = (dx0 - 1) - (2 * 0.309016994374947);\n  dy_ext2 = (dy0 - 1) - (2 * 0.309016994374947);\n  dz_ext2 = (dz0 - 1) - (2 * 0.309016994374947);\n  dw_ext2 = (dw0 - 1) - (2 * 0.309016994374947);\n  if ((c2 & 0x01) == 0)\n  {\n    xsv_ext2 -= 2;\n    dx_ext2 += 2;\n  }\n  else\n    if ((c2 & 0x02) == 0)\n  {\n    ysv_ext2 -= 2;\n    dy_ext2 += 2;\n  }\n  else\n    if ((c2 & 0x04) == 0)\n  {\n    zsv_ext2 -= 2;\n    dz_ext2 += 2;\n  }\n  else\n  {\n    wsv_ext2 -= 2;\n    dw_ext2 += 2;\n  }\n  *dx_ext0_ref = dx_ext0;\n  *dy_ext0_ref = dy_ext0;\n  *dz_ext0_ref = dz_ext0;\n  *dw_ext0_ref = dw_ext0;\n  *dx_ext1_ref = dx_ext1;\n  *dy_ext1_ref = dy_ext1;\n  *dz_ext1_ref = dz_ext1;\n  *dw_ext1_ref = dw_ext1;\n  *dx_ext2_ref = dx_ext2;\n  *dy_ext2_ref = dy_ext2;\n  *dz_ext2_ref = dz_ext2;\n  *dw_ext2_ref = dw_ext2;\n  *xsv_ext0_ref = xsv_ext0;\n  *ysv_ext0_ref = ysv_ext0;\n  *zsv_ext0_ref = zsv_ext0;\n  *wsv_ext0_ref = wsv_ext0;\n  *xsv_ext1_ref = xsv_ext1;\n  *ysv_ext1_ref = ysv_ext1;\n  *zsv_ext1_ref = zsv_ext1;\n  *wsv_ext1_ref = wsv_ext1;\n  *xsv_ext2_ref = xsv_ext2;\n  *ysv_ext2_ref = ysv_ext2;\n  *zsv_ext2_ref = zsv_ext2;\n  *wsv_ext2_ref = wsv_ext2;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dx_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsb",
                        "type": "int",
                        "definition": [
                            "int zsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsb",
                        "type": "int",
                        "definition": [
                            "int wsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx0",
                        "type": "double",
                        "definition": [
                            "double dx0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0",
                        "type": "double",
                        "definition": [
                            "double dy0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz0",
                        "type": "double",
                        "definition": [
                            "double dz0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw0",
                        "type": "double",
                        "definition": [
                            "double dw0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t aPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t bPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext0",
                        "type": "double",
                        "definition": [
                            "double dx_ext0 = *dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0",
                        "type": "double",
                        "definition": [
                            "double dy_ext0 = *dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0",
                        "type": "double",
                        "definition": [
                            "double dz_ext0 = *dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext0",
                        "type": "double",
                        "definition": [
                            "double dw_ext0 = *dw_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1",
                        "type": "double",
                        "definition": [
                            "double dx_ext1 = *dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1",
                        "type": "double",
                        "definition": [
                            "double dy_ext1 = *dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1",
                        "type": "double",
                        "definition": [
                            "double dz_ext1 = *dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext1",
                        "type": "double",
                        "definition": [
                            "double dw_ext1 = *dw_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext2",
                        "type": "double",
                        "definition": [
                            "double dx_ext2 = *dx_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext2",
                        "type": "double",
                        "definition": [
                            "double dy_ext2 = *dy_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext2",
                        "type": "double",
                        "definition": [
                            "double dz_ext2 = *dz_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext2",
                        "type": "double",
                        "definition": [
                            "double dw_ext2 = *dw_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0",
                        "type": "int",
                        "definition": [
                            "int xsv_ext0 = *xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0",
                        "type": "int",
                        "definition": [
                            "int ysv_ext0 = *ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0",
                        "type": "int",
                        "definition": [
                            "int zsv_ext0 = *zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext0",
                        "type": "int",
                        "definition": [
                            "int wsv_ext0 = *wsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1",
                        "type": "int",
                        "definition": [
                            "int xsv_ext1 = *xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1",
                        "type": "int",
                        "definition": [
                            "int ysv_ext1 = *ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1",
                        "type": "int",
                        "definition": [
                            "int zsv_ext1 = *zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext1",
                        "type": "int",
                        "definition": [
                            "int wsv_ext1 = *wsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext2",
                        "type": "int",
                        "definition": [
                            "int xsv_ext2 = *xsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext2",
                        "type": "int",
                        "definition": [
                            "int ysv_ext2 = *ysv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext2",
                        "type": "int",
                        "definition": [
                            "int zsv_ext2 = *zsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext2",
                        "type": "int",
                        "definition": [
                            "int wsv_ext2 = *wsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c1",
                        "type": "int8_t",
                        "definition": [
                            "int8_t c1 = (int8_t) (aPoint & bPoint)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c2",
                        "type": "int8_t",
                        "definition": [
                            "int8_t c2 = (int8_t) (aPoint | bPoint)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_open_simplex_noise4_4_2_1",
            "header": "",
            "params": [
                "double * const dx_ext0_ref",
                "double * const dy_ext0_ref",
                "double * const dz_ext0_ref",
                "double * const dw_ext0_ref",
                "double * const dx_ext1_ref",
                "double * const dy_ext1_ref",
                "double * const dz_ext1_ref",
                "double * const dw_ext1_ref",
                "double * const dx_ext2_ref",
                "double * const dy_ext2_ref",
                "double * const dz_ext2_ref",
                "double * const dw_ext2_ref",
                "int * const xsv_ext0_ref",
                "int * const ysv_ext0_ref",
                "int * const zsv_ext0_ref",
                "int * const wsv_ext0_ref",
                "int * const xsv_ext1_ref",
                "int * const ysv_ext1_ref",
                "int * const zsv_ext1_ref",
                "int * const wsv_ext1_ref",
                "int * const xsv_ext2_ref",
                "int * const ysv_ext2_ref",
                "int * const zsv_ext2_ref",
                "int * const wsv_ext2_ref",
                "int xsb",
                "int ysb",
                "int zsb",
                "int wsb",
                "double dx0",
                "double dy0",
                "double dz0",
                "double dw0",
                "int8_t aPoint",
                "int8_t bPoint"
            ],
            "definition": "void helper_helper_helper_open_simplex_noise4_4_2_1(double * const dx_ext0_ref, double * const dy_ext0_ref, double * const dz_ext0_ref, double * const dw_ext0_ref, double * const dx_ext1_ref, double * const dy_ext1_ref, double * const dz_ext1_ref, double * const dw_ext1_ref, double * const dx_ext2_ref, double * const dy_ext2_ref, double * const dz_ext2_ref, double * const dw_ext2_ref, int * const xsv_ext0_ref, int * const ysv_ext0_ref, int * const zsv_ext0_ref, int * const wsv_ext0_ref, int * const xsv_ext1_ref, int * const ysv_ext1_ref, int * const zsv_ext1_ref, int * const wsv_ext1_ref, int * const xsv_ext2_ref, int * const ysv_ext2_ref, int * const zsv_ext2_ref, int * const wsv_ext2_ref, int xsb, int ysb, int zsb, int wsb, double dx0, double dy0, double dz0, double dw0, int8_t aPoint, int8_t bPoint)\n{\n  double dx_ext0 = *dx_ext0_ref;\n  double dy_ext0 = *dy_ext0_ref;\n  double dz_ext0 = *dz_ext0_ref;\n  double dw_ext0 = *dw_ext0_ref;\n  double dx_ext1 = *dx_ext1_ref;\n  double dy_ext1 = *dy_ext1_ref;\n  double dz_ext1 = *dz_ext1_ref;\n  double dw_ext1 = *dw_ext1_ref;\n  double dx_ext2 = *dx_ext2_ref;\n  double dy_ext2 = *dy_ext2_ref;\n  double dz_ext2 = *dz_ext2_ref;\n  double dw_ext2 = *dw_ext2_ref;\n  int xsv_ext0 = *xsv_ext0_ref;\n  int ysv_ext0 = *ysv_ext0_ref;\n  int zsv_ext0 = *zsv_ext0_ref;\n  int wsv_ext0 = *wsv_ext0_ref;\n  int xsv_ext1 = *xsv_ext1_ref;\n  int ysv_ext1 = *ysv_ext1_ref;\n  int zsv_ext1 = *zsv_ext1_ref;\n  int wsv_ext1 = *wsv_ext1_ref;\n  int xsv_ext2 = *xsv_ext2_ref;\n  int ysv_ext2 = *ysv_ext2_ref;\n  int zsv_ext2 = *zsv_ext2_ref;\n  int wsv_ext2 = *wsv_ext2_ref;\n  xsv_ext2 = xsb;\n  ysv_ext2 = ysb;\n  zsv_ext2 = zsb;\n  wsv_ext2 = wsb;\n  dx_ext2 = dx0;\n  dy_ext2 = dy0;\n  dz_ext2 = dz0;\n  dw_ext2 = dw0;\n  int8_t c = (int8_t) (aPoint | bPoint);\n  if ((c & 0x01) == 0)\n  {\n    xsv_ext0 = xsb - 1;\n    xsv_ext1 = xsb;\n    dx_ext0 = (dx0 + 1) - 0.309016994374947;\n    dx_ext1 = dx0 - 0.309016994374947;\n  }\n  else\n  {\n    xsv_ext0 = (xsv_ext1 = xsb + 1);\n    dx_ext0 = (dx_ext1 = (dx0 - 1) - 0.309016994374947);\n  }\n  if ((c & 0x02) == 0)\n  {\n    ysv_ext0 = (ysv_ext1 = ysb);\n    dy_ext0 = (dy_ext1 = dy0 - 0.309016994374947);\n    if ((c & 0x01) == 0x01)\n    {\n      ysv_ext0 -= 1;\n      dy_ext0 += 1;\n    }\n    else\n    {\n      ysv_ext1 -= 1;\n      dy_ext1 += 1;\n    }\n  }\n  else\n  {\n    ysv_ext0 = (ysv_ext1 = ysb + 1);\n    dy_ext0 = (dy_ext1 = (dy0 - 1) - 0.309016994374947);\n  }\n  if ((c & 0x04) == 0)\n  {\n    zsv_ext0 = (zsv_ext1 = zsb);\n    dz_ext0 = (dz_ext1 = dz0 - 0.309016994374947);\n    if ((c & 0x03) == 0x03)\n    {\n      zsv_ext0 -= 1;\n      dz_ext0 += 1;\n    }\n    else\n    {\n      zsv_ext1 -= 1;\n      dz_ext1 += 1;\n    }\n  }\n  else\n  {\n    zsv_ext0 = (zsv_ext1 = zsb + 1);\n    dz_ext0 = (dz_ext1 = (dz0 - 1) - 0.309016994374947);\n  }\n  if ((c & 0x08) == 0)\n  {\n    wsv_ext0 = wsb;\n    wsv_ext1 = wsb - 1;\n    dw_ext0 = dw0 - 0.309016994374947;\n    dw_ext1 = (dw0 + 1) - 0.309016994374947;\n  }\n  else\n  {\n    wsv_ext0 = (wsv_ext1 = wsb + 1);\n    dw_ext0 = (dw_ext1 = (dw0 - 1) - 0.309016994374947);\n  }\n  *dx_ext0_ref = dx_ext0;\n  *dy_ext0_ref = dy_ext0;\n  *dz_ext0_ref = dz_ext0;\n  *dw_ext0_ref = dw_ext0;\n  *dx_ext1_ref = dx_ext1;\n  *dy_ext1_ref = dy_ext1;\n  *dz_ext1_ref = dz_ext1;\n  *dw_ext1_ref = dw_ext1;\n  *dx_ext2_ref = dx_ext2;\n  *dy_ext2_ref = dy_ext2;\n  *dz_ext2_ref = dz_ext2;\n  *dw_ext2_ref = dw_ext2;\n  *xsv_ext0_ref = xsv_ext0;\n  *ysv_ext0_ref = ysv_ext0;\n  *zsv_ext0_ref = zsv_ext0;\n  *wsv_ext0_ref = wsv_ext0;\n  *xsv_ext1_ref = xsv_ext1;\n  *ysv_ext1_ref = ysv_ext1;\n  *zsv_ext1_ref = zsv_ext1;\n  *wsv_ext1_ref = wsv_ext1;\n  *xsv_ext2_ref = xsv_ext2;\n  *ysv_ext2_ref = ysv_ext2;\n  *zsv_ext2_ref = zsv_ext2;\n  *wsv_ext2_ref = wsv_ext2;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dx_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsb",
                        "type": "int",
                        "definition": [
                            "int zsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsb",
                        "type": "int",
                        "definition": [
                            "int wsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx0",
                        "type": "double",
                        "definition": [
                            "double dx0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0",
                        "type": "double",
                        "definition": [
                            "double dy0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz0",
                        "type": "double",
                        "definition": [
                            "double dz0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw0",
                        "type": "double",
                        "definition": [
                            "double dw0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t aPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t bPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext0",
                        "type": "double",
                        "definition": [
                            "double dx_ext0 = *dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0",
                        "type": "double",
                        "definition": [
                            "double dy_ext0 = *dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0",
                        "type": "double",
                        "definition": [
                            "double dz_ext0 = *dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext0",
                        "type": "double",
                        "definition": [
                            "double dw_ext0 = *dw_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1",
                        "type": "double",
                        "definition": [
                            "double dx_ext1 = *dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1",
                        "type": "double",
                        "definition": [
                            "double dy_ext1 = *dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1",
                        "type": "double",
                        "definition": [
                            "double dz_ext1 = *dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext1",
                        "type": "double",
                        "definition": [
                            "double dw_ext1 = *dw_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext2",
                        "type": "double",
                        "definition": [
                            "double dx_ext2 = *dx_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext2",
                        "type": "double",
                        "definition": [
                            "double dy_ext2 = *dy_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext2",
                        "type": "double",
                        "definition": [
                            "double dz_ext2 = *dz_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext2",
                        "type": "double",
                        "definition": [
                            "double dw_ext2 = *dw_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0",
                        "type": "int",
                        "definition": [
                            "int xsv_ext0 = *xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0",
                        "type": "int",
                        "definition": [
                            "int ysv_ext0 = *ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0",
                        "type": "int",
                        "definition": [
                            "int zsv_ext0 = *zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext0",
                        "type": "int",
                        "definition": [
                            "int wsv_ext0 = *wsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1",
                        "type": "int",
                        "definition": [
                            "int xsv_ext1 = *xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1",
                        "type": "int",
                        "definition": [
                            "int ysv_ext1 = *ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1",
                        "type": "int",
                        "definition": [
                            "int zsv_ext1 = *zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext1",
                        "type": "int",
                        "definition": [
                            "int wsv_ext1 = *wsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext2",
                        "type": "int",
                        "definition": [
                            "int xsv_ext2 = *xsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext2",
                        "type": "int",
                        "definition": [
                            "int ysv_ext2 = *ysv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext2",
                        "type": "int",
                        "definition": [
                            "int zsv_ext2 = *zsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext2",
                        "type": "int",
                        "definition": [
                            "int wsv_ext2 = *wsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int8_t",
                        "definition": [
                            "int8_t c = (int8_t) (aPoint | bPoint)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_open_simplex_noise4_4_2_2",
            "header": "",
            "params": [
                "double * const dx_ext0_ref",
                "double * const dy_ext0_ref",
                "double * const dz_ext0_ref",
                "double * const dw_ext0_ref",
                "double * const dx_ext1_ref",
                "double * const dy_ext1_ref",
                "double * const dz_ext1_ref",
                "double * const dw_ext1_ref",
                "double * const dx_ext2_ref",
                "double * const dy_ext2_ref",
                "double * const dz_ext2_ref",
                "double * const dw_ext2_ref",
                "int * const xsv_ext0_ref",
                "int * const ysv_ext0_ref",
                "int * const zsv_ext0_ref",
                "int * const wsv_ext0_ref",
                "int * const xsv_ext1_ref",
                "int * const ysv_ext1_ref",
                "int * const zsv_ext1_ref",
                "int * const wsv_ext1_ref",
                "int * const xsv_ext2_ref",
                "int * const ysv_ext2_ref",
                "int * const zsv_ext2_ref",
                "int * const wsv_ext2_ref",
                "int xsb",
                "int ysb",
                "int zsb",
                "int wsb",
                "double dx0",
                "double dy0",
                "double dz0",
                "double dw0",
                "int8_t aPoint",
                "int8_t bPoint"
            ],
            "definition": "void helper_helper_helper_open_simplex_noise4_4_2_2(double * const dx_ext0_ref, double * const dy_ext0_ref, double * const dz_ext0_ref, double * const dw_ext0_ref, double * const dx_ext1_ref, double * const dy_ext1_ref, double * const dz_ext1_ref, double * const dw_ext1_ref, double * const dx_ext2_ref, double * const dy_ext2_ref, double * const dz_ext2_ref, double * const dw_ext2_ref, int * const xsv_ext0_ref, int * const ysv_ext0_ref, int * const zsv_ext0_ref, int * const wsv_ext0_ref, int * const xsv_ext1_ref, int * const ysv_ext1_ref, int * const zsv_ext1_ref, int * const wsv_ext1_ref, int * const xsv_ext2_ref, int * const ysv_ext2_ref, int * const zsv_ext2_ref, int * const wsv_ext2_ref, int xsb, int ysb, int zsb, int wsb, double dx0, double dy0, double dz0, double dw0, int8_t aPoint, int8_t bPoint)\n{\n  double dx_ext0 = *dx_ext0_ref;\n  double dy_ext0 = *dy_ext0_ref;\n  double dz_ext0 = *dz_ext0_ref;\n  double dw_ext0 = *dw_ext0_ref;\n  double dx_ext1 = *dx_ext1_ref;\n  double dy_ext1 = *dy_ext1_ref;\n  double dz_ext1 = *dz_ext1_ref;\n  double dw_ext1 = *dw_ext1_ref;\n  double dx_ext2 = *dx_ext2_ref;\n  double dy_ext2 = *dy_ext2_ref;\n  double dz_ext2 = *dz_ext2_ref;\n  double dw_ext2 = *dw_ext2_ref;\n  int xsv_ext0 = *xsv_ext0_ref;\n  int ysv_ext0 = *ysv_ext0_ref;\n  int zsv_ext0 = *zsv_ext0_ref;\n  int wsv_ext0 = *wsv_ext0_ref;\n  int xsv_ext1 = *xsv_ext1_ref;\n  int ysv_ext1 = *ysv_ext1_ref;\n  int zsv_ext1 = *zsv_ext1_ref;\n  int wsv_ext1 = *wsv_ext1_ref;\n  int xsv_ext2 = *xsv_ext2_ref;\n  int ysv_ext2 = *ysv_ext2_ref;\n  int zsv_ext2 = *zsv_ext2_ref;\n  int wsv_ext2 = *wsv_ext2_ref;\n  int8_t c1 = (int8_t) (aPoint | bPoint);\n  int8_t c2 = (int8_t) (aPoint & bPoint);\n  if ((c1 & 0x01) == 0)\n  {\n    xsv_ext0 = xsb;\n    xsv_ext1 = xsb - 1;\n    dx_ext0 = dx0 - (3 * 0.309016994374947);\n    dx_ext1 = (dx0 + 1) - (2 * 0.309016994374947);\n  }\n  else\n  {\n    xsv_ext0 = (xsv_ext1 = xsb + 1);\n    dx_ext0 = (dx0 - 1) - (3 * 0.309016994374947);\n    dx_ext1 = (dx0 - 1) - (2 * 0.309016994374947);\n  }\n  if ((c1 & 0x02) == 0)\n  {\n    ysv_ext0 = ysb;\n    ysv_ext1 = ysb - 1;\n    dy_ext0 = dy0 - (3 * 0.309016994374947);\n    dy_ext1 = (dy0 + 1) - (2 * 0.309016994374947);\n  }\n  else\n  {\n    ysv_ext0 = (ysv_ext1 = ysb + 1);\n    dy_ext0 = (dy0 - 1) - (3 * 0.309016994374947);\n    dy_ext1 = (dy0 - 1) - (2 * 0.309016994374947);\n  }\n  if ((c1 & 0x04) == 0)\n  {\n    zsv_ext0 = zsb;\n    zsv_ext1 = zsb - 1;\n    dz_ext0 = dz0 - (3 * 0.309016994374947);\n    dz_ext1 = (dz0 + 1) - (2 * 0.309016994374947);\n  }\n  else\n  {\n    zsv_ext0 = (zsv_ext1 = zsb + 1);\n    dz_ext0 = (dz0 - 1) - (3 * 0.309016994374947);\n    dz_ext1 = (dz0 - 1) - (2 * 0.309016994374947);\n  }\n  if ((c1 & 0x08) == 0)\n  {\n    wsv_ext0 = wsb;\n    wsv_ext1 = wsb - 1;\n    dw_ext0 = dw0 - (3 * 0.309016994374947);\n    dw_ext1 = (dw0 + 1) - (2 * 0.309016994374947);\n  }\n  else\n  {\n    wsv_ext0 = (wsv_ext1 = wsb + 1);\n    dw_ext0 = (dw0 - 1) - (3 * 0.309016994374947);\n    dw_ext1 = (dw0 - 1) - (2 * 0.309016994374947);\n  }\n  xsv_ext2 = xsb;\n  ysv_ext2 = ysb;\n  zsv_ext2 = zsb;\n  wsv_ext2 = wsb;\n  dx_ext2 = dx0 - (2 * 0.309016994374947);\n  dy_ext2 = dy0 - (2 * 0.309016994374947);\n  dz_ext2 = dz0 - (2 * 0.309016994374947);\n  dw_ext2 = dw0 - (2 * 0.309016994374947);\n  if ((c2 & 0x01) != 0)\n  {\n    xsv_ext2 += 2;\n    dx_ext2 -= 2;\n  }\n  else\n    if ((c2 & 0x02) != 0)\n  {\n    ysv_ext2 += 2;\n    dy_ext2 -= 2;\n  }\n  else\n    if ((c2 & 0x04) != 0)\n  {\n    zsv_ext2 += 2;\n    dz_ext2 -= 2;\n  }\n  else\n  {\n    wsv_ext2 += 2;\n    dw_ext2 -= 2;\n  }\n  *dx_ext0_ref = dx_ext0;\n  *dy_ext0_ref = dy_ext0;\n  *dz_ext0_ref = dz_ext0;\n  *dw_ext0_ref = dw_ext0;\n  *dx_ext1_ref = dx_ext1;\n  *dy_ext1_ref = dy_ext1;\n  *dz_ext1_ref = dz_ext1;\n  *dw_ext1_ref = dw_ext1;\n  *dx_ext2_ref = dx_ext2;\n  *dy_ext2_ref = dy_ext2;\n  *dz_ext2_ref = dz_ext2;\n  *dw_ext2_ref = dw_ext2;\n  *xsv_ext0_ref = xsv_ext0;\n  *ysv_ext0_ref = ysv_ext0;\n  *zsv_ext0_ref = zsv_ext0;\n  *wsv_ext0_ref = wsv_ext0;\n  *xsv_ext1_ref = xsv_ext1;\n  *ysv_ext1_ref = ysv_ext1;\n  *zsv_ext1_ref = zsv_ext1;\n  *wsv_ext1_ref = wsv_ext1;\n  *xsv_ext2_ref = xsv_ext2;\n  *ysv_ext2_ref = ysv_ext2;\n  *zsv_ext2_ref = zsv_ext2;\n  *wsv_ext2_ref = wsv_ext2;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dx_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext0_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext1_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dx_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dy_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dz_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext2_ref",
                        "type": "double * const",
                        "definition": [
                            "double * const dw_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext0_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ysv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const zsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const wsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsb",
                        "type": "int",
                        "definition": [
                            "int xsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysb",
                        "type": "int",
                        "definition": [
                            "int ysb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsb",
                        "type": "int",
                        "definition": [
                            "int zsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsb",
                        "type": "int",
                        "definition": [
                            "int wsb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx0",
                        "type": "double",
                        "definition": [
                            "double dx0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy0",
                        "type": "double",
                        "definition": [
                            "double dy0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz0",
                        "type": "double",
                        "definition": [
                            "double dz0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw0",
                        "type": "double",
                        "definition": [
                            "double dw0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t aPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bPoint",
                        "type": "int8_t",
                        "definition": [
                            "int8_t bPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext0",
                        "type": "double",
                        "definition": [
                            "double dx_ext0 = *dx_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext0",
                        "type": "double",
                        "definition": [
                            "double dy_ext0 = *dy_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext0",
                        "type": "double",
                        "definition": [
                            "double dz_ext0 = *dz_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext0",
                        "type": "double",
                        "definition": [
                            "double dw_ext0 = *dw_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext1",
                        "type": "double",
                        "definition": [
                            "double dx_ext1 = *dx_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext1",
                        "type": "double",
                        "definition": [
                            "double dy_ext1 = *dy_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext1",
                        "type": "double",
                        "definition": [
                            "double dz_ext1 = *dz_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext1",
                        "type": "double",
                        "definition": [
                            "double dw_ext1 = *dw_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dx_ext2",
                        "type": "double",
                        "definition": [
                            "double dx_ext2 = *dx_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dy_ext2",
                        "type": "double",
                        "definition": [
                            "double dy_ext2 = *dy_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dz_ext2",
                        "type": "double",
                        "definition": [
                            "double dz_ext2 = *dz_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dw_ext2",
                        "type": "double",
                        "definition": [
                            "double dw_ext2 = *dw_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext0",
                        "type": "int",
                        "definition": [
                            "int xsv_ext0 = *xsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext0",
                        "type": "int",
                        "definition": [
                            "int ysv_ext0 = *ysv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext0",
                        "type": "int",
                        "definition": [
                            "int zsv_ext0 = *zsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext0",
                        "type": "int",
                        "definition": [
                            "int wsv_ext0 = *wsv_ext0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext1",
                        "type": "int",
                        "definition": [
                            "int xsv_ext1 = *xsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext1",
                        "type": "int",
                        "definition": [
                            "int ysv_ext1 = *ysv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext1",
                        "type": "int",
                        "definition": [
                            "int zsv_ext1 = *zsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext1",
                        "type": "int",
                        "definition": [
                            "int wsv_ext1 = *wsv_ext1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xsv_ext2",
                        "type": "int",
                        "definition": [
                            "int xsv_ext2 = *xsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ysv_ext2",
                        "type": "int",
                        "definition": [
                            "int ysv_ext2 = *ysv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zsv_ext2",
                        "type": "int",
                        "definition": [
                            "int zsv_ext2 = *zsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsv_ext2",
                        "type": "int",
                        "definition": [
                            "int wsv_ext2 = *wsv_ext2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c1",
                        "type": "int8_t",
                        "definition": [
                            "int8_t c1 = (int8_t) (aPoint | bPoint)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c2",
                        "type": "int8_t",
                        "definition": [
                            "int8_t c2 = (int8_t) (aPoint & bPoint)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_ops_stitch_horizontal",
            "header": "heman_image *heman_ops_stitch_horizontal(heman_image **images, int count)",
            "params": [
                "heman_image **images",
                "int count"
            ],
            "definition": "heman_image *heman_ops_stitch_horizontal(heman_image **images, int count)\n{\n  assert(count > 0);\n  int width = images[0]->width;\n  int height = images[0]->height;\n  int nbands = images[0]->nbands;\n  for (int i = 1; i < count; i += 1)\n  {\n    assert(images[i]->width == width);\n    assert(images[i]->height == height);\n    assert(images[i]->nbands == nbands);\n  }\n\n  heman_image *result = heman_image_create(width * count, height, nbands);\n  int y;\n  #pragma omp parallel for\n  for (y = 0; y < height; y += 1)\n  {\n    for (int tile = 0; tile < count; tile += 1)\n    {\n      copy_row(images[tile], result, tile * width, y);\n    }\n\n  }\n\n  return result;\n}\n\n",
            "calle": [
                "assert",
                "copy_row",
                "heman_image_create"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "images",
                        "type": "heman_image **",
                        "definition": [
                            "heman_image **images"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width = images[0]->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height = images[0]->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nbands",
                        "type": "int",
                        "definition": [
                            "int nbands = images[0]->nbands"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *result = heman_image_create(width * count, height, nbands)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tile",
                        "type": "int",
                        "definition": [
                            "int tile = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_ops_stitch_vertical",
            "header": "heman_image *heman_ops_stitch_vertical(heman_image **images, int count)",
            "params": [
                "heman_image **images",
                "int count"
            ],
            "definition": "heman_image *heman_ops_stitch_vertical(heman_image **images, int count)\n{\n  assert(count > 0);\n  int width = images[0]->width;\n  int height = images[0]->height;\n  int nbands = images[0]->nbands;\n  for (int i = 1; i < count; i += 1)\n  {\n    assert(images[i]->width == width);\n    assert(images[i]->height == height);\n    assert(images[i]->nbands == nbands);\n  }\n\n  heman_image *result = heman_image_create(width, height * count, nbands);\n  int size = (width * height) * nbands;\n  float *dst = result->data;\n  unsigned int dst_idx = 0;\n  for (int tile = 0; tile < count; tile += 1)\n  {\n    memcpy(dst, images[tile]->data, size * (sizeof(float)));\n    dst_idx += size;\n  }\n\n  return result;\n}\n\n",
            "calle": [
                "assert",
                "heman_image_create",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "images",
                        "type": "heman_image **",
                        "definition": [
                            "heman_image **images"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width = images[0]->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height = images[0]->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nbands",
                        "type": "int",
                        "definition": [
                            "int nbands = images[0]->nbands"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *result = heman_image_create(width, height * count, nbands)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = (width * height) * nbands"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float *",
                        "definition": [
                            "float *dst = result->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tile",
                        "type": "int",
                        "definition": [
                            "int tile = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_ops_normalize_f32",
            "header": "heman_image *heman_ops_normalize_f32(heman_image *source, float minval, float maxval)",
            "params": [
                "heman_image *source",
                "float minv",
                "float maxv"
            ],
            "definition": "heman_image *heman_ops_normalize_f32(heman_image *source, float minv, float maxv)\n{\n  heman_image *result = heman_image_create(source->width, source->height, source->nbands);\n  float *src = source->data;\n  unsigned int src_idx = 0;\n  float *dst = result->data;\n  float scale = 1.0f / (maxv - minv);\n  int size = (source->height * source->width) * source->nbands;\n  for (int i = 0; i < size; i += 1)\n  {\n    float v = (src[src_idx] - minv) * scale;\n    src_idx += 1;\n    *(dst++) = (0 > ((1 > v) ? (v) : (1))) ? (0) : ((1 > v) ? (v) : (1));\n  }\n\n  return result;\n}\n\n",
            "calle": [
                "heman_image_create"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "source",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *source"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minv",
                        "type": "float",
                        "definition": [
                            "float minv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxv",
                        "type": "float",
                        "definition": [
                            "float maxv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *result = heman_image_create(source->width, source->height, source->nbands)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "float *",
                        "definition": [
                            "float *src = source->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float *",
                        "definition": [
                            "float *dst = result->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "float",
                        "definition": [
                            "float scale = 1.0f / (maxv - minv)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = (source->height * source->width) * source->nbands"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "float",
                        "definition": [
                            "float v = (src[src_idx] - minv) * scale"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_ops_max",
            "header": "heman_image *heman_ops_max(heman_image *imga, heman_image *imgb)",
            "params": [
                "heman_image *imga",
                "heman_image *imgb"
            ],
            "definition": "heman_image *heman_ops_max(heman_image *imga, heman_image *imgb)\n{\n  assert(imga->width == imgb->width);\n  assert(imga->height == imgb->height);\n  assert(imga->nbands == imgb->nbands);\n  heman_image *result = heman_image_create(imga->width, imga->height, imga->nbands);\n  int size = (imga->height * imga->width) * imga->nbands;\n  float *srca = imga->data;\n  unsigned int srca_idx = 0;\n  float *srcb = imgb->data;\n  unsigned int srcb_idx = 0;\n  float *dst = result->data;\n  unsigned int dst_idx = 0;\n  for (int i = 0; i < size; i += 1, dst_idx += 1, srca_idx += 1, srcb_idx += 1)\n  {\n    dst[dst_idx] = (srca[srca_idx] > srcb[srcb_idx]) ? (srca[srca_idx]) : (srcb[srcb_idx]);\n  }\n\n  return result;\n}\n\n",
            "calle": [
                "assert",
                "heman_image_create"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "imga",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *imga"
                        ]
                    },
                    {
                        "path": null,
                        "name": "imgb",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *imgb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *result = heman_image_create(imga->width, imga->height, imga->nbands)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = (imga->height * imga->width) * imga->nbands"
                        ]
                    },
                    {
                        "path": null,
                        "name": "srca",
                        "type": "float *",
                        "definition": [
                            "float *srca = imga->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "srca_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int srca_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "srcb",
                        "type": "float *",
                        "definition": [
                            "float *srcb = imgb->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "srcb_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int srcb_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float *",
                        "definition": [
                            "float *dst = result->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_ops_step",
            "header": "heman_image *heman_ops_step(heman_image *image, float threshold)",
            "params": [
                "heman_image *hmap",
                "float threshold"
            ],
            "definition": "heman_image *heman_ops_step(heman_image *hmap, float threshold)\n{\n  assert(hmap->nbands == 1);\n  heman_image *result = heman_image_create(hmap->width, hmap->height, 1);\n  int size = hmap->height * hmap->width;\n  float *src = hmap->data;\n  float *dst = result->data;\n  unsigned int dst_idx = 0;\n  for (int i = 0; i < size; i += 1)\n  {\n    dst[dst_idx] = ((*(src++)) >= threshold) ? (1) : (0);\n    dst_idx += 1;\n  }\n\n  return result;\n}\n\n",
            "calle": [
                "assert",
                "heman_image_create"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "hmap",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *hmap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "threshold",
                        "type": "float",
                        "definition": [
                            "float threshold"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *result = heman_image_create(hmap->width, hmap->height, 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = hmap->height * hmap->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "float *",
                        "definition": [
                            "float *src = hmap->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float *",
                        "definition": [
                            "float *dst = result->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_ops_stairstep",
            "header": "heman_image *heman_ops_stairstep(heman_image *image, int nsteps, heman_image *mask, heman_color mask_color, int invert_mask, float offset)",
            "params": [
                "heman_image *hmap",
                "int nsteps",
                "heman_image *mask",
                "heman_color mask_color",
                "int invert_mask",
                "float offset"
            ],
            "definition": "heman_image *heman_ops_stairstep(heman_image *hmap, int nsteps, heman_image *mask, heman_color mask_color, int invert_mask, float offset)\n{\n  assert(hmap->nbands == 1);\n  assert((!mask) || (mask->nbands == 3));\n  int size = hmap->height * hmap->width;\n  float *src = hmap->data;\n  unsigned int src_idx = 0;\n  float minv = 1000;\n  float maxv = -1000;\n  for (int i = 0; i < size; i += 1)\n  {\n    if ((!mask) || _match(mask, mask_color, invert_mask, i))\n    {\n      minv = (minv > src[i + src_idx]) ? (src[i + src_idx]) : (minv);\n      maxv = (maxv > src[i + src_idx]) ? (maxv) : (src[i + src_idx]);\n    }\n  }\n\n  float range = maxv - minv;\n  for (int i = 0; i < size; i += 1)\n  {\n    float e = src[src_idx];\n    if ((!mask) || _match(mask, mask_color, invert_mask, i))\n    {\n      e = e - minv;\n      e /= range;\n      e = floor(e * nsteps) / nsteps;\n      e = (e * range) + minv;\n    }\n    src[src_idx] = e + offset;\n    src_idx += 1;\n  }\n\n  return hmap;\n}\n\n",
            "calle": [
                "_match",
                "assert",
                "floor"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "hmap",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *hmap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nsteps",
                        "type": "int",
                        "definition": [
                            "int nsteps"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *mask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask_color",
                        "type": "heman_color",
                        "definition": [
                            "heman_color mask_color"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invert_mask",
                        "type": "int",
                        "definition": [
                            "int invert_mask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offset",
                        "type": "float",
                        "definition": [
                            "float offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = hmap->height * hmap->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "float *",
                        "definition": [
                            "float *src = hmap->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minv",
                        "type": "float",
                        "definition": [
                            "float minv = 1000"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxv",
                        "type": "float",
                        "definition": [
                            "float maxv = -1000"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "range",
                        "type": "float",
                        "definition": [
                            "float range = maxv - minv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e",
                        "type": "float",
                        "definition": [
                            "float e = src[src_idx]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_ops_percentiles",
            "header": "heman_image *heman_ops_percentiles(heman_image *image, int nsteps, heman_image *mask, heman_color mask_color, int invert_mask, float offset)",
            "params": [
                "heman_image *hmap",
                "int nsteps",
                "heman_image *mask",
                "heman_color mask_color",
                "int invert_mask",
                "float offset"
            ],
            "definition": "heman_image *heman_ops_percentiles(heman_image *hmap, int nsteps, heman_image *mask, heman_color mask_color, int invert_mask, float offset)\n{\n  assert(hmap->nbands == 1);\n  assert((!mask) || (mask->nbands == 3));\n  int size = hmap->height * hmap->width;\n  float *src = hmap->data;\n  unsigned int src_idx = 0;\n  float minv = 1000;\n  float maxv = -1000;\n  int npixels = 0;\n  for (int i = 0; i < size; i += 1)\n  {\n    if ((!mask) || _match(mask, mask_color, invert_mask, i))\n    {\n      minv = (minv > src[i + src_idx]) ? (src[i + src_idx]) : (minv);\n      maxv = (maxv > src[i + src_idx]) ? (maxv) : (src[i + src_idx]);\n      npixels += 1;\n    }\n  }\n\n  float *vals = malloc((sizeof(float)) * npixels);\n  npixels = 0;\n  for (int i = 0; i < size; i += 1)\n  {\n    if ((!mask) || _match(mask, mask_color, invert_mask, i))\n    {\n      vals[npixels] = src[i + src_idx];\n      npixels += 1;\n    }\n  }\n\n  float *percentiles = malloc((sizeof(float)) * nsteps);\n  for (int tier = 0; tier < nsteps; tier += 1)\n  {\n    float height = qselect(vals, npixels, (tier * npixels) / nsteps);\n    percentiles[tier] = height;\n  }\n\n  free(vals);\n  for (int i = 0; i < size; i += 1)\n  {\n    float e = src[src_idx];\n    if ((!mask) || _match(mask, mask_color, invert_mask, i))\n    {\n      for (int tier = nsteps - 1; tier >= 0; tier -= 1)\n      {\n        if (e > percentiles[tier])\n        {\n          e = percentiles[tier];\n          break;\n        }\n      }\n\n    }\n    src[src_idx] = e + offset;\n    src_idx += 1;\n  }\n\n  free(percentiles);\n  return hmap;\n}\n\n",
            "calle": [
                "_match",
                "assert",
                "free",
                "malloc",
                "qselect"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "hmap",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *hmap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nsteps",
                        "type": "int",
                        "definition": [
                            "int nsteps"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *mask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask_color",
                        "type": "heman_color",
                        "definition": [
                            "heman_color mask_color"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invert_mask",
                        "type": "int",
                        "definition": [
                            "int invert_mask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offset",
                        "type": "float",
                        "definition": [
                            "float offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = hmap->height * hmap->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "float *",
                        "definition": [
                            "float *src = hmap->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minv",
                        "type": "float",
                        "definition": [
                            "float minv = 1000"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxv",
                        "type": "float",
                        "definition": [
                            "float maxv = -1000"
                        ]
                    },
                    {
                        "path": null,
                        "name": "npixels",
                        "type": "int",
                        "definition": [
                            "int npixels = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vals",
                        "type": "float *",
                        "definition": [
                            "float *vals = malloc((sizeof(float)) * npixels)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "percentiles",
                        "type": "float *",
                        "definition": [
                            "float *percentiles = malloc((sizeof(float)) * nsteps)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tier",
                        "type": "int",
                        "definition": [
                            "int tier = 0",
                            "int tier = nsteps - 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "float",
                        "definition": [
                            "float height = qselect(vals, npixels, (tier * npixels) / nsteps)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "e",
                        "type": "float",
                        "definition": [
                            "float e = src[src_idx]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_ops_sweep",
            "header": "heman_image *heman_ops_sweep(heman_image *image)",
            "params": [
                "heman_image *hmap"
            ],
            "definition": "heman_image *heman_ops_sweep(heman_image *hmap)\n{\n  assert(hmap->nbands == 1);\n  heman_image *result = heman_image_create(hmap->height, 1, 1);\n  float *dst = result->data;\n  unsigned int dst_idx = 0;\n  const float *src = hmap->data;\n  unsigned int src_idx = 0;\n  float invw = 1.0f / hmap->width;\n  for (int y = 0; y < hmap->height; y += 1)\n  {\n    float acc = 0;\n    for (int x = 0; x < hmap->width; x += 1)\n    {\n      acc += src[src_idx];\n      src_idx += 1;\n    }\n\n    dst[dst_idx] = acc * invw;\n    dst_idx += 1;\n  }\n\n  return result;\n}\n\n",
            "calle": [
                "assert",
                "heman_image_create"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "hmap",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *hmap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *result = heman_image_create(hmap->height, 1, 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float *",
                        "definition": [
                            "float *dst = result->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "const float *",
                        "definition": [
                            "const float *src = hmap->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invw",
                        "type": "float",
                        "definition": [
                            "float invw = 1.0f / hmap->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "acc",
                        "type": "float",
                        "definition": [
                            "float acc = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_ops_laplacian",
            "header": "heman_image *heman_ops_laplacian(heman_image *heightmap)",
            "params": [
                "heman_image *heightmap"
            ],
            "definition": "heman_image *heman_ops_laplacian(heman_image *heightmap)\n{\n  assert(heightmap->nbands == 1);\n  int width = heightmap->width;\n  int height = heightmap->height;\n  heman_image *result = heman_image_create(width, height, 1);\n  int maxx = width - 1;\n  int maxy = height - 1;\n  int y;\n  #pragma omp parallel for\n  for (y = 0; y < height; y += 1)\n  {\n    int y1 = ((y + 1) > maxy) ? (maxy) : (y + 1);\n    float *dst = result->data + (y * width);\n    unsigned int dst_idx = 0;\n    for (int x = 0; x < width; x += 1)\n    {\n      int x1 = ((x + 1) > maxx) ? (maxx) : (x + 1);\n      float p = *heman_image_texel(heightmap, x, y);\n      float px = *heman_image_texel(heightmap, x1, y);\n      float py = *heman_image_texel(heightmap, x, y1);\n      dst[dst_idx] = ((p - px) * (p - px)) + ((p - py) * (p - py));\n      dst_idx += 1;\n    }\n\n  }\n\n  return result;\n}\n\n",
            "calle": [
                "assert",
                "heman_image_create",
                "heman_image_texel"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "heightmap",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *heightmap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width = heightmap->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height = heightmap->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *result = heman_image_create(width, height, 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxx",
                        "type": "int",
                        "definition": [
                            "int maxx = width - 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxy",
                        "type": "int",
                        "definition": [
                            "int maxy = height - 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y1",
                        "type": "int",
                        "definition": [
                            "int y1 = ((y + 1) > maxy) ? (maxy) : (y + 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float *",
                        "definition": [
                            "float *dst = result->data + (y * width)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x1",
                        "type": "int",
                        "definition": [
                            "int x1 = ((x + 1) > maxx) ? (maxx) : (x + 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "float",
                        "definition": [
                            "float p = *heman_image_texel(heightmap, x, y)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "px",
                        "type": "float",
                        "definition": [
                            "float px = *heman_image_texel(heightmap, x1, y)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "py",
                        "type": "float",
                        "definition": [
                            "float py = *heman_image_texel(heightmap, x, y1)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_ops_sobel",
            "header": "heman_image *heman_ops_sobel(heman_image *dst, heman_color edge_color)",
            "params": [
                "heman_image *img",
                "heman_color rgb"
            ],
            "definition": "heman_image *heman_ops_sobel(heman_image *img, heman_color rgb)\n{\n  int width = img->width;\n  int height = img->height;\n  assert(img->nbands == 3);\n  heman_image *result = heman_image_create(width, height, 3);\n  heman_image *gray = heman_color_to_grayscale(img);\n  float inv = 1.0f / 255.0f;\n  kmVec3 edge_rgb;\n  edge_rgb.x = ((float) (rgb >> 16)) * inv;\n  edge_rgb.y = ((float) ((rgb >> 8) & 0xff)) * inv;\n  edge_rgb.z = ((float) (rgb & 0xff)) * inv;\n  int y;\n  #pragma omp parallel for\n  for (y = 0; y < height; y += 1)\n  {\n    helper_heman_ops_sobel_1(img, width, height, result, gray, edge_rgb, y);\n  }\n\n  heman_image_destroy(gray);\n  return result;\n}\n\n",
            "calle": [
                "assert",
                "helper_heman_ops_sobel_1",
                "heman_color_to_grayscale",
                "heman_image_create",
                "heman_image_destroy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "img",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *img"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rgb",
                        "type": "heman_color",
                        "definition": [
                            "heman_color rgb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width = img->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height = img->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *result = heman_image_create(width, height, 3)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gray",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *gray = heman_color_to_grayscale(img)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inv",
                        "type": "float",
                        "definition": [
                            "float inv = 1.0f / 255.0f"
                        ]
                    },
                    {
                        "path": null,
                        "name": "edge_rgb",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 edge_rgb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_ops_accumulate",
            "header": "void heman_ops_accumulate(heman_image *dst, heman_image *src)",
            "params": [
                "heman_image *dst",
                "heman_image *src"
            ],
            "definition": "void heman_ops_accumulate(heman_image *dst, heman_image *src)\n{\n  assert(dst->nbands == src->nbands);\n  assert(dst->width == src->width);\n  assert(dst->height == src->height);\n  int size = dst->height * dst->width;\n  float *sdata = src->data;\n  unsigned int sdata_idx = 0;\n  float *ddata = dst->data;\n  unsigned int ddata_idx = 0;\n  for (int i = 0; i < size; i += 1)\n  {\n    ddata[ddata_idx] += sdata[sdata_idx];\n    sdata_idx += 1;\n    ddata_idx += 1;\n  }\n\n}\n\n",
            "calle": [
                "assert"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dst",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *dst"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *src"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = dst->height * dst->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sdata",
                        "type": "float *",
                        "definition": [
                            "float *sdata = src->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sdata_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sdata_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ddata",
                        "type": "float *",
                        "definition": [
                            "float *ddata = dst->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ddata_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ddata_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_ops_warp",
            "header": "heman_image *heman_ops_warp(heman_image *src, int seed, int octaves)",
            "params": [
                "heman_image *img",
                "int seed",
                "int octaves"
            ],
            "definition": "heman_image *heman_ops_warp(heman_image *img, int seed, int octaves)\n{\n  return heman_ops_warp_core(img, 0, seed, octaves);\n}\n\n",
            "calle": [
                "heman_ops_warp_core"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "img",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *img"
                        ]
                    },
                    {
                        "path": null,
                        "name": "seed",
                        "type": "int",
                        "definition": [
                            "int seed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "octaves",
                        "type": "int",
                        "definition": [
                            "int octaves"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_ops_warp_points",
            "header": "heman_image *heman_ops_warp_points(heman_image *src, int seed, int octaves, heman_points *pts)",
            "params": [
                "heman_image *img",
                "int seed",
                "int octaves",
                "heman_points *pts"
            ],
            "definition": "heman_image *heman_ops_warp_points(heman_image *img, int seed, int octaves, heman_points *pts)\n{\n  int width = img->width;\n  int height = img->height;\n  heman_image *mapping = heman_distance_identity_cpcf(width, height);\n  heman_image *retval = heman_ops_warp_core(img, mapping, seed, octaves);\n  float *src = pts->data;\n  unsigned int src_idx = 0;\n  for (int k = 0; k < pts->width; k += 1, src_idx += pts->nbands)\n  {\n    float x = src[0 + src_idx];\n    float y = src[1 + src_idx];\n    int i = x * mapping->width;\n    int j = y * mapping->height;\n    if ((((i < 0) || (i >= mapping->width)) || (j < 0)) || (j >= mapping->height))\n    {\n      continue;\n    }\n    float *texel = heman_image_texel(mapping, i, j);\n    src[0 + src_idx] = texel[0] / mapping->width;\n    src[1 + src_idx] = texel[1] / mapping->height;\n  }\n\n  heman_image_destroy(mapping);\n  return retval;\n}\n\n",
            "calle": [
                "heman_distance_identity_cpcf",
                "heman_image_destroy",
                "heman_image_texel",
                "heman_ops_warp_core"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "img",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *img"
                        ]
                    },
                    {
                        "path": null,
                        "name": "seed",
                        "type": "int",
                        "definition": [
                            "int seed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "octaves",
                        "type": "int",
                        "definition": [
                            "int octaves"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pts",
                        "type": "heman_points *",
                        "definition": [
                            "heman_points *pts"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width = img->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height = img->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mapping",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *mapping = heman_distance_identity_cpcf(width, height)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *retval = heman_ops_warp_core(img, mapping, seed, octaves)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "float *",
                        "definition": [
                            "float *src = pts->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "int",
                        "definition": [
                            "int k = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "float",
                        "definition": [
                            "float x = src[0 + src_idx]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "float",
                        "definition": [
                            "float y = src[1 + src_idx]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = x * mapping->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = y * mapping->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "texel",
                        "type": "float *",
                        "definition": [
                            "float *texel = heman_image_texel(mapping, i, j)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_ops_extract_mask",
            "header": "heman_image *heman_ops_extract_mask(heman_image *src, heman_color color, int invert)",
            "params": [
                "heman_image *source",
                "heman_color color",
                "int invert"
            ],
            "definition": "heman_image *heman_ops_extract_mask(heman_image *source, heman_color color, int invert)\n{\n  assert(source->nbands == 3);\n  float inv = 1.0f / 255.0f;\n  float r = ((float) (color >> 16)) * inv;\n  float g = ((float) ((color >> 8) & 0xff)) * inv;\n  float b = ((float) (color & 0xff)) * inv;\n  int height = source->height;\n  int width = source->width;\n  heman_image *result = heman_image_create(width, height, 1);\n  int y;\n  #pragma omp parallel for\n  for (y = 0; y < height; y += 1)\n  {\n    float *dst = result->data + (y * width);\n    unsigned int dst_idx = 0;\n    float *src = source->data + ((y * width) * 3);\n    unsigned int src_idx = 0;\n    for (int x = 0; x < width; x += 1, src_idx += 3)\n    {\n      float val = ((src[0 + src_idx] == r) && (src[1 + src_idx] == g)) && (src[2 + src_idx] == b);\n      if (!invert)\n      {\n        val = 1 - val;\n      }\n      dst[dst_idx] = val;\n      dst_idx += 1;\n    }\n\n  }\n\n  return result;\n}\n\n",
            "calle": [
                "assert",
                "heman_image_create"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "source",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *source"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color",
                        "type": "heman_color",
                        "definition": [
                            "heman_color color"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invert",
                        "type": "int",
                        "definition": [
                            "int invert"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inv",
                        "type": "float",
                        "definition": [
                            "float inv = 1.0f / 255.0f"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "float",
                        "definition": [
                            "float r = ((float) (color >> 16)) * inv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "g",
                        "type": "float",
                        "definition": [
                            "float g = ((float) ((color >> 8) & 0xff)) * inv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "float",
                        "definition": [
                            "float b = ((float) (color & 0xff)) * inv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height = source->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width = source->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *result = heman_image_create(width, height, 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float *",
                        "definition": [
                            "float *dst = result->data + (y * width)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "float *",
                        "definition": [
                            "float *src = source->data + ((y * width) * 3)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "float",
                        "definition": [
                            "float val = ((src[0 + src_idx] == r) && (src[1 + src_idx] == g)) && (src[2 + src_idx] == b)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_ops_replace_color",
            "header": "heman_image *heman_ops_replace_color(heman_image *src, heman_color color, heman_image *texture)",
            "params": [
                "heman_image *source",
                "heman_color color",
                "heman_image *texture"
            ],
            "definition": "heman_image *heman_ops_replace_color(heman_image *source, heman_color color, heman_image *texture)\n{\n  assert(source->nbands == 3);\n  assert(texture->nbands == 3);\n  int height = source->height;\n  int width = source->width;\n  assert(texture->width == width);\n  assert(texture->height == height);\n  float inv = 1.0f / 255.0f;\n  float r = ((float) (color >> 16)) * inv;\n  float g = ((float) ((color >> 8) & 0xff)) * inv;\n  float b = ((float) (color & 0xff)) * inv;\n  heman_image *result = heman_image_create(width, height, 3);\n  int y;\n  #pragma omp parallel for\n  for (y = 0; y < height; y += 1)\n  {\n    float *dst = result->data + ((y * width) * 3);\n    unsigned int dst_idx = 0;\n    float *src = source->data + ((y * width) * 3);\n    unsigned int src_idx = 0;\n    float *tex = texture->data + ((y * width) * 3);\n    unsigned int tex_idx = 0;\n    for (int x = 0; x < width; x += 1, src_idx += 3, dst_idx += 3, tex_idx += 3)\n    {\n      if (((src[0 + src_idx] == r) && (src[1 + src_idx] == g)) && (src[2 + src_idx] == b))\n      {\n        dst[0 + dst_idx] = tex[0 + tex_idx];\n        dst[1 + dst_idx] = tex[1 + tex_idx];\n        dst[2 + dst_idx] = tex[2 + tex_idx];\n      }\n      else\n      {\n        dst[0 + dst_idx] = src[0 + src_idx];\n        dst[1 + dst_idx] = src[1 + src_idx];\n        dst[2 + dst_idx] = src[2 + src_idx];\n      }\n    }\n\n  }\n\n  return result;\n}\n\n",
            "calle": [
                "assert",
                "heman_image_create"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "source",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *source"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color",
                        "type": "heman_color",
                        "definition": [
                            "heman_color color"
                        ]
                    },
                    {
                        "path": null,
                        "name": "texture",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *texture"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height = source->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width = source->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inv",
                        "type": "float",
                        "definition": [
                            "float inv = 1.0f / 255.0f"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "float",
                        "definition": [
                            "float r = ((float) (color >> 16)) * inv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "g",
                        "type": "float",
                        "definition": [
                            "float g = ((float) ((color >> 8) & 0xff)) * inv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "float",
                        "definition": [
                            "float b = ((float) (color & 0xff)) * inv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *result = heman_image_create(width, height, 3)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float *",
                        "definition": [
                            "float *dst = result->data + ((y * width) * 3)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "float *",
                        "definition": [
                            "float *src = source->data + ((y * width) * 3)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tex",
                        "type": "float *",
                        "definition": [
                            "float *tex = texture->data + ((y * width) * 3)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tex_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int tex_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_ops_merge_political",
            "header": "heman_image *heman_ops_merge_political(heman_image *elevation, heman_image *political, heman_color ocean_color)",
            "params": [
                "heman_image *hmap",
                "heman_image *cmap",
                "heman_color ocean"
            ],
            "definition": "heman_image *heman_ops_merge_political(heman_image *hmap, heman_image *cmap, heman_color ocean)\n{\n  assert(hmap->nbands == 1);\n  assert(cmap->nbands == 3);\n  heman_image *result = heman_image_create(hmap->width, hmap->height, 4);\n  float *pheight = hmap->data;\n  unsigned int pheight_idx = 0;\n  float *pcolour = cmap->data;\n  unsigned int pcolour_idx = 0;\n  float *pmerged = result->data;\n  unsigned int pmerged_idx = 0;\n  float inv = 1.0f / 255.0f;\n  float oceanr = ((float) (ocean >> 16)) * inv;\n  float oceang = ((float) ((ocean >> 8) & 0xff)) * inv;\n  float oceanb = ((float) (ocean & 0xff)) * inv;\n  int size = hmap->height * hmap->width;\n  float minh = 1000;\n  float maxh = -1000;\n  for (int i = 0; i < size; i += 1)\n  {\n    minh = (minh > pheight[i + pheight_idx]) ? (pheight[i + pheight_idx]) : (minh);\n    maxh = (maxh > pheight[i + pheight_idx]) ? (pheight[i + pheight_idx]) : (maxh);\n  }\n\n  for (int i = 0; i < size; i += 1)\n  {\n    helper_heman_ops_merge_political_1(&pheight_idx, &pcolour_idx, &pmerged_idx, pheight, pcolour, pmerged, oceanr, oceang, oceanb, minh, maxh);\n  }\n\n  return result;\n}\n\n",
            "calle": [
                "assert",
                "helper_heman_ops_merge_political_1",
                "heman_image_create"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "hmap",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *hmap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cmap",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *cmap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ocean",
                        "type": "heman_color",
                        "definition": [
                            "heman_color ocean"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *result = heman_image_create(hmap->width, hmap->height, 4)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pheight",
                        "type": "float *",
                        "definition": [
                            "float *pheight = hmap->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pheight_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pheight_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pcolour",
                        "type": "float *",
                        "definition": [
                            "float *pcolour = cmap->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pcolour_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pcolour_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pmerged",
                        "type": "float *",
                        "definition": [
                            "float *pmerged = result->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pmerged_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pmerged_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inv",
                        "type": "float",
                        "definition": [
                            "float inv = 1.0f / 255.0f"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oceanr",
                        "type": "float",
                        "definition": [
                            "float oceanr = ((float) (ocean >> 16)) * inv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oceang",
                        "type": "float",
                        "definition": [
                            "float oceang = ((float) ((ocean >> 8) & 0xff)) * inv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oceanb",
                        "type": "float",
                        "definition": [
                            "float oceanb = ((float) (ocean & 0xff)) * inv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "int",
                        "definition": [
                            "int size = hmap->height * hmap->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minh",
                        "type": "float",
                        "definition": [
                            "float minh = 1000"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxh",
                        "type": "float",
                        "definition": [
                            "float maxh = -1000"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_ops_emboss",
            "header": "heman_image *heman_ops_emboss(heman_image *elevation, int mode)",
            "params": [
                "heman_image *img",
                "int mode"
            ],
            "definition": "heman_image *heman_ops_emboss(heman_image *img, int mode)\n{\n  int seed = 1;\n  int octaves = 4;\n  struct osn_context *ctx;\n  open_simplex_noise(seed, &ctx);\n  int width = img->width;\n  int height = img->height;\n  assert(img->nbands == 1);\n  heman_image *result = heman_image_create(width, height, 1);\n  float invw = 1.0 / width;\n  float invh = 1.0 / height;\n  float inv = (invw > invh) ? (invh) : (invw);\n  float gain = 0.6;\n  float lacunarity = 2.0;\n  float land_amplitude = 0.0005;\n  float land_frequency = 256.0;\n  float ocean_amplitude = 0.5;\n  float ocean_frequency = 1.0;\n  int y;\n  #pragma omp parallel for\n  for (y = 0; y < height; y += 1)\n  {\n    helper_heman_ops_emboss_1(img, mode, octaves, ctx, width, result, inv, gain, lacunarity, land_amplitude, land_frequency, ocean_amplitude, ocean_frequency, y);\n  }\n\n  open_simplex_noise_free(ctx);\n  return result;\n}\n\n",
            "calle": [
                "assert",
                "helper_heman_ops_emboss_1",
                "heman_image_create",
                "open_simplex_noise",
                "open_simplex_noise_free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "img",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *img"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mode",
                        "type": "int",
                        "definition": [
                            "int mode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "seed",
                        "type": "int",
                        "definition": [
                            "int seed = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "octaves",
                        "type": "int",
                        "definition": [
                            "int octaves = 4"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct osn_context",
                        "type": "struct osn_context *",
                        "definition": [
                            "struct osn_context *ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width = img->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height = img->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *result = heman_image_create(width, height, 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invw",
                        "type": "float",
                        "definition": [
                            "float invw = 1.0 / width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invh",
                        "type": "float",
                        "definition": [
                            "float invh = 1.0 / height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inv",
                        "type": "float",
                        "definition": [
                            "float inv = (invw > invh) ? (invh) : (invw)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gain",
                        "type": "float",
                        "definition": [
                            "float gain = 0.6"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lacunarity",
                        "type": "float",
                        "definition": [
                            "float lacunarity = 2.0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "land_amplitude",
                        "type": "float",
                        "definition": [
                            "float land_amplitude = 0.0005"
                        ]
                    },
                    {
                        "path": null,
                        "name": "land_frequency",
                        "type": "float",
                        "definition": [
                            "float land_frequency = 256.0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ocean_amplitude",
                        "type": "float",
                        "definition": [
                            "float ocean_amplitude = 0.5"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ocean_frequency",
                        "type": "float",
                        "definition": [
                            "float ocean_frequency = 1.0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_get_num_threads",
            "header": "int heman_get_num_threads()",
            "params": [],
            "definition": "int heman_get_num_threads()\n{\n  return omp_get_max_threads();\n}\n\n",
            "calle": [
                "omp_get_max_threads"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "copy_row",
            "header": "",
            "params": [
                "heman_image *src",
                "heman_image *dst",
                "int dstx",
                "int y"
            ],
            "definition": "static void copy_row(heman_image *src, heman_image *dst, int dstx, int y)\n{\n  int width = src->width;\n  if (src->nbands == 1)\n  {\n    for (int x = 0; x < width; x += 1)\n    {\n      float *srcp = heman_image_texel(src, x, y);\n      unsigned int srcp_idx = 0;\n      float *dstp = heman_image_texel(dst, dstx + x, y);\n      unsigned int dstp_idx = 0;\n      dstp[dstp_idx] = srcp[srcp_idx];\n    }\n\n    return;\n  }\n  for (int x = 0; x < width; x += 1)\n  {\n    float *srcp = heman_image_texel(src, x, y);\n    unsigned int srcp_idx = 0;\n    float *dstp = heman_image_texel(dst, dstx + x, y);\n    unsigned int dstp_idx = 0;\n    int nbands = src->nbands;\n    while (nbands--)\n    {\n      dstp[dstp_idx] = srcp[srcp_idx];\n      srcp_idx += 1;\n      dstp_idx += 1;\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "heman_image_texel"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "src",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *src"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *dst"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dstx",
                        "type": "int",
                        "definition": [
                            "int dstx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width = src->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "srcp",
                        "type": "float *",
                        "definition": [
                            "float *srcp = heman_image_texel(src, x, y)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "srcp_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int srcp_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dstp",
                        "type": "float *",
                        "definition": [
                            "float *dstp = heman_image_texel(dst, dstx + x, y)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dstp_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dstp_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nbands",
                        "type": "int",
                        "definition": [
                            "int nbands = src->nbands"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_ops_warp_core",
            "header": "",
            "params": [
                "heman_image *img",
                "heman_image *secondary",
                "int seed",
                "int octaves"
            ],
            "definition": "heman_image *heman_ops_warp_core(heman_image *img, heman_image *secondary, int seed, int octaves)\n{\n  struct osn_context *ctx;\n  open_simplex_noise(seed, &ctx);\n  int width = img->width;\n  int height = img->height;\n  int nbands = img->nbands;\n  heman_image *result = heman_image_create(width, height, nbands);\n  heman_image *result2 = (secondary) ? (heman_image_create(width, height, secondary->nbands)) : (0);\n  float invw = 1.0 / width;\n  float invh = 1.0 / height;\n  float inv = (invw > invh) ? (invh) : (invw);\n  float aspect = ((float) width) / height;\n  float gain = 0.6;\n  float lacunarity = 2.0;\n  float initial_amplitude = 0.05;\n  float initial_frequency = 8.0;\n  int y;\n  #pragma omp parallel for\n  for (y = 0; y < height; y += 1)\n  {\n    helper_heman_ops_warp_core_1(img, secondary, octaves, ctx, width, height, nbands, result, result2, invw, invh, inv, aspect, gain, lacunarity, initial_amplitude, initial_frequency, y);\n  }\n\n  open_simplex_noise_free(ctx);\n  if (secondary)\n  {\n    free(secondary->data);\n    secondary->data = result2->data;\n    free(result2);\n  }\n  return result;\n}\n\n",
            "calle": [
                "free",
                "helper_heman_ops_warp_core_1",
                "heman_image_create",
                "open_simplex_noise",
                "open_simplex_noise_free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "img",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *img"
                        ]
                    },
                    {
                        "path": null,
                        "name": "secondary",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *secondary"
                        ]
                    },
                    {
                        "path": null,
                        "name": "seed",
                        "type": "int",
                        "definition": [
                            "int seed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "octaves",
                        "type": "int",
                        "definition": [
                            "int octaves"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct osn_context",
                        "type": "struct osn_context *",
                        "definition": [
                            "struct osn_context *ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width = img->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height = img->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nbands",
                        "type": "int",
                        "definition": [
                            "int nbands = img->nbands"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *result = heman_image_create(width, height, nbands)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result2",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *result2 = (secondary) ? (heman_image_create(width, height, secondary->nbands)) : (0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invw",
                        "type": "float",
                        "definition": [
                            "float invw = 1.0 / width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invh",
                        "type": "float",
                        "definition": [
                            "float invh = 1.0 / height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inv",
                        "type": "float",
                        "definition": [
                            "float inv = (invw > invh) ? (invh) : (invw)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aspect",
                        "type": "float",
                        "definition": [
                            "float aspect = ((float) width) / height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gain",
                        "type": "float",
                        "definition": [
                            "float gain = 0.6"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lacunarity",
                        "type": "float",
                        "definition": [
                            "float lacunarity = 2.0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "initial_amplitude",
                        "type": "float",
                        "definition": [
                            "float initial_amplitude = 0.05"
                        ]
                    },
                    {
                        "path": null,
                        "name": "initial_frequency",
                        "type": "float",
                        "definition": [
                            "float initial_frequency = 8.0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "_match",
            "header": "",
            "params": [
                "heman_image *mask",
                "heman_color mask_color",
                "int invert_mask",
                "int pixel_index"
            ],
            "definition": "static int _match(heman_image *mask, heman_color mask_color, int invert_mask, int pixel_index)\n{\n  float *mcolor = mask->data + (pixel_index * 3);\n  unsigned char r1 = mcolor[0] * 255;\n  unsigned char g1 = mcolor[1] * 255;\n  unsigned char b1 = mcolor[2] * 255;\n  unsigned char r2 = mask_color >> 16;\n  unsigned char g2 = (mask_color >> 8) & 0xff;\n  unsigned char b2 = mask_color & 0xff;\n  int retval = ((r1 == r2) && (g1 == g2)) && (b1 == b2);\n  return (invert_mask) ? (1 - retval) : (retval);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "mask",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *mask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask_color",
                        "type": "heman_color",
                        "definition": [
                            "heman_color mask_color"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invert_mask",
                        "type": "int",
                        "definition": [
                            "int invert_mask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pixel_index",
                        "type": "int",
                        "definition": [
                            "int pixel_index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mcolor",
                        "type": "float *",
                        "definition": [
                            "float *mcolor = mask->data + (pixel_index * 3)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r1",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char r1 = mcolor[0] * 255"
                        ]
                    },
                    {
                        "path": null,
                        "name": "g1",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char g1 = mcolor[1] * 255"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b1",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char b1 = mcolor[2] * 255"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r2",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char r2 = mask_color >> 16"
                        ]
                    },
                    {
                        "path": null,
                        "name": "g2",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char g2 = (mask_color >> 8) & 0xff"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b2",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char b2 = mask_color & 0xff"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval",
                        "type": "int",
                        "definition": [
                            "int retval = ((r1 == r2) && (g1 == g2)) && (b1 == b2)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "qselect",
            "header": "",
            "params": [
                "float *v",
                "int len",
                "int k"
            ],
            "definition": "static float qselect(float *v, int len, int k)\n{\n  int i;\n  int st;\n  for (st = (i = 0); i < (len - 1); i += 1)\n  {\n    if (v[i] > v[len - 1])\n    {\n      continue;\n    }\n    {\n      float _ = v[i];\n      v[i] = v[st];\n      v[st] = _;\n    }\n    ;\n    st += 1;\n  }\n\n  {\n    float _ = v[len - 1];\n    v[len - 1] = v[st];\n    v[st] = _;\n  }\n  ;\n  return (k == st) ? (v[st]) : ((st > k) ? (qselect(v, st, k)) : (qselect(v + st, len - st, k - st)));\n}\n\n",
            "calle": [
                "qselect"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "v",
                        "type": "float *",
                        "definition": [
                            "float *v"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "int",
                        "definition": [
                            "int k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "st",
                        "type": "int",
                        "definition": [
                            "int st"
                        ]
                    },
                    {
                        "path": null,
                        "name": "_",
                        "type": "float",
                        "definition": [
                            "float _ = v[i]",
                            "float _ = v[len - 1]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_heman_ops_sobel_1",
            "header": "",
            "params": [
                "heman_image * const img",
                "int width",
                "int height",
                "heman_image * const result",
                "heman_image * const gray",
                "kmVec3 edge_rgb",
                "int y"
            ],
            "definition": "void helper_heman_ops_sobel_1(heman_image * const img, int width, int height, heman_image * const result, heman_image * const gray, kmVec3 edge_rgb, int y)\n{\n  kmVec3 *dst = ((kmVec3 *) result->data) + (y * width);\n  unsigned int dst_idx = 0;\n  const kmVec3 *src = ((kmVec3 *) img->data) + (y * width);\n  unsigned int src_idx = 0;\n  for (int x = 0; x < width; x += 1)\n  {\n    int xm1 = ((x - 1) > 0) ? (x - 1) : (0);\n    int xp1 = ((x + 1) > (width - 1)) ? (width - 1) : (x + 1);\n    int ym1 = ((y - 1) > 0) ? (y - 1) : (0);\n    int yp1 = ((y + 1) > (height - 1)) ? (height - 1) : (y + 1);\n    float t00 = *heman_image_texel(gray, xm1, ym1);\n    float t10 = *heman_image_texel(gray, x, ym1);\n    float t20 = *heman_image_texel(gray, xp1, ym1);\n    float t01 = *heman_image_texel(gray, xm1, 0);\n    float t21 = *heman_image_texel(gray, xp1, 0);\n    float t02 = *heman_image_texel(gray, xm1, yp1);\n    float t12 = *heman_image_texel(gray, x, yp1);\n    float t22 = *heman_image_texel(gray, xp1, yp1);\n    float gx = ((((t00 + (2.0 * t01)) + t02) - t20) - (2.0 * t21)) - t22;\n    float gy = ((((t00 + (2.0 * t10)) + t20) - t02) - (2.0 * t12)) - t22;\n    float is_edge = ((gx * gx) + (gy * gy)) > 1e-5;\n    kmVec3Lerp(dst, src, &edge_rgb, is_edge);\n    src_idx += 1;\n    dst_idx += 1;\n  }\n\n}\n\n",
            "calle": [
                "heman_image_texel",
                "kmVec3Lerp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "img",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const img"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gray",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const gray"
                        ]
                    },
                    {
                        "path": null,
                        "name": "edge_rgb",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 edge_rgb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *dst = ((kmVec3 *) result->data) + (y * width)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *src = ((kmVec3 *) img->data) + (y * width)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xm1",
                        "type": "int",
                        "definition": [
                            "int xm1 = ((x - 1) > 0) ? (x - 1) : (0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xp1",
                        "type": "int",
                        "definition": [
                            "int xp1 = ((x + 1) > (width - 1)) ? (width - 1) : (x + 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ym1",
                        "type": "int",
                        "definition": [
                            "int ym1 = ((y - 1) > 0) ? (y - 1) : (0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yp1",
                        "type": "int",
                        "definition": [
                            "int yp1 = ((y + 1) > (height - 1)) ? (height - 1) : (y + 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t00",
                        "type": "float",
                        "definition": [
                            "float t00 = *heman_image_texel(gray, xm1, ym1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t10",
                        "type": "float",
                        "definition": [
                            "float t10 = *heman_image_texel(gray, x, ym1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t20",
                        "type": "float",
                        "definition": [
                            "float t20 = *heman_image_texel(gray, xp1, ym1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t01",
                        "type": "float",
                        "definition": [
                            "float t01 = *heman_image_texel(gray, xm1, 0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t21",
                        "type": "float",
                        "definition": [
                            "float t21 = *heman_image_texel(gray, xp1, 0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t02",
                        "type": "float",
                        "definition": [
                            "float t02 = *heman_image_texel(gray, xm1, yp1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t12",
                        "type": "float",
                        "definition": [
                            "float t12 = *heman_image_texel(gray, x, yp1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t22",
                        "type": "float",
                        "definition": [
                            "float t22 = *heman_image_texel(gray, xp1, yp1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gx",
                        "type": "float",
                        "definition": [
                            "float gx = ((((t00 + (2.0 * t01)) + t02) - t20) - (2.0 * t21)) - t22"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gy",
                        "type": "float",
                        "definition": [
                            "float gy = ((((t00 + (2.0 * t10)) + t20) - t02) - (2.0 * t12)) - t22"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_edge",
                        "type": "float",
                        "definition": [
                            "float is_edge = ((gx * gx) + (gy * gy)) > 1e-5"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_heman_ops_warp_core_1",
            "header": "",
            "params": [
                "heman_image * const img",
                "heman_image * const secondary",
                "int octaves",
                "struct osn_context * const ctx",
                "int width",
                "int height",
                "int nbands",
                "heman_image * const result",
                "heman_image * const result2",
                "float invw",
                "float invh",
                "float inv",
                "float aspect",
                "float gain",
                "float lacunarity",
                "float initial_amplitude",
                "float initial_frequency",
                "int y"
            ],
            "definition": "void helper_heman_ops_warp_core_1(heman_image * const img, heman_image * const secondary, int octaves, struct osn_context * const ctx, int width, int height, int nbands, heman_image * const result, heman_image * const result2, float invw, float invh, float inv, float aspect, float gain, float lacunarity, float initial_amplitude, float initial_frequency, int y)\n{\n  float *dst = result->data + ((y * width) * nbands);\n  unsigned int dst_idx = 0;\n  for (int x = 0; x < width; x += 1)\n  {\n    helper_helper_heman_ops_warp_core_1_1(&dst_idx, img, secondary, octaves, ctx, width, height, nbands, result2, invw, invh, inv, aspect, gain, lacunarity, initial_amplitude, initial_frequency, y, dst, x);\n  }\n\n}\n\n",
            "calle": [
                "helper_helper_heman_ops_warp_core_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "img",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const img"
                        ]
                    },
                    {
                        "path": null,
                        "name": "secondary",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const secondary"
                        ]
                    },
                    {
                        "path": null,
                        "name": "octaves",
                        "type": "int",
                        "definition": [
                            "int octaves"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct osn_context",
                        "type": "struct osn_context * const",
                        "definition": [
                            "struct osn_context * const ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nbands",
                        "type": "int",
                        "definition": [
                            "int nbands"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result2",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const result2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invw",
                        "type": "float",
                        "definition": [
                            "float invw"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invh",
                        "type": "float",
                        "definition": [
                            "float invh"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inv",
                        "type": "float",
                        "definition": [
                            "float inv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aspect",
                        "type": "float",
                        "definition": [
                            "float aspect"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gain",
                        "type": "float",
                        "definition": [
                            "float gain"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lacunarity",
                        "type": "float",
                        "definition": [
                            "float lacunarity"
                        ]
                    },
                    {
                        "path": null,
                        "name": "initial_amplitude",
                        "type": "float",
                        "definition": [
                            "float initial_amplitude"
                        ]
                    },
                    {
                        "path": null,
                        "name": "initial_frequency",
                        "type": "float",
                        "definition": [
                            "float initial_frequency"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float *",
                        "definition": [
                            "float *dst = result->data + ((y * width) * nbands)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_heman_ops_merge_political_1",
            "header": "",
            "params": [
                "unsigned int * const pheight_idx_ref",
                "unsigned int * const pcolour_idx_ref",
                "unsigned int * const pmerged_idx_ref",
                "float * const pheight",
                "float * const pcolour",
                "float * const pmerged",
                "float oceanr",
                "float oceang",
                "float oceanb",
                "float minh",
                "float maxh"
            ],
            "definition": "void helper_heman_ops_merge_political_1(unsigned int * const pheight_idx_ref, unsigned int * const pcolour_idx_ref, unsigned int * const pmerged_idx_ref, float * const pheight, float * const pcolour, float * const pmerged, float oceanr, float oceang, float oceanb, float minh, float maxh)\n{\n  unsigned int pheight_idx = *pheight_idx_ref;\n  unsigned int pcolour_idx = *pcolour_idx_ref;\n  unsigned int pmerged_idx = *pmerged_idx_ref;\n  float h = pheight[pheight_idx];\n  pheight_idx += 1;\n  if (h < 0)\n  {\n    pmerged[pmerged_idx] = oceanr;\n    pmerged_idx += 1;\n    pmerged[pmerged_idx] = oceang;\n    pmerged_idx += 1;\n    *((&pmerged[pmerged_idx])++) = oceanb;\n    pcolour_idx += 3;\n  }\n  else\n  {\n    pmerged[pmerged_idx] = pcolour[pcolour_idx];\n    pcolour_idx += 1;\n    pmerged_idx += 1;\n    *((&pmerged[pmerged_idx])++) = *((&pcolour[pcolour_idx])++);\n    *((&pmerged[pmerged_idx])++) = *((&pcolour[pcolour_idx])++);\n  }\n  *((&pmerged[pmerged_idx])++) = (h - minh) / (maxh - minh);\n  *pheight_idx_ref = pheight_idx;\n  *pcolour_idx_ref = pcolour_idx;\n  *pmerged_idx_ref = pmerged_idx;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pheight_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const pheight_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pcolour_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const pcolour_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pmerged_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const pmerged_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pheight",
                        "type": "float * const",
                        "definition": [
                            "float * const pheight"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pcolour",
                        "type": "float * const",
                        "definition": [
                            "float * const pcolour"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pmerged",
                        "type": "float * const",
                        "definition": [
                            "float * const pmerged"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oceanr",
                        "type": "float",
                        "definition": [
                            "float oceanr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oceang",
                        "type": "float",
                        "definition": [
                            "float oceang"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oceanb",
                        "type": "float",
                        "definition": [
                            "float oceanb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minh",
                        "type": "float",
                        "definition": [
                            "float minh"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxh",
                        "type": "float",
                        "definition": [
                            "float maxh"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pheight_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pheight_idx = *pheight_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pcolour_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pcolour_idx = *pcolour_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pmerged_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pmerged_idx = *pmerged_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "float",
                        "definition": [
                            "float h = pheight[pheight_idx]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_heman_ops_emboss_1",
            "header": "",
            "params": [
                "heman_image * const img",
                "int mode",
                "int octaves",
                "struct osn_context * const ctx",
                "int width",
                "heman_image * const result",
                "float inv",
                "float gain",
                "float lacunarity",
                "float land_amplitude",
                "float land_frequency",
                "float ocean_amplitude",
                "float ocean_frequency",
                "int y"
            ],
            "definition": "void helper_heman_ops_emboss_1(heman_image * const img, int mode, int octaves, struct osn_context * const ctx, int width, heman_image * const result, float inv, float gain, float lacunarity, float land_amplitude, float land_frequency, float ocean_amplitude, float ocean_frequency, int y)\n{\n  float *dst = result->data + (y * width);\n  unsigned int dst_idx = 0;\n  for (int x = 0; x < width; x += 1)\n  {\n    float z = *heman_image_texel(img, x, y);\n    if ((z > 0) && (mode == 1))\n    {\n      float s = x * inv;\n      float t = y * inv;\n      float a = land_amplitude;\n      float f = land_frequency;\n      for (int i = 0; i < octaves; i += 1)\n      {\n        z += a * open_simplex_noise2(ctx, s * f, t * f);\n        a *= gain;\n        f *= lacunarity;\n      }\n\n    }\n    else\n      if ((z <= 0) && (mode == (-1)))\n    {\n      z = (z > (-0.1)) ? (z) : (-0.1);\n      float soften = fabsf(z);\n      float s = x * inv;\n      float t = y * inv;\n      float a = ocean_amplitude;\n      float f = ocean_frequency;\n      for (int i = 0; i < octaves; i += 1)\n      {\n        z += soften * (a * open_simplex_noise2(ctx, s * f, t * f));\n        a *= gain;\n        f *= lacunarity;\n      }\n\n    }\n    dst[dst_idx] = z;\n    dst_idx += 1;\n  }\n\n}\n\n",
            "calle": [
                "fabsf",
                "heman_image_texel",
                "open_simplex_noise2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "img",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const img"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mode",
                        "type": "int",
                        "definition": [
                            "int mode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "octaves",
                        "type": "int",
                        "definition": [
                            "int octaves"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct osn_context",
                        "type": "struct osn_context * const",
                        "definition": [
                            "struct osn_context * const ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inv",
                        "type": "float",
                        "definition": [
                            "float inv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gain",
                        "type": "float",
                        "definition": [
                            "float gain"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lacunarity",
                        "type": "float",
                        "definition": [
                            "float lacunarity"
                        ]
                    },
                    {
                        "path": null,
                        "name": "land_amplitude",
                        "type": "float",
                        "definition": [
                            "float land_amplitude"
                        ]
                    },
                    {
                        "path": null,
                        "name": "land_frequency",
                        "type": "float",
                        "definition": [
                            "float land_frequency"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ocean_amplitude",
                        "type": "float",
                        "definition": [
                            "float ocean_amplitude"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ocean_frequency",
                        "type": "float",
                        "definition": [
                            "float ocean_frequency"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float *",
                        "definition": [
                            "float *dst = result->data + (y * width)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z",
                        "type": "float",
                        "definition": [
                            "float z = *heman_image_texel(img, x, y)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "float",
                        "definition": [
                            "float s = x * inv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "float",
                        "definition": [
                            "float t = y * inv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "float",
                        "definition": [
                            "float a = land_amplitude",
                            "float a = ocean_amplitude"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f",
                        "type": "float",
                        "definition": [
                            "float f = land_frequency",
                            "float f = ocean_frequency"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "soften",
                        "type": "float",
                        "definition": [
                            "float soften = fabsf(z)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_heman_ops_warp_core_1_1",
            "header": "",
            "params": [
                "unsigned int * const dst_idx_ref",
                "heman_image * const img",
                "heman_image * const secondary",
                "int octaves",
                "struct osn_context * const ctx",
                "int width",
                "int height",
                "int nbands",
                "heman_image * const result2",
                "float invw",
                "float invh",
                "float inv",
                "float aspect",
                "float gain",
                "float lacunarity",
                "float initial_amplitude",
                "float initial_frequency",
                "int y",
                "float * const dst",
                "int x"
            ],
            "definition": "void helper_helper_heman_ops_warp_core_1_1(unsigned int * const dst_idx_ref, heman_image * const img, heman_image * const secondary, int octaves, struct osn_context * const ctx, int width, int height, int nbands, heman_image * const result2, float invw, float invh, float inv, float aspect, float gain, float lacunarity, float initial_amplitude, float initial_frequency, int y, float * const dst, int x)\n{\n  unsigned int dst_idx = *dst_idx_ref;\n  float a = initial_amplitude;\n  float f = initial_frequency;\n  float *src;\n  unsigned int src_idx = 0;\n  if (nbands == 4)\n  {\n    src_idx = heman_image_texel(img, x, y);\n    float elev = 1 - src[3 + src_idx];\n    a *= pow(elev, 4);\n  }\n  float s = x * inv;\n  float t = y * inv;\n  float u = x * invw;\n  float v = y * invh;\n  for (int i = 0; i < octaves; i += 1)\n  {\n    u += a * open_simplex_noise2(ctx, s * f, t * f);\n    v += aspect * (a * open_simplex_noise2(ctx, (s * f) + 0.5, t * f));\n    a *= gain;\n    f *= lacunarity;\n  }\n\n  int i = (0 > (((width - 1) > (u * width)) ? (u * width) : (width - 1))) ? (0) : (((width - 1) > (u * width)) ? (u * width) : (width - 1));\n  int j = (0 > (((height - 1) > (v * height)) ? (v * height) : (height - 1))) ? (0) : (((height - 1) > (v * height)) ? (v * height) : (height - 1));\n  src_idx = heman_image_texel(img, i, j);\n  for (int n = 0; n < nbands; n += 1)\n  {\n    dst[dst_idx] = src[src_idx];\n    src_idx += 1;\n    dst_idx += 1;\n  }\n\n  if (secondary)\n  {\n    src_idx = heman_image_texel(secondary, x, y);\n    float *dst2 = heman_image_texel(result2, i, j);\n    unsigned int dst2_idx = 0;\n    for (int n = 0; n < secondary->nbands; n += 1)\n    {\n      dst2[dst2_idx] = src[src_idx];\n      src_idx += 1;\n      dst2_idx += 1;\n    }\n\n  }\n  *dst_idx_ref = dst_idx;\n}\n\n",
            "calle": [
                "heman_image_texel",
                "open_simplex_noise2",
                "pow"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dst_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const dst_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "img",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const img"
                        ]
                    },
                    {
                        "path": null,
                        "name": "secondary",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const secondary"
                        ]
                    },
                    {
                        "path": null,
                        "name": "octaves",
                        "type": "int",
                        "definition": [
                            "int octaves"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct osn_context",
                        "type": "struct osn_context * const",
                        "definition": [
                            "struct osn_context * const ctx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "int",
                        "definition": [
                            "int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "int",
                        "definition": [
                            "int height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nbands",
                        "type": "int",
                        "definition": [
                            "int nbands"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result2",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const result2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invw",
                        "type": "float",
                        "definition": [
                            "float invw"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invh",
                        "type": "float",
                        "definition": [
                            "float invh"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inv",
                        "type": "float",
                        "definition": [
                            "float inv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aspect",
                        "type": "float",
                        "definition": [
                            "float aspect"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gain",
                        "type": "float",
                        "definition": [
                            "float gain"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lacunarity",
                        "type": "float",
                        "definition": [
                            "float lacunarity"
                        ]
                    },
                    {
                        "path": null,
                        "name": "initial_amplitude",
                        "type": "float",
                        "definition": [
                            "float initial_amplitude"
                        ]
                    },
                    {
                        "path": null,
                        "name": "initial_frequency",
                        "type": "float",
                        "definition": [
                            "float initial_frequency"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "int",
                        "definition": [
                            "int y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float * const",
                        "definition": [
                            "float * const dst"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst_idx = *dst_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "float",
                        "definition": [
                            "float a = initial_amplitude"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f",
                        "type": "float",
                        "definition": [
                            "float f = initial_frequency"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "float *",
                        "definition": [
                            "float *src"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "elev",
                        "type": "float",
                        "definition": [
                            "float elev = 1 - src[3 + src_idx]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "float",
                        "definition": [
                            "float s = x * inv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "float",
                        "definition": [
                            "float t = y * inv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "u",
                        "type": "float",
                        "definition": [
                            "float u = x * invw"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "float",
                        "definition": [
                            "float v = y * invh"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = (0 > (((width - 1) > (u * width)) ? (u * width) : (width - 1))) ? (0) : (((width - 1) > (u * width)) ? (u * width) : (width - 1))",
                            "int i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = (0 > (((height - 1) > (v * height)) ? (v * height) : (height - 1))) ? (0) : (((height - 1) > (v * height)) ? (v * height) : (height - 1))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "int",
                        "definition": [
                            "int n = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst2",
                        "type": "float *",
                        "definition": [
                            "float *dst2 = heman_image_texel(result2, i, j)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst2_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst2_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_points_create",
            "header": "heman_image *heman_points_create(float *xy, int npoints, int nbands)",
            "params": [
                "float *xy",
                "int npoints",
                "int nbands"
            ],
            "definition": "heman_image *heman_points_create(float *xy, int npoints, int nbands)\n{\n  heman_points *img = malloc(sizeof(heman_image));\n  img->width = npoints;\n  img->height = 1;\n  img->nbands = nbands;\n  int nbytes = ((sizeof(float)) * npoints) * nbands;\n  img->data = malloc(nbytes);\n  memcpy(img->data, xy, nbytes);\n  return img;\n}\n\n",
            "calle": [
                "malloc",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "xy",
                        "type": "float *",
                        "definition": [
                            "float *xy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "npoints",
                        "type": "int",
                        "definition": [
                            "int npoints"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nbands",
                        "type": "int",
                        "definition": [
                            "int nbands"
                        ]
                    },
                    {
                        "path": null,
                        "name": "img",
                        "type": "heman_points *",
                        "definition": [
                            "heman_points *img = malloc(sizeof(heman_image))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nbytes",
                        "type": "int",
                        "definition": [
                            "int nbytes = ((sizeof(float)) * npoints) * nbands"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_points_destroy",
            "header": "void heman_points_destroy(heman_points *)",
            "params": [
                "heman_points *img"
            ],
            "definition": "void heman_points_destroy(heman_points *img)\n{\n  free(img->data);\n  free(img);\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "img",
                        "type": "heman_points *",
                        "definition": [
                            "heman_points *img"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_points_from_grid",
            "header": "heman_points *heman_points_from_grid(float width, float height, float cellsize, float jitter)",
            "params": [
                "float width",
                "float height",
                "float cellsize",
                "float jitter"
            ],
            "definition": "heman_points *heman_points_from_grid(float width, float height, float cellsize, float jitter)\n{\n  int cols = width / cellsize;\n  int rows = height / cellsize;\n  int ncells = cols * rows;\n  heman_points *result = heman_image_create(ncells, 1, 2);\n  float rscale = (2.0 * jitter) / ((float) 32767);\n  int j;\n  #pragma omp parallel for\n  for (j = 0; j < rows; j += 1)\n  {\n    float *dst = result->data + ((j * cols) * 2);\n    unsigned int dst_idx = 0;\n    float y = (cellsize * 0.5) + (cellsize * j);\n    float x = cellsize * 0.5;\n    for (int i = 0; i < cols; i += 1)\n    {\n      float rx = (rand() * rscale) - jitter;\n      float ry = (rand() * rscale) - jitter;\n      dst[dst_idx] = x + rx;\n      dst_idx += 1;\n      dst[dst_idx] = y + ry;\n      dst_idx += 1;\n      x += cellsize;\n    }\n\n  }\n\n  return result;\n}\n\n",
            "calle": [
                "heman_image_create",
                "rand"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "width",
                        "type": "float",
                        "definition": [
                            "float width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "float",
                        "definition": [
                            "float height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cellsize",
                        "type": "float",
                        "definition": [
                            "float cellsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jitter",
                        "type": "float",
                        "definition": [
                            "float jitter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cols",
                        "type": "int",
                        "definition": [
                            "int cols = width / cellsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rows",
                        "type": "int",
                        "definition": [
                            "int rows = height / cellsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ncells",
                        "type": "int",
                        "definition": [
                            "int ncells = cols * rows"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "heman_points *",
                        "definition": [
                            "heman_points *result = heman_image_create(ncells, 1, 2)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rscale",
                        "type": "float",
                        "definition": [
                            "float rscale = (2.0 * jitter) / ((float) 32767)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst",
                        "type": "float *",
                        "definition": [
                            "float *dst = result->data + ((j * cols) * 2)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dst_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dst_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "float",
                        "definition": [
                            "float y = (cellsize * 0.5) + (cellsize * j)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "float",
                        "definition": [
                            "float x = cellsize * 0.5"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rx",
                        "type": "float",
                        "definition": [
                            "float rx = (rand() * rscale) - jitter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ry",
                        "type": "float",
                        "definition": [
                            "float ry = (rand() * rscale) - jitter"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_points_from_poisson",
            "header": "heman_points *heman_points_from_poisson(float width, float height, float mindist)",
            "params": [
                "float width",
                "float height",
                "float radius"
            ],
            "definition": "heman_points *heman_points_from_poisson(float width, float height, float radius)\n{\n  int maxattempts = 30;\n  float rscale = 1.0f / 4294967295U;\n  unsigned int seed = 0;\n  kmVec2 rvec;\n  rvec.x = (rvec.y = radius);\n  float r2 = radius * radius;\n  float cellsize = radius / sqrtf(2);\n  float invcell = 1.0f / cellsize;\n  int ncols = ceil(width * invcell);\n  int nrows = ceil(height * invcell);\n  int maxcol = ncols - 1;\n  int maxrow = nrows - 1;\n  int ncells = ncols * nrows;\n  int *grid = malloc(ncells * (sizeof(int)));\n  for (int i = 0; i < ncells; i += 1)\n  {\n    grid[i] = -1;\n  }\n\n  int *actives = malloc(ncells * (sizeof(int)));\n  int nactives = 0;\n  heman_points *result = heman_image_create(ncells, 1, 2);\n  kmVec2 *samples = (kmVec2 *) result->data;\n  int nsamples = 0;\n  kmVec2 pt;\n  pt.x = (width * randhash(seed)) * rscale;\n  seed += 1;\n  pt.y = (height * randhash(seed)) * rscale;\n  seed += 1;\n  grid[((int) (pt.x * invcell)) + (ncols * ((int) (pt.y * invcell)))] = (actives[nactives] = nsamples);\n  nactives += 1;\n  samples[nsamples] = pt;\n  nsamples += 1;\n  while (nsamples < ncells)\n  {\n    helper_heman_points_from_poisson_1(&invcell, &ncols, &nactives, &nsamples, &pt, width, height, radius, maxattempts, seed, rvec, r2, maxcol, maxrow, grid, actives, samples);\n  }\n\n  result->width = nsamples;\n  free(grid);\n  free(actives);\n  return result;\n}\n\n",
            "calle": [
                "ceil",
                "free",
                "helper_heman_points_from_poisson_1",
                "heman_image_create",
                "malloc",
                "randhash",
                "sqrtf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "width",
                        "type": "float",
                        "definition": [
                            "float width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "float",
                        "definition": [
                            "float height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "radius",
                        "type": "float",
                        "definition": [
                            "float radius"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxattempts",
                        "type": "int",
                        "definition": [
                            "int maxattempts = 30"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rscale",
                        "type": "float",
                        "definition": [
                            "float rscale = 1.0f / 4294967295U"
                        ]
                    },
                    {
                        "path": null,
                        "name": "seed",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int seed = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rvec",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 rvec"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r2",
                        "type": "float",
                        "definition": [
                            "float r2 = radius * radius"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cellsize",
                        "type": "float",
                        "definition": [
                            "float cellsize = radius / sqrtf(2)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invcell",
                        "type": "float",
                        "definition": [
                            "float invcell = 1.0f / cellsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ncols",
                        "type": "int",
                        "definition": [
                            "int ncols = ceil(width * invcell)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nrows",
                        "type": "int",
                        "definition": [
                            "int nrows = ceil(height * invcell)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxcol",
                        "type": "int",
                        "definition": [
                            "int maxcol = ncols - 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxrow",
                        "type": "int",
                        "definition": [
                            "int maxrow = nrows - 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ncells",
                        "type": "int",
                        "definition": [
                            "int ncells = ncols * nrows"
                        ]
                    },
                    {
                        "path": null,
                        "name": "grid",
                        "type": "int *",
                        "definition": [
                            "int *grid = malloc(ncells * (sizeof(int)))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "actives",
                        "type": "int *",
                        "definition": [
                            "int *actives = malloc(ncells * (sizeof(int)))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nactives",
                        "type": "int",
                        "definition": [
                            "int nactives = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "heman_points *",
                        "definition": [
                            "heman_points *result = heman_image_create(ncells, 1, 2)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "samples",
                        "type": "kmVec2 *",
                        "definition": [
                            "kmVec2 *samples = (kmVec2 *) result->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nsamples",
                        "type": "int",
                        "definition": [
                            "int nsamples = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pt",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 pt"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "heman_points_from_density",
            "header": "heman_points *heman_points_from_density(heman_image *density, float mindist, float maxdist)",
            "params": [
                "heman_image *density",
                "float minradius",
                "float maxradius"
            ],
            "definition": "heman_points *heman_points_from_density(heman_image *density, float minradius, float maxradius)\n{\n  assert(density->nbands == 1);\n  float width = 1;\n  float height = 1;\n  int maxattempts = 30;\n  float rscale = 1.0f / 4294967295U;\n  unsigned int seed = 0;\n  kmVec2 rvec;\n  rvec.x = (rvec.y = maxradius);\n  int gindex;\n  float cellsize = maxradius / sqrtf(2);\n  float invcell = 1.0f / cellsize;\n  int ncols = ceil(width * invcell);\n  int nrows = ceil(height * invcell);\n  int maxcol = ncols - 1;\n  int maxrow = nrows - 1;\n  int ncells = ncols * nrows;\n  int ntexels = cellsize * density->width;\n  int gcapacity = ntexels * ntexels;\n  int *grid = malloc((ncells * (sizeof(int))) * gcapacity);\n  int *ngrid = malloc(ncells * (sizeof(int)));\n  for (int i = 0; i < ncells; i += 1)\n  {\n    ngrid[i] = 0;\n  }\n\n  int *actives = malloc(ncells * (sizeof(int)));\n  int nactives = 0;\n  int maxsamples = ncells * gcapacity;\n  heman_points *result = heman_image_create(maxsamples, 1, 2);\n  kmVec2 *samples = (kmVec2 *) result->data;\n  int nsamples = 0;\n  kmVec2 pt;\n  pt.x = (width * randhash(seed)) * rscale;\n  seed += 1;\n  pt.y = (height * randhash(seed)) * rscale;\n  seed += 1;\n  actives[nactives] = nsamples;\n  nactives += 1;\n  gindex = ((int) (pt.x * invcell)) + (ncols * ((int) (pt.y * invcell)));\n  grid[(gcapacity * gindex) + ngrid[gindex]] = nsamples;\n  ngrid[gindex] += 1;\n  samples[nsamples] = pt;\n  nsamples += 1;\n  while (nsamples < maxsamples)\n  {\n    helper_heman_points_from_density_1(&gindex, &gcapacity, &nactives, &nsamples, &pt, density, minradius, maxradius, width, height, maxattempts, seed, rvec, invcell, ncols, maxcol, maxrow, grid, ngrid, actives, samples);\n  }\n\n  result->width = nsamples;\n  free(grid);\n  free(ngrid);\n  free(actives);\n  return result;\n}\n\n",
            "calle": [
                "assert",
                "ceil",
                "free",
                "helper_heman_points_from_density_1",
                "heman_image_create",
                "malloc",
                "randhash",
                "sqrtf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "density",
                        "type": "heman_image *",
                        "definition": [
                            "heman_image *density"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minradius",
                        "type": "float",
                        "definition": [
                            "float minradius"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxradius",
                        "type": "float",
                        "definition": [
                            "float maxradius"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "float",
                        "definition": [
                            "float width = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "float",
                        "definition": [
                            "float height = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxattempts",
                        "type": "int",
                        "definition": [
                            "int maxattempts = 30"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rscale",
                        "type": "float",
                        "definition": [
                            "float rscale = 1.0f / 4294967295U"
                        ]
                    },
                    {
                        "path": null,
                        "name": "seed",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int seed = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rvec",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 rvec"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gindex",
                        "type": "int",
                        "definition": [
                            "int gindex"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cellsize",
                        "type": "float",
                        "definition": [
                            "float cellsize = maxradius / sqrtf(2)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invcell",
                        "type": "float",
                        "definition": [
                            "float invcell = 1.0f / cellsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ncols",
                        "type": "int",
                        "definition": [
                            "int ncols = ceil(width * invcell)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nrows",
                        "type": "int",
                        "definition": [
                            "int nrows = ceil(height * invcell)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxcol",
                        "type": "int",
                        "definition": [
                            "int maxcol = ncols - 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxrow",
                        "type": "int",
                        "definition": [
                            "int maxrow = nrows - 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ncells",
                        "type": "int",
                        "definition": [
                            "int ncells = ncols * nrows"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ntexels",
                        "type": "int",
                        "definition": [
                            "int ntexels = cellsize * density->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gcapacity",
                        "type": "int",
                        "definition": [
                            "int gcapacity = ntexels * ntexels"
                        ]
                    },
                    {
                        "path": null,
                        "name": "grid",
                        "type": "int *",
                        "definition": [
                            "int *grid = malloc((ncells * (sizeof(int))) * gcapacity)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ngrid",
                        "type": "int *",
                        "definition": [
                            "int *ngrid = malloc(ncells * (sizeof(int)))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "actives",
                        "type": "int *",
                        "definition": [
                            "int *actives = malloc(ncells * (sizeof(int)))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nactives",
                        "type": "int",
                        "definition": [
                            "int nactives = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxsamples",
                        "type": "int",
                        "definition": [
                            "int maxsamples = ncells * gcapacity"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "heman_points *",
                        "definition": [
                            "heman_points *result = heman_image_create(maxsamples, 1, 2)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "samples",
                        "type": "kmVec2 *",
                        "definition": [
                            "kmVec2 *samples = (kmVec2 *) result->data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nsamples",
                        "type": "int",
                        "definition": [
                            "int nsamples = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pt",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 pt"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "randhash",
            "header": "",
            "params": [
                "unsigned int seed"
            ],
            "definition": "unsigned int randhash(unsigned int seed)\n{\n  unsigned int i = (seed ^ 12345391u) * 2654435769u;\n  i ^= (i << 6) ^ (i >> 26);\n  i *= 2654435769u;\n  i += (i << 5) ^ (i >> 12);\n  return i;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "seed",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int seed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int i = (seed ^ 12345391u) * 2654435769u"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "randhashf",
            "header": "",
            "params": [
                "unsigned int seed",
                "float a",
                "float b"
            ],
            "definition": "float randhashf(unsigned int seed, float a, float b)\n{\n  return (((b - a) * randhash(seed)) / ((float) 4294967295U)) + a;\n}\n\n",
            "calle": [
                "randhash"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "seed",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int seed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "float",
                        "definition": [
                            "float a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "float",
                        "definition": [
                            "float b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "sample_annulus",
            "header": "",
            "params": [
                "float radius",
                "kmVec2 center",
                "unsigned int *seedptr"
            ],
            "definition": "kmVec2 sample_annulus(float radius, kmVec2 center, unsigned int *seedptr)\n{\n  unsigned int seed = *seedptr;\n  kmVec2 r;\n  float rscale = 1.0f / 4294967295U;\n  while (1)\n  {\n    r.x = ((4 * rscale) * randhash(seed)) - 2;\n    seed += 1;\n    r.y = ((4 * rscale) * randhash(seed)) - 2;\n    seed += 1;\n    float r2 = kmVec2LengthSq(&r);\n    if ((r2 > 1) && (r2 <= 4))\n    {\n      break;\n    }\n  }\n\n  *seedptr = seed;\n  kmVec2Scale(&r, &r, radius);\n  kmVec2Add(&r, &r, &center);\n  return r;\n}\n\n",
            "calle": [
                "kmVec2Add",
                "kmVec2LengthSq",
                "kmVec2Scale",
                "randhash"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "radius",
                        "type": "float",
                        "definition": [
                            "float radius"
                        ]
                    },
                    {
                        "path": null,
                        "name": "center",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 center"
                        ]
                    },
                    {
                        "path": null,
                        "name": "seedptr",
                        "type": "unsigned int *",
                        "definition": [
                            "unsigned int *seedptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "seed",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int seed = *seedptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rscale",
                        "type": "float",
                        "definition": [
                            "float rscale = 1.0f / 4294967295U"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r2",
                        "type": "float",
                        "definition": [
                            "float r2 = kmVec2LengthSq(&r)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_heman_points_from_poisson_1",
            "header": "",
            "params": [
                "float * const invcell_ref",
                "int * const ncols_ref",
                "int * const nactives_ref",
                "int * const nsamples_ref",
                "kmVec2 * const pt_ref",
                "float width",
                "float height",
                "float radius",
                "int maxattempts",
                "unsigned int seed",
                "kmVec2 rvec",
                "float r2",
                "int maxcol",
                "int maxrow",
                "int * const grid",
                "int * const actives",
                "kmVec2 * const samples"
            ],
            "definition": "void helper_heman_points_from_poisson_1(float * const invcell_ref, int * const ncols_ref, int * const nactives_ref, int * const nsamples_ref, kmVec2 * const pt_ref, float width, float height, float radius, int maxattempts, unsigned int seed, kmVec2 rvec, float r2, int maxcol, int maxrow, int * const grid, int * const actives, kmVec2 * const samples)\n{\n  float invcell = *invcell_ref;\n  int ncols = *ncols_ref;\n  int nactives = *nactives_ref;\n  int nsamples = *nsamples_ref;\n  kmVec2 pt = *pt_ref;\n  int aindex = (randhashf(seed++, 0, nactives) > (nactives - 1)) ? (nactives - 1) : (randhashf(seed++, 0, nactives));\n  int sindex = actives[aindex];\n  int found = 0;\n  kmVec2 j;\n  kmVec2 minj;\n  kmVec2 maxj;\n  kmVec2 delta;\n  int attempt;\n  for (attempt = 0; (attempt < maxattempts) && (!found); attempt += 1)\n  {\n    helper_helper_heman_points_from_poisson_1_1(&pt, &found, &j, &minj, &maxj, width, height, radius, seed, rvec, r2, maxcol, maxrow, grid, samples, invcell, ncols, sindex, delta);\n  }\n\n  if (found)\n  {\n    grid[((int) (pt.x * invcell)) + (ncols * ((int) (pt.y * invcell)))] = (actives[nactives] = nsamples);\n    nactives += 1;\n    samples[nsamples++] = pt;\n  }\n  else\n  {\n    if ((--nactives) <= 0)\n    {\n      break;\n    }\n    actives[aindex] = actives[nactives];\n  }\n  *invcell_ref = invcell;\n  *ncols_ref = ncols;\n  *nactives_ref = nactives;\n  *nsamples_ref = nsamples;\n  *pt_ref = pt;\n}\n\n",
            "calle": [
                "helper_helper_heman_points_from_poisson_1_1",
                "randhashf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "invcell_ref",
                        "type": "float * const",
                        "definition": [
                            "float * const invcell_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ncols_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ncols_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nactives_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const nactives_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nsamples_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const nsamples_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pt_ref",
                        "type": "kmVec2 * const",
                        "definition": [
                            "kmVec2 * const pt_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "float",
                        "definition": [
                            "float width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "float",
                        "definition": [
                            "float height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "radius",
                        "type": "float",
                        "definition": [
                            "float radius"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxattempts",
                        "type": "int",
                        "definition": [
                            "int maxattempts"
                        ]
                    },
                    {
                        "path": null,
                        "name": "seed",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int seed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rvec",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 rvec"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r2",
                        "type": "float",
                        "definition": [
                            "float r2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxcol",
                        "type": "int",
                        "definition": [
                            "int maxcol"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxrow",
                        "type": "int",
                        "definition": [
                            "int maxrow"
                        ]
                    },
                    {
                        "path": null,
                        "name": "grid",
                        "type": "int * const",
                        "definition": [
                            "int * const grid"
                        ]
                    },
                    {
                        "path": null,
                        "name": "actives",
                        "type": "int * const",
                        "definition": [
                            "int * const actives"
                        ]
                    },
                    {
                        "path": null,
                        "name": "samples",
                        "type": "kmVec2 * const",
                        "definition": [
                            "kmVec2 * const samples"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invcell",
                        "type": "float",
                        "definition": [
                            "float invcell = *invcell_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ncols",
                        "type": "int",
                        "definition": [
                            "int ncols = *ncols_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nactives",
                        "type": "int",
                        "definition": [
                            "int nactives = *nactives_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nsamples",
                        "type": "int",
                        "definition": [
                            "int nsamples = *nsamples_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pt",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 pt = *pt_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aindex",
                        "type": "int",
                        "definition": [
                            "int aindex = (randhashf(seed++, 0, nactives) > (nactives - 1)) ? (nactives - 1) : (randhashf(seed++, 0, nactives))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sindex",
                        "type": "int",
                        "definition": [
                            "int sindex = actives[aindex]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "found",
                        "type": "int",
                        "definition": [
                            "int found = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minj",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 minj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxj",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 maxj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "delta",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 delta"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attempt",
                        "type": "int",
                        "definition": [
                            "int attempt"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_heman_points_from_density_1",
            "header": "",
            "params": [
                "int * const gindex_ref",
                "int * const gcapacity_ref",
                "int * const nactives_ref",
                "int * const nsamples_ref",
                "kmVec2 * const pt_ref",
                "heman_image * const density",
                "float minradius",
                "float maxradius",
                "float width",
                "float height",
                "int maxattempts",
                "unsigned int seed",
                "kmVec2 rvec",
                "float invcell",
                "int ncols",
                "int maxcol",
                "int maxrow",
                "int * const grid",
                "int * const ngrid",
                "int * const actives",
                "kmVec2 * const samples"
            ],
            "definition": "void helper_heman_points_from_density_1(int * const gindex_ref, int * const gcapacity_ref, int * const nactives_ref, int * const nsamples_ref, kmVec2 * const pt_ref, heman_image * const density, float minradius, float maxradius, float width, float height, int maxattempts, unsigned int seed, kmVec2 rvec, float invcell, int ncols, int maxcol, int maxrow, int * const grid, int * const ngrid, int * const actives, kmVec2 * const samples)\n{\n  int gindex = *gindex_ref;\n  int gcapacity = *gcapacity_ref;\n  int nactives = *nactives_ref;\n  int nsamples = *nsamples_ref;\n  kmVec2 pt = *pt_ref;\n  int aindex = (randhashf(seed++, 0, nactives) > (nactives - 1)) ? (nactives - 1) : (randhashf(seed++, 0, nactives));\n  int sindex = actives[aindex];\n  int found = 0;\n  kmVec2 j;\n  kmVec2 minj;\n  kmVec2 maxj;\n  kmVec2 delta;\n  int attempt;\n  for (attempt = 0; (attempt < maxattempts) && (!found); attempt += 1)\n  {\n    helper_helper_heman_points_from_density_1_1(&pt, &found, &j, &minj, &maxj, density, minradius, maxradius, width, height, seed, rvec, invcell, ncols, maxcol, maxrow, grid, ngrid, samples, gcapacity, sindex, delta);\n  }\n\n  if (found && (ngrid[((int) (pt.x * invcell)) + (ncols * ((int) (pt.y * invcell)))] >= gcapacity))\n  {\n    found = 0;\n  }\n  if (found)\n  {\n    actives[nactives] = nsamples;\n    nactives += 1;\n    gindex = ((int) (pt.x * invcell)) + (ncols * ((int) (pt.y * invcell)));\n    grid[(gcapacity * gindex) + ngrid[gindex]] = nsamples;\n    ngrid[gindex] += 1;\n    samples[nsamples++] = pt;\n  }\n  else\n  {\n    if ((--nactives) <= 0)\n    {\n      break;\n    }\n    actives[aindex] = actives[nactives];\n  }\n  *gindex_ref = gindex;\n  *gcapacity_ref = gcapacity;\n  *nactives_ref = nactives;\n  *nsamples_ref = nsamples;\n  *pt_ref = pt;\n}\n\n",
            "calle": [
                "helper_helper_heman_points_from_density_1_1",
                "randhashf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "gindex_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const gindex_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gcapacity_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const gcapacity_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nactives_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const nactives_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nsamples_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const nsamples_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pt_ref",
                        "type": "kmVec2 * const",
                        "definition": [
                            "kmVec2 * const pt_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "density",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const density"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minradius",
                        "type": "float",
                        "definition": [
                            "float minradius"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxradius",
                        "type": "float",
                        "definition": [
                            "float maxradius"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "float",
                        "definition": [
                            "float width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "float",
                        "definition": [
                            "float height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxattempts",
                        "type": "int",
                        "definition": [
                            "int maxattempts"
                        ]
                    },
                    {
                        "path": null,
                        "name": "seed",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int seed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rvec",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 rvec"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invcell",
                        "type": "float",
                        "definition": [
                            "float invcell"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ncols",
                        "type": "int",
                        "definition": [
                            "int ncols"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxcol",
                        "type": "int",
                        "definition": [
                            "int maxcol"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxrow",
                        "type": "int",
                        "definition": [
                            "int maxrow"
                        ]
                    },
                    {
                        "path": null,
                        "name": "grid",
                        "type": "int * const",
                        "definition": [
                            "int * const grid"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ngrid",
                        "type": "int * const",
                        "definition": [
                            "int * const ngrid"
                        ]
                    },
                    {
                        "path": null,
                        "name": "actives",
                        "type": "int * const",
                        "definition": [
                            "int * const actives"
                        ]
                    },
                    {
                        "path": null,
                        "name": "samples",
                        "type": "kmVec2 * const",
                        "definition": [
                            "kmVec2 * const samples"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gindex",
                        "type": "int",
                        "definition": [
                            "int gindex = *gindex_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gcapacity",
                        "type": "int",
                        "definition": [
                            "int gcapacity = *gcapacity_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nactives",
                        "type": "int",
                        "definition": [
                            "int nactives = *nactives_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nsamples",
                        "type": "int",
                        "definition": [
                            "int nsamples = *nsamples_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pt",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 pt = *pt_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aindex",
                        "type": "int",
                        "definition": [
                            "int aindex = (randhashf(seed++, 0, nactives) > (nactives - 1)) ? (nactives - 1) : (randhashf(seed++, 0, nactives))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sindex",
                        "type": "int",
                        "definition": [
                            "int sindex = actives[aindex]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "found",
                        "type": "int",
                        "definition": [
                            "int found = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minj",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 minj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxj",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 maxj"
                        ]
                    },
                    {
                        "path": null,
                        "name": "delta",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 delta"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attempt",
                        "type": "int",
                        "definition": [
                            "int attempt"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_heman_points_from_poisson_1_1",
            "header": "",
            "params": [
                "kmVec2 * const pt_ref",
                "int * const found_ref",
                "kmVec2 * const j_ref",
                "kmVec2 * const minj_ref",
                "kmVec2 * const maxj_ref",
                "float width",
                "float height",
                "float radius",
                "unsigned int seed",
                "kmVec2 rvec",
                "float r2",
                "int maxcol",
                "int maxrow",
                "int * const grid",
                "kmVec2 * const samples",
                "float invcell",
                "int ncols",
                "int sindex",
                "kmVec2 delta"
            ],
            "definition": "void helper_helper_heman_points_from_poisson_1_1(kmVec2 * const pt_ref, int * const found_ref, kmVec2 * const j_ref, kmVec2 * const minj_ref, kmVec2 * const maxj_ref, float width, float height, float radius, unsigned int seed, kmVec2 rvec, float r2, int maxcol, int maxrow, int * const grid, kmVec2 * const samples, float invcell, int ncols, int sindex, kmVec2 delta)\n{\n  kmVec2 pt = *pt_ref;\n  int found = *found_ref;\n  kmVec2 j = *j_ref;\n  kmVec2 minj = *minj_ref;\n  kmVec2 maxj = *maxj_ref;\n  pt = sample_annulus(radius, samples[sindex], &seed);\n  if ((((pt.x < 0) || (pt.x >= width)) || (pt.y < 0)) || (pt.y >= height))\n  {\n    continue;\n  }\n  minj = (maxj = pt);\n  kmVec2Add(&maxj, &maxj, &rvec);\n  kmVec2Subtract(&minj, &minj, &rvec);\n  kmVec2Scale(&minj, &minj, invcell);\n  kmVec2Scale(&maxj, &maxj, invcell);\n  minj.x = (0 > ((maxcol > ((int) minj.x)) ? ((int) minj.x) : (maxcol))) ? (0) : ((maxcol > ((int) minj.x)) ? ((int) minj.x) : (maxcol));\n  maxj.x = (0 > ((maxcol > ((int) maxj.x)) ? ((int) maxj.x) : (maxcol))) ? (0) : ((maxcol > ((int) maxj.x)) ? ((int) maxj.x) : (maxcol));\n  minj.y = (0 > ((maxrow > ((int) minj.y)) ? ((int) minj.y) : (maxrow))) ? (0) : ((maxrow > ((int) minj.y)) ? ((int) minj.y) : (maxrow));\n  maxj.y = (0 > ((maxrow > ((int) maxj.y)) ? ((int) maxj.y) : (maxrow))) ? (0) : ((maxrow > ((int) maxj.y)) ? ((int) maxj.y) : (maxrow));\n  int reject = 0;\n  for (j.y = minj.y; (j.y <= maxj.y) && (!reject); j.y += 1)\n  {\n    for (j.x = minj.x; (j.x <= maxj.x) && (!reject); j.x += 1)\n    {\n      int entry = grid[(((int) j.y) * ncols) + ((int) j.x)];\n      if ((entry > (-1)) && (entry != sindex))\n      {\n        kmVec2Subtract(&delta, &samples[entry], &pt);\n        if (kmVec2LengthSq(&delta) < r2)\n        {\n          reject = 1;\n        }\n      }\n    }\n\n  }\n\n  if (reject)\n  {\n    continue;\n  }\n  found = 1;\n  *pt_ref = pt;\n  *found_ref = found;\n  *j_ref = j;\n  *minj_ref = minj;\n  *maxj_ref = maxj;\n}\n\n",
            "calle": [
                "kmVec2Add",
                "kmVec2LengthSq",
                "kmVec2Scale",
                "kmVec2Subtract",
                "sample_annulus"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pt_ref",
                        "type": "kmVec2 * const",
                        "definition": [
                            "kmVec2 * const pt_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "found_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const found_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "kmVec2 * const",
                        "definition": [
                            "kmVec2 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minj_ref",
                        "type": "kmVec2 * const",
                        "definition": [
                            "kmVec2 * const minj_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxj_ref",
                        "type": "kmVec2 * const",
                        "definition": [
                            "kmVec2 * const maxj_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "float",
                        "definition": [
                            "float width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "float",
                        "definition": [
                            "float height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "radius",
                        "type": "float",
                        "definition": [
                            "float radius"
                        ]
                    },
                    {
                        "path": null,
                        "name": "seed",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int seed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rvec",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 rvec"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r2",
                        "type": "float",
                        "definition": [
                            "float r2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxcol",
                        "type": "int",
                        "definition": [
                            "int maxcol"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxrow",
                        "type": "int",
                        "definition": [
                            "int maxrow"
                        ]
                    },
                    {
                        "path": null,
                        "name": "grid",
                        "type": "int * const",
                        "definition": [
                            "int * const grid"
                        ]
                    },
                    {
                        "path": null,
                        "name": "samples",
                        "type": "kmVec2 * const",
                        "definition": [
                            "kmVec2 * const samples"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invcell",
                        "type": "float",
                        "definition": [
                            "float invcell"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ncols",
                        "type": "int",
                        "definition": [
                            "int ncols"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sindex",
                        "type": "int",
                        "definition": [
                            "int sindex"
                        ]
                    },
                    {
                        "path": null,
                        "name": "delta",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 delta"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pt",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 pt = *pt_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "found",
                        "type": "int",
                        "definition": [
                            "int found = *found_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minj",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 minj = *minj_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxj",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 maxj = *maxj_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reject",
                        "type": "int",
                        "definition": [
                            "int reject = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry",
                        "type": "int",
                        "definition": [
                            "int entry = grid[(((int) j.y) * ncols) + ((int) j.x)]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_heman_points_from_density_1_1",
            "header": "",
            "params": [
                "kmVec2 * const pt_ref",
                "int * const found_ref",
                "kmVec2 * const j_ref",
                "kmVec2 * const minj_ref",
                "kmVec2 * const maxj_ref",
                "heman_image * const density",
                "float minradius",
                "float maxradius",
                "float width",
                "float height",
                "unsigned int seed",
                "kmVec2 rvec",
                "float invcell",
                "int ncols",
                "int maxcol",
                "int maxrow",
                "int * const grid",
                "int * const ngrid",
                "kmVec2 * const samples",
                "int gcapacity",
                "int sindex",
                "kmVec2 delta"
            ],
            "definition": "void helper_helper_heman_points_from_density_1_1(kmVec2 * const pt_ref, int * const found_ref, kmVec2 * const j_ref, kmVec2 * const minj_ref, kmVec2 * const maxj_ref, heman_image * const density, float minradius, float maxradius, float width, float height, unsigned int seed, kmVec2 rvec, float invcell, int ncols, int maxcol, int maxrow, int * const grid, int * const ngrid, kmVec2 * const samples, int gcapacity, int sindex, kmVec2 delta)\n{\n  kmVec2 pt = *pt_ref;\n  int found = *found_ref;\n  kmVec2 j = *j_ref;\n  kmVec2 minj = *minj_ref;\n  kmVec2 maxj = *maxj_ref;\n  pt = sample_annulus(maxradius, samples[sindex], &seed);\n  if ((((pt.x < 0) || (pt.x >= width)) || (pt.y < 0)) || (pt.y >= height))\n  {\n    continue;\n  }\n  minj = (maxj = pt);\n  kmVec2Add(&maxj, &maxj, &rvec);\n  kmVec2Subtract(&minj, &minj, &rvec);\n  kmVec2Scale(&minj, &minj, invcell);\n  kmVec2Scale(&maxj, &maxj, invcell);\n  minj.x = (0 > ((maxcol > ((int) minj.x)) ? ((int) minj.x) : (maxcol))) ? (0) : ((maxcol > ((int) minj.x)) ? ((int) minj.x) : (maxcol));\n  maxj.x = (0 > ((maxcol > ((int) maxj.x)) ? ((int) maxj.x) : (maxcol))) ? (0) : ((maxcol > ((int) maxj.x)) ? ((int) maxj.x) : (maxcol));\n  minj.y = (0 > ((maxrow > ((int) minj.y)) ? ((int) minj.y) : (maxrow))) ? (0) : ((maxrow > ((int) minj.y)) ? ((int) minj.y) : (maxrow));\n  maxj.y = (0 > ((maxrow > ((int) maxj.y)) ? ((int) maxj.y) : (maxrow))) ? (0) : ((maxrow > ((int) maxj.y)) ? ((int) maxj.y) : (maxrow));\n  int reject = 0;\n  float densityval;\n  heman_image_sample(density, pt.x, pt.y, &densityval);\n  densityval = sqrt(densityval);\n  float mindist = maxradius - (densityval * (maxradius - minradius));\n  float r2 = mindist * mindist;\n  for (j.y = minj.y; (j.y <= maxj.y) && (!reject); j.y += 1)\n  {\n    for (j.x = minj.x; (j.x <= maxj.x) && (!reject); j.x += 1)\n    {\n      for (int g = ((((int) j.y) * ncols) + ((int) j.x)) * gcapacity; g < ((((((int) j.y) * ncols) + ((int) j.x)) * gcapacity) + ngrid[(((int) j.y) * ncols) + ((int) j.x)]); g += 1)\n      {\n        int entry = grid[g];\n        if (entry != sindex)\n        {\n          kmVec2Subtract(&delta, &samples[entry], &pt);\n          if (kmVec2LengthSq(&delta) < r2)\n          {\n            reject = 1;\n          }\n        }\n      }\n\n    }\n\n  }\n\n  if (reject)\n  {\n    continue;\n  }\n  found = 1;\n  *pt_ref = pt;\n  *found_ref = found;\n  *j_ref = j;\n  *minj_ref = minj;\n  *maxj_ref = maxj;\n}\n\n",
            "calle": [
                "heman_image_sample",
                "kmVec2Add",
                "kmVec2LengthSq",
                "kmVec2Scale",
                "kmVec2Subtract",
                "sample_annulus",
                "sqrt"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pt_ref",
                        "type": "kmVec2 * const",
                        "definition": [
                            "kmVec2 * const pt_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "found_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const found_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "kmVec2 * const",
                        "definition": [
                            "kmVec2 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minj_ref",
                        "type": "kmVec2 * const",
                        "definition": [
                            "kmVec2 * const minj_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxj_ref",
                        "type": "kmVec2 * const",
                        "definition": [
                            "kmVec2 * const maxj_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "density",
                        "type": "heman_image * const",
                        "definition": [
                            "heman_image * const density"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minradius",
                        "type": "float",
                        "definition": [
                            "float minradius"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxradius",
                        "type": "float",
                        "definition": [
                            "float maxradius"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "float",
                        "definition": [
                            "float width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "float",
                        "definition": [
                            "float height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "seed",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int seed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rvec",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 rvec"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invcell",
                        "type": "float",
                        "definition": [
                            "float invcell"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ncols",
                        "type": "int",
                        "definition": [
                            "int ncols"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxcol",
                        "type": "int",
                        "definition": [
                            "int maxcol"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxrow",
                        "type": "int",
                        "definition": [
                            "int maxrow"
                        ]
                    },
                    {
                        "path": null,
                        "name": "grid",
                        "type": "int * const",
                        "definition": [
                            "int * const grid"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ngrid",
                        "type": "int * const",
                        "definition": [
                            "int * const ngrid"
                        ]
                    },
                    {
                        "path": null,
                        "name": "samples",
                        "type": "kmVec2 * const",
                        "definition": [
                            "kmVec2 * const samples"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gcapacity",
                        "type": "int",
                        "definition": [
                            "int gcapacity"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sindex",
                        "type": "int",
                        "definition": [
                            "int sindex"
                        ]
                    },
                    {
                        "path": null,
                        "name": "delta",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 delta"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pt",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 pt = *pt_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "found",
                        "type": "int",
                        "definition": [
                            "int found = *found_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minj",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 minj = *minj_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxj",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 maxj = *maxj_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reject",
                        "type": "int",
                        "definition": [
                            "int reject = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "densityval",
                        "type": "float",
                        "definition": [
                            "float densityval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mindist",
                        "type": "float",
                        "definition": [
                            "float mindist = maxradius - (densityval * (maxradius - minradius))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r2",
                        "type": "float",
                        "definition": [
                            "float r2 = mindist * mindist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "g",
                        "type": "int",
                        "definition": [
                            "int g = ((((int) j.y) * ncols) + ((int) j.x)) * gcapacity"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entry",
                        "type": "int",
                        "definition": [
                            "int entry = grid[g]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmAABB2Initialize",
            "header": "kmAABB2 *kmAABB2Initialize(kmAABB2 *pBox, const kmVec2 *centre, const float width, const float height, const float depth)",
            "params": [
                "kmAABB2 *pBox",
                "const kmVec2 *centre",
                "const float width",
                "const float height",
                "const float depth"
            ],
            "definition": "kmAABB2 *kmAABB2Initialize(kmAABB2 *pBox, const kmVec2 *centre, const float width, const float height, const float depth)\n{\n  if (!pBox)\n  {\n    return 0;\n  }\n  kmVec2 origin;\n  kmVec2 *point = (centre) ? ((kmVec2 *) centre) : (&origin);\n  kmVec2Fill(&origin, .0f, .0f);\n  pBox->min.x = point->x - (width / 2);\n  pBox->min.y = point->y - (height / 2);\n  pBox->max.x = point->x + (width / 2);\n  pBox->max.y = point->y + (height / 2);\n  return pBox;\n}\n\n",
            "calle": [
                "kmVec2Fill"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pBox",
                        "type": "kmAABB2 *",
                        "definition": [
                            "kmAABB2 *pBox"
                        ]
                    },
                    {
                        "path": null,
                        "name": "centre",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *centre"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "const float",
                        "definition": [
                            "const float width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "const float",
                        "definition": [
                            "const float height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "depth",
                        "type": "const float",
                        "definition": [
                            "const float depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "origin",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 origin"
                        ]
                    },
                    {
                        "path": null,
                        "name": "point",
                        "type": "kmVec2 *",
                        "definition": [
                            "kmVec2 *point = (centre) ? ((kmVec2 *) centre) : (&origin)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmAABB2Sanitize",
            "header": "kmAABB2 *kmAABB2Sanitize(kmAABB2 *pOut, const kmAABB2 *pIn)",
            "params": [
                "kmAABB2 *pOut",
                "const kmAABB2 *pIn"
            ],
            "definition": "kmAABB2 *kmAABB2Sanitize(kmAABB2 *pOut, const kmAABB2 *pIn)\n{\n  if (pIn->min.x <= pIn->max.x)\n  {\n    pOut->min.x = pIn->min.x;\n    pOut->max.x = pIn->max.x;\n  }\n  else\n  {\n    pOut->min.x = pIn->max.x;\n    pOut->max.x = pIn->min.x;\n  }\n  if (pIn->min.y <= pIn->max.y)\n  {\n    pOut->min.y = pIn->min.y;\n    pOut->max.y = pIn->max.y;\n  }\n  else\n  {\n    pOut->min.y = pIn->max.y;\n    pOut->max.y = pIn->min.y;\n  }\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmAABB2 *",
                        "definition": [
                            "kmAABB2 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmAABB2 *",
                        "definition": [
                            "const kmAABB2 *pIn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmAABB2ContainsPoint",
            "header": "int kmAABB2ContainsPoint(const kmAABB2 *pBox, const kmVec2 *pPoint)",
            "params": [
                "const kmAABB2 *pBox",
                "const kmVec2 *pPoint"
            ],
            "definition": "int kmAABB2ContainsPoint(const kmAABB2 *pBox, const kmVec2 *pPoint)\n{\n  if ((((pPoint->x >= pBox->min.x) && (pPoint->x <= pBox->max.x)) && (pPoint->y >= pBox->min.y)) && (pPoint->y <= pBox->max.y))\n  {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pBox",
                        "type": "const kmAABB2 *",
                        "definition": [
                            "const kmAABB2 *pBox"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pPoint",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *pPoint"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmAABB2Assign",
            "header": "kmAABB2 *kmAABB2Assign(kmAABB2 *pOut, const kmAABB2 *pIn)",
            "params": [
                "kmAABB2 *pOut",
                "const kmAABB2 *pIn"
            ],
            "definition": "kmAABB2 *kmAABB2Assign(kmAABB2 *pOut, const kmAABB2 *pIn)\n{\n  kmVec2Assign(&pOut->min, &pIn->min);\n  kmVec2Assign(&pOut->max, &pIn->max);\n  return pOut;\n}\n\n",
            "calle": [
                "kmVec2Assign"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmAABB2 *",
                        "definition": [
                            "kmAABB2 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmAABB2 *",
                        "definition": [
                            "const kmAABB2 *pIn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmAABB2Translate",
            "header": "kmAABB2 *kmAABB2Translate(kmAABB2 *pOut, const kmAABB2 *pIn, const kmVec2 *translation)",
            "params": [
                "kmAABB2 *pOut",
                "const kmAABB2 *pIn",
                "const kmVec2 *translation"
            ],
            "definition": "kmAABB2 *kmAABB2Translate(kmAABB2 *pOut, const kmAABB2 *pIn, const kmVec2 *translation)\n{\n  kmVec2Add(&pOut->min, &pIn->min, translation);\n  kmVec2Add(&pOut->max, &pIn->max, translation);\n  return pOut;\n}\n\n",
            "calle": [
                "kmVec2Add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmAABB2 *",
                        "definition": [
                            "kmAABB2 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmAABB2 *",
                        "definition": [
                            "const kmAABB2 *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "translation",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *translation"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmAABB2Scale",
            "header": "kmAABB2 *kmAABB2Scale(kmAABB2 *pOut, const kmAABB2 *pIn, float s)",
            "params": [
                "kmAABB2 *pOut",
                "const kmAABB2 *pIn",
                "float s"
            ],
            "definition": "kmAABB2 *kmAABB2Scale(kmAABB2 *pOut, const kmAABB2 *pIn, float s)\n{\n  kmVec2Scale(&pOut->max, &pIn->max, s);\n  kmVec2Scale(&pOut->min, &pIn->min, s);\n  return pOut;\n}\n\n",
            "calle": [
                "kmVec2Scale"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmAABB2 *",
                        "definition": [
                            "kmAABB2 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmAABB2 *",
                        "definition": [
                            "const kmAABB2 *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "float",
                        "definition": [
                            "float s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmAABB2ScaleWithPivot",
            "header": "kmAABB2 *kmAABB2ScaleWithPivot(kmAABB2 *pOut, const kmAABB2 *pIn, const kmVec2 *pivot, float s)",
            "params": [
                "kmAABB2 *pOut",
                "const kmAABB2 *pIn",
                "const kmVec2 *pivot",
                "float s"
            ],
            "definition": "kmAABB2 *kmAABB2ScaleWithPivot(kmAABB2 *pOut, const kmAABB2 *pIn, const kmVec2 *pivot, float s)\n{\n  kmVec2 translate;\n  translate.x = -pivot->x;\n  translate.y = -pivot->y;\n  kmAABB2Translate(pOut, pIn, &translate);\n  kmAABB2Scale(pOut, pIn, s);\n  kmAABB2Translate(pOut, pIn, pivot);\n  return pOut;\n}\n\n",
            "calle": [
                "kmAABB2Scale",
                "kmAABB2Translate"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmAABB2 *",
                        "definition": [
                            "kmAABB2 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmAABB2 *",
                        "definition": [
                            "const kmAABB2 *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pivot",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *pivot"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "float",
                        "definition": [
                            "float s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "translate",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 translate"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmAABB2ContainsAABB",
            "header": "unsigned int kmAABB2ContainsAABB(const kmAABB2 *container, const kmAABB2 *to_check)",
            "params": [
                "const kmAABB2 *container",
                "const kmAABB2 *to_check"
            ],
            "definition": "unsigned int kmAABB2ContainsAABB(const kmAABB2 *container, const kmAABB2 *to_check)\n{\n  kmVec2 corners[4];\n  kmVec2Fill(&corners[0], to_check->min.x, to_check->min.y);\n  kmVec2Fill(&corners[1], to_check->max.x, to_check->min.y);\n  kmVec2Fill(&corners[2], to_check->max.x, to_check->max.y);\n  kmVec2Fill(&corners[3], to_check->min.x, to_check->max.y);\n  int nContains = ((kmAABB2ContainsPoint(container, &corners[0]) + kmAABB2ContainsPoint(container, &corners[1])) + kmAABB2ContainsPoint(container, &corners[2])) + kmAABB2ContainsPoint(container, &corners[3]);\n  if (nContains == 0)\n  {\n    return (unsigned int) 0;\n  }\n  else\n    if (nContains < 4)\n  {\n    return (unsigned int) 1;\n  }\n  else\n  {\n    return (unsigned int) 2;\n  }\n}\n\n",
            "calle": [
                "kmAABB2ContainsPoint",
                "kmVec2Fill"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "container",
                        "type": "const kmAABB2 *",
                        "definition": [
                            "const kmAABB2 *container"
                        ]
                    },
                    {
                        "path": null,
                        "name": "to_check",
                        "type": "const kmAABB2 *",
                        "definition": [
                            "const kmAABB2 *to_check"
                        ]
                    },
                    {
                        "path": null,
                        "name": "corners",
                        "type": "kmVec2 [4]",
                        "definition": [
                            "kmVec2 corners[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nContains",
                        "type": "int",
                        "definition": [
                            "int nContains = ((kmAABB2ContainsPoint(container, &corners[0]) + kmAABB2ContainsPoint(container, &corners[1])) + kmAABB2ContainsPoint(container, &corners[2])) + kmAABB2ContainsPoint(container, &corners[3])"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmAABB2DiameterX",
            "header": "float kmAABB2DiameterX(const kmAABB2 *aabb)",
            "params": [
                "const kmAABB2 *aabb"
            ],
            "definition": "float kmAABB2DiameterX(const kmAABB2 *aabb)\n{\n  return aabb->max.x - aabb->min.x;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "aabb",
                        "type": "const kmAABB2 *",
                        "definition": [
                            "const kmAABB2 *aabb"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmAABB2DiameterY",
            "header": "float kmAABB2DiameterY(const kmAABB2 *aabb)",
            "params": [
                "const kmAABB2 *aabb"
            ],
            "definition": "float kmAABB2DiameterY(const kmAABB2 *aabb)\n{\n  return aabb->max.y - aabb->min.y;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "aabb",
                        "type": "const kmAABB2 *",
                        "definition": [
                            "const kmAABB2 *aabb"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmAABB2Centre",
            "header": "kmVec2 *kmAABB2Centre(const kmAABB2 *aabb, kmVec2 *pOut)",
            "params": [
                "const kmAABB2 *aabb",
                "kmVec2 *pOut"
            ],
            "definition": "kmVec2 *kmAABB2Centre(const kmAABB2 *aabb, kmVec2 *pOut)\n{\n  kmVec2Add(pOut, &aabb->min, &aabb->max);\n  kmVec2Scale(pOut, pOut, 0.5);\n  return pOut;\n}\n\n",
            "calle": [
                "kmVec2Add",
                "kmVec2Scale"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "aabb",
                        "type": "const kmAABB2 *",
                        "definition": [
                            "const kmAABB2 *aabb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec2 *",
                        "definition": [
                            "kmVec2 *pOut"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmAABB2ExpandToContain",
            "header": "kmAABB2 *kmAABB2ExpandToContain(kmAABB2 *pOut, const kmAABB2 *pIn, const kmAABB2 *other)",
            "params": [
                "kmAABB2 *pOut",
                "const kmAABB2 *pIn",
                "const kmAABB2 *other"
            ],
            "definition": "kmAABB2 *kmAABB2ExpandToContain(kmAABB2 *pOut, const kmAABB2 *pIn, const kmAABB2 *other)\n{\n  kmAABB2 result;\n  result.min.x = (pIn->min.x < other->min.x) ? (pIn->min.x) : (other->min.x);\n  result.max.x = (pIn->max.x > other->max.x) ? (pIn->max.x) : (other->max.x);\n  result.min.y = (pIn->min.y < other->min.y) ? (pIn->min.y) : (other->min.y);\n  result.max.y = (pIn->max.y > other->max.y) ? (pIn->max.y) : (other->max.y);\n  kmAABB2Assign(pOut, &result);\n  return pOut;\n}\n\n",
            "calle": [
                "kmAABB2Assign"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmAABB2 *",
                        "definition": [
                            "kmAABB2 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmAABB2 *",
                        "definition": [
                            "const kmAABB2 *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "other",
                        "type": "const kmAABB2 *",
                        "definition": [
                            "const kmAABB2 *other"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "kmAABB2",
                        "definition": [
                            "kmAABB2 result"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmAABB3Initialize",
            "header": "kmAABB3 *kmAABB3Initialize(kmAABB3 *pBox, const kmVec3 *centre, const float width, const float height, const float depth)",
            "params": [
                "kmAABB3 *pBox",
                "const kmVec3 *centre",
                "const float width",
                "const float height",
                "const float depth"
            ],
            "definition": "kmAABB3 *kmAABB3Initialize(kmAABB3 *pBox, const kmVec3 *centre, const float width, const float height, const float depth)\n{\n  if (!pBox)\n  {\n    return 0;\n  }\n  kmVec3 origin;\n  kmVec3 *point = (centre) ? ((kmVec3 *) centre) : (&origin);\n  kmVec3Zero(&origin);\n  pBox->min.x = point->x - (width / 2);\n  pBox->min.y = point->y - (height / 2);\n  pBox->min.z = point->z - (depth / 2);\n  pBox->max.x = point->x + (width / 2);\n  pBox->max.y = point->y + (height / 2);\n  pBox->max.z = point->z + (depth / 2);\n  return pBox;\n}\n\n",
            "calle": [
                "kmVec3Zero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pBox",
                        "type": "kmAABB3 *",
                        "definition": [
                            "kmAABB3 *pBox"
                        ]
                    },
                    {
                        "path": null,
                        "name": "centre",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *centre"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "const float",
                        "definition": [
                            "const float width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "const float",
                        "definition": [
                            "const float height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "depth",
                        "type": "const float",
                        "definition": [
                            "const float depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "origin",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 origin"
                        ]
                    },
                    {
                        "path": null,
                        "name": "point",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *point = (centre) ? ((kmVec3 *) centre) : (&origin)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmAABB3ContainsPoint",
            "header": "int kmAABB3ContainsPoint(const kmAABB3 *pBox, const kmVec3 *pPoint)",
            "params": [
                "const kmAABB3 *pBox",
                "const kmVec3 *pPoint"
            ],
            "definition": "int kmAABB3ContainsPoint(const kmAABB3 *pBox, const kmVec3 *pPoint)\n{\n  if ((((((pPoint->x >= pBox->min.x) && (pPoint->x <= pBox->max.x)) && (pPoint->y >= pBox->min.y)) && (pPoint->y <= pBox->max.y)) && (pPoint->z >= pBox->min.z)) && (pPoint->z <= pBox->max.z))\n  {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pBox",
                        "type": "const kmAABB3 *",
                        "definition": [
                            "const kmAABB3 *pBox"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pPoint",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pPoint"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmAABB3Assign",
            "header": "kmAABB3 *kmAABB3Assign(kmAABB3 *pOut, const kmAABB3 *pIn)",
            "params": [
                "kmAABB3 *pOut",
                "const kmAABB3 *pIn"
            ],
            "definition": "kmAABB3 *kmAABB3Assign(kmAABB3 *pOut, const kmAABB3 *pIn)\n{\n  kmVec3Assign(&pOut->min, &pIn->min);\n  kmVec3Assign(&pOut->max, &pIn->max);\n  return pOut;\n}\n\n",
            "calle": [
                "kmVec3Assign"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmAABB3 *",
                        "definition": [
                            "kmAABB3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmAABB3 *",
                        "definition": [
                            "const kmAABB3 *pIn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmAABB3Scale",
            "header": "kmAABB3 *kmAABB3Scale(kmAABB3 *pOut, const kmAABB3 *pIn, float s)",
            "params": [
                "kmAABB3 *pOut",
                "const kmAABB3 *pIn",
                "float s"
            ],
            "definition": "kmAABB3 *kmAABB3Scale(kmAABB3 *pOut, const kmAABB3 *pIn, float s)\n{\n  assert(0 && \"Not implemented\");\n  return pOut;\n}\n\n",
            "calle": [
                "assert"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmAABB3 *",
                        "definition": [
                            "kmAABB3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmAABB3 *",
                        "definition": [
                            "const kmAABB3 *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "float",
                        "definition": [
                            "float s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmAABB3IntersectsTriangle",
            "header": "unsigned char kmAABB3IntersectsTriangle(kmAABB3 *box, const kmVec3 *p1, const kmVec3 *p2, const kmVec3 *p3)",
            "params": [
                "kmAABB3 *box",
                "const kmVec3 *p1",
                "const kmVec3 *p2",
                "const kmVec3 *p3"
            ],
            "definition": "unsigned char kmAABB3IntersectsTriangle(kmAABB3 *box, const kmVec3 *p1, const kmVec3 *p2, const kmVec3 *p3)\n{\n  assert(0 && \"Not implemented\");\n  return 1;\n}\n\n",
            "calle": [
                "assert"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "box",
                        "type": "kmAABB3 *",
                        "definition": [
                            "kmAABB3 *box"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p1",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *p1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p2",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *p2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p3",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *p3"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmAABB3IntersectsAABB",
            "header": "unsigned char kmAABB3IntersectsAABB(const kmAABB3 *box, const kmAABB3 *other)",
            "params": [
                "const kmAABB3 *box",
                "const kmAABB3 *other"
            ],
            "definition": "unsigned char kmAABB3IntersectsAABB(const kmAABB3 *box, const kmAABB3 *other)\n{\n  return kmAABB3ContainsAABB(box, other) != ((unsigned int) 0);\n}\n\n",
            "calle": [
                "kmAABB3ContainsAABB"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "box",
                        "type": "const kmAABB3 *",
                        "definition": [
                            "const kmAABB3 *box"
                        ]
                    },
                    {
                        "path": null,
                        "name": "other",
                        "type": "const kmAABB3 *",
                        "definition": [
                            "const kmAABB3 *other"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmAABB3ContainsAABB",
            "header": "unsigned int kmAABB3ContainsAABB(const kmAABB3 *container, const kmAABB3 *to_check)",
            "params": [
                "const kmAABB3 *container",
                "const kmAABB3 *to_check"
            ],
            "definition": "unsigned int kmAABB3ContainsAABB(const kmAABB3 *container, const kmAABB3 *to_check)\n{\n  kmVec3 corners[8];\n  unsigned int result = (unsigned int) 2;\n  unsigned char found = 0;\n  kmVec3Fill(&corners[0], to_check->min.x, to_check->min.y, to_check->min.z);\n  kmVec3Fill(&corners[1], to_check->max.x, to_check->min.y, to_check->min.z);\n  kmVec3Fill(&corners[2], to_check->max.x, to_check->max.y, to_check->min.z);\n  kmVec3Fill(&corners[3], to_check->min.x, to_check->max.y, to_check->min.z);\n  kmVec3Fill(&corners[4], to_check->min.x, to_check->min.y, to_check->max.z);\n  kmVec3Fill(&corners[5], to_check->max.x, to_check->min.y, to_check->max.z);\n  kmVec3Fill(&corners[6], to_check->max.x, to_check->max.y, to_check->max.z);\n  kmVec3Fill(&corners[7], to_check->min.x, to_check->max.y, to_check->max.z);\n  for (unsigned char i = 0; i < 8; i += 1)\n  {\n    if (!kmAABB3ContainsPoint(container, &corners[i]))\n    {\n      result = (unsigned int) 1;\n      if (found)\n      {\n        return result;\n      }\n    }\n    else\n    {\n      found = 1;\n    }\n  }\n\n  if (!found)\n  {\n    result = (unsigned int) 0;\n  }\n  return result;\n}\n\n",
            "calle": [
                "kmAABB3ContainsPoint",
                "kmVec3Fill"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "container",
                        "type": "const kmAABB3 *",
                        "definition": [
                            "const kmAABB3 *container"
                        ]
                    },
                    {
                        "path": null,
                        "name": "to_check",
                        "type": "const kmAABB3 *",
                        "definition": [
                            "const kmAABB3 *to_check"
                        ]
                    },
                    {
                        "path": null,
                        "name": "corners",
                        "type": "kmVec3 [8]",
                        "definition": [
                            "kmVec3 corners[8]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int result = (unsigned int) 2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "found",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char found = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char i = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmAABB3DiameterX",
            "header": "float kmAABB3DiameterX(const kmAABB3 *aabb)",
            "params": [
                "const kmAABB3 *aabb"
            ],
            "definition": "float kmAABB3DiameterX(const kmAABB3 *aabb)\n{\n  return fabs(aabb->max.x - aabb->min.x);\n}\n\n",
            "calle": [
                "fabs"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "aabb",
                        "type": "const kmAABB3 *",
                        "definition": [
                            "const kmAABB3 *aabb"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmAABB3DiameterY",
            "header": "float kmAABB3DiameterY(const kmAABB3 *aabb)",
            "params": [
                "const kmAABB3 *aabb"
            ],
            "definition": "float kmAABB3DiameterY(const kmAABB3 *aabb)\n{\n  return fabs(aabb->max.y - aabb->min.y);\n}\n\n",
            "calle": [
                "fabs"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "aabb",
                        "type": "const kmAABB3 *",
                        "definition": [
                            "const kmAABB3 *aabb"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmAABB3DiameterZ",
            "header": "float kmAABB3DiameterZ(const kmAABB3 *aabb)",
            "params": [
                "const kmAABB3 *aabb"
            ],
            "definition": "float kmAABB3DiameterZ(const kmAABB3 *aabb)\n{\n  return fabs(aabb->max.z - aabb->min.z);\n}\n\n",
            "calle": [
                "fabs"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "aabb",
                        "type": "const kmAABB3 *",
                        "definition": [
                            "const kmAABB3 *aabb"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmAABB3Centre",
            "header": "kmVec3 *kmAABB3Centre(const kmAABB3 *aabb, kmVec3 *pOut)",
            "params": [
                "const kmAABB3 *aabb",
                "kmVec3 *pOut"
            ],
            "definition": "kmVec3 *kmAABB3Centre(const kmAABB3 *aabb, kmVec3 *pOut)\n{\n  kmVec3Add(pOut, &aabb->min, &aabb->max);\n  kmVec3Scale(pOut, pOut, 0.5);\n  return pOut;\n}\n\n",
            "calle": [
                "kmVec3Add",
                "kmVec3Scale"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "aabb",
                        "type": "const kmAABB3 *",
                        "definition": [
                            "const kmAABB3 *aabb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmAABB3ExpandToContain",
            "header": "kmAABB3 *kmAABB3ExpandToContain(kmAABB3 *pOut, const kmAABB3 *pIn, const kmAABB3 *other)",
            "params": [
                "kmAABB3 *pOut",
                "const kmAABB3 *pIn",
                "const kmAABB3 *other"
            ],
            "definition": "kmAABB3 *kmAABB3ExpandToContain(kmAABB3 *pOut, const kmAABB3 *pIn, const kmAABB3 *other)\n{\n  kmAABB3 result;\n  result.min.x = (pIn->min.x < other->min.x) ? (pIn->min.x) : (other->min.x);\n  result.max.x = (pIn->max.x > other->max.x) ? (pIn->max.x) : (other->max.x);\n  result.min.y = (pIn->min.y < other->min.y) ? (pIn->min.y) : (other->min.y);\n  result.max.y = (pIn->max.y > other->max.y) ? (pIn->max.y) : (other->max.y);\n  result.min.z = (pIn->min.z < other->min.z) ? (pIn->min.z) : (other->min.z);\n  result.max.z = (pIn->max.z > other->max.z) ? (pIn->max.z) : (other->max.z);\n  kmAABB3Assign(pOut, &result);\n  return pOut;\n}\n\n",
            "calle": [
                "kmAABB3Assign"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmAABB3 *",
                        "definition": [
                            "kmAABB3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmAABB3 *",
                        "definition": [
                            "const kmAABB3 *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "other",
                        "type": "const kmAABB3 *",
                        "definition": [
                            "const kmAABB3 *other"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "kmAABB3",
                        "definition": [
                            "kmAABB3 result"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat3Fill",
            "header": "kmMat3 *kmMat3Fill(kmMat3 *pOut, const float *pMat)",
            "params": [
                "kmMat3 *pOut",
                "const float *pMat"
            ],
            "definition": "kmMat3 *kmMat3Fill(kmMat3 *pOut, const float *pMat)\n{\n  memcpy(pOut->mat, pMat, (sizeof(float)) * 9);\n  return pOut;\n}\n\n",
            "calle": [
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat3 *",
                        "definition": [
                            "kmMat3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pMat",
                        "type": "const float *",
                        "definition": [
                            "const float *pMat"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat3Adjugate",
            "header": "kmMat3 *kmMat3Adjugate(kmMat3 *pOut, const kmMat3 *pIn)",
            "params": [
                "kmMat3 *pOut",
                "const kmMat3 *pIn"
            ],
            "definition": "kmMat3 *kmMat3Adjugate(kmMat3 *pOut, const kmMat3 *pIn)\n{\n  pOut->mat[0] = (pIn->mat[4] * pIn->mat[8]) - (pIn->mat[5] * pIn->mat[7]);\n  pOut->mat[1] = (pIn->mat[2] * pIn->mat[7]) - (pIn->mat[1] * pIn->mat[8]);\n  pOut->mat[2] = (pIn->mat[1] * pIn->mat[5]) - (pIn->mat[2] * pIn->mat[4]);\n  pOut->mat[3] = (pIn->mat[5] * pIn->mat[6]) - (pIn->mat[3] * pIn->mat[8]);\n  pOut->mat[4] = (pIn->mat[0] * pIn->mat[8]) - (pIn->mat[2] * pIn->mat[6]);\n  pOut->mat[5] = (pIn->mat[2] * pIn->mat[3]) - (pIn->mat[0] * pIn->mat[5]);\n  pOut->mat[6] = (pIn->mat[3] * pIn->mat[7]) - (pIn->mat[4] * pIn->mat[6]);\n  pOut->mat[7] = (pIn->mat[1] * pIn->mat[6]) - (pIn->mat[0] * pIn->mat[7]);\n  pOut->mat[8] = (pIn->mat[0] * pIn->mat[4]) - (pIn->mat[1] * pIn->mat[3]);\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat3 *",
                        "definition": [
                            "kmMat3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmMat3 *",
                        "definition": [
                            "const kmMat3 *pIn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat3Identity",
            "header": "kmMat3 *kmMat3Identity(kmMat3 *pOut)",
            "params": [
                "kmMat3 *pOut"
            ],
            "definition": "kmMat3 *kmMat3Identity(kmMat3 *pOut)\n{\n  memset(pOut->mat, 0, (sizeof(float)) * 9);\n  pOut->mat[0] = (pOut->mat[4] = (pOut->mat[8] = 1.0f));\n  return pOut;\n}\n\n",
            "calle": [
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat3 *",
                        "definition": [
                            "kmMat3 *pOut"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat3Inverse",
            "header": "kmMat3 *kmMat3Inverse(kmMat3 *pOut, const kmMat3 *pM)",
            "params": [
                "kmMat3 *pOut",
                "const kmMat3 *pM"
            ],
            "definition": "kmMat3 *kmMat3Inverse(kmMat3 *pOut, const kmMat3 *pM)\n{\n  float determinate = kmMat3Determinant(pM);\n  float detInv;\n  kmMat3 adjugate;\n  if (determinate == 0.0)\n  {\n    return 0;\n  }\n  detInv = 1.0 / determinate;\n  kmMat3Adjugate(&adjugate, pM);\n  kmMat3ScalarMultiply(pOut, &adjugate, detInv);\n  return pOut;\n}\n\n",
            "calle": [
                "kmMat3Adjugate",
                "kmMat3Determinant",
                "kmMat3ScalarMultiply"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat3 *",
                        "definition": [
                            "kmMat3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pM",
                        "type": "const kmMat3 *",
                        "definition": [
                            "const kmMat3 *pM"
                        ]
                    },
                    {
                        "path": null,
                        "name": "determinate",
                        "type": "float",
                        "definition": [
                            "float determinate = kmMat3Determinant(pM)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "detInv",
                        "type": "float",
                        "definition": [
                            "float detInv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "adjugate",
                        "type": "kmMat3",
                        "definition": [
                            "kmMat3 adjugate"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat3IsIdentity",
            "header": "int kmMat3IsIdentity(const kmMat3 *pIn)",
            "params": [
                "const kmMat3 *pIn"
            ],
            "definition": "int kmMat3IsIdentity(const kmMat3 *pIn)\n{\n  static float identity[] = {1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f};\n  return memcmp(identity, pIn->mat, (sizeof(float)) * 9) == 0;\n}\n\n",
            "calle": [
                "memcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmMat3 *",
                        "definition": [
                            "const kmMat3 *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "identity",
                        "type": "float []",
                        "definition": [
                            "static float identity[] = {1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat3Transpose",
            "header": "kmMat3 *kmMat3Transpose(kmMat3 *pOut, const kmMat3 *pIn)",
            "params": [
                "kmMat3 *pOut",
                "const kmMat3 *pIn"
            ],
            "definition": "kmMat3 *kmMat3Transpose(kmMat3 *pOut, const kmMat3 *pIn)\n{\n  float temp[9];\n  temp[0] = pIn->mat[0];\n  temp[1] = pIn->mat[3];\n  temp[2] = pIn->mat[6];\n  temp[3] = pIn->mat[1];\n  temp[4] = pIn->mat[4];\n  temp[5] = pIn->mat[7];\n  temp[6] = pIn->mat[2];\n  temp[7] = pIn->mat[5];\n  temp[8] = pIn->mat[8];\n  memcpy(&pOut->mat, temp, (sizeof(float)) * 9);\n  return pOut;\n}\n\n",
            "calle": [
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat3 *",
                        "definition": [
                            "kmMat3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmMat3 *",
                        "definition": [
                            "const kmMat3 *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "temp",
                        "type": "float [9]",
                        "definition": [
                            "float temp[9]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat3Determinant",
            "header": "float kmMat3Determinant(const kmMat3 *pIn)",
            "params": [
                "const kmMat3 *pIn"
            ],
            "definition": "float kmMat3Determinant(const kmMat3 *pIn)\n{\n  float output;\n  output = (((pIn->mat[0] * pIn->mat[4]) * pIn->mat[8]) + ((pIn->mat[1] * pIn->mat[5]) * pIn->mat[6])) + ((pIn->mat[2] * pIn->mat[3]) * pIn->mat[7]);\n  output -= (((pIn->mat[2] * pIn->mat[4]) * pIn->mat[6]) + ((pIn->mat[0] * pIn->mat[5]) * pIn->mat[7])) + ((pIn->mat[1] * pIn->mat[3]) * pIn->mat[8]);\n  return output;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmMat3 *",
                        "definition": [
                            "const kmMat3 *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "float",
                        "definition": [
                            "float output"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat3Multiply",
            "header": "kmMat3 *kmMat3Multiply(kmMat3 *pOut, const kmMat3 *pM1, const kmMat3 *pM2)",
            "params": [
                "kmMat3 *pOut",
                "const kmMat3 *pM1",
                "const kmMat3 *pM2"
            ],
            "definition": "kmMat3 *kmMat3Multiply(kmMat3 *pOut, const kmMat3 *pM1, const kmMat3 *pM2)\n{\n  float mat[9];\n  const float *m1 = pM1->mat;\n  const float *m2 = pM2->mat;\n  mat[0] = ((m1[0] * m2[0]) + (m1[3] * m2[1])) + (m1[6] * m2[2]);\n  mat[1] = ((m1[1] * m2[0]) + (m1[4] * m2[1])) + (m1[7] * m2[2]);\n  mat[2] = ((m1[2] * m2[0]) + (m1[5] * m2[1])) + (m1[8] * m2[2]);\n  mat[3] = ((m1[0] * m2[3]) + (m1[3] * m2[4])) + (m1[6] * m2[5]);\n  mat[4] = ((m1[1] * m2[3]) + (m1[4] * m2[4])) + (m1[7] * m2[5]);\n  mat[5] = ((m1[2] * m2[3]) + (m1[5] * m2[4])) + (m1[8] * m2[5]);\n  mat[6] = ((m1[0] * m2[6]) + (m1[3] * m2[7])) + (m1[6] * m2[8]);\n  mat[7] = ((m1[1] * m2[6]) + (m1[4] * m2[7])) + (m1[7] * m2[8]);\n  mat[8] = ((m1[2] * m2[6]) + (m1[5] * m2[7])) + (m1[8] * m2[8]);\n  memcpy(pOut->mat, mat, (sizeof(float)) * 9);\n  return pOut;\n}\n\n",
            "calle": [
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat3 *",
                        "definition": [
                            "kmMat3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pM1",
                        "type": "const kmMat3 *",
                        "definition": [
                            "const kmMat3 *pM1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pM2",
                        "type": "const kmMat3 *",
                        "definition": [
                            "const kmMat3 *pM2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mat",
                        "type": "float [9]",
                        "definition": [
                            "float mat[9]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m1",
                        "type": "const float *",
                        "definition": [
                            "const float *m1 = pM1->mat"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m2",
                        "type": "const float *",
                        "definition": [
                            "const float *m2 = pM2->mat"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat3ScalarMultiply",
            "header": "kmMat3 *kmMat3ScalarMultiply(kmMat3 *pOut, const kmMat3 *pM, const float pFactor)",
            "params": [
                "kmMat3 *pOut",
                "const kmMat3 *pM",
                "const float pFactor"
            ],
            "definition": "kmMat3 *kmMat3ScalarMultiply(kmMat3 *pOut, const kmMat3 *pM, const float pFactor)\n{\n  float mat[9];\n  int i;\n  for (i = 0; i < 9; i += 1)\n  {\n    mat[i] = pM->mat[i] * pFactor;\n  }\n\n  memcpy(pOut->mat, mat, (sizeof(float)) * 9);\n  return pOut;\n}\n\n",
            "calle": [
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat3 *",
                        "definition": [
                            "kmMat3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pM",
                        "type": "const kmMat3 *",
                        "definition": [
                            "const kmMat3 *pM"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pFactor",
                        "type": "const float",
                        "definition": [
                            "const float pFactor"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mat",
                        "type": "float [9]",
                        "definition": [
                            "float mat[9]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat3Assign",
            "header": "kmMat3 *kmMat3Assign(kmMat3 *pOut, const kmMat3 *pIn)",
            "params": [
                "kmMat3 *pOut",
                "const kmMat3 *pIn"
            ],
            "definition": "kmMat3 *kmMat3Assign(kmMat3 *pOut, const kmMat3 *pIn)\n{\n  assert(pOut != pIn);\n  memcpy(pOut->mat, pIn->mat, (sizeof(float)) * 9);\n  return pOut;\n}\n\n",
            "calle": [
                "assert",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat3 *",
                        "definition": [
                            "kmMat3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmMat3 *",
                        "definition": [
                            "const kmMat3 *pIn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat3AssignMat4",
            "header": "kmMat3 *kmMat3AssignMat4(kmMat3 *pOut, const struct kmMat4 *pIn)",
            "params": [
                "kmMat3 *pOut",
                "const kmMat4 *pIn"
            ],
            "definition": "kmMat3 *kmMat3AssignMat4(kmMat3 *pOut, const kmMat4 *pIn)\n{\n  pOut->mat[0] = pIn->mat[0];\n  pOut->mat[1] = pIn->mat[1];\n  pOut->mat[2] = pIn->mat[2];\n  pOut->mat[3] = pIn->mat[4];\n  pOut->mat[4] = pIn->mat[5];\n  pOut->mat[5] = pIn->mat[6];\n  pOut->mat[6] = pIn->mat[8];\n  pOut->mat[7] = pIn->mat[9];\n  pOut->mat[8] = pIn->mat[10];\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat3 *",
                        "definition": [
                            "kmMat3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmMat4 *",
                        "definition": [
                            "const kmMat4 *pIn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat3AreEqual",
            "header": "int kmMat3AreEqual(const kmMat3 *pM1, const kmMat3 *pM2)",
            "params": [
                "const kmMat3 *pMat1",
                "const kmMat3 *pMat2"
            ],
            "definition": "int kmMat3AreEqual(const kmMat3 *pMat1, const kmMat3 *pMat2)\n{\n  int i;\n  if (pMat1 == pMat2)\n  {\n    return 1;\n  }\n  for (i = 0; i < 9; i += 1)\n  {\n    if (!(((pMat1->mat[i] + 0.0001) > pMat2->mat[i]) && ((pMat1->mat[i] - 0.0001) < pMat2->mat[i])))\n    {\n      return 0;\n    }\n  }\n\n  return 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pMat1",
                        "type": "const kmMat3 *",
                        "definition": [
                            "const kmMat3 *pMat1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pMat2",
                        "type": "const kmMat3 *",
                        "definition": [
                            "const kmMat3 *pMat2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat3GetUpVec3",
            "header": "struct kmVec3 *kmMat3GetUpVec3(struct kmVec3 *pOut, const kmMat3 *pIn)",
            "params": [
                "kmVec3 *pOut",
                "const kmMat3 *pIn"
            ],
            "definition": "kmVec3 *kmMat3GetUpVec3(kmVec3 *pOut, const kmMat3 *pIn)\n{\n  pOut->x = pIn->mat[3];\n  pOut->y = pIn->mat[4];\n  pOut->z = pIn->mat[5];\n  kmVec3Normalize(pOut, pOut);\n  return pOut;\n}\n\n",
            "calle": [
                "kmVec3Normalize"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmMat3 *",
                        "definition": [
                            "const kmMat3 *pIn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat3GetRightVec3",
            "header": "struct kmVec3 *kmMat3GetRightVec3(struct kmVec3 *pOut, const kmMat3 *pIn)",
            "params": [
                "kmVec3 *pOut",
                "const kmMat3 *pIn"
            ],
            "definition": "kmVec3 *kmMat3GetRightVec3(kmVec3 *pOut, const kmMat3 *pIn)\n{\n  pOut->x = pIn->mat[0];\n  pOut->y = pIn->mat[1];\n  pOut->z = pIn->mat[2];\n  kmVec3Normalize(pOut, pOut);\n  return pOut;\n}\n\n",
            "calle": [
                "kmVec3Normalize"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmMat3 *",
                        "definition": [
                            "const kmMat3 *pIn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat3GetForwardVec3",
            "header": "struct kmVec3 *kmMat3GetForwardVec3(struct kmVec3 *pOut, const kmMat3 *pIn)",
            "params": [
                "kmVec3 *pOut",
                "const kmMat3 *pIn"
            ],
            "definition": "kmVec3 *kmMat3GetForwardVec3(kmVec3 *pOut, const kmMat3 *pIn)\n{\n  pOut->x = pIn->mat[6];\n  pOut->y = pIn->mat[7];\n  pOut->z = pIn->mat[8];\n  kmVec3Normalize(pOut, pOut);\n  return pOut;\n}\n\n",
            "calle": [
                "kmVec3Normalize"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmMat3 *",
                        "definition": [
                            "const kmMat3 *pIn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat3RotationX",
            "header": "kmMat3 *kmMat3RotationX(kmMat3 *pOut, const float radians)",
            "params": [
                "kmMat3 *pOut",
                "const float radians"
            ],
            "definition": "kmMat3 *kmMat3RotationX(kmMat3 *pOut, const float radians)\n{\n  pOut->mat[0] = 1.0f;\n  pOut->mat[1] = 0.0f;\n  pOut->mat[2] = 0.0f;\n  pOut->mat[3] = 0.0f;\n  pOut->mat[4] = cosf(radians);\n  pOut->mat[5] = sinf(radians);\n  pOut->mat[6] = 0.0f;\n  pOut->mat[7] = -sinf(radians);\n  pOut->mat[8] = cosf(radians);\n  return pOut;\n}\n\n",
            "calle": [
                "cosf",
                "sinf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat3 *",
                        "definition": [
                            "kmMat3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "radians",
                        "type": "const float",
                        "definition": [
                            "const float radians"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat3RotationY",
            "header": "kmMat3 *kmMat3RotationY(kmMat3 *pOut, const float radians)",
            "params": [
                "kmMat3 *pOut",
                "const float radians"
            ],
            "definition": "kmMat3 *kmMat3RotationY(kmMat3 *pOut, const float radians)\n{\n  pOut->mat[0] = cosf(radians);\n  pOut->mat[1] = 0.0f;\n  pOut->mat[2] = -sinf(radians);\n  pOut->mat[3] = 0.0f;\n  pOut->mat[4] = 1.0f;\n  pOut->mat[5] = 0.0f;\n  pOut->mat[6] = sinf(radians);\n  pOut->mat[7] = 0.0f;\n  pOut->mat[8] = cosf(radians);\n  return pOut;\n}\n\n",
            "calle": [
                "cosf",
                "sinf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat3 *",
                        "definition": [
                            "kmMat3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "radians",
                        "type": "const float",
                        "definition": [
                            "const float radians"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat3RotationZ",
            "header": "kmMat3 *kmMat3RotationZ(kmMat3 *pOut, const float radians)",
            "params": [
                "kmMat3 *pOut",
                "const float radians"
            ],
            "definition": "kmMat3 *kmMat3RotationZ(kmMat3 *pOut, const float radians)\n{\n  pOut->mat[0] = cosf(radians);\n  pOut->mat[1] = -sinf(radians);\n  pOut->mat[2] = 0.0f;\n  pOut->mat[3] = sinf(radians);\n  pOut->mat[4] = cosf(radians);\n  pOut->mat[5] = 0.0f;\n  pOut->mat[6] = 0.0f;\n  pOut->mat[7] = 0.0f;\n  pOut->mat[8] = 1.0f;\n  return pOut;\n}\n\n",
            "calle": [
                "cosf",
                "sinf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat3 *",
                        "definition": [
                            "kmMat3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "radians",
                        "type": "const float",
                        "definition": [
                            "const float radians"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat3Rotation",
            "header": "kmMat3 *kmMat3Rotation(kmMat3 *pOut, const float radians)",
            "params": [
                "kmMat3 *pOut",
                "const float radians"
            ],
            "definition": "kmMat3 *kmMat3Rotation(kmMat3 *pOut, const float radians)\n{\n  pOut->mat[0] = cosf(radians);\n  pOut->mat[1] = sinf(radians);\n  pOut->mat[2] = 0.0f;\n  pOut->mat[3] = -sinf(radians);\n  pOut->mat[4] = cosf(radians);\n  pOut->mat[5] = 0.0f;\n  pOut->mat[6] = 0.0f;\n  pOut->mat[7] = 0.0f;\n  pOut->mat[8] = 1.0f;\n  return pOut;\n}\n\n",
            "calle": [
                "cosf",
                "sinf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat3 *",
                        "definition": [
                            "kmMat3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "radians",
                        "type": "const float",
                        "definition": [
                            "const float radians"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat3Scaling",
            "header": "kmMat3 *kmMat3Scaling(kmMat3 *pOut, const float x, const float y)",
            "params": [
                "kmMat3 *pOut",
                "const float x",
                "const float y"
            ],
            "definition": "kmMat3 *kmMat3Scaling(kmMat3 *pOut, const float x, const float y)\n{\n  kmMat3Identity(pOut);\n  pOut->mat[0] = x;\n  pOut->mat[4] = y;\n  return pOut;\n}\n\n",
            "calle": [
                "kmMat3Identity"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat3 *",
                        "definition": [
                            "kmMat3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "const float",
                        "definition": [
                            "const float x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "const float",
                        "definition": [
                            "const float y"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat3Translation",
            "header": "kmMat3 *kmMat3Translation(kmMat3 *pOut, const float x, const float y)",
            "params": [
                "kmMat3 *pOut",
                "const float x",
                "const float y"
            ],
            "definition": "kmMat3 *kmMat3Translation(kmMat3 *pOut, const float x, const float y)\n{\n  kmMat3Identity(pOut);\n  pOut->mat[6] = x;\n  pOut->mat[7] = y;\n  return pOut;\n}\n\n",
            "calle": [
                "kmMat3Identity"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat3 *",
                        "definition": [
                            "kmMat3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "const float",
                        "definition": [
                            "const float x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "const float",
                        "definition": [
                            "const float y"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat3RotationQuaternion",
            "header": "kmMat3 *kmMat3RotationQuaternion(kmMat3 *pOut, const struct kmQuaternion *pIn)",
            "params": [
                "kmMat3 *pOut",
                "const kmQuaternion *pIn"
            ],
            "definition": "kmMat3 *kmMat3RotationQuaternion(kmMat3 *pOut, const kmQuaternion *pIn)\n{\n  if ((!pIn) || (!pOut))\n  {\n    return 0;\n  }\n  pOut->mat[0] = 1.0f - (2.0f * ((pIn->y * pIn->y) + (pIn->z * pIn->z)));\n  pOut->mat[1] = 2.0f * ((pIn->x * pIn->y) - (pIn->w * pIn->z));\n  pOut->mat[2] = 2.0f * ((pIn->x * pIn->z) + (pIn->w * pIn->y));\n  pOut->mat[3] = 2.0f * ((pIn->x * pIn->y) + (pIn->w * pIn->z));\n  pOut->mat[4] = 1.0f - (2.0f * ((pIn->x * pIn->x) + (pIn->z * pIn->z)));\n  pOut->mat[5] = 2.0f * ((pIn->y * pIn->z) - (pIn->w * pIn->x));\n  pOut->mat[6] = 2.0f * ((pIn->x * pIn->z) - (pIn->w * pIn->y));\n  pOut->mat[7] = 2.0f * ((pIn->y * pIn->z) + (pIn->w * pIn->x));\n  pOut->mat[8] = 1.0f - (2.0f * ((pIn->x * pIn->x) + (pIn->y * pIn->y)));\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat3 *",
                        "definition": [
                            "kmMat3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmQuaternion *",
                        "definition": [
                            "const kmQuaternion *pIn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat3RotationAxisAngle",
            "header": "kmMat3 *kmMat3RotationAxisAngle(kmMat3 *pOut, const struct kmVec3 *axis, float radians)",
            "params": [
                "kmMat3 *pOut",
                "const struct kmVec3 *axis",
                "float radians"
            ],
            "definition": "kmMat3 *kmMat3RotationAxisAngle(kmMat3 *pOut, const struct kmVec3 *axis, float radians)\n{\n  float rcos = cosf(radians);\n  float rsin = sinf(radians);\n  pOut->mat[0] = rcos + ((axis->x * axis->x) * (1 - rcos));\n  pOut->mat[1] = (axis->z * rsin) + ((axis->y * axis->x) * (1 - rcos));\n  pOut->mat[2] = ((-axis->y) * rsin) + ((axis->z * axis->x) * (1 - rcos));\n  pOut->mat[3] = ((-axis->z) * rsin) + ((axis->x * axis->y) * (1 - rcos));\n  pOut->mat[4] = rcos + ((axis->y * axis->y) * (1 - rcos));\n  pOut->mat[5] = (axis->x * rsin) + ((axis->z * axis->y) * (1 - rcos));\n  pOut->mat[6] = (axis->y * rsin) + ((axis->x * axis->z) * (1 - rcos));\n  pOut->mat[7] = ((-axis->x) * rsin) + ((axis->y * axis->z) * (1 - rcos));\n  pOut->mat[8] = rcos + ((axis->z * axis->z) * (1 - rcos));\n  return pOut;\n}\n\n",
            "calle": [
                "cosf",
                "sinf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat3 *",
                        "definition": [
                            "kmMat3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct kmVec3",
                        "type": "const struct kmVec3 *",
                        "definition": [
                            "const struct kmVec3 *axis"
                        ]
                    },
                    {
                        "path": null,
                        "name": "radians",
                        "type": "float",
                        "definition": [
                            "float radians"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rcos",
                        "type": "float",
                        "definition": [
                            "float rcos = cosf(radians)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rsin",
                        "type": "float",
                        "definition": [
                            "float rsin = sinf(radians)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat3RotationToAxisAngle",
            "header": "struct kmVec3 *kmMat3RotationToAxisAngle(struct kmVec3 *pAxis, float *radians, const kmMat3 *pIn)",
            "params": [
                "kmVec3 *pAxis",
                "float *radians",
                "const kmMat3 *pIn"
            ],
            "definition": "kmVec3 *kmMat3RotationToAxisAngle(kmVec3 *pAxis, float *radians, const kmMat3 *pIn)\n{\n  kmQuaternion temp;\n  kmQuaternionRotationMatrix(&temp, pIn);\n  kmQuaternionToAxisAngle(&temp, pAxis, radians);\n  return pAxis;\n}\n\n",
            "calle": [
                "kmQuaternionRotationMatrix",
                "kmQuaternionToAxisAngle"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pAxis",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pAxis"
                        ]
                    },
                    {
                        "path": null,
                        "name": "radians",
                        "type": "float *",
                        "definition": [
                            "float *radians"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmMat3 *",
                        "definition": [
                            "const kmMat3 *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "temp",
                        "type": "kmQuaternion",
                        "definition": [
                            "kmQuaternion temp"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat3LookAt",
            "header": "kmMat3 *kmMat3LookAt(kmMat3 *pOut, const struct kmVec3 *pEye, const struct kmVec3 *pCenter, const struct kmVec3 *pUp)",
            "params": [
                "kmMat3 *pOut",
                "const kmVec3 *pEye",
                "const kmVec3 *pCenter",
                "const kmVec3 *pUp"
            ],
            "definition": "kmMat3 *kmMat3LookAt(kmMat3 *pOut, const kmVec3 *pEye, const kmVec3 *pCenter, const kmVec3 *pUp)\n{\n  kmVec3 f;\n  kmVec3 up;\n  kmVec3 s;\n  kmVec3 u;\n  kmVec3Subtract(&f, pCenter, pEye);\n  kmVec3Normalize(&f, &f);\n  kmVec3Assign(&up, pUp);\n  kmVec3Normalize(&up, &up);\n  kmVec3Cross(&s, &f, &up);\n  kmVec3Normalize(&s, &s);\n  kmVec3Cross(&u, &s, &f);\n  kmVec3Normalize(&s, &s);\n  pOut->mat[0] = s.x;\n  pOut->mat[3] = s.y;\n  pOut->mat[6] = s.z;\n  pOut->mat[1] = u.x;\n  pOut->mat[4] = u.y;\n  pOut->mat[7] = u.z;\n  pOut->mat[2] = -f.x;\n  pOut->mat[5] = -f.y;\n  pOut->mat[8] = -f.z;\n  return pOut;\n}\n\n",
            "calle": [
                "kmVec3Assign",
                "kmVec3Cross",
                "kmVec3Normalize",
                "kmVec3Subtract"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat3 *",
                        "definition": [
                            "kmMat3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pEye",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pEye"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pCenter",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pCenter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pUp",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pUp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 f"
                        ]
                    },
                    {
                        "path": null,
                        "name": "up",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 up"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "u",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 u"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat4Fill",
            "header": "kmMat4 *kmMat4Fill(kmMat4 *pOut, const float *pMat)",
            "params": [
                "kmMat4 *pOut",
                "const float *pMat"
            ],
            "definition": "kmMat4 *kmMat4Fill(kmMat4 *pOut, const float *pMat)\n{\n  memcpy(pOut->mat, pMat, (sizeof(float)) * 16);\n  return pOut;\n}\n\n",
            "calle": [
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat4 *",
                        "definition": [
                            "kmMat4 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pMat",
                        "type": "const float *",
                        "definition": [
                            "const float *pMat"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat4Identity",
            "header": "kmMat4 *kmMat4Identity(kmMat4 *pOut)",
            "params": [
                "kmMat4 *pOut"
            ],
            "definition": "kmMat4 *kmMat4Identity(kmMat4 *pOut)\n{\n  memset(pOut->mat, 0, (sizeof(float)) * 16);\n  pOut->mat[0] = (pOut->mat[5] = (pOut->mat[10] = (pOut->mat[15] = 1.0f)));\n  return pOut;\n}\n\n",
            "calle": [
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat4 *",
                        "definition": [
                            "kmMat4 *pOut"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat4Inverse",
            "header": "kmMat4 *kmMat4Inverse(kmMat4 *pOut, const kmMat4 *pM)",
            "params": [
                "kmMat4 *pOut",
                "const kmMat4 *pM"
            ],
            "definition": "kmMat4 *kmMat4Inverse(kmMat4 *pOut, const kmMat4 *pM)\n{\n  kmMat4 tmp;\n  double det;\n  int i;\n  tmp.mat[0] = ((((((pM->mat[5] * pM->mat[10]) * pM->mat[15]) - ((pM->mat[5] * pM->mat[11]) * pM->mat[14])) - ((pM->mat[9] * pM->mat[6]) * pM->mat[15])) + ((pM->mat[9] * pM->mat[7]) * pM->mat[14])) + ((pM->mat[13] * pM->mat[6]) * pM->mat[11])) - ((pM->mat[13] * pM->mat[7]) * pM->mat[10]);\n  tmp.mat[4] = (((((((-pM->mat[4]) * pM->mat[10]) * pM->mat[15]) + ((pM->mat[4] * pM->mat[11]) * pM->mat[14])) + ((pM->mat[8] * pM->mat[6]) * pM->mat[15])) - ((pM->mat[8] * pM->mat[7]) * pM->mat[14])) - ((pM->mat[12] * pM->mat[6]) * pM->mat[11])) + ((pM->mat[12] * pM->mat[7]) * pM->mat[10]);\n  tmp.mat[8] = ((((((pM->mat[4] * pM->mat[9]) * pM->mat[15]) - ((pM->mat[4] * pM->mat[11]) * pM->mat[13])) - ((pM->mat[8] * pM->mat[5]) * pM->mat[15])) + ((pM->mat[8] * pM->mat[7]) * pM->mat[13])) + ((pM->mat[12] * pM->mat[5]) * pM->mat[11])) - ((pM->mat[12] * pM->mat[7]) * pM->mat[9]);\n  tmp.mat[12] = (((((((-pM->mat[4]) * pM->mat[9]) * pM->mat[14]) + ((pM->mat[4] * pM->mat[10]) * pM->mat[13])) + ((pM->mat[8] * pM->mat[5]) * pM->mat[14])) - ((pM->mat[8] * pM->mat[6]) * pM->mat[13])) - ((pM->mat[12] * pM->mat[5]) * pM->mat[10])) + ((pM->mat[12] * pM->mat[6]) * pM->mat[9]);\n  tmp.mat[1] = (((((((-pM->mat[1]) * pM->mat[10]) * pM->mat[15]) + ((pM->mat[1] * pM->mat[11]) * pM->mat[14])) + ((pM->mat[9] * pM->mat[2]) * pM->mat[15])) - ((pM->mat[9] * pM->mat[3]) * pM->mat[14])) - ((pM->mat[13] * pM->mat[2]) * pM->mat[11])) + ((pM->mat[13] * pM->mat[3]) * pM->mat[10]);\n  tmp.mat[5] = ((((((pM->mat[0] * pM->mat[10]) * pM->mat[15]) - ((pM->mat[0] * pM->mat[11]) * pM->mat[14])) - ((pM->mat[8] * pM->mat[2]) * pM->mat[15])) + ((pM->mat[8] * pM->mat[3]) * pM->mat[14])) + ((pM->mat[12] * pM->mat[2]) * pM->mat[11])) - ((pM->mat[12] * pM->mat[3]) * pM->mat[10]);\n  tmp.mat[9] = (((((((-pM->mat[0]) * pM->mat[9]) * pM->mat[15]) + ((pM->mat[0] * pM->mat[11]) * pM->mat[13])) + ((pM->mat[8] * pM->mat[1]) * pM->mat[15])) - ((pM->mat[8] * pM->mat[3]) * pM->mat[13])) - ((pM->mat[12] * pM->mat[1]) * pM->mat[11])) + ((pM->mat[12] * pM->mat[3]) * pM->mat[9]);\n  tmp.mat[13] = ((((((pM->mat[0] * pM->mat[9]) * pM->mat[14]) - ((pM->mat[0] * pM->mat[10]) * pM->mat[13])) - ((pM->mat[8] * pM->mat[1]) * pM->mat[14])) + ((pM->mat[8] * pM->mat[2]) * pM->mat[13])) + ((pM->mat[12] * pM->mat[1]) * pM->mat[10])) - ((pM->mat[12] * pM->mat[2]) * pM->mat[9]);\n  tmp.mat[2] = ((((((pM->mat[1] * pM->mat[6]) * pM->mat[15]) - ((pM->mat[1] * pM->mat[7]) * pM->mat[14])) - ((pM->mat[5] * pM->mat[2]) * pM->mat[15])) + ((pM->mat[5] * pM->mat[3]) * pM->mat[14])) + ((pM->mat[13] * pM->mat[2]) * pM->mat[7])) - ((pM->mat[13] * pM->mat[3]) * pM->mat[6]);\n  tmp.mat[6] = (((((((-pM->mat[0]) * pM->mat[6]) * pM->mat[15]) + ((pM->mat[0] * pM->mat[7]) * pM->mat[14])) + ((pM->mat[4] * pM->mat[2]) * pM->mat[15])) - ((pM->mat[4] * pM->mat[3]) * pM->mat[14])) - ((pM->mat[12] * pM->mat[2]) * pM->mat[7])) + ((pM->mat[12] * pM->mat[3]) * pM->mat[6]);\n  tmp.mat[10] = ((((((pM->mat[0] * pM->mat[5]) * pM->mat[15]) - ((pM->mat[0] * pM->mat[7]) * pM->mat[13])) - ((pM->mat[4] * pM->mat[1]) * pM->mat[15])) + ((pM->mat[4] * pM->mat[3]) * pM->mat[13])) + ((pM->mat[12] * pM->mat[1]) * pM->mat[7])) - ((pM->mat[12] * pM->mat[3]) * pM->mat[5]);\n  tmp.mat[14] = (((((((-pM->mat[0]) * pM->mat[5]) * pM->mat[14]) + ((pM->mat[0] * pM->mat[6]) * pM->mat[13])) + ((pM->mat[4] * pM->mat[1]) * pM->mat[14])) - ((pM->mat[4] * pM->mat[2]) * pM->mat[13])) - ((pM->mat[12] * pM->mat[1]) * pM->mat[6])) + ((pM->mat[12] * pM->mat[2]) * pM->mat[5]);\n  tmp.mat[3] = (((((((-pM->mat[1]) * pM->mat[6]) * pM->mat[11]) + ((pM->mat[1] * pM->mat[7]) * pM->mat[10])) + ((pM->mat[5] * pM->mat[2]) * pM->mat[11])) - ((pM->mat[5] * pM->mat[3]) * pM->mat[10])) - ((pM->mat[9] * pM->mat[2]) * pM->mat[7])) + ((pM->mat[9] * pM->mat[3]) * pM->mat[6]);\n  tmp.mat[7] = ((((((pM->mat[0] * pM->mat[6]) * pM->mat[11]) - ((pM->mat[0] * pM->mat[7]) * pM->mat[10])) - ((pM->mat[4] * pM->mat[2]) * pM->mat[11])) + ((pM->mat[4] * pM->mat[3]) * pM->mat[10])) + ((pM->mat[8] * pM->mat[2]) * pM->mat[7])) - ((pM->mat[8] * pM->mat[3]) * pM->mat[6]);\n  tmp.mat[11] = (((((((-pM->mat[0]) * pM->mat[5]) * pM->mat[11]) + ((pM->mat[0] * pM->mat[7]) * pM->mat[9])) + ((pM->mat[4] * pM->mat[1]) * pM->mat[11])) - ((pM->mat[4] * pM->mat[3]) * pM->mat[9])) - ((pM->mat[8] * pM->mat[1]) * pM->mat[7])) + ((pM->mat[8] * pM->mat[3]) * pM->mat[5]);\n  tmp.mat[15] = ((((((pM->mat[0] * pM->mat[5]) * pM->mat[10]) - ((pM->mat[0] * pM->mat[6]) * pM->mat[9])) - ((pM->mat[4] * pM->mat[1]) * pM->mat[10])) + ((pM->mat[4] * pM->mat[2]) * pM->mat[9])) + ((pM->mat[8] * pM->mat[1]) * pM->mat[6])) - ((pM->mat[8] * pM->mat[2]) * pM->mat[5]);\n  det = (((pM->mat[0] * tmp.mat[0]) + (pM->mat[1] * tmp.mat[4])) + (pM->mat[2] * tmp.mat[8])) + (pM->mat[3] * tmp.mat[12]);\n  if (det == 0)\n  {\n    return 0;\n  }\n  det = 1.0 / det;\n  for (i = 0; i < 16; i += 1)\n  {\n    pOut->mat[i] = tmp.mat[i] * det;\n  }\n\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat4 *",
                        "definition": [
                            "kmMat4 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pM",
                        "type": "const kmMat4 *",
                        "definition": [
                            "const kmMat4 *pM"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "kmMat4",
                        "definition": [
                            "kmMat4 tmp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "det",
                        "type": "double",
                        "definition": [
                            "double det"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat4IsIdentity",
            "header": "int kmMat4IsIdentity(const kmMat4 *pIn)",
            "params": [
                "const kmMat4 *pIn"
            ],
            "definition": "int kmMat4IsIdentity(const kmMat4 *pIn)\n{\n  static float identity[] = {1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f};\n  return memcmp(identity, pIn->mat, (sizeof(float)) * 16) == 0;\n}\n\n",
            "calle": [
                "memcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmMat4 *",
                        "definition": [
                            "const kmMat4 *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "identity",
                        "type": "float []",
                        "definition": [
                            "static float identity[] = {1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat4Transpose",
            "header": "kmMat4 *kmMat4Transpose(kmMat4 *pOut, const kmMat4 *pIn)",
            "params": [
                "kmMat4 *pOut",
                "const kmMat4 *pIn"
            ],
            "definition": "kmMat4 *kmMat4Transpose(kmMat4 *pOut, const kmMat4 *pIn)\n{\n  int x;\n  int z;\n  for (z = 0; z < 4; z += 1)\n  {\n    for (x = 0; x < 4; x += 1)\n    {\n      pOut->mat[(z * 4) + x] = pIn->mat[(x * 4) + z];\n    }\n\n  }\n\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat4 *",
                        "definition": [
                            "kmMat4 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmMat4 *",
                        "definition": [
                            "const kmMat4 *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "int",
                        "definition": [
                            "int x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z",
                        "type": "int",
                        "definition": [
                            "int z"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat4Multiply",
            "header": "kmMat4 *kmMat4Multiply(kmMat4 *pOut, const kmMat4 *pM1, const kmMat4 *pM2)",
            "params": [
                "kmMat4 *pOut",
                "const kmMat4 *pM1",
                "const kmMat4 *pM2"
            ],
            "definition": "kmMat4 *kmMat4Multiply(kmMat4 *pOut, const kmMat4 *pM1, const kmMat4 *pM2)\n{\n  float mat[16];\n  const float *m1 = pM1->mat;\n  const float *m2 = pM2->mat;\n  mat[0] = (((m1[0] * m2[0]) + (m1[4] * m2[1])) + (m1[8] * m2[2])) + (m1[12] * m2[3]);\n  mat[1] = (((m1[1] * m2[0]) + (m1[5] * m2[1])) + (m1[9] * m2[2])) + (m1[13] * m2[3]);\n  mat[2] = (((m1[2] * m2[0]) + (m1[6] * m2[1])) + (m1[10] * m2[2])) + (m1[14] * m2[3]);\n  mat[3] = (((m1[3] * m2[0]) + (m1[7] * m2[1])) + (m1[11] * m2[2])) + (m1[15] * m2[3]);\n  mat[4] = (((m1[0] * m2[4]) + (m1[4] * m2[5])) + (m1[8] * m2[6])) + (m1[12] * m2[7]);\n  mat[5] = (((m1[1] * m2[4]) + (m1[5] * m2[5])) + (m1[9] * m2[6])) + (m1[13] * m2[7]);\n  mat[6] = (((m1[2] * m2[4]) + (m1[6] * m2[5])) + (m1[10] * m2[6])) + (m1[14] * m2[7]);\n  mat[7] = (((m1[3] * m2[4]) + (m1[7] * m2[5])) + (m1[11] * m2[6])) + (m1[15] * m2[7]);\n  mat[8] = (((m1[0] * m2[8]) + (m1[4] * m2[9])) + (m1[8] * m2[10])) + (m1[12] * m2[11]);\n  mat[9] = (((m1[1] * m2[8]) + (m1[5] * m2[9])) + (m1[9] * m2[10])) + (m1[13] * m2[11]);\n  mat[10] = (((m1[2] * m2[8]) + (m1[6] * m2[9])) + (m1[10] * m2[10])) + (m1[14] * m2[11]);\n  mat[11] = (((m1[3] * m2[8]) + (m1[7] * m2[9])) + (m1[11] * m2[10])) + (m1[15] * m2[11]);\n  mat[12] = (((m1[0] * m2[12]) + (m1[4] * m2[13])) + (m1[8] * m2[14])) + (m1[12] * m2[15]);\n  mat[13] = (((m1[1] * m2[12]) + (m1[5] * m2[13])) + (m1[9] * m2[14])) + (m1[13] * m2[15]);\n  mat[14] = (((m1[2] * m2[12]) + (m1[6] * m2[13])) + (m1[10] * m2[14])) + (m1[14] * m2[15]);\n  mat[15] = (((m1[3] * m2[12]) + (m1[7] * m2[13])) + (m1[11] * m2[14])) + (m1[15] * m2[15]);\n  memcpy(pOut->mat, mat, (sizeof(float)) * 16);\n  return pOut;\n}\n\n",
            "calle": [
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat4 *",
                        "definition": [
                            "kmMat4 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pM1",
                        "type": "const kmMat4 *",
                        "definition": [
                            "const kmMat4 *pM1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pM2",
                        "type": "const kmMat4 *",
                        "definition": [
                            "const kmMat4 *pM2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mat",
                        "type": "float [16]",
                        "definition": [
                            "float mat[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m1",
                        "type": "const float *",
                        "definition": [
                            "const float *m1 = pM1->mat"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m2",
                        "type": "const float *",
                        "definition": [
                            "const float *m2 = pM2->mat"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat4Assign",
            "header": "kmMat4 *kmMat4Assign(kmMat4 *pOut, const kmMat4 *pIn)",
            "params": [
                "kmMat4 *pOut",
                "const kmMat4 *pIn"
            ],
            "definition": "kmMat4 *kmMat4Assign(kmMat4 *pOut, const kmMat4 *pIn)\n{\n  assert((pOut != pIn) && \"You have tried to self-assign!!\");\n  memcpy(pOut->mat, pIn->mat, (sizeof(float)) * 16);\n  return pOut;\n}\n\n",
            "calle": [
                "assert",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat4 *",
                        "definition": [
                            "kmMat4 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmMat4 *",
                        "definition": [
                            "const kmMat4 *pIn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat4AssignMat3",
            "header": "kmMat4 *kmMat4AssignMat3(kmMat4 *pOut, const struct kmMat3 *pIn)",
            "params": [
                "kmMat4 *pOut",
                "const kmMat3 *pIn"
            ],
            "definition": "kmMat4 *kmMat4AssignMat3(kmMat4 *pOut, const kmMat3 *pIn)\n{\n  kmMat4Identity(pOut);\n  pOut->mat[0] = pIn->mat[0];\n  pOut->mat[1] = pIn->mat[1];\n  pOut->mat[2] = pIn->mat[2];\n  pOut->mat[3] = 0.0;\n  pOut->mat[4] = pIn->mat[3];\n  pOut->mat[5] = pIn->mat[4];\n  pOut->mat[6] = pIn->mat[5];\n  pOut->mat[7] = 0.0;\n  pOut->mat[8] = pIn->mat[6];\n  pOut->mat[9] = pIn->mat[7];\n  pOut->mat[10] = pIn->mat[8];\n  pOut->mat[11] = 0.0;\n  return pOut;\n}\n\n",
            "calle": [
                "kmMat4Identity"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat4 *",
                        "definition": [
                            "kmMat4 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmMat3 *",
                        "definition": [
                            "const kmMat3 *pIn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat4AreEqual",
            "header": "int kmMat4AreEqual(const kmMat4 *pM1, const kmMat4 *pM2)",
            "params": [
                "const kmMat4 *pMat1",
                "const kmMat4 *pMat2"
            ],
            "definition": "int kmMat4AreEqual(const kmMat4 *pMat1, const kmMat4 *pMat2)\n{\n  int i = 0;\n  assert((pMat1 != pMat2) && \"You are comparing the same thing!\");\n  for (i = 0; i < 16; i += 1)\n  {\n    if (!(((pMat1->mat[i] + 0.0001) > pMat2->mat[i]) && ((pMat1->mat[i] - 0.0001) < pMat2->mat[i])))\n    {\n      return 0;\n    }\n  }\n\n  return 1;\n}\n\n",
            "calle": [
                "assert"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pMat1",
                        "type": "const kmMat4 *",
                        "definition": [
                            "const kmMat4 *pMat1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pMat2",
                        "type": "const kmMat4 *",
                        "definition": [
                            "const kmMat4 *pMat2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat4RotationX",
            "header": "kmMat4 *kmMat4RotationX(kmMat4 *pOut, const float radians)",
            "params": [
                "kmMat4 *pOut",
                "const float radians"
            ],
            "definition": "kmMat4 *kmMat4RotationX(kmMat4 *pOut, const float radians)\n{\n  pOut->mat[0] = 1.0f;\n  pOut->mat[1] = 0.0f;\n  pOut->mat[2] = 0.0f;\n  pOut->mat[3] = 0.0f;\n  pOut->mat[4] = 0.0f;\n  pOut->mat[5] = cosf(radians);\n  pOut->mat[6] = sinf(radians);\n  pOut->mat[7] = 0.0f;\n  pOut->mat[8] = 0.0f;\n  pOut->mat[9] = -sinf(radians);\n  pOut->mat[10] = cosf(radians);\n  pOut->mat[11] = 0.0f;\n  pOut->mat[12] = 0.0f;\n  pOut->mat[13] = 0.0f;\n  pOut->mat[14] = 0.0f;\n  pOut->mat[15] = 1.0f;\n  return pOut;\n}\n\n",
            "calle": [
                "cosf",
                "sinf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat4 *",
                        "definition": [
                            "kmMat4 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "radians",
                        "type": "const float",
                        "definition": [
                            "const float radians"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat4RotationY",
            "header": "kmMat4 *kmMat4RotationY(kmMat4 *pOut, const float radians)",
            "params": [
                "kmMat4 *pOut",
                "const float radians"
            ],
            "definition": "kmMat4 *kmMat4RotationY(kmMat4 *pOut, const float radians)\n{\n  pOut->mat[0] = cosf(radians);\n  pOut->mat[1] = 0.0f;\n  pOut->mat[2] = -sinf(radians);\n  pOut->mat[3] = 0.0f;\n  pOut->mat[4] = 0.0f;\n  pOut->mat[5] = 1.0f;\n  pOut->mat[6] = 0.0f;\n  pOut->mat[7] = 0.0f;\n  pOut->mat[8] = sinf(radians);\n  pOut->mat[9] = 0.0f;\n  pOut->mat[10] = cosf(radians);\n  pOut->mat[11] = 0.0f;\n  pOut->mat[12] = 0.0f;\n  pOut->mat[13] = 0.0f;\n  pOut->mat[14] = 0.0f;\n  pOut->mat[15] = 1.0f;\n  return pOut;\n}\n\n",
            "calle": [
                "cosf",
                "sinf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat4 *",
                        "definition": [
                            "kmMat4 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "radians",
                        "type": "const float",
                        "definition": [
                            "const float radians"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat4RotationZ",
            "header": "kmMat4 *kmMat4RotationZ(kmMat4 *pOut, const float radians)",
            "params": [
                "kmMat4 *pOut",
                "const float radians"
            ],
            "definition": "kmMat4 *kmMat4RotationZ(kmMat4 *pOut, const float radians)\n{\n  pOut->mat[0] = cosf(radians);\n  pOut->mat[1] = sinf(radians);\n  pOut->mat[2] = 0.0f;\n  pOut->mat[3] = 0.0f;\n  pOut->mat[4] = -sinf(radians);\n  pOut->mat[5] = cosf(radians);\n  pOut->mat[6] = 0.0f;\n  pOut->mat[7] = 0.0f;\n  pOut->mat[8] = 0.0f;\n  pOut->mat[9] = 0.0f;\n  pOut->mat[10] = 1.0f;\n  pOut->mat[11] = 0.0f;\n  pOut->mat[12] = 0.0f;\n  pOut->mat[13] = 0.0f;\n  pOut->mat[14] = 0.0f;\n  pOut->mat[15] = 1.0f;\n  return pOut;\n}\n\n",
            "calle": [
                "cosf",
                "sinf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat4 *",
                        "definition": [
                            "kmMat4 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "radians",
                        "type": "const float",
                        "definition": [
                            "const float radians"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat4RotationYawPitchRoll",
            "header": "kmMat4 *kmMat4RotationYawPitchRoll(kmMat4 *pOut, const float pitch, const float yaw, const float roll)",
            "params": [
                "kmMat4 *pOut",
                "const float pitch",
                "const float yaw",
                "const float roll"
            ],
            "definition": "kmMat4 *kmMat4RotationYawPitchRoll(kmMat4 *pOut, const float pitch, const float yaw, const float roll)\n{\n  kmMat4 yaw_matrix;\n  kmMat4RotationY(&yaw_matrix, yaw);\n  kmMat4 pitch_matrix;\n  kmMat4RotationX(&pitch_matrix, pitch);\n  kmMat4 roll_matrix;\n  kmMat4RotationZ(&roll_matrix, roll);\n  kmMat4Multiply(pOut, &pitch_matrix, &roll_matrix);\n  kmMat4Multiply(pOut, &yaw_matrix, pOut);\n  return pOut;\n}\n\n",
            "calle": [
                "kmMat4Multiply",
                "kmMat4RotationX",
                "kmMat4RotationY",
                "kmMat4RotationZ"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat4 *",
                        "definition": [
                            "kmMat4 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pitch",
                        "type": "const float",
                        "definition": [
                            "const float pitch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yaw",
                        "type": "const float",
                        "definition": [
                            "const float yaw"
                        ]
                    },
                    {
                        "path": null,
                        "name": "roll",
                        "type": "const float",
                        "definition": [
                            "const float roll"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yaw_matrix",
                        "type": "kmMat4",
                        "definition": [
                            "kmMat4 yaw_matrix"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pitch_matrix",
                        "type": "kmMat4",
                        "definition": [
                            "kmMat4 pitch_matrix"
                        ]
                    },
                    {
                        "path": null,
                        "name": "roll_matrix",
                        "type": "kmMat4",
                        "definition": [
                            "kmMat4 roll_matrix"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat4RotationQuaternion",
            "header": "kmMat4 *kmMat4RotationQuaternion(kmMat4 *pOut, const struct kmQuaternion *pQ)",
            "params": [
                "kmMat4 *pOut",
                "const kmQuaternion *pQ"
            ],
            "definition": "kmMat4 *kmMat4RotationQuaternion(kmMat4 *pOut, const kmQuaternion *pQ)\n{\n  double xx = pQ->x * pQ->x;\n  double xy = pQ->x * pQ->y;\n  double xz = pQ->x * pQ->z;\n  double xw = pQ->x * pQ->w;\n  double yy = pQ->y * pQ->y;\n  double yz = pQ->y * pQ->z;\n  double yw = pQ->y * pQ->w;\n  double zz = pQ->z * pQ->z;\n  double zw = pQ->z * pQ->w;\n  pOut->mat[0] = 1 - (2 * (yy + zz));\n  pOut->mat[1] = 2 * (xy + zw);\n  pOut->mat[2] = 2 * (xz - yw);\n  pOut->mat[3] = 0;\n  pOut->mat[4] = 2 * (xy - zw);\n  pOut->mat[5] = 1 - (2 * (xx + zz));\n  pOut->mat[6] = 2 * (yz + xw);\n  pOut->mat[7] = 0.0;\n  pOut->mat[8] = 2 * (xz + yw);\n  pOut->mat[9] = 2 * (yz - xw);\n  pOut->mat[10] = 1 - (2 * (xx + yy));\n  pOut->mat[11] = 0.0;\n  pOut->mat[12] = 0.0;\n  pOut->mat[13] = 0.0;\n  pOut->mat[14] = 0.0;\n  pOut->mat[15] = 1.0;\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat4 *",
                        "definition": [
                            "kmMat4 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pQ",
                        "type": "const kmQuaternion *",
                        "definition": [
                            "const kmQuaternion *pQ"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xx",
                        "type": "double",
                        "definition": [
                            "double xx = pQ->x * pQ->x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xy",
                        "type": "double",
                        "definition": [
                            "double xy = pQ->x * pQ->y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xz",
                        "type": "double",
                        "definition": [
                            "double xz = pQ->x * pQ->z"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xw",
                        "type": "double",
                        "definition": [
                            "double xw = pQ->x * pQ->w"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yy",
                        "type": "double",
                        "definition": [
                            "double yy = pQ->y * pQ->y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yz",
                        "type": "double",
                        "definition": [
                            "double yz = pQ->y * pQ->z"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yw",
                        "type": "double",
                        "definition": [
                            "double yw = pQ->y * pQ->w"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zz",
                        "type": "double",
                        "definition": [
                            "double zz = pQ->z * pQ->z"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zw",
                        "type": "double",
                        "definition": [
                            "double zw = pQ->z * pQ->w"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat4RotationTranslation",
            "header": "kmMat4 *kmMat4RotationTranslation(kmMat4 *pOut, const struct kmMat3 *rotation, const struct kmVec3 *translation)",
            "params": [
                "kmMat4 *pOut",
                "const kmMat3 *rotation",
                "const kmVec3 *translation"
            ],
            "definition": "kmMat4 *kmMat4RotationTranslation(kmMat4 *pOut, const kmMat3 *rotation, const kmVec3 *translation)\n{\n  pOut->mat[0] = rotation->mat[0];\n  pOut->mat[1] = rotation->mat[1];\n  pOut->mat[2] = rotation->mat[2];\n  pOut->mat[3] = 0.0f;\n  pOut->mat[4] = rotation->mat[3];\n  pOut->mat[5] = rotation->mat[4];\n  pOut->mat[6] = rotation->mat[5];\n  pOut->mat[7] = 0.0f;\n  pOut->mat[8] = rotation->mat[6];\n  pOut->mat[9] = rotation->mat[7];\n  pOut->mat[10] = rotation->mat[8];\n  pOut->mat[11] = 0.0f;\n  pOut->mat[12] = translation->x;\n  pOut->mat[13] = translation->y;\n  pOut->mat[14] = translation->z;\n  pOut->mat[15] = 1.0f;\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat4 *",
                        "definition": [
                            "kmMat4 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rotation",
                        "type": "const kmMat3 *",
                        "definition": [
                            "const kmMat3 *rotation"
                        ]
                    },
                    {
                        "path": null,
                        "name": "translation",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *translation"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat4Scaling",
            "header": "kmMat4 *kmMat4Scaling(kmMat4 *pOut, const float x, const float y, const float z)",
            "params": [
                "kmMat4 *pOut",
                "const float x",
                "const float y",
                "float z"
            ],
            "definition": "kmMat4 *kmMat4Scaling(kmMat4 *pOut, const float x, const float y, float z)\n{\n  memset(pOut->mat, 0, (sizeof(float)) * 16);\n  pOut->mat[0] = x;\n  pOut->mat[5] = y;\n  pOut->mat[10] = z;\n  pOut->mat[15] = 1.0f;\n  return pOut;\n}\n\n",
            "calle": [
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat4 *",
                        "definition": [
                            "kmMat4 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "const float",
                        "definition": [
                            "const float x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "const float",
                        "definition": [
                            "const float y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z",
                        "type": "float",
                        "definition": [
                            "float z"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat4Translation",
            "header": "kmMat4 *kmMat4Translation(kmMat4 *pOut, const float x, const float y, const float z)",
            "params": [
                "kmMat4 *pOut",
                "const float x",
                "float y",
                "const float z"
            ],
            "definition": "kmMat4 *kmMat4Translation(kmMat4 *pOut, const float x, float y, const float z)\n{\n  memset(pOut->mat, 0, (sizeof(float)) * 16);\n  pOut->mat[0] = 1.0f;\n  pOut->mat[5] = 1.0f;\n  pOut->mat[10] = 1.0f;\n  pOut->mat[12] = x;\n  pOut->mat[13] = y;\n  pOut->mat[14] = z;\n  pOut->mat[15] = 1.0f;\n  return pOut;\n}\n\n",
            "calle": [
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat4 *",
                        "definition": [
                            "kmMat4 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "const float",
                        "definition": [
                            "const float x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "float",
                        "definition": [
                            "float y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z",
                        "type": "const float",
                        "definition": [
                            "const float z"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat4GetUpVec3",
            "header": "struct kmVec3 *kmMat4GetUpVec3(struct kmVec3 *pOut, const kmMat4 *pIn)",
            "params": [
                "kmVec3 *pOut",
                "const kmMat4 *pIn"
            ],
            "definition": "kmVec3 *kmMat4GetUpVec3(kmVec3 *pOut, const kmMat4 *pIn)\n{\n  kmVec3MultiplyMat4(pOut, &KM_VEC3_POS_Y, pIn);\n  kmVec3Normalize(pOut, pOut);\n  return pOut;\n}\n\n",
            "calle": [
                "kmVec3MultiplyMat4",
                "kmVec3Normalize"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmMat4 *",
                        "definition": [
                            "const kmMat4 *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "KM_VEC3_POS_Y",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat4GetRightVec3",
            "header": "struct kmVec3 *kmMat4GetRightVec3(struct kmVec3 *pOut, const kmMat4 *pIn)",
            "params": [
                "kmVec3 *pOut",
                "const kmMat4 *pIn"
            ],
            "definition": "kmVec3 *kmMat4GetRightVec3(kmVec3 *pOut, const kmMat4 *pIn)\n{\n  kmVec3MultiplyMat4(pOut, &KM_VEC3_POS_X, pIn);\n  kmVec3Normalize(pOut, pOut);\n  return pOut;\n}\n\n",
            "calle": [
                "kmVec3MultiplyMat4",
                "kmVec3Normalize"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmMat4 *",
                        "definition": [
                            "const kmMat4 *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "KM_VEC3_POS_X",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat4GetForwardVec3RH",
            "header": "struct kmVec3 *kmMat4GetForwardVec3RH(struct kmVec3 *pOut, const kmMat4 *pIn)",
            "params": [
                "kmVec3 *pOut",
                "const kmMat4 *pIn"
            ],
            "definition": "kmVec3 *kmMat4GetForwardVec3RH(kmVec3 *pOut, const kmMat4 *pIn)\n{\n  kmVec3MultiplyMat4(pOut, &KM_VEC3_NEG_Z, pIn);\n  kmVec3Normalize(pOut, pOut);\n  return pOut;\n}\n\n",
            "calle": [
                "kmVec3MultiplyMat4",
                "kmVec3Normalize"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmMat4 *",
                        "definition": [
                            "const kmMat4 *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "KM_VEC3_NEG_Z",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat4GetForwardVec3LH",
            "header": "struct kmVec3 *kmMat4GetForwardVec3LH(struct kmVec3 *pOut, const kmMat4 *pIn)",
            "params": [
                "kmVec3 *pOut",
                "const kmMat4 *pIn"
            ],
            "definition": "kmVec3 *kmMat4GetForwardVec3LH(kmVec3 *pOut, const kmMat4 *pIn)\n{\n  kmVec3MultiplyMat4(pOut, &KM_VEC3_POS_Z, pIn);\n  kmVec3Normalize(pOut, pOut);\n  return pOut;\n}\n\n",
            "calle": [
                "kmVec3MultiplyMat4",
                "kmVec3Normalize"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmMat4 *",
                        "definition": [
                            "const kmMat4 *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "KM_VEC3_POS_Z",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat4PerspectiveProjection",
            "header": "kmMat4 *kmMat4PerspectiveProjection(kmMat4 *pOut, float fovY, float aspect, float zNear, float zFar)",
            "params": [
                "kmMat4 *pOut",
                "float fovY",
                "float aspect",
                "float zNear",
                "float zFar"
            ],
            "definition": "kmMat4 *kmMat4PerspectiveProjection(kmMat4 *pOut, float fovY, float aspect, float zNear, float zFar)\n{\n  float r = kmDegreesToRadians(fovY / 2);\n  float deltaZ = zFar - zNear;\n  float s = sin(r);\n  float cotangent = 0;\n  if (((deltaZ == 0) || (s == 0)) || (aspect == 0))\n  {\n    return 0;\n  }\n  cotangent = cos(r) / s;\n  kmMat4Identity(pOut);\n  pOut->mat[0] = cotangent / aspect;\n  pOut->mat[5] = cotangent;\n  pOut->mat[10] = (-(zFar + zNear)) / deltaZ;\n  pOut->mat[11] = -1;\n  pOut->mat[14] = (((-2) * zNear) * zFar) / deltaZ;\n  pOut->mat[15] = 0;\n  return pOut;\n}\n\n",
            "calle": [
                "cos",
                "kmDegreesToRadians",
                "kmMat4Identity",
                "sin"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat4 *",
                        "definition": [
                            "kmMat4 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fovY",
                        "type": "float",
                        "definition": [
                            "float fovY"
                        ]
                    },
                    {
                        "path": null,
                        "name": "aspect",
                        "type": "float",
                        "definition": [
                            "float aspect"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zNear",
                        "type": "float",
                        "definition": [
                            "float zNear"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zFar",
                        "type": "float",
                        "definition": [
                            "float zFar"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "float",
                        "definition": [
                            "float r = kmDegreesToRadians(fovY / 2)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "deltaZ",
                        "type": "float",
                        "definition": [
                            "float deltaZ = zFar - zNear"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "float",
                        "definition": [
                            "float s = sin(r)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cotangent",
                        "type": "float",
                        "definition": [
                            "float cotangent = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat4OrthographicProjection",
            "header": "kmMat4 *kmMat4OrthographicProjection(kmMat4 *pOut, float left, float right, float bottom, float top, float nearVal, float farVal)",
            "params": [
                "kmMat4 *pOut",
                "float left",
                "float right",
                "float bottom",
                "float top",
                "float nearVal",
                "float farVal"
            ],
            "definition": "kmMat4 *kmMat4OrthographicProjection(kmMat4 *pOut, float left, float right, float bottom, float top, float nearVal, float farVal)\n{\n  float tx = -((right + left) / (right - left));\n  float ty = -((top + bottom) / (top - bottom));\n  float tz = -((farVal + nearVal) / (farVal - nearVal));\n  kmMat4Identity(pOut);\n  pOut->mat[0] = 2 / (right - left);\n  pOut->mat[5] = 2 / (top - bottom);\n  pOut->mat[10] = (-2) / (farVal - nearVal);\n  pOut->mat[12] = tx;\n  pOut->mat[13] = ty;\n  pOut->mat[14] = tz;\n  return pOut;\n}\n\n",
            "calle": [
                "kmMat4Identity"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat4 *",
                        "definition": [
                            "kmMat4 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left",
                        "type": "float",
                        "definition": [
                            "float left"
                        ]
                    },
                    {
                        "path": null,
                        "name": "right",
                        "type": "float",
                        "definition": [
                            "float right"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bottom",
                        "type": "float",
                        "definition": [
                            "float bottom"
                        ]
                    },
                    {
                        "path": null,
                        "name": "top",
                        "type": "float",
                        "definition": [
                            "float top"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nearVal",
                        "type": "float",
                        "definition": [
                            "float nearVal"
                        ]
                    },
                    {
                        "path": null,
                        "name": "farVal",
                        "type": "float",
                        "definition": [
                            "float farVal"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tx",
                        "type": "float",
                        "definition": [
                            "float tx = -((right + left) / (right - left))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ty",
                        "type": "float",
                        "definition": [
                            "float ty = -((top + bottom) / (top - bottom))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tz",
                        "type": "float",
                        "definition": [
                            "float tz = -((farVal + nearVal) / (farVal - nearVal))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat4LookAt",
            "header": "kmMat4 *kmMat4LookAt(kmMat4 *pOut, const struct kmVec3 *pEye, const struct kmVec3 *pCenter, const struct kmVec3 *pUp)",
            "params": [
                "kmMat4 *pOut",
                "const kmVec3 *pEye",
                "const kmVec3 *pCenter",
                "const kmVec3 *pUp"
            ],
            "definition": "kmMat4 *kmMat4LookAt(kmMat4 *pOut, const kmVec3 *pEye, const kmVec3 *pCenter, const kmVec3 *pUp)\n{\n  kmVec3 f;\n  kmVec3 up;\n  kmVec3 s;\n  kmVec3 u;\n  kmMat4 translate;\n  kmVec3Subtract(&f, pCenter, pEye);\n  kmVec3Normalize(&f, &f);\n  kmVec3Assign(&up, pUp);\n  kmVec3Normalize(&up, &up);\n  kmVec3Cross(&s, &f, &up);\n  kmVec3Normalize(&s, &s);\n  kmVec3Cross(&u, &s, &f);\n  kmVec3Normalize(&s, &s);\n  kmMat4Identity(pOut);\n  pOut->mat[0] = s.x;\n  pOut->mat[4] = s.y;\n  pOut->mat[8] = s.z;\n  pOut->mat[1] = u.x;\n  pOut->mat[5] = u.y;\n  pOut->mat[9] = u.z;\n  pOut->mat[2] = -f.x;\n  pOut->mat[6] = -f.y;\n  pOut->mat[10] = -f.z;\n  kmMat4Translation(&translate, -pEye->x, -pEye->y, -pEye->z);\n  kmMat4Multiply(pOut, pOut, &translate);\n  return pOut;\n}\n\n",
            "calle": [
                "kmMat4Identity",
                "kmMat4Multiply",
                "kmMat4Translation",
                "kmVec3Assign",
                "kmVec3Cross",
                "kmVec3Normalize",
                "kmVec3Subtract"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat4 *",
                        "definition": [
                            "kmMat4 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pEye",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pEye"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pCenter",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pCenter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pUp",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pUp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 f"
                        ]
                    },
                    {
                        "path": null,
                        "name": "up",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 up"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "u",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 u"
                        ]
                    },
                    {
                        "path": null,
                        "name": "translate",
                        "type": "kmMat4",
                        "definition": [
                            "kmMat4 translate"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat4RotationAxisAngle",
            "header": "kmMat4 *kmMat4RotationAxisAngle(kmMat4 *pOut, const struct kmVec3 *axis, float radians)",
            "params": [
                "kmMat4 *pOut",
                "const kmVec3 *axis",
                "float radians"
            ],
            "definition": "kmMat4 *kmMat4RotationAxisAngle(kmMat4 *pOut, const kmVec3 *axis, float radians)\n{\n  kmQuaternion quat;\n  kmQuaternionRotationAxisAngle(&quat, axis, radians);\n  kmMat4RotationQuaternion(pOut, &quat);\n  return pOut;\n}\n\n",
            "calle": [
                "kmMat4RotationQuaternion",
                "kmQuaternionRotationAxisAngle"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat4 *",
                        "definition": [
                            "kmMat4 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "axis",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *axis"
                        ]
                    },
                    {
                        "path": null,
                        "name": "radians",
                        "type": "float",
                        "definition": [
                            "float radians"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quat",
                        "type": "kmQuaternion",
                        "definition": [
                            "kmQuaternion quat"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat4ExtractRotation",
            "header": "struct kmMat3 *kmMat4ExtractRotation(struct kmMat3 *pOut, const kmMat4 *pIn)",
            "params": [
                "kmMat3 *pOut",
                "const kmMat4 *pIn"
            ],
            "definition": "kmMat3 *kmMat4ExtractRotation(kmMat3 *pOut, const kmMat4 *pIn)\n{\n  pOut->mat[0] = pIn->mat[0];\n  pOut->mat[1] = pIn->mat[1];\n  pOut->mat[2] = pIn->mat[2];\n  pOut->mat[3] = pIn->mat[4];\n  pOut->mat[4] = pIn->mat[5];\n  pOut->mat[5] = pIn->mat[6];\n  pOut->mat[6] = pIn->mat[8];\n  pOut->mat[7] = pIn->mat[9];\n  pOut->mat[8] = pIn->mat[10];\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmMat3 *",
                        "definition": [
                            "kmMat3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmMat4 *",
                        "definition": [
                            "const kmMat4 *pIn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat4ExtractPlane",
            "header": "struct kmPlane *kmMat4ExtractPlane(struct kmPlane *pOut, const kmMat4 *pIn, const unsigned int plane)",
            "params": [
                "kmPlane *pOut",
                "const kmMat4 *pIn",
                "const unsigned int plane"
            ],
            "definition": "kmPlane *kmMat4ExtractPlane(kmPlane *pOut, const kmMat4 *pIn, const unsigned int plane)\n{\n  float t = 1.0f;\n  switch (plane)\n  {\n    case 1:\n    {\n      pOut->a = pIn->mat[3] - pIn->mat[0];\n      pOut->b = pIn->mat[7] - pIn->mat[4];\n      pOut->c = pIn->mat[11] - pIn->mat[8];\n      pOut->d = pIn->mat[15] - pIn->mat[12];\n      break;\n    }\n\n    case 0:\n    {\n      pOut->a = pIn->mat[3] + pIn->mat[0];\n      pOut->b = pIn->mat[7] + pIn->mat[4];\n      pOut->c = pIn->mat[11] + pIn->mat[8];\n      pOut->d = pIn->mat[15] + pIn->mat[12];\n      break;\n    }\n\n    case 2:\n    {\n      pOut->a = pIn->mat[3] + pIn->mat[1];\n      pOut->b = pIn->mat[7] + pIn->mat[5];\n      pOut->c = pIn->mat[11] + pIn->mat[9];\n      pOut->d = pIn->mat[15] + pIn->mat[13];\n      break;\n    }\n\n    case 3:\n    {\n      pOut->a = pIn->mat[3] - pIn->mat[1];\n      pOut->b = pIn->mat[7] - pIn->mat[5];\n      pOut->c = pIn->mat[11] - pIn->mat[9];\n      pOut->d = pIn->mat[15] - pIn->mat[13];\n      break;\n    }\n\n    case 5:\n    {\n      pOut->a = pIn->mat[3] - pIn->mat[2];\n      pOut->b = pIn->mat[7] - pIn->mat[6];\n      pOut->c = pIn->mat[11] - pIn->mat[10];\n      pOut->d = pIn->mat[15] - pIn->mat[14];\n      break;\n    }\n\n    case 4:\n    {\n      pOut->a = pIn->mat[3] + pIn->mat[2];\n      pOut->b = pIn->mat[7] + pIn->mat[6];\n      pOut->c = pIn->mat[11] + pIn->mat[10];\n      pOut->d = pIn->mat[15] + pIn->mat[14];\n      break;\n    }\n\n    default:\n    {\n      assert(0 && \"Invalid plane index\");\n    }\n\n  }\n\n  t = sqrtf(((pOut->a * pOut->a) + (pOut->b * pOut->b)) + (pOut->c * pOut->c));\n  pOut->a /= t;\n  pOut->b /= t;\n  pOut->c /= t;\n  pOut->d /= t;\n  return pOut;\n}\n\n",
            "calle": [
                "assert",
                "sqrtf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmPlane *",
                        "definition": [
                            "kmPlane *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmMat4 *",
                        "definition": [
                            "const kmMat4 *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plane",
                        "type": "const unsigned int",
                        "definition": [
                            "const unsigned int plane"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "float",
                        "definition": [
                            "float t = 1.0f"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMat4RotationToAxisAngle",
            "header": "struct kmVec3 *kmMat4RotationToAxisAngle(struct kmVec3 *pAxis, float *radians, const kmMat4 *pIn)",
            "params": [
                "kmVec3 *pAxis",
                "float *radians",
                "const kmMat4 *pIn"
            ],
            "definition": "kmVec3 *kmMat4RotationToAxisAngle(kmVec3 *pAxis, float *radians, const kmMat4 *pIn)\n{\n  kmQuaternion temp;\n  kmMat3 rotation;\n  kmMat4ExtractRotation(&rotation, pIn);\n  kmQuaternionRotationMatrix(&temp, &rotation);\n  kmQuaternionToAxisAngle(&temp, pAxis, radians);\n  return pAxis;\n}\n\n",
            "calle": [
                "kmMat4ExtractRotation",
                "kmQuaternionRotationMatrix",
                "kmQuaternionToAxisAngle"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pAxis",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pAxis"
                        ]
                    },
                    {
                        "path": null,
                        "name": "radians",
                        "type": "float *",
                        "definition": [
                            "float *radians"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmMat4 *",
                        "definition": [
                            "const kmMat4 *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "temp",
                        "type": "kmQuaternion",
                        "definition": [
                            "kmQuaternion temp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rotation",
                        "type": "kmMat3",
                        "definition": [
                            "kmMat3 rotation"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmPlaneFill",
            "header": "kmPlane *kmPlaneFill(kmPlane *plane, float a, float b, float c, float d)",
            "params": [
                "kmPlane *plane",
                "float a",
                "float b",
                "float c",
                "float d"
            ],
            "definition": "kmPlane *kmPlaneFill(kmPlane *plane, float a, float b, float c, float d)\n{\n  plane->a = a;\n  plane->b = b;\n  plane->c = c;\n  plane->d = d;\n  return plane;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "plane",
                        "type": "kmPlane *",
                        "definition": [
                            "kmPlane *plane"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "float",
                        "definition": [
                            "float a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "float",
                        "definition": [
                            "float b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "float",
                        "definition": [
                            "float c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "float",
                        "definition": [
                            "float d"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmPlaneDot",
            "header": "float kmPlaneDot(const kmPlane *pP, const struct kmVec4 *pV)",
            "params": [
                "const kmPlane *pP",
                "const kmVec4 *pV"
            ],
            "definition": "float kmPlaneDot(const kmPlane *pP, const kmVec4 *pV)\n{\n  return (((pP->a * pV->x) + (pP->b * pV->y)) + (pP->c * pV->z)) + (pP->d * pV->w);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pP",
                        "type": "const kmPlane *",
                        "definition": [
                            "const kmPlane *pP"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV",
                        "type": "const kmVec4 *",
                        "definition": [
                            "const kmVec4 *pV"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmPlaneDotCoord",
            "header": "float kmPlaneDotCoord(const kmPlane *pP, const struct kmVec3 *pV)",
            "params": [
                "const kmPlane *pP",
                "const kmVec3 *pV"
            ],
            "definition": "float kmPlaneDotCoord(const kmPlane *pP, const kmVec3 *pV)\n{\n  return (((pP->a * pV->x) + (pP->b * pV->y)) + (pP->c * pV->z)) + pP->d;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pP",
                        "type": "const kmPlane *",
                        "definition": [
                            "const kmPlane *pP"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pV"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmPlaneDotNormal",
            "header": "float kmPlaneDotNormal(const kmPlane *pP, const struct kmVec3 *pV)",
            "params": [
                "const kmPlane *pP",
                "const kmVec3 *pV"
            ],
            "definition": "float kmPlaneDotNormal(const kmPlane *pP, const kmVec3 *pV)\n{\n  return ((pP->a * pV->x) + (pP->b * pV->y)) + (pP->c * pV->z);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pP",
                        "type": "const kmPlane *",
                        "definition": [
                            "const kmPlane *pP"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pV"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmPlaneFromNormalAndDistance",
            "header": "kmPlane *kmPlaneFromNormalAndDistance(kmPlane *plane, const struct kmVec3 *normal, const float dist)",
            "params": [
                "kmPlane *plane",
                "const struct kmVec3 *normal",
                "const float dist"
            ],
            "definition": "kmPlane *kmPlaneFromNormalAndDistance(kmPlane *plane, const struct kmVec3 *normal, const float dist)\n{\n  plane->a = normal->x;\n  plane->b = normal->y;\n  plane->c = normal->z;\n  plane->d = dist;\n  return plane;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "plane",
                        "type": "kmPlane *",
                        "definition": [
                            "kmPlane *plane"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct kmVec3",
                        "type": "const struct kmVec3 *",
                        "definition": [
                            "const struct kmVec3 *normal"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "const float",
                        "definition": [
                            "const float dist"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmPlaneFromPointAndNormal",
            "header": "kmPlane *kmPlaneFromPointAndNormal(kmPlane *pOut, const struct kmVec3 *pPoint, const struct kmVec3 *pNormal)",
            "params": [
                "kmPlane *pOut",
                "const kmVec3 *pPoint",
                "const kmVec3 *pNormal"
            ],
            "definition": "kmPlane *kmPlaneFromPointAndNormal(kmPlane *pOut, const kmVec3 *pPoint, const kmVec3 *pNormal)\n{\n  pOut->a = pNormal->x;\n  pOut->b = pNormal->y;\n  pOut->c = pNormal->z;\n  pOut->d = -kmVec3Dot(pNormal, pPoint);\n  return pOut;\n}\n\n",
            "calle": [
                "kmVec3Dot"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmPlane *",
                        "definition": [
                            "kmPlane *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pPoint",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pPoint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pNormal",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pNormal"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmPlaneFromPoints",
            "header": "kmPlane *kmPlaneFromPoints(kmPlane *pOut, const struct kmVec3 *p1, const struct kmVec3 *p2, const struct kmVec3 *p3)",
            "params": [
                "kmPlane *pOut",
                "const kmVec3 *p1",
                "const kmVec3 *p2",
                "const kmVec3 *p3"
            ],
            "definition": "kmPlane *kmPlaneFromPoints(kmPlane *pOut, const kmVec3 *p1, const kmVec3 *p2, const kmVec3 *p3)\n{\n  kmVec3 n;\n  kmVec3 v1;\n  kmVec3 v2;\n  kmVec3Subtract(&v1, p2, p1);\n  kmVec3Subtract(&v2, p3, p1);\n  kmVec3Cross(&n, &v1, &v2);\n  kmVec3Normalize(&n, &n);\n  pOut->a = n.x;\n  pOut->b = n.y;\n  pOut->c = n.z;\n  pOut->d = kmVec3Dot(kmVec3Scale(&n, &n, -1.0), p1);\n  return pOut;\n}\n\n",
            "calle": [
                "kmVec3Cross",
                "kmVec3Dot",
                "kmVec3Normalize",
                "kmVec3Scale",
                "kmVec3Subtract"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmPlane *",
                        "definition": [
                            "kmPlane *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p1",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *p1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p2",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *p2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p3",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *p3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 v1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 v2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmPlaneIntersectLine",
            "header": "struct kmVec3 *kmPlaneIntersectLine(struct kmVec3 *pOut, const kmPlane *pP, const struct kmVec3 *pV1, const struct kmVec3 *pV2)",
            "params": [
                "kmVec3 *pOut",
                "const kmPlane *pP",
                "const kmVec3 *pV1",
                "const kmVec3 *pV2"
            ],
            "definition": "kmVec3 *kmPlaneIntersectLine(kmVec3 *pOut, const kmPlane *pP, const kmVec3 *pV1, const kmVec3 *pV2)\n{\n  unsigned int pOut_idx = 0;\n  kmVec3 d;\n  kmVec3Subtract(&d, pV2, pV1);\n  kmVec3 n;\n  n.x = pP->a;\n  n.y = pP->b;\n  n.z = pP->c;\n  kmVec3Normalize(&n, &n);\n  float nt = -((((n.x * pV1->x) + (n.y * pV1->y)) + (n.z * pV1->z)) + pP->d);\n  float dt = ((n.x * d.x) + (n.y * d.y)) + (n.z * d.z);\n  if (fabs(dt) < 0.0001)\n  {\n    pOut_idx = 0;\n    return pOut;\n  }\n  float t = nt / dt;\n  pOut->x = pV1->x + (d.x * t);\n  pOut->y = pV1->y + (d.y * t);\n  pOut->z = pV1->z + (d.z * t);\n  return pOut;\n}\n\n",
            "calle": [
                "fabs",
                "kmVec3Normalize",
                "kmVec3Subtract"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pP",
                        "type": "const kmPlane *",
                        "definition": [
                            "const kmPlane *pP"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV1",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pV1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV2",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pV2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pOut_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pOut_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 d"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nt",
                        "type": "float",
                        "definition": [
                            "float nt = -((((n.x * pV1->x) + (n.y * pV1->y)) + (n.z * pV1->z)) + pP->d)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dt",
                        "type": "float",
                        "definition": [
                            "float dt = ((n.x * d.x) + (n.y * d.y)) + (n.z * d.z)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "float",
                        "definition": [
                            "float t = nt / dt"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmPlaneNormalize",
            "header": "kmPlane *kmPlaneNormalize(kmPlane *pOut, const kmPlane *pP)",
            "params": [
                "kmPlane *pOut",
                "const kmPlane *pP"
            ],
            "definition": "kmPlane *kmPlaneNormalize(kmPlane *pOut, const kmPlane *pP)\n{\n  kmVec3 n;\n  float l = 0;\n  if (((!pP->a) && (!pP->b)) && (!pP->c))\n  {\n    pOut->a = pP->a;\n    pOut->b = pP->b;\n    pOut->c = pP->c;\n    pOut->d = pP->d;\n    return pOut;\n  }\n  n.x = pP->a;\n  n.y = pP->b;\n  n.z = pP->c;\n  l = 1.0f / kmVec3Length(&n);\n  kmVec3Normalize(&n, &n);\n  pOut->a = n.x;\n  pOut->b = n.y;\n  pOut->c = n.z;\n  pOut->d = pP->d * l;\n  return pOut;\n}\n\n",
            "calle": [
                "kmVec3Length",
                "kmVec3Normalize"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmPlane *",
                        "definition": [
                            "kmPlane *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pP",
                        "type": "const kmPlane *",
                        "definition": [
                            "const kmPlane *pP"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "l",
                        "type": "float",
                        "definition": [
                            "float l = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmPlaneScale",
            "header": "kmPlane *kmPlaneScale(kmPlane *pOut, const kmPlane *pP, float s)",
            "params": [
                "kmPlane *pOut",
                "const kmPlane *pP",
                "float s"
            ],
            "definition": "kmPlane *kmPlaneScale(kmPlane *pOut, const kmPlane *pP, float s)\n{\n  assert(0 && \"Not implemented\");\n  return 0;\n}\n\n",
            "calle": [
                "assert"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmPlane *",
                        "definition": [
                            "kmPlane *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pP",
                        "type": "const kmPlane *",
                        "definition": [
                            "const kmPlane *pP"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "float",
                        "definition": [
                            "float s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmPlaneClassifyPoint",
            "header": "KM_POINT_CLASSIFICATION kmPlaneClassifyPoint(const kmPlane *pIn, const struct kmVec3 *pP)",
            "params": [
                "const kmPlane *pIn",
                "const kmVec3 *pP"
            ],
            "definition": "KM_POINT_CLASSIFICATION kmPlaneClassifyPoint(const kmPlane *pIn, const kmVec3 *pP)\n{\n  float distance = (((pIn->a * pP->x) + (pIn->b * pP->y)) + (pIn->c * pP->z)) + pIn->d;\n  if (distance > 0.0001)\n  {\n    return POINT_INFRONT_OF_PLANE;\n  }\n  if (distance < (-0.0001))\n  {\n    return POINT_BEHIND_PLANE;\n  }\n  return POINT_ON_PLANE;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmPlane *",
                        "definition": [
                            "const kmPlane *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pP",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pP"
                        ]
                    },
                    {
                        "path": null,
                        "name": "distance",
                        "type": "float",
                        "definition": [
                            "float distance = (((pIn->a * pP->x) + (pIn->b * pP->y)) + (pIn->c * pP->z)) + pIn->d"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmPlaneExtractFromMat4",
            "header": "kmPlane *kmPlaneExtractFromMat4(kmPlane *pOut, const struct kmMat4 *pIn, int row)",
            "params": [
                "kmPlane *pOut",
                "const struct kmMat4 *pIn",
                "int row"
            ],
            "definition": "kmPlane *kmPlaneExtractFromMat4(kmPlane *pOut, const struct kmMat4 *pIn, int row)\n{\n  int scale = (row < 0) ? (-1) : (1);\n  row = abs(row) - 1;\n  pOut->a = pIn->mat[3] + (scale * pIn->mat[row]);\n  pOut->b = pIn->mat[7] + (scale * pIn->mat[row + 4]);\n  pOut->c = pIn->mat[11] + (scale * pIn->mat[row + 8]);\n  pOut->d = pIn->mat[15] + (scale * pIn->mat[row + 12]);\n  return kmPlaneNormalize(pOut, pOut);\n}\n\n",
            "calle": [
                "abs",
                "kmPlaneNormalize"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmPlane *",
                        "definition": [
                            "kmPlane *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct kmMat4",
                        "type": "const struct kmMat4 *",
                        "definition": [
                            "const struct kmMat4 *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row",
                        "type": "int",
                        "definition": [
                            "int row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "int",
                        "definition": [
                            "int scale = (row < 0) ? (-1) : (1)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmPlaneGetIntersection",
            "header": "struct kmVec3 *kmPlaneGetIntersection(struct kmVec3 *pOut, const kmPlane *p1, const kmPlane *p2, const kmPlane *p3)",
            "params": [
                "kmVec3 *pOut",
                "const kmPlane *p1",
                "const kmPlane *p2",
                "const kmPlane *p3"
            ],
            "definition": "kmVec3 *kmPlaneGetIntersection(kmVec3 *pOut, const kmPlane *p1, const kmPlane *p2, const kmPlane *p3)\n{\n  kmVec3 n1;\n  kmVec3 n2;\n  kmVec3 n3;\n  kmVec3 cross;\n  kmVec3 r1;\n  kmVec3 r2;\n  kmVec3 r3;\n  double denom = 0;\n  kmVec3Fill(&n1, p1->a, p1->b, p1->c);\n  kmVec3Fill(&n2, p2->a, p2->b, p2->c);\n  kmVec3Fill(&n3, p3->a, p3->b, p3->c);\n  kmVec3Cross(&cross, &n2, &n3);\n  denom = kmVec3Dot(&n1, &cross);\n  if (kmAlmostEqual(denom, 0.0))\n  {\n    return 0;\n  }\n  kmVec3Cross(&r1, &n2, &n3);\n  kmVec3Cross(&r2, &n3, &n1);\n  kmVec3Cross(&r3, &n1, &n2);\n  kmVec3Scale(&r1, &r1, -p1->d);\n  kmVec3Scale(&r2, &r2, p2->d);\n  kmVec3Scale(&r3, &r3, p3->d);\n  kmVec3Subtract(pOut, &r1, &r2);\n  kmVec3Subtract(pOut, pOut, &r3);\n  kmVec3Scale(pOut, pOut, 1.0 / denom);\n  return pOut;\n}\n\n",
            "calle": [
                "kmAlmostEqual",
                "kmVec3Cross",
                "kmVec3Dot",
                "kmVec3Fill",
                "kmVec3Scale",
                "kmVec3Subtract"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p1",
                        "type": "const kmPlane *",
                        "definition": [
                            "const kmPlane *p1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p2",
                        "type": "const kmPlane *",
                        "definition": [
                            "const kmPlane *p2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p3",
                        "type": "const kmPlane *",
                        "definition": [
                            "const kmPlane *p3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n1",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 n1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n2",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 n2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n3",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 n3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cross",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 cross"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r1",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 r1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r2",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 r2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r3",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 r3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "denom",
                        "type": "double",
                        "definition": [
                            "double denom = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmQuaternionAreEqual",
            "header": "int kmQuaternionAreEqual(const kmQuaternion *p1, const kmQuaternion *p2)",
            "params": [
                "const kmQuaternion *p1",
                "const kmQuaternion *p2"
            ],
            "definition": "int kmQuaternionAreEqual(const kmQuaternion *p1, const kmQuaternion *p2)\n{\n  if (((((p1->x < (p2->x + 0.0001)) && (p1->x > (p2->x - 0.0001))) && ((p1->y < (p2->y + 0.0001)) && (p1->y > (p2->y - 0.0001)))) && ((p1->z < (p2->z + 0.0001)) && (p1->z > (p2->z - 0.0001)))) && ((p1->w < (p2->w + 0.0001)) && (p1->w > (p2->w - 0.0001))))\n  {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p1",
                        "type": "const kmQuaternion *",
                        "definition": [
                            "const kmQuaternion *p1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p2",
                        "type": "const kmQuaternion *",
                        "definition": [
                            "const kmQuaternion *p2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmQuaternionFill",
            "header": "kmQuaternion *kmQuaternionFill(kmQuaternion *pOut, float x, float y, float z, float w)",
            "params": [
                "kmQuaternion *pOut",
                "float x",
                "float y",
                "float z",
                "float w"
            ],
            "definition": "kmQuaternion *kmQuaternionFill(kmQuaternion *pOut, float x, float y, float z, float w)\n{\n  pOut->x = x;\n  pOut->y = y;\n  pOut->z = z;\n  pOut->w = w;\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmQuaternion *",
                        "definition": [
                            "kmQuaternion *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "float",
                        "definition": [
                            "float x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "float",
                        "definition": [
                            "float y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z",
                        "type": "float",
                        "definition": [
                            "float z"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w",
                        "type": "float",
                        "definition": [
                            "float w"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmQuaternionDot",
            "header": "float kmQuaternionDot(const kmQuaternion *q1, const kmQuaternion *q2)",
            "params": [
                "const kmQuaternion *q1",
                "const kmQuaternion *q2"
            ],
            "definition": "float kmQuaternionDot(const kmQuaternion *q1, const kmQuaternion *q2)\n{\n  return (((q1->w * q2->w) + (q1->x * q2->x)) + (q1->y * q2->y)) + (q1->z * q2->z);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "q1",
                        "type": "const kmQuaternion *",
                        "definition": [
                            "const kmQuaternion *q1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "q2",
                        "type": "const kmQuaternion *",
                        "definition": [
                            "const kmQuaternion *q2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmQuaternionExp",
            "header": "kmQuaternion *kmQuaternionExp(kmQuaternion *pOut, const kmQuaternion *pIn)",
            "params": [
                "kmQuaternion *pOut",
                "const kmQuaternion *pIn"
            ],
            "definition": "kmQuaternion *kmQuaternionExp(kmQuaternion *pOut, const kmQuaternion *pIn)\n{\n  assert(0);\n  return pOut;\n}\n\n",
            "calle": [
                "assert"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmQuaternion *",
                        "definition": [
                            "kmQuaternion *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmQuaternion *",
                        "definition": [
                            "const kmQuaternion *pIn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmQuaternionIdentity",
            "header": "kmQuaternion *kmQuaternionIdentity(kmQuaternion *pOut)",
            "params": [
                "kmQuaternion *pOut"
            ],
            "definition": "kmQuaternion *kmQuaternionIdentity(kmQuaternion *pOut)\n{\n  pOut->x = 0.0;\n  pOut->y = 0.0;\n  pOut->z = 0.0;\n  pOut->w = 1.0;\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmQuaternion *",
                        "definition": [
                            "kmQuaternion *pOut"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmQuaternionInverse",
            "header": "kmQuaternion *kmQuaternionInverse(kmQuaternion *pOut, const kmQuaternion *pIn)",
            "params": [
                "kmQuaternion *pOut",
                "const kmQuaternion *pIn"
            ],
            "definition": "kmQuaternion *kmQuaternionInverse(kmQuaternion *pOut, const kmQuaternion *pIn)\n{\n  float l = kmQuaternionLength(pIn);\n  if (fabs(l) < 0.0001)\n  {\n    pOut->x = 0.0;\n    pOut->y = 0.0;\n    pOut->z = 0.0;\n    pOut->w = 0.0;\n    return pOut;\n  }\n  pOut->x = -pIn->x;\n  pOut->y = -pIn->y;\n  pOut->z = -pIn->z;\n  pOut->w = pIn->w;\n  return pOut;\n}\n\n",
            "calle": [
                "fabs",
                "kmQuaternionLength"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmQuaternion *",
                        "definition": [
                            "kmQuaternion *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmQuaternion *",
                        "definition": [
                            "const kmQuaternion *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "l",
                        "type": "float",
                        "definition": [
                            "float l = kmQuaternionLength(pIn)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmQuaternionIsIdentity",
            "header": "int kmQuaternionIsIdentity(const kmQuaternion *pIn)",
            "params": [
                "const kmQuaternion *pIn"
            ],
            "definition": "int kmQuaternionIsIdentity(const kmQuaternion *pIn)\n{\n  return (((pIn->x == 0.0) && (pIn->y == 0.0)) && (pIn->z == 0.0)) && (pIn->w == 1.0);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmQuaternion *",
                        "definition": [
                            "const kmQuaternion *pIn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmQuaternionLength",
            "header": "float kmQuaternionLength(const kmQuaternion *pIn)",
            "params": [
                "const kmQuaternion *pIn"
            ],
            "definition": "float kmQuaternionLength(const kmQuaternion *pIn)\n{\n  return sqrt(kmQuaternionLengthSq(pIn));\n}\n\n",
            "calle": [
                "kmQuaternionLengthSq",
                "sqrt"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmQuaternion *",
                        "definition": [
                            "const kmQuaternion *pIn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmQuaternionLengthSq",
            "header": "float kmQuaternionLengthSq(const kmQuaternion *pIn)",
            "params": [
                "const kmQuaternion *pIn"
            ],
            "definition": "float kmQuaternionLengthSq(const kmQuaternion *pIn)\n{\n  return (((pIn->x * pIn->x) + (pIn->y * pIn->y)) + (pIn->z * pIn->z)) + (pIn->w * pIn->w);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmQuaternion *",
                        "definition": [
                            "const kmQuaternion *pIn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmQuaternionLn",
            "header": "kmQuaternion *kmQuaternionLn(kmQuaternion *pOut, const kmQuaternion *pIn)",
            "params": [
                "kmQuaternion *pOut",
                "const kmQuaternion *pIn"
            ],
            "definition": "kmQuaternion *kmQuaternionLn(kmQuaternion *pOut, const kmQuaternion *pIn)\n{\n  assert(0);\n  return pOut;\n}\n\n",
            "calle": [
                "assert"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmQuaternion *",
                        "definition": [
                            "kmQuaternion *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmQuaternion *",
                        "definition": [
                            "const kmQuaternion *pIn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmQuaternionMultiply",
            "header": "kmQuaternion *kmQuaternionMultiply(kmQuaternion *pOut, const kmQuaternion *q1, const kmQuaternion *q2)",
            "params": [
                "kmQuaternion *pOut",
                "const kmQuaternion *qu1",
                "const kmQuaternion *qu2"
            ],
            "definition": "extern kmQuaternion *kmQuaternionMultiply(kmQuaternion *pOut, const kmQuaternion *qu1, const kmQuaternion *qu2)\n{\n  kmQuaternion tmp1;\n  kmQuaternion tmp2;\n  kmQuaternionAssign(&tmp1, qu1);\n  kmQuaternionAssign(&tmp2, qu2);\n  kmQuaternion *q1 = &tmp1;\n  kmQuaternion *q2 = &tmp2;\n  pOut->x = (((q1->w * q2->x) + (q1->x * q2->w)) + (q1->y * q2->z)) - (q1->z * q2->y);\n  pOut->y = (((q1->w * q2->y) + (q1->y * q2->w)) + (q1->z * q2->x)) - (q1->x * q2->z);\n  pOut->z = (((q1->w * q2->z) + (q1->z * q2->w)) + (q1->x * q2->y)) - (q1->y * q2->x);\n  pOut->w = (((q1->w * q2->w) - (q1->x * q2->x)) - (q1->y * q2->y)) - (q1->z * q2->z);\n  return pOut;\n}\n\n",
            "calle": [
                "kmQuaternionAssign"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmQuaternion *",
                        "definition": [
                            "kmQuaternion *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "qu1",
                        "type": "const kmQuaternion *",
                        "definition": [
                            "const kmQuaternion *qu1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "qu2",
                        "type": "const kmQuaternion *",
                        "definition": [
                            "const kmQuaternion *qu2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp1",
                        "type": "kmQuaternion",
                        "definition": [
                            "kmQuaternion tmp1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp2",
                        "type": "kmQuaternion",
                        "definition": [
                            "kmQuaternion tmp2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "q1",
                        "type": "kmQuaternion *",
                        "definition": [
                            "kmQuaternion *q1 = &tmp1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "q2",
                        "type": "kmQuaternion *",
                        "definition": [
                            "kmQuaternion *q2 = &tmp2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmQuaternionNormalize",
            "header": "kmQuaternion *kmQuaternionNormalize(kmQuaternion *pOut, const kmQuaternion *pIn)",
            "params": [
                "kmQuaternion *pOut",
                "const kmQuaternion *pIn"
            ],
            "definition": "kmQuaternion *kmQuaternionNormalize(kmQuaternion *pOut, const kmQuaternion *pIn)\n{\n  float length = kmQuaternionLength(pIn);\n  if (fabs(length) < 0.0001)\n  {\n    pOut->x = 0.0;\n    pOut->y = 0.0;\n    pOut->z = 0.0;\n    pOut->w = 0.0;\n    return pOut;\n  }\n  kmQuaternionFill(pOut, pOut->x / length, pOut->y / length, pOut->z / length, pOut->w / length);\n  return pOut;\n}\n\n",
            "calle": [
                "fabs",
                "kmQuaternionFill",
                "kmQuaternionLength"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmQuaternion *",
                        "definition": [
                            "kmQuaternion *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmQuaternion *",
                        "definition": [
                            "const kmQuaternion *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "float",
                        "definition": [
                            "float length = kmQuaternionLength(pIn)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmQuaternionRotationAxisAngle",
            "header": "kmQuaternion *kmQuaternionRotationAxisAngle(kmQuaternion *pOut, const struct kmVec3 *pV, float angle)",
            "params": [
                "kmQuaternion *pOut",
                "const kmVec3 *pV",
                "float angle"
            ],
            "definition": "kmQuaternion *kmQuaternionRotationAxisAngle(kmQuaternion *pOut, const kmVec3 *pV, float angle)\n{\n  float rad = angle * 0.5f;\n  float scale = sinf(rad);\n  pOut->x = pV->x * scale;\n  pOut->y = pV->y * scale;\n  pOut->z = pV->z * scale;\n  pOut->w = cosf(rad);\n  kmQuaternionNormalize(pOut, pOut);\n  return pOut;\n}\n\n",
            "calle": [
                "cosf",
                "kmQuaternionNormalize",
                "sinf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmQuaternion *",
                        "definition": [
                            "kmQuaternion *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pV"
                        ]
                    },
                    {
                        "path": null,
                        "name": "angle",
                        "type": "float",
                        "definition": [
                            "float angle"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rad",
                        "type": "float",
                        "definition": [
                            "float rad = angle * 0.5f"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "float",
                        "definition": [
                            "float scale = sinf(rad)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmQuaternionRotationMatrix",
            "header": "kmQuaternion *kmQuaternionRotationMatrix(kmQuaternion *pOut, const struct kmMat3 *pIn)",
            "params": [
                "kmQuaternion *pOut",
                "const kmMat3 *pIn"
            ],
            "definition": "kmQuaternion *kmQuaternionRotationMatrix(kmQuaternion *pOut, const kmMat3 *pIn)\n{\n  float x;\n  float y;\n  float z;\n  float w;\n  float *pMatrix = 0;\n  unsigned int pMatrix_idx = 0;\n  float m4x4[16] = {0};\n  float scale = 0.0f;\n  float diagonal = 0.0f;\n  if (!pIn)\n  {\n    return 0;\n  }\n  m4x4[0] = pIn->mat[0];\n  m4x4[1] = pIn->mat[3];\n  m4x4[2] = pIn->mat[6];\n  m4x4[4] = pIn->mat[1];\n  m4x4[5] = pIn->mat[4];\n  m4x4[6] = pIn->mat[7];\n  m4x4[8] = pIn->mat[2];\n  m4x4[9] = pIn->mat[5];\n  m4x4[10] = pIn->mat[8];\n  m4x4[15] = 1;\n  pMatrix_idx = &m4x4[0];\n  diagonal = ((pMatrix[0 + pMatrix_idx] + pMatrix[5 + pMatrix_idx]) + pMatrix[10 + pMatrix_idx]) + 1;\n  if (diagonal > 0.0001)\n  {\n    scale = ((float) sqrt(diagonal)) * 2;\n    x = (pMatrix[9 + pMatrix_idx] - pMatrix[6 + pMatrix_idx]) / scale;\n    y = (pMatrix[2 + pMatrix_idx] - pMatrix[8 + pMatrix_idx]) / scale;\n    z = (pMatrix[4 + pMatrix_idx] - pMatrix[1 + pMatrix_idx]) / scale;\n    w = 0.25f * scale;\n  }\n  else\n  {\n    helper_kmQuaternionRotationMatrix_1(&x, &y, &z, &w, &scale, pMatrix, pMatrix_idx);\n  }\n  pOut->x = x;\n  pOut->y = y;\n  pOut->z = z;\n  pOut->w = w;\n  return pOut;\n}\n\n",
            "calle": [
                "helper_kmQuaternionRotationMatrix_1",
                "sqrt"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmQuaternion *",
                        "definition": [
                            "kmQuaternion *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmMat3 *",
                        "definition": [
                            "const kmMat3 *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "float",
                        "definition": [
                            "float x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "float",
                        "definition": [
                            "float y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z",
                        "type": "float",
                        "definition": [
                            "float z"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w",
                        "type": "float",
                        "definition": [
                            "float w"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pMatrix",
                        "type": "float *",
                        "definition": [
                            "float *pMatrix = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pMatrix_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pMatrix_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m4x4",
                        "type": "float [16]",
                        "definition": [
                            "float m4x4[16] = {0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "float",
                        "definition": [
                            "float scale = 0.0f"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diagonal",
                        "type": "float",
                        "definition": [
                            "float diagonal = 0.0f"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmQuaternionRotationPitchYawRoll",
            "header": "kmQuaternion *kmQuaternionRotationPitchYawRoll(kmQuaternion *pOut, float pitch, float yaw, float roll)",
            "params": [
                "kmQuaternion *pOut",
                "float pitch",
                "float yaw",
                "float roll"
            ],
            "definition": "kmQuaternion *kmQuaternionRotationPitchYawRoll(kmQuaternion *pOut, float pitch, float yaw, float roll)\n{\n  assert(pitch <= (2 * 3.14159265358979323846f));\n  assert(yaw <= (2 * 3.14159265358979323846f));\n  assert(roll <= (2 * 3.14159265358979323846f));\n  float sY = sinf(yaw * 0.5);\n  float cY = cosf(yaw * 0.5);\n  float sZ = sinf(roll * 0.5);\n  float cZ = cosf(roll * 0.5);\n  float sX = sinf(pitch * 0.5);\n  float cX = cosf(pitch * 0.5);\n  pOut->w = ((cY * cZ) * cX) - ((sY * sZ) * sX);\n  pOut->x = ((sY * sZ) * cX) + ((cY * cZ) * sX);\n  pOut->y = ((sY * cZ) * cX) + ((cY * sZ) * sX);\n  pOut->z = ((cY * sZ) * cX) - ((sY * cZ) * sX);\n  return pOut;\n}\n\n",
            "calle": [
                "assert",
                "cosf",
                "sinf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmQuaternion *",
                        "definition": [
                            "kmQuaternion *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pitch",
                        "type": "float",
                        "definition": [
                            "float pitch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yaw",
                        "type": "float",
                        "definition": [
                            "float yaw"
                        ]
                    },
                    {
                        "path": null,
                        "name": "roll",
                        "type": "float",
                        "definition": [
                            "float roll"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sY",
                        "type": "float",
                        "definition": [
                            "float sY = sinf(yaw * 0.5)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cY",
                        "type": "float",
                        "definition": [
                            "float cY = cosf(yaw * 0.5)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sZ",
                        "type": "float",
                        "definition": [
                            "float sZ = sinf(roll * 0.5)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cZ",
                        "type": "float",
                        "definition": [
                            "float cZ = cosf(roll * 0.5)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sX",
                        "type": "float",
                        "definition": [
                            "float sX = sinf(pitch * 0.5)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cX",
                        "type": "float",
                        "definition": [
                            "float cX = cosf(pitch * 0.5)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmQuaternionSlerp",
            "header": "kmQuaternion *kmQuaternionSlerp(kmQuaternion *pOut, const kmQuaternion *q1, const kmQuaternion *q2, float t)",
            "params": [
                "kmQuaternion *pOut",
                "const kmQuaternion *q1",
                "const kmQuaternion *q2",
                "float t"
            ],
            "definition": "kmQuaternion *kmQuaternionSlerp(kmQuaternion *pOut, const kmQuaternion *q1, const kmQuaternion *q2, float t)\n{\n  float dot = kmQuaternionDot(q1, q2);\n  const double DOT_THRESHOLD = 0.9995;\n  if (dot > DOT_THRESHOLD)\n  {\n    kmQuaternion diff;\n    kmQuaternionSubtract(&diff, q2, q1);\n    kmQuaternionScale(&diff, &diff, t);\n    kmQuaternionAdd(pOut, q1, &diff);\n    kmQuaternionNormalize(pOut, pOut);\n    return pOut;\n  }\n  dot = kmClamp(dot, -1, 1);\n  float theta_0 = acos(dot);\n  float theta = theta_0 * t;\n  kmQuaternion tmp;\n  kmQuaternionScale(&tmp, q1, dot);\n  kmQuaternionSubtract(&tmp, q2, &tmp);\n  kmQuaternionNormalize(&tmp, &tmp);\n  kmQuaternion t1;\n  kmQuaternion t2;\n  kmQuaternionScale(&t1, q1, cos(theta));\n  kmQuaternionScale(&t2, &tmp, sin(theta));\n  kmQuaternionAdd(pOut, &t1, &t2);\n  return pOut;\n}\n\n",
            "calle": [
                "acos",
                "cos",
                "kmClamp",
                "kmQuaternionAdd",
                "kmQuaternionDot",
                "kmQuaternionNormalize",
                "kmQuaternionScale",
                "kmQuaternionSubtract",
                "sin"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmQuaternion *",
                        "definition": [
                            "kmQuaternion *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "q1",
                        "type": "const kmQuaternion *",
                        "definition": [
                            "const kmQuaternion *q1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "q2",
                        "type": "const kmQuaternion *",
                        "definition": [
                            "const kmQuaternion *q2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "float",
                        "definition": [
                            "float t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dot",
                        "type": "float",
                        "definition": [
                            "float dot = kmQuaternionDot(q1, q2)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "DOT_THRESHOLD",
                        "type": "const double",
                        "definition": [
                            "const double DOT_THRESHOLD = 0.9995"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff",
                        "type": "kmQuaternion",
                        "definition": [
                            "kmQuaternion diff"
                        ]
                    },
                    {
                        "path": null,
                        "name": "theta_0",
                        "type": "float",
                        "definition": [
                            "float theta_0 = acos(dot)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "theta",
                        "type": "float",
                        "definition": [
                            "float theta = theta_0 * t"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "kmQuaternion",
                        "definition": [
                            "kmQuaternion tmp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t1",
                        "type": "kmQuaternion",
                        "definition": [
                            "kmQuaternion t1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t2",
                        "type": "kmQuaternion",
                        "definition": [
                            "kmQuaternion t2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmQuaternionToAxisAngle",
            "header": "void kmQuaternionToAxisAngle(const kmQuaternion *pIn, struct kmVec3 *pVector, float *pAngle)",
            "params": [
                "const kmQuaternion *pIn",
                "kmVec3 *pAxis",
                "float *pAngle"
            ],
            "definition": "void kmQuaternionToAxisAngle(const kmQuaternion *pIn, kmVec3 *pAxis, float *pAngle)\n{\n  float tempAngle;\n  float scale;\n  tempAngle = acosf(pIn->w);\n  scale = sqrtf((kmSQR(pIn->x) + kmSQR(pIn->y)) + kmSQR(pIn->z));\n  if (((scale > (-0.0001)) && (scale < 0.0001)) || ((scale < ((2 * 3.14159265358979323846f) + 0.0001)) && (scale > ((2 * 3.14159265358979323846f) - 0.0001))))\n  {\n    *pAngle = 0.0f;\n    pAxis->x = 0.0f;\n    pAxis->y = 0.0f;\n    pAxis->z = 1.0f;\n  }\n  else\n  {\n    *pAngle = tempAngle * 2.0f;\n    pAxis->x = pIn->x / scale;\n    pAxis->y = pIn->y / scale;\n    pAxis->z = pIn->z / scale;\n    kmVec3Normalize(pAxis, pAxis);\n  }\n}\n\n",
            "calle": [
                "acosf",
                "kmSQR",
                "kmVec3Normalize",
                "sqrtf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmQuaternion *",
                        "definition": [
                            "const kmQuaternion *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pAxis",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pAxis"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pAngle",
                        "type": "float *",
                        "definition": [
                            "float *pAngle"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tempAngle",
                        "type": "float",
                        "definition": [
                            "float tempAngle"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "float",
                        "definition": [
                            "float scale"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmQuaternionScale",
            "header": "kmQuaternion *kmQuaternionScale(kmQuaternion *pOut, const kmQuaternion *pIn, float s)",
            "params": [
                "kmQuaternion *pOut",
                "const kmQuaternion *pIn",
                "float s"
            ],
            "definition": "kmQuaternion *kmQuaternionScale(kmQuaternion *pOut, const kmQuaternion *pIn, float s)\n{\n  pOut->x = pIn->x * s;\n  pOut->y = pIn->y * s;\n  pOut->z = pIn->z * s;\n  pOut->w = pIn->w * s;\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmQuaternion *",
                        "definition": [
                            "kmQuaternion *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmQuaternion *",
                        "definition": [
                            "const kmQuaternion *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "float",
                        "definition": [
                            "float s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmQuaternionAssign",
            "header": "kmQuaternion *kmQuaternionAssign(kmQuaternion *pOut, const kmQuaternion *pIn)",
            "params": [
                "kmQuaternion *pOut",
                "const kmQuaternion *pIn"
            ],
            "definition": "kmQuaternion *kmQuaternionAssign(kmQuaternion *pOut, const kmQuaternion *pIn)\n{\n  memcpy(pOut, pIn, (sizeof(float)) * 4);\n  return pOut;\n}\n\n",
            "calle": [
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmQuaternion *",
                        "definition": [
                            "kmQuaternion *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmQuaternion *",
                        "definition": [
                            "const kmQuaternion *pIn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmQuaternionAdd",
            "header": "kmQuaternion *kmQuaternionAdd(kmQuaternion *pOut, const kmQuaternion *pQ1, const kmQuaternion *pQ2)",
            "params": [
                "kmQuaternion *pOut",
                "const kmQuaternion *pQ1",
                "const kmQuaternion *pQ2"
            ],
            "definition": "kmQuaternion *kmQuaternionAdd(kmQuaternion *pOut, const kmQuaternion *pQ1, const kmQuaternion *pQ2)\n{\n  pOut->x = pQ1->x + pQ2->x;\n  pOut->y = pQ1->y + pQ2->y;\n  pOut->z = pQ1->z + pQ2->z;\n  pOut->w = pQ1->w + pQ2->w;\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmQuaternion *",
                        "definition": [
                            "kmQuaternion *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pQ1",
                        "type": "const kmQuaternion *",
                        "definition": [
                            "const kmQuaternion *pQ1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pQ2",
                        "type": "const kmQuaternion *",
                        "definition": [
                            "const kmQuaternion *pQ2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmQuaternionSubtract",
            "header": "kmQuaternion *kmQuaternionSubtract(kmQuaternion *pOut, const kmQuaternion *pQ1, const kmQuaternion *pQ2)",
            "params": [
                "kmQuaternion *pOut",
                "const kmQuaternion *pQ1",
                "const kmQuaternion *pQ2"
            ],
            "definition": "kmQuaternion *kmQuaternionSubtract(kmQuaternion *pOut, const kmQuaternion *pQ1, const kmQuaternion *pQ2)\n{\n  pOut->x = pQ1->x - pQ2->x;\n  pOut->y = pQ1->y - pQ2->y;\n  pOut->z = pQ1->z - pQ2->z;\n  pOut->w = pQ1->w - pQ2->w;\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmQuaternion *",
                        "definition": [
                            "kmQuaternion *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pQ1",
                        "type": "const kmQuaternion *",
                        "definition": [
                            "const kmQuaternion *pQ1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pQ2",
                        "type": "const kmQuaternion *",
                        "definition": [
                            "const kmQuaternion *pQ2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmQuaternionRotationBetweenVec3",
            "header": "kmQuaternion *kmQuaternionRotationBetweenVec3(kmQuaternion *pOut, const struct kmVec3 *vec1, const struct kmVec3 *vec2, const struct kmVec3 *fallback)",
            "params": [
                "kmQuaternion *pOut",
                "const kmVec3 *vec1",
                "const kmVec3 *vec2",
                "const kmVec3 *fallback"
            ],
            "definition": "kmQuaternion *kmQuaternionRotationBetweenVec3(kmQuaternion *pOut, const kmVec3 *vec1, const kmVec3 *vec2, const kmVec3 *fallback)\n{\n  kmVec3 v1;\n  kmVec3 v2;\n  float a;\n  kmVec3Assign(&v1, vec1);\n  kmVec3Assign(&v2, vec2);\n  kmVec3Normalize(&v1, &v1);\n  kmVec3Normalize(&v2, &v2);\n  a = kmVec3Dot(&v1, &v2);\n  if (a >= 1.0)\n  {\n    kmQuaternionIdentity(pOut);\n    return pOut;\n  }\n  if (a < (1e-6f - 1.0f))\n  {\n    helper_kmQuaternionRotationBetweenVec3_1(pOut, vec1, fallback);\n  }\n  else\n  {\n    float s = sqrtf((1 + a) * 2);\n    float invs = 1 / s;\n    kmVec3 c;\n    kmVec3Cross(&c, &v1, &v2);\n    pOut->x = c.x * invs;\n    pOut->y = c.y * invs;\n    pOut->z = c.z * invs;\n    pOut->w = s * 0.5f;\n    kmQuaternionNormalize(pOut, pOut);\n  }\n  return pOut;\n}\n\n",
            "calle": [
                "helper_kmQuaternionRotationBetweenVec3_1",
                "kmQuaternionIdentity",
                "kmQuaternionNormalize",
                "kmVec3Assign",
                "kmVec3Cross",
                "kmVec3Dot",
                "kmVec3Normalize",
                "sqrtf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmQuaternion *",
                        "definition": [
                            "kmQuaternion *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vec1",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *vec1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vec2",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *vec2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fallback",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *fallback"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 v1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 v2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "float",
                        "definition": [
                            "float a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "float",
                        "definition": [
                            "float s = sqrtf((1 + a) * 2)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "invs",
                        "type": "float",
                        "definition": [
                            "float invs = 1 / s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmQuaternionMultiplyVec3",
            "header": "struct kmVec3 *kmQuaternionMultiplyVec3(struct kmVec3 *pOut, const kmQuaternion *q, const struct kmVec3 *v)",
            "params": [
                "kmVec3 *pOut",
                "const kmQuaternion *q",
                "const kmVec3 *v"
            ],
            "definition": "kmVec3 *kmQuaternionMultiplyVec3(kmVec3 *pOut, const kmQuaternion *q, const kmVec3 *v)\n{\n  kmVec3 uv;\n  kmVec3 uuv;\n  kmVec3 qvec;\n  qvec.x = q->x;\n  qvec.y = q->y;\n  qvec.z = q->z;\n  kmVec3Cross(&uv, &qvec, v);\n  kmVec3Cross(&uuv, &qvec, &uv);\n  kmVec3Scale(&uv, &uv, 2.0f * q->w);\n  kmVec3Scale(&uuv, &uuv, 2.0f);\n  kmVec3Add(pOut, v, &uv);\n  kmVec3Add(pOut, pOut, &uuv);\n  return pOut;\n}\n\n",
            "calle": [
                "kmVec3Add",
                "kmVec3Cross",
                "kmVec3Scale"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "q",
                        "type": "const kmQuaternion *",
                        "definition": [
                            "const kmQuaternion *q"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *v"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uv",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 uv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uuv",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 uuv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "qvec",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 qvec"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmQuaternionGetUpVec3",
            "header": "kmVec3 *kmQuaternionGetUpVec3(kmVec3 *pOut, const kmQuaternion *pIn)",
            "params": [
                "kmVec3 *pOut",
                "const kmQuaternion *pIn"
            ],
            "definition": "kmVec3 *kmQuaternionGetUpVec3(kmVec3 *pOut, const kmQuaternion *pIn)\n{\n  return kmQuaternionMultiplyVec3(pOut, pIn, &KM_VEC3_POS_Y);\n}\n\n",
            "calle": [
                "kmQuaternionMultiplyVec3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmQuaternion *",
                        "definition": [
                            "const kmQuaternion *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "KM_VEC3_POS_Y",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmQuaternionGetRightVec3",
            "header": "kmVec3 *kmQuaternionGetRightVec3(kmVec3 *pOut, const kmQuaternion *pIn)",
            "params": [
                "kmVec3 *pOut",
                "const kmQuaternion *pIn"
            ],
            "definition": "kmVec3 *kmQuaternionGetRightVec3(kmVec3 *pOut, const kmQuaternion *pIn)\n{\n  return kmQuaternionMultiplyVec3(pOut, pIn, &KM_VEC3_POS_X);\n}\n\n",
            "calle": [
                "kmQuaternionMultiplyVec3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmQuaternion *",
                        "definition": [
                            "const kmQuaternion *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "KM_VEC3_POS_X",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmQuaternionGetForwardVec3RH",
            "header": "kmVec3 *kmQuaternionGetForwardVec3RH(kmVec3 *pOut, const kmQuaternion *pIn)",
            "params": [
                "kmVec3 *pOut",
                "const kmQuaternion *pIn"
            ],
            "definition": "kmVec3 *kmQuaternionGetForwardVec3RH(kmVec3 *pOut, const kmQuaternion *pIn)\n{\n  return kmQuaternionMultiplyVec3(pOut, pIn, &KM_VEC3_NEG_Z);\n}\n\n",
            "calle": [
                "kmQuaternionMultiplyVec3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmQuaternion *",
                        "definition": [
                            "const kmQuaternion *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "KM_VEC3_NEG_Z",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmQuaternionGetForwardVec3LH",
            "header": "kmVec3 *kmQuaternionGetForwardVec3LH(kmVec3 *pOut, const kmQuaternion *pIn)",
            "params": [
                "kmVec3 *pOut",
                "const kmQuaternion *pIn"
            ],
            "definition": "kmVec3 *kmQuaternionGetForwardVec3LH(kmVec3 *pOut, const kmQuaternion *pIn)\n{\n  return kmQuaternionMultiplyVec3(pOut, pIn, &KM_VEC3_POS_Z);\n}\n\n",
            "calle": [
                "kmQuaternionMultiplyVec3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmQuaternion *",
                        "definition": [
                            "const kmQuaternion *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "KM_VEC3_POS_Z",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmQuaternionGetPitch",
            "header": "float kmQuaternionGetPitch(const kmQuaternion *q)",
            "params": [
                "const kmQuaternion *q"
            ],
            "definition": "float kmQuaternionGetPitch(const kmQuaternion *q)\n{\n  float result = atan2(2 * ((q->y * q->z) + (q->w * q->x)), (((q->w * q->w) - (q->x * q->x)) - (q->y * q->y)) + (q->z * q->z));\n  return result;\n}\n\n",
            "calle": [
                "atan2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "q",
                        "type": "const kmQuaternion *",
                        "definition": [
                            "const kmQuaternion *q"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "float",
                        "definition": [
                            "float result = atan2(2 * ((q->y * q->z) + (q->w * q->x)), (((q->w * q->w) - (q->x * q->x)) - (q->y * q->y)) + (q->z * q->z))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmQuaternionGetYaw",
            "header": "float kmQuaternionGetYaw(const kmQuaternion *q)",
            "params": [
                "const kmQuaternion *q"
            ],
            "definition": "float kmQuaternionGetYaw(const kmQuaternion *q)\n{\n  float result = asin((-2) * ((q->x * q->z) - (q->w * q->y)));\n  return result;\n}\n\n",
            "calle": [
                "asin"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "q",
                        "type": "const kmQuaternion *",
                        "definition": [
                            "const kmQuaternion *q"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "float",
                        "definition": [
                            "float result = asin((-2) * ((q->x * q->z) - (q->w * q->y)))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmQuaternionGetRoll",
            "header": "float kmQuaternionGetRoll(const kmQuaternion *q)",
            "params": [
                "const kmQuaternion *q"
            ],
            "definition": "float kmQuaternionGetRoll(const kmQuaternion *q)\n{\n  float result = atan2(2 * ((q->x * q->y) + (q->w * q->z)), (((q->w * q->w) + (q->x * q->x)) - (q->y * q->y)) - (q->z * q->z));\n  return result;\n}\n\n",
            "calle": [
                "atan2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "q",
                        "type": "const kmQuaternion *",
                        "definition": [
                            "const kmQuaternion *q"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "float",
                        "definition": [
                            "float result = atan2(2 * ((q->x * q->y) + (q->w * q->z)), (((q->w * q->w) + (q->x * q->x)) - (q->y * q->y)) - (q->z * q->z))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmQuaternionLookRotation",
            "header": "kmQuaternion *kmQuaternionLookRotation(kmQuaternion *pOut, const kmVec3 *direction, const kmVec3 *up)",
            "params": [
                "kmQuaternion *pOut",
                "const kmVec3 *direction",
                "const kmVec3 *up"
            ],
            "definition": "kmQuaternion *kmQuaternionLookRotation(kmQuaternion *pOut, const kmVec3 *direction, const kmVec3 *up)\n{\n  kmMat3 tmp;\n  kmMat3LookAt(&tmp, &KM_VEC3_ZERO, direction, up);\n  return kmQuaternionNormalize(pOut, kmQuaternionRotationMatrix(pOut, &tmp));\n}\n\n",
            "calle": [
                "kmMat3LookAt",
                "kmQuaternionNormalize",
                "kmQuaternionRotationMatrix"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmQuaternion *",
                        "definition": [
                            "kmQuaternion *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "direction",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *direction"
                        ]
                    },
                    {
                        "path": null,
                        "name": "up",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *up"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "kmMat3",
                        "definition": [
                            "kmMat3 tmp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "KM_VEC3_ZERO",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_kmQuaternionRotationMatrix_1",
            "header": "",
            "params": [
                "float * const x_ref",
                "float * const y_ref",
                "float * const z_ref",
                "float * const w_ref",
                "float * const scale_ref",
                "float * const pMatrix",
                "unsigned int pMatrix_idx"
            ],
            "definition": "void helper_kmQuaternionRotationMatrix_1(float * const x_ref, float * const y_ref, float * const z_ref, float * const w_ref, float * const scale_ref, float * const pMatrix, unsigned int pMatrix_idx)\n{\n  float x = *x_ref;\n  float y = *y_ref;\n  float z = *z_ref;\n  float w = *w_ref;\n  float scale = *scale_ref;\n  if ((pMatrix[0 + pMatrix_idx] > pMatrix[5 + pMatrix_idx]) && (pMatrix[0 + pMatrix_idx] > pMatrix[10 + pMatrix_idx]))\n  {\n    scale = ((float) sqrt(((1.0f + pMatrix[0 + pMatrix_idx]) - pMatrix[5 + pMatrix_idx]) - pMatrix[10 + pMatrix_idx])) * 2.0f;\n    x = 0.25f * scale;\n    y = (pMatrix[4 + pMatrix_idx] + pMatrix[1 + pMatrix_idx]) / scale;\n    z = (pMatrix[2 + pMatrix_idx] + pMatrix[8 + pMatrix_idx]) / scale;\n    w = (pMatrix[9 + pMatrix_idx] - pMatrix[6 + pMatrix_idx]) / scale;\n  }\n  else\n    if (pMatrix[5 + pMatrix_idx] > pMatrix[10 + pMatrix_idx])\n  {\n    scale = ((float) sqrt(((1.0f + pMatrix[5 + pMatrix_idx]) - pMatrix[0 + pMatrix_idx]) - pMatrix[10 + pMatrix_idx])) * 2.0f;\n    x = (pMatrix[4 + pMatrix_idx] + pMatrix[1 + pMatrix_idx]) / scale;\n    y = 0.25f * scale;\n    z = (pMatrix[9 + pMatrix_idx] + pMatrix[6 + pMatrix_idx]) / scale;\n    w = (pMatrix[2 + pMatrix_idx] - pMatrix[8 + pMatrix_idx]) / scale;\n  }\n  else\n  {\n    scale = ((float) sqrt(((1.0f + pMatrix[10 + pMatrix_idx]) - pMatrix[0 + pMatrix_idx]) - pMatrix[5 + pMatrix_idx])) * 2.0f;\n    x = (pMatrix[2 + pMatrix_idx] + pMatrix[8 + pMatrix_idx]) / scale;\n    y = (pMatrix[9 + pMatrix_idx] + pMatrix[6 + pMatrix_idx]) / scale;\n    z = 0.25f * scale;\n    w = (pMatrix[4 + pMatrix_idx] - pMatrix[1 + pMatrix_idx]) / scale;\n  }\n  *x_ref = x;\n  *y_ref = y;\n  *z_ref = z;\n  *w_ref = w;\n  *scale_ref = scale;\n}\n\n",
            "calle": [
                "sqrt"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "x_ref",
                        "type": "float * const",
                        "definition": [
                            "float * const x_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y_ref",
                        "type": "float * const",
                        "definition": [
                            "float * const y_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z_ref",
                        "type": "float * const",
                        "definition": [
                            "float * const z_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w_ref",
                        "type": "float * const",
                        "definition": [
                            "float * const w_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale_ref",
                        "type": "float * const",
                        "definition": [
                            "float * const scale_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pMatrix",
                        "type": "float * const",
                        "definition": [
                            "float * const pMatrix"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pMatrix_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pMatrix_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "float",
                        "definition": [
                            "float x = *x_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "float",
                        "definition": [
                            "float y = *y_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z",
                        "type": "float",
                        "definition": [
                            "float z = *z_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w",
                        "type": "float",
                        "definition": [
                            "float w = *w_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "float",
                        "definition": [
                            "float scale = *scale_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_kmQuaternionRotationBetweenVec3_1",
            "header": "",
            "params": [
                "kmQuaternion * const pOut",
                "const kmVec3 * const vec1",
                "const kmVec3 * const fallback"
            ],
            "definition": "void helper_kmQuaternionRotationBetweenVec3_1(kmQuaternion * const pOut, const kmVec3 * const vec1, const kmVec3 * const fallback)\n{\n  if (fabs(kmVec3LengthSq(fallback)) < 0.0001)\n  {\n    kmQuaternionRotationAxisAngle(pOut, fallback, 3.14159265358979323846f);\n  }\n  else\n  {\n    kmVec3 axis;\n    kmVec3 X;\n    X.x = 1.0;\n    X.y = 0.0;\n    X.z = 0.0;\n    kmVec3Cross(&axis, &X, vec1);\n    if (fabs(kmVec3LengthSq(&axis)) < 0.0001)\n    {\n      kmVec3 Y;\n      Y.x = 0.0;\n      Y.y = 1.0;\n      Y.z = 0.0;\n      kmVec3Cross(&axis, &Y, vec1);\n    }\n    kmVec3Normalize(&axis, &axis);\n    kmQuaternionRotationAxisAngle(pOut, &axis, 3.14159265358979323846f);\n  }\n}\n\n",
            "calle": [
                "fabs",
                "kmQuaternionRotationAxisAngle",
                "kmVec3Cross",
                "kmVec3LengthSq",
                "kmVec3Normalize"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmQuaternion * const",
                        "definition": [
                            "kmQuaternion * const pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vec1",
                        "type": "const kmVec3 * const",
                        "definition": [
                            "const kmVec3 * const vec1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fallback",
                        "type": "const kmVec3 * const",
                        "definition": [
                            "const kmVec3 * const fallback"
                        ]
                    },
                    {
                        "path": null,
                        "name": "axis",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 axis"
                        ]
                    },
                    {
                        "path": null,
                        "name": "X",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 X"
                        ]
                    },
                    {
                        "path": null,
                        "name": "Y",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 Y"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmRay2Fill",
            "header": "void kmRay2Fill(kmRay2 *ray, float px, float py, float vx, float vy)",
            "params": [
                "kmRay2 *ray",
                "float px",
                "float py",
                "float vx",
                "float vy"
            ],
            "definition": "void kmRay2Fill(kmRay2 *ray, float px, float py, float vx, float vy)\n{\n  ray->start.x = px;\n  ray->start.y = py;\n  ray->dir.x = vx;\n  ray->dir.y = vy;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ray",
                        "type": "kmRay2 *",
                        "definition": [
                            "kmRay2 *ray"
                        ]
                    },
                    {
                        "path": null,
                        "name": "px",
                        "type": "float",
                        "definition": [
                            "float px"
                        ]
                    },
                    {
                        "path": null,
                        "name": "py",
                        "type": "float",
                        "definition": [
                            "float py"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vx",
                        "type": "float",
                        "definition": [
                            "float vx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vy",
                        "type": "float",
                        "definition": [
                            "float vy"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmRay2FillWithEndpoints",
            "header": "void kmRay2FillWithEndpoints(kmRay2 *ray, const kmVec2 *start, const kmVec2 *end)",
            "params": [
                "kmRay2 *ray",
                "const kmVec2 *start",
                "const kmVec2 *end"
            ],
            "definition": "void kmRay2FillWithEndpoints(kmRay2 *ray, const kmVec2 *start, const kmVec2 *end)\n{\n  ray->start.x = start->x;\n  ray->start.y = start->y;\n  ray->dir.x = end->x - start->x;\n  ray->dir.y = end->y - start->y;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ray",
                        "type": "kmRay2 *",
                        "definition": [
                            "kmRay2 *ray"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *end"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmLine2WithLineIntersection",
            "header": "unsigned char kmLine2WithLineIntersection(const kmVec2 *ptA, const kmVec2 *vecA, const kmVec2 *ptB, const kmVec2 *vecB, float *outTA, float *outTB, kmVec2 *outIntersection)",
            "params": [
                "const kmVec2 *ptA",
                "const kmVec2 *vecA",
                "const kmVec2 *ptB",
                "const kmVec2 *vecB",
                "float *outTA",
                "float *outTB",
                "kmVec2 *outIntersection"
            ],
            "definition": "unsigned char kmLine2WithLineIntersection(const kmVec2 *ptA, const kmVec2 *vecA, const kmVec2 *ptB, const kmVec2 *vecB, float *outTA, float *outTB, kmVec2 *outIntersection)\n{\n  float x1 = ptA->x;\n  float y1 = ptA->y;\n  float x2 = x1 + vecA->x;\n  float y2 = y1 + vecA->y;\n  float x3 = ptB->x;\n  float y3 = ptB->y;\n  float x4 = x3 + vecB->x;\n  float y4 = y3 + vecB->y;\n  float denom = ((y4 - y3) * (x2 - x1)) - ((x4 - x3) * (y2 - y1));\n  if ((denom > (-0.0001)) && (denom < 0.0001))\n  {\n    return 0;\n  }\n  float ua = (((x4 - x3) * (y1 - y3)) - ((y4 - y3) * (x1 - x3))) / denom;\n  float ub = (((x2 - x1) * (y1 - y3)) - ((y2 - y1) * (x1 - x3))) / denom;\n  float x = x1 + (ua * (x2 - x1));\n  float y = y1 + (ua * (y2 - y1));\n  if (outTA)\n  {\n    *outTA = ua;\n  }\n  if (outTB)\n  {\n    *outTB = ub;\n  }\n  if (outIntersection)\n  {\n    outIntersection->x = x;\n    outIntersection->y = y;\n  }\n  return 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptA",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *ptA"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vecA",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *vecA"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptB",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *ptB"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vecB",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *vecB"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outTA",
                        "type": "float *",
                        "definition": [
                            "float *outTA"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outTB",
                        "type": "float *",
                        "definition": [
                            "float *outTB"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outIntersection",
                        "type": "kmVec2 *",
                        "definition": [
                            "kmVec2 *outIntersection"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x1",
                        "type": "float",
                        "definition": [
                            "float x1 = ptA->x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y1",
                        "type": "float",
                        "definition": [
                            "float y1 = ptA->y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x2",
                        "type": "float",
                        "definition": [
                            "float x2 = x1 + vecA->x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y2",
                        "type": "float",
                        "definition": [
                            "float y2 = y1 + vecA->y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x3",
                        "type": "float",
                        "definition": [
                            "float x3 = ptB->x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y3",
                        "type": "float",
                        "definition": [
                            "float y3 = ptB->y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x4",
                        "type": "float",
                        "definition": [
                            "float x4 = x3 + vecB->x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y4",
                        "type": "float",
                        "definition": [
                            "float y4 = y3 + vecB->y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "denom",
                        "type": "float",
                        "definition": [
                            "float denom = ((y4 - y3) * (x2 - x1)) - ((x4 - x3) * (y2 - y1))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ua",
                        "type": "float",
                        "definition": [
                            "float ua = (((x4 - x3) * (y1 - y3)) - ((y4 - y3) * (x1 - x3))) / denom"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ub",
                        "type": "float",
                        "definition": [
                            "float ub = (((x2 - x1) * (y1 - y3)) - ((y2 - y1) * (x1 - x3))) / denom"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "float",
                        "definition": [
                            "float x = x1 + (ua * (x2 - x1))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "float",
                        "definition": [
                            "float y = y1 + (ua * (y2 - y1))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmSegment2WithSegmentIntersection",
            "header": "unsigned char kmSegment2WithSegmentIntersection(const kmRay2 *segmentA, const kmRay2 *segmentB, kmVec2 *intersection)",
            "params": [
                "const kmRay2 *segmentA",
                "const kmRay2 *segmentB",
                "kmVec2 *intersection"
            ],
            "definition": "unsigned char kmSegment2WithSegmentIntersection(const kmRay2 *segmentA, const kmRay2 *segmentB, kmVec2 *intersection)\n{\n  float ua;\n  float ub;\n  kmVec2 pt;\n  if ((((kmLine2WithLineIntersection(&segmentA->start, &segmentA->dir, &segmentB->start, &segmentB->start, &ua, &ub, &pt) && (0.0 <= ua)) && (ua <= 1.0)) && (0.0 <= ub)) && (ub <= 1.0))\n  {\n    intersection->x = pt.x;\n    intersection->y = pt.y;\n    return 1;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "kmLine2WithLineIntersection"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "segmentA",
                        "type": "const kmRay2 *",
                        "definition": [
                            "const kmRay2 *segmentA"
                        ]
                    },
                    {
                        "path": null,
                        "name": "segmentB",
                        "type": "const kmRay2 *",
                        "definition": [
                            "const kmRay2 *segmentB"
                        ]
                    },
                    {
                        "path": null,
                        "name": "intersection",
                        "type": "kmVec2 *",
                        "definition": [
                            "kmVec2 *intersection"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ua",
                        "type": "float",
                        "definition": [
                            "float ua"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ub",
                        "type": "float",
                        "definition": [
                            "float ub"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pt",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 pt"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmRay2IntersectLineSegment",
            "header": "unsigned char kmRay2IntersectLineSegment(const kmRay2 *ray, const kmVec2 *p1, const kmVec2 *p2, kmVec2 *intersection)",
            "params": [
                "const kmRay2 *ray",
                "const kmVec2 *p1",
                "const kmVec2 *p2",
                "kmVec2 *intersection"
            ],
            "definition": "unsigned char kmRay2IntersectLineSegment(const kmRay2 *ray, const kmVec2 *p1, const kmVec2 *p2, kmVec2 *intersection)\n{\n  float ua;\n  float ub;\n  kmVec2 pt;\n  kmRay2 otherSegment;\n  kmRay2FillWithEndpoints(&otherSegment, p1, p2);\n  if (((kmLine2WithLineIntersection(&ray->start, &ray->dir, &otherSegment.start, &otherSegment.dir, &ua, &ub, &pt) && (0.0 <= ua)) && (0.0 <= ub)) && (ub <= 1.0))\n  {\n    intersection->x = pt.x;\n    intersection->y = pt.y;\n    return 1;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "kmLine2WithLineIntersection",
                "kmRay2FillWithEndpoints"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ray",
                        "type": "const kmRay2 *",
                        "definition": [
                            "const kmRay2 *ray"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p1",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *p1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p2",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *p2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "intersection",
                        "type": "kmVec2 *",
                        "definition": [
                            "kmVec2 *intersection"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ua",
                        "type": "float",
                        "definition": [
                            "float ua"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ub",
                        "type": "float",
                        "definition": [
                            "float ub"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pt",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 pt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "otherSegment",
                        "type": "kmRay2",
                        "definition": [
                            "kmRay2 otherSegment"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmRay2IntersectTriangle",
            "header": "unsigned char kmRay2IntersectTriangle(const kmRay2 *ray, const kmVec2 *p1, const kmVec2 *p2, const kmVec2 *p3, kmVec2 *intersection, kmVec2 *normal_out, float *distance)",
            "params": [
                "const kmRay2 *ray",
                "const kmVec2 *p1",
                "const kmVec2 *p2",
                "const kmVec2 *p3",
                "kmVec2 *intersection",
                "kmVec2 *normal_out",
                "float *distance_out"
            ],
            "definition": "unsigned char kmRay2IntersectTriangle(const kmRay2 *ray, const kmVec2 *p1, const kmVec2 *p2, const kmVec2 *p3, kmVec2 *intersection, kmVec2 *normal_out, float *distance_out)\n{\n  kmVec2 intersect;\n  kmVec2 final_intersect;\n  kmVec2 normal;\n  float distance = 10000.0f;\n  unsigned char intersected = 0;\n  if (kmRay2IntersectLineSegment(ray, p1, p2, &intersect))\n  {\n    kmVec2 tmp;\n    float this_distance = kmVec2Length(kmVec2Subtract(&tmp, &intersect, &ray->start));\n    kmVec2 this_normal;\n    calculate_line_normal(*p1, *p2, *p3, &this_normal);\n    if ((this_distance < distance) && (kmVec2Dot(&this_normal, &ray->dir) < 0.0f))\n    {\n      final_intersect.x = intersect.x;\n      final_intersect.y = intersect.y;\n      distance = this_distance;\n      kmVec2Assign(&normal, &this_normal);\n      intersected = 1;\n    }\n  }\n  if (kmRay2IntersectLineSegment(ray, p2, p3, &intersect))\n  {\n    kmVec2 tmp;\n    float this_distance = kmVec2Length(kmVec2Subtract(&tmp, &intersect, &ray->start));\n    kmVec2 this_normal;\n    calculate_line_normal(*p2, *p3, *p1, &this_normal);\n    if ((this_distance < distance) && (kmVec2Dot(&this_normal, &ray->dir) < 0.0f))\n    {\n      final_intersect.x = intersect.x;\n      final_intersect.y = intersect.y;\n      distance = this_distance;\n      kmVec2Assign(&normal, &this_normal);\n      intersected = 1;\n    }\n  }\n  if (kmRay2IntersectLineSegment(ray, p3, p1, &intersect))\n  {\n    kmVec2 tmp;\n    float this_distance = kmVec2Length(kmVec2Subtract(&tmp, &intersect, &ray->start));\n    kmVec2 this_normal;\n    calculate_line_normal(*p3, *p1, *p2, &this_normal);\n    if ((this_distance < distance) && (kmVec2Dot(&this_normal, &ray->dir) < 0.0f))\n    {\n      final_intersect.x = intersect.x;\n      final_intersect.y = intersect.y;\n      distance = this_distance;\n      kmVec2Assign(&normal, &this_normal);\n      intersected = 1;\n    }\n  }\n  if (intersected)\n  {\n    intersection->x = final_intersect.x;\n    intersection->y = final_intersect.y;\n    if (normal_out)\n    {\n      normal_out->x = normal.x;\n      normal_out->y = normal.y;\n    }\n    if (distance)\n    {\n      *distance_out = distance;\n    }\n  }\n  return intersected;\n}\n\n",
            "calle": [
                "calculate_line_normal",
                "kmRay2IntersectLineSegment",
                "kmVec2Assign",
                "kmVec2Dot",
                "kmVec2Length",
                "kmVec2Subtract"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ray",
                        "type": "const kmRay2 *",
                        "definition": [
                            "const kmRay2 *ray"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p1",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *p1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p2",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *p2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p3",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *p3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "intersection",
                        "type": "kmVec2 *",
                        "definition": [
                            "kmVec2 *intersection"
                        ]
                    },
                    {
                        "path": null,
                        "name": "normal_out",
                        "type": "kmVec2 *",
                        "definition": [
                            "kmVec2 *normal_out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "distance_out",
                        "type": "float *",
                        "definition": [
                            "float *distance_out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "intersect",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 intersect"
                        ]
                    },
                    {
                        "path": null,
                        "name": "final_intersect",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 final_intersect"
                        ]
                    },
                    {
                        "path": null,
                        "name": "normal",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 normal"
                        ]
                    },
                    {
                        "path": null,
                        "name": "distance",
                        "type": "float",
                        "definition": [
                            "float distance = 10000.0f"
                        ]
                    },
                    {
                        "path": null,
                        "name": "intersected",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char intersected = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 tmp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "this_distance",
                        "type": "float",
                        "definition": [
                            "float this_distance = kmVec2Length(kmVec2Subtract(&tmp, &intersect, &ray->start))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "this_normal",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 this_normal"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmRay2IntersectBox",
            "header": "unsigned char kmRay2IntersectBox(const kmRay2 *ray, const kmVec2 *p1, const kmVec2 *p2, const kmVec2 *p3, const kmVec2 *p4, kmVec2 *intersection, kmVec2 *normal_out)",
            "params": [
                "const kmRay2 *ray",
                "const kmVec2 *p1",
                "const kmVec2 *p2",
                "const kmVec2 *p3",
                "const kmVec2 *p4",
                "kmVec2 *intersection",
                "kmVec2 *normal_out"
            ],
            "definition": "unsigned char kmRay2IntersectBox(const kmRay2 *ray, const kmVec2 *p1, const kmVec2 *p2, const kmVec2 *p3, const kmVec2 *p4, kmVec2 *intersection, kmVec2 *normal_out)\n{\n  unsigned char intersected = 0;\n  kmVec2 intersect;\n  kmVec2 final_intersect;\n  kmVec2 normal;\n  float distance = 10000.0f;\n  const kmVec2 *points[4];\n  points[0] = p1;\n  points[1] = p2;\n  points[2] = p3;\n  points[3] = p4;\n  unsigned int i = 0;\n  for (; i < 4; i += 1)\n  {\n    helper_kmRay2IntersectBox_1(&intersected, &distance, ray, intersect, final_intersect, normal, points, i);\n  }\n\n  if (intersected)\n  {\n    intersection->x = final_intersect.x;\n    intersection->y = final_intersect.y;\n    if (normal_out)\n    {\n      normal_out->x = normal.x;\n      normal_out->y = normal.y;\n    }\n  }\n  return intersected;\n}\n\n",
            "calle": [
                "helper_kmRay2IntersectBox_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ray",
                        "type": "const kmRay2 *",
                        "definition": [
                            "const kmRay2 *ray"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p1",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *p1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p2",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *p2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p3",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *p3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p4",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *p4"
                        ]
                    },
                    {
                        "path": null,
                        "name": "intersection",
                        "type": "kmVec2 *",
                        "definition": [
                            "kmVec2 *intersection"
                        ]
                    },
                    {
                        "path": null,
                        "name": "normal_out",
                        "type": "kmVec2 *",
                        "definition": [
                            "kmVec2 *normal_out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "intersected",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char intersected = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "intersect",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 intersect"
                        ]
                    },
                    {
                        "path": null,
                        "name": "final_intersect",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 final_intersect"
                        ]
                    },
                    {
                        "path": null,
                        "name": "normal",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 normal"
                        ]
                    },
                    {
                        "path": null,
                        "name": "distance",
                        "type": "float",
                        "definition": [
                            "float distance = 10000.0f"
                        ]
                    },
                    {
                        "path": null,
                        "name": "points",
                        "type": "const kmVec2 *[4]",
                        "definition": [
                            "const kmVec2 *points[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int i = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmRay2IntersectCircle",
            "header": "unsigned char kmRay2IntersectCircle(const kmRay2 *ray, const kmVec2 centre, const float radius, kmVec2 *intersection)",
            "params": [
                "const kmRay2 *ray",
                "const kmVec2 centre",
                "const float radius",
                "kmVec2 *intersection"
            ],
            "definition": "unsigned char kmRay2IntersectCircle(const kmRay2 *ray, const kmVec2 centre, const float radius, kmVec2 *intersection)\n{\n  assert(0 && \"Not implemented\");\n  return 1;\n}\n\n",
            "calle": [
                "assert"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ray",
                        "type": "const kmRay2 *",
                        "definition": [
                            "const kmRay2 *ray"
                        ]
                    },
                    {
                        "path": null,
                        "name": "centre",
                        "type": "const kmVec2",
                        "definition": [
                            "const kmVec2 centre"
                        ]
                    },
                    {
                        "path": null,
                        "name": "radius",
                        "type": "const float",
                        "definition": [
                            "const float radius"
                        ]
                    },
                    {
                        "path": null,
                        "name": "intersection",
                        "type": "kmVec2 *",
                        "definition": [
                            "kmVec2 *intersection"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "calculate_line_normal",
            "header": "",
            "params": [
                "kmVec2 p1",
                "kmVec2 p2",
                "kmVec2 other_point",
                "kmVec2 *normal_out"
            ],
            "definition": "void calculate_line_normal(kmVec2 p1, kmVec2 p2, kmVec2 other_point, kmVec2 *normal_out)\n{\n  kmVec2 edge;\n  kmVec2 other_edge;\n  kmVec2Subtract(&edge, &p2, &p1);\n  kmVec2Subtract(&other_edge, &other_point, &p1);\n  kmVec2Normalize(&edge, &edge);\n  kmVec2Normalize(&other_edge, &other_edge);\n  kmVec2 n;\n  n.x = edge.y;\n  n.y = -edge.x;\n  float d = kmVec2Dot(&n, &other_edge);\n  if (d > 0.0f)\n  {\n    n.x = -n.x;\n    n.y = -n.y;\n  }\n  normal_out->x = n.x;\n  normal_out->y = n.y;\n  kmVec2Normalize(normal_out, normal_out);\n}\n\n",
            "calle": [
                "kmVec2Dot",
                "kmVec2Normalize",
                "kmVec2Subtract"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p1",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 p1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p2",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 p2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "other_point",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 other_point"
                        ]
                    },
                    {
                        "path": null,
                        "name": "normal_out",
                        "type": "kmVec2 *",
                        "definition": [
                            "kmVec2 *normal_out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "edge",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 edge"
                        ]
                    },
                    {
                        "path": null,
                        "name": "other_edge",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 other_edge"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "float",
                        "definition": [
                            "float d = kmVec2Dot(&n, &other_edge)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_kmRay2IntersectBox_1",
            "header": "",
            "params": [
                "unsigned char * const intersected_ref",
                "float * const distance_ref",
                "const kmRay2 * const ray",
                "kmVec2 intersect",
                "kmVec2 final_intersect",
                "kmVec2 normal",
                "const kmVec2 *points[4]",
                "unsigned int i"
            ],
            "definition": "void helper_kmRay2IntersectBox_1(unsigned char * const intersected_ref, float * const distance_ref, const kmRay2 * const ray, kmVec2 intersect, kmVec2 final_intersect, kmVec2 normal, const kmVec2 *points[4], unsigned int i)\n{\n  unsigned char intersected = *intersected_ref;\n  float distance = *distance_ref;\n  const kmVec2 *this_point = points[i];\n  const kmVec2 *next_point = (i == 3) ? (points[0]) : (points[i + 1]);\n  const kmVec2 *other_point = ((i == 3) || (i == 0)) ? (points[1]) : (points[0]);\n  if (kmRay2IntersectLineSegment(ray, this_point, next_point, &intersect))\n  {\n    kmVec2 tmp;\n    float this_distance = kmVec2Length(kmVec2Subtract(&tmp, &intersect, &ray->start));\n    kmVec2 this_normal;\n    calculate_line_normal(*this_point, *next_point, *other_point, &this_normal);\n    if ((this_distance < distance) && (kmVec2Dot(&this_normal, &ray->dir) < 0.0f))\n    {\n      kmVec2Assign(&final_intersect, &intersect);\n      distance = this_distance;\n      intersected = 1;\n      kmVec2Assign(&normal, &this_normal);\n    }\n  }\n  *intersected_ref = intersected;\n  *distance_ref = distance;\n}\n\n",
            "calle": [
                "calculate_line_normal",
                "kmRay2IntersectLineSegment",
                "kmVec2Assign",
                "kmVec2Dot",
                "kmVec2Length",
                "kmVec2Subtract"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "intersected_ref",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const intersected_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "distance_ref",
                        "type": "float * const",
                        "definition": [
                            "float * const distance_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ray",
                        "type": "const kmRay2 * const",
                        "definition": [
                            "const kmRay2 * const ray"
                        ]
                    },
                    {
                        "path": null,
                        "name": "intersect",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 intersect"
                        ]
                    },
                    {
                        "path": null,
                        "name": "final_intersect",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 final_intersect"
                        ]
                    },
                    {
                        "path": null,
                        "name": "normal",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 normal"
                        ]
                    },
                    {
                        "path": null,
                        "name": "points",
                        "type": "const kmVec2 *[4]",
                        "definition": [
                            "const kmVec2 *points[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "intersected",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char intersected = *intersected_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "distance",
                        "type": "float",
                        "definition": [
                            "float distance = *distance_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "this_point",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *this_point = points[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_point",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *next_point = (i == 3) ? (points[0]) : (points[i + 1])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "other_point",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *other_point = ((i == 3) || (i == 0)) ? (points[1]) : (points[0])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 tmp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "this_distance",
                        "type": "float",
                        "definition": [
                            "float this_distance = kmVec2Length(kmVec2Subtract(&tmp, &intersect, &ray->start))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "this_normal",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 this_normal"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmRay3Fill",
            "header": "kmRay3 *kmRay3Fill(kmRay3 *ray, float px, float py, float pz, float vx, float vy, float vz)",
            "params": [
                "kmRay3 *ray",
                "float px",
                "float py",
                "float pz",
                "float vx",
                "float vy",
                "float vz"
            ],
            "definition": "kmRay3 *kmRay3Fill(kmRay3 *ray, float px, float py, float pz, float vx, float vy, float vz)\n{\n  ray->start.x = px;\n  ray->start.y = py;\n  ray->start.z = pz;\n  ray->dir.x = vx;\n  ray->dir.y = vy;\n  ray->dir.z = vz;\n  return ray;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ray",
                        "type": "kmRay3 *",
                        "definition": [
                            "kmRay3 *ray"
                        ]
                    },
                    {
                        "path": null,
                        "name": "px",
                        "type": "float",
                        "definition": [
                            "float px"
                        ]
                    },
                    {
                        "path": null,
                        "name": "py",
                        "type": "float",
                        "definition": [
                            "float py"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pz",
                        "type": "float",
                        "definition": [
                            "float pz"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vx",
                        "type": "float",
                        "definition": [
                            "float vx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vy",
                        "type": "float",
                        "definition": [
                            "float vy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vz",
                        "type": "float",
                        "definition": [
                            "float vz"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmRay3FromPointAndDirection",
            "header": "kmRay3 *kmRay3FromPointAndDirection(kmRay3 *ray, const kmVec3 *point, const kmVec3 *direction)",
            "params": [
                "kmRay3 *ray",
                "const kmVec3 *point",
                "const kmVec3 *direction"
            ],
            "definition": "kmRay3 *kmRay3FromPointAndDirection(kmRay3 *ray, const kmVec3 *point, const kmVec3 *direction)\n{\n  kmVec3Assign(&ray->start, point);\n  kmVec3Assign(&ray->dir, direction);\n  return ray;\n}\n\n",
            "calle": [
                "kmVec3Assign"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ray",
                        "type": "kmRay3 *",
                        "definition": [
                            "kmRay3 *ray"
                        ]
                    },
                    {
                        "path": null,
                        "name": "point",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *point"
                        ]
                    },
                    {
                        "path": null,
                        "name": "direction",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *direction"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmRay3IntersectPlane",
            "header": "unsigned char kmRay3IntersectPlane(kmVec3 *pOut, const kmRay3 *ray, const struct kmPlane *plane)",
            "params": [
                "kmVec3 *pOut",
                "const kmRay3 *ray",
                "const kmPlane *plane"
            ],
            "definition": "unsigned char kmRay3IntersectPlane(kmVec3 *pOut, const kmRay3 *ray, const kmPlane *plane)\n{\n  float d = ((plane->a * ray->dir.x) + (plane->b * ray->dir.y)) + (plane->c * ray->dir.z);\n  if (d == 0)\n  {\n    return 0;\n  }\n  float t = (-((((plane->a * ray->start.x) + (plane->b * ray->start.y)) + (plane->c * ray->start.z)) + plane->d)) / d;\n  if (t < 0)\n  {\n    return 0;\n  }\n  kmVec3 scaled_dir;\n  kmVec3Scale(&scaled_dir, &ray->dir, t);\n  kmVec3Add(pOut, &ray->start, &scaled_dir);\n  return 1;\n}\n\n",
            "calle": [
                "kmVec3Add",
                "kmVec3Scale"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ray",
                        "type": "const kmRay3 *",
                        "definition": [
                            "const kmRay3 *ray"
                        ]
                    },
                    {
                        "path": null,
                        "name": "plane",
                        "type": "const kmPlane *",
                        "definition": [
                            "const kmPlane *plane"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "float",
                        "definition": [
                            "float d = ((plane->a * ray->dir.x) + (plane->b * ray->dir.y)) + (plane->c * ray->dir.z)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "float",
                        "definition": [
                            "float t = (-((((plane->a * ray->start.x) + (plane->b * ray->start.y)) + (plane->c * ray->start.z)) + plane->d)) / d"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scaled_dir",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 scaled_dir"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmSQR",
            "header": "extern float kmSQR(float s)",
            "params": [
                "float s"
            ],
            "definition": "float kmSQR(float s)\n{\n  return s * s;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "float",
                        "definition": [
                            "float s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmDegreesToRadians",
            "header": "extern float kmDegreesToRadians(float degrees)",
            "params": [
                "float degrees"
            ],
            "definition": "float kmDegreesToRadians(float degrees)\n{\n  return degrees * (3.14159265358979323846f / 180.0f);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "degrees",
                        "type": "float",
                        "definition": [
                            "float degrees"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmRadiansToDegrees",
            "header": "extern float kmRadiansToDegrees(float radians)",
            "params": [
                "float radians"
            ],
            "definition": "float kmRadiansToDegrees(float radians)\n{\n  return radians * (180.0 / 3.14159265358979323846f);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "radians",
                        "type": "float",
                        "definition": [
                            "float radians"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMin",
            "header": "extern float kmMin(float lhs, float rhs)",
            "params": [
                "float lhs",
                "float rhs"
            ],
            "definition": "float kmMin(float lhs, float rhs)\n{\n  return (lhs < rhs) ? (lhs) : (rhs);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lhs",
                        "type": "float",
                        "definition": [
                            "float lhs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rhs",
                        "type": "float",
                        "definition": [
                            "float rhs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmMax",
            "header": "extern float kmMax(float lhs, float rhs)",
            "params": [
                "float lhs",
                "float rhs"
            ],
            "definition": "float kmMax(float lhs, float rhs)\n{\n  return (lhs > rhs) ? (lhs) : (rhs);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lhs",
                        "type": "float",
                        "definition": [
                            "float lhs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rhs",
                        "type": "float",
                        "definition": [
                            "float rhs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmAlmostEqual",
            "header": "extern unsigned char kmAlmostEqual(float lhs, float rhs)",
            "params": [
                "float lhs",
                "float rhs"
            ],
            "definition": "unsigned char kmAlmostEqual(float lhs, float rhs)\n{\n  return ((lhs + 0.0001) > rhs) && ((lhs - 0.0001) < rhs);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lhs",
                        "type": "float",
                        "definition": [
                            "float lhs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rhs",
                        "type": "float",
                        "definition": [
                            "float rhs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmClamp",
            "header": "extern float kmClamp(float x, float min, float max)",
            "params": [
                "float x",
                "float min",
                "float max"
            ],
            "definition": "float kmClamp(float x, float min, float max)\n{\n  return (x < min) ? (min) : ((x > max) ? (max) : (x));\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "x",
                        "type": "float",
                        "definition": [
                            "float x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min",
                        "type": "float",
                        "definition": [
                            "float min"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "float",
                        "definition": [
                            "float max"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmLerp",
            "header": "extern float kmLerp(float x, float y, float factor)",
            "params": [
                "float x",
                "float y",
                "float t"
            ],
            "definition": "float kmLerp(float x, float y, float t)\n{\n  return x + (t * (y - x));\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "x",
                        "type": "float",
                        "definition": [
                            "float x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "float",
                        "definition": [
                            "float y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "float",
                        "definition": [
                            "float t"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec2Fill",
            "header": "kmVec2 *kmVec2Fill(kmVec2 *pOut, float x, float y)",
            "params": [
                "kmVec2 *pOut",
                "float x",
                "float y"
            ],
            "definition": "kmVec2 *kmVec2Fill(kmVec2 *pOut, float x, float y)\n{\n  pOut->x = x;\n  pOut->y = y;\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec2 *",
                        "definition": [
                            "kmVec2 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "float",
                        "definition": [
                            "float x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "float",
                        "definition": [
                            "float y"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec2Length",
            "header": "float kmVec2Length(const kmVec2 *pIn)",
            "params": [
                "const kmVec2 *pIn"
            ],
            "definition": "float kmVec2Length(const kmVec2 *pIn)\n{\n  return sqrtf(kmSQR(pIn->x) + kmSQR(pIn->y));\n}\n\n",
            "calle": [
                "kmSQR",
                "sqrtf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *pIn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec2LengthSq",
            "header": "float kmVec2LengthSq(const kmVec2 *pIn)",
            "params": [
                "const kmVec2 *pIn"
            ],
            "definition": "float kmVec2LengthSq(const kmVec2 *pIn)\n{\n  return kmSQR(pIn->x) + kmSQR(pIn->y);\n}\n\n",
            "calle": [
                "kmSQR"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *pIn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec2Normalize",
            "header": "kmVec2 *kmVec2Normalize(kmVec2 *pOut, const kmVec2 *pIn)",
            "params": [
                "kmVec2 *pOut",
                "const kmVec2 *pIn"
            ],
            "definition": "kmVec2 *kmVec2Normalize(kmVec2 *pOut, const kmVec2 *pIn)\n{\n  if ((!pIn->x) && (!pIn->y))\n  {\n    return kmVec2Assign(pOut, pIn);\n  }\n  float l = 1.0f / kmVec2Length(pIn);\n  kmVec2 v;\n  v.x = pIn->x * l;\n  v.y = pIn->y * l;\n  pOut->x = v.x;\n  pOut->y = v.y;\n  return pOut;\n}\n\n",
            "calle": [
                "kmVec2Assign",
                "kmVec2Length"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec2 *",
                        "definition": [
                            "kmVec2 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "l",
                        "type": "float",
                        "definition": [
                            "float l = 1.0f / kmVec2Length(pIn)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec2Lerp",
            "header": "kmVec2 *kmVec2Lerp(kmVec2 *pOut, const kmVec2 *pV1, const kmVec2 *pV2, float t)",
            "params": [
                "kmVec2 *pOut",
                "const kmVec2 *pV1",
                "const kmVec2 *pV2",
                "float t"
            ],
            "definition": "kmVec2 *kmVec2Lerp(kmVec2 *pOut, const kmVec2 *pV1, const kmVec2 *pV2, float t)\n{\n  pOut->x = pV1->x + (t * (pV2->x - pV1->x));\n  pOut->y = pV1->y + (t * (pV2->y - pV1->y));\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec2 *",
                        "definition": [
                            "kmVec2 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV1",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *pV1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV2",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *pV2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "float",
                        "definition": [
                            "float t"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec2Add",
            "header": "kmVec2 *kmVec2Add(kmVec2 *pOut, const kmVec2 *pV1, const kmVec2 *pV2)",
            "params": [
                "kmVec2 *pOut",
                "const kmVec2 *pV1",
                "const kmVec2 *pV2"
            ],
            "definition": "kmVec2 *kmVec2Add(kmVec2 *pOut, const kmVec2 *pV1, const kmVec2 *pV2)\n{\n  pOut->x = pV1->x + pV2->x;\n  pOut->y = pV1->y + pV2->y;\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec2 *",
                        "definition": [
                            "kmVec2 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV1",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *pV1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV2",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *pV2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec2Dot",
            "header": "float kmVec2Dot(const kmVec2 *pV1, const kmVec2 *pV2)",
            "params": [
                "const kmVec2 *pV1",
                "const kmVec2 *pV2"
            ],
            "definition": "float kmVec2Dot(const kmVec2 *pV1, const kmVec2 *pV2)\n{\n  return (pV1->x * pV2->x) + (pV1->y * pV2->y);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pV1",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *pV1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV2",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *pV2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec2Cross",
            "header": "float kmVec2Cross(const kmVec2 *pV1, const kmVec2 *pV2)",
            "params": [
                "const kmVec2 *pV1",
                "const kmVec2 *pV2"
            ],
            "definition": "float kmVec2Cross(const kmVec2 *pV1, const kmVec2 *pV2)\n{\n  return (pV1->x * pV2->y) - (pV1->y * pV2->x);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pV1",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *pV1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV2",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *pV2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec2Subtract",
            "header": "kmVec2 *kmVec2Subtract(kmVec2 *pOut, const kmVec2 *pV1, const kmVec2 *pV2)",
            "params": [
                "kmVec2 *pOut",
                "const kmVec2 *pV1",
                "const kmVec2 *pV2"
            ],
            "definition": "kmVec2 *kmVec2Subtract(kmVec2 *pOut, const kmVec2 *pV1, const kmVec2 *pV2)\n{\n  pOut->x = pV1->x - pV2->x;\n  pOut->y = pV1->y - pV2->y;\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec2 *",
                        "definition": [
                            "kmVec2 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV1",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *pV1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV2",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *pV2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec2Mul",
            "header": "kmVec2 *kmVec2Mul(kmVec2 *pOut, const kmVec2 *pV1, const kmVec2 *pV2)",
            "params": [
                "kmVec2 *pOut",
                "const kmVec2 *pV1",
                "const kmVec2 *pV2"
            ],
            "definition": "kmVec2 *kmVec2Mul(kmVec2 *pOut, const kmVec2 *pV1, const kmVec2 *pV2)\n{\n  pOut->x = pV1->x * pV2->x;\n  pOut->y = pV1->y * pV2->y;\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec2 *",
                        "definition": [
                            "kmVec2 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV1",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *pV1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV2",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *pV2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec2Div",
            "header": "kmVec2 *kmVec2Div(kmVec2 *pOut, const kmVec2 *pV1, const kmVec2 *pV2)",
            "params": [
                "kmVec2 *pOut",
                "const kmVec2 *pV1",
                "const kmVec2 *pV2"
            ],
            "definition": "kmVec2 *kmVec2Div(kmVec2 *pOut, const kmVec2 *pV1, const kmVec2 *pV2)\n{\n  if (pV2->x && pV2->y)\n  {\n    pOut->x = pV1->x / pV2->x;\n    pOut->y = pV1->y / pV2->y;\n  }\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec2 *",
                        "definition": [
                            "kmVec2 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV1",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *pV1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV2",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *pV2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec2Transform",
            "header": "kmVec2 *kmVec2Transform(kmVec2 *pOut, const kmVec2 *pV1, const struct kmMat3 *pM)",
            "params": [
                "kmVec2 *pOut",
                "const kmVec2 *pV",
                "const kmMat3 *pM"
            ],
            "definition": "kmVec2 *kmVec2Transform(kmVec2 *pOut, const kmVec2 *pV, const kmMat3 *pM)\n{\n  kmVec2 v;\n  v.x = ((pV->x * pM->mat[0]) + (pV->y * pM->mat[3])) + pM->mat[6];\n  v.y = ((pV->x * pM->mat[1]) + (pV->y * pM->mat[4])) + pM->mat[7];\n  pOut->x = v.x;\n  pOut->y = v.y;\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec2 *",
                        "definition": [
                            "kmVec2 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *pV"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pM",
                        "type": "const kmMat3 *",
                        "definition": [
                            "const kmMat3 *pM"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec2TransformCoord",
            "header": "kmVec2 *kmVec2TransformCoord(kmVec2 *pOut, const kmVec2 *pV, const struct kmMat3 *pM)",
            "params": [
                "kmVec2 *pOut",
                "const kmVec2 *pV",
                "const kmMat3 *pM"
            ],
            "definition": "kmVec2 *kmVec2TransformCoord(kmVec2 *pOut, const kmVec2 *pV, const kmMat3 *pM)\n{\n  assert(0);\n  return 0;\n}\n\n",
            "calle": [
                "assert"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec2 *",
                        "definition": [
                            "kmVec2 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *pV"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pM",
                        "type": "const kmMat3 *",
                        "definition": [
                            "const kmMat3 *pM"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec2Scale",
            "header": "kmVec2 *kmVec2Scale(kmVec2 *pOut, const kmVec2 *pIn, const float s)",
            "params": [
                "kmVec2 *pOut",
                "const kmVec2 *pIn",
                "const float s"
            ],
            "definition": "kmVec2 *kmVec2Scale(kmVec2 *pOut, const kmVec2 *pIn, const float s)\n{\n  pOut->x = pIn->x * s;\n  pOut->y = pIn->y * s;\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec2 *",
                        "definition": [
                            "kmVec2 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "const float",
                        "definition": [
                            "const float s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec2AreEqual",
            "header": "int kmVec2AreEqual(const kmVec2 *p1, const kmVec2 *p2)",
            "params": [
                "const kmVec2 *p1",
                "const kmVec2 *p2"
            ],
            "definition": "int kmVec2AreEqual(const kmVec2 *p1, const kmVec2 *p2)\n{\n  return ((p1->x < (p2->x + 0.0001)) && (p1->x > (p2->x - 0.0001))) && ((p1->y < (p2->y + 0.0001)) && (p1->y > (p2->y - 0.0001)));\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p1",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *p1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p2",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *p2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec2Assign",
            "header": "kmVec2 *kmVec2Assign(kmVec2 *pOut, const kmVec2 *pIn)",
            "params": [
                "kmVec2 *pOut",
                "const kmVec2 *pIn"
            ],
            "definition": "kmVec2 *kmVec2Assign(kmVec2 *pOut, const kmVec2 *pIn)\n{\n  if (pOut == pIn)\n  {\n    return pOut;\n  }\n  pOut->x = pIn->x;\n  pOut->y = pIn->y;\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec2 *",
                        "definition": [
                            "kmVec2 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *pIn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec2RotateBy",
            "header": "kmVec2 *kmVec2RotateBy(kmVec2 *pOut, const kmVec2 *pIn, const float degrees, const kmVec2 *center)",
            "params": [
                "kmVec2 *pOut",
                "const kmVec2 *pIn",
                "const float degrees",
                "const kmVec2 *center"
            ],
            "definition": "kmVec2 *kmVec2RotateBy(kmVec2 *pOut, const kmVec2 *pIn, const float degrees, const kmVec2 *center)\n{\n  float x;\n  float y;\n  const float radians = kmDegreesToRadians(degrees);\n  const float cs = cosf(radians);\n  const float sn = sinf(radians);\n  pOut->x = pIn->x - center->x;\n  pOut->y = pIn->y - center->y;\n  x = (pOut->x * cs) - (pOut->y * sn);\n  y = (pOut->x * sn) + (pOut->y * cs);\n  pOut->x = x + center->x;\n  pOut->y = y + center->y;\n  return pOut;\n}\n\n",
            "calle": [
                "cosf",
                "kmDegreesToRadians",
                "sinf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec2 *",
                        "definition": [
                            "kmVec2 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "degrees",
                        "type": "const float",
                        "definition": [
                            "const float degrees"
                        ]
                    },
                    {
                        "path": null,
                        "name": "center",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *center"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "float",
                        "definition": [
                            "float x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "float",
                        "definition": [
                            "float y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "radians",
                        "type": "const float",
                        "definition": [
                            "const float radians = kmDegreesToRadians(degrees)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cs",
                        "type": "const float",
                        "definition": [
                            "const float cs = cosf(radians)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sn",
                        "type": "const float",
                        "definition": [
                            "const float sn = sinf(radians)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec2DegreesBetween",
            "header": "float kmVec2DegreesBetween(const kmVec2 *v1, const kmVec2 *v2)",
            "params": [
                "const kmVec2 *v1",
                "const kmVec2 *v2"
            ],
            "definition": "float kmVec2DegreesBetween(const kmVec2 *v1, const kmVec2 *v2)\n{\n  if (kmVec2AreEqual(v1, v2))\n  {\n    return 0.0;\n  }\n  kmVec2 t1;\n  kmVec2 t2;\n  kmVec2Normalize(&t1, v1);\n  kmVec2Normalize(&t2, v2);\n  float cross = kmVec2Cross(&t1, &t2);\n  float dot = kmVec2Dot(&t1, &t2);\n  if (dot > 1.0)\n  {\n    dot = 1.0;\n  }\n  if (dot < (-1.0))\n  {\n    dot = -1.0;\n  }\n  return kmRadiansToDegrees(atan2(cross, dot));\n}\n\n",
            "calle": [
                "atan2",
                "kmRadiansToDegrees",
                "kmVec2AreEqual",
                "kmVec2Cross",
                "kmVec2Dot",
                "kmVec2Normalize"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "v1",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *v1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *v2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t1",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 t1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t2",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 t2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cross",
                        "type": "float",
                        "definition": [
                            "float cross = kmVec2Cross(&t1, &t2)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dot",
                        "type": "float",
                        "definition": [
                            "float dot = kmVec2Dot(&t1, &t2)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec2DistanceBetween",
            "header": "float kmVec2DistanceBetween(const kmVec2 *v1, const kmVec2 *v2)",
            "params": [
                "const kmVec2 *v1",
                "const kmVec2 *v2"
            ],
            "definition": "float kmVec2DistanceBetween(const kmVec2 *v1, const kmVec2 *v2)\n{\n  kmVec2 diff;\n  kmVec2Subtract(&diff, v2, v1);\n  return fabs(kmVec2Length(&diff));\n}\n\n",
            "calle": [
                "fabs",
                "kmVec2Length",
                "kmVec2Subtract"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "v1",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *v1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *v2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 diff"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec2MidPointBetween",
            "header": "kmVec2 *kmVec2MidPointBetween(kmVec2 *pOut, const kmVec2 *v1, const kmVec2 *v2)",
            "params": [
                "kmVec2 *pOut",
                "const kmVec2 *v1",
                "const kmVec2 *v2"
            ],
            "definition": "kmVec2 *kmVec2MidPointBetween(kmVec2 *pOut, const kmVec2 *v1, const kmVec2 *v2)\n{\n  kmVec2 sum;\n  kmVec2Add(&sum, v1, v2);\n  pOut->x = sum.x / 2.0f;\n  pOut->y = sum.y / 2.0f;\n  return pOut;\n}\n\n",
            "calle": [
                "kmVec2Add"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec2 *",
                        "definition": [
                            "kmVec2 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *v1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *v2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 sum"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec2Reflect",
            "header": "kmVec2 *kmVec2Reflect(kmVec2 *pOut, const kmVec2 *pIn, const kmVec2 *normal)",
            "params": [
                "kmVec2 *pOut",
                "const kmVec2 *pIn",
                "const kmVec2 *normal"
            ],
            "definition": "kmVec2 *kmVec2Reflect(kmVec2 *pOut, const kmVec2 *pIn, const kmVec2 *normal)\n{\n  kmVec2 tmp;\n  kmVec2Scale(&tmp, normal, 2.0f * kmVec2Dot(pIn, normal));\n  kmVec2Subtract(pOut, pIn, &tmp);\n  return pOut;\n}\n\n",
            "calle": [
                "kmVec2Dot",
                "kmVec2Scale",
                "kmVec2Subtract"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec2 *",
                        "definition": [
                            "kmVec2 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "normal",
                        "type": "const kmVec2 *",
                        "definition": [
                            "const kmVec2 *normal"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "kmVec2",
                        "definition": [
                            "kmVec2 tmp"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec3Fill",
            "header": "kmVec3 *kmVec3Fill(kmVec3 *pOut, float x, float y, float z)",
            "params": [
                "kmVec3 *pOut",
                "float x",
                "float y",
                "float z"
            ],
            "definition": "kmVec3 *kmVec3Fill(kmVec3 *pOut, float x, float y, float z)\n{\n  pOut->x = x;\n  pOut->y = y;\n  pOut->z = z;\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "float",
                        "definition": [
                            "float x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "float",
                        "definition": [
                            "float y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z",
                        "type": "float",
                        "definition": [
                            "float z"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec3Length",
            "header": "float kmVec3Length(const kmVec3 *pIn)",
            "params": [
                "const kmVec3 *pIn"
            ],
            "definition": "float kmVec3Length(const kmVec3 *pIn)\n{\n  return sqrtf((kmSQR(pIn->x) + kmSQR(pIn->y)) + kmSQR(pIn->z));\n}\n\n",
            "calle": [
                "kmSQR",
                "sqrtf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pIn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec3LengthSq",
            "header": "float kmVec3LengthSq(const kmVec3 *pIn)",
            "params": [
                "const kmVec3 *pIn"
            ],
            "definition": "float kmVec3LengthSq(const kmVec3 *pIn)\n{\n  return (kmSQR(pIn->x) + kmSQR(pIn->y)) + kmSQR(pIn->z);\n}\n\n",
            "calle": [
                "kmSQR"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pIn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec3Lerp",
            "header": "kmVec3 *kmVec3Lerp(kmVec3 *pOut, const kmVec3 *pV1, const kmVec3 *pV2, float t)",
            "params": [
                "kmVec3 *pOut",
                "const kmVec3 *pV1",
                "const kmVec3 *pV2",
                "float t"
            ],
            "definition": "kmVec3 *kmVec3Lerp(kmVec3 *pOut, const kmVec3 *pV1, const kmVec3 *pV2, float t)\n{\n  pOut->x = pV1->x + (t * (pV2->x - pV1->x));\n  pOut->y = pV1->y + (t * (pV2->y - pV1->y));\n  pOut->z = pV1->z + (t * (pV2->z - pV1->z));\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV1",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pV1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV2",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pV2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "float",
                        "definition": [
                            "float t"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec3Normalize",
            "header": "kmVec3 *kmVec3Normalize(kmVec3 *pOut, const kmVec3 *pIn)",
            "params": [
                "kmVec3 *pOut",
                "const kmVec3 *pIn"
            ],
            "definition": "kmVec3 *kmVec3Normalize(kmVec3 *pOut, const kmVec3 *pIn)\n{\n  if (((!pIn->x) && (!pIn->y)) && (!pIn->z))\n  {\n    return kmVec3Assign(pOut, pIn);\n  }\n  float l = 1.0f / kmVec3Length(pIn);\n  kmVec3 v;\n  v.x = pIn->x * l;\n  v.y = pIn->y * l;\n  v.z = pIn->z * l;\n  pOut->x = v.x;\n  pOut->y = v.y;\n  pOut->z = v.z;\n  return pOut;\n}\n\n",
            "calle": [
                "kmVec3Assign",
                "kmVec3Length"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "l",
                        "type": "float",
                        "definition": [
                            "float l = 1.0f / kmVec3Length(pIn)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec3Cross",
            "header": "kmVec3 *kmVec3Cross(kmVec3 *pOut, const kmVec3 *pV1, const kmVec3 *pV2)",
            "params": [
                "kmVec3 *pOut",
                "const kmVec3 *pV1",
                "const kmVec3 *pV2"
            ],
            "definition": "kmVec3 *kmVec3Cross(kmVec3 *pOut, const kmVec3 *pV1, const kmVec3 *pV2)\n{\n  kmVec3 v;\n  v.x = (pV1->y * pV2->z) - (pV1->z * pV2->y);\n  v.y = (pV1->z * pV2->x) - (pV1->x * pV2->z);\n  v.z = (pV1->x * pV2->y) - (pV1->y * pV2->x);\n  pOut->x = v.x;\n  pOut->y = v.y;\n  pOut->z = v.z;\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV1",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pV1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV2",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pV2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec3Dot",
            "header": "float kmVec3Dot(const kmVec3 *pV1, const kmVec3 *pV2)",
            "params": [
                "const kmVec3 *pV1",
                "const kmVec3 *pV2"
            ],
            "definition": "float kmVec3Dot(const kmVec3 *pV1, const kmVec3 *pV2)\n{\n  return ((pV1->x * pV2->x) + (pV1->y * pV2->y)) + (pV1->z * pV2->z);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pV1",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pV1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV2",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pV2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec3Add",
            "header": "kmVec3 *kmVec3Add(kmVec3 *pOut, const kmVec3 *pV1, const kmVec3 *pV2)",
            "params": [
                "kmVec3 *pOut",
                "const kmVec3 *pV1",
                "const kmVec3 *pV2"
            ],
            "definition": "kmVec3 *kmVec3Add(kmVec3 *pOut, const kmVec3 *pV1, const kmVec3 *pV2)\n{\n  kmVec3 v;\n  v.x = pV1->x + pV2->x;\n  v.y = pV1->y + pV2->y;\n  v.z = pV1->z + pV2->z;\n  pOut->x = v.x;\n  pOut->y = v.y;\n  pOut->z = v.z;\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV1",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pV1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV2",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pV2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec3Subtract",
            "header": "kmVec3 *kmVec3Subtract(kmVec3 *pOut, const kmVec3 *pV1, const kmVec3 *pV2)",
            "params": [
                "kmVec3 *pOut",
                "const kmVec3 *pV1",
                "const kmVec3 *pV2"
            ],
            "definition": "kmVec3 *kmVec3Subtract(kmVec3 *pOut, const kmVec3 *pV1, const kmVec3 *pV2)\n{\n  kmVec3 v;\n  v.x = pV1->x - pV2->x;\n  v.y = pV1->y - pV2->y;\n  v.z = pV1->z - pV2->z;\n  pOut->x = v.x;\n  pOut->y = v.y;\n  pOut->z = v.z;\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV1",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pV1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV2",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pV2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec3Mul",
            "header": "kmVec3 *kmVec3Mul(kmVec3 *pOut, const kmVec3 *pV1, const kmVec3 *pV2)",
            "params": [
                "kmVec3 *pOut",
                "const kmVec3 *pV1",
                "const kmVec3 *pV2"
            ],
            "definition": "kmVec3 *kmVec3Mul(kmVec3 *pOut, const kmVec3 *pV1, const kmVec3 *pV2)\n{\n  pOut->x = pV1->x * pV2->x;\n  pOut->y = pV1->y * pV2->y;\n  pOut->z = pV1->z * pV2->z;\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV1",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pV1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV2",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pV2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec3Div",
            "header": "kmVec3 *kmVec3Div(kmVec3 *pOut, const kmVec3 *pV1, const kmVec3 *pV2)",
            "params": [
                "kmVec3 *pOut",
                "const kmVec3 *pV1",
                "const kmVec3 *pV2"
            ],
            "definition": "kmVec3 *kmVec3Div(kmVec3 *pOut, const kmVec3 *pV1, const kmVec3 *pV2)\n{\n  if ((pV2->x && pV2->y) && pV2->z)\n  {\n    pOut->x = pV1->x / pV2->x;\n    pOut->y = pV1->y / pV2->y;\n    pOut->z = pV1->z / pV2->z;\n  }\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV1",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pV1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV2",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pV2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec3MultiplyMat3",
            "header": "kmVec3 *kmVec3MultiplyMat3(kmVec3 *pOut, const kmVec3 *pV, const struct kmMat3 *pM)",
            "params": [
                "kmVec3 *pOut",
                "const kmVec3 *pV",
                "const kmMat3 *pM"
            ],
            "definition": "kmVec3 *kmVec3MultiplyMat3(kmVec3 *pOut, const kmVec3 *pV, const kmMat3 *pM)\n{\n  kmVec3 v;\n  v.x = ((pV->x * pM->mat[0]) + (pV->y * pM->mat[3])) + (pV->z * pM->mat[6]);\n  v.y = ((pV->x * pM->mat[1]) + (pV->y * pM->mat[4])) + (pV->z * pM->mat[7]);\n  v.z = ((pV->x * pM->mat[2]) + (pV->y * pM->mat[5])) + (pV->z * pM->mat[8]);\n  pOut->x = v.x;\n  pOut->y = v.y;\n  pOut->z = v.z;\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pV"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pM",
                        "type": "const kmMat3 *",
                        "definition": [
                            "const kmMat3 *pM"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec3MultiplyMat4",
            "header": "kmVec3 *kmVec3MultiplyMat4(kmVec3 *pOut, const kmVec3 *pV, const struct kmMat4 *pM)",
            "params": [
                "kmVec3 *pOut",
                "const kmVec3 *pV",
                "const kmMat4 *pM"
            ],
            "definition": "kmVec3 *kmVec3MultiplyMat4(kmVec3 *pOut, const kmVec3 *pV, const kmMat4 *pM)\n{\n  kmVec3 v;\n  v.x = (((pV->x * pM->mat[0]) + (pV->y * pM->mat[4])) + (pV->z * pM->mat[8])) + pM->mat[12];\n  v.y = (((pV->x * pM->mat[1]) + (pV->y * pM->mat[5])) + (pV->z * pM->mat[9])) + pM->mat[13];\n  v.z = (((pV->x * pM->mat[2]) + (pV->y * pM->mat[6])) + (pV->z * pM->mat[10])) + pM->mat[14];\n  pOut->x = v.x;\n  pOut->y = v.y;\n  pOut->z = v.z;\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pV"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pM",
                        "type": "const kmMat4 *",
                        "definition": [
                            "const kmMat4 *pM"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec3Transform",
            "header": "kmVec3 *kmVec3Transform(kmVec3 *pOut, const kmVec3 *pV1, const struct kmMat4 *pM)",
            "params": [
                "kmVec3 *pOut",
                "const kmVec3 *pV",
                "const kmMat4 *pM"
            ],
            "definition": "kmVec3 *kmVec3Transform(kmVec3 *pOut, const kmVec3 *pV, const kmMat4 *pM)\n{\n  return kmVec3MultiplyMat4(pOut, pV, pM);\n}\n\n",
            "calle": [
                "kmVec3MultiplyMat4"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pV"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pM",
                        "type": "const kmMat4 *",
                        "definition": [
                            "const kmMat4 *pM"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec3TransformNormal",
            "header": "kmVec3 *kmVec3TransformNormal(kmVec3 *pOut, const kmVec3 *pV, const struct kmMat4 *pM)",
            "params": [
                "kmVec3 *pOut",
                "const kmVec3 *pV",
                "const kmMat4 *pM"
            ],
            "definition": "kmVec3 *kmVec3TransformNormal(kmVec3 *pOut, const kmVec3 *pV, const kmMat4 *pM)\n{\n  kmVec3 v;\n  v.x = ((pV->x * pM->mat[0]) + (pV->y * pM->mat[4])) + (pV->z * pM->mat[8]);\n  v.y = ((pV->x * pM->mat[1]) + (pV->y * pM->mat[5])) + (pV->z * pM->mat[9]);\n  v.z = ((pV->x * pM->mat[2]) + (pV->y * pM->mat[6])) + (pV->z * pM->mat[10]);\n  pOut->x = v.x;\n  pOut->y = v.y;\n  pOut->z = v.z;\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pV"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pM",
                        "type": "const kmMat4 *",
                        "definition": [
                            "const kmMat4 *pM"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec3TransformCoord",
            "header": "kmVec3 *kmVec3TransformCoord(kmVec3 *pOut, const kmVec3 *pV, const struct kmMat4 *pM)",
            "params": [
                "kmVec3 *pOut",
                "const kmVec3 *pV",
                "const kmMat4 *pM"
            ],
            "definition": "kmVec3 *kmVec3TransformCoord(kmVec3 *pOut, const kmVec3 *pV, const kmMat4 *pM)\n{\n  kmVec4 v;\n  kmVec4 inV;\n  kmVec4Fill(&inV, pV->x, pV->y, pV->z, 1.0);\n  kmVec4Transform(&v, &inV, pM);\n  pOut->x = v.x / v.w;\n  pOut->y = v.y / v.w;\n  pOut->z = v.z / v.w;\n  return pOut;\n}\n\n",
            "calle": [
                "kmVec4Fill",
                "kmVec4Transform"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pV"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pM",
                        "type": "const kmMat4 *",
                        "definition": [
                            "const kmMat4 *pM"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "kmVec4",
                        "definition": [
                            "kmVec4 v"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inV",
                        "type": "kmVec4",
                        "definition": [
                            "kmVec4 inV"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec3Scale",
            "header": "kmVec3 *kmVec3Scale(kmVec3 *pOut, const kmVec3 *pIn, const float s)",
            "params": [
                "kmVec3 *pOut",
                "const kmVec3 *pIn",
                "const float s"
            ],
            "definition": "kmVec3 *kmVec3Scale(kmVec3 *pOut, const kmVec3 *pIn, const float s)\n{\n  pOut->x = pIn->x * s;\n  pOut->y = pIn->y * s;\n  pOut->z = pIn->z * s;\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "const float",
                        "definition": [
                            "const float s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec3AreEqual",
            "header": "int kmVec3AreEqual(const kmVec3 *p1, const kmVec3 *p2)",
            "params": [
                "const kmVec3 *p1",
                "const kmVec3 *p2"
            ],
            "definition": "int kmVec3AreEqual(const kmVec3 *p1, const kmVec3 *p2)\n{\n  if ((((p1->x < (p2->x + 0.0001)) && (p1->x > (p2->x - 0.0001))) && ((p1->y < (p2->y + 0.0001)) && (p1->y > (p2->y - 0.0001)))) && ((p1->z < (p2->z + 0.0001)) && (p1->z > (p2->z - 0.0001))))\n  {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p1",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *p1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p2",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *p2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec3InverseTransform",
            "header": "kmVec3 *kmVec3InverseTransform(kmVec3 *pOut, const kmVec3 *pV, const struct kmMat4 *pM)",
            "params": [
                "kmVec3 *pOut",
                "const kmVec3 *pVect",
                "const kmMat4 *pM"
            ],
            "definition": "kmVec3 *kmVec3InverseTransform(kmVec3 *pOut, const kmVec3 *pVect, const kmMat4 *pM)\n{\n  kmVec3 v1;\n  kmVec3 v2;\n  v1.x = pVect->x - pM->mat[12];\n  v1.y = pVect->y - pM->mat[13];\n  v1.z = pVect->z - pM->mat[14];\n  v2.x = ((v1.x * pM->mat[0]) + (v1.y * pM->mat[1])) + (v1.z * pM->mat[2]);\n  v2.y = ((v1.x * pM->mat[4]) + (v1.y * pM->mat[5])) + (v1.z * pM->mat[6]);\n  v2.z = ((v1.x * pM->mat[8]) + (v1.y * pM->mat[9])) + (v1.z * pM->mat[10]);\n  pOut->x = v2.x;\n  pOut->y = v2.y;\n  pOut->z = v2.z;\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pVect",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pVect"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pM",
                        "type": "const kmMat4 *",
                        "definition": [
                            "const kmMat4 *pM"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 v1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 v2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec3InverseTransformNormal",
            "header": "kmVec3 *kmVec3InverseTransformNormal(kmVec3 *pOut, const kmVec3 *pVect, const struct kmMat4 *pM)",
            "params": [
                "kmVec3 *pOut",
                "const kmVec3 *pVect",
                "const kmMat4 *pM"
            ],
            "definition": "kmVec3 *kmVec3InverseTransformNormal(kmVec3 *pOut, const kmVec3 *pVect, const kmMat4 *pM)\n{\n  kmVec3 v;\n  v.x = ((pVect->x * pM->mat[0]) + (pVect->y * pM->mat[1])) + (pVect->z * pM->mat[2]);\n  v.y = ((pVect->x * pM->mat[4]) + (pVect->y * pM->mat[5])) + (pVect->z * pM->mat[6]);\n  v.z = ((pVect->x * pM->mat[8]) + (pVect->y * pM->mat[9])) + (pVect->z * pM->mat[10]);\n  pOut->x = v.x;\n  pOut->y = v.y;\n  pOut->z = v.z;\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pVect",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pVect"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pM",
                        "type": "const kmMat4 *",
                        "definition": [
                            "const kmMat4 *pM"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec3Assign",
            "header": "kmVec3 *kmVec3Assign(kmVec3 *pOut, const kmVec3 *pIn)",
            "params": [
                "kmVec3 *pOut",
                "const kmVec3 *pIn"
            ],
            "definition": "kmVec3 *kmVec3Assign(kmVec3 *pOut, const kmVec3 *pIn)\n{\n  if (pOut == pIn)\n  {\n    return pOut;\n  }\n  pOut->x = pIn->x;\n  pOut->y = pIn->y;\n  pOut->z = pIn->z;\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pIn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec3Zero",
            "header": "kmVec3 *kmVec3Zero(kmVec3 *pOut)",
            "params": [
                "kmVec3 *pOut"
            ],
            "definition": "kmVec3 *kmVec3Zero(kmVec3 *pOut)\n{\n  pOut->x = 0.0f;\n  pOut->y = 0.0f;\n  pOut->z = 0.0f;\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec3GetHorizontalAngle",
            "header": "kmVec3 *kmVec3GetHorizontalAngle(kmVec3 *pOut, const kmVec3 *pIn)",
            "params": [
                "kmVec3 *pOut",
                "const kmVec3 *pIn"
            ],
            "definition": "kmVec3 *kmVec3GetHorizontalAngle(kmVec3 *pOut, const kmVec3 *pIn)\n{\n  const float z1 = sqrt((pIn->x * pIn->x) + (pIn->z * pIn->z));\n  pOut->y = kmRadiansToDegrees(atan2(pIn->x, pIn->z));\n  if (pOut->y < 0)\n  {\n    pOut->y += 360;\n  }\n  if (pOut->y >= 360)\n  {\n    pOut->y -= 360;\n  }\n  pOut->x = kmRadiansToDegrees(atan2(z1, pIn->y)) - 90.0;\n  if (pOut->x < 0)\n  {\n    pOut->x += 360;\n  }\n  if (pOut->x >= 360)\n  {\n    pOut->x -= 360;\n  }\n  return pOut;\n}\n\n",
            "calle": [
                "atan2",
                "kmRadiansToDegrees",
                "sqrt"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z1",
                        "type": "const float",
                        "definition": [
                            "const float z1 = sqrt((pIn->x * pIn->x) + (pIn->z * pIn->z))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec3RotationToDirection",
            "header": "kmVec3 *kmVec3RotationToDirection(kmVec3 *pOut, const kmVec3 *pIn, const kmVec3 *forwards)",
            "params": [
                "kmVec3 *pOut",
                "const kmVec3 *pIn",
                "const kmVec3 *forwards"
            ],
            "definition": "kmVec3 *kmVec3RotationToDirection(kmVec3 *pOut, const kmVec3 *pIn, const kmVec3 *forwards)\n{\n  const float xr = kmDegreesToRadians(pIn->x);\n  const float yr = kmDegreesToRadians(pIn->y);\n  const float zr = kmDegreesToRadians(pIn->z);\n  const float cr = cos(xr);\n  const float sr = sin(xr);\n  const float cp = cos(yr);\n  const float sp = sin(yr);\n  const float cy = cos(zr);\n  const float sy = sin(zr);\n  const float srsp = sr * sp;\n  const float crsp = cr * sp;\n  const float pseudoMatrix[] = {cp * cy, cp * sy, -sp, (srsp * cy) - (cr * sy), (srsp * sy) + (cr * cy), sr * cp, (crsp * cy) + (sr * sy), (crsp * sy) - (sr * cy), cr * cp};\n  pOut->x = ((forwards->x * pseudoMatrix[0]) + (forwards->y * pseudoMatrix[3])) + (forwards->z * pseudoMatrix[6]);\n  pOut->y = ((forwards->x * pseudoMatrix[1]) + (forwards->y * pseudoMatrix[4])) + (forwards->z * pseudoMatrix[7]);\n  pOut->z = ((forwards->x * pseudoMatrix[2]) + (forwards->y * pseudoMatrix[5])) + (forwards->z * pseudoMatrix[8]);\n  return pOut;\n}\n\n",
            "calle": [
                "cos",
                "kmDegreesToRadians",
                "sin"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "forwards",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *forwards"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xr",
                        "type": "const float",
                        "definition": [
                            "const float xr = kmDegreesToRadians(pIn->x)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "yr",
                        "type": "const float",
                        "definition": [
                            "const float yr = kmDegreesToRadians(pIn->y)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zr",
                        "type": "const float",
                        "definition": [
                            "const float zr = kmDegreesToRadians(pIn->z)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cr",
                        "type": "const float",
                        "definition": [
                            "const float cr = cos(xr)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sr",
                        "type": "const float",
                        "definition": [
                            "const float sr = sin(xr)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cp",
                        "type": "const float",
                        "definition": [
                            "const float cp = cos(yr)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp",
                        "type": "const float",
                        "definition": [
                            "const float sp = sin(yr)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cy",
                        "type": "const float",
                        "definition": [
                            "const float cy = cos(zr)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sy",
                        "type": "const float",
                        "definition": [
                            "const float sy = sin(zr)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "srsp",
                        "type": "const float",
                        "definition": [
                            "const float srsp = sr * sp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crsp",
                        "type": "const float",
                        "definition": [
                            "const float crsp = cr * sp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pseudoMatrix",
                        "type": "const float []",
                        "definition": [
                            "const float pseudoMatrix[] = {cp * cy, cp * sy, -sp, (srsp * cy) - (cr * sy), (srsp * sy) + (cr * cy), sr * cp, (crsp * cy) + (sr * sy), (crsp * sy) - (sr * cy), cr * cp}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec3ProjectOnToPlane",
            "header": "kmVec3 *kmVec3ProjectOnToPlane(kmVec3 *pOut, const kmVec3 *point, const struct kmPlane *plane)",
            "params": [
                "kmVec3 *pOut",
                "const kmVec3 *point",
                "const struct kmPlane *plane"
            ],
            "definition": "kmVec3 *kmVec3ProjectOnToPlane(kmVec3 *pOut, const kmVec3 *point, const struct kmPlane *plane)\n{\n  kmRay3 ray;\n  kmVec3Assign(&ray.start, point);\n  ray.dir.x = -plane->a;\n  ray.dir.y = -plane->b;\n  ray.dir.z = -plane->c;\n  kmRay3IntersectPlane(pOut, &ray, plane);\n  return pOut;\n}\n\n",
            "calle": [
                "kmRay3IntersectPlane",
                "kmVec3Assign"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "point",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *point"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct kmPlane",
                        "type": "const struct kmPlane *",
                        "definition": [
                            "const struct kmPlane *plane"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ray",
                        "type": "kmRay3",
                        "definition": [
                            "kmRay3 ray"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec3Reflect",
            "header": "kmVec3 *kmVec3Reflect(kmVec3 *pOut, const kmVec3 *pIn, const kmVec3 *normal)",
            "params": [
                "kmVec3 *pOut",
                "const kmVec3 *pIn",
                "const kmVec3 *normal"
            ],
            "definition": "kmVec3 *kmVec3Reflect(kmVec3 *pOut, const kmVec3 *pIn, const kmVec3 *normal)\n{\n  kmVec3 tmp;\n  kmVec3Scale(&tmp, normal, 2.0f * kmVec3Dot(pIn, normal));\n  kmVec3Subtract(pOut, pIn, &tmp);\n  return pOut;\n}\n\n",
            "calle": [
                "kmVec3Dot",
                "kmVec3Scale",
                "kmVec3Subtract"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec3 *",
                        "definition": [
                            "kmVec3 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "normal",
                        "type": "const kmVec3 *",
                        "definition": [
                            "const kmVec3 *normal"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "kmVec3",
                        "definition": [
                            "kmVec3 tmp"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec4Fill",
            "header": "kmVec4 *kmVec4Fill(kmVec4 *pOut, float x, float y, float z, float w)",
            "params": [
                "kmVec4 *pOut",
                "float x",
                "float y",
                "float z",
                "float w"
            ],
            "definition": "kmVec4 *kmVec4Fill(kmVec4 *pOut, float x, float y, float z, float w)\n{\n  pOut->x = x;\n  pOut->y = y;\n  pOut->z = z;\n  pOut->w = w;\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec4 *",
                        "definition": [
                            "kmVec4 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "float",
                        "definition": [
                            "float x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "float",
                        "definition": [
                            "float y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z",
                        "type": "float",
                        "definition": [
                            "float z"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w",
                        "type": "float",
                        "definition": [
                            "float w"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec4Add",
            "header": "kmVec4 *kmVec4Add(kmVec4 *pOut, const kmVec4 *pV1, const kmVec4 *pV2)",
            "params": [
                "kmVec4 *pOut",
                "const kmVec4 *pV1",
                "const kmVec4 *pV2"
            ],
            "definition": "kmVec4 *kmVec4Add(kmVec4 *pOut, const kmVec4 *pV1, const kmVec4 *pV2)\n{\n  pOut->x = pV1->x + pV2->x;\n  pOut->y = pV1->y + pV2->y;\n  pOut->z = pV1->z + pV2->z;\n  pOut->w = pV1->w + pV2->w;\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec4 *",
                        "definition": [
                            "kmVec4 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV1",
                        "type": "const kmVec4 *",
                        "definition": [
                            "const kmVec4 *pV1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV2",
                        "type": "const kmVec4 *",
                        "definition": [
                            "const kmVec4 *pV2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec4Dot",
            "header": "float kmVec4Dot(const kmVec4 *pV1, const kmVec4 *pV2)",
            "params": [
                "const kmVec4 *pV1",
                "const kmVec4 *pV2"
            ],
            "definition": "float kmVec4Dot(const kmVec4 *pV1, const kmVec4 *pV2)\n{\n  return (((pV1->x * pV2->x) + (pV1->y * pV2->y)) + (pV1->z * pV2->z)) + (pV1->w * pV2->w);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pV1",
                        "type": "const kmVec4 *",
                        "definition": [
                            "const kmVec4 *pV1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV2",
                        "type": "const kmVec4 *",
                        "definition": [
                            "const kmVec4 *pV2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec4Length",
            "header": "float kmVec4Length(const kmVec4 *pIn)",
            "params": [
                "const kmVec4 *pIn"
            ],
            "definition": "float kmVec4Length(const kmVec4 *pIn)\n{\n  return sqrtf(((kmSQR(pIn->x) + kmSQR(pIn->y)) + kmSQR(pIn->z)) + kmSQR(pIn->w));\n}\n\n",
            "calle": [
                "kmSQR",
                "sqrtf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmVec4 *",
                        "definition": [
                            "const kmVec4 *pIn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec4LengthSq",
            "header": "float kmVec4LengthSq(const kmVec4 *pIn)",
            "params": [
                "const kmVec4 *pIn"
            ],
            "definition": "float kmVec4LengthSq(const kmVec4 *pIn)\n{\n  return ((kmSQR(pIn->x) + kmSQR(pIn->y)) + kmSQR(pIn->z)) + kmSQR(pIn->w);\n}\n\n",
            "calle": [
                "kmSQR"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmVec4 *",
                        "definition": [
                            "const kmVec4 *pIn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec4Lerp",
            "header": "kmVec4 *kmVec4Lerp(kmVec4 *pOut, const kmVec4 *pV1, const kmVec4 *pV2, float t)",
            "params": [
                "kmVec4 *pOut",
                "const kmVec4 *pV1",
                "const kmVec4 *pV2",
                "float t"
            ],
            "definition": "kmVec4 *kmVec4Lerp(kmVec4 *pOut, const kmVec4 *pV1, const kmVec4 *pV2, float t)\n{\n  pOut->x = pV1->x + (t * (pV2->x - pV1->x));\n  pOut->y = pV1->y + (t * (pV2->y - pV1->y));\n  pOut->z = pV1->z + (t * (pV2->z - pV1->z));\n  pOut->w = pV1->w + (t * (pV2->w - pV1->w));\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec4 *",
                        "definition": [
                            "kmVec4 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV1",
                        "type": "const kmVec4 *",
                        "definition": [
                            "const kmVec4 *pV1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV2",
                        "type": "const kmVec4 *",
                        "definition": [
                            "const kmVec4 *pV2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "float",
                        "definition": [
                            "float t"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec4Normalize",
            "header": "kmVec4 *kmVec4Normalize(kmVec4 *pOut, const kmVec4 *pIn)",
            "params": [
                "kmVec4 *pOut",
                "const kmVec4 *pIn"
            ],
            "definition": "kmVec4 *kmVec4Normalize(kmVec4 *pOut, const kmVec4 *pIn)\n{\n  if ((((!pIn->x) && (!pIn->y)) && (!pIn->z)) && (!pIn->w))\n  {\n    return kmVec4Assign(pOut, pIn);\n  }\n  float l = 1.0f / kmVec4Length(pIn);\n  pOut->x = pIn->x * l;\n  pOut->y = pIn->y * l;\n  pOut->z = pIn->z * l;\n  pOut->w = pIn->w * l;\n  return pOut;\n}\n\n",
            "calle": [
                "kmVec4Assign",
                "kmVec4Length"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec4 *",
                        "definition": [
                            "kmVec4 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmVec4 *",
                        "definition": [
                            "const kmVec4 *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "l",
                        "type": "float",
                        "definition": [
                            "float l = 1.0f / kmVec4Length(pIn)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec4Scale",
            "header": "kmVec4 *kmVec4Scale(kmVec4 *pOut, const kmVec4 *pIn, const float s)",
            "params": [
                "kmVec4 *pOut",
                "const kmVec4 *pIn",
                "const float s"
            ],
            "definition": "kmVec4 *kmVec4Scale(kmVec4 *pOut, const kmVec4 *pIn, const float s)\n{\n  kmVec4Normalize(pOut, pIn);\n  pOut->x *= s;\n  pOut->y *= s;\n  pOut->z *= s;\n  pOut->w *= s;\n  return pOut;\n}\n\n",
            "calle": [
                "kmVec4Normalize"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec4 *",
                        "definition": [
                            "kmVec4 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmVec4 *",
                        "definition": [
                            "const kmVec4 *pIn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "const float",
                        "definition": [
                            "const float s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec4Subtract",
            "header": "kmVec4 *kmVec4Subtract(kmVec4 *pOut, const kmVec4 *pV1, const kmVec4 *pV2)",
            "params": [
                "kmVec4 *pOut",
                "const kmVec4 *pV1",
                "const kmVec4 *pV2"
            ],
            "definition": "kmVec4 *kmVec4Subtract(kmVec4 *pOut, const kmVec4 *pV1, const kmVec4 *pV2)\n{\n  pOut->x = pV1->x - pV2->x;\n  pOut->y = pV1->y - pV2->y;\n  pOut->z = pV1->z - pV2->z;\n  pOut->w = pV1->w - pV2->w;\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec4 *",
                        "definition": [
                            "kmVec4 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV1",
                        "type": "const kmVec4 *",
                        "definition": [
                            "const kmVec4 *pV1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV2",
                        "type": "const kmVec4 *",
                        "definition": [
                            "const kmVec4 *pV2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec4Mul",
            "header": "kmVec4 *kmVec4Mul(kmVec4 *pOut, const kmVec4 *pV1, const kmVec4 *pV2)",
            "params": [
                "kmVec4 *pOut",
                "const kmVec4 *pV1",
                "const kmVec4 *pV2"
            ],
            "definition": "kmVec4 *kmVec4Mul(kmVec4 *pOut, const kmVec4 *pV1, const kmVec4 *pV2)\n{\n  pOut->x = pV1->x * pV2->x;\n  pOut->y = pV1->y * pV2->y;\n  pOut->z = pV1->z * pV2->z;\n  pOut->w = pV1->w * pV2->w;\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec4 *",
                        "definition": [
                            "kmVec4 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV1",
                        "type": "const kmVec4 *",
                        "definition": [
                            "const kmVec4 *pV1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV2",
                        "type": "const kmVec4 *",
                        "definition": [
                            "const kmVec4 *pV2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec4Div",
            "header": "kmVec4 *kmVec4Div(kmVec4 *pOut, const kmVec4 *pV1, const kmVec4 *pV2)",
            "params": [
                "kmVec4 *pOut",
                "const kmVec4 *pV1",
                "const kmVec4 *pV2"
            ],
            "definition": "kmVec4 *kmVec4Div(kmVec4 *pOut, const kmVec4 *pV1, const kmVec4 *pV2)\n{\n  if (((pV2->x && pV2->y) && pV2->z) && pV2->w)\n  {\n    pOut->x = pV1->x / pV2->x;\n    pOut->y = pV1->y / pV2->y;\n    pOut->z = pV1->z / pV2->z;\n    pOut->w = pV1->w / pV2->w;\n  }\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec4 *",
                        "definition": [
                            "kmVec4 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV1",
                        "type": "const kmVec4 *",
                        "definition": [
                            "const kmVec4 *pV1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV2",
                        "type": "const kmVec4 *",
                        "definition": [
                            "const kmVec4 *pV2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec4MultiplyMat4",
            "header": "kmVec4 *kmVec4MultiplyMat4(kmVec4 *pOut, const kmVec4 *pV, const struct kmMat4 *pM)",
            "params": [
                "kmVec4 *pOut",
                "const kmVec4 *pV",
                "const struct kmMat4 *pM"
            ],
            "definition": "kmVec4 *kmVec4MultiplyMat4(kmVec4 *pOut, const kmVec4 *pV, const struct kmMat4 *pM)\n{\n  pOut->x = (((pV->x * pM->mat[0]) + (pV->y * pM->mat[4])) + (pV->z * pM->mat[8])) + (pV->w * pM->mat[12]);\n  pOut->y = (((pV->x * pM->mat[1]) + (pV->y * pM->mat[5])) + (pV->z * pM->mat[9])) + (pV->w * pM->mat[13]);\n  pOut->z = (((pV->x * pM->mat[2]) + (pV->y * pM->mat[6])) + (pV->z * pM->mat[10])) + (pV->w * pM->mat[14]);\n  pOut->w = (((pV->x * pM->mat[3]) + (pV->y * pM->mat[7])) + (pV->z * pM->mat[11])) + (pV->w * pM->mat[15]);\n  return pOut;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec4 *",
                        "definition": [
                            "kmVec4 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV",
                        "type": "const kmVec4 *",
                        "definition": [
                            "const kmVec4 *pV"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct kmMat4",
                        "type": "const struct kmMat4 *",
                        "definition": [
                            "const struct kmMat4 *pM"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec4Transform",
            "header": "kmVec4 *kmVec4Transform(kmVec4 *pOut, const kmVec4 *pV, const struct kmMat4 *pM)",
            "params": [
                "kmVec4 *pOut",
                "const kmVec4 *pV",
                "const kmMat4 *pM"
            ],
            "definition": "kmVec4 *kmVec4Transform(kmVec4 *pOut, const kmVec4 *pV, const kmMat4 *pM)\n{\n  return kmVec4MultiplyMat4(pOut, pV, pM);\n}\n\n",
            "calle": [
                "kmVec4MultiplyMat4"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec4 *",
                        "definition": [
                            "kmVec4 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV",
                        "type": "const kmVec4 *",
                        "definition": [
                            "const kmVec4 *pV"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pM",
                        "type": "const kmMat4 *",
                        "definition": [
                            "const kmMat4 *pM"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec4TransformArray",
            "header": "kmVec4 *kmVec4TransformArray(kmVec4 *pOut, unsigned int outStride, const kmVec4 *pV, unsigned int vStride, const struct kmMat4 *pM, unsigned int count)",
            "params": [
                "kmVec4 *pOut",
                "unsigned int outStride",
                "const kmVec4 *pV",
                "unsigned int vStride",
                "const kmMat4 *pM",
                "unsigned int count"
            ],
            "definition": "kmVec4 *kmVec4TransformArray(kmVec4 *pOut, unsigned int outStride, const kmVec4 *pV, unsigned int vStride, const kmMat4 *pM, unsigned int count)\n{\n  unsigned int i = 0;\n  while (i < count)\n  {\n    const kmVec4 *in = pV + (i * vStride);\n    kmVec4 *out = pOut + (i * outStride);\n    kmVec4Transform(out, in, pM);\n    i += 1;\n  }\n\n  return pOut;\n}\n\n",
            "calle": [
                "kmVec4Transform"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec4 *",
                        "definition": [
                            "kmVec4 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outStride",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int outStride"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pV",
                        "type": "const kmVec4 *",
                        "definition": [
                            "const kmVec4 *pV"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vStride",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int vStride"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pM",
                        "type": "const kmMat4 *",
                        "definition": [
                            "const kmMat4 *pM"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const kmVec4 *",
                        "definition": [
                            "const kmVec4 *in = pV + (i * vStride)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "kmVec4 *",
                        "definition": [
                            "kmVec4 *out = pOut + (i * outStride)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec4AreEqual",
            "header": "int kmVec4AreEqual(const kmVec4 *p1, const kmVec4 *p2)",
            "params": [
                "const kmVec4 *p1",
                "const kmVec4 *p2"
            ],
            "definition": "int kmVec4AreEqual(const kmVec4 *p1, const kmVec4 *p2)\n{\n  return ((((p1->x < (p2->x + 0.0001)) && (p1->x > (p2->x - 0.0001))) && ((p1->y < (p2->y + 0.0001)) && (p1->y > (p2->y - 0.0001)))) && ((p1->z < (p2->z + 0.0001)) && (p1->z > (p2->z - 0.0001)))) && ((p1->w < (p2->w + 0.0001)) && (p1->w > (p2->w - 0.0001)));\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p1",
                        "type": "const kmVec4 *",
                        "definition": [
                            "const kmVec4 *p1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p2",
                        "type": "const kmVec4 *",
                        "definition": [
                            "const kmVec4 *p2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "kmVec4Assign",
            "header": "kmVec4 *kmVec4Assign(kmVec4 *pOut, const kmVec4 *pIn)",
            "params": [
                "kmVec4 *pOut",
                "const kmVec4 *pIn"
            ],
            "definition": "kmVec4 *kmVec4Assign(kmVec4 *pOut, const kmVec4 *pIn)\n{\n  assert(pOut != pIn);\n  memcpy(pOut, pIn, (sizeof(float)) * 4);\n  return pOut;\n}\n\n",
            "calle": [
                "assert",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pOut",
                        "type": "kmVec4 *",
                        "definition": [
                            "kmVec4 *pOut"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pIn",
                        "type": "const kmVec4 *",
                        "definition": [
                            "const kmVec4 *pIn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        }
    ],
    "typedefs": [
        "typedef unsigned int heman_color",
        "typedef unsigned char heman_byte"
    ]
}