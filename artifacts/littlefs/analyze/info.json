{
    "special_type": [
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "enum lfs_error\n{\n  LFS_ERR_OK = 0,\n  LFS_ERR_IO = -5,\n  LFS_ERR_CORRUPT = -84,\n  LFS_ERR_NOENT = -2,\n  LFS_ERR_EXIST = -17,\n  LFS_ERR_NOTDIR = -20,\n  LFS_ERR_ISDIR = -21,\n  LFS_ERR_NOTEMPTY = -39,\n  LFS_ERR_BADF = -9,\n  LFS_ERR_FBIG = -27,\n  LFS_ERR_INVAL = -22,\n  LFS_ERR_NOSPC = -28,\n  LFS_ERR_NOMEM = -12,\n  LFS_ERR_NOATTR = -61,\n  LFS_ERR_NAMETOOLONG = -36\n}",
            "name": "lfs_error",
            "names": []
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "enum lfs_type\n{\n  LFS_TYPE_REG = 0x001,\n  LFS_TYPE_DIR = 0x002,\n  LFS_TYPE_SPLICE = 0x400,\n  LFS_TYPE_NAME = 0x000,\n  LFS_TYPE_STRUCT = 0x200,\n  LFS_TYPE_USERATTR = 0x300,\n  LFS_TYPE_FROM = 0x100,\n  LFS_TYPE_TAIL = 0x600,\n  LFS_TYPE_GLOBALS = 0x700,\n  LFS_TYPE_CRC = 0x500,\n  LFS_TYPE_CREATE = 0x401,\n  LFS_TYPE_DELETE = 0x4ff,\n  LFS_TYPE_SUPERBLOCK = 0x0ff,\n  LFS_TYPE_DIRSTRUCT = 0x200,\n  LFS_TYPE_CTZSTRUCT = 0x202,\n  LFS_TYPE_INLINESTRUCT = 0x201,\n  LFS_TYPE_SOFTTAIL = 0x600,\n  LFS_TYPE_HARDTAIL = 0x601,\n  LFS_TYPE_MOVESTATE = 0x7ff,\n  LFS_TYPE_CCRC = 0x500,\n  LFS_TYPE_FCRC = 0x5ff,\n  LFS_FROM_NOOP = 0x000,\n  LFS_FROM_MOVE = 0x101,\n  LFS_FROM_USERATTRS = 0x102\n}",
            "name": "lfs_type",
            "names": []
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "enum lfs_open_flags\n{\n  LFS_O_RDONLY = 1,\n  LFS_O_WRONLY = 2,\n  LFS_O_RDWR = 3,\n  LFS_O_CREAT = 0x0100,\n  LFS_O_EXCL = 0x0200,\n  LFS_O_TRUNC = 0x0400,\n  LFS_O_APPEND = 0x0800,\n  LFS_F_DIRTY = 0x010000,\n  LFS_F_WRITING = 0x020000,\n  LFS_F_READING = 0x040000,\n  LFS_F_ERRED = 0x080000,\n  LFS_F_INLINE = 0x100000\n}",
            "name": "lfs_open_flags",
            "names": []
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "enum lfs_whence_flags\n{\n  LFS_SEEK_SET = 0,\n  LFS_SEEK_CUR = 1,\n  LFS_SEEK_END = 2\n}",
            "name": "lfs_whence_flags",
            "names": []
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct lfs_config\n{\n  void *context;\n  int (*read)(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size);\n  int (*prog)(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size);\n  int (*erase)(const struct lfs_config *c, lfs_block_t block);\n  int (*sync)(const struct lfs_config *c);\n  lfs_size_t read_size;\n  lfs_size_t prog_size;\n  lfs_size_t block_size;\n  lfs_size_t block_count;\n  int32_t block_cycles;\n  lfs_size_t cache_size;\n  lfs_size_t lookahead_size;\n  lfs_size_t compact_thresh;\n  void *read_buffer;\n  void *prog_buffer;\n  void *lookahead_buffer;\n  lfs_size_t name_max;\n  lfs_size_t file_max;\n  lfs_size_t attr_max;\n  lfs_size_t metadata_max;\n  lfs_size_t inline_max;\n}",
            "name": "lfs_config",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "context",
                        "type": "void *",
                        "definition": [
                            "void *context"
                        ]
                    },
                    {
                        "path": null,
                        "name": "read",
                        "type": "int (*)(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size)",
                        "definition": [
                            "int (*read)(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prog",
                        "type": "int (*)(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size)",
                        "definition": [
                            "int (*prog)(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "erase",
                        "type": "int (*)(const struct lfs_config *c, lfs_block_t block)",
                        "definition": [
                            "int (*erase)(const struct lfs_config *c, lfs_block_t block)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sync",
                        "type": "int (*)(const struct lfs_config *c)",
                        "definition": [
                            "int (*sync)(const struct lfs_config *c)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "read_size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t read_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prog_size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t prog_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block_size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t block_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block_count",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t block_count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block_cycles",
                        "type": "int32_t",
                        "definition": [
                            "int32_t block_cycles"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cache_size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t cache_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lookahead_size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t lookahead_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compact_thresh",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t compact_thresh"
                        ]
                    },
                    {
                        "path": null,
                        "name": "read_buffer",
                        "type": "void *",
                        "definition": [
                            "void *read_buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prog_buffer",
                        "type": "void *",
                        "definition": [
                            "void *prog_buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lookahead_buffer",
                        "type": "void *",
                        "definition": [
                            "void *lookahead_buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name_max",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t name_max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file_max",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t file_max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attr_max",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t attr_max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "metadata_max",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t metadata_max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inline_max",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t inline_max"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct lfs_info\n{\n  uint8_t type;\n  lfs_size_t size;\n  char name[255 + 1];\n}",
            "name": "lfs_info",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "type",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "char [255 + 1]",
                        "definition": [
                            "char name[255 + 1]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct lfs_fsinfo\n{\n  uint32_t disk_version;\n  lfs_size_t block_size;\n  lfs_size_t block_count;\n  lfs_size_t name_max;\n  lfs_size_t file_max;\n  lfs_size_t attr_max;\n}",
            "name": "lfs_fsinfo",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "disk_version",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t disk_version"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block_size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t block_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block_count",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t block_count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name_max",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t name_max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file_max",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t file_max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attr_max",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t attr_max"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct lfs_attr\n{\n  uint8_t type;\n  void *buffer;\n  lfs_size_t size;\n}",
            "name": "lfs_attr",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "type",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "void *",
                        "definition": [
                            "void *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct lfs_file_config\n{\n  void *buffer;\n  struct lfs_attr *attrs;\n  lfs_size_t attr_count;\n}",
            "name": "lfs_file_config",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "void *",
                        "definition": [
                            "void *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_attr",
                        "type": "struct lfs_attr *",
                        "definition": [
                            "struct lfs_attr *attrs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attr_count",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t attr_count"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct lfs_cache\n{\n  lfs_block_t block;\n  lfs_off_t off;\n  lfs_size_t size;\n  uint8_t *buffer;\n} lfs_cache_t",
            "name": "lfs_cache_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "block",
                        "type": "lfs_block_t",
                        "definition": [
                            "lfs_block_t block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t off"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *buffer"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct lfs_mdir\n{\n  lfs_block_t pair[2];\n  uint32_t rev;\n  lfs_off_t off;\n  uint32_t etag;\n  uint16_t count;\n  bool erased;\n  bool split;\n  lfs_block_t tail[2];\n} lfs_mdir_t",
            "name": "lfs_mdir_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pair",
                        "type": "lfs_block_t [2]",
                        "definition": [
                            "lfs_block_t pair[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rev",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t rev"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t off"
                        ]
                    },
                    {
                        "path": null,
                        "name": "etag",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t etag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "erased",
                        "type": "bool",
                        "definition": [
                            "bool erased"
                        ]
                    },
                    {
                        "path": null,
                        "name": "split",
                        "type": "bool",
                        "definition": [
                            "bool split"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tail",
                        "type": "lfs_block_t [2]",
                        "definition": [
                            "lfs_block_t tail[2]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct lfs_dir\n{\n  struct lfs_dir *next;\n  uint16_t id;\n  uint8_t type;\n  lfs_mdir_t m;\n  lfs_off_t pos;\n  lfs_block_t head[2];\n} lfs_dir_t",
            "name": "lfs_dir_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct lfs_dir",
                        "type": "struct lfs_dir *",
                        "definition": [
                            "struct lfs_dir *next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t m"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "head",
                        "type": "lfs_block_t [2]",
                        "definition": [
                            "lfs_block_t head[2]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct lfs_file\n{\n  struct lfs_file *next;\n  uint16_t id;\n  uint8_t type;\n  lfs_mdir_t m;\n  struct lfs_ctz\n  {\n    lfs_block_t head;\n    lfs_size_t size;\n  } ctz;\n  uint32_t flags;\n  lfs_off_t pos;\n  lfs_block_t block;\n  lfs_off_t off;\n  lfs_cache_t cache;\n  const struct lfs_file_config *cfg;\n} lfs_file_t",
            "name": "lfs_file_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct lfs_file",
                        "type": "struct lfs_file *",
                        "definition": [
                            "struct lfs_file *next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t m"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ctz",
                        "type": "struct lfs_ctz\n{\n  lfs_block_t head;\n  lfs_size_t size;\n}",
                        "definition": [
                            "struct lfs_ctz\n{\n  lfs_block_t head;\n  lfs_size_t size;\n} ctz"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "lfs_block_t",
                        "definition": [
                            "lfs_block_t block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t off"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cache",
                        "type": "lfs_cache_t",
                        "definition": [
                            "lfs_cache_t cache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_file_config",
                        "type": "const struct lfs_file_config *",
                        "definition": [
                            "const struct lfs_file_config *cfg"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct lfs_superblock\n{\n  uint32_t version;\n  lfs_size_t block_size;\n  lfs_size_t block_count;\n  lfs_size_t name_max;\n  lfs_size_t file_max;\n  lfs_size_t attr_max;\n} lfs_superblock_t",
            "name": "lfs_superblock_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "version",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t version"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block_size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t block_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block_count",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t block_count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name_max",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t name_max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file_max",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t file_max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attr_max",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t attr_max"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct lfs_gstate\n{\n  uint32_t tag;\n  lfs_block_t pair[2];\n} lfs_gstate_t",
            "name": "lfs_gstate_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "tag",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t tag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pair",
                        "type": "lfs_block_t [2]",
                        "definition": [
                            "lfs_block_t pair[2]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct lfs\n{\n  lfs_cache_t rcache;\n  lfs_cache_t pcache;\n  lfs_block_t root[2];\n  struct lfs_mlist\n  {\n    struct lfs_mlist *next;\n    uint16_t id;\n    uint8_t type;\n    lfs_mdir_t m;\n  } *mlist;\n  uint32_t seed;\n  lfs_gstate_t gstate;\n  lfs_gstate_t gdisk;\n  lfs_gstate_t gdelta;\n  struct lfs_lookahead\n  {\n    lfs_block_t start;\n    lfs_block_t size;\n    lfs_block_t next;\n    lfs_block_t ckpoint;\n    uint8_t *buffer;\n  } lookahead;\n  const struct lfs_config *cfg;\n  lfs_size_t block_count;\n  lfs_size_t name_max;\n  lfs_size_t file_max;\n  lfs_size_t attr_max;\n  lfs_size_t inline_max;\n} lfs_t",
            "name": "lfs_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "rcache",
                        "type": "lfs_cache_t",
                        "definition": [
                            "lfs_cache_t rcache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pcache",
                        "type": "lfs_cache_t",
                        "definition": [
                            "lfs_cache_t pcache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "root",
                        "type": "lfs_block_t [2]",
                        "definition": [
                            "lfs_block_t root[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_mlist\n{\n  struct lfs_mlist *next;\n  uint16_t id;\n  uint8_t type;\n  lfs_mdir_t m;\n}",
                        "type": "struct lfs_mlist\n{\n  struct lfs_mlist *next;\n  uint16_t id;\n  uint8_t type;\n  lfs_mdir_t m;\n} *",
                        "definition": [
                            "struct lfs_mlist\n{\n  struct lfs_mlist *next;\n  uint16_t id;\n  uint8_t type;\n  lfs_mdir_t m;\n} *mlist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "seed",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t seed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gstate",
                        "type": "lfs_gstate_t",
                        "definition": [
                            "lfs_gstate_t gstate"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gdisk",
                        "type": "lfs_gstate_t",
                        "definition": [
                            "lfs_gstate_t gdisk"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gdelta",
                        "type": "lfs_gstate_t",
                        "definition": [
                            "lfs_gstate_t gdelta"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lookahead",
                        "type": "struct lfs_lookahead\n{\n  lfs_block_t start;\n  lfs_block_t size;\n  lfs_block_t next;\n  lfs_block_t ckpoint;\n  uint8_t *buffer;\n}",
                        "definition": [
                            "struct lfs_lookahead\n{\n  lfs_block_t start;\n  lfs_block_t size;\n  lfs_block_t next;\n  lfs_block_t ckpoint;\n  uint8_t *buffer;\n} lookahead"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_config",
                        "type": "const struct lfs_config *",
                        "definition": [
                            "const struct lfs_config *cfg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block_count",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t block_count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name_max",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t name_max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file_max",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t file_max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attr_max",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t attr_max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inline_max",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t inline_max"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "enum \n{\n  LFS_OK_RELOCATED = 1,\n  LFS_OK_DROPPED = 2,\n  LFS_OK_ORPHANED = 3\n}",
            "name": null,
            "names": [
                "enum \n{\n  LFS_CMP_EQ = 0,\n  LFS_CMP_LT = 1,\n  LFS_CMP_GT = 2\n}"
            ]
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct lfs_mattr\n{\n  lfs_tag_t tag;\n  const void *buffer;\n}",
            "name": "lfs_mattr",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "const void *",
                        "definition": [
                            "const void *buffer"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct lfs_diskoff\n{\n  lfs_block_t block;\n  lfs_off_t off;\n}",
            "name": "lfs_diskoff",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "block",
                        "type": "lfs_block_t",
                        "definition": [
                            "lfs_block_t block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t off"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct lfs_fcrc\n{\n  lfs_size_t size;\n  uint32_t crc;\n}",
            "name": "lfs_fcrc",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t crc"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct lfs_dir_traverse\n{\n  const lfs_mdir_t *dir;\n  lfs_off_t off;\n  lfs_tag_t ptag;\n  const struct lfs_mattr *attrs;\n  int attrcount;\n  lfs_tag_t tmask;\n  lfs_tag_t ttag;\n  uint16_t begin;\n  uint16_t end;\n  int16_t diff;\n  int (*cb)(void *data, lfs_tag_t tag, const void *buffer);\n  void *data;\n  lfs_tag_t tag;\n  const void *buffer;\n  struct lfs_diskoff disk;\n}",
            "name": "lfs_dir_traverse",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dir",
                        "type": "const lfs_mdir_t *",
                        "definition": [
                            "const lfs_mdir_t *dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t off"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t ptag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_mattr",
                        "type": "const struct lfs_mattr *",
                        "definition": [
                            "const struct lfs_mattr *attrs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attrcount",
                        "type": "int",
                        "definition": [
                            "int attrcount"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmask",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tmask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ttag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t ttag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "begin",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t begin"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff",
                        "type": "int16_t",
                        "definition": [
                            "int16_t diff"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb",
                        "type": "int (*)(void *data, lfs_tag_t tag, const void *buffer)",
                        "definition": [
                            "int (*cb)(void *data, lfs_tag_t tag, const void *buffer)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "void *",
                        "definition": [
                            "void *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "const void *",
                        "definition": [
                            "const void *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "disk",
                        "type": "struct lfs_diskoff",
                        "definition": [
                            "struct lfs_diskoff disk"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct lfs_dir_find_match\n{\n  lfs_t *lfs;\n  const void *name;\n  lfs_size_t size;\n}",
            "name": "lfs_dir_find_match",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "const void *",
                        "definition": [
                            "const void *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct lfs_commit\n{\n  lfs_block_t block;\n  lfs_off_t off;\n  lfs_tag_t ptag;\n  uint32_t crc;\n  lfs_off_t begin;\n  lfs_off_t end;\n}",
            "name": "lfs_commit",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "block",
                        "type": "lfs_block_t",
                        "definition": [
                            "lfs_block_t block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t off"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t ptag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t crc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "begin",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t begin"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t end"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct lfs_dir_commit_commit\n{\n  lfs_t *lfs;\n  struct lfs_commit *commit;\n}",
            "name": "lfs_dir_commit_commit",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_commit",
                        "type": "struct lfs_commit *",
                        "definition": [
                            "struct lfs_commit *commit"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct lfs_tortoise_t\n{\n  lfs_block_t pair[2];\n  lfs_size_t i;\n  lfs_size_t period;\n}",
            "name": "lfs_tortoise_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pair",
                        "type": "lfs_block_t [2]",
                        "definition": [
                            "lfs_block_t pair[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "period",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t period"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct lfs_fs_parent_match\n{\n  lfs_t *lfs;\n  const lfs_block_t pair[2];\n}",
            "name": "lfs_fs_parent_match",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pair",
                        "type": "const lfs_block_t [2]",
                        "definition": [
                            "const lfs_block_t pair[2]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        }
    ],
    "global_variable": [],
    "function": [
        {
            "path": null,
            "name": "lfs_max",
            "header": "",
            "params": [
                "uint32_t a",
                "uint32_t b"
            ],
            "definition": "inline static uint32_t lfs_max(uint32_t a, uint32_t b)\n{\n  return (a > b) ? (a) : (b);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_min",
            "header": "",
            "params": [
                "uint32_t a",
                "uint32_t b"
            ],
            "definition": "inline static uint32_t lfs_min(uint32_t a, uint32_t b)\n{\n  return (a < b) ? (a) : (b);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_aligndown",
            "header": "",
            "params": [
                "uint32_t a",
                "uint32_t alignment"
            ],
            "definition": "inline static uint32_t lfs_aligndown(uint32_t a, uint32_t alignment)\n{\n  return a - (a % alignment);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alignment",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t alignment"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_alignup",
            "header": "",
            "params": [
                "uint32_t a",
                "uint32_t alignment"
            ],
            "definition": "inline static uint32_t lfs_alignup(uint32_t a, uint32_t alignment)\n{\n  return lfs_aligndown((a + alignment) - 1, alignment);\n}\n\n",
            "calle": [
                "lfs_aligndown"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alignment",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t alignment"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_npw2",
            "header": "",
            "params": [
                "uint32_t a"
            ],
            "definition": "inline static uint32_t lfs_npw2(uint32_t a)\n{\n  return 32 - __builtin_clz(a - 1);\n}\n\n",
            "calle": [
                "__builtin_clz"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t a"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_ctz",
            "header": "",
            "params": [
                "uint32_t a"
            ],
            "definition": "inline static uint32_t lfs_ctz(uint32_t a)\n{\n  return __builtin_ctz(a);\n}\n\n",
            "calle": [
                "__builtin_ctz"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t a"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_popc",
            "header": "",
            "params": [
                "uint32_t a"
            ],
            "definition": "inline static uint32_t lfs_popc(uint32_t a)\n{\n  return __builtin_popcount(a);\n}\n\n",
            "calle": [
                "__builtin_popcount"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t a"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_scmp",
            "header": "",
            "params": [
                "uint32_t a",
                "uint32_t b"
            ],
            "definition": "inline static int lfs_scmp(uint32_t a, uint32_t b)\n{\n  return (int) ((unsigned) (a - b));\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_fromle32",
            "header": "",
            "params": [
                "uint32_t a"
            ],
            "definition": "inline static uint32_t lfs_fromle32(uint32_t a)\n{\n  return a;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t a"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_tole32",
            "header": "",
            "params": [
                "uint32_t a"
            ],
            "definition": "inline static uint32_t lfs_tole32(uint32_t a)\n{\n  return lfs_fromle32(a);\n}\n\n",
            "calle": [
                "lfs_fromle32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t a"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_frombe32",
            "header": "",
            "params": [
                "uint32_t a"
            ],
            "definition": "inline static uint32_t lfs_frombe32(uint32_t a)\n{\n  return __builtin_bswap32(a);\n}\n\n",
            "calle": [
                "__builtin_bswap32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t a"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_tobe32",
            "header": "",
            "params": [
                "uint32_t a"
            ],
            "definition": "inline static uint32_t lfs_tobe32(uint32_t a)\n{\n  return lfs_frombe32(a);\n}\n\n",
            "calle": [
                "lfs_frombe32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t a"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_malloc",
            "header": "",
            "params": [
                "size_t size"
            ],
            "definition": "inline static void *lfs_malloc(size_t size)\n{\n  return malloc(size);\n}\n\n",
            "calle": [
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_free",
            "header": "",
            "params": [
                "void *p"
            ],
            "definition": "inline static void lfs_free(void *p)\n{\n  free(p);\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p",
                        "type": "void *",
                        "definition": [
                            "void *p"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_format",
            "header": "int lfs_format(lfs_t *lfs, const struct lfs_config *config)",
            "params": [
                "lfs_t *lfs",
                "const struct lfs_config *cfg"
            ],
            "definition": "int lfs_format(lfs_t *lfs, const struct lfs_config *cfg)\n{\n  int err = ((void) cfg, 0);\n  if (err)\n  {\n    return err;\n  }\n  ;\n  err = lfs_format_(lfs, cfg);\n  ;\n  (void) cfg;\n  return err;\n}\n\n",
            "calle": [
                "lfs_format_"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_config",
                        "type": "const struct lfs_config *",
                        "definition": [
                            "const struct lfs_config *cfg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((void) cfg, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_mount",
            "header": "int lfs_mount(lfs_t *lfs, const struct lfs_config *config)",
            "params": [
                "lfs_t *lfs",
                "const struct lfs_config *cfg"
            ],
            "definition": "int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg)\n{\n  int err = ((void) cfg, 0);\n  if (err)\n  {\n    return err;\n  }\n  ;\n  err = lfs_mount_(lfs, cfg);\n  ;\n  (void) cfg;\n  return err;\n}\n\n",
            "calle": [
                "lfs_mount_"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_config",
                        "type": "const struct lfs_config *",
                        "definition": [
                            "const struct lfs_config *cfg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((void) cfg, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_unmount",
            "header": "int lfs_unmount(lfs_t *lfs)",
            "params": [
                "lfs_t *lfs"
            ],
            "definition": "int lfs_unmount(lfs_t *lfs)\n{\n  int err = ((void) lfs->cfg, 0);\n  if (err)\n  {\n    return err;\n  }\n  ;\n  err = lfs_unmount_(lfs);\n  ;\n  (void) lfs->cfg;\n  return err;\n}\n\n",
            "calle": [
                "lfs_unmount_"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((void) lfs->cfg, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_remove",
            "header": "int lfs_remove(lfs_t *lfs, const char *path)",
            "params": [
                "lfs_t *lfs",
                "const char *path"
            ],
            "definition": "int lfs_remove(lfs_t *lfs, const char *path)\n{\n  int err = ((void) lfs->cfg, 0);\n  if (err)\n  {\n    return err;\n  }\n  ;\n  err = lfs_remove_(lfs, path);\n  ;\n  (void) lfs->cfg;\n  return err;\n}\n\n",
            "calle": [
                "lfs_remove_"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((void) lfs->cfg, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_rename",
            "header": "int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath)",
            "params": [
                "lfs_t *lfs",
                "const char *oldpath",
                "const char *newpath"
            ],
            "definition": "int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath)\n{\n  int err = ((void) lfs->cfg, 0);\n  if (err)\n  {\n    return err;\n  }\n  ;\n  err = lfs_rename_(lfs, oldpath, newpath);\n  ;\n  (void) lfs->cfg;\n  return err;\n}\n\n",
            "calle": [
                "lfs_rename_"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oldpath",
                        "type": "const char *",
                        "definition": [
                            "const char *oldpath"
                        ]
                    },
                    {
                        "path": null,
                        "name": "newpath",
                        "type": "const char *",
                        "definition": [
                            "const char *newpath"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((void) lfs->cfg, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_stat",
            "header": "int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info)",
            "params": [
                "lfs_t *lfs",
                "const char *path",
                "struct lfs_info *info"
            ],
            "definition": "int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info)\n{\n  int err = ((void) lfs->cfg, 0);\n  if (err)\n  {\n    return err;\n  }\n  ;\n  err = lfs_stat_(lfs, path, info);\n  ;\n  (void) lfs->cfg;\n  return err;\n}\n\n",
            "calle": [
                "lfs_stat_"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_info",
                        "type": "struct lfs_info *",
                        "definition": [
                            "struct lfs_info *info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((void) lfs->cfg, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_getattr",
            "header": "lfs_ssize_t lfs_getattr(lfs_t *lfs, const char *path, uint8_t type, void *buffer, lfs_size_t size)",
            "params": [
                "lfs_t *lfs",
                "const char *path",
                "uint8_t type",
                "void *buffer",
                "lfs_size_t size"
            ],
            "definition": "lfs_ssize_t lfs_getattr(lfs_t *lfs, const char *path, uint8_t type, void *buffer, lfs_size_t size)\n{\n  int err = ((void) lfs->cfg, 0);\n  if (err)\n  {\n    return err;\n  }\n  ;\n  lfs_ssize_t res = lfs_getattr_(lfs, path, type, buffer, size);\n  ;\n  (void) lfs->cfg;\n  return res;\n}\n\n",
            "calle": [
                "lfs_getattr_"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "void *",
                        "definition": [
                            "void *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((void) lfs->cfg, 0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res",
                        "type": "lfs_ssize_t",
                        "definition": [
                            "lfs_ssize_t res = lfs_getattr_(lfs, path, type, buffer, size)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_setattr",
            "header": "int lfs_setattr(lfs_t *lfs, const char *path, uint8_t type, const void *buffer, lfs_size_t size)",
            "params": [
                "lfs_t *lfs",
                "const char *path",
                "uint8_t type",
                "const void *buffer",
                "lfs_size_t size"
            ],
            "definition": "int lfs_setattr(lfs_t *lfs, const char *path, uint8_t type, const void *buffer, lfs_size_t size)\n{\n  int err = ((void) lfs->cfg, 0);\n  if (err)\n  {\n    return err;\n  }\n  ;\n  err = lfs_setattr_(lfs, path, type, buffer, size);\n  ;\n  (void) lfs->cfg;\n  return err;\n}\n\n",
            "calle": [
                "lfs_setattr_"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "const void *",
                        "definition": [
                            "const void *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((void) lfs->cfg, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_removeattr",
            "header": "int lfs_removeattr(lfs_t *lfs, const char *path, uint8_t type)",
            "params": [
                "lfs_t *lfs",
                "const char *path",
                "uint8_t type"
            ],
            "definition": "int lfs_removeattr(lfs_t *lfs, const char *path, uint8_t type)\n{\n  int err = ((void) lfs->cfg, 0);\n  if (err)\n  {\n    return err;\n  }\n  ;\n  err = lfs_removeattr_(lfs, path, type);\n  ;\n  (void) lfs->cfg;\n  return err;\n}\n\n",
            "calle": [
                "lfs_removeattr_"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((void) lfs->cfg, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_file_open",
            "header": "int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags)",
            "params": [
                "lfs_t *lfs",
                "lfs_file_t *file",
                "const char *path",
                "int flags"
            ],
            "definition": "int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags)\n{\n  int err = ((void) lfs->cfg, 0);\n  if (err)\n  {\n    return err;\n  }\n  ;\n  assert(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist *) file));\n  err = lfs_file_open_(lfs, file, path, flags);\n  ;\n  (void) lfs->cfg;\n  return err;\n}\n\n",
            "calle": [
                "assert",
                "lfs_file_open_",
                "lfs_mlist_isopen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t *",
                        "definition": [
                            "lfs_file_t *file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((void) lfs->cfg, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_file_opencfg",
            "header": "int lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file, const char *path, int flags, const struct lfs_file_config *config)",
            "params": [
                "lfs_t *lfs",
                "lfs_file_t *file",
                "const char *path",
                "int flags",
                "const struct lfs_file_config *cfg"
            ],
            "definition": "int lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file, const char *path, int flags, const struct lfs_file_config *cfg)\n{\n  int err = ((void) lfs->cfg, 0);\n  if (err)\n  {\n    return err;\n  }\n  ;\n  assert(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist *) file));\n  err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n  ;\n  (void) lfs->cfg;\n  return err;\n}\n\n",
            "calle": [
                "assert",
                "lfs_file_opencfg_",
                "lfs_mlist_isopen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t *",
                        "definition": [
                            "lfs_file_t *file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_file_config",
                        "type": "const struct lfs_file_config *",
                        "definition": [
                            "const struct lfs_file_config *cfg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((void) lfs->cfg, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_file_close",
            "header": "int lfs_file_close(lfs_t *lfs, lfs_file_t *file)",
            "params": [
                "lfs_t *lfs",
                "lfs_file_t *file"
            ],
            "definition": "int lfs_file_close(lfs_t *lfs, lfs_file_t *file)\n{\n  int err = ((void) lfs->cfg, 0);\n  if (err)\n  {\n    return err;\n  }\n  ;\n  assert(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist *) file));\n  err = lfs_file_close_(lfs, file);\n  ;\n  (void) lfs->cfg;\n  return err;\n}\n\n",
            "calle": [
                "assert",
                "lfs_file_close_",
                "lfs_mlist_isopen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t *",
                        "definition": [
                            "lfs_file_t *file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((void) lfs->cfg, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_file_sync",
            "header": "int lfs_file_sync(lfs_t *lfs, lfs_file_t *file)",
            "params": [
                "lfs_t *lfs",
                "lfs_file_t *file"
            ],
            "definition": "int lfs_file_sync(lfs_t *lfs, lfs_file_t *file)\n{\n  int err = ((void) lfs->cfg, 0);\n  if (err)\n  {\n    return err;\n  }\n  ;\n  assert(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist *) file));\n  err = lfs_file_sync_(lfs, file);\n  ;\n  (void) lfs->cfg;\n  return err;\n}\n\n",
            "calle": [
                "assert",
                "lfs_file_sync_",
                "lfs_mlist_isopen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t *",
                        "definition": [
                            "lfs_file_t *file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((void) lfs->cfg, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_file_read",
            "header": "lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file, void *buffer, lfs_size_t size)",
            "params": [
                "lfs_t *lfs",
                "lfs_file_t *file",
                "void *buffer",
                "lfs_size_t size"
            ],
            "definition": "lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file, void *buffer, lfs_size_t size)\n{\n  int err = ((void) lfs->cfg, 0);\n  if (err)\n  {\n    return err;\n  }\n  ;\n  assert(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist *) file));\n  lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);\n  ;\n  (void) lfs->cfg;\n  return res;\n}\n\n",
            "calle": [
                "assert",
                "lfs_file_read_",
                "lfs_mlist_isopen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t *",
                        "definition": [
                            "lfs_file_t *file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "void *",
                        "definition": [
                            "void *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((void) lfs->cfg, 0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res",
                        "type": "lfs_ssize_t",
                        "definition": [
                            "lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_file_write",
            "header": "lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file, const void *buffer, lfs_size_t size)",
            "params": [
                "lfs_t *lfs",
                "lfs_file_t *file",
                "const void *buffer",
                "lfs_size_t size"
            ],
            "definition": "lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file, const void *buffer, lfs_size_t size)\n{\n  int err = ((void) lfs->cfg, 0);\n  if (err)\n  {\n    return err;\n  }\n  ;\n  assert(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist *) file));\n  lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);\n  ;\n  (void) lfs->cfg;\n  return res;\n}\n\n",
            "calle": [
                "assert",
                "lfs_file_write_",
                "lfs_mlist_isopen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t *",
                        "definition": [
                            "lfs_file_t *file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "const void *",
                        "definition": [
                            "const void *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((void) lfs->cfg, 0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res",
                        "type": "lfs_ssize_t",
                        "definition": [
                            "lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_file_seek",
            "header": "lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file, lfs_soff_t off, int whence)",
            "params": [
                "lfs_t *lfs",
                "lfs_file_t *file",
                "lfs_soff_t off",
                "int whence"
            ],
            "definition": "lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file, lfs_soff_t off, int whence)\n{\n  int err = ((void) lfs->cfg, 0);\n  if (err)\n  {\n    return err;\n  }\n  ;\n  assert(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist *) file));\n  lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);\n  ;\n  (void) lfs->cfg;\n  return res;\n}\n\n",
            "calle": [
                "assert",
                "lfs_file_seek_",
                "lfs_mlist_isopen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t *",
                        "definition": [
                            "lfs_file_t *file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_soff_t",
                        "definition": [
                            "lfs_soff_t off"
                        ]
                    },
                    {
                        "path": null,
                        "name": "whence",
                        "type": "int",
                        "definition": [
                            "int whence"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((void) lfs->cfg, 0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res",
                        "type": "lfs_soff_t",
                        "definition": [
                            "lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_file_truncate",
            "header": "int lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size)",
            "params": [
                "lfs_t *lfs",
                "lfs_file_t *file",
                "lfs_off_t size"
            ],
            "definition": "int lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size)\n{\n  int err = ((void) lfs->cfg, 0);\n  if (err)\n  {\n    return err;\n  }\n  ;\n  assert(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist *) file));\n  err = lfs_file_truncate_(lfs, file, size);\n  ;\n  (void) lfs->cfg;\n  return err;\n}\n\n",
            "calle": [
                "assert",
                "lfs_file_truncate_",
                "lfs_mlist_isopen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t *",
                        "definition": [
                            "lfs_file_t *file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((void) lfs->cfg, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_file_tell",
            "header": "lfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file)",
            "params": [
                "lfs_t *lfs",
                "lfs_file_t *file"
            ],
            "definition": "lfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file)\n{\n  int err = ((void) lfs->cfg, 0);\n  if (err)\n  {\n    return err;\n  }\n  ;\n  assert(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist *) file));\n  lfs_soff_t res = lfs_file_tell_(lfs, file);\n  ;\n  (void) lfs->cfg;\n  return res;\n}\n\n",
            "calle": [
                "assert",
                "lfs_file_tell_",
                "lfs_mlist_isopen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t *",
                        "definition": [
                            "lfs_file_t *file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((void) lfs->cfg, 0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res",
                        "type": "lfs_soff_t",
                        "definition": [
                            "lfs_soff_t res = lfs_file_tell_(lfs, file)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_file_rewind",
            "header": "int lfs_file_rewind(lfs_t *lfs, lfs_file_t *file)",
            "params": [
                "lfs_t *lfs",
                "lfs_file_t *file"
            ],
            "definition": "int lfs_file_rewind(lfs_t *lfs, lfs_file_t *file)\n{\n  int err = ((void) lfs->cfg, 0);\n  if (err)\n  {\n    return err;\n  }\n  ;\n  err = lfs_file_rewind_(lfs, file);\n  ;\n  (void) lfs->cfg;\n  return err;\n}\n\n",
            "calle": [
                "lfs_file_rewind_"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t *",
                        "definition": [
                            "lfs_file_t *file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((void) lfs->cfg, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_file_size",
            "header": "lfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file)",
            "params": [
                "lfs_t *lfs",
                "lfs_file_t *file"
            ],
            "definition": "lfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file)\n{\n  int err = ((void) lfs->cfg, 0);\n  if (err)\n  {\n    return err;\n  }\n  ;\n  assert(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist *) file));\n  lfs_soff_t res = lfs_file_size_(lfs, file);\n  ;\n  (void) lfs->cfg;\n  return res;\n}\n\n",
            "calle": [
                "assert",
                "lfs_file_size_",
                "lfs_mlist_isopen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t *",
                        "definition": [
                            "lfs_file_t *file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((void) lfs->cfg, 0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res",
                        "type": "lfs_soff_t",
                        "definition": [
                            "lfs_soff_t res = lfs_file_size_(lfs, file)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_mkdir",
            "header": "int lfs_mkdir(lfs_t *lfs, const char *path)",
            "params": [
                "lfs_t *lfs",
                "const char *path"
            ],
            "definition": "int lfs_mkdir(lfs_t *lfs, const char *path)\n{\n  int err = ((void) lfs->cfg, 0);\n  if (err)\n  {\n    return err;\n  }\n  ;\n  err = lfs_mkdir_(lfs, path);\n  ;\n  (void) lfs->cfg;\n  return err;\n}\n\n",
            "calle": [
                "lfs_mkdir_"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((void) lfs->cfg, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_open",
            "header": "int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path)",
            "params": [
                "lfs_t *lfs",
                "lfs_dir_t *dir",
                "const char *path"
            ],
            "definition": "int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path)\n{\n  int err = ((void) lfs->cfg, 0);\n  if (err)\n  {\n    return err;\n  }\n  ;\n  assert(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist *) dir));\n  err = lfs_dir_open_(lfs, dir, path);\n  ;\n  (void) lfs->cfg;\n  return err;\n}\n\n",
            "calle": [
                "assert",
                "lfs_dir_open_",
                "lfs_mlist_isopen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_dir_t *",
                        "definition": [
                            "lfs_dir_t *dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((void) lfs->cfg, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_close",
            "header": "int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir)",
            "params": [
                "lfs_t *lfs",
                "lfs_dir_t *dir"
            ],
            "definition": "int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir)\n{\n  int err = ((void) lfs->cfg, 0);\n  if (err)\n  {\n    return err;\n  }\n  ;\n  err = lfs_dir_close_(lfs, dir);\n  ;\n  (void) lfs->cfg;\n  return err;\n}\n\n",
            "calle": [
                "lfs_dir_close_"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_dir_t *",
                        "definition": [
                            "lfs_dir_t *dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((void) lfs->cfg, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_read",
            "header": "int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info)",
            "params": [
                "lfs_t *lfs",
                "lfs_dir_t *dir",
                "struct lfs_info *info"
            ],
            "definition": "int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info)\n{\n  int err = ((void) lfs->cfg, 0);\n  if (err)\n  {\n    return err;\n  }\n  ;\n  err = lfs_dir_read_(lfs, dir, info);\n  ;\n  (void) lfs->cfg;\n  return err;\n}\n\n",
            "calle": [
                "lfs_dir_read_"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_dir_t *",
                        "definition": [
                            "lfs_dir_t *dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_info",
                        "type": "struct lfs_info *",
                        "definition": [
                            "struct lfs_info *info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((void) lfs->cfg, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_seek",
            "header": "int lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off)",
            "params": [
                "lfs_t *lfs",
                "lfs_dir_t *dir",
                "lfs_off_t off"
            ],
            "definition": "int lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off)\n{\n  int err = ((void) lfs->cfg, 0);\n  if (err)\n  {\n    return err;\n  }\n  ;\n  err = lfs_dir_seek_(lfs, dir, off);\n  ;\n  (void) lfs->cfg;\n  return err;\n}\n\n",
            "calle": [
                "lfs_dir_seek_"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_dir_t *",
                        "definition": [
                            "lfs_dir_t *dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t off"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((void) lfs->cfg, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_tell",
            "header": "lfs_soff_t lfs_dir_tell(lfs_t *lfs, lfs_dir_t *dir)",
            "params": [
                "lfs_t *lfs",
                "lfs_dir_t *dir"
            ],
            "definition": "lfs_soff_t lfs_dir_tell(lfs_t *lfs, lfs_dir_t *dir)\n{\n  int err = ((void) lfs->cfg, 0);\n  if (err)\n  {\n    return err;\n  }\n  ;\n  lfs_soff_t res = lfs_dir_tell_(lfs, dir);\n  ;\n  (void) lfs->cfg;\n  return res;\n}\n\n",
            "calle": [
                "lfs_dir_tell_"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_dir_t *",
                        "definition": [
                            "lfs_dir_t *dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((void) lfs->cfg, 0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res",
                        "type": "lfs_soff_t",
                        "definition": [
                            "lfs_soff_t res = lfs_dir_tell_(lfs, dir)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_rewind",
            "header": "int lfs_dir_rewind(lfs_t *lfs, lfs_dir_t *dir)",
            "params": [
                "lfs_t *lfs",
                "lfs_dir_t *dir"
            ],
            "definition": "int lfs_dir_rewind(lfs_t *lfs, lfs_dir_t *dir)\n{\n  int err = ((void) lfs->cfg, 0);\n  if (err)\n  {\n    return err;\n  }\n  ;\n  err = lfs_dir_rewind_(lfs, dir);\n  ;\n  (void) lfs->cfg;\n  return err;\n}\n\n",
            "calle": [
                "lfs_dir_rewind_"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_dir_t *",
                        "definition": [
                            "lfs_dir_t *dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((void) lfs->cfg, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_fs_stat",
            "header": "int lfs_fs_stat(lfs_t *lfs, struct lfs_fsinfo *fsinfo)",
            "params": [
                "lfs_t *lfs",
                "struct lfs_fsinfo *fsinfo"
            ],
            "definition": "int lfs_fs_stat(lfs_t *lfs, struct lfs_fsinfo *fsinfo)\n{\n  int err = ((void) lfs->cfg, 0);\n  if (err)\n  {\n    return err;\n  }\n  ;\n  err = lfs_fs_stat_(lfs, fsinfo);\n  ;\n  (void) lfs->cfg;\n  return err;\n}\n\n",
            "calle": [
                "lfs_fs_stat_"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_fsinfo",
                        "type": "struct lfs_fsinfo *",
                        "definition": [
                            "struct lfs_fsinfo *fsinfo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((void) lfs->cfg, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_fs_size",
            "header": "lfs_ssize_t lfs_fs_size(lfs_t *lfs)",
            "params": [
                "lfs_t *lfs"
            ],
            "definition": "lfs_ssize_t lfs_fs_size(lfs_t *lfs)\n{\n  int err = ((void) lfs->cfg, 0);\n  if (err)\n  {\n    return err;\n  }\n  ;\n  lfs_ssize_t res = lfs_fs_size_(lfs);\n  ;\n  (void) lfs->cfg;\n  return res;\n}\n\n",
            "calle": [
                "lfs_fs_size_"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((void) lfs->cfg, 0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res",
                        "type": "lfs_ssize_t",
                        "definition": [
                            "lfs_ssize_t res = lfs_fs_size_(lfs)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_fs_traverse",
            "header": "int lfs_fs_traverse(lfs_t *lfs, int (*cb)(void *, lfs_block_t), void *data)",
            "params": [
                "lfs_t *lfs",
                "int (*cb)(void *, lfs_block_t)",
                "void *data"
            ],
            "definition": "int lfs_fs_traverse(lfs_t *lfs, int (*cb)(void *, lfs_block_t), void *data)\n{\n  int err = ((void) lfs->cfg, 0);\n  if (err)\n  {\n    return err;\n  }\n  ;\n  err = lfs_fs_traverse_(lfs, cb, data, 1);\n  ;\n  (void) lfs->cfg;\n  return err;\n}\n\n",
            "calle": [
                "lfs_fs_traverse_"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb",
                        "type": "int (*)(void *, lfs_block_t)",
                        "definition": [
                            "int (*cb)(void *, lfs_block_t)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "void *",
                        "definition": [
                            "void *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((void) lfs->cfg, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_fs_mkconsistent",
            "header": "int lfs_fs_mkconsistent(lfs_t *lfs)",
            "params": [
                "lfs_t *lfs"
            ],
            "definition": "int lfs_fs_mkconsistent(lfs_t *lfs)\n{\n  int err = ((void) lfs->cfg, 0);\n  if (err)\n  {\n    return err;\n  }\n  ;\n  err = lfs_fs_mkconsistent_(lfs);\n  ;\n  (void) lfs->cfg;\n  return err;\n}\n\n",
            "calle": [
                "lfs_fs_mkconsistent_"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((void) lfs->cfg, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_fs_gc",
            "header": "int lfs_fs_gc(lfs_t *lfs)",
            "params": [
                "lfs_t *lfs"
            ],
            "definition": "int lfs_fs_gc(lfs_t *lfs)\n{\n  int err = ((void) lfs->cfg, 0);\n  if (err)\n  {\n    return err;\n  }\n  ;\n  err = lfs_fs_gc_(lfs);\n  ;\n  (void) lfs->cfg;\n  return err;\n}\n\n",
            "calle": [
                "lfs_fs_gc_"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((void) lfs->cfg, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_fs_grow",
            "header": "int lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count)",
            "params": [
                "lfs_t *lfs",
                "lfs_size_t block_count"
            ],
            "definition": "int lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count)\n{\n  int err = ((void) lfs->cfg, 0);\n  if (err)\n  {\n    return err;\n  }\n  ;\n  err = lfs_fs_grow_(lfs, block_count);\n  ;\n  (void) lfs->cfg;\n  return err;\n}\n\n",
            "calle": [
                "lfs_fs_grow_"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block_count",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t block_count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = ((void) lfs->cfg, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_cache_drop",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "lfs_cache_t *rcache"
            ],
            "definition": "inline static void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache)\n{\n  (void) lfs;\n  rcache->block = (lfs_block_t) (-1);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rcache",
                        "type": "lfs_cache_t *",
                        "definition": [
                            "lfs_cache_t *rcache"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_cache_zero",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "lfs_cache_t *pcache"
            ],
            "definition": "inline static void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache)\n{\n  memset(pcache->buffer, 0xff, lfs->cfg->cache_size);\n  pcache->block = (lfs_block_t) (-1);\n}\n\n",
            "calle": [
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pcache",
                        "type": "lfs_cache_t *",
                        "definition": [
                            "lfs_cache_t *pcache"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_bd_read",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "const lfs_cache_t *pcache",
                "lfs_cache_t *rcache",
                "lfs_size_t hint",
                "lfs_block_t block",
                "lfs_off_t off",
                "void *buffer",
                "lfs_size_t size"
            ],
            "definition": "static int lfs_bd_read(lfs_t *lfs, const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size)\n{\n  uint8_t *data = buffer;\n  unsigned int data_idx = 0;\n  if (((off + size) > lfs->cfg->block_size) || (lfs->block_count && (block >= lfs->block_count)))\n  {\n    return LFS_ERR_CORRUPT;\n  }\n  while (size > 0)\n  {\n    helper_lfs_bd_read_1(&block, &off, &size, &data_idx, lfs, pcache, rcache, hint, data);\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "helper_lfs_bd_read_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pcache",
                        "type": "const lfs_cache_t *",
                        "definition": [
                            "const lfs_cache_t *pcache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rcache",
                        "type": "lfs_cache_t *",
                        "definition": [
                            "lfs_cache_t *rcache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hint",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t hint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "lfs_block_t",
                        "definition": [
                            "lfs_block_t block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t off"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "void *",
                        "definition": [
                            "void *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data = buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int data_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_bd_cmp",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "const lfs_cache_t *pcache",
                "lfs_cache_t *rcache",
                "lfs_size_t hint",
                "lfs_block_t block",
                "lfs_off_t off",
                "const void *buffer",
                "lfs_size_t size"
            ],
            "definition": "static int lfs_bd_cmp(lfs_t *lfs, const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size)\n{\n  const uint8_t *data = buffer;\n  lfs_size_t diff = 0;\n  for (lfs_off_t i = 0; i < size; i += diff)\n  {\n    uint8_t dat[8];\n    diff = lfs_min(size - i, sizeof(dat));\n    int err = lfs_bd_read(lfs, pcache, rcache, hint - i, block, off + i, &dat, diff);\n    if (err)\n    {\n      return err;\n    }\n    int res = memcmp(dat, data + i, diff);\n    if (res)\n    {\n      return (res < 0) ? (LFS_CMP_LT) : (LFS_CMP_GT);\n    }\n  }\n\n  return LFS_CMP_EQ;\n}\n\n",
            "calle": [
                "lfs_bd_read",
                "lfs_min",
                "memcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pcache",
                        "type": "const lfs_cache_t *",
                        "definition": [
                            "const lfs_cache_t *pcache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rcache",
                        "type": "lfs_cache_t *",
                        "definition": [
                            "lfs_cache_t *rcache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hint",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t hint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "lfs_block_t",
                        "definition": [
                            "lfs_block_t block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t off"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "const void *",
                        "definition": [
                            "const void *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *data = buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t diff = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dat",
                        "type": "uint8_t [8]",
                        "definition": [
                            "uint8_t dat[8]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_bd_read(lfs, pcache, rcache, hint - i, block, off + i, &dat, diff)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res",
                        "type": "int",
                        "definition": [
                            "int res = memcmp(dat, data + i, diff)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_bd_crc",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "const lfs_cache_t *pcache",
                "lfs_cache_t *rcache",
                "lfs_size_t hint",
                "lfs_block_t block",
                "lfs_off_t off",
                "lfs_size_t size",
                "uint32_t *crc"
            ],
            "definition": "static int lfs_bd_crc(lfs_t *lfs, const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint, lfs_block_t block, lfs_off_t off, lfs_size_t size, uint32_t *crc)\n{\n  lfs_size_t diff = 0;\n  for (lfs_off_t i = 0; i < size; i += diff)\n  {\n    uint8_t dat[8];\n    diff = lfs_min(size - i, sizeof(dat));\n    int err = lfs_bd_read(lfs, pcache, rcache, hint - i, block, off + i, &dat, diff);\n    if (err)\n    {\n      return err;\n    }\n    *crc = lfs_crc(*crc, &dat, diff);\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "lfs_bd_read",
                "lfs_crc",
                "lfs_min"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pcache",
                        "type": "const lfs_cache_t *",
                        "definition": [
                            "const lfs_cache_t *pcache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rcache",
                        "type": "lfs_cache_t *",
                        "definition": [
                            "lfs_cache_t *rcache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hint",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t hint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "lfs_block_t",
                        "definition": [
                            "lfs_block_t block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t off"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc",
                        "type": "uint32_t *",
                        "definition": [
                            "uint32_t *crc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t diff = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dat",
                        "type": "uint8_t [8]",
                        "definition": [
                            "uint8_t dat[8]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_bd_read(lfs, pcache, rcache, hint - i, block, off + i, &dat, diff)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_bd_flush",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "lfs_cache_t *pcache",
                "lfs_cache_t *rcache",
                "bool validate"
            ],
            "definition": "static int lfs_bd_flush(lfs_t *lfs, lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate)\n{\n  if ((pcache->block != ((lfs_block_t) (-1))) && (pcache->block != ((lfs_block_t) (-2))))\n  {\n    assert(pcache->block < lfs->block_count);\n    lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);\n    int err = lfs->cfg->prog(lfs->cfg, pcache->block, pcache->off, pcache->buffer, diff);\n    assert(err <= 0);\n    if (err)\n    {\n      return err;\n    }\n    if (validate)\n    {\n      lfs_cache_drop(lfs, rcache);\n      int res = lfs_bd_cmp(lfs, 0, rcache, diff, pcache->block, pcache->off, pcache->buffer, diff);\n      if (res < 0)\n      {\n        return res;\n      }\n      if (res != LFS_CMP_EQ)\n      {\n        return LFS_ERR_CORRUPT;\n      }\n    }\n    lfs_cache_zero(lfs, pcache);\n  }\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "lfs->cfg->prog",
                "lfs_alignup",
                "lfs_bd_cmp",
                "lfs_cache_drop",
                "lfs_cache_zero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pcache",
                        "type": "lfs_cache_t *",
                        "definition": [
                            "lfs_cache_t *pcache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rcache",
                        "type": "lfs_cache_t *",
                        "definition": [
                            "lfs_cache_t *rcache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "validate",
                        "type": "bool",
                        "definition": [
                            "bool validate"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs->cfg->prog(lfs->cfg, pcache->block, pcache->off, pcache->buffer, diff)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res",
                        "type": "int",
                        "definition": [
                            "int res = lfs_bd_cmp(lfs, 0, rcache, diff, pcache->block, pcache->off, pcache->buffer, diff)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_bd_sync",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "lfs_cache_t *pcache",
                "lfs_cache_t *rcache",
                "bool validate"
            ],
            "definition": "static int lfs_bd_sync(lfs_t *lfs, lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate)\n{\n  lfs_cache_drop(lfs, rcache);\n  int err = lfs_bd_flush(lfs, pcache, rcache, validate);\n  if (err)\n  {\n    return err;\n  }\n  err = lfs->cfg->sync(lfs->cfg);\n  assert(err <= 0);\n  return err;\n}\n\n",
            "calle": [
                "assert",
                "lfs->cfg->sync",
                "lfs_bd_flush",
                "lfs_cache_drop"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pcache",
                        "type": "lfs_cache_t *",
                        "definition": [
                            "lfs_cache_t *pcache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rcache",
                        "type": "lfs_cache_t *",
                        "definition": [
                            "lfs_cache_t *rcache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "validate",
                        "type": "bool",
                        "definition": [
                            "bool validate"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_bd_flush(lfs, pcache, rcache, validate)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_bd_prog",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "lfs_cache_t *pcache",
                "lfs_cache_t *rcache",
                "bool validate",
                "lfs_block_t block",
                "lfs_off_t off",
                "const void *buffer",
                "lfs_size_t size"
            ],
            "definition": "static int lfs_bd_prog(lfs_t *lfs, lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size)\n{\n  const uint8_t *data = buffer;\n  unsigned int data_idx = 0;\n  assert((block == ((lfs_block_t) (-2))) || (block < lfs->block_count));\n  assert((off + size) <= lfs->cfg->block_size);\n  while (size > 0)\n  {\n    if (((block == pcache->block) && (off >= pcache->off)) && (off < (pcache->off + lfs->cfg->cache_size)))\n    {\n      lfs_size_t diff = lfs_min(size, lfs->cfg->cache_size - (off - pcache->off));\n      memcpy(&pcache->buffer[off - pcache->off], data, diff);\n      data_idx += diff;\n      off += diff;\n      size -= diff;\n      pcache->size = lfs_max(pcache->size, off - pcache->off);\n      if (pcache->size == lfs->cfg->cache_size)\n      {\n        int err = lfs_bd_flush(lfs, pcache, rcache, validate);\n        if (err)\n        {\n          return err;\n        }\n      }\n      continue;\n    }\n    assert(pcache->block == ((lfs_block_t) (-1)));\n    pcache->block = block;\n    pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);\n    pcache->size = 0;\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "lfs_aligndown",
                "lfs_bd_flush",
                "lfs_max",
                "lfs_min",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pcache",
                        "type": "lfs_cache_t *",
                        "definition": [
                            "lfs_cache_t *pcache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rcache",
                        "type": "lfs_cache_t *",
                        "definition": [
                            "lfs_cache_t *rcache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "validate",
                        "type": "bool",
                        "definition": [
                            "bool validate"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "lfs_block_t",
                        "definition": [
                            "lfs_block_t block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t off"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "const void *",
                        "definition": [
                            "const void *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *data = buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int data_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t diff = lfs_min(size, lfs->cfg->cache_size - (off - pcache->off))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_bd_flush(lfs, pcache, rcache, validate)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_bd_erase",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "lfs_block_t block"
            ],
            "definition": "static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block)\n{\n  assert(block < lfs->block_count);\n  int err = lfs->cfg->erase(lfs->cfg, block);\n  assert(err <= 0);\n  return err;\n}\n\n",
            "calle": [
                "assert",
                "lfs->cfg->erase"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "lfs_block_t",
                        "definition": [
                            "lfs_block_t block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs->cfg->erase(lfs->cfg, block)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_path_namelen",
            "header": "",
            "params": [
                "const char *path"
            ],
            "definition": "inline static lfs_size_t lfs_path_namelen(const char *path)\n{\n  return strcspn(path, \"/\");\n}\n\n",
            "calle": [
                "strcspn"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_path_islast",
            "header": "",
            "params": [
                "const char *path"
            ],
            "definition": "inline static bool lfs_path_islast(const char *path)\n{\n  lfs_size_t namelen = lfs_path_namelen(path);\n  return path[namelen + strspn(path + namelen, \"/\")] == '\\0';\n}\n\n",
            "calle": [
                "lfs_path_namelen",
                "strspn"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "namelen",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t namelen = lfs_path_namelen(path)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_path_isdir",
            "header": "",
            "params": [
                "const char *path"
            ],
            "definition": "inline static bool lfs_path_isdir(const char *path)\n{\n  return path[lfs_path_namelen(path)] != '\\0';\n}\n\n",
            "calle": [
                "lfs_path_namelen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_pair_swap",
            "header": "",
            "params": [
                "lfs_block_t pair[2]"
            ],
            "definition": "inline static void lfs_pair_swap(lfs_block_t pair[2])\n{\n  lfs_block_t t = pair[0];\n  pair[0] = pair[1];\n  pair[1] = t;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pair",
                        "type": "lfs_block_t [2]",
                        "definition": [
                            "lfs_block_t pair[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t",
                        "type": "lfs_block_t",
                        "definition": [
                            "lfs_block_t t = pair[0]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_pair_isnull",
            "header": "",
            "params": [
                "const lfs_block_t pair[2]"
            ],
            "definition": "inline static bool lfs_pair_isnull(const lfs_block_t pair[2])\n{\n  return (pair[0] == ((lfs_block_t) (-1))) || (pair[1] == ((lfs_block_t) (-1)));\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pair",
                        "type": "const lfs_block_t [2]",
                        "definition": [
                            "const lfs_block_t pair[2]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_pair_cmp",
            "header": "",
            "params": [
                "const lfs_block_t paira[2]",
                "const lfs_block_t pairb[2]"
            ],
            "definition": "inline static int lfs_pair_cmp(const lfs_block_t paira[2], const lfs_block_t pairb[2])\n{\n  return !((((paira[0] == pairb[0]) || (paira[1] == pairb[1])) || (paira[0] == pairb[1])) || (paira[1] == pairb[0]));\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "paira",
                        "type": "const lfs_block_t [2]",
                        "definition": [
                            "const lfs_block_t paira[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pairb",
                        "type": "const lfs_block_t [2]",
                        "definition": [
                            "const lfs_block_t pairb[2]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_pair_issync",
            "header": "",
            "params": [
                "const lfs_block_t paira[2]",
                "const lfs_block_t pairb[2]"
            ],
            "definition": "inline static bool lfs_pair_issync(const lfs_block_t paira[2], const lfs_block_t pairb[2])\n{\n  return ((paira[0] == pairb[0]) && (paira[1] == pairb[1])) || ((paira[0] == pairb[1]) && (paira[1] == pairb[0]));\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "paira",
                        "type": "const lfs_block_t [2]",
                        "definition": [
                            "const lfs_block_t paira[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pairb",
                        "type": "const lfs_block_t [2]",
                        "definition": [
                            "const lfs_block_t pairb[2]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_pair_fromle32",
            "header": "",
            "params": [
                "lfs_block_t pair[2]"
            ],
            "definition": "inline static void lfs_pair_fromle32(lfs_block_t pair[2])\n{\n  pair[0] = lfs_fromle32(pair[0]);\n  pair[1] = lfs_fromle32(pair[1]);\n}\n\n",
            "calle": [
                "lfs_fromle32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pair",
                        "type": "lfs_block_t [2]",
                        "definition": [
                            "lfs_block_t pair[2]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_pair_tole32",
            "header": "",
            "params": [
                "lfs_block_t pair[2]"
            ],
            "definition": "inline static void lfs_pair_tole32(lfs_block_t pair[2])\n{\n  pair[0] = lfs_tole32(pair[0]);\n  pair[1] = lfs_tole32(pair[1]);\n}\n\n",
            "calle": [
                "lfs_tole32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pair",
                        "type": "lfs_block_t [2]",
                        "definition": [
                            "lfs_block_t pair[2]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_tag_isvalid",
            "header": "",
            "params": [
                "lfs_tag_t tag"
            ],
            "definition": "inline static bool lfs_tag_isvalid(lfs_tag_t tag)\n{\n  return !(tag & 0x80000000);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tag"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_tag_isdelete",
            "header": "",
            "params": [
                "lfs_tag_t tag"
            ],
            "definition": "inline static bool lfs_tag_isdelete(lfs_tag_t tag)\n{\n  return (((int32_t) (tag << 22)) >> 22) == (-1);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tag"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_tag_type1",
            "header": "",
            "params": [
                "lfs_tag_t tag"
            ],
            "definition": "inline static uint16_t lfs_tag_type1(lfs_tag_t tag)\n{\n  return (tag & 0x70000000) >> 20;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tag"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_tag_type2",
            "header": "",
            "params": [
                "lfs_tag_t tag"
            ],
            "definition": "inline static uint16_t lfs_tag_type2(lfs_tag_t tag)\n{\n  return (tag & 0x78000000) >> 20;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tag"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_tag_type3",
            "header": "",
            "params": [
                "lfs_tag_t tag"
            ],
            "definition": "inline static uint16_t lfs_tag_type3(lfs_tag_t tag)\n{\n  return (tag & 0x7ff00000) >> 20;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tag"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_tag_chunk",
            "header": "",
            "params": [
                "lfs_tag_t tag"
            ],
            "definition": "inline static uint8_t lfs_tag_chunk(lfs_tag_t tag)\n{\n  return (tag & 0x0ff00000) >> 20;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tag"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_tag_splice",
            "header": "",
            "params": [
                "lfs_tag_t tag"
            ],
            "definition": "inline static int8_t lfs_tag_splice(lfs_tag_t tag)\n{\n  return (int8_t) lfs_tag_chunk(tag);\n}\n\n",
            "calle": [
                "lfs_tag_chunk"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tag"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_tag_id",
            "header": "",
            "params": [
                "lfs_tag_t tag"
            ],
            "definition": "inline static uint16_t lfs_tag_id(lfs_tag_t tag)\n{\n  return (tag & 0x000ffc00) >> 10;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tag"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_tag_size",
            "header": "",
            "params": [
                "lfs_tag_t tag"
            ],
            "definition": "inline static lfs_size_t lfs_tag_size(lfs_tag_t tag)\n{\n  return tag & 0x000003ff;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tag"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_tag_dsize",
            "header": "",
            "params": [
                "lfs_tag_t tag"
            ],
            "definition": "inline static lfs_size_t lfs_tag_dsize(lfs_tag_t tag)\n{\n  return (sizeof(tag)) + lfs_tag_size(tag + lfs_tag_isdelete(tag));\n}\n\n",
            "calle": [
                "lfs_tag_isdelete",
                "lfs_tag_size"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tag"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_gstate_xor",
            "header": "",
            "params": [
                "lfs_gstate_t *a",
                "const lfs_gstate_t *b"
            ],
            "definition": "inline static void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b)\n{\n  a->tag ^= b->tag;\n  a->pair[0] ^= b->pair[0];\n  a->pair[1] ^= b->pair[1];\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "lfs_gstate_t *",
                        "definition": [
                            "lfs_gstate_t *a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "const lfs_gstate_t *",
                        "definition": [
                            "const lfs_gstate_t *b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_gstate_iszero",
            "header": "",
            "params": [
                "const lfs_gstate_t *a"
            ],
            "definition": "inline static bool lfs_gstate_iszero(const lfs_gstate_t *a)\n{\n  return ((a->tag == 0) && (a->pair[0] == 0)) && (a->pair[1] == 0);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "const lfs_gstate_t *",
                        "definition": [
                            "const lfs_gstate_t *a"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_gstate_hasorphans",
            "header": "",
            "params": [
                "const lfs_gstate_t *a"
            ],
            "definition": "inline static bool lfs_gstate_hasorphans(const lfs_gstate_t *a)\n{\n  return lfs_tag_size(a->tag);\n}\n\n",
            "calle": [
                "lfs_tag_size"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "const lfs_gstate_t *",
                        "definition": [
                            "const lfs_gstate_t *a"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_gstate_getorphans",
            "header": "",
            "params": [
                "const lfs_gstate_t *a"
            ],
            "definition": "inline static uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a)\n{\n  return lfs_tag_size(a->tag) & 0x1ff;\n}\n\n",
            "calle": [
                "lfs_tag_size"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "const lfs_gstate_t *",
                        "definition": [
                            "const lfs_gstate_t *a"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_gstate_hasmove",
            "header": "",
            "params": [
                "const lfs_gstate_t *a"
            ],
            "definition": "inline static bool lfs_gstate_hasmove(const lfs_gstate_t *a)\n{\n  return lfs_tag_type1(a->tag);\n}\n\n",
            "calle": [
                "lfs_tag_type1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "const lfs_gstate_t *",
                        "definition": [
                            "const lfs_gstate_t *a"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_gstate_needssuperblock",
            "header": "",
            "params": [
                "const lfs_gstate_t *a"
            ],
            "definition": "inline static bool lfs_gstate_needssuperblock(const lfs_gstate_t *a)\n{\n  return lfs_tag_size(a->tag) >> 9;\n}\n\n",
            "calle": [
                "lfs_tag_size"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "const lfs_gstate_t *",
                        "definition": [
                            "const lfs_gstate_t *a"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_gstate_hasmovehere",
            "header": "",
            "params": [
                "const lfs_gstate_t *a",
                "const lfs_block_t *pair"
            ],
            "definition": "inline static bool lfs_gstate_hasmovehere(const lfs_gstate_t *a, const lfs_block_t *pair)\n{\n  return lfs_tag_type1(a->tag) && (lfs_pair_cmp(a->pair, pair) == 0);\n}\n\n",
            "calle": [
                "lfs_pair_cmp",
                "lfs_tag_type1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "const lfs_gstate_t *",
                        "definition": [
                            "const lfs_gstate_t *a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pair",
                        "type": "const lfs_block_t *",
                        "definition": [
                            "const lfs_block_t *pair"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_gstate_fromle32",
            "header": "",
            "params": [
                "lfs_gstate_t *a"
            ],
            "definition": "inline static void lfs_gstate_fromle32(lfs_gstate_t *a)\n{\n  a->tag = lfs_fromle32(a->tag);\n  a->pair[0] = lfs_fromle32(a->pair[0]);\n  a->pair[1] = lfs_fromle32(a->pair[1]);\n}\n\n",
            "calle": [
                "lfs_fromle32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "lfs_gstate_t *",
                        "definition": [
                            "lfs_gstate_t *a"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_gstate_tole32",
            "header": "",
            "params": [
                "lfs_gstate_t *a"
            ],
            "definition": "inline static void lfs_gstate_tole32(lfs_gstate_t *a)\n{\n  a->tag = lfs_tole32(a->tag);\n  a->pair[0] = lfs_tole32(a->pair[0]);\n  a->pair[1] = lfs_tole32(a->pair[1]);\n}\n\n",
            "calle": [
                "lfs_tole32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "lfs_gstate_t *",
                        "definition": [
                            "lfs_gstate_t *a"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_fcrc_fromle32",
            "header": "",
            "params": [
                "struct lfs_fcrc *fcrc"
            ],
            "definition": "static void lfs_fcrc_fromle32(struct lfs_fcrc *fcrc)\n{\n  fcrc->size = lfs_fromle32(fcrc->size);\n  fcrc->crc = lfs_fromle32(fcrc->crc);\n}\n\n",
            "calle": [
                "lfs_fromle32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct lfs_fcrc",
                        "type": "struct lfs_fcrc *",
                        "definition": [
                            "struct lfs_fcrc *fcrc"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_fcrc_tole32",
            "header": "",
            "params": [
                "struct lfs_fcrc *fcrc"
            ],
            "definition": "static void lfs_fcrc_tole32(struct lfs_fcrc *fcrc)\n{\n  fcrc->size = lfs_tole32(fcrc->size);\n  fcrc->crc = lfs_tole32(fcrc->crc);\n}\n\n",
            "calle": [
                "lfs_tole32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct lfs_fcrc",
                        "type": "struct lfs_fcrc *",
                        "definition": [
                            "struct lfs_fcrc *fcrc"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_ctz_fromle32",
            "header": "",
            "params": [
                "struct lfs_ctz *ctz"
            ],
            "definition": "static void lfs_ctz_fromle32(struct lfs_ctz *ctz)\n{\n  ctz->head = lfs_fromle32(ctz->head);\n  ctz->size = lfs_fromle32(ctz->size);\n}\n\n",
            "calle": [
                "lfs_fromle32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct lfs_ctz",
                        "type": "struct lfs_ctz *",
                        "definition": [
                            "struct lfs_ctz *ctz"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_ctz_tole32",
            "header": "",
            "params": [
                "struct lfs_ctz *ctz"
            ],
            "definition": "static void lfs_ctz_tole32(struct lfs_ctz *ctz)\n{\n  ctz->head = lfs_tole32(ctz->head);\n  ctz->size = lfs_tole32(ctz->size);\n}\n\n",
            "calle": [
                "lfs_tole32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct lfs_ctz",
                        "type": "struct lfs_ctz *",
                        "definition": [
                            "struct lfs_ctz *ctz"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_superblock_fromle32",
            "header": "",
            "params": [
                "lfs_superblock_t *superblock"
            ],
            "definition": "inline static void lfs_superblock_fromle32(lfs_superblock_t *superblock)\n{\n  superblock->version = lfs_fromle32(superblock->version);\n  superblock->block_size = lfs_fromle32(superblock->block_size);\n  superblock->block_count = lfs_fromle32(superblock->block_count);\n  superblock->name_max = lfs_fromle32(superblock->name_max);\n  superblock->file_max = lfs_fromle32(superblock->file_max);\n  superblock->attr_max = lfs_fromle32(superblock->attr_max);\n}\n\n",
            "calle": [
                "lfs_fromle32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "superblock",
                        "type": "lfs_superblock_t *",
                        "definition": [
                            "lfs_superblock_t *superblock"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_superblock_tole32",
            "header": "",
            "params": [
                "lfs_superblock_t *superblock"
            ],
            "definition": "inline static void lfs_superblock_tole32(lfs_superblock_t *superblock)\n{\n  superblock->version = lfs_tole32(superblock->version);\n  superblock->block_size = lfs_tole32(superblock->block_size);\n  superblock->block_count = lfs_tole32(superblock->block_count);\n  superblock->name_max = lfs_tole32(superblock->name_max);\n  superblock->file_max = lfs_tole32(superblock->file_max);\n  superblock->attr_max = lfs_tole32(superblock->attr_max);\n}\n\n",
            "calle": [
                "lfs_tole32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "superblock",
                        "type": "lfs_superblock_t *",
                        "definition": [
                            "lfs_superblock_t *superblock"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_mlist_isopen",
            "header": "",
            "params": [
                "struct lfs_mlist *head",
                "struct lfs_mlist *node"
            ],
            "definition": "static bool lfs_mlist_isopen(struct lfs_mlist *head, struct lfs_mlist *node)\n{\n  for (struct lfs_mlist **p = &head; p[p_idx]; p_idx = &(*p_idx)->next)\n  {\n    if (p[p_idx] == ((struct lfs_mlist *) node))\n    {\n      return 1;\n    }\n  }\n\n  unsigned int p_idx = 0;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct lfs_mlist",
                        "type": "struct lfs_mlist *",
                        "definition": [
                            "struct lfs_mlist *head"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_mlist",
                        "type": "struct lfs_mlist *",
                        "definition": [
                            "struct lfs_mlist *node"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "struct lfs_mlist **",
                        "definition": [
                            "struct lfs_mlist **p = &head"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_mlist_remove",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "struct lfs_mlist *mlist"
            ],
            "definition": "static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist)\n{\n  for (struct lfs_mlist **p = &lfs->mlist; p[p_idx]; p_idx = &(*p_idx)->next)\n  {\n    if (p[p_idx] == mlist)\n    {\n      p[p_idx] = p[p_idx]->next;\n      break;\n    }\n  }\n\n  unsigned int p_idx = 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_mlist",
                        "type": "struct lfs_mlist *",
                        "definition": [
                            "struct lfs_mlist *mlist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "struct lfs_mlist **",
                        "definition": [
                            "struct lfs_mlist **p = &lfs->mlist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_mlist_append",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "struct lfs_mlist *mlist"
            ],
            "definition": "static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist)\n{\n  mlist->next = lfs->mlist;\n  lfs->mlist = mlist;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_mlist",
                        "type": "struct lfs_mlist *",
                        "definition": [
                            "struct lfs_mlist *mlist"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_fs_disk_version",
            "header": "",
            "params": [
                "lfs_t *lfs"
            ],
            "definition": "static uint32_t lfs_fs_disk_version(lfs_t *lfs)\n{\n  (void) lfs;\n  {\n    return 0x00020001;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_fs_disk_version_major",
            "header": "",
            "params": [
                "lfs_t *lfs"
            ],
            "definition": "static uint16_t lfs_fs_disk_version_major(lfs_t *lfs)\n{\n  return 0xffff & (lfs_fs_disk_version(lfs) >> 16);\n}\n\n",
            "calle": [
                "lfs_fs_disk_version"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_fs_disk_version_minor",
            "header": "",
            "params": [
                "lfs_t *lfs"
            ],
            "definition": "static uint16_t lfs_fs_disk_version_minor(lfs_t *lfs)\n{\n  return 0xffff & (lfs_fs_disk_version(lfs) >> 0);\n}\n\n",
            "calle": [
                "lfs_fs_disk_version"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_commit",
            "header": "static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount)",
            "params": [
                "lfs_t *lfs",
                "lfs_mdir_t *dir",
                "const struct lfs_mattr *attrs",
                "int attrcount"
            ],
            "definition": "static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount)\n{\n  int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);\n  if (orphans < 0)\n  {\n    return orphans;\n  }\n  if (orphans)\n  {\n    int err = lfs_fs_deorphan(lfs, 0);\n    if (err)\n    {\n      return err;\n    }\n  }\n  return 0;\n}\n\n",
            "calle": [
                "lfs_dir_orphaningcommit",
                "lfs_fs_deorphan"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t *",
                        "definition": [
                            "lfs_mdir_t *dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_mattr",
                        "type": "const struct lfs_mattr *",
                        "definition": [
                            "const struct lfs_mattr *attrs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attrcount",
                        "type": "int",
                        "definition": [
                            "int attrcount"
                        ]
                    },
                    {
                        "path": null,
                        "name": "orphans",
                        "type": "int",
                        "definition": [
                            "int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_fs_deorphan(lfs, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_compact",
            "header": "static int lfs_dir_compact(lfs_t *lfs, lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount, lfs_mdir_t *source, uint16_t begin, uint16_t end)",
            "params": [
                "lfs_t *lfs",
                "lfs_mdir_t *dir",
                "const struct lfs_mattr *attrs",
                "int attrcount",
                "lfs_mdir_t *source",
                "uint16_t begin",
                "uint16_t end"
            ],
            "definition": "static int lfs_dir_compact(lfs_t *lfs, lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount, lfs_mdir_t *source, uint16_t begin, uint16_t end)\n{\n  bool relocated = 0;\n  bool tired = lfs_dir_needsrelocation(lfs, dir);\n  dir->rev += 1;\n  if (tired && (lfs_pair_cmp(dir->pair, (const lfs_block_t [2]){0, 1}) != 0))\n  {\n    goto relocate;\n  }\n  while (1)\n  {\n    helper_lfs_dir_compact_1(&relocated, &tired, lfs, dir, attrs, attrcount, source, begin, end);\n  }\n\n  return (relocated) ? (LFS_OK_RELOCATED) : (0);\n}\n\n",
            "calle": [
                "helper_lfs_dir_compact_1",
                "lfs_dir_needsrelocation",
                "lfs_pair_cmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t *",
                        "definition": [
                            "lfs_mdir_t *dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_mattr",
                        "type": "const struct lfs_mattr *",
                        "definition": [
                            "const struct lfs_mattr *attrs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attrcount",
                        "type": "int",
                        "definition": [
                            "int attrcount"
                        ]
                    },
                    {
                        "path": null,
                        "name": "source",
                        "type": "lfs_mdir_t *",
                        "definition": [
                            "lfs_mdir_t *source"
                        ]
                    },
                    {
                        "path": null,
                        "name": "begin",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t begin"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "relocated",
                        "type": "bool",
                        "definition": [
                            "bool relocated = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tired",
                        "type": "bool",
                        "definition": [
                            "bool tired = lfs_dir_needsrelocation(lfs, dir)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_file_flushedwrite",
            "header": "static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file, const void *buffer, lfs_size_t size)",
            "params": [
                "lfs_t *lfs",
                "lfs_file_t *file",
                "const void *buffer",
                "lfs_size_t size"
            ],
            "definition": "static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file, const void *buffer, lfs_size_t size)\n{\n  const uint8_t *data = buffer;\n  unsigned int data_idx = 0;\n  lfs_size_t nsize = size;\n  if ((file->flags & LFS_F_INLINE) && (lfs_max(file->pos + nsize, file->ctz.size) > lfs->inline_max))\n  {\n    int err = lfs_file_outline(lfs, file);\n    if (err)\n    {\n      file->flags |= LFS_F_ERRED;\n      return err;\n    }\n  }\n  while (nsize > 0)\n  {\n    helper_lfs_file_flushedwrite_1(&data_idx, &nsize, lfs, file, data);\n  }\n\n  return size;\n}\n\n",
            "calle": [
                "helper_lfs_file_flushedwrite_1",
                "lfs_file_outline",
                "lfs_max"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t *",
                        "definition": [
                            "lfs_file_t *file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "const void *",
                        "definition": [
                            "const void *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *data = buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int data_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nsize",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t nsize = size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_file_outline(lfs, file)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_file_write_",
            "header": "static lfs_ssize_t lfs_file_write_(lfs_t *lfs, lfs_file_t *file, const void *buffer, lfs_size_t size)",
            "params": [
                "lfs_t *lfs",
                "lfs_file_t *file",
                "const void *buffer",
                "lfs_size_t size"
            ],
            "definition": "static lfs_ssize_t lfs_file_write_(lfs_t *lfs, lfs_file_t *file, const void *buffer, lfs_size_t size)\n{\n  assert((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n  if (file->flags & LFS_F_READING)\n  {\n    int err = lfs_file_flush(lfs, file);\n    if (err)\n    {\n      return err;\n    }\n  }\n  if ((file->flags & LFS_O_APPEND) && (file->pos < file->ctz.size))\n  {\n    file->pos = file->ctz.size;\n  }\n  if ((file->pos + size) > lfs->file_max)\n  {\n    return LFS_ERR_FBIG;\n  }\n  if ((!(file->flags & LFS_F_WRITING)) && (file->pos > file->ctz.size))\n  {\n    lfs_off_t pos = file->pos;\n    file->pos = file->ctz.size;\n    while (file->pos < pos)\n    {\n      lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &((uint8_t){0}), 1);\n      if (res < 0)\n      {\n        return res;\n      }\n    }\n\n  }\n  lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);\n  if (nsize < 0)\n  {\n    return nsize;\n  }\n  file->flags &= ~LFS_F_ERRED;\n  return nsize;\n}\n\n",
            "calle": [
                "assert",
                "lfs_file_flush",
                "lfs_file_flushedwrite"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t *",
                        "definition": [
                            "lfs_file_t *file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "const void *",
                        "definition": [
                            "const void *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_file_flush(lfs, file)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t pos = file->pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res",
                        "type": "lfs_ssize_t",
                        "definition": [
                            "lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &((uint8_t){0}), 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nsize",
                        "type": "lfs_ssize_t",
                        "definition": [
                            "lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_file_sync_",
            "header": "static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file)",
            "params": [
                "lfs_t *lfs",
                "lfs_file_t *file"
            ],
            "definition": "static int lfs_file_sync_(lfs_t *lfs, lfs_file_t *file)\n{\n  if (file->flags & LFS_F_ERRED)\n  {\n    return 0;\n  }\n  int err = lfs_file_flush(lfs, file);\n  if (err)\n  {\n    file->flags |= LFS_F_ERRED;\n    return err;\n  }\n  if ((file->flags & LFS_F_DIRTY) && (!lfs_pair_isnull(file->m.pair)))\n  {\n    helper_lfs_file_sync__1(&err, lfs, file);\n  }\n  return 0;\n}\n\n",
            "calle": [
                "helper_lfs_file_sync__1",
                "lfs_file_flush",
                "lfs_pair_isnull"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t *",
                        "definition": [
                            "lfs_file_t *file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_file_flush(lfs, file)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_file_outline",
            "header": "static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file)",
            "params": [
                "lfs_t *lfs",
                "lfs_file_t *file"
            ],
            "definition": "static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file)\n{\n  file->off = file->pos;\n  lfs_alloc_ckpoint(lfs);\n  int err = lfs_file_relocate(lfs, file);\n  if (err)\n  {\n    return err;\n  }\n  file->flags &= ~LFS_F_INLINE;\n  return 0;\n}\n\n",
            "calle": [
                "lfs_alloc_ckpoint",
                "lfs_file_relocate"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t *",
                        "definition": [
                            "lfs_file_t *file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_file_relocate(lfs, file)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_file_flush",
            "header": "static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file)",
            "params": [
                "lfs_t *lfs",
                "lfs_file_t *file"
            ],
            "definition": "static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file)\n{\n  if (file->flags & LFS_F_READING)\n  {\n    if (!(file->flags & LFS_F_INLINE))\n    {\n      lfs_cache_drop(lfs, &file->cache);\n    }\n    file->flags &= ~LFS_F_READING;\n  }\n  if (file->flags & LFS_F_WRITING)\n  {\n    helper_lfs_file_flush_1(lfs, file);\n  }\n  return 0;\n}\n\n",
            "calle": [
                "helper_lfs_file_flush_1",
                "lfs_cache_drop"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t *",
                        "definition": [
                            "lfs_file_t *file"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_fs_deorphan",
            "header": "static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss)",
            "params": [
                "lfs_t *lfs",
                "bool powerloss"
            ],
            "definition": "static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss)\n{\n  if (!lfs_gstate_hasorphans(&lfs->gstate))\n  {\n    return 0;\n  }\n  int pass = 0;\n  while (pass < 2)\n  {\n    helper_lfs_fs_deorphan_1(&pass, lfs, powerloss);\n  }\n\n  return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));\n}\n\n",
            "calle": [
                "helper_lfs_fs_deorphan_1",
                "lfs_fs_preporphans",
                "lfs_gstate_getorphans",
                "lfs_gstate_hasorphans"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "powerloss",
                        "type": "bool",
                        "definition": [
                            "bool powerloss"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pass",
                        "type": "int",
                        "definition": [
                            "int pass = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_fs_preporphans",
            "header": "static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans)",
            "params": [
                "lfs_t *lfs",
                "int8_t orphans"
            ],
            "definition": "static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans)\n{\n  assert((lfs_tag_size(lfs->gstate.tag) > 0x000) || (orphans >= 0));\n  assert((lfs_tag_size(lfs->gstate.tag) < 0x1ff) || (orphans <= 0));\n  lfs->gstate.tag += orphans;\n  lfs->gstate.tag = (lfs->gstate.tag & (~(((((lfs_tag_t) 0x800) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0)))) | (((uint32_t) lfs_gstate_hasorphans(&lfs->gstate)) << 31);\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "lfs_gstate_hasorphans",
                "lfs_tag_size"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "orphans",
                        "type": "int8_t",
                        "definition": [
                            "int8_t orphans"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_fs_prepmove",
            "header": "static void lfs_fs_prepmove(lfs_t *lfs, uint16_t id, const lfs_block_t pair[2])",
            "params": [
                "lfs_t *lfs",
                "uint16_t id",
                "const lfs_block_t pair[2]"
            ],
            "definition": "static void lfs_fs_prepmove(lfs_t *lfs, uint16_t id, const lfs_block_t pair[2])\n{\n  lfs->gstate.tag = (lfs->gstate.tag & (~(((((lfs_tag_t) 0x7ff) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0)))) | ((id != 0x3ff) ? (((((lfs_tag_t) LFS_TYPE_DELETE) << 20) | (((lfs_tag_t) id) << 10)) | ((lfs_tag_t) 0)) : (0));\n  lfs->gstate.pair[0] = (id != 0x3ff) ? (pair[0]) : (0);\n  lfs->gstate.pair[1] = (id != 0x3ff) ? (pair[1]) : (0);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pair",
                        "type": "const lfs_block_t [2]",
                        "definition": [
                            "const lfs_block_t pair[2]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_fs_pred",
            "header": "static int lfs_fs_pred(lfs_t *lfs, const lfs_block_t dir[2], lfs_mdir_t *pdir)",
            "params": [
                "lfs_t *lfs",
                "const lfs_block_t pair[2]",
                "lfs_mdir_t *pdir"
            ],
            "definition": "static int lfs_fs_pred(lfs_t *lfs, const lfs_block_t pair[2], lfs_mdir_t *pdir)\n{\n  pdir->tail[0] = 0;\n  pdir->tail[1] = 1;\n  struct lfs_tortoise_t tortoise = {.pair = {(lfs_block_t) (-1), (lfs_block_t) (-1)}, .i = 1, .period = 1};\n  int err = LFS_ERR_OK;\n  while (!lfs_pair_isnull(pdir->tail))\n  {\n    err = lfs_tortoise_detectcycles(pdir, &tortoise);\n    if (err < 0)\n    {\n      return LFS_ERR_CORRUPT;\n    }\n    if (lfs_pair_cmp(pdir->tail, pair) == 0)\n    {\n      return 0;\n    }\n    int err = lfs_dir_fetch(lfs, pdir, pdir->tail);\n    if (err)\n    {\n      return err;\n    }\n  }\n\n  return LFS_ERR_NOENT;\n}\n\n",
            "calle": [
                "lfs_dir_fetch",
                "lfs_pair_cmp",
                "lfs_pair_isnull",
                "lfs_tortoise_detectcycles"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pair",
                        "type": "const lfs_block_t [2]",
                        "definition": [
                            "const lfs_block_t pair[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pdir",
                        "type": "lfs_mdir_t *",
                        "definition": [
                            "lfs_mdir_t *pdir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tortoise",
                        "type": "struct lfs_tortoise_t",
                        "definition": [
                            "struct lfs_tortoise_t tortoise = {.pair = {(lfs_block_t) (-1), (lfs_block_t) (-1)}, .i = 1, .period = 1}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = LFS_ERR_OK",
                            "int err = lfs_dir_fetch(lfs, pdir, pdir->tail)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_fs_parent",
            "header": "static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t dir[2], lfs_mdir_t *parent)",
            "params": [
                "lfs_t *lfs",
                "const lfs_block_t pair[2]",
                "lfs_mdir_t *parent"
            ],
            "definition": "static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2], lfs_mdir_t *parent)\n{\n  parent->tail[0] = 0;\n  parent->tail[1] = 1;\n  struct lfs_tortoise_t tortoise = {.pair = {(lfs_block_t) (-1), (lfs_block_t) (-1)}, .i = 1, .period = 1};\n  int err = LFS_ERR_OK;\n  while (!lfs_pair_isnull(parent->tail))\n  {\n    err = lfs_tortoise_detectcycles(parent, &tortoise);\n    if (err < 0)\n    {\n      return err;\n    }\n    lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail, ((((lfs_tag_t) 0x7ff) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0x3ff), ((((lfs_tag_t) LFS_TYPE_DIRSTRUCT) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 8), 0, lfs_fs_parent_match, &((struct lfs_fs_parent_match){lfs, {pair[0], pair[1]}}));\n    if (tag && (tag != LFS_ERR_NOENT))\n    {\n      return tag;\n    }\n  }\n\n  return LFS_ERR_NOENT;\n}\n\n",
            "calle": [
                "lfs_dir_fetchmatch",
                "lfs_fs_parent_match",
                "lfs_pair_isnull",
                "lfs_tortoise_detectcycles"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pair",
                        "type": "const lfs_block_t [2]",
                        "definition": [
                            "const lfs_block_t pair[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "parent",
                        "type": "lfs_mdir_t *",
                        "definition": [
                            "lfs_mdir_t *parent"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tortoise",
                        "type": "struct lfs_tortoise_t",
                        "definition": [
                            "struct lfs_tortoise_t tortoise = {.pair = {(lfs_block_t) (-1), (lfs_block_t) (-1)}, .i = 1, .period = 1}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = LFS_ERR_OK"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail, ((((lfs_tag_t) 0x7ff) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0x3ff), ((((lfs_tag_t) LFS_TYPE_DIRSTRUCT) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 8), 0, lfs_fs_parent_match, &((struct lfs_fs_parent_match){lfs, {pair[0], pair[1]}}))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_fs_forceconsistency",
            "header": "static int lfs_fs_forceconsistency(lfs_t *lfs)",
            "params": [
                "lfs_t *lfs"
            ],
            "definition": "static int lfs_fs_forceconsistency(lfs_t *lfs)\n{\n  int err = lfs_fs_desuperblock(lfs);\n  if (err)\n  {\n    return err;\n  }\n  err = lfs_fs_demove(lfs);\n  if (err)\n  {\n    return err;\n  }\n  err = lfs_fs_deorphan(lfs, 1);\n  if (err)\n  {\n    return err;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "lfs_fs_demove",
                "lfs_fs_deorphan",
                "lfs_fs_desuperblock"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_fs_desuperblock(lfs)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_fs_prepsuperblock",
            "header": "static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock)",
            "params": [
                "lfs_t *lfs",
                "bool needssuperblock"
            ],
            "definition": "static void lfs_fs_prepsuperblock(lfs_t *lfs, bool needssuperblock)\n{\n  lfs->gstate.tag = (lfs->gstate.tag & (~(((((lfs_tag_t) 0) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0x200)))) | (((uint32_t) needssuperblock) << 9);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "needssuperblock",
                        "type": "bool",
                        "definition": [
                            "bool needssuperblock"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_rewind_",
            "header": "static int lfs_dir_rewind_(lfs_t *lfs, lfs_dir_t *dir)",
            "params": [
                "lfs_t *lfs",
                "lfs_dir_t *dir"
            ],
            "definition": "static int lfs_dir_rewind_(lfs_t *lfs, lfs_dir_t *dir)\n{\n  int err = lfs_dir_fetch(lfs, &dir->m, dir->head);\n  if (err)\n  {\n    return err;\n  }\n  dir->id = 0;\n  dir->pos = 0;\n  return 0;\n}\n\n",
            "calle": [
                "lfs_dir_fetch"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_dir_t *",
                        "definition": [
                            "lfs_dir_t *dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_dir_fetch(lfs, &dir->m, dir->head)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_file_flushedread",
            "header": "static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file, void *buffer, lfs_size_t size)",
            "params": [
                "lfs_t *lfs",
                "lfs_file_t *file",
                "void *buffer",
                "lfs_size_t size"
            ],
            "definition": "static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file, void *buffer, lfs_size_t size)\n{\n  uint8_t *data = buffer;\n  unsigned int data_idx = 0;\n  lfs_size_t nsize = size;\n  if (file->pos >= file->ctz.size)\n  {\n    return 0;\n  }\n  size = lfs_min(size, file->ctz.size - file->pos);\n  nsize = size;\n  while (nsize > 0)\n  {\n    if ((!(file->flags & LFS_F_READING)) || (file->off == lfs->cfg->block_size))\n    {\n      if (!(file->flags & LFS_F_INLINE))\n      {\n        int err = lfs_ctz_find(lfs, 0, &file->cache, file->ctz.head, file->ctz.size, file->pos, &file->block, &file->off);\n        if (err)\n        {\n          return err;\n        }\n      }\n      else\n      {\n        file->block = (lfs_block_t) (-2);\n        file->off = file->pos;\n      }\n      file->flags |= LFS_F_READING;\n    }\n    lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);\n    if (file->flags & LFS_F_INLINE)\n    {\n      int err = lfs_dir_getread(lfs, &file->m, 0, &file->cache, lfs->cfg->block_size, ((((lfs_tag_t) 0xfff) << 20) | (((lfs_tag_t) 0x1ff) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) LFS_TYPE_INLINESTRUCT) << 20) | (((lfs_tag_t) file->id) << 10)) | ((lfs_tag_t) 0), file->off, data, diff);\n      if (err)\n      {\n        return err;\n      }\n    }\n    else\n    {\n      int err = lfs_bd_read(lfs, 0, &file->cache, lfs->cfg->block_size, file->block, file->off, data, diff);\n      if (err)\n      {\n        return err;\n      }\n    }\n    file->pos += diff;\n    file->off += diff;\n    data_idx += diff;\n    nsize -= diff;\n  }\n\n  return size;\n}\n\n",
            "calle": [
                "lfs_bd_read",
                "lfs_ctz_find",
                "lfs_dir_getread",
                "lfs_min"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t *",
                        "definition": [
                            "lfs_file_t *file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "void *",
                        "definition": [
                            "void *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data = buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int data_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nsize",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t nsize = size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_bd_read(lfs, 0, &file->cache, lfs->cfg->block_size, file->block, file->off, data, diff)",
                            "int err = lfs_ctz_find(lfs, 0, &file->cache, file->ctz.head, file->ctz.size, file->pos, &file->block, &file->off)",
                            "int err = lfs_dir_getread(lfs, &file->m, 0, &file->cache, lfs->cfg->block_size, ((((lfs_tag_t) 0xfff) << 20) | (((lfs_tag_t) 0x1ff) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) LFS_TYPE_INLINESTRUCT) << 20) | (((lfs_tag_t) file->id) << 10)) | ((lfs_tag_t) 0), file->off, data, diff)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_file_read_",
            "header": "static lfs_ssize_t lfs_file_read_(lfs_t *lfs, lfs_file_t *file, void *buffer, lfs_size_t size)",
            "params": [
                "lfs_t *lfs",
                "lfs_file_t *file",
                "void *buffer",
                "lfs_size_t size"
            ],
            "definition": "static lfs_ssize_t lfs_file_read_(lfs_t *lfs, lfs_file_t *file, void *buffer, lfs_size_t size)\n{\n  assert((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);\n  if (file->flags & LFS_F_WRITING)\n  {\n    int err = lfs_file_flush(lfs, file);\n    if (err)\n    {\n      return err;\n    }\n  }\n  return lfs_file_flushedread(lfs, file, buffer, size);\n}\n\n",
            "calle": [
                "assert",
                "lfs_file_flush",
                "lfs_file_flushedread"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t *",
                        "definition": [
                            "lfs_file_t *file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "void *",
                        "definition": [
                            "void *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_file_flush(lfs, file)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_file_close_",
            "header": "static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file)",
            "params": [
                "lfs_t *lfs",
                "lfs_file_t *file"
            ],
            "definition": "static int lfs_file_close_(lfs_t *lfs, lfs_file_t *file)\n{\n  int err = lfs_file_sync_(lfs, file);\n  lfs_mlist_remove(lfs, (struct lfs_mlist *) file);\n  if (!file->cfg->buffer)\n  {\n    lfs_free(file->cache.buffer);\n  }\n  return err;\n}\n\n",
            "calle": [
                "lfs_file_sync_",
                "lfs_free",
                "lfs_mlist_remove"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t *",
                        "definition": [
                            "lfs_file_t *file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_file_sync_(lfs, file)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_file_size_",
            "header": "static lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file)",
            "params": [
                "lfs_t *lfs",
                "lfs_file_t *file"
            ],
            "definition": "static lfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file)\n{\n  (void) lfs;\n  if (file->flags & LFS_F_WRITING)\n  {\n    return lfs_max(file->pos, file->ctz.size);\n  }\n  return file->ctz.size;\n}\n\n",
            "calle": [
                "lfs_max"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t *",
                        "definition": [
                            "lfs_file_t *file"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_fs_size_",
            "header": "static lfs_ssize_t lfs_fs_size_(lfs_t *lfs)",
            "params": [
                "lfs_t *lfs"
            ],
            "definition": "static lfs_ssize_t lfs_fs_size_(lfs_t *lfs)\n{\n  lfs_size_t size = 0;\n  int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, 0);\n  if (err)\n  {\n    return err;\n  }\n  return size;\n}\n\n",
            "calle": [
                "lfs_fs_size_count",
                "lfs_fs_traverse_"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t size = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_fs_traverse_(lfs, lfs_fs_size_count, &size, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_fs_traverse_",
            "header": "static int lfs_fs_traverse_(lfs_t *lfs, int (*cb)(void *data, lfs_block_t block), void *data, bool includeorphans)",
            "params": [
                "lfs_t *lfs",
                "int (*cb)(void *data, lfs_block_t block)",
                "void *data",
                "bool includeorphans"
            ],
            "definition": "int lfs_fs_traverse_(lfs_t *lfs, int (*cb)(void *data, lfs_block_t block), void *data, bool includeorphans)\n{\n  lfs_mdir_t dir = {.tail = {0, 1}};\n  struct lfs_tortoise_t tortoise = {.pair = {(lfs_block_t) (-1), (lfs_block_t) (-1)}, .i = 1, .period = 1};\n  int err = LFS_ERR_OK;\n  while (!lfs_pair_isnull(dir.tail))\n  {\n    helper_lfs_fs_traverse__1(&err, &err, &err, &err, &err, lfs, cb, data, data, includeorphans, dir, tortoise);\n  }\n\n  for (lfs_file_t *f = (lfs_file_t *) lfs->mlist; f; f_idx = f_idx->next)\n  {\n    if (f->type != LFS_TYPE_REG)\n    {\n      continue;\n    }\n    if ((f->flags & LFS_F_DIRTY) && (!(f->flags & LFS_F_INLINE)))\n    {\n      int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache, f->ctz.head, f->ctz.size, cb, data);\n      if (err)\n      {\n        return err;\n      }\n    }\n    if ((f->flags & LFS_F_WRITING) && (!(f->flags & LFS_F_INLINE)))\n    {\n      int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache, f->block, f->pos, cb, data);\n      if (err)\n      {\n        return err;\n      }\n    }\n  }\n\n  unsigned int f_idx = 0;\n  return 0;\n}\n\n",
            "calle": [
                "helper_lfs_fs_traverse__1",
                "lfs_ctz_traverse",
                "lfs_pair_isnull"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb",
                        "type": "int (*)(void *data, lfs_block_t block)",
                        "definition": [
                            "int (*cb)(void *data, lfs_block_t block)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "void *",
                        "definition": [
                            "void *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "includeorphans",
                        "type": "bool",
                        "definition": [
                            "bool includeorphans"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t dir = {.tail = {0, 1}}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tortoise",
                        "type": "struct lfs_tortoise_t",
                        "definition": [
                            "struct lfs_tortoise_t tortoise = {.pair = {(lfs_block_t) (-1), (lfs_block_t) (-1)}, .i = 1, .period = 1}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = LFS_ERR_OK",
                            "int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache, f->block, f->pos, cb, data)",
                            "int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache, f->ctz.head, f->ctz.size, cb, data)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f",
                        "type": "lfs_file_t *",
                        "definition": [
                            "lfs_file_t *f = (lfs_file_t *) lfs->mlist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int f_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_deinit",
            "header": "static int lfs_deinit(lfs_t *lfs)",
            "params": [
                "lfs_t *lfs"
            ],
            "definition": "static int lfs_deinit(lfs_t *lfs)\n{\n  if (!lfs->cfg->read_buffer)\n  {\n    lfs_free(lfs->rcache.buffer);\n  }\n  if (!lfs->cfg->prog_buffer)\n  {\n    lfs_free(lfs->pcache.buffer);\n  }\n  if (!lfs->cfg->lookahead_buffer)\n  {\n    lfs_free(lfs->lookahead.buffer);\n  }\n  return 0;\n}\n\n",
            "calle": [
                "lfs_free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_unmount_",
            "header": "static int lfs_unmount_(lfs_t *lfs)",
            "params": [
                "lfs_t *lfs"
            ],
            "definition": "static int lfs_unmount_(lfs_t *lfs)\n{\n  return lfs_deinit(lfs);\n}\n\n",
            "calle": [
                "lfs_deinit"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_alloc_ckpoint",
            "header": "",
            "params": [
                "lfs_t *lfs"
            ],
            "definition": "static void lfs_alloc_ckpoint(lfs_t *lfs)\n{\n  lfs->lookahead.ckpoint = lfs->block_count;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_alloc_drop",
            "header": "",
            "params": [
                "lfs_t *lfs"
            ],
            "definition": "static void lfs_alloc_drop(lfs_t *lfs)\n{\n  lfs->lookahead.size = 0;\n  lfs->lookahead.next = 0;\n  lfs_alloc_ckpoint(lfs);\n}\n\n",
            "calle": [
                "lfs_alloc_ckpoint"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_alloc_lookahead",
            "header": "",
            "params": [
                "void *p",
                "lfs_block_t block"
            ],
            "definition": "static int lfs_alloc_lookahead(void *p, lfs_block_t block)\n{\n  lfs_t *lfs = (lfs_t *) p;\n  lfs_block_t off = ((block - lfs->lookahead.start) + lfs->block_count) % lfs->block_count;\n  if (off < lfs->lookahead.size)\n  {\n    lfs->lookahead.buffer[off / 8] |= 1U << (off % 8);\n  }\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p",
                        "type": "void *",
                        "definition": [
                            "void *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "lfs_block_t",
                        "definition": [
                            "lfs_block_t block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs = (lfs_t *) p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_block_t",
                        "definition": [
                            "lfs_block_t off = ((block - lfs->lookahead.start) + lfs->block_count) % lfs->block_count"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_alloc_scan",
            "header": "",
            "params": [
                "lfs_t *lfs"
            ],
            "definition": "static int lfs_alloc_scan(lfs_t *lfs)\n{\n  lfs->lookahead.start = (lfs->lookahead.start + lfs->lookahead.next) % lfs->block_count;\n  lfs->lookahead.next = 0;\n  lfs->lookahead.size = lfs_min(8 * lfs->cfg->lookahead_size, lfs->lookahead.ckpoint);\n  memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);\n  int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, 1);\n  if (err)\n  {\n    lfs_alloc_drop(lfs);\n    return err;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "lfs_alloc_drop",
                "lfs_alloc_lookahead",
                "lfs_fs_traverse_",
                "lfs_min",
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_fs_traverse_(lfs, lfs_alloc_lookahead, lfs, 1)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_alloc",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "lfs_block_t *block"
            ],
            "definition": "static int lfs_alloc(lfs_t *lfs, lfs_block_t *block)\n{\n  while (1)\n  {\n    while (lfs->lookahead.next < lfs->lookahead.size)\n    {\n      if (!(lfs->lookahead.buffer[lfs->lookahead.next / 8] & (1U << (lfs->lookahead.next % 8))))\n      {\n        *block = (lfs->lookahead.start + lfs->lookahead.next) % lfs->block_count;\n        while (1)\n        {\n          lfs->lookahead.next += 1;\n          lfs->lookahead.ckpoint -= 1;\n          if ((lfs->lookahead.next >= lfs->lookahead.size) || (!(lfs->lookahead.buffer[lfs->lookahead.next / 8] & (1U << (lfs->lookahead.next % 8)))))\n          {\n            return 0;\n          }\n        }\n\n      }\n      lfs->lookahead.next += 1;\n      lfs->lookahead.ckpoint -= 1;\n    }\n\n    if (lfs->lookahead.ckpoint <= 0)\n    {\n      printf(\"%s:%d:error: No more free space 0x%x%s\\n\", \"/home/ubuntu/C2RustTranslation/subjects/littlefs/lfs.c\", 702, (lfs->lookahead.start + lfs->lookahead.next) % lfs->block_count, \"\");\n      return LFS_ERR_NOSPC;\n    }\n    int err = lfs_alloc_scan(lfs);\n    if (err)\n    {\n      return err;\n    }\n  }\n\n}\n\n",
            "calle": [
                "lfs_alloc_scan",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "lfs_block_t *",
                        "definition": [
                            "lfs_block_t *block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_alloc_scan(lfs)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_getslice",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "const lfs_mdir_t *dir",
                "lfs_tag_t gmask",
                "lfs_tag_t gtag",
                "lfs_off_t goff",
                "void *gbuffer",
                "lfs_size_t gsize"
            ],
            "definition": "static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir, lfs_tag_t gmask, lfs_tag_t gtag, lfs_off_t goff, void *gbuffer, lfs_size_t gsize)\n{\n  lfs_off_t off = dir->off;\n  lfs_tag_t ntag = dir->etag;\n  lfs_stag_t gdiff = 0;\n  if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) && (lfs_tag_id(gmask) != 0))\n  {\n    if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(gtag))\n    {\n      return LFS_ERR_NOENT;\n    }\n    else\n      if (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(gtag))\n    {\n      gdiff -= ((((lfs_tag_t) 0) << 20) | (((lfs_tag_t) 1) << 10)) | ((lfs_tag_t) 0);\n    }\n  }\n  while (off >= ((sizeof(lfs_tag_t)) + lfs_tag_dsize(ntag)))\n  {\n    off -= lfs_tag_dsize(ntag);\n    lfs_tag_t tag = ntag;\n    int err = lfs_bd_read(lfs, 0, &lfs->rcache, sizeof(ntag), dir->pair[0], off, &ntag, sizeof(ntag));\n    assert(err <= 0);\n    if (err)\n    {\n      return err;\n    }\n    ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;\n    if (((lfs_tag_id(gmask) != 0) && (lfs_tag_type1(tag) == LFS_TYPE_SPLICE)) && (lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)))\n    {\n      if (tag == ((((((lfs_tag_t) LFS_TYPE_CREATE) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0)) | ((((((lfs_tag_t) 0) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0)) & (gtag - gdiff))))\n      {\n        return LFS_ERR_NOENT;\n      }\n      gdiff += ((((lfs_tag_t) 0) << 20) | (((lfs_tag_t) lfs_tag_splice(tag)) << 10)) | ((lfs_tag_t) 0);\n    }\n    if ((gmask & tag) == (gmask & (gtag - gdiff)))\n    {\n      if (lfs_tag_isdelete(tag))\n      {\n        return LFS_ERR_NOENT;\n      }\n      lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);\n      err = lfs_bd_read(lfs, 0, &lfs->rcache, diff, dir->pair[0], (off + (sizeof(tag))) + goff, gbuffer, diff);\n      assert(err <= 0);\n      if (err)\n      {\n        return err;\n      }\n      memset(((uint8_t *) gbuffer) + diff, 0, gsize - diff);\n      return tag + gdiff;\n    }\n  }\n\n  return LFS_ERR_NOENT;\n}\n\n",
            "calle": [
                "assert",
                "lfs_bd_read",
                "lfs_frombe32",
                "lfs_gstate_hasmovehere",
                "lfs_min",
                "lfs_tag_dsize",
                "lfs_tag_id",
                "lfs_tag_isdelete",
                "lfs_tag_size",
                "lfs_tag_splice",
                "lfs_tag_type1",
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "const lfs_mdir_t *",
                        "definition": [
                            "const lfs_mdir_t *dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gmask",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t gmask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gtag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t gtag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "goff",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t goff"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gbuffer",
                        "type": "void *",
                        "definition": [
                            "void *gbuffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gsize",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t gsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t off = dir->off"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ntag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t ntag = dir->etag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gdiff",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t gdiff = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tag = ntag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_bd_read(lfs, 0, &lfs->rcache, sizeof(ntag), dir->pair[0], off, &ntag, sizeof(ntag))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_get",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "const lfs_mdir_t *dir",
                "lfs_tag_t gmask",
                "lfs_tag_t gtag",
                "void *buffer"
            ],
            "definition": "static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir, lfs_tag_t gmask, lfs_tag_t gtag, void *buffer)\n{\n  return lfs_dir_getslice(lfs, dir, gmask, gtag, 0, buffer, lfs_tag_size(gtag));\n}\n\n",
            "calle": [
                "lfs_dir_getslice",
                "lfs_tag_size"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "const lfs_mdir_t *",
                        "definition": [
                            "const lfs_mdir_t *dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gmask",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t gmask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gtag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t gtag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "void *",
                        "definition": [
                            "void *buffer"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_getread",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "const lfs_mdir_t *dir",
                "const lfs_cache_t *pcache",
                "lfs_cache_t *rcache",
                "lfs_size_t hint",
                "lfs_tag_t gmask",
                "lfs_tag_t gtag",
                "lfs_off_t off",
                "void *buffer",
                "lfs_size_t size"
            ],
            "definition": "static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir, const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint, lfs_tag_t gmask, lfs_tag_t gtag, lfs_off_t off, void *buffer, lfs_size_t size)\n{\n  uint8_t *data = buffer;\n  unsigned int data_idx = 0;\n  if ((off + size) > lfs->cfg->block_size)\n  {\n    return LFS_ERR_CORRUPT;\n  }\n  while (size > 0)\n  {\n    lfs_size_t diff = size;\n    if ((pcache && (pcache->block == ((lfs_block_t) (-2)))) && (off < (pcache->off + pcache->size)))\n    {\n      if (off >= pcache->off)\n      {\n        diff = lfs_min(diff, pcache->size - (off - pcache->off));\n        memcpy(data, &pcache->buffer[off - pcache->off], diff);\n        data_idx += diff;\n        off += diff;\n        size -= diff;\n        continue;\n      }\n      diff = lfs_min(diff, pcache->off - off);\n    }\n    if ((rcache->block == ((lfs_block_t) (-2))) && (off < (rcache->off + rcache->size)))\n    {\n      if (off >= rcache->off)\n      {\n        diff = lfs_min(diff, rcache->size - (off - rcache->off));\n        memcpy(data, &rcache->buffer[off - rcache->off], diff);\n        data_idx += diff;\n        off += diff;\n        size -= diff;\n        continue;\n      }\n    }\n    rcache->block = (lfs_block_t) (-2);\n    rcache->off = lfs_aligndown(off, lfs->cfg->read_size);\n    rcache->size = lfs_min(lfs_alignup(off + hint, lfs->cfg->read_size), lfs->cfg->cache_size);\n    int err = lfs_dir_getslice(lfs, dir, gmask, gtag, rcache->off, rcache->buffer, rcache->size);\n    if (err < 0)\n    {\n      return err;\n    }\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "lfs_aligndown",
                "lfs_alignup",
                "lfs_dir_getslice",
                "lfs_min",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "const lfs_mdir_t *",
                        "definition": [
                            "const lfs_mdir_t *dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pcache",
                        "type": "const lfs_cache_t *",
                        "definition": [
                            "const lfs_cache_t *pcache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rcache",
                        "type": "lfs_cache_t *",
                        "definition": [
                            "lfs_cache_t *rcache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hint",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t hint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gmask",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t gmask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gtag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t gtag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t off"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "void *",
                        "definition": [
                            "void *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data = buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int data_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t diff = size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_dir_getslice(lfs, dir, gmask, gtag, rcache->off, rcache->buffer, rcache->size)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_traverse_filter",
            "header": "",
            "params": [
                "void *p",
                "lfs_tag_t tag",
                "const void *buffer"
            ],
            "definition": "static int lfs_dir_traverse_filter(void *p, lfs_tag_t tag, const void *buffer)\n{\n  lfs_tag_t *filtertag = p;\n  (void) buffer;\n  uint32_t mask = (tag & (((((lfs_tag_t) 0x100) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0))) ? (((((lfs_tag_t) 0x7ff) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0)) : (((((lfs_tag_t) 0x700) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0));\n  if ((((mask & tag) == (mask & (*filtertag))) || lfs_tag_isdelete(*filtertag)) || (((((((lfs_tag_t) 0x7ff) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0)) & tag) == ((((((lfs_tag_t) LFS_TYPE_DELETE) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0)) | ((((((lfs_tag_t) 0) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0)) & (*filtertag)))))\n  {\n    *filtertag = ((((lfs_tag_t) LFS_FROM_NOOP) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0);\n    return 1;\n  }\n  if ((lfs_tag_type1(tag) == LFS_TYPE_SPLICE) && (lfs_tag_id(tag) <= lfs_tag_id(*filtertag)))\n  {\n    *filtertag += ((((lfs_tag_t) 0) << 20) | (((lfs_tag_t) lfs_tag_splice(tag)) << 10)) | ((lfs_tag_t) 0);\n  }\n  return 0;\n}\n\n",
            "calle": [
                "lfs_tag_id",
                "lfs_tag_isdelete",
                "lfs_tag_splice",
                "lfs_tag_type1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p",
                        "type": "void *",
                        "definition": [
                            "void *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "const void *",
                        "definition": [
                            "const void *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filtertag",
                        "type": "lfs_tag_t *",
                        "definition": [
                            "lfs_tag_t *filtertag = p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t mask = (tag & (((((lfs_tag_t) 0x100) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0))) ? (((((lfs_tag_t) 0x7ff) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0)) : (((((lfs_tag_t) 0x700) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_traverse",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "const lfs_mdir_t *dir",
                "lfs_off_t off",
                "lfs_tag_t ptag",
                "const struct lfs_mattr *attrs",
                "int attrcount",
                "lfs_tag_t tmask",
                "lfs_tag_t ttag",
                "uint16_t begin",
                "uint16_t end",
                "int16_t diff",
                "int (*cb)(void *data, lfs_tag_t tag, const void *buffer)",
                "void *data"
            ],
            "definition": "static int lfs_dir_traverse(lfs_t *lfs, const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag, const struct lfs_mattr *attrs, int attrcount, lfs_tag_t tmask, lfs_tag_t ttag, uint16_t begin, uint16_t end, int16_t diff, int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data)\n{\n  unsigned int data_idx = 0;\n  unsigned int cb_idx = 0;\n  unsigned int attrs_idx = 0;\n  unsigned int dir_idx = 0;\n  struct lfs_dir_traverse stack[3 - 1];\n  unsigned sp = 0;\n  int res;\n  lfs_tag_t tag;\n  const void *buffer;\n  unsigned int buffer_idx = 0;\n  struct lfs_diskoff disk = {0};\n  while (1)\n  {\n    helper_lfs_dir_traverse_2(&off, &ptag, &attrcount, &tmask, &ttag, &begin, &end, &diff, &tag, &data_idx, &cb_idx, &attrs_idx, &dir_idx, &sp, &res, &tag, &buffer_idx, &disk, lfs, dir, attrs, cb, data, buffer, data, stack, buffer);\n  }\n\n  if (sp > 0)\n  {\n    helper_lfs_dir_traverse_1(&off, &ptag, &attrcount, &tmask, &ttag, &begin, &end, &diff, &tag, &data_idx, &cb_idx, &attrs_idx, &dir_idx, &sp, &tag, &buffer_idx, &disk, stack);\n  }\n  else\n  {\n    return res;\n  }\n}\n\n",
            "calle": [
                "helper_lfs_dir_traverse_1",
                "helper_lfs_dir_traverse_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "const lfs_mdir_t *",
                        "definition": [
                            "const lfs_mdir_t *dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t off"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t ptag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_mattr",
                        "type": "const struct lfs_mattr *",
                        "definition": [
                            "const struct lfs_mattr *attrs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attrcount",
                        "type": "int",
                        "definition": [
                            "int attrcount"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmask",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tmask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ttag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t ttag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "begin",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t begin"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff",
                        "type": "int16_t",
                        "definition": [
                            "int16_t diff"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb",
                        "type": "int (*)(void *data, lfs_tag_t tag, const void *buffer)",
                        "definition": [
                            "int (*cb)(void *data, lfs_tag_t tag, const void *buffer)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "void *",
                        "definition": [
                            "void *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int data_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int cb_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attrs_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int attrs_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dir_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stack",
                        "type": "struct lfs_dir_traverse [3 - 1]",
                        "definition": [
                            "struct lfs_dir_traverse stack[3 - 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp",
                        "type": "unsigned",
                        "definition": [
                            "unsigned sp = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res",
                        "type": "int",
                        "definition": [
                            "int res"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "const void *",
                        "definition": [
                            "const void *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int buffer_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "disk",
                        "type": "struct lfs_diskoff",
                        "definition": [
                            "struct lfs_diskoff disk = {0}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_fetchmatch",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "lfs_mdir_t *dir",
                "const lfs_block_t pair[2]",
                "lfs_tag_t fmask",
                "lfs_tag_t ftag",
                "uint16_t *id",
                "int (*cb)(void *data, lfs_tag_t tag, const void *buffer)",
                "void *data"
            ],
            "definition": "static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs, lfs_mdir_t *dir, const lfs_block_t pair[2], lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id, int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data)\n{\n  lfs_stag_t besttag = -1;\n  if (lfs->block_count && ((pair[0] >= lfs->block_count) || (pair[1] >= lfs->block_count)))\n  {\n    return LFS_ERR_CORRUPT;\n  }\n  uint32_t revs[2] = {0, 0};\n  int r = 0;\n  for (int i = 0; i < 2; i += 1)\n  {\n    int err = lfs_bd_read(lfs, 0, &lfs->rcache, sizeof(revs[i]), pair[i], 0, &revs[i], sizeof(revs[i]));\n    revs[i] = lfs_fromle32(revs[i]);\n    if (err && (err != LFS_ERR_CORRUPT))\n    {\n      return err;\n    }\n    if ((err != LFS_ERR_CORRUPT) && (lfs_scmp(revs[i], revs[(i + 1) % 2]) > 0))\n    {\n      r = i;\n    }\n  }\n\n  dir->pair[0] = pair[(r + 0) % 2];\n  dir->pair[1] = pair[(r + 1) % 2];\n  dir->rev = revs[(r + 0) % 2];\n  dir->off = 0;\n  for (int i = 0; i < 2; i += 1)\n  {\n    helper_lfs_dir_fetchmatch_1(&besttag, lfs, dir, fmask, ftag, id, data, data, revs, r);\n  }\n\n  printf(\"%s:%d:error: Corrupted dir pair at {0x%x, 0x%x}%s\\n\", \"/home/ubuntu/C2RustTranslation/subjects/littlefs/lfs.c\", 1382, dir->pair[0], dir->pair[1], \"\");\n  return LFS_ERR_CORRUPT;\n}\n\n",
            "calle": [
                "helper_lfs_dir_fetchmatch_1",
                "lfs_bd_read",
                "lfs_fromle32",
                "lfs_scmp",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t *",
                        "definition": [
                            "lfs_mdir_t *dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pair",
                        "type": "const lfs_block_t [2]",
                        "definition": [
                            "const lfs_block_t pair[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmask",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t fmask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ftag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t ftag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "uint16_t *",
                        "definition": [
                            "uint16_t *id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb",
                        "type": "int (*)(void *data, lfs_tag_t tag, const void *buffer)",
                        "definition": [
                            "int (*cb)(void *data, lfs_tag_t tag, const void *buffer)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "void *",
                        "definition": [
                            "void *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "besttag",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t besttag = -1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "revs",
                        "type": "uint32_t [2]",
                        "definition": [
                            "uint32_t revs[2] = {0, 0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "int",
                        "definition": [
                            "int r = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_bd_read(lfs, 0, &lfs->rcache, sizeof(revs[i]), pair[i], 0, &revs[i], sizeof(revs[i]))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_fetch",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "lfs_mdir_t *dir",
                "const lfs_block_t pair[2]"
            ],
            "definition": "static int lfs_dir_fetch(lfs_t *lfs, lfs_mdir_t *dir, const lfs_block_t pair[2])\n{\n  return (int) lfs_dir_fetchmatch(lfs, dir, pair, (lfs_tag_t) (-1), (lfs_tag_t) (-1), 0, 0, 0);\n}\n\n",
            "calle": [
                "lfs_dir_fetchmatch"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t *",
                        "definition": [
                            "lfs_mdir_t *dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pair",
                        "type": "const lfs_block_t [2]",
                        "definition": [
                            "const lfs_block_t pair[2]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_getgstate",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "const lfs_mdir_t *dir",
                "lfs_gstate_t *gstate"
            ],
            "definition": "static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir, lfs_gstate_t *gstate)\n{\n  lfs_gstate_t temp;\n  lfs_stag_t res = lfs_dir_get(lfs, dir, ((((lfs_tag_t) 0x7ff) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) LFS_TYPE_MOVESTATE) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) (sizeof(temp))), &temp);\n  if ((res < 0) && (res != LFS_ERR_NOENT))\n  {\n    return res;\n  }\n  if (res != LFS_ERR_NOENT)\n  {\n    lfs_gstate_fromle32(&temp);\n    lfs_gstate_xor(gstate, &temp);\n  }\n  return 0;\n}\n\n",
            "calle": [
                "lfs_dir_get",
                "lfs_gstate_fromle32",
                "lfs_gstate_xor"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "const lfs_mdir_t *",
                        "definition": [
                            "const lfs_mdir_t *dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gstate",
                        "type": "lfs_gstate_t *",
                        "definition": [
                            "lfs_gstate_t *gstate"
                        ]
                    },
                    {
                        "path": null,
                        "name": "temp",
                        "type": "lfs_gstate_t",
                        "definition": [
                            "lfs_gstate_t temp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t res = lfs_dir_get(lfs, dir, ((((lfs_tag_t) 0x7ff) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) LFS_TYPE_MOVESTATE) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) (sizeof(temp))), &temp)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_getinfo",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "lfs_mdir_t *dir",
                "uint16_t id",
                "struct lfs_info *info"
            ],
            "definition": "static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir, uint16_t id, struct lfs_info *info)\n{\n  if (id == 0x3ff)\n  {\n    strcpy(info->name, \"/\");\n    info->type = LFS_TYPE_DIR;\n    return 0;\n  }\n  lfs_stag_t tag = lfs_dir_get(lfs, dir, ((((lfs_tag_t) 0x780) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) LFS_TYPE_NAME) << 20) | (((lfs_tag_t) id) << 10)) | ((lfs_tag_t) (lfs->name_max + 1)), info->name);\n  if (tag < 0)\n  {\n    return (int) tag;\n  }\n  info->type = lfs_tag_type3(tag);\n  struct lfs_ctz ctz;\n  tag = lfs_dir_get(lfs, dir, ((((lfs_tag_t) 0x700) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) LFS_TYPE_STRUCT) << 20) | (((lfs_tag_t) id) << 10)) | ((lfs_tag_t) (sizeof(ctz))), &ctz);\n  if (tag < 0)\n  {\n    return (int) tag;\n  }\n  lfs_ctz_fromle32(&ctz);\n  if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT)\n  {\n    info->size = ctz.size;\n  }\n  else\n    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT)\n  {\n    info->size = lfs_tag_size(tag);\n  }\n  return 0;\n}\n\n",
            "calle": [
                "lfs_ctz_fromle32",
                "lfs_dir_get",
                "lfs_tag_size",
                "lfs_tag_type3",
                "strcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t *",
                        "definition": [
                            "lfs_mdir_t *dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_info",
                        "type": "struct lfs_info *",
                        "definition": [
                            "struct lfs_info *info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t tag = lfs_dir_get(lfs, dir, ((((lfs_tag_t) 0x780) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) LFS_TYPE_NAME) << 20) | (((lfs_tag_t) id) << 10)) | ((lfs_tag_t) (lfs->name_max + 1)), info->name)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ctz",
                        "type": "struct lfs_ctz",
                        "definition": [
                            "struct lfs_ctz ctz"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_find_match",
            "header": "",
            "params": [
                "void *data",
                "lfs_tag_t tag",
                "const void *buffer"
            ],
            "definition": "static int lfs_dir_find_match(void *data, lfs_tag_t tag, const void *buffer)\n{\n  struct lfs_dir_find_match *name = data;\n  lfs_t *lfs = name->lfs;\n  const struct lfs_diskoff *disk = buffer;\n  lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));\n  int res = lfs_bd_cmp(lfs, 0, &lfs->rcache, diff, disk->block, disk->off, name->name, diff);\n  if (res != LFS_CMP_EQ)\n  {\n    return res;\n  }\n  if (name->size != lfs_tag_size(tag))\n  {\n    return (name->size < lfs_tag_size(tag)) ? (LFS_CMP_LT) : (LFS_CMP_GT);\n  }\n  return LFS_CMP_EQ;\n}\n\n",
            "calle": [
                "lfs_bd_cmp",
                "lfs_min",
                "lfs_tag_size"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "void *",
                        "definition": [
                            "void *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "const void *",
                        "definition": [
                            "const void *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_dir_find_match",
                        "type": "struct lfs_dir_find_match *",
                        "definition": [
                            "struct lfs_dir_find_match *name = data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs = name->lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_diskoff",
                        "type": "const struct lfs_diskoff *",
                        "definition": [
                            "const struct lfs_diskoff *disk = buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res",
                        "type": "int",
                        "definition": [
                            "int res = lfs_bd_cmp(lfs, 0, &lfs->rcache, diff, disk->block, disk->off, name->name, diff)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_find",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "lfs_mdir_t *dir",
                "const char **path",
                "uint16_t *id"
            ],
            "definition": "static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir, const char **path, uint16_t *id)\n{\n  const char *name = *path;\n  unsigned int name_idx = 0;\n  lfs_stag_t tag = ((((lfs_tag_t) LFS_TYPE_DIR) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0);\n  dir->tail[0] = lfs->root[0];\n  dir->tail[1] = lfs->root[1];\n  if (name[name_idx] == '\\0')\n  {\n    return LFS_ERR_INVAL;\n  }\n  while (1)\n  {\n    helper_lfs_dir_find_1(&name_idx, &tag, lfs, dir, path, id, name);\n  }\n\n}\n\n",
            "calle": [
                "helper_lfs_dir_find_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t *",
                        "definition": [
                            "lfs_mdir_t *dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char **",
                        "definition": [
                            "const char **path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "uint16_t *",
                        "definition": [
                            "uint16_t *id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "const char *",
                        "definition": [
                            "const char *name = *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int name_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t tag = ((((lfs_tag_t) LFS_TYPE_DIR) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_commitprog",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "struct lfs_commit *commit",
                "const void *buffer",
                "lfs_size_t size"
            ],
            "definition": "static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit, const void *buffer, lfs_size_t size)\n{\n  int err = lfs_bd_prog(lfs, &lfs->pcache, &lfs->rcache, 0, commit->block, commit->off, (const uint8_t *) buffer, size);\n  if (err)\n  {\n    return err;\n  }\n  commit->crc = lfs_crc(commit->crc, buffer, size);\n  commit->off += size;\n  return 0;\n}\n\n",
            "calle": [
                "lfs_bd_prog",
                "lfs_crc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_commit",
                        "type": "struct lfs_commit *",
                        "definition": [
                            "struct lfs_commit *commit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "const void *",
                        "definition": [
                            "const void *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_bd_prog(lfs, &lfs->pcache, &lfs->rcache, 0, commit->block, commit->off, (const uint8_t *) buffer, size)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_commitattr",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "struct lfs_commit *commit",
                "lfs_tag_t tag",
                "const void *buffer"
            ],
            "definition": "static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit, lfs_tag_t tag, const void *buffer)\n{\n  lfs_size_t dsize = lfs_tag_dsize(tag);\n  if ((commit->off + dsize) > commit->end)\n  {\n    return LFS_ERR_NOSPC;\n  }\n  lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);\n  int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));\n  if (err)\n  {\n    return err;\n  }\n  if (!(tag & 0x80000000))\n  {\n    err = lfs_dir_commitprog(lfs, commit, buffer, dsize - (sizeof(tag)));\n    if (err)\n    {\n      return err;\n    }\n  }\n  else\n  {\n    const struct lfs_diskoff *disk = buffer;\n    for (lfs_off_t i = 0; i < (dsize - (sizeof(tag))); i += 1)\n    {\n      uint8_t dat;\n      err = lfs_bd_read(lfs, 0, &lfs->rcache, (dsize - (sizeof(tag))) - i, disk->block, disk->off + i, &dat, 1);\n      if (err)\n      {\n        return err;\n      }\n      err = lfs_dir_commitprog(lfs, commit, &dat, 1);\n      if (err)\n      {\n        return err;\n      }\n    }\n\n  }\n  commit->ptag = tag & 0x7fffffff;\n  return 0;\n}\n\n",
            "calle": [
                "lfs_bd_read",
                "lfs_dir_commitprog",
                "lfs_tag_dsize",
                "lfs_tobe32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_commit",
                        "type": "struct lfs_commit *",
                        "definition": [
                            "struct lfs_commit *commit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "const void *",
                        "definition": [
                            "const void *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dsize",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t dsize = lfs_tag_dsize(tag)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ntag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_diskoff",
                        "type": "const struct lfs_diskoff *",
                        "definition": [
                            "const struct lfs_diskoff *disk = buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dat",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t dat"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_commitcrc",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "struct lfs_commit *commit"
            ],
            "definition": "static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit)\n{\n  const lfs_off_t end = lfs_alignup(lfs_min(commit->off + (5 * (sizeof(uint32_t))), lfs->cfg->block_size), lfs->cfg->prog_size);\n  lfs_off_t off1 = 0;\n  uint32_t crc1 = 0;\n  while (commit->off < end)\n  {\n    helper_lfs_dir_commitcrc_1(&off1, &crc1, &crc, &crc, lfs, commit, end);\n  }\n\n  lfs_off_t off = commit->begin;\n  uint32_t crc = 0xffffffff;\n  int err = lfs_bd_crc(lfs, 0, &lfs->rcache, off1 + (sizeof(uint32_t)), commit->block, off, off1 - off, &crc);\n  if (err)\n  {\n    return err;\n  }\n  if (crc != crc1)\n  {\n    return LFS_ERR_CORRUPT;\n  }\n  err = lfs_bd_crc(lfs, 0, &lfs->rcache, sizeof(uint32_t), commit->block, off1, sizeof(uint32_t), &crc);\n  if (err)\n  {\n    return err;\n  }\n  if (crc != 0)\n  {\n    return LFS_ERR_CORRUPT;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "helper_lfs_dir_commitcrc_1",
                "lfs_alignup",
                "lfs_bd_crc",
                "lfs_min"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_commit",
                        "type": "struct lfs_commit *",
                        "definition": [
                            "struct lfs_commit *commit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "const lfs_off_t",
                        "definition": [
                            "const lfs_off_t end = lfs_alignup(lfs_min(commit->off + (5 * (sizeof(uint32_t))), lfs->cfg->block_size), lfs->cfg->prog_size)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off1",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t off1 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc1",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t crc1 = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t off = commit->begin"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t crc = 0xffffffff"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_bd_crc(lfs, 0, &lfs->rcache, off1 + (sizeof(uint32_t)), commit->block, off, off1 - off, &crc)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_alloc",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "lfs_mdir_t *dir"
            ],
            "definition": "static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir)\n{\n  for (int i = 0; i < 2; i += 1)\n  {\n    int err = lfs_alloc(lfs, &dir->pair[(i + 1) % 2]);\n    if (err)\n    {\n      return err;\n    }\n  }\n\n  dir->rev = 0;\n  int err = lfs_bd_read(lfs, 0, &lfs->rcache, sizeof(dir->rev), dir->pair[0], 0, &dir->rev, sizeof(dir->rev));\n  dir->rev = lfs_fromle32(dir->rev);\n  if (err && (err != LFS_ERR_CORRUPT))\n  {\n    return err;\n  }\n  if (lfs->cfg->block_cycles > 0)\n  {\n    dir->rev = lfs_alignup(dir->rev, (lfs->cfg->block_cycles + 1) | 1);\n  }\n  dir->off = sizeof(dir->rev);\n  dir->etag = 0xffffffff;\n  dir->count = 0;\n  dir->tail[0] = (lfs_block_t) (-1);\n  dir->tail[1] = (lfs_block_t) (-1);\n  dir->erased = 0;\n  dir->split = 0;\n  return 0;\n}\n\n",
            "calle": [
                "lfs_alignup",
                "lfs_alloc",
                "lfs_bd_read",
                "lfs_fromle32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t *",
                        "definition": [
                            "lfs_mdir_t *dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_alloc(lfs, &dir->pair[(i + 1) % 2])",
                            "int err = lfs_bd_read(lfs, 0, &lfs->rcache, sizeof(dir->rev), dir->pair[0], 0, &dir->rev, sizeof(dir->rev))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_drop",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "lfs_mdir_t *dir",
                "lfs_mdir_t *tail"
            ],
            "definition": "static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail)\n{\n  int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);\n  if (err)\n  {\n    return err;\n  }\n  lfs_pair_tole32(tail->tail);\n  err = lfs_dir_commit(lfs, dir, (struct lfs_mattr []){{((((lfs_tag_t) (LFS_TYPE_TAIL + tail->split)) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 8), tail->tail}}, (sizeof((struct lfs_mattr []){{((((lfs_tag_t) (LFS_TYPE_TAIL + tail->split)) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 8), tail->tail}})) / (sizeof(struct lfs_mattr)));\n  lfs_pair_fromle32(tail->tail);\n  if (err)\n  {\n    return err;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "lfs_dir_commit",
                "lfs_dir_getgstate",
                "lfs_pair_fromle32",
                "lfs_pair_tole32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t *",
                        "definition": [
                            "lfs_mdir_t *dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tail",
                        "type": "lfs_mdir_t *",
                        "definition": [
                            "lfs_mdir_t *tail"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_split",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "lfs_mdir_t *dir",
                "const struct lfs_mattr *attrs",
                "int attrcount",
                "lfs_mdir_t *source",
                "uint16_t split",
                "uint16_t end"
            ],
            "definition": "static int lfs_dir_split(lfs_t *lfs, lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount, lfs_mdir_t *source, uint16_t split, uint16_t end)\n{\n  lfs_mdir_t tail;\n  int err = lfs_dir_alloc(lfs, &tail);\n  if (err)\n  {\n    return err;\n  }\n  tail.split = dir->split;\n  tail.tail[0] = dir->tail[0];\n  tail.tail[1] = dir->tail[1];\n  int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);\n  if (res < 0)\n  {\n    return res;\n  }\n  dir->tail[0] = tail.pair[0];\n  dir->tail[1] = tail.pair[1];\n  dir->split = 1;\n  if ((lfs_pair_cmp(dir->pair, lfs->root) == 0) && (split == 0))\n  {\n    lfs->root[0] = tail.pair[0];\n    lfs->root[1] = tail.pair[1];\n  }\n  return 0;\n}\n\n",
            "calle": [
                "lfs_dir_alloc",
                "lfs_dir_compact",
                "lfs_pair_cmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t *",
                        "definition": [
                            "lfs_mdir_t *dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_mattr",
                        "type": "const struct lfs_mattr *",
                        "definition": [
                            "const struct lfs_mattr *attrs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attrcount",
                        "type": "int",
                        "definition": [
                            "int attrcount"
                        ]
                    },
                    {
                        "path": null,
                        "name": "source",
                        "type": "lfs_mdir_t *",
                        "definition": [
                            "lfs_mdir_t *source"
                        ]
                    },
                    {
                        "path": null,
                        "name": "split",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t split"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tail",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t tail"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_dir_alloc(lfs, &tail)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res",
                        "type": "int",
                        "definition": [
                            "int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_commit_size",
            "header": "",
            "params": [
                "void *p",
                "lfs_tag_t tag",
                "const void *buffer"
            ],
            "definition": "static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer)\n{\n  lfs_size_t *size = p;\n  (void) buffer;\n  *size += lfs_tag_dsize(tag);\n  return 0;\n}\n\n",
            "calle": [
                "lfs_tag_dsize"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p",
                        "type": "void *",
                        "definition": [
                            "void *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "const void *",
                        "definition": [
                            "const void *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_size_t *",
                        "definition": [
                            "lfs_size_t *size = p"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_commit_commit",
            "header": "",
            "params": [
                "void *p",
                "lfs_tag_t tag",
                "const void *buffer"
            ],
            "definition": "static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer)\n{\n  struct lfs_dir_commit_commit *commit = p;\n  return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);\n}\n\n",
            "calle": [
                "lfs_dir_commitattr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p",
                        "type": "void *",
                        "definition": [
                            "void *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "const void *",
                        "definition": [
                            "const void *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_dir_commit_commit",
                        "type": "struct lfs_dir_commit_commit *",
                        "definition": [
                            "struct lfs_dir_commit_commit *commit = p"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_needsrelocation",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "lfs_mdir_t *dir"
            ],
            "definition": "static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir)\n{\n  return (lfs->cfg->block_cycles > 0) && (((dir->rev + 1) % ((lfs->cfg->block_cycles + 1) | 1)) == 0);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t *",
                        "definition": [
                            "lfs_mdir_t *dir"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_splittingcompact",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "lfs_mdir_t *dir",
                "const struct lfs_mattr *attrs",
                "int attrcount",
                "lfs_mdir_t *source",
                "uint16_t begin",
                "uint16_t end"
            ],
            "definition": "static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount, lfs_mdir_t *source, uint16_t begin, uint16_t end)\n{\n  while (1)\n  {\n    helper_lfs_dir_splittingcompact_2(&end, lfs, dir, attrs, attrcount, source, begin);\n  }\n\n  if (lfs_dir_needsrelocation(lfs, dir) && (lfs_pair_cmp(dir->pair, (const lfs_block_t [2]){0, 1}) == 0))\n  {\n    helper_lfs_dir_splittingcompact_1(&end, lfs, dir, attrs, attrcount, source, begin);\n  }\n  return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);\n}\n\n",
            "calle": [
                "helper_lfs_dir_splittingcompact_1",
                "helper_lfs_dir_splittingcompact_2",
                "lfs_dir_compact",
                "lfs_dir_needsrelocation",
                "lfs_pair_cmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t *",
                        "definition": [
                            "lfs_mdir_t *dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_mattr",
                        "type": "const struct lfs_mattr *",
                        "definition": [
                            "const struct lfs_mattr *attrs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attrcount",
                        "type": "int",
                        "definition": [
                            "int attrcount"
                        ]
                    },
                    {
                        "path": null,
                        "name": "source",
                        "type": "lfs_mdir_t *",
                        "definition": [
                            "lfs_mdir_t *source"
                        ]
                    },
                    {
                        "path": null,
                        "name": "begin",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t begin"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t end"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_relocatingcommit",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "lfs_mdir_t *dir",
                "const lfs_block_t pair[2]",
                "const struct lfs_mattr *attrs",
                "int attrcount",
                "lfs_mdir_t *pdir"
            ],
            "definition": "static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir, const lfs_block_t pair[2], const struct lfs_mattr *attrs, int attrcount, lfs_mdir_t *pdir)\n{\n  int state = 0;\n  bool hasdelete = 0;\n  for (int i = 0; i < attrcount; i += 1)\n  {\n    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE)\n    {\n      dir->count += 1;\n    }\n    else\n      if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE)\n    {\n      assert(dir->count > 0);\n      dir->count -= 1;\n      hasdelete = 1;\n    }\n    else\n      if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL)\n    {\n      dir->tail[0] = ((lfs_block_t *) attrs[i].buffer)[0];\n      dir->tail[1] = ((lfs_block_t *) attrs[i].buffer)[1];\n      dir->split = lfs_tag_chunk(attrs[i].tag) & 1;\n      lfs_pair_fromle32(dir->tail);\n    }\n  }\n\n  if (hasdelete && (dir->count == 0))\n  {\n    assert(pdir);\n    int err = lfs_fs_pred(lfs, dir->pair, pdir);\n    if (err && (err != LFS_ERR_NOENT))\n    {\n      return err;\n    }\n    if ((err != LFS_ERR_NOENT) && pdir->split)\n    {\n      state = LFS_OK_DROPPED;\n      goto fixmlist;\n    }\n  }\n  if (dir->erased && (dir->count < 0xff))\n  {\n    helper_lfs_dir_relocatingcommit_2(lfs, dir, attrs, attrcount);\n  }\n  compact:\n  lfs_cache_drop(lfs, &lfs->pcache);\n\n  state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount, dir, 0, dir->count);\n  if (state < 0)\n  {\n    return state;\n  }\n  goto fixmlist;\n  fixmlist:\n  ;\n\n  lfs_block_t oldpair[2] = {pair[0], pair[1]};\n  for (struct lfs_mlist *d = lfs->mlist; d; d_idx = d_idx->next)\n  {\n    helper_lfs_dir_relocatingcommit_1(lfs, dir, pair, attrs, attrcount, oldpair, d);\n  }\n\n  unsigned int d_idx = 0;\n  return state;\n}\n\n",
            "calle": [
                "assert",
                "helper_lfs_dir_relocatingcommit_1",
                "helper_lfs_dir_relocatingcommit_2",
                "lfs_cache_drop",
                "lfs_dir_splittingcompact",
                "lfs_fs_pred",
                "lfs_pair_fromle32",
                "lfs_tag_chunk",
                "lfs_tag_type1",
                "lfs_tag_type3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t *",
                        "definition": [
                            "lfs_mdir_t *dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pair",
                        "type": "const lfs_block_t [2]",
                        "definition": [
                            "const lfs_block_t pair[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_mattr",
                        "type": "const struct lfs_mattr *",
                        "definition": [
                            "const struct lfs_mattr *attrs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attrcount",
                        "type": "int",
                        "definition": [
                            "int attrcount"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pdir",
                        "type": "lfs_mdir_t *",
                        "definition": [
                            "lfs_mdir_t *pdir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "int",
                        "definition": [
                            "int state = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hasdelete",
                        "type": "bool",
                        "definition": [
                            "bool hasdelete = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_fs_pred(lfs, dir->pair, pdir)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oldpair",
                        "type": "lfs_block_t [2]",
                        "definition": [
                            "lfs_block_t oldpair[2] = {pair[0], pair[1]}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_mlist",
                        "type": "struct lfs_mlist *",
                        "definition": [
                            "struct lfs_mlist *d = lfs->mlist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int d_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_orphaningcommit",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "lfs_mdir_t *dir",
                "const struct lfs_mattr *attrs",
                "int attrcount"
            ],
            "definition": "static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount)\n{\n  for (lfs_file_t *f = (lfs_file_t *) lfs->mlist; f; f_idx = f_idx->next)\n  {\n    if (((((dir != (&f->m)) && (lfs_pair_cmp(f->m.pair, dir->pair) == 0)) && (f->type == LFS_TYPE_REG)) && (f->flags & LFS_F_INLINE)) && (f->ctz.size > lfs->cfg->cache_size))\n    {\n      int err = lfs_file_outline(lfs, f);\n      if (err)\n      {\n        return err;\n      }\n      err = lfs_file_flush(lfs, f);\n      if (err)\n      {\n        return err;\n      }\n    }\n  }\n\n  unsigned int f_idx = 0;\n  lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};\n  lfs_mdir_t ldir = *dir;\n  lfs_mdir_t pdir;\n  int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair, attrs, attrcount, &pdir);\n  if (state < 0)\n  {\n    return state;\n  }\n  if (lfs_pair_cmp(dir->pair, lpair) == 0)\n  {\n    *dir = ldir;\n  }\n  if (state == LFS_OK_DROPPED)\n  {\n    helper_lfs_dir_orphaningcommit_1(&ldir, &state, lfs, dir, lpair, pdir);\n  }\n  bool orphans = 0;\n  while (state == LFS_OK_RELOCATED)\n  {\n    helper_lfs_dir_orphaningcommit_2(&ldir, &state, &orphans, &d_idx, lfs, lpair, pdir);\n  }\n\n  return (orphans) ? (LFS_OK_ORPHANED) : (0);\n}\n\n",
            "calle": [
                "helper_lfs_dir_orphaningcommit_1",
                "helper_lfs_dir_orphaningcommit_2",
                "lfs_dir_relocatingcommit",
                "lfs_file_flush",
                "lfs_file_outline",
                "lfs_pair_cmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t *",
                        "definition": [
                            "lfs_mdir_t *dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_mattr",
                        "type": "const struct lfs_mattr *",
                        "definition": [
                            "const struct lfs_mattr *attrs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attrcount",
                        "type": "int",
                        "definition": [
                            "int attrcount"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f",
                        "type": "lfs_file_t *",
                        "definition": [
                            "lfs_file_t *f = (lfs_file_t *) lfs->mlist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_file_outline(lfs, f)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int f_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lpair",
                        "type": "lfs_block_t [2]",
                        "definition": [
                            "lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ldir",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t ldir = *dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pdir",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t pdir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "int",
                        "definition": [
                            "int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair, attrs, attrcount, &pdir)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "orphans",
                        "type": "bool",
                        "definition": [
                            "bool orphans = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_mkdir_",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "const char *path"
            ],
            "definition": "static int lfs_mkdir_(lfs_t *lfs, const char *path)\n{\n  int err = lfs_fs_forceconsistency(lfs);\n  if (err)\n  {\n    return err;\n  }\n  struct lfs_mlist cwd;\n  cwd.next = lfs->mlist;\n  uint16_t id;\n  err = lfs_dir_find(lfs, &cwd.m, &path, &id);\n  if (!((err == LFS_ERR_NOENT) && lfs_path_islast(path)))\n  {\n    return (err < 0) ? (err) : (LFS_ERR_EXIST);\n  }\n  lfs_size_t nlen = lfs_path_namelen(path);\n  if (nlen > lfs->name_max)\n  {\n    return LFS_ERR_NAMETOOLONG;\n  }\n  lfs_alloc_ckpoint(lfs);\n  lfs_mdir_t dir;\n  err = lfs_dir_alloc(lfs, &dir);\n  if (err)\n  {\n    return err;\n  }\n  lfs_mdir_t pred = cwd.m;\n  while (pred.split)\n  {\n    err = lfs_dir_fetch(lfs, &pred, pred.tail);\n    if (err)\n    {\n      return err;\n    }\n  }\n\n  lfs_pair_tole32(pred.tail);\n  err = lfs_dir_commit(lfs, &dir, (struct lfs_mattr []){{((((lfs_tag_t) LFS_TYPE_SOFTTAIL) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 8), pred.tail}}, (sizeof((struct lfs_mattr []){{((((lfs_tag_t) LFS_TYPE_SOFTTAIL) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 8), pred.tail}})) / (sizeof(struct lfs_mattr)));\n  lfs_pair_fromle32(pred.tail);\n  if (err)\n  {\n    return err;\n  }\n  if (cwd.m.split)\n  {\n    helper_lfs_mkdir__1(&err, &cwd, lfs, dir, pred);\n  }\n  lfs_pair_tole32(dir.pair);\n  err = lfs_dir_commit(lfs, &cwd.m, (struct lfs_mattr []){{((((lfs_tag_t) LFS_TYPE_CREATE) << 20) | (((lfs_tag_t) id) << 10)) | ((lfs_tag_t) 0), 0}, {((((lfs_tag_t) LFS_TYPE_DIR) << 20) | (((lfs_tag_t) id) << 10)) | ((lfs_tag_t) nlen), path}, {((((lfs_tag_t) LFS_TYPE_DIRSTRUCT) << 20) | (((lfs_tag_t) id) << 10)) | ((lfs_tag_t) 8), dir.pair}, {(!cwd.m.split) ? (((((lfs_tag_t) LFS_TYPE_SOFTTAIL) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 8)) : (((((lfs_tag_t) LFS_FROM_NOOP) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0)), dir.pair}}, (sizeof((struct lfs_mattr []){{((((lfs_tag_t) LFS_TYPE_CREATE) << 20) | (((lfs_tag_t) id) << 10)) | ((lfs_tag_t) 0), 0}, {((((lfs_tag_t) LFS_TYPE_DIR) << 20) | (((lfs_tag_t) id) << 10)) | ((lfs_tag_t) nlen), path}, {((((lfs_tag_t) LFS_TYPE_DIRSTRUCT) << 20) | (((lfs_tag_t) id) << 10)) | ((lfs_tag_t) 8), dir.pair}, {(!cwd.m.split) ? (((((lfs_tag_t) LFS_TYPE_SOFTTAIL) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 8)) : (((((lfs_tag_t) LFS_FROM_NOOP) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0)), dir.pair}})) / (sizeof(struct lfs_mattr)));\n  lfs_pair_fromle32(dir.pair);\n  if (err)\n  {\n    return err;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "helper_lfs_mkdir__1",
                "lfs_alloc_ckpoint",
                "lfs_dir_alloc",
                "lfs_dir_commit",
                "lfs_dir_fetch",
                "lfs_dir_find",
                "lfs_fs_forceconsistency",
                "lfs_pair_fromle32",
                "lfs_pair_tole32",
                "lfs_path_islast",
                "lfs_path_namelen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_fs_forceconsistency(lfs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cwd",
                        "type": "struct lfs_mlist",
                        "definition": [
                            "struct lfs_mlist cwd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nlen",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t nlen = lfs_path_namelen(path)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pred",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t pred = cwd.m"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_open_",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "lfs_dir_t *dir",
                "const char *path"
            ],
            "definition": "static int lfs_dir_open_(lfs_t *lfs, lfs_dir_t *dir, const char *path)\n{\n  lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, 0);\n  if (tag < 0)\n  {\n    return tag;\n  }\n  if (lfs_tag_type3(tag) != LFS_TYPE_DIR)\n  {\n    return LFS_ERR_NOTDIR;\n  }\n  lfs_block_t pair[2];\n  if (lfs_tag_id(tag) == 0x3ff)\n  {\n    pair[0] = lfs->root[0];\n    pair[1] = lfs->root[1];\n  }\n  else\n  {\n    lfs_stag_t res = lfs_dir_get(lfs, &dir->m, ((((lfs_tag_t) 0x700) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) LFS_TYPE_STRUCT) << 20) | (((lfs_tag_t) lfs_tag_id(tag)) << 10)) | ((lfs_tag_t) 8), pair);\n    if (res < 0)\n    {\n      return res;\n    }\n    lfs_pair_fromle32(pair);\n  }\n  int err = lfs_dir_fetch(lfs, &dir->m, pair);\n  if (err)\n  {\n    return err;\n  }\n  dir->head[0] = dir->m.pair[0];\n  dir->head[1] = dir->m.pair[1];\n  dir->id = 0;\n  dir->pos = 0;\n  dir->type = LFS_TYPE_DIR;\n  lfs_mlist_append(lfs, (struct lfs_mlist *) dir);\n  return 0;\n}\n\n",
            "calle": [
                "lfs_dir_fetch",
                "lfs_dir_find",
                "lfs_dir_get",
                "lfs_mlist_append",
                "lfs_pair_fromle32",
                "lfs_tag_id",
                "lfs_tag_type3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_dir_t *",
                        "definition": [
                            "lfs_dir_t *dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, 0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pair",
                        "type": "lfs_block_t [2]",
                        "definition": [
                            "lfs_block_t pair[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t res = lfs_dir_get(lfs, &dir->m, ((((lfs_tag_t) 0x700) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) LFS_TYPE_STRUCT) << 20) | (((lfs_tag_t) lfs_tag_id(tag)) << 10)) | ((lfs_tag_t) 8), pair)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_dir_fetch(lfs, &dir->m, pair)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_close_",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "lfs_dir_t *dir"
            ],
            "definition": "static int lfs_dir_close_(lfs_t *lfs, lfs_dir_t *dir)\n{\n  lfs_mlist_remove(lfs, (struct lfs_mlist *) dir);\n  return 0;\n}\n\n",
            "calle": [
                "lfs_mlist_remove"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_dir_t *",
                        "definition": [
                            "lfs_dir_t *dir"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_read_",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "lfs_dir_t *dir",
                "struct lfs_info *info"
            ],
            "definition": "static int lfs_dir_read_(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info)\n{\n  memset(info, 0, sizeof(*info));\n  if (dir->pos == 0)\n  {\n    info->type = LFS_TYPE_DIR;\n    strcpy(info->name, \".\");\n    dir->pos += 1;\n    return 1;\n  }\n  else\n    if (dir->pos == 1)\n  {\n    info->type = LFS_TYPE_DIR;\n    strcpy(info->name, \"..\");\n    dir->pos += 1;\n    return 1;\n  }\n  while (1)\n  {\n    if (dir->id == dir->m.count)\n    {\n      if (!dir->m.split)\n      {\n        return 0;\n      }\n      int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);\n      if (err)\n      {\n        return err;\n      }\n      dir->id = 0;\n    }\n    int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);\n    if (err && (err != LFS_ERR_NOENT))\n    {\n      return err;\n    }\n    dir->id += 1;\n    if (err != LFS_ERR_NOENT)\n    {\n      break;\n    }\n  }\n\n  dir->pos += 1;\n  return 1;\n}\n\n",
            "calle": [
                "lfs_dir_fetch",
                "lfs_dir_getinfo",
                "memset",
                "strcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_dir_t *",
                        "definition": [
                            "lfs_dir_t *dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_info",
                        "type": "struct lfs_info *",
                        "definition": [
                            "struct lfs_info *info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail)",
                            "int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_seek_",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "lfs_dir_t *dir",
                "lfs_off_t off"
            ],
            "definition": "static int lfs_dir_seek_(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off)\n{\n  int err = lfs_dir_rewind_(lfs, dir);\n  if (err)\n  {\n    return err;\n  }\n  dir->pos = lfs_min(2, off);\n  off -= dir->pos;\n  dir->id = (off > 0) && (lfs_pair_cmp(dir->head, lfs->root) == 0);\n  while (off > 0)\n  {\n    if (dir->id == dir->m.count)\n    {\n      if (!dir->m.split)\n      {\n        return LFS_ERR_INVAL;\n      }\n      err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);\n      if (err)\n      {\n        return err;\n      }\n      dir->id = 0;\n    }\n    int diff = lfs_min(dir->m.count - dir->id, off);\n    dir->id += diff;\n    dir->pos += diff;\n    off -= diff;\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "lfs_dir_fetch",
                "lfs_dir_rewind_",
                "lfs_min",
                "lfs_pair_cmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_dir_t *",
                        "definition": [
                            "lfs_dir_t *dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t off"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_dir_rewind_(lfs, dir)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff",
                        "type": "int",
                        "definition": [
                            "int diff = lfs_min(dir->m.count - dir->id, off)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_dir_tell_",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "lfs_dir_t *dir"
            ],
            "definition": "static lfs_soff_t lfs_dir_tell_(lfs_t *lfs, lfs_dir_t *dir)\n{\n  (void) lfs;\n  return dir->pos;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_dir_t *",
                        "definition": [
                            "lfs_dir_t *dir"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_ctz_index",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "lfs_off_t *off"
            ],
            "definition": "static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off)\n{\n  lfs_off_t size = *off;\n  lfs_off_t b = lfs->cfg->block_size - (2 * 4);\n  lfs_off_t i = size / b;\n  if (i == 0)\n  {\n    return 0;\n  }\n  i = (size - (4 * (lfs_popc(i - 1) + 2))) / b;\n  *off = (size - (b * i)) - (4 * lfs_popc(i));\n  return i;\n}\n\n",
            "calle": [
                "lfs_popc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_off_t *",
                        "definition": [
                            "lfs_off_t *off"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t size = *off"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t b = lfs->cfg->block_size - (2 * 4)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t i = size / b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_ctz_find",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "const lfs_cache_t *pcache",
                "lfs_cache_t *rcache",
                "lfs_block_t head",
                "lfs_size_t size",
                "lfs_size_t pos",
                "lfs_block_t *block",
                "lfs_off_t *off"
            ],
            "definition": "static int lfs_ctz_find(lfs_t *lfs, const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_block_t head, lfs_size_t size, lfs_size_t pos, lfs_block_t *block, lfs_off_t *off)\n{\n  if (size == 0)\n  {\n    *block = (lfs_block_t) (-1);\n    *off = 0;\n    return 0;\n  }\n  lfs_off_t current = lfs_ctz_index(lfs, &((lfs_off_t){size - 1}));\n  lfs_off_t target = lfs_ctz_index(lfs, &pos);\n  while (current > target)\n  {\n    lfs_size_t skip = lfs_min(lfs_npw2((current - target) + 1) - 1, lfs_ctz(current));\n    int err = lfs_bd_read(lfs, pcache, rcache, sizeof(head), head, 4 * skip, &head, sizeof(head));\n    head = lfs_fromle32(head);\n    if (err)\n    {\n      return err;\n    }\n    current -= 1 << skip;\n  }\n\n  *block = head;\n  *off = pos;\n  return 0;\n}\n\n",
            "calle": [
                "lfs_bd_read",
                "lfs_ctz",
                "lfs_ctz_index",
                "lfs_fromle32",
                "lfs_min",
                "lfs_npw2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pcache",
                        "type": "const lfs_cache_t *",
                        "definition": [
                            "const lfs_cache_t *pcache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rcache",
                        "type": "lfs_cache_t *",
                        "definition": [
                            "lfs_cache_t *rcache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "head",
                        "type": "lfs_block_t",
                        "definition": [
                            "lfs_block_t head"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "lfs_block_t *",
                        "definition": [
                            "lfs_block_t *block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_off_t *",
                        "definition": [
                            "lfs_off_t *off"
                        ]
                    },
                    {
                        "path": null,
                        "name": "current",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t current = lfs_ctz_index(lfs, &((lfs_off_t){size - 1}))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "target",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t target = lfs_ctz_index(lfs, &pos)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "skip",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t skip = lfs_min(lfs_npw2((current - target) + 1) - 1, lfs_ctz(current))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_bd_read(lfs, pcache, rcache, sizeof(head), head, 4 * skip, &head, sizeof(head))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_ctz_extend",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "lfs_cache_t *pcache",
                "lfs_cache_t *rcache",
                "lfs_block_t head",
                "lfs_size_t size",
                "lfs_block_t *block",
                "lfs_off_t *off"
            ],
            "definition": "static int lfs_ctz_extend(lfs_t *lfs, lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_block_t head, lfs_size_t size, lfs_block_t *block, lfs_off_t *off)\n{\n  while (1)\n  {\n    helper_lfs_ctz_extend_1(lfs, pcache, rcache, head, size, block, off);\n  }\n\n}\n\n",
            "calle": [
                "helper_lfs_ctz_extend_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pcache",
                        "type": "lfs_cache_t *",
                        "definition": [
                            "lfs_cache_t *pcache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rcache",
                        "type": "lfs_cache_t *",
                        "definition": [
                            "lfs_cache_t *rcache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "head",
                        "type": "lfs_block_t",
                        "definition": [
                            "lfs_block_t head"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "lfs_block_t *",
                        "definition": [
                            "lfs_block_t *block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_off_t *",
                        "definition": [
                            "lfs_off_t *off"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_ctz_traverse",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "const lfs_cache_t *pcache",
                "lfs_cache_t *rcache",
                "lfs_block_t head",
                "lfs_size_t size",
                "int (*cb)(void *, lfs_block_t)",
                "void *data"
            ],
            "definition": "static int lfs_ctz_traverse(lfs_t *lfs, const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_block_t head, lfs_size_t size, int (*cb)(void *, lfs_block_t), void *data)\n{\n  if (size == 0)\n  {\n    return 0;\n  }\n  lfs_off_t index = lfs_ctz_index(lfs, &((lfs_off_t){size - 1}));\n  while (1)\n  {\n    int err = cb(data, head);\n    if (err)\n    {\n      return err;\n    }\n    if (index == 0)\n    {\n      return 0;\n    }\n    lfs_block_t heads[2];\n    int count = 2 - (index & 1);\n    err = lfs_bd_read(lfs, pcache, rcache, count * (sizeof(head)), head, 0, &heads, count * (sizeof(head)));\n    heads[0] = lfs_fromle32(heads[0]);\n    heads[1] = lfs_fromle32(heads[1]);\n    if (err)\n    {\n      return err;\n    }\n    for (int i = 0; i < (count - 1); i += 1)\n    {\n      err = cb(data, heads[i]);\n      if (err)\n      {\n        return err;\n      }\n    }\n\n    head = heads[count - 1];\n    index -= count;\n  }\n\n}\n\n",
            "calle": [
                "cb",
                "lfs_bd_read",
                "lfs_ctz_index",
                "lfs_fromle32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pcache",
                        "type": "const lfs_cache_t *",
                        "definition": [
                            "const lfs_cache_t *pcache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rcache",
                        "type": "lfs_cache_t *",
                        "definition": [
                            "lfs_cache_t *rcache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "head",
                        "type": "lfs_block_t",
                        "definition": [
                            "lfs_block_t head"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb",
                        "type": "int (*)(void *, lfs_block_t)",
                        "definition": [
                            "int (*cb)(void *, lfs_block_t)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "void *",
                        "definition": [
                            "void *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t index = lfs_ctz_index(lfs, &((lfs_off_t){size - 1}))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = cb(data, head)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "heads",
                        "type": "lfs_block_t [2]",
                        "definition": [
                            "lfs_block_t heads[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count = 2 - (index & 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_file_opencfg_",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "lfs_file_t *file",
                "const char *path",
                "int flags",
                "const struct lfs_file_config *cfg"
            ],
            "definition": "static int lfs_file_opencfg_(lfs_t *lfs, lfs_file_t *file, const char *path, int flags, const struct lfs_file_config *cfg)\n{\n  if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY)\n  {\n    int err = lfs_fs_forceconsistency(lfs);\n    if (err)\n    {\n      return err;\n    }\n  }\n  int err;\n  file->cfg = cfg;\n  file->flags = flags;\n  file->pos = 0;\n  file->off = 0;\n  file->cache.buffer = 0;\n  lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);\n  if ((tag < 0) && (!((tag == LFS_ERR_NOENT) && lfs_path_islast(path))))\n  {\n    err = tag;\n    goto cleanup;\n  }\n  file->type = LFS_TYPE_REG;\n  lfs_mlist_append(lfs, (struct lfs_mlist *) file);\n  if (tag == LFS_ERR_NOENT)\n  {\n    helper_lfs_file_opencfg__2(&err, &err, &tag, lfs, file, path, flags);\n  }\n  else\n    if (flags & LFS_O_EXCL)\n  {\n    err = LFS_ERR_EXIST;\n    goto cleanup;\n  }\n  else\n    if (lfs_tag_type3(tag) != LFS_TYPE_REG)\n  {\n    err = LFS_ERR_ISDIR;\n    goto cleanup;\n  }\n  else\n    if (flags & LFS_O_TRUNC)\n  {\n    tag = ((((lfs_tag_t) LFS_TYPE_INLINESTRUCT) << 20) | (((lfs_tag_t) file->id) << 10)) | ((lfs_tag_t) 0);\n    file->flags |= LFS_F_DIRTY;\n  }\n  else\n  {\n    tag = lfs_dir_get(lfs, &file->m, ((((lfs_tag_t) 0x700) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) LFS_TYPE_STRUCT) << 20) | (((lfs_tag_t) file->id) << 10)) | ((lfs_tag_t) 8), &file->ctz);\n    if (tag < 0)\n    {\n      err = tag;\n      goto cleanup;\n    }\n    lfs_ctz_fromle32(&file->ctz);\n  }\n  for (unsigned i = 0; i < file->cfg->attr_count; i += 1)\n  {\n    if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY)\n    {\n      lfs_stag_t res = lfs_dir_get(lfs, &file->m, ((((lfs_tag_t) 0x7ff) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) (LFS_TYPE_USERATTR + file->cfg->attrs[i].type)) << 20) | (((lfs_tag_t) file->id) << 10)) | ((lfs_tag_t) file->cfg->attrs[i].size), file->cfg->attrs[i].buffer);\n      if ((res < 0) && (res != LFS_ERR_NOENT))\n      {\n        err = res;\n        goto cleanup;\n      }\n    }\n    if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY)\n    {\n      if (file->cfg->attrs[i].size > lfs->attr_max)\n      {\n        err = LFS_ERR_NOSPC;\n        goto cleanup;\n      }\n      file->flags |= LFS_F_DIRTY;\n    }\n  }\n\n  if (file->cfg->buffer)\n  {\n    file->cache.buffer = file->cfg->buffer;\n  }\n  else\n  {\n    file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);\n    if (!file->cache.buffer)\n    {\n      err = LFS_ERR_NOMEM;\n      goto cleanup;\n    }\n  }\n  lfs_cache_zero(lfs, &file->cache);\n  if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT)\n  {\n    helper_lfs_file_opencfg__1(&err, &err, lfs, file, tag);\n  }\n  return 0;\n  cleanup:\n  file->flags |= LFS_F_ERRED;\n\n  lfs_file_close_(lfs, file);\n  return err;\n}\n\n",
            "calle": [
                "helper_lfs_file_opencfg__1",
                "helper_lfs_file_opencfg__2",
                "lfs_cache_zero",
                "lfs_ctz_fromle32",
                "lfs_dir_find",
                "lfs_dir_get",
                "lfs_file_close_",
                "lfs_fs_forceconsistency",
                "lfs_malloc",
                "lfs_mlist_append",
                "lfs_path_islast",
                "lfs_tag_type3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t *",
                        "definition": [
                            "lfs_file_t *file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_file_config",
                        "type": "const struct lfs_file_config *",
                        "definition": [
                            "const struct lfs_file_config *cfg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err",
                            "int err = lfs_fs_forceconsistency(lfs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned",
                        "definition": [
                            "unsigned i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t res = lfs_dir_get(lfs, &file->m, ((((lfs_tag_t) 0x7ff) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) (LFS_TYPE_USERATTR + file->cfg->attrs[i].type)) << 20) | (((lfs_tag_t) file->id) << 10)) | ((lfs_tag_t) file->cfg->attrs[i].size), file->cfg->attrs[i].buffer)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_file_open_",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "lfs_file_t *file",
                "const char *path",
                "int flags"
            ],
            "definition": "static int lfs_file_open_(lfs_t *lfs, lfs_file_t *file, const char *path, int flags)\n{\n  static const struct lfs_file_config defaults = {0};\n  int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults);\n  return err;\n}\n\n",
            "calle": [
                "lfs_file_opencfg_"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t *",
                        "definition": [
                            "lfs_file_t *file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "defaults",
                        "type": "const struct lfs_file_config",
                        "definition": [
                            "static const struct lfs_file_config defaults = {0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_file_opencfg_(lfs, file, path, flags, &defaults)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_file_relocate",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "lfs_file_t *file"
            ],
            "definition": "static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file)\n{\n  while (1)\n  {\n    helper_lfs_file_relocate_1(lfs, file);\n  }\n\n}\n\n",
            "calle": [
                "helper_lfs_file_relocate_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t *",
                        "definition": [
                            "lfs_file_t *file"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_file_seek_",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "lfs_file_t *file",
                "lfs_soff_t off",
                "int whence"
            ],
            "definition": "static lfs_soff_t lfs_file_seek_(lfs_t *lfs, lfs_file_t *file, lfs_soff_t off, int whence)\n{\n  lfs_off_t npos = file->pos;\n  if (whence == LFS_SEEK_SET)\n  {\n    npos = off;\n  }\n  else\n    if (whence == LFS_SEEK_CUR)\n  {\n    npos = file->pos + ((lfs_off_t) off);\n  }\n  else\n    if (whence == LFS_SEEK_END)\n  {\n    npos = ((lfs_off_t) lfs_file_size_(lfs, file)) + ((lfs_off_t) off);\n  }\n  if (npos > lfs->file_max)\n  {\n    return LFS_ERR_INVAL;\n  }\n  if (file->pos == npos)\n  {\n    return npos;\n  }\n  if ((file->flags & LFS_F_READING) && (file->off != lfs->cfg->block_size))\n  {\n    int oindex = lfs_ctz_index(lfs, &((lfs_off_t){file->pos}));\n    lfs_off_t noff = npos;\n    int nindex = lfs_ctz_index(lfs, &noff);\n    if (((oindex == nindex) && (noff >= file->cache.off)) && (noff < (file->cache.off + file->cache.size)))\n    {\n      file->pos = npos;\n      file->off = noff;\n      return npos;\n    }\n  }\n  int err = lfs_file_flush(lfs, file);\n  if (err)\n  {\n    return err;\n  }\n  file->pos = npos;\n  return npos;\n}\n\n",
            "calle": [
                "lfs_ctz_index",
                "lfs_file_flush",
                "lfs_file_size_"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t *",
                        "definition": [
                            "lfs_file_t *file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_soff_t",
                        "definition": [
                            "lfs_soff_t off"
                        ]
                    },
                    {
                        "path": null,
                        "name": "whence",
                        "type": "int",
                        "definition": [
                            "int whence"
                        ]
                    },
                    {
                        "path": null,
                        "name": "npos",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t npos = file->pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oindex",
                        "type": "int",
                        "definition": [
                            "int oindex = lfs_ctz_index(lfs, &((lfs_off_t){file->pos}))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "noff",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t noff = npos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nindex",
                        "type": "int",
                        "definition": [
                            "int nindex = lfs_ctz_index(lfs, &noff)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_file_flush(lfs, file)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_file_truncate_",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "lfs_file_t *file",
                "lfs_off_t size"
            ],
            "definition": "static int lfs_file_truncate_(lfs_t *lfs, lfs_file_t *file, lfs_off_t size)\n{\n  assert((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);\n  if (size > 2147483647)\n  {\n    return LFS_ERR_INVAL;\n  }\n  lfs_off_t pos = file->pos;\n  lfs_off_t oldsize = lfs_file_size_(lfs, file);\n  if (size < oldsize)\n  {\n    helper_lfs_file_truncate__1(&size, lfs, file);\n  }\n  else\n    if (size > oldsize)\n  {\n    lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_END);\n    if (res < 0)\n    {\n      return (int) res;\n    }\n    while (file->pos < size)\n    {\n      res = lfs_file_write_(lfs, file, &((uint8_t){0}), 1);\n      if (res < 0)\n      {\n        return (int) res;\n      }\n    }\n\n  }\n  lfs_soff_t res = lfs_file_seek_(lfs, file, pos, LFS_SEEK_SET);\n  if (res < 0)\n  {\n    return (int) res;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_lfs_file_truncate__1",
                "lfs_file_seek_",
                "lfs_file_size_",
                "lfs_file_write_"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t *",
                        "definition": [
                            "lfs_file_t *file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t pos = file->pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oldsize",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t oldsize = lfs_file_size_(lfs, file)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res",
                        "type": "lfs_soff_t",
                        "definition": [
                            "lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_END)",
                            "lfs_soff_t res = lfs_file_seek_(lfs, file, pos, LFS_SEEK_SET)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_file_tell_",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "lfs_file_t *file"
            ],
            "definition": "static lfs_soff_t lfs_file_tell_(lfs_t *lfs, lfs_file_t *file)\n{\n  (void) lfs;\n  return file->pos;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t *",
                        "definition": [
                            "lfs_file_t *file"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_file_rewind_",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "lfs_file_t *file"
            ],
            "definition": "static int lfs_file_rewind_(lfs_t *lfs, lfs_file_t *file)\n{\n  lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);\n  if (res < 0)\n  {\n    return (int) res;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "lfs_file_seek_"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t *",
                        "definition": [
                            "lfs_file_t *file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res",
                        "type": "lfs_soff_t",
                        "definition": [
                            "lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_stat_",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "const char *path",
                "struct lfs_info *info"
            ],
            "definition": "static int lfs_stat_(lfs_t *lfs, const char *path, struct lfs_info *info)\n{\n  lfs_mdir_t cwd;\n  lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, 0);\n  if (tag < 0)\n  {\n    return (int) tag;\n  }\n  if ((strchr(path, '/') != 0) && (lfs_tag_type3(tag) != LFS_TYPE_DIR))\n  {\n    return LFS_ERR_NOTDIR;\n  }\n  return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);\n}\n\n",
            "calle": [
                "lfs_dir_find",
                "lfs_dir_getinfo",
                "lfs_tag_id",
                "lfs_tag_type3",
                "strchr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_info",
                        "type": "struct lfs_info *",
                        "definition": [
                            "struct lfs_info *info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cwd",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t cwd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_remove_",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "const char *path"
            ],
            "definition": "static int lfs_remove_(lfs_t *lfs, const char *path)\n{\n  int err = lfs_fs_forceconsistency(lfs);\n  if (err)\n  {\n    return err;\n  }\n  lfs_mdir_t cwd;\n  lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, 0);\n  if ((tag < 0) || (lfs_tag_id(tag) == 0x3ff))\n  {\n    return (tag < 0) ? ((int) tag) : (LFS_ERR_INVAL);\n  }\n  struct lfs_mlist dir;\n  dir.next = lfs->mlist;\n  if (lfs_tag_type3(tag) == LFS_TYPE_DIR)\n  {\n    helper_lfs_remove__1(&err, &dir, lfs, cwd, tag);\n  }\n  err = lfs_dir_commit(lfs, &cwd, (struct lfs_mattr []){{((((lfs_tag_t) LFS_TYPE_DELETE) << 20) | (((lfs_tag_t) lfs_tag_id(tag)) << 10)) | ((lfs_tag_t) 0), 0}}, (sizeof((struct lfs_mattr []){{((((lfs_tag_t) LFS_TYPE_DELETE) << 20) | (((lfs_tag_t) lfs_tag_id(tag)) << 10)) | ((lfs_tag_t) 0), 0}})) / (sizeof(struct lfs_mattr)));\n  if (err)\n  {\n    lfs->mlist = dir.next;\n    return err;\n  }\n  lfs->mlist = dir.next;\n  if (lfs_gstate_hasorphans(&lfs->gstate))\n  {\n    assert(lfs_tag_type3(tag) == LFS_TYPE_DIR);\n    err = lfs_fs_preporphans(lfs, -1);\n    if (err)\n    {\n      return err;\n    }\n    err = lfs_fs_pred(lfs, dir.m.pair, &cwd);\n    if (err)\n    {\n      return err;\n    }\n    err = lfs_dir_drop(lfs, &cwd, &dir.m);\n    if (err)\n    {\n      return err;\n    }\n  }\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_lfs_remove__1",
                "lfs_dir_commit",
                "lfs_dir_drop",
                "lfs_dir_find",
                "lfs_fs_forceconsistency",
                "lfs_fs_pred",
                "lfs_fs_preporphans",
                "lfs_gstate_hasorphans",
                "lfs_tag_id",
                "lfs_tag_type3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_fs_forceconsistency(lfs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cwd",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t cwd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, 0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "struct lfs_mlist",
                        "definition": [
                            "struct lfs_mlist dir"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_rename_",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "const char *oldpath",
                "const char *newpath"
            ],
            "definition": "static int lfs_rename_(lfs_t *lfs, const char *oldpath, const char *newpath)\n{\n  int err = lfs_fs_forceconsistency(lfs);\n  if (err)\n  {\n    return err;\n  }\n  lfs_mdir_t oldcwd;\n  lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, 0);\n  if ((oldtag < 0) || (lfs_tag_id(oldtag) == 0x3ff))\n  {\n    return (oldtag < 0) ? ((int) oldtag) : (LFS_ERR_INVAL);\n  }\n  lfs_mdir_t newcwd;\n  uint16_t newid;\n  lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);\n  if (((prevtag < 0) || (lfs_tag_id(prevtag) == 0x3ff)) && (!((prevtag == LFS_ERR_NOENT) && lfs_path_islast(newpath))))\n  {\n    return (prevtag < 0) ? ((int) prevtag) : (LFS_ERR_INVAL);\n  }\n  bool samepair = lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0;\n  uint16_t newoldid = lfs_tag_id(oldtag);\n  struct lfs_mlist prevdir;\n  prevdir.next = lfs->mlist;\n  if (prevtag == LFS_ERR_NOENT)\n  {\n    if (lfs_path_isdir(newpath) && (lfs_tag_type3(oldtag) != LFS_TYPE_DIR))\n    {\n      return LFS_ERR_NOTDIR;\n    }\n    lfs_size_t nlen = lfs_path_namelen(newpath);\n    if (nlen > lfs->name_max)\n    {\n      return LFS_ERR_NAMETOOLONG;\n    }\n    if (samepair && (newid <= newoldid))\n    {\n      newoldid += 1;\n    }\n  }\n  else\n    if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag))\n  {\n    return (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) ? (LFS_ERR_ISDIR) : (LFS_ERR_NOTDIR);\n  }\n  else\n    if (samepair && (newid == newoldid))\n  {\n    return 0;\n  }\n  else\n    if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR)\n  {\n    helper_lfs_rename__1(&err, &prevdir, lfs, newcwd, newid);\n  }\n  if (!samepair)\n  {\n    lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);\n  }\n  err = lfs_dir_commit(lfs, &newcwd, (struct lfs_mattr []){{(prevtag != LFS_ERR_NOENT) ? (((((lfs_tag_t) LFS_TYPE_DELETE) << 20) | (((lfs_tag_t) newid) << 10)) | ((lfs_tag_t) 0)) : (((((lfs_tag_t) LFS_FROM_NOOP) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0)), 0}, {((((lfs_tag_t) LFS_TYPE_CREATE) << 20) | (((lfs_tag_t) newid) << 10)) | ((lfs_tag_t) 0), 0}, {((((lfs_tag_t) lfs_tag_type3(oldtag)) << 20) | (((lfs_tag_t) newid) << 10)) | ((lfs_tag_t) lfs_path_namelen(newpath)), newpath}, {((((lfs_tag_t) LFS_FROM_MOVE) << 20) | (((lfs_tag_t) newid) << 10)) | ((lfs_tag_t) lfs_tag_id(oldtag)), &oldcwd}, {(samepair) ? (((((lfs_tag_t) LFS_TYPE_DELETE) << 20) | (((lfs_tag_t) newoldid) << 10)) | ((lfs_tag_t) 0)) : (((((lfs_tag_t) LFS_FROM_NOOP) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0)), 0}}, (sizeof((struct lfs_mattr []){{(prevtag != LFS_ERR_NOENT) ? (((((lfs_tag_t) LFS_TYPE_DELETE) << 20) | (((lfs_tag_t) newid) << 10)) | ((lfs_tag_t) 0)) : (((((lfs_tag_t) LFS_FROM_NOOP) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0)), 0}, {((((lfs_tag_t) LFS_TYPE_CREATE) << 20) | (((lfs_tag_t) newid) << 10)) | ((lfs_tag_t) 0), 0}, {((((lfs_tag_t) lfs_tag_type3(oldtag)) << 20) | (((lfs_tag_t) newid) << 10)) | ((lfs_tag_t) lfs_path_namelen(newpath)), newpath}, {((((lfs_tag_t) LFS_FROM_MOVE) << 20) | (((lfs_tag_t) newid) << 10)) | ((lfs_tag_t) lfs_tag_id(oldtag)), &oldcwd}, {(samepair) ? (((((lfs_tag_t) LFS_TYPE_DELETE) << 20) | (((lfs_tag_t) newoldid) << 10)) | ((lfs_tag_t) 0)) : (((((lfs_tag_t) LFS_FROM_NOOP) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0)), 0}})) / (sizeof(struct lfs_mattr)));\n  if (err)\n  {\n    lfs->mlist = prevdir.next;\n    return err;\n  }\n  if ((!samepair) && lfs_gstate_hasmove(&lfs->gstate))\n  {\n    lfs_fs_prepmove(lfs, 0x3ff, 0);\n    err = lfs_dir_commit(lfs, &oldcwd, (struct lfs_mattr []){{((((lfs_tag_t) LFS_TYPE_DELETE) << 20) | (((lfs_tag_t) lfs_tag_id(oldtag)) << 10)) | ((lfs_tag_t) 0), 0}}, (sizeof((struct lfs_mattr []){{((((lfs_tag_t) LFS_TYPE_DELETE) << 20) | (((lfs_tag_t) lfs_tag_id(oldtag)) << 10)) | ((lfs_tag_t) 0), 0}})) / (sizeof(struct lfs_mattr)));\n    if (err)\n    {\n      lfs->mlist = prevdir.next;\n      return err;\n    }\n  }\n  lfs->mlist = prevdir.next;\n  if (lfs_gstate_hasorphans(&lfs->gstate))\n  {\n    assert((prevtag != LFS_ERR_NOENT) && (lfs_tag_type3(prevtag) == LFS_TYPE_DIR));\n    err = lfs_fs_preporphans(lfs, -1);\n    if (err)\n    {\n      return err;\n    }\n    err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);\n    if (err)\n    {\n      return err;\n    }\n    err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);\n    if (err)\n    {\n      return err;\n    }\n  }\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "helper_lfs_rename__1",
                "lfs_dir_commit",
                "lfs_dir_drop",
                "lfs_dir_find",
                "lfs_fs_forceconsistency",
                "lfs_fs_pred",
                "lfs_fs_prepmove",
                "lfs_fs_preporphans",
                "lfs_gstate_hasmove",
                "lfs_gstate_hasorphans",
                "lfs_pair_cmp",
                "lfs_path_isdir",
                "lfs_path_islast",
                "lfs_path_namelen",
                "lfs_tag_id",
                "lfs_tag_type3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oldpath",
                        "type": "const char *",
                        "definition": [
                            "const char *oldpath"
                        ]
                    },
                    {
                        "path": null,
                        "name": "newpath",
                        "type": "const char *",
                        "definition": [
                            "const char *newpath"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_fs_forceconsistency(lfs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oldcwd",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t oldcwd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oldtag",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, 0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "newcwd",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t newcwd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "newid",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t newid"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prevtag",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "samepair",
                        "type": "bool",
                        "definition": [
                            "bool samepair = lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "newoldid",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t newoldid = lfs_tag_id(oldtag)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prevdir",
                        "type": "struct lfs_mlist",
                        "definition": [
                            "struct lfs_mlist prevdir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nlen",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t nlen = lfs_path_namelen(newpath)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_getattr_",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "const char *path",
                "uint8_t type",
                "void *buffer",
                "lfs_size_t size"
            ],
            "definition": "static lfs_ssize_t lfs_getattr_(lfs_t *lfs, const char *path, uint8_t type, void *buffer, lfs_size_t size)\n{\n  lfs_mdir_t cwd;\n  lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, 0);\n  if (tag < 0)\n  {\n    return tag;\n  }\n  uint16_t id = lfs_tag_id(tag);\n  if (id == 0x3ff)\n  {\n    id = 0;\n    int err = lfs_dir_fetch(lfs, &cwd, lfs->root);\n    if (err)\n    {\n      return err;\n    }\n  }\n  tag = lfs_dir_get(lfs, &cwd, ((((lfs_tag_t) 0x7ff) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) (LFS_TYPE_USERATTR + type)) << 20) | (((lfs_tag_t) id) << 10)) | ((lfs_tag_t) lfs_min(size, lfs->attr_max)), buffer);\n  if (tag < 0)\n  {\n    if (tag == LFS_ERR_NOENT)\n    {\n      return LFS_ERR_NOATTR;\n    }\n    return tag;\n  }\n  return lfs_tag_size(tag);\n}\n\n",
            "calle": [
                "lfs_dir_fetch",
                "lfs_dir_find",
                "lfs_dir_get",
                "lfs_min",
                "lfs_tag_id",
                "lfs_tag_size"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "void *",
                        "definition": [
                            "void *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cwd",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t cwd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, 0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t id = lfs_tag_id(tag)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_dir_fetch(lfs, &cwd, lfs->root)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_commitattr",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "const char *path",
                "uint8_t type",
                "const void *buffer",
                "lfs_size_t size"
            ],
            "definition": "static int lfs_commitattr(lfs_t *lfs, const char *path, uint8_t type, const void *buffer, lfs_size_t size)\n{\n  lfs_mdir_t cwd;\n  lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, 0);\n  if (tag < 0)\n  {\n    return tag;\n  }\n  uint16_t id = lfs_tag_id(tag);\n  if (id == 0x3ff)\n  {\n    id = 0;\n    int err = lfs_dir_fetch(lfs, &cwd, lfs->root);\n    if (err)\n    {\n      return err;\n    }\n  }\n  return lfs_dir_commit(lfs, &cwd, (struct lfs_mattr []){{((((lfs_tag_t) (LFS_TYPE_USERATTR + type)) << 20) | (((lfs_tag_t) id) << 10)) | ((lfs_tag_t) size), buffer}}, (sizeof((struct lfs_mattr []){{((((lfs_tag_t) (LFS_TYPE_USERATTR + type)) << 20) | (((lfs_tag_t) id) << 10)) | ((lfs_tag_t) size), buffer}})) / (sizeof(struct lfs_mattr)));\n}\n\n",
            "calle": [
                "lfs_dir_commit",
                "lfs_dir_fetch",
                "lfs_dir_find",
                "lfs_tag_id"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "const void *",
                        "definition": [
                            "const void *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cwd",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t cwd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, 0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t id = lfs_tag_id(tag)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_dir_fetch(lfs, &cwd, lfs->root)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_setattr_",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "const char *path",
                "uint8_t type",
                "const void *buffer",
                "lfs_size_t size"
            ],
            "definition": "static int lfs_setattr_(lfs_t *lfs, const char *path, uint8_t type, const void *buffer, lfs_size_t size)\n{\n  if (size > lfs->attr_max)\n  {\n    return LFS_ERR_NOSPC;\n  }\n  return lfs_commitattr(lfs, path, type, buffer, size);\n}\n\n",
            "calle": [
                "lfs_commitattr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "const void *",
                        "definition": [
                            "const void *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_removeattr_",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "const char *path",
                "uint8_t type"
            ],
            "definition": "static int lfs_removeattr_(lfs_t *lfs, const char *path, uint8_t type)\n{\n  return lfs_commitattr(lfs, path, type, 0, 0x3ff);\n}\n\n",
            "calle": [
                "lfs_commitattr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t type"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_init",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "const struct lfs_config *cfg"
            ],
            "definition": "static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg)\n{\n  lfs->cfg = cfg;\n  lfs->block_count = cfg->block_count;\n  int err = 0;\n  assert((bool) 0x80000000);\n  assert(lfs->cfg->read != 0);\n  assert(lfs->cfg->prog != 0);\n  assert(lfs->cfg->erase != 0);\n  assert(lfs->cfg->sync != 0);\n  assert(lfs->cfg->read_size != 0);\n  assert(lfs->cfg->prog_size != 0);\n  assert(lfs->cfg->cache_size != 0);\n  assert((lfs->cfg->cache_size % lfs->cfg->read_size) == 0);\n  assert((lfs->cfg->cache_size % lfs->cfg->prog_size) == 0);\n  assert((lfs->cfg->block_size % lfs->cfg->cache_size) == 0);\n  assert(lfs->cfg->block_size >= 128);\n  assert((4 * lfs_npw2(0xffffffff / (lfs->cfg->block_size - (2 * 4)))) <= lfs->cfg->block_size);\n  assert(lfs->cfg->block_cycles != 0);\n  assert((lfs->cfg->compact_thresh == 0) || (lfs->cfg->compact_thresh >= (lfs->cfg->block_size / 2)));\n  assert((lfs->cfg->compact_thresh == ((lfs_size_t) (-1))) || (lfs->cfg->compact_thresh <= lfs->cfg->block_size));\n  assert((!lfs->cfg->metadata_max) || ((lfs->cfg->metadata_max % lfs->cfg->read_size) == 0));\n  assert((!lfs->cfg->metadata_max) || ((lfs->cfg->metadata_max % lfs->cfg->prog_size) == 0));\n  assert((!lfs->cfg->metadata_max) || ((lfs->cfg->block_size % lfs->cfg->metadata_max) == 0));\n  if (lfs->cfg->read_buffer)\n  {\n    lfs->rcache.buffer = lfs->cfg->read_buffer;\n  }\n  else\n  {\n    lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);\n    if (!lfs->rcache.buffer)\n    {\n      err = LFS_ERR_NOMEM;\n      goto cleanup;\n    }\n  }\n  if (lfs->cfg->prog_buffer)\n  {\n    lfs->pcache.buffer = lfs->cfg->prog_buffer;\n  }\n  else\n  {\n    lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);\n    if (!lfs->pcache.buffer)\n    {\n      err = LFS_ERR_NOMEM;\n      goto cleanup;\n    }\n  }\n  lfs_cache_zero(lfs, &lfs->rcache);\n  lfs_cache_zero(lfs, &lfs->pcache);\n  assert(lfs->cfg->lookahead_size > 0);\n  if (lfs->cfg->lookahead_buffer)\n  {\n    lfs->lookahead.buffer = lfs->cfg->lookahead_buffer;\n  }\n  else\n  {\n    lfs->lookahead.buffer = lfs_malloc(lfs->cfg->lookahead_size);\n    if (!lfs->lookahead.buffer)\n    {\n      err = LFS_ERR_NOMEM;\n      goto cleanup;\n    }\n  }\n  assert(lfs->cfg->name_max <= 255);\n  lfs->name_max = lfs->cfg->name_max;\n  if (!lfs->name_max)\n  {\n    lfs->name_max = 255;\n  }\n  assert(lfs->cfg->file_max <= 2147483647);\n  lfs->file_max = lfs->cfg->file_max;\n  if (!lfs->file_max)\n  {\n    lfs->file_max = 2147483647;\n  }\n  assert(lfs->cfg->attr_max <= 1022);\n  lfs->attr_max = lfs->cfg->attr_max;\n  if (!lfs->attr_max)\n  {\n    lfs->attr_max = 1022;\n  }\n  assert(lfs->cfg->metadata_max <= lfs->cfg->block_size);\n  assert((lfs->cfg->inline_max == ((lfs_size_t) (-1))) || (lfs->cfg->inline_max <= lfs->cfg->cache_size));\n  assert((lfs->cfg->inline_max == ((lfs_size_t) (-1))) || (lfs->cfg->inline_max <= lfs->attr_max));\n  assert((lfs->cfg->inline_max == ((lfs_size_t) (-1))) || (lfs->cfg->inline_max <= (((lfs->cfg->metadata_max) ? (lfs->cfg->metadata_max) : (lfs->cfg->block_size)) / 8)));\n  lfs->inline_max = lfs->cfg->inline_max;\n  if (lfs->inline_max == ((lfs_size_t) (-1)))\n  {\n    lfs->inline_max = 0;\n  }\n  else\n    if (lfs->inline_max == 0)\n  {\n    lfs->inline_max = lfs_min(lfs->cfg->cache_size, lfs_min(lfs->attr_max, ((lfs->cfg->metadata_max) ? (lfs->cfg->metadata_max) : (lfs->cfg->block_size)) / 8));\n  }\n  lfs->root[0] = (lfs_block_t) (-1);\n  lfs->root[1] = (lfs_block_t) (-1);\n  lfs->mlist = 0;\n  lfs->seed = 0;\n  lfs->gdisk = (lfs_gstate_t){0};\n  lfs->gstate = (lfs_gstate_t){0};\n  lfs->gdelta = (lfs_gstate_t){0};\n  return 0;\n  cleanup:\n  lfs_deinit(lfs);\n\n  return err;\n}\n\n",
            "calle": [
                "assert",
                "lfs_cache_zero",
                "lfs_deinit",
                "lfs_malloc",
                "lfs_min",
                "lfs_npw2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_config",
                        "type": "const struct lfs_config *",
                        "definition": [
                            "const struct lfs_config *cfg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_format_",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "const struct lfs_config *cfg"
            ],
            "definition": "static int lfs_format_(lfs_t *lfs, const struct lfs_config *cfg)\n{\n  int err = 0;\n  {\n    err = lfs_init(lfs, cfg);\n    if (err)\n    {\n      return err;\n    }\n    assert(cfg->block_count != 0);\n    memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size);\n    lfs->lookahead.start = 0;\n    lfs->lookahead.size = lfs_min(8 * lfs->cfg->lookahead_size, lfs->block_count);\n    lfs->lookahead.next = 0;\n    lfs_alloc_ckpoint(lfs);\n    lfs_mdir_t root;\n    err = lfs_dir_alloc(lfs, &root);\n    if (err)\n    {\n      goto cleanup;\n    }\n    lfs_superblock_t superblock = {.version = lfs_fs_disk_version(lfs), .block_size = lfs->cfg->block_size, .block_count = lfs->block_count, .name_max = lfs->name_max, .file_max = lfs->file_max, .attr_max = lfs->attr_max};\n    lfs_superblock_tole32(&superblock);\n    err = lfs_dir_commit(lfs, &root, (struct lfs_mattr []){{((((lfs_tag_t) LFS_TYPE_CREATE) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0), 0}, {((((lfs_tag_t) LFS_TYPE_SUPERBLOCK) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 8), \"littlefs\"}, {((((lfs_tag_t) LFS_TYPE_INLINESTRUCT) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) (sizeof(superblock))), &superblock}}, (sizeof((struct lfs_mattr []){{((((lfs_tag_t) LFS_TYPE_CREATE) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0), 0}, {((((lfs_tag_t) LFS_TYPE_SUPERBLOCK) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 8), \"littlefs\"}, {((((lfs_tag_t) LFS_TYPE_INLINESTRUCT) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) (sizeof(superblock))), &superblock}})) / (sizeof(struct lfs_mattr)));\n    if (err)\n    {\n      goto cleanup;\n    }\n    root.erased = 0;\n    err = lfs_dir_commit(lfs, &root, 0, 0);\n    if (err)\n    {\n      goto cleanup;\n    }\n    err = lfs_dir_fetch(lfs, &root, (const lfs_block_t [2]){0, 1});\n    if (err)\n    {\n      goto cleanup;\n    }\n  }\n  cleanup:\n  lfs_deinit(lfs);\n\n  return err;\n}\n\n",
            "calle": [
                "assert",
                "lfs_alloc_ckpoint",
                "lfs_deinit",
                "lfs_dir_alloc",
                "lfs_dir_commit",
                "lfs_dir_fetch",
                "lfs_fs_disk_version",
                "lfs_init",
                "lfs_min",
                "lfs_superblock_tole32",
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_config",
                        "type": "const struct lfs_config *",
                        "definition": [
                            "const struct lfs_config *cfg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "root",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t root"
                        ]
                    },
                    {
                        "path": null,
                        "name": "superblock",
                        "type": "lfs_superblock_t",
                        "definition": [
                            "lfs_superblock_t superblock = {.version = lfs_fs_disk_version(lfs), .block_size = lfs->cfg->block_size, .block_count = lfs->block_count, .name_max = lfs->name_max, .file_max = lfs->file_max, .attr_max = lfs->attr_max}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_tortoise_detectcycles",
            "header": "",
            "params": [
                "const lfs_mdir_t *dir",
                "struct lfs_tortoise_t *tortoise"
            ],
            "definition": "static int lfs_tortoise_detectcycles(const lfs_mdir_t *dir, struct lfs_tortoise_t *tortoise)\n{\n  if (lfs_pair_issync(dir->tail, tortoise->pair))\n  {\n    printf(\"%s:%d:warn: Cycle detected in tail list%s\\n\", \"/home/ubuntu/C2RustTranslation/subjects/littlefs/lfs.c\", 4468, \"\");\n    return LFS_ERR_CORRUPT;\n  }\n  if (tortoise->i == tortoise->period)\n  {\n    tortoise->pair[0] = dir->tail[0];\n    tortoise->pair[1] = dir->tail[1];\n    tortoise->i = 0;\n    tortoise->period *= 2;\n  }\n  tortoise->i += 1;\n  return LFS_ERR_OK;\n}\n\n",
            "calle": [
                "lfs_pair_issync",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dir",
                        "type": "const lfs_mdir_t *",
                        "definition": [
                            "const lfs_mdir_t *dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_tortoise_t",
                        "type": "struct lfs_tortoise_t *",
                        "definition": [
                            "struct lfs_tortoise_t *tortoise"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_mount_",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "const struct lfs_config *cfg"
            ],
            "definition": "static int lfs_mount_(lfs_t *lfs, const struct lfs_config *cfg)\n{\n  int err = lfs_init(lfs, cfg);\n  if (err)\n  {\n    return err;\n  }\n  lfs_mdir_t dir = {.tail = {0, 1}};\n  struct lfs_tortoise_t tortoise = {.pair = {(lfs_block_t) (-1), (lfs_block_t) (-1)}, .i = 1, .period = 1};\n  while (!lfs_pair_isnull(dir.tail))\n  {\n    helper_lfs_mount__1(&err, lfs, dir, tortoise);\n  }\n\n  if (!lfs_gstate_iszero(&lfs->gstate))\n  {\n    printf(\"%s:%d:debug: Found pending gstate 0x%08x%08x%08x%s\\n\", \"/home/ubuntu/C2RustTranslation/subjects/littlefs/lfs.c\", 4627, lfs->gstate.tag, lfs->gstate.pair[0], lfs->gstate.pair[1], \"\");\n  }\n  lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);\n  lfs->gdisk = lfs->gstate;\n  lfs->lookahead.start = lfs->seed % lfs->block_count;\n  lfs_alloc_drop(lfs);\n  return 0;\n  cleanup:\n  lfs_unmount_(lfs);\n\n  return err;\n}\n\n",
            "calle": [
                "helper_lfs_mount__1",
                "lfs_alloc_drop",
                "lfs_gstate_iszero",
                "lfs_init",
                "lfs_pair_isnull",
                "lfs_tag_isvalid",
                "lfs_unmount_",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_config",
                        "type": "const struct lfs_config *",
                        "definition": [
                            "const struct lfs_config *cfg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_init(lfs, cfg)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t dir = {.tail = {0, 1}}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tortoise",
                        "type": "struct lfs_tortoise_t",
                        "definition": [
                            "struct lfs_tortoise_t tortoise = {.pair = {(lfs_block_t) (-1), (lfs_block_t) (-1)}, .i = 1, .period = 1}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_fs_stat_",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "struct lfs_fsinfo *fsinfo"
            ],
            "definition": "static int lfs_fs_stat_(lfs_t *lfs, struct lfs_fsinfo *fsinfo)\n{\n  if (!lfs_gstate_needssuperblock(&lfs->gstate))\n  {\n    fsinfo->disk_version = lfs_fs_disk_version(lfs);\n  }\n  else\n  {\n    lfs_mdir_t dir;\n    int err = lfs_dir_fetch(lfs, &dir, lfs->root);\n    if (err)\n    {\n      return err;\n    }\n    lfs_superblock_t superblock;\n    lfs_stag_t tag = lfs_dir_get(lfs, &dir, ((((lfs_tag_t) 0x7ff) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) LFS_TYPE_INLINESTRUCT) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) (sizeof(superblock))), &superblock);\n    if (tag < 0)\n    {\n      return tag;\n    }\n    lfs_superblock_fromle32(&superblock);\n    fsinfo->disk_version = superblock.version;\n  }\n  fsinfo->block_size = lfs->cfg->block_size;\n  fsinfo->block_count = lfs->block_count;\n  fsinfo->name_max = lfs->name_max;\n  fsinfo->file_max = lfs->file_max;\n  fsinfo->attr_max = lfs->attr_max;\n  return 0;\n}\n\n",
            "calle": [
                "lfs_dir_fetch",
                "lfs_dir_get",
                "lfs_fs_disk_version",
                "lfs_gstate_needssuperblock",
                "lfs_superblock_fromle32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_fsinfo",
                        "type": "struct lfs_fsinfo *",
                        "definition": [
                            "struct lfs_fsinfo *fsinfo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_dir_fetch(lfs, &dir, lfs->root)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "superblock",
                        "type": "lfs_superblock_t",
                        "definition": [
                            "lfs_superblock_t superblock"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t tag = lfs_dir_get(lfs, &dir, ((((lfs_tag_t) 0x7ff) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) LFS_TYPE_INLINESTRUCT) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) (sizeof(superblock))), &superblock)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_fs_parent_match",
            "header": "",
            "params": [
                "void *data",
                "lfs_tag_t tag",
                "const void *buffer"
            ],
            "definition": "static int lfs_fs_parent_match(void *data, lfs_tag_t tag, const void *buffer)\n{\n  struct lfs_fs_parent_match *find = data;\n  lfs_t *lfs = find->lfs;\n  const struct lfs_diskoff *disk = buffer;\n  (void) tag;\n  lfs_block_t child[2];\n  int err = lfs_bd_read(lfs, &lfs->pcache, &lfs->rcache, lfs->cfg->block_size, disk->block, disk->off, &child, sizeof(child));\n  if (err)\n  {\n    return err;\n  }\n  lfs_pair_fromle32(child);\n  return (lfs_pair_cmp(child, find->pair) == 0) ? (LFS_CMP_EQ) : (LFS_CMP_LT);\n}\n\n",
            "calle": [
                "lfs_bd_read",
                "lfs_pair_cmp",
                "lfs_pair_fromle32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "void *",
                        "definition": [
                            "void *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "const void *",
                        "definition": [
                            "const void *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_fs_parent_match",
                        "type": "struct lfs_fs_parent_match *",
                        "definition": [
                            "struct lfs_fs_parent_match *find = data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs = find->lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_diskoff",
                        "type": "const struct lfs_diskoff *",
                        "definition": [
                            "const struct lfs_diskoff *disk = buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "child",
                        "type": "lfs_block_t [2]",
                        "definition": [
                            "lfs_block_t child[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_bd_read(lfs, &lfs->pcache, &lfs->rcache, lfs->cfg->block_size, disk->block, disk->off, &child, sizeof(child))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_fs_desuperblock",
            "header": "",
            "params": [
                "lfs_t *lfs"
            ],
            "definition": "static int lfs_fs_desuperblock(lfs_t *lfs)\n{\n  if (!lfs_gstate_needssuperblock(&lfs->gstate))\n  {\n    return 0;\n  }\n  printf(\"%s:%d:debug: Rewriting superblock {0x%x, 0x%x}%s\\n\", \"/home/ubuntu/C2RustTranslation/subjects/littlefs/lfs.c\", 4921, lfs->root[0], lfs->root[1], \"\");\n  lfs_mdir_t root;\n  int err = lfs_dir_fetch(lfs, &root, lfs->root);\n  if (err)\n  {\n    return err;\n  }\n  lfs_superblock_t superblock = {.version = lfs_fs_disk_version(lfs), .block_size = lfs->cfg->block_size, .block_count = lfs->block_count, .name_max = lfs->name_max, .file_max = lfs->file_max, .attr_max = lfs->attr_max};\n  lfs_superblock_tole32(&superblock);\n  err = lfs_dir_commit(lfs, &root, (struct lfs_mattr []){{((((lfs_tag_t) LFS_TYPE_INLINESTRUCT) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) (sizeof(superblock))), &superblock}}, (sizeof((struct lfs_mattr []){{((((lfs_tag_t) LFS_TYPE_INLINESTRUCT) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) (sizeof(superblock))), &superblock}})) / (sizeof(struct lfs_mattr)));\n  if (err)\n  {\n    return err;\n  }\n  lfs_fs_prepsuperblock(lfs, 0);\n  return 0;\n}\n\n",
            "calle": [
                "lfs_dir_commit",
                "lfs_dir_fetch",
                "lfs_fs_disk_version",
                "lfs_fs_prepsuperblock",
                "lfs_gstate_needssuperblock",
                "lfs_superblock_tole32",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "root",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t root"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_dir_fetch(lfs, &root, lfs->root)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "superblock",
                        "type": "lfs_superblock_t",
                        "definition": [
                            "lfs_superblock_t superblock = {.version = lfs_fs_disk_version(lfs), .block_size = lfs->cfg->block_size, .block_count = lfs->block_count, .name_max = lfs->name_max, .file_max = lfs->file_max, .attr_max = lfs->attr_max}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_fs_demove",
            "header": "",
            "params": [
                "lfs_t *lfs"
            ],
            "definition": "static int lfs_fs_demove(lfs_t *lfs)\n{\n  if (!lfs_gstate_hasmove(&lfs->gdisk))\n  {\n    return 0;\n  }\n  printf(\"%s:%d:debug: Fixing move {0x%x, 0x%x} 0x%x%s\\n\", \"/home/ubuntu/C2RustTranslation/subjects/littlefs/lfs.c\", 4961, lfs->gdisk.pair[0], lfs->gdisk.pair[1], lfs_tag_id(lfs->gdisk.tag), \"\");\n  assert(lfs_tag_type3(lfs->gdisk.tag) == LFS_TYPE_DELETE);\n  lfs_mdir_t movedir;\n  int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);\n  if (err)\n  {\n    return err;\n  }\n  uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);\n  lfs_fs_prepmove(lfs, 0x3ff, 0);\n  err = lfs_dir_commit(lfs, &movedir, (struct lfs_mattr []){{((((lfs_tag_t) LFS_TYPE_DELETE) << 20) | (((lfs_tag_t) moveid) << 10)) | ((lfs_tag_t) 0), 0}}, (sizeof((struct lfs_mattr []){{((((lfs_tag_t) LFS_TYPE_DELETE) << 20) | (((lfs_tag_t) moveid) << 10)) | ((lfs_tag_t) 0), 0}})) / (sizeof(struct lfs_mattr)));\n  if (err)\n  {\n    return err;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "lfs_dir_commit",
                "lfs_dir_fetch",
                "lfs_fs_prepmove",
                "lfs_gstate_hasmove",
                "lfs_tag_id",
                "lfs_tag_type3",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "movedir",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t movedir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "moveid",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t moveid = lfs_tag_id(lfs->gdisk.tag)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_fs_mkconsistent_",
            "header": "",
            "params": [
                "lfs_t *lfs"
            ],
            "definition": "static int lfs_fs_mkconsistent_(lfs_t *lfs)\n{\n  int err = lfs_fs_forceconsistency(lfs);\n  if (err)\n  {\n    return err;\n  }\n  lfs_gstate_t delta = {0};\n  lfs_gstate_xor(&delta, &lfs->gdisk);\n  lfs_gstate_xor(&delta, &lfs->gstate);\n  if (!lfs_gstate_iszero(&delta))\n  {\n    lfs_mdir_t root;\n    err = lfs_dir_fetch(lfs, &root, lfs->root);\n    if (err)\n    {\n      return err;\n    }\n    err = lfs_dir_commit(lfs, &root, 0, 0);\n    if (err)\n    {\n      return err;\n    }\n  }\n  return 0;\n}\n\n",
            "calle": [
                "lfs_dir_commit",
                "lfs_dir_fetch",
                "lfs_fs_forceconsistency",
                "lfs_gstate_iszero",
                "lfs_gstate_xor"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_fs_forceconsistency(lfs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "delta",
                        "type": "lfs_gstate_t",
                        "definition": [
                            "lfs_gstate_t delta = {0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "root",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t root"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_fs_size_count",
            "header": "",
            "params": [
                "void *p",
                "lfs_block_t block"
            ],
            "definition": "static int lfs_fs_size_count(void *p, lfs_block_t block)\n{\n  (void) block;\n  lfs_size_t *size = p;\n  *size += 1;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p",
                        "type": "void *",
                        "definition": [
                            "void *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "lfs_block_t",
                        "definition": [
                            "lfs_block_t block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_size_t *",
                        "definition": [
                            "lfs_size_t *size = p"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_fs_gc_",
            "header": "",
            "params": [
                "lfs_t *lfs"
            ],
            "definition": "static int lfs_fs_gc_(lfs_t *lfs)\n{\n  int err = lfs_fs_forceconsistency(lfs);\n  if (err)\n  {\n    return err;\n  }\n  if (lfs->cfg->compact_thresh < (lfs->cfg->block_size - lfs->cfg->prog_size))\n  {\n    lfs_mdir_t mdir = {.tail = {0, 1}};\n    while (!lfs_pair_isnull(mdir.tail))\n    {\n      err = lfs_dir_fetch(lfs, &mdir, mdir.tail);\n      if (err)\n      {\n        return err;\n      }\n      if ((!mdir.erased) || ((lfs->cfg->compact_thresh == 0) ? (mdir.off > (lfs->cfg->block_size - (lfs->cfg->block_size / 8))) : (mdir.off > lfs->cfg->compact_thresh)))\n      {\n        mdir.erased = 0;\n        err = lfs_dir_commit(lfs, &mdir, 0, 0);\n        if (err)\n        {\n          return err;\n        }\n      }\n    }\n\n  }\n  if (lfs->lookahead.size < lfs_min(8 * lfs->cfg->lookahead_size, lfs->block_count))\n  {\n    err = lfs_alloc_scan(lfs);\n    if (err)\n    {\n      return err;\n    }\n  }\n  return 0;\n}\n\n",
            "calle": [
                "lfs_alloc_scan",
                "lfs_dir_commit",
                "lfs_dir_fetch",
                "lfs_fs_forceconsistency",
                "lfs_min",
                "lfs_pair_isnull"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_fs_forceconsistency(lfs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mdir",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t mdir = {.tail = {0, 1}}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_fs_grow_",
            "header": "",
            "params": [
                "lfs_t *lfs",
                "lfs_size_t block_count"
            ],
            "definition": "static int lfs_fs_grow_(lfs_t *lfs, lfs_size_t block_count)\n{\n  int err;\n  if (block_count == lfs->block_count)\n  {\n    return 0;\n  }\n  assert(block_count >= lfs->block_count);\n  lfs->block_count = block_count;\n  lfs_mdir_t root;\n  err = lfs_dir_fetch(lfs, &root, lfs->root);\n  if (err)\n  {\n    return err;\n  }\n  lfs_superblock_t superblock;\n  lfs_stag_t tag = lfs_dir_get(lfs, &root, ((((lfs_tag_t) 0x7ff) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) LFS_TYPE_INLINESTRUCT) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) (sizeof(superblock))), &superblock);\n  if (tag < 0)\n  {\n    return tag;\n  }\n  lfs_superblock_fromle32(&superblock);\n  superblock.block_count = lfs->block_count;\n  lfs_superblock_tole32(&superblock);\n  err = lfs_dir_commit(lfs, &root, (struct lfs_mattr []){{tag, &superblock}}, (sizeof((struct lfs_mattr []){{tag, &superblock}})) / (sizeof(struct lfs_mattr)));\n  if (err)\n  {\n    return err;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "lfs_dir_commit",
                "lfs_dir_fetch",
                "lfs_dir_get",
                "lfs_superblock_fromle32",
                "lfs_superblock_tole32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t *",
                        "definition": [
                            "lfs_t *lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block_count",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t block_count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err"
                        ]
                    },
                    {
                        "path": null,
                        "name": "root",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t root"
                        ]
                    },
                    {
                        "path": null,
                        "name": "superblock",
                        "type": "lfs_superblock_t",
                        "definition": [
                            "lfs_superblock_t superblock"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t tag = lfs_dir_get(lfs, &root, ((((lfs_tag_t) 0x7ff) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) LFS_TYPE_INLINESTRUCT) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) (sizeof(superblock))), &superblock)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_lfs_bd_read_1",
            "header": "",
            "params": [
                "lfs_block_t * const block_ref",
                "lfs_off_t * const off_ref",
                "lfs_size_t * const size_ref",
                "unsigned int * const data_idx_ref",
                "lfs_t * const lfs",
                "const lfs_cache_t * const pcache",
                "lfs_cache_t * const rcache",
                "lfs_size_t hint",
                "uint8_t * const data"
            ],
            "definition": "int helper_lfs_bd_read_1(lfs_block_t * const block_ref, lfs_off_t * const off_ref, lfs_size_t * const size_ref, unsigned int * const data_idx_ref, lfs_t * const lfs, const lfs_cache_t * const pcache, lfs_cache_t * const rcache, lfs_size_t hint, uint8_t * const data)\n{\n  lfs_block_t block = *block_ref;\n  lfs_off_t off = *off_ref;\n  lfs_size_t size = *size_ref;\n  unsigned int data_idx = *data_idx_ref;\n  lfs_size_t diff = size;\n  if ((pcache && (block == pcache->block)) && (off < (pcache->off + pcache->size)))\n  {\n    if (off >= pcache->off)\n    {\n      diff = lfs_min(diff, pcache->size - (off - pcache->off));\n      memcpy(data, &pcache->buffer[off - pcache->off], diff);\n      data_idx += diff;\n      off += diff;\n      size -= diff;\n      continue;\n    }\n    diff = lfs_min(diff, pcache->off - off);\n  }\n  if ((block == rcache->block) && (off < (rcache->off + rcache->size)))\n  {\n    if (off >= rcache->off)\n    {\n      diff = lfs_min(diff, rcache->size - (off - rcache->off));\n      memcpy(data, &rcache->buffer[off - rcache->off], diff);\n      data_idx += diff;\n      off += diff;\n      size -= diff;\n      continue;\n    }\n    diff = lfs_min(diff, rcache->off - off);\n  }\n  if (((size >= hint) && ((off % lfs->cfg->read_size) == 0)) && (size >= lfs->cfg->read_size))\n  {\n    diff = lfs_aligndown(diff, lfs->cfg->read_size);\n    int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);\n    assert(err <= 0);\n    if (err)\n    {\n      return err;\n    }\n    data_idx += diff;\n    off += diff;\n    size -= diff;\n    continue;\n  }\n  assert((!lfs->block_count) || (block < lfs->block_count));\n  rcache->block = block;\n  rcache->off = lfs_aligndown(off, lfs->cfg->read_size);\n  rcache->size = lfs_min(lfs_min(lfs_alignup(off + hint, lfs->cfg->read_size), lfs->cfg->block_size) - rcache->off, lfs->cfg->cache_size);\n  int err = lfs->cfg->read(lfs->cfg, rcache->block, rcache->off, rcache->buffer, rcache->size);\n  assert(err <= 0);\n  if (err)\n  {\n    return err;\n  }\n  *block_ref = block;\n  *off_ref = off;\n  *size_ref = size;\n  *data_idx_ref = data_idx;\n}\n\n",
            "calle": [
                "assert",
                "lfs->cfg->read",
                "lfs_aligndown",
                "lfs_alignup",
                "lfs_min",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "block_ref",
                        "type": "lfs_block_t * const",
                        "definition": [
                            "lfs_block_t * const block_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off_ref",
                        "type": "lfs_off_t * const",
                        "definition": [
                            "lfs_off_t * const off_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size_ref",
                        "type": "lfs_size_t * const",
                        "definition": [
                            "lfs_size_t * const size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const data_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pcache",
                        "type": "const lfs_cache_t * const",
                        "definition": [
                            "const lfs_cache_t * const pcache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rcache",
                        "type": "lfs_cache_t * const",
                        "definition": [
                            "lfs_cache_t * const rcache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hint",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t hint"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t * const",
                        "definition": [
                            "uint8_t * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "lfs_block_t",
                        "definition": [
                            "lfs_block_t block = *block_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t off = *off_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t size = *size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int data_idx = *data_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t diff = size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs->cfg->read(lfs->cfg, block, off, data, diff)",
                            "int err = lfs->cfg->read(lfs->cfg, rcache->block, rcache->off, rcache->buffer, rcache->size)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_lfs_dir_traverse_1",
            "header": "",
            "params": [
                "lfs_off_t * const off_ref",
                "lfs_tag_t * const ptag_ref",
                "int * const attrcount_ref",
                "lfs_tag_t * const tmask_ref",
                "lfs_tag_t * const ttag_ref",
                "uint16_t * const begin_ref",
                "uint16_t * const end_ref",
                "int16_t * const diff_ref",
                "lfs_tag_t * const tag_ref",
                "unsigned int * const data_idx_ref",
                "unsigned int * const cb_idx_ref",
                "unsigned int * const attrs_idx_ref",
                "unsigned int * const dir_idx_ref",
                "unsigned * const sp_ref",
                "lfs_tag_t * const tag_ref",
                "unsigned int * const buffer_idx_ref",
                "struct lfs_diskoff * const disk_ref",
                "struct lfs_dir_traverse stack[3 - 1]"
            ],
            "definition": "void helper_lfs_dir_traverse_1(lfs_off_t * const off_ref, lfs_tag_t * const ptag_ref, int * const attrcount_ref, lfs_tag_t * const tmask_ref, lfs_tag_t * const ttag_ref, uint16_t * const begin_ref, uint16_t * const end_ref, int16_t * const diff_ref, lfs_tag_t * const tag_ref, unsigned int * const data_idx_ref, unsigned int * const cb_idx_ref, unsigned int * const attrs_idx_ref, unsigned int * const dir_idx_ref, unsigned * const sp_ref, lfs_tag_t * const tag_ref, unsigned int * const buffer_idx_ref, struct lfs_diskoff * const disk_ref, struct lfs_dir_traverse stack[3 - 1])\n{\n  lfs_off_t off = *off_ref;\n  lfs_tag_t ptag = *ptag_ref;\n  int attrcount = *attrcount_ref;\n  lfs_tag_t tmask = *tmask_ref;\n  lfs_tag_t ttag = *ttag_ref;\n  uint16_t begin = *begin_ref;\n  uint16_t end = *end_ref;\n  int16_t diff = *diff_ref;\n  lfs_tag_t tag = *tag_ref;\n  unsigned int data_idx = *data_idx_ref;\n  unsigned int cb_idx = *cb_idx_ref;\n  unsigned int attrs_idx = *attrs_idx_ref;\n  unsigned int dir_idx = *dir_idx_ref;\n  unsigned sp = *sp_ref;\n  lfs_tag_t tag = *tag_ref;\n  unsigned int buffer_idx = *buffer_idx_ref;\n  struct lfs_diskoff disk = *disk_ref;\n  dir_idx = stack[sp - 1].dir_idx;\n  off = stack[sp - 1].off;\n  ptag = stack[sp - 1].ptag;\n  attrs_idx = stack[sp - 1].attrs_idx;\n  attrcount = stack[sp - 1].attrcount;\n  tmask = stack[sp - 1].tmask;\n  ttag = stack[sp - 1].ttag;\n  begin = stack[sp - 1].begin;\n  end = stack[sp - 1].end;\n  diff = stack[sp - 1].diff;\n  cb_idx = stack[sp - 1].cb_idx;\n  data_idx = stack[sp - 1].data_idx;\n  tag = stack[sp - 1].tag;\n  buffer_idx = stack[sp - 1].buffer_idx;\n  disk = stack[sp - 1].disk;\n  sp -= 1;\n  goto popped;\n  *off_ref = off;\n  *ptag_ref = ptag;\n  *attrcount_ref = attrcount;\n  *tmask_ref = tmask;\n  *ttag_ref = ttag;\n  *begin_ref = begin;\n  *end_ref = end;\n  *diff_ref = diff;\n  *tag_ref = tag;\n  *data_idx_ref = data_idx;\n  *cb_idx_ref = cb_idx;\n  *attrs_idx_ref = attrs_idx;\n  *dir_idx_ref = dir_idx;\n  *sp_ref = sp;\n  *tag_ref = tag;\n  *buffer_idx_ref = buffer_idx;\n  *disk_ref = disk;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "off_ref",
                        "type": "lfs_off_t * const",
                        "definition": [
                            "lfs_off_t * const off_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptag_ref",
                        "type": "lfs_tag_t * const",
                        "definition": [
                            "lfs_tag_t * const ptag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attrcount_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const attrcount_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmask_ref",
                        "type": "lfs_tag_t * const",
                        "definition": [
                            "lfs_tag_t * const tmask_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ttag_ref",
                        "type": "lfs_tag_t * const",
                        "definition": [
                            "lfs_tag_t * const ttag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "begin_ref",
                        "type": "uint16_t * const",
                        "definition": [
                            "uint16_t * const begin_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end_ref",
                        "type": "uint16_t * const",
                        "definition": [
                            "uint16_t * const end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff_ref",
                        "type": "int16_t * const",
                        "definition": [
                            "int16_t * const diff_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag_ref",
                        "type": "lfs_tag_t * const",
                        "definition": [
                            "lfs_tag_t * const tag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const data_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const cb_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attrs_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const attrs_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const dir_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const sp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const buffer_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_diskoff",
                        "type": "struct lfs_diskoff * const",
                        "definition": [
                            "struct lfs_diskoff * const disk_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stack",
                        "type": "struct lfs_dir_traverse [3 - 1]",
                        "definition": [
                            "struct lfs_dir_traverse stack[3 - 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t off = *off_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t ptag = *ptag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attrcount",
                        "type": "int",
                        "definition": [
                            "int attrcount = *attrcount_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmask",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tmask = *tmask_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ttag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t ttag = *ttag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "begin",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t begin = *begin_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t end = *end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff",
                        "type": "int16_t",
                        "definition": [
                            "int16_t diff = *diff_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tag = *tag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int data_idx = *data_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int cb_idx = *cb_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attrs_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int attrs_idx = *attrs_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dir_idx = *dir_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp",
                        "type": "unsigned",
                        "definition": [
                            "unsigned sp = *sp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int buffer_idx = *buffer_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "disk",
                        "type": "struct lfs_diskoff",
                        "definition": [
                            "struct lfs_diskoff disk = *disk_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_lfs_dir_traverse_2",
            "header": "",
            "params": [
                "lfs_off_t * const off_ref",
                "lfs_tag_t * const ptag_ref",
                "int * const attrcount_ref",
                "lfs_tag_t * const tmask_ref",
                "lfs_tag_t * const ttag_ref",
                "uint16_t * const begin_ref",
                "uint16_t * const end_ref",
                "int16_t * const diff_ref",
                "lfs_tag_t * const tag_ref",
                "unsigned int * const data_idx_ref",
                "unsigned int * const cb_idx_ref",
                "unsigned int * const attrs_idx_ref",
                "unsigned int * const dir_idx_ref",
                "unsigned * const sp_ref",
                "int * const res_ref",
                "lfs_tag_t * const tag_ref",
                "unsigned int * const buffer_idx_ref",
                "struct lfs_diskoff * const disk_ref",
                "lfs_t * const lfs",
                "const lfs_mdir_t * const dir",
                "const struct lfs_mattr * const attrs",
                "int (* const cb)(void *data, lfs_tag_t tag, const void *buffer)",
                "void * const data",
                "const void * const buffer",
                "void * const data",
                "struct lfs_dir_traverse stack[3 - 1]",
                "const void * const buffer"
            ],
            "definition": "int helper_lfs_dir_traverse_2(lfs_off_t * const off_ref, lfs_tag_t * const ptag_ref, int * const attrcount_ref, lfs_tag_t * const tmask_ref, lfs_tag_t * const ttag_ref, uint16_t * const begin_ref, uint16_t * const end_ref, int16_t * const diff_ref, lfs_tag_t * const tag_ref, unsigned int * const data_idx_ref, unsigned int * const cb_idx_ref, unsigned int * const attrs_idx_ref, unsigned int * const dir_idx_ref, unsigned * const sp_ref, int * const res_ref, lfs_tag_t * const tag_ref, unsigned int * const buffer_idx_ref, struct lfs_diskoff * const disk_ref, lfs_t * const lfs, const lfs_mdir_t * const dir, const struct lfs_mattr * const attrs, int (* const cb)(void *data, lfs_tag_t tag, const void *buffer), void * const data, const void * const buffer, void * const data, struct lfs_dir_traverse stack[3 - 1], const void * const buffer)\n{\n  lfs_off_t off = *off_ref;\n  lfs_tag_t ptag = *ptag_ref;\n  int attrcount = *attrcount_ref;\n  lfs_tag_t tmask = *tmask_ref;\n  lfs_tag_t ttag = *ttag_ref;\n  uint16_t begin = *begin_ref;\n  uint16_t end = *end_ref;\n  int16_t diff = *diff_ref;\n  lfs_tag_t tag = *tag_ref;\n  unsigned int data_idx = *data_idx_ref;\n  unsigned int cb_idx = *cb_idx_ref;\n  unsigned int attrs_idx = *attrs_idx_ref;\n  unsigned int dir_idx = *dir_idx_ref;\n  unsigned sp = *sp_ref;\n  int res = *res_ref;\n  lfs_tag_t tag = *tag_ref;\n  unsigned int buffer_idx = *buffer_idx_ref;\n  struct lfs_diskoff disk = *disk_ref;\n  {\n    helper_helper_lfs_dir_traverse_2_2(&tag, &off, &ptag, &attrcount, &tmask, &ttag, &begin, &end, &diff, &tag, &data_idx, &cb_idx, &attrs_idx, &sp, &res, &tag, &buffer_idx, &disk, lfs, dir, attrs, cb, data, buffer, data, buffer, data, stack, buffer);\n  }\n  popped:\n  if ((lfs_tag_id(tmask) != 0) && (!((lfs_tag_id(tag) >= begin) && (lfs_tag_id(tag) < end))))\n  {\n    continue;\n  }\n\n  if (lfs_tag_type3(tag) == LFS_FROM_NOOP)\n  {\n  }\n  else\n    if (lfs_tag_type3(tag) == LFS_FROM_MOVE)\n  {\n    helper_helper_lfs_dir_traverse_2_1(&off, &ptag, &attrcount, &tmask, &ttag, &begin, &end, &diff, &attrs_idx, &dir_idx, &sp, dir, attrs, cb, data, tag, buffer, data, buffer, data, stack, buffer, tag, cb_idx, tag, buffer_idx);\n  }\n  else\n    if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS)\n  {\n    for (unsigned i = 0; i < lfs_tag_size(tag); i += 1)\n    {\n      const struct lfs_attr *a = buffer;\n      res = cb(data, ((((lfs_tag_t) (LFS_TYPE_USERATTR + a[i].type)) << 20) | (((lfs_tag_t) (lfs_tag_id(tag) + diff)) << 10)) | ((lfs_tag_t) a[i].size), a[i].buffer);\n      if (res < 0)\n      {\n        return res;\n      }\n      if (res)\n      {\n        break;\n      }\n    }\n\n  }\n  else\n  {\n    res = cb(data, tag + (((((lfs_tag_t) 0) << 20) | (((lfs_tag_t) diff) << 10)) | ((lfs_tag_t) 0)), buffer);\n    if (res < 0)\n    {\n      return res;\n    }\n    if (res)\n    {\n      break;\n    }\n  }\n  *off_ref = off;\n  *ptag_ref = ptag;\n  *attrcount_ref = attrcount;\n  *tmask_ref = tmask;\n  *ttag_ref = ttag;\n  *begin_ref = begin;\n  *end_ref = end;\n  *diff_ref = diff;\n  *tag_ref = tag;\n  *data_idx_ref = data_idx;\n  *cb_idx_ref = cb_idx;\n  *attrs_idx_ref = attrs_idx;\n  *dir_idx_ref = dir_idx;\n  *sp_ref = sp;\n  *res_ref = res;\n  *tag_ref = tag;\n  *buffer_idx_ref = buffer_idx;\n  *disk_ref = disk;\n}\n\n",
            "calle": [
                "cb",
                "helper_helper_lfs_dir_traverse_2_1",
                "helper_helper_lfs_dir_traverse_2_2",
                "lfs_tag_id",
                "lfs_tag_size",
                "lfs_tag_type3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "off_ref",
                        "type": "lfs_off_t * const",
                        "definition": [
                            "lfs_off_t * const off_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptag_ref",
                        "type": "lfs_tag_t * const",
                        "definition": [
                            "lfs_tag_t * const ptag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attrcount_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const attrcount_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmask_ref",
                        "type": "lfs_tag_t * const",
                        "definition": [
                            "lfs_tag_t * const tmask_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ttag_ref",
                        "type": "lfs_tag_t * const",
                        "definition": [
                            "lfs_tag_t * const ttag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "begin_ref",
                        "type": "uint16_t * const",
                        "definition": [
                            "uint16_t * const begin_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end_ref",
                        "type": "uint16_t * const",
                        "definition": [
                            "uint16_t * const end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff_ref",
                        "type": "int16_t * const",
                        "definition": [
                            "int16_t * const diff_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag_ref",
                        "type": "lfs_tag_t * const",
                        "definition": [
                            "lfs_tag_t * const tag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const data_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const cb_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attrs_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const attrs_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const dir_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const sp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const res_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const buffer_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_diskoff",
                        "type": "struct lfs_diskoff * const",
                        "definition": [
                            "struct lfs_diskoff * const disk_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "const lfs_mdir_t * const",
                        "definition": [
                            "const lfs_mdir_t * const dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_mattr",
                        "type": "const struct lfs_mattr * const",
                        "definition": [
                            "const struct lfs_mattr * const attrs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb",
                        "type": "int (* const)(void *data, lfs_tag_t tag, const void *buffer)",
                        "definition": [
                            "int (* const cb)(void *data, lfs_tag_t tag, const void *buffer)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "void * const",
                        "definition": [
                            "void * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "const void * const",
                        "definition": [
                            "const void * const buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stack",
                        "type": "struct lfs_dir_traverse [3 - 1]",
                        "definition": [
                            "struct lfs_dir_traverse stack[3 - 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t off = *off_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t ptag = *ptag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attrcount",
                        "type": "int",
                        "definition": [
                            "int attrcount = *attrcount_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmask",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tmask = *tmask_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ttag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t ttag = *ttag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "begin",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t begin = *begin_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t end = *end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff",
                        "type": "int16_t",
                        "definition": [
                            "int16_t diff = *diff_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tag = *tag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int data_idx = *data_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int cb_idx = *cb_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attrs_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int attrs_idx = *attrs_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dir_idx = *dir_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp",
                        "type": "unsigned",
                        "definition": [
                            "unsigned sp = *sp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res",
                        "type": "int",
                        "definition": [
                            "int res = *res_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int buffer_idx = *buffer_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "disk",
                        "type": "struct lfs_diskoff",
                        "definition": [
                            "struct lfs_diskoff disk = *disk_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned",
                        "definition": [
                            "unsigned i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_attr",
                        "type": "const struct lfs_attr *",
                        "definition": [
                            "const struct lfs_attr *a = buffer"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_lfs_dir_fetchmatch_1",
            "header": "",
            "params": [
                "lfs_stag_t * const besttag_ref",
                "lfs_t * const lfs",
                "lfs_mdir_t * const dir",
                "lfs_tag_t fmask",
                "lfs_tag_t ftag",
                "uint16_t * const id",
                "void * const data",
                "void * const data",
                "uint32_t revs[2]",
                "int r"
            ],
            "definition": "lfs_stag_t helper_lfs_dir_fetchmatch_1(lfs_stag_t * const besttag_ref, lfs_t * const lfs, lfs_mdir_t * const dir, lfs_tag_t fmask, lfs_tag_t ftag, uint16_t * const id, void * const data, void * const data, uint32_t revs[2], int r)\n{\n  lfs_stag_t besttag = *besttag_ref;\n  lfs_off_t off = 0;\n  lfs_tag_t ptag = 0xffffffff;\n  uint16_t tempcount = 0;\n  lfs_block_t temptail[2] = {(lfs_block_t) (-1), (lfs_block_t) (-1)};\n  bool tempsplit = 0;\n  lfs_stag_t tempbesttag = besttag;\n  bool maybeerased = 0;\n  bool hasfcrc = 0;\n  struct lfs_fcrc fcrc;\n  dir->rev = lfs_tole32(dir->rev);\n  uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));\n  dir->rev = lfs_fromle32(dir->rev);\n  while (1)\n  {\n    helper_helper_lfs_dir_fetchmatch_1_1(&besttag, &off, &ptag, &tempcount, &tempsplit, &tempbesttag, &maybeerased, &hasfcrc, &crc, lfs, dir, fmask, ftag, data, data, temptail, fcrc);\n  }\n\n  if (dir->off == 0)\n  {\n    lfs_pair_swap(dir->pair);\n    dir->rev = revs[(r + 1) % 2];\n    continue;\n  }\n  dir->erased = 0;\n  if (maybeerased && ((dir->off % lfs->cfg->prog_size) == 0))\n  {\n    if (hasfcrc)\n    {\n      uint32_t fcrc_ = 0xffffffff;\n      int err = lfs_bd_crc(lfs, 0, &lfs->rcache, lfs->cfg->block_size, dir->pair[0], dir->off, fcrc.size, &fcrc_);\n      if (err && (err != LFS_ERR_CORRUPT))\n      {\n        return err;\n      }\n      dir->erased = fcrc_ == fcrc.crc;\n    }\n  }\n  if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair))\n  {\n    if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag))\n    {\n      besttag |= 0x80000000;\n    }\n    else\n      if ((besttag != (-1)) && (lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)))\n    {\n      besttag -= ((((lfs_tag_t) 0) << 20) | (((lfs_tag_t) 1) << 10)) | ((lfs_tag_t) 0);\n    }\n  }\n  if (id)\n  {\n    *id = lfs_min(lfs_tag_id(besttag), dir->count);\n  }\n  if (lfs_tag_isvalid(besttag))\n  {\n    return besttag;\n  }\n  else\n    if (lfs_tag_id(besttag) < dir->count)\n  {\n    return LFS_ERR_NOENT;\n  }\n  else\n  {\n    return 0;\n  }\n  *besttag_ref = besttag;\n}\n\n",
            "calle": [
                "helper_helper_lfs_dir_fetchmatch_1_1",
                "lfs_bd_crc",
                "lfs_crc",
                "lfs_fromle32",
                "lfs_gstate_hasmovehere",
                "lfs_min",
                "lfs_pair_swap",
                "lfs_tag_id",
                "lfs_tag_isvalid",
                "lfs_tole32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "besttag_ref",
                        "type": "lfs_stag_t * const",
                        "definition": [
                            "lfs_stag_t * const besttag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t * const",
                        "definition": [
                            "lfs_mdir_t * const dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmask",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t fmask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ftag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t ftag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "uint16_t * const",
                        "definition": [
                            "uint16_t * const id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "void * const",
                        "definition": [
                            "void * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "revs",
                        "type": "uint32_t [2]",
                        "definition": [
                            "uint32_t revs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "int",
                        "definition": [
                            "int r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "besttag",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t besttag = *besttag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t off = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t ptag = 0xffffffff"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tempcount",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t tempcount = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "temptail",
                        "type": "lfs_block_t [2]",
                        "definition": [
                            "lfs_block_t temptail[2] = {(lfs_block_t) (-1), (lfs_block_t) (-1)}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tempsplit",
                        "type": "bool",
                        "definition": [
                            "bool tempsplit = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tempbesttag",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t tempbesttag = besttag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maybeerased",
                        "type": "bool",
                        "definition": [
                            "bool maybeerased = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hasfcrc",
                        "type": "bool",
                        "definition": [
                            "bool hasfcrc = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fcrc",
                        "type": "struct lfs_fcrc",
                        "definition": [
                            "struct lfs_fcrc fcrc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fcrc_",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t fcrc_ = 0xffffffff"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_bd_crc(lfs, 0, &lfs->rcache, lfs->cfg->block_size, dir->pair[0], dir->off, fcrc.size, &fcrc_)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_lfs_dir_find_1",
            "header": "",
            "params": [
                "unsigned int * const name_idx_ref",
                "lfs_stag_t * const tag_ref",
                "lfs_t * const lfs",
                "lfs_mdir_t * const dir",
                "const char ** const path",
                "uint16_t * const id",
                "const char * const name"
            ],
            "definition": "lfs_stag_t helper_lfs_dir_find_1(unsigned int * const name_idx_ref, lfs_stag_t * const tag_ref, lfs_t * const lfs, lfs_mdir_t * const dir, const char ** const path, uint16_t * const id, const char * const name)\n{\n  unsigned int name_idx = *name_idx_ref;\n  lfs_stag_t tag = *tag_ref;\n  nextname:\n  if (lfs_tag_type3(tag) == LFS_TYPE_DIR)\n  {\n    name_idx += strspn(name_idx, \"/\");\n  }\n\n  lfs_size_t namelen = strcspn(name, \"/\");\n  if ((namelen == 1) && (memcmp(name, \".\", 1) == 0))\n  {\n    name_idx += namelen;\n    goto nextname;\n  }\n  if ((namelen == 2) && (memcmp(name, \"..\", 2) == 0))\n  {\n    return LFS_ERR_INVAL;\n  }\n  const char *suffix = (&name[name_idx]) + namelen;\n  unsigned int suffix_idx = 0;\n  lfs_size_t sufflen;\n  int depth = 1;\n  while (1)\n  {\n    helper_helper_lfs_dir_find_1_1(&name_idx, &suffix_idx, &sufflen, &depth, suffix);\n  }\n\n  if (name[name_idx] == '\\0')\n  {\n    return tag;\n  }\n  *path = &name[name_idx];\n  if (lfs_tag_type3(tag) != LFS_TYPE_DIR)\n  {\n    return LFS_ERR_NOTDIR;\n  }\n  if (lfs_tag_id(tag) != 0x3ff)\n  {\n    lfs_stag_t res = lfs_dir_get(lfs, dir, ((((lfs_tag_t) 0x700) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) LFS_TYPE_STRUCT) << 20) | (((lfs_tag_t) lfs_tag_id(tag)) << 10)) | ((lfs_tag_t) 8), dir->tail);\n    if (res < 0)\n    {\n      return res;\n    }\n    lfs_pair_fromle32(dir->tail);\n  }\n  while (1)\n  {\n    tag = lfs_dir_fetchmatch(lfs, dir, dir->tail, ((((lfs_tag_t) 0x780) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) LFS_TYPE_NAME) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) namelen), id, lfs_dir_find_match, &((struct lfs_dir_find_match){lfs, name, namelen}));\n    if (tag < 0)\n    {\n      return tag;\n    }\n    if (tag)\n    {\n      break;\n    }\n    if (!dir->split)\n    {\n      return LFS_ERR_NOENT;\n    }\n  }\n\n  name_idx += namelen;\n  *name_idx_ref = name_idx;\n  *tag_ref = tag;\n}\n\n",
            "calle": [
                "helper_helper_lfs_dir_find_1_1",
                "lfs_dir_fetchmatch",
                "lfs_dir_find_match",
                "lfs_dir_get",
                "lfs_pair_fromle32",
                "lfs_tag_id",
                "lfs_tag_type3",
                "memcmp",
                "strcspn",
                "strspn"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "name_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const name_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag_ref",
                        "type": "lfs_stag_t * const",
                        "definition": [
                            "lfs_stag_t * const tag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t * const",
                        "definition": [
                            "lfs_mdir_t * const dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char ** const",
                        "definition": [
                            "const char ** const path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "uint16_t * const",
                        "definition": [
                            "uint16_t * const id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "const char * const",
                        "definition": [
                            "const char * const name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int name_idx = *name_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t tag = *tag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "namelen",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t namelen = strcspn(name, \"/\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "suffix",
                        "type": "const char *",
                        "definition": [
                            "const char *suffix = (&name[name_idx]) + namelen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "suffix_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int suffix_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sufflen",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t sufflen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "depth",
                        "type": "int",
                        "definition": [
                            "int depth = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t res = lfs_dir_get(lfs, dir, ((((lfs_tag_t) 0x700) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) LFS_TYPE_STRUCT) << 20) | (((lfs_tag_t) lfs_tag_id(tag)) << 10)) | ((lfs_tag_t) 8), dir->tail)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_lfs_dir_commitcrc_1",
            "header": "",
            "params": [
                "lfs_off_t * const off1_ref",
                "uint32_t * const crc1_ref",
                "uint32_t * const crc_ref",
                "uint32_t * const crc_ref",
                "lfs_t * const lfs",
                "struct lfs_commit * const commit",
                "const lfs_off_t end"
            ],
            "definition": "int helper_lfs_dir_commitcrc_1(lfs_off_t * const off1_ref, uint32_t * const crc1_ref, uint32_t * const crc_ref, uint32_t * const crc_ref, lfs_t * const lfs, struct lfs_commit * const commit, const lfs_off_t end)\n{\n  lfs_off_t off1 = *off1_ref;\n  uint32_t crc1 = *crc1_ref;\n  uint32_t crc = *crc_ref;\n  uint32_t crc = *crc_ref;\n  lfs_off_t noff = lfs_min(end - (commit->off + (sizeof(lfs_tag_t))), 0x3fe) + (commit->off + (sizeof(lfs_tag_t)));\n  if (noff < end)\n  {\n    noff = lfs_min(noff, end - (5 * (sizeof(uint32_t))));\n  }\n  uint8_t eperturb = (uint8_t) (-1);\n  if ((noff >= end) && (noff <= (lfs->cfg->block_size - lfs->cfg->prog_size)))\n  {\n    helper_helper_lfs_dir_commitcrc_1_1(lfs, commit, crc, crc, noff, eperturb, crc);\n  }\n  struct \n  {\n    lfs_tag_t tag;\n    uint32_t crc;\n  } ccrc;\n  lfs_tag_t ntag = ((((lfs_tag_t) (LFS_TYPE_CCRC + (((uint8_t) (~eperturb)) >> 7))) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) (noff - (commit->off + (sizeof(lfs_tag_t)))));\n  ccrc.tag = lfs_tobe32(ntag ^ commit->ptag);\n  commit->crc = lfs_crc(commit->crc, &ccrc.tag, sizeof(lfs_tag_t));\n  ccrc.crc = lfs_tole32(commit->crc);\n  int err = lfs_bd_prog(lfs, &lfs->pcache, &lfs->rcache, 0, commit->block, commit->off, &ccrc, sizeof(ccrc));\n  if (err)\n  {\n    return err;\n  }\n  if (off1 == 0)\n  {\n    off1 = commit->off + (sizeof(lfs_tag_t));\n    crc1 = commit->crc;\n  }\n  commit->off = noff;\n  commit->ptag = ntag ^ ((0x80UL & (~eperturb)) << 24);\n  commit->crc = 0xffffffff;\n  if ((noff >= end) || (noff >= (lfs->pcache.off + lfs->cfg->cache_size)))\n  {\n    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, 0);\n    if (err)\n    {\n      return err;\n    }\n  }\n  *off1_ref = off1;\n  *crc1_ref = crc1;\n  *crc_ref = crc;\n  *crc_ref = crc;\n}\n\n",
            "calle": [
                "helper_helper_lfs_dir_commitcrc_1_1",
                "lfs_bd_prog",
                "lfs_bd_sync",
                "lfs_crc",
                "lfs_min",
                "lfs_tobe32",
                "lfs_tole32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "off1_ref",
                        "type": "lfs_off_t * const",
                        "definition": [
                            "lfs_off_t * const off1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc1_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const crc1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const crc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_commit",
                        "type": "struct lfs_commit * const",
                        "definition": [
                            "struct lfs_commit * const commit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "const lfs_off_t",
                        "definition": [
                            "const lfs_off_t end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off1",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t off1 = *off1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc1",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t crc1 = *crc1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t crc = *crc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "noff",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t noff = lfs_min(end - (commit->off + (sizeof(lfs_tag_t))), 0x3fe) + (commit->off + (sizeof(lfs_tag_t)))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "eperturb",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t eperturb = (uint8_t) (-1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ccrc",
                        "type": "struct \n{\n  lfs_tag_t tag;\n  uint32_t crc;\n}",
                        "definition": [
                            "struct \n{\n  lfs_tag_t tag;\n  uint32_t crc;\n} ccrc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ntag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t ntag = ((((lfs_tag_t) (LFS_TYPE_CCRC + (((uint8_t) (~eperturb)) >> 7))) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) (noff - (commit->off + (sizeof(lfs_tag_t)))))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_bd_prog(lfs, &lfs->pcache, &lfs->rcache, 0, commit->block, commit->off, &ccrc, sizeof(ccrc))",
                            "int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_lfs_dir_compact_1",
            "header": "",
            "params": [
                "bool * const relocated_ref",
                "bool * const tired_ref",
                "lfs_t * const lfs",
                "lfs_mdir_t * const dir",
                "const struct lfs_mattr * const attrs",
                "int attrcount",
                "lfs_mdir_t * const source",
                "uint16_t begin",
                "uint16_t end"
            ],
            "definition": "int helper_lfs_dir_compact_1(bool * const relocated_ref, bool * const tired_ref, lfs_t * const lfs, lfs_mdir_t * const dir, const struct lfs_mattr * const attrs, int attrcount, lfs_mdir_t * const source, uint16_t begin, uint16_t end)\n{\n  bool relocated = *relocated_ref;\n  bool tired = *tired_ref;\n  {\n    helper_helper_lfs_dir_compact_1_1(lfs, dir, attrs, attrcount, source, begin, end, relocated);\n  }\n  break;\n  relocate:\n  relocated = 1;\n\n  lfs_cache_drop(lfs, &lfs->pcache);\n  if (!tired)\n  {\n    printf(\"%s:%d:debug: Bad block at 0x%x%s\\n\", \"/home/ubuntu/C2RustTranslation/subjects/littlefs/lfs.c\", 2100, dir->pair[1], \"\");\n  }\n  if (lfs_pair_cmp(dir->pair, (const lfs_block_t [2]){0, 1}) == 0)\n  {\n    printf(\"%s:%d:warn: Superblock 0x%x has become unwritable%s\\n\", \"/home/ubuntu/C2RustTranslation/subjects/littlefs/lfs.c\", 2105, dir->pair[1], \"\");\n    return LFS_ERR_NOSPC;\n  }\n  int err = lfs_alloc(lfs, &dir->pair[1]);\n  if (err && ((err != LFS_ERR_NOSPC) || (!tired)))\n  {\n    return err;\n  }\n  tired = 0;\n  continue;\n  *relocated_ref = relocated;\n  *tired_ref = tired;\n}\n\n",
            "calle": [
                "helper_helper_lfs_dir_compact_1_1",
                "lfs_alloc",
                "lfs_cache_drop",
                "lfs_pair_cmp",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "relocated_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const relocated_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tired_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const tired_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t * const",
                        "definition": [
                            "lfs_mdir_t * const dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_mattr",
                        "type": "const struct lfs_mattr * const",
                        "definition": [
                            "const struct lfs_mattr * const attrs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attrcount",
                        "type": "int",
                        "definition": [
                            "int attrcount"
                        ]
                    },
                    {
                        "path": null,
                        "name": "source",
                        "type": "lfs_mdir_t * const",
                        "definition": [
                            "lfs_mdir_t * const source"
                        ]
                    },
                    {
                        "path": null,
                        "name": "begin",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t begin"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "relocated",
                        "type": "bool",
                        "definition": [
                            "bool relocated = *relocated_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tired",
                        "type": "bool",
                        "definition": [
                            "bool tired = *tired_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_alloc(lfs, &dir->pair[1])"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_lfs_dir_splittingcompact_1",
            "header": "",
            "params": [
                "uint16_t * const end_ref",
                "lfs_t * const lfs",
                "lfs_mdir_t * const dir",
                "const struct lfs_mattr * const attrs",
                "int attrcount",
                "lfs_mdir_t * const source",
                "uint16_t begin"
            ],
            "definition": "int helper_lfs_dir_splittingcompact_1(uint16_t * const end_ref, lfs_t * const lfs, lfs_mdir_t * const dir, const struct lfs_mattr * const attrs, int attrcount, lfs_mdir_t * const source, uint16_t begin)\n{\n  uint16_t end = *end_ref;\n  lfs_ssize_t size = lfs_fs_size_(lfs);\n  if (size < 0)\n  {\n    return size;\n  }\n  if ((lfs->block_count - size) > (lfs->block_count / 8))\n  {\n    printf(\"%s:%d:debug: Expanding superblock at rev %u%s\\n\", \"/home/ubuntu/C2RustTranslation/subjects/littlefs/lfs.c\", 2211, dir->rev, \"\");\n    int err = lfs_dir_split(lfs, dir, attrs, attrcount, source, begin, end);\n    if (err && (err != LFS_ERR_NOSPC))\n    {\n      return err;\n    }\n    if (err)\n    {\n      printf(\"%s:%d:warn: Unable to expand superblock%s\\n\", \"/home/ubuntu/C2RustTranslation/subjects/littlefs/lfs.c\", 2221, \"\");\n    }\n    else\n    {\n      end = 1;\n    }\n  }\n  *end_ref = end;\n}\n\n",
            "calle": [
                "lfs_dir_split",
                "lfs_fs_size_",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "end_ref",
                        "type": "uint16_t * const",
                        "definition": [
                            "uint16_t * const end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t * const",
                        "definition": [
                            "lfs_mdir_t * const dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_mattr",
                        "type": "const struct lfs_mattr * const",
                        "definition": [
                            "const struct lfs_mattr * const attrs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attrcount",
                        "type": "int",
                        "definition": [
                            "int attrcount"
                        ]
                    },
                    {
                        "path": null,
                        "name": "source",
                        "type": "lfs_mdir_t * const",
                        "definition": [
                            "lfs_mdir_t * const source"
                        ]
                    },
                    {
                        "path": null,
                        "name": "begin",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t begin"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t end = *end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_ssize_t",
                        "definition": [
                            "lfs_ssize_t size = lfs_fs_size_(lfs)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_dir_split(lfs, dir, attrs, attrcount, source, begin, end)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_lfs_dir_splittingcompact_2",
            "header": "",
            "params": [
                "uint16_t * const end_ref",
                "lfs_t * const lfs",
                "lfs_mdir_t * const dir",
                "const struct lfs_mattr * const attrs",
                "int attrcount",
                "lfs_mdir_t * const source",
                "uint16_t begin"
            ],
            "definition": "int helper_lfs_dir_splittingcompact_2(uint16_t * const end_ref, lfs_t * const lfs, lfs_mdir_t * const dir, const struct lfs_mattr * const attrs, int attrcount, lfs_mdir_t * const source, uint16_t begin)\n{\n  uint16_t end = *end_ref;\n  lfs_size_t split = begin;\n  while ((end - split) > 1)\n  {\n    lfs_size_t size = 0;\n    int err = lfs_dir_traverse(lfs, source, 0, 0xffffffff, attrs, attrcount, ((((lfs_tag_t) 0x400) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) LFS_TYPE_NAME) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0), split, end, -split, lfs_dir_commit_size, &size);\n    if (err)\n    {\n      return err;\n    }\n    lfs_size_t metadata_max = (lfs->cfg->metadata_max) ? (lfs->cfg->metadata_max) : (lfs->cfg->block_size);\n    if (((end - split) < 0xff) && (size <= lfs_min(metadata_max - 40, lfs_alignup(metadata_max / 2, lfs->cfg->prog_size))))\n    {\n      break;\n    }\n    split = split + ((end - split) / 2);\n  }\n\n  if (split == begin)\n  {\n    break;\n  }\n  int err = lfs_dir_split(lfs, dir, attrs, attrcount, source, split, end);\n  if (err && (err != LFS_ERR_NOSPC))\n  {\n    return err;\n  }\n  if (err)\n  {\n    printf(\"%s:%d:warn: Unable to split {0x%x, 0x%x}%s\\n\", \"/home/ubuntu/C2RustTranslation/subjects/littlefs/lfs.c\", 2189, dir->pair[0], dir->pair[1], \"\");\n    break;\n  }\n  else\n  {\n    end = split;\n  }\n  *end_ref = end;\n}\n\n",
            "calle": [
                "lfs_alignup",
                "lfs_dir_commit_size",
                "lfs_dir_split",
                "lfs_dir_traverse",
                "lfs_min",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "end_ref",
                        "type": "uint16_t * const",
                        "definition": [
                            "uint16_t * const end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t * const",
                        "definition": [
                            "lfs_mdir_t * const dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_mattr",
                        "type": "const struct lfs_mattr * const",
                        "definition": [
                            "const struct lfs_mattr * const attrs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attrcount",
                        "type": "int",
                        "definition": [
                            "int attrcount"
                        ]
                    },
                    {
                        "path": null,
                        "name": "source",
                        "type": "lfs_mdir_t * const",
                        "definition": [
                            "lfs_mdir_t * const source"
                        ]
                    },
                    {
                        "path": null,
                        "name": "begin",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t begin"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t end = *end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "split",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t split = begin"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t size = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_dir_split(lfs, dir, attrs, attrcount, source, split, end)",
                            "int err = lfs_dir_traverse(lfs, source, 0, 0xffffffff, attrs, attrcount, ((((lfs_tag_t) 0x400) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) LFS_TYPE_NAME) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0), split, end, -split, lfs_dir_commit_size, &size)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "metadata_max",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t metadata_max = (lfs->cfg->metadata_max) ? (lfs->cfg->metadata_max) : (lfs->cfg->block_size)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_lfs_dir_relocatingcommit_1",
            "header": "",
            "params": [
                "lfs_t * const lfs",
                "lfs_mdir_t * const dir",
                "const lfs_block_t pair[2]",
                "const struct lfs_mattr * const attrs",
                "int attrcount",
                "lfs_block_t oldpair[2]",
                "struct lfs_mlist * const d"
            ],
            "definition": "int helper_lfs_dir_relocatingcommit_1(lfs_t * const lfs, lfs_mdir_t * const dir, const lfs_block_t pair[2], const struct lfs_mattr * const attrs, int attrcount, lfs_block_t oldpair[2], struct lfs_mlist * const d)\n{\n  if (lfs_pair_cmp(d->m.pair, oldpair) == 0)\n  {\n    d->m = *dir;\n    if (d->m.pair != pair)\n    {\n      for (int i = 0; i < attrcount; i += 1)\n      {\n        if (((lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) && (d->id == lfs_tag_id(attrs[i].tag))) && (d->type != LFS_TYPE_DIR))\n        {\n          d->m.pair[0] = (lfs_block_t) (-1);\n          d->m.pair[1] = (lfs_block_t) (-1);\n        }\n        else\n          if ((lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) && (d->id > lfs_tag_id(attrs[i].tag)))\n        {\n          d->id -= 1;\n          if (d->type == LFS_TYPE_DIR)\n          {\n            ((lfs_dir_t *) d)->pos -= 1;\n          }\n        }\n        else\n          if ((lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) && (d->id >= lfs_tag_id(attrs[i].tag)))\n        {\n          d->id += 1;\n          if (d->type == LFS_TYPE_DIR)\n          {\n            ((lfs_dir_t *) d)->pos += 1;\n          }\n        }\n      }\n\n    }\n    while ((d->id >= d->m.count) && d->m.split)\n    {\n      if (lfs_pair_cmp(d->m.tail, lfs->root) != 0)\n      {\n        d->id -= d->m.count;\n      }\n      int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);\n      if (err)\n      {\n        return err;\n      }\n    }\n\n  }\n}\n\n",
            "calle": [
                "lfs_dir_fetch",
                "lfs_pair_cmp",
                "lfs_tag_id",
                "lfs_tag_type3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t * const",
                        "definition": [
                            "lfs_mdir_t * const dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pair",
                        "type": "const lfs_block_t [2]",
                        "definition": [
                            "const lfs_block_t pair[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_mattr",
                        "type": "const struct lfs_mattr * const",
                        "definition": [
                            "const struct lfs_mattr * const attrs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attrcount",
                        "type": "int",
                        "definition": [
                            "int attrcount"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oldpair",
                        "type": "lfs_block_t [2]",
                        "definition": [
                            "lfs_block_t oldpair[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_mlist",
                        "type": "struct lfs_mlist * const",
                        "definition": [
                            "struct lfs_mlist * const d"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_dir_fetch(lfs, &d->m, d->m.tail)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_lfs_dir_relocatingcommit_2",
            "header": "",
            "params": [
                "lfs_t * const lfs",
                "lfs_mdir_t * const dir",
                "const struct lfs_mattr * const attrs",
                "int attrcount"
            ],
            "definition": "int helper_lfs_dir_relocatingcommit_2(lfs_t * const lfs, lfs_mdir_t * const dir, const struct lfs_mattr * const attrs, int attrcount)\n{\n  struct lfs_commit commit = {.block = dir->pair[0], .off = dir->off, .ptag = dir->etag, .crc = 0xffffffff, .begin = dir->off, .end = ((lfs->cfg->metadata_max) ? (lfs->cfg->metadata_max) : (lfs->cfg->block_size)) - 8};\n  lfs_pair_tole32(dir->tail);\n  int err = lfs_dir_traverse(lfs, dir, dir->off, dir->etag, attrs, attrcount, 0, 0, 0, 0, 0, lfs_dir_commit_commit, &((struct lfs_dir_commit_commit){lfs, &commit}));\n  lfs_pair_fromle32(dir->tail);\n  if (err)\n  {\n    if ((err == LFS_ERR_NOSPC) || (err == LFS_ERR_CORRUPT))\n    {\n      goto compact;\n    }\n    return err;\n  }\n  lfs_gstate_t delta = {0};\n  lfs_gstate_xor(&delta, &lfs->gstate);\n  lfs_gstate_xor(&delta, &lfs->gdisk);\n  lfs_gstate_xor(&delta, &lfs->gdelta);\n  delta.tag &= ~(((((lfs_tag_t) 0) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0x3ff));\n  if (!lfs_gstate_iszero(&delta))\n  {\n    err = lfs_dir_getgstate(lfs, dir, &delta);\n    if (err)\n    {\n      return err;\n    }\n    lfs_gstate_tole32(&delta);\n    err = lfs_dir_commitattr(lfs, &commit, ((((lfs_tag_t) LFS_TYPE_MOVESTATE) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) (sizeof(delta))), &delta);\n    if (err)\n    {\n      if ((err == LFS_ERR_NOSPC) || (err == LFS_ERR_CORRUPT))\n      {\n        goto compact;\n      }\n      return err;\n    }\n  }\n  err = lfs_dir_commitcrc(lfs, &commit);\n  if (err)\n  {\n    if ((err == LFS_ERR_NOSPC) || (err == LFS_ERR_CORRUPT))\n    {\n      goto compact;\n    }\n    return err;\n  }\n  assert((commit.off % lfs->cfg->prog_size) == 0);\n  dir->off = commit.off;\n  dir->etag = commit.ptag;\n  lfs->gdisk = lfs->gstate;\n  lfs->gdelta = (lfs_gstate_t){0};\n  goto fixmlist;\n}\n\n",
            "calle": [
                "assert",
                "lfs_dir_commit_commit",
                "lfs_dir_commitattr",
                "lfs_dir_commitcrc",
                "lfs_dir_getgstate",
                "lfs_dir_traverse",
                "lfs_gstate_iszero",
                "lfs_gstate_tole32",
                "lfs_gstate_xor",
                "lfs_pair_fromle32",
                "lfs_pair_tole32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t * const",
                        "definition": [
                            "lfs_mdir_t * const dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_mattr",
                        "type": "const struct lfs_mattr * const",
                        "definition": [
                            "const struct lfs_mattr * const attrs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attrcount",
                        "type": "int",
                        "definition": [
                            "int attrcount"
                        ]
                    },
                    {
                        "path": null,
                        "name": "commit",
                        "type": "struct lfs_commit",
                        "definition": [
                            "struct lfs_commit commit = {.block = dir->pair[0], .off = dir->off, .ptag = dir->etag, .crc = 0xffffffff, .begin = dir->off, .end = ((lfs->cfg->metadata_max) ? (lfs->cfg->metadata_max) : (lfs->cfg->block_size)) - 8}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_dir_traverse(lfs, dir, dir->off, dir->etag, attrs, attrcount, 0, 0, 0, 0, 0, lfs_dir_commit_commit, &((struct lfs_dir_commit_commit){lfs, &commit}))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "delta",
                        "type": "lfs_gstate_t",
                        "definition": [
                            "lfs_gstate_t delta = {0}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_lfs_dir_orphaningcommit_1",
            "header": "",
            "params": [
                "lfs_mdir_t * const ldir_ref",
                "int * const state_ref",
                "lfs_t * const lfs",
                "lfs_mdir_t * const dir",
                "lfs_block_t lpair[2]",
                "lfs_mdir_t pdir"
            ],
            "definition": "int helper_lfs_dir_orphaningcommit_1(lfs_mdir_t * const ldir_ref, int * const state_ref, lfs_t * const lfs, lfs_mdir_t * const dir, lfs_block_t lpair[2], lfs_mdir_t pdir)\n{\n  lfs_mdir_t ldir = *ldir_ref;\n  int state = *state_ref;\n  int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);\n  if (err)\n  {\n    return err;\n  }\n  lpair[0] = pdir.pair[0];\n  lpair[1] = pdir.pair[1];\n  lfs_pair_tole32(dir->tail);\n  state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, (struct lfs_mattr []){{((((lfs_tag_t) (LFS_TYPE_TAIL + dir->split)) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 8), dir->tail}}, (sizeof((struct lfs_mattr []){{((((lfs_tag_t) (LFS_TYPE_TAIL + dir->split)) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 8), dir->tail}})) / (sizeof(struct lfs_mattr)), 0);\n  lfs_pair_fromle32(dir->tail);\n  if (state < 0)\n  {\n    return state;\n  }\n  ldir = pdir;\n  *ldir_ref = ldir;\n  *state_ref = state;\n}\n\n",
            "calle": [
                "lfs_dir_getgstate",
                "lfs_dir_relocatingcommit",
                "lfs_pair_fromle32",
                "lfs_pair_tole32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ldir_ref",
                        "type": "lfs_mdir_t * const",
                        "definition": [
                            "lfs_mdir_t * const ldir_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const state_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t * const",
                        "definition": [
                            "lfs_mdir_t * const dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lpair",
                        "type": "lfs_block_t [2]",
                        "definition": [
                            "lfs_block_t lpair[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pdir",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t pdir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ldir",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t ldir = *ldir_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "int",
                        "definition": [
                            "int state = *state_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_lfs_dir_orphaningcommit_2",
            "header": "",
            "params": [
                "lfs_mdir_t * const ldir_ref",
                "int * const state_ref",
                "bool * const orphans_ref",
                "unsigned int * const d_idx_ref",
                "lfs_t * const lfs",
                "lfs_block_t lpair[2]",
                "lfs_mdir_t pdir"
            ],
            "definition": "int helper_lfs_dir_orphaningcommit_2(lfs_mdir_t * const ldir_ref, int * const state_ref, bool * const orphans_ref, unsigned int * const d_idx_ref, lfs_t * const lfs, lfs_block_t lpair[2], lfs_mdir_t pdir)\n{\n  lfs_mdir_t ldir = *ldir_ref;\n  int state = *state_ref;\n  bool orphans = *orphans_ref;\n  unsigned int d_idx = *d_idx_ref;\n  printf(\"%s:%d:debug: Relocating {0x%x, 0x%x} -> {0x%x, 0x%x}%s\\n\", \"/home/ubuntu/C2RustTranslation/subjects/littlefs/lfs.c\", 2474, lpair[0], lpair[1], ldir.pair[0], ldir.pair[1], \"\");\n  state = 0;\n  if (lfs_pair_cmp(lpair, lfs->root) == 0)\n  {\n    lfs->root[0] = ldir.pair[0];\n    lfs->root[1] = ldir.pair[1];\n  }\n  for (struct lfs_mlist *d = lfs->mlist; d; d_idx = d_idx->next)\n  {\n    if (lfs_pair_cmp(lpair, d->m.pair) == 0)\n    {\n      d->m.pair[0] = ldir.pair[0];\n      d->m.pair[1] = ldir.pair[1];\n    }\n    if ((d->type == LFS_TYPE_DIR) && (lfs_pair_cmp(lpair, ((lfs_dir_t *) d)->head) == 0))\n    {\n      ((lfs_dir_t *) d)->head[0] = ldir.pair[0];\n      ((lfs_dir_t *) d)->head[1] = ldir.pair[1];\n    }\n  }\n\n  unsigned int d_idx = 0;\n  lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);\n  if ((tag < 0) && (tag != LFS_ERR_NOENT))\n  {\n    return tag;\n  }\n  bool hasparent = tag != LFS_ERR_NOENT;\n  if (tag != LFS_ERR_NOENT)\n  {\n    helper_helper_lfs_dir_orphaningcommit_2_2(&ldir, &state, &orphans, &tag, lfs, lpair, pdir);\n  }\n  int err = lfs_fs_pred(lfs, lpair, &pdir);\n  if (err && (err != LFS_ERR_NOENT))\n  {\n    return err;\n  }\n  assert(!(hasparent && (err == LFS_ERR_NOENT)));\n  if (err != LFS_ERR_NOENT)\n  {\n    helper_helper_lfs_dir_orphaningcommit_2_1(&ldir, &state, &err, &err, lfs, lpair, pdir, hasparent);\n  }\n  *ldir_ref = ldir;\n  *state_ref = state;\n  *orphans_ref = orphans;\n  *d_idx_ref = d_idx;\n}\n\n",
            "calle": [
                "assert",
                "helper_helper_lfs_dir_orphaningcommit_2_1",
                "helper_helper_lfs_dir_orphaningcommit_2_2",
                "lfs_fs_parent",
                "lfs_fs_pred",
                "lfs_pair_cmp",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ldir_ref",
                        "type": "lfs_mdir_t * const",
                        "definition": [
                            "lfs_mdir_t * const ldir_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const state_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "orphans_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const orphans_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const d_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lpair",
                        "type": "lfs_block_t [2]",
                        "definition": [
                            "lfs_block_t lpair[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pdir",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t pdir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ldir",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t ldir = *ldir_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "int",
                        "definition": [
                            "int state = *state_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "orphans",
                        "type": "bool",
                        "definition": [
                            "bool orphans = *orphans_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int d_idx = *d_idx_ref",
                            "unsigned int d_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_mlist",
                        "type": "struct lfs_mlist *",
                        "definition": [
                            "struct lfs_mlist *d = lfs->mlist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hasparent",
                        "type": "bool",
                        "definition": [
                            "bool hasparent = tag != LFS_ERR_NOENT"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_fs_pred(lfs, lpair, &pdir)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_lfs_mkdir__1",
            "header": "",
            "params": [
                "int * const err_ref",
                "struct lfs_mlist * const cwd_ref",
                "lfs_t * const lfs",
                "lfs_mdir_t dir",
                "lfs_mdir_t pred"
            ],
            "definition": "int helper_lfs_mkdir__1(int * const err_ref, struct lfs_mlist * const cwd_ref, lfs_t * const lfs, lfs_mdir_t dir, lfs_mdir_t pred)\n{\n  int err = *err_ref;\n  struct lfs_mlist cwd = *cwd_ref;\n  err = lfs_fs_preporphans(lfs, +1);\n  if (err)\n  {\n    return err;\n  }\n  cwd.type = 0;\n  cwd.id = 0;\n  lfs->mlist = &cwd;\n  lfs_pair_tole32(dir.pair);\n  err = lfs_dir_commit(lfs, &pred, (struct lfs_mattr []){{((((lfs_tag_t) LFS_TYPE_SOFTTAIL) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 8), dir.pair}}, (sizeof((struct lfs_mattr []){{((((lfs_tag_t) LFS_TYPE_SOFTTAIL) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 8), dir.pair}})) / (sizeof(struct lfs_mattr)));\n  lfs_pair_fromle32(dir.pair);\n  if (err)\n  {\n    lfs->mlist = cwd.next;\n    return err;\n  }\n  lfs->mlist = cwd.next;\n  err = lfs_fs_preporphans(lfs, -1);\n  if (err)\n  {\n    return err;\n  }\n  *err_ref = err;\n  *cwd_ref = cwd;\n}\n\n",
            "calle": [
                "lfs_dir_commit",
                "lfs_fs_preporphans",
                "lfs_pair_fromle32",
                "lfs_pair_tole32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "err_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_mlist",
                        "type": "struct lfs_mlist * const",
                        "definition": [
                            "struct lfs_mlist * const cwd_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pred",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t pred"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = *err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cwd",
                        "type": "struct lfs_mlist",
                        "definition": [
                            "struct lfs_mlist cwd = *cwd_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_lfs_ctz_extend_1",
            "header": "",
            "params": [
                "lfs_t * const lfs",
                "lfs_cache_t * const pcache",
                "lfs_cache_t * const rcache",
                "lfs_block_t head",
                "lfs_size_t size",
                "lfs_block_t * const block",
                "lfs_off_t * const off"
            ],
            "definition": "int helper_lfs_ctz_extend_1(lfs_t * const lfs, lfs_cache_t * const pcache, lfs_cache_t * const rcache, lfs_block_t head, lfs_size_t size, lfs_block_t * const block, lfs_off_t * const off)\n{\n  lfs_block_t nblock;\n  int err = lfs_alloc(lfs, &nblock);\n  if (err)\n  {\n    return err;\n  }\n  {\n    helper_helper_lfs_ctz_extend_1_1(&err, lfs, pcache, rcache, head, size, block, off, nblock);\n  }\n  relocate:\n  printf(\"%s:%d:debug: Bad block at 0x%x%s\\n\", \"/home/ubuntu/C2RustTranslation/subjects/littlefs/lfs.c\", 3012, nblock, \"\");\n\n  lfs_cache_drop(lfs, pcache);\n}\n\n",
            "calle": [
                "helper_helper_lfs_ctz_extend_1_1",
                "lfs_alloc",
                "lfs_cache_drop",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pcache",
                        "type": "lfs_cache_t * const",
                        "definition": [
                            "lfs_cache_t * const pcache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rcache",
                        "type": "lfs_cache_t * const",
                        "definition": [
                            "lfs_cache_t * const rcache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "head",
                        "type": "lfs_block_t",
                        "definition": [
                            "lfs_block_t head"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "lfs_block_t * const",
                        "definition": [
                            "lfs_block_t * const block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_off_t * const",
                        "definition": [
                            "lfs_off_t * const off"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "lfs_block_t",
                        "definition": [
                            "lfs_block_t nblock"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_alloc(lfs, &nblock)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_lfs_file_opencfg__1",
            "header": "",
            "params": [
                "int * const err_ref",
                "int * const err_ref",
                "lfs_t * const lfs",
                "lfs_file_t * const file",
                "lfs_stag_t tag"
            ],
            "definition": "void helper_lfs_file_opencfg__1(int * const err_ref, int * const err_ref, lfs_t * const lfs, lfs_file_t * const file, lfs_stag_t tag)\n{\n  int err = *err_ref;\n  int err = *err_ref;\n  file->ctz.head = (lfs_block_t) (-2);\n  file->ctz.size = lfs_tag_size(tag);\n  file->flags |= LFS_F_INLINE;\n  file->cache.block = file->ctz.head;\n  file->cache.off = 0;\n  file->cache.size = lfs->cfg->cache_size;\n  if (file->ctz.size > 0)\n  {\n    lfs_stag_t res = lfs_dir_get(lfs, &file->m, ((((lfs_tag_t) 0x700) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) LFS_TYPE_STRUCT) << 20) | (((lfs_tag_t) file->id) << 10)) | ((lfs_tag_t) lfs_min(file->cache.size, 0x3fe)), file->cache.buffer);\n    if (res < 0)\n    {\n      err = res;\n      goto cleanup;\n    }\n  }\n  *err_ref = err;\n  *err_ref = err;\n}\n\n",
            "calle": [
                "lfs_dir_get",
                "lfs_min",
                "lfs_tag_size"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "err_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t * const",
                        "definition": [
                            "lfs_file_t * const file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t tag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = *err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t res = lfs_dir_get(lfs, &file->m, ((((lfs_tag_t) 0x700) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) LFS_TYPE_STRUCT) << 20) | (((lfs_tag_t) file->id) << 10)) | ((lfs_tag_t) lfs_min(file->cache.size, 0x3fe)), file->cache.buffer)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_lfs_file_opencfg__2",
            "header": "",
            "params": [
                "int * const err_ref",
                "int * const err_ref",
                "lfs_stag_t * const tag_ref",
                "lfs_t * const lfs",
                "lfs_file_t * const file",
                "const char * const path",
                "int flags"
            ],
            "definition": "void helper_lfs_file_opencfg__2(int * const err_ref, int * const err_ref, lfs_stag_t * const tag_ref, lfs_t * const lfs, lfs_file_t * const file, const char * const path, int flags)\n{\n  int err = *err_ref;\n  int err = *err_ref;\n  lfs_stag_t tag = *tag_ref;\n  if (!(flags & LFS_O_CREAT))\n  {\n    err = LFS_ERR_NOENT;\n    goto cleanup;\n  }\n  if (lfs_path_isdir(path))\n  {\n    err = LFS_ERR_NOTDIR;\n    goto cleanup;\n  }\n  lfs_size_t nlen = lfs_path_namelen(path);\n  if (nlen > lfs->name_max)\n  {\n    err = LFS_ERR_NAMETOOLONG;\n    goto cleanup;\n  }\n  err = lfs_dir_commit(lfs, &file->m, (struct lfs_mattr []){{((((lfs_tag_t) LFS_TYPE_CREATE) << 20) | (((lfs_tag_t) file->id) << 10)) | ((lfs_tag_t) 0), 0}, {((((lfs_tag_t) LFS_TYPE_REG) << 20) | (((lfs_tag_t) file->id) << 10)) | ((lfs_tag_t) nlen), path}, {((((lfs_tag_t) LFS_TYPE_INLINESTRUCT) << 20) | (((lfs_tag_t) file->id) << 10)) | ((lfs_tag_t) 0), 0}}, (sizeof((struct lfs_mattr []){{((((lfs_tag_t) LFS_TYPE_CREATE) << 20) | (((lfs_tag_t) file->id) << 10)) | ((lfs_tag_t) 0), 0}, {((((lfs_tag_t) LFS_TYPE_REG) << 20) | (((lfs_tag_t) file->id) << 10)) | ((lfs_tag_t) nlen), path}, {((((lfs_tag_t) LFS_TYPE_INLINESTRUCT) << 20) | (((lfs_tag_t) file->id) << 10)) | ((lfs_tag_t) 0), 0}})) / (sizeof(struct lfs_mattr)));\n  err = (err == LFS_ERR_NOSPC) ? (LFS_ERR_NAMETOOLONG) : (err);\n  if (err)\n  {\n    goto cleanup;\n  }\n  tag = ((((lfs_tag_t) LFS_TYPE_INLINESTRUCT) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0);\n  *err_ref = err;\n  *err_ref = err;\n  *tag_ref = tag;\n}\n\n",
            "calle": [
                "lfs_dir_commit",
                "lfs_path_isdir",
                "lfs_path_namelen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "err_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag_ref",
                        "type": "lfs_stag_t * const",
                        "definition": [
                            "lfs_stag_t * const tag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t * const",
                        "definition": [
                            "lfs_file_t * const file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char * const",
                        "definition": [
                            "const char * const path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = *err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t tag = *tag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nlen",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t nlen = lfs_path_namelen(path)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_lfs_file_relocate_1",
            "header": "",
            "params": [
                "lfs_t * const lfs",
                "lfs_file_t * const file"
            ],
            "definition": "int helper_lfs_file_relocate_1(lfs_t * const lfs, lfs_file_t * const file)\n{\n  lfs_block_t nblock;\n  int err = lfs_alloc(lfs, &nblock);\n  if (err)\n  {\n    return err;\n  }\n  err = lfs_bd_erase(lfs, nblock);\n  if (err)\n  {\n    if (err == LFS_ERR_CORRUPT)\n    {\n      goto relocate;\n    }\n    return err;\n  }\n  for (lfs_off_t i = 0; i < file->off; i += 1)\n  {\n    helper_helper_lfs_file_relocate_1_1(&err, lfs, file, nblock, i);\n  }\n\n  memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);\n  file->cache.block = lfs->pcache.block;\n  file->cache.off = lfs->pcache.off;\n  file->cache.size = lfs->pcache.size;\n  lfs_cache_zero(lfs, &lfs->pcache);\n  file->block = nblock;\n  file->flags |= LFS_F_WRITING;\n  return 0;\n  relocate:\n  printf(\"%s:%d:debug: Bad block at 0x%x%s\\n\", \"/home/ubuntu/C2RustTranslation/subjects/littlefs/lfs.c\", 3328, nblock, \"\");\n\n  lfs_cache_drop(lfs, &lfs->pcache);\n}\n\n",
            "calle": [
                "helper_helper_lfs_file_relocate_1_1",
                "lfs_alloc",
                "lfs_bd_erase",
                "lfs_cache_drop",
                "lfs_cache_zero",
                "memcpy",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t * const",
                        "definition": [
                            "lfs_file_t * const file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "lfs_block_t",
                        "definition": [
                            "lfs_block_t nblock"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_alloc(lfs, &nblock)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t i = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_lfs_file_flush_1",
            "header": "",
            "params": [
                "lfs_t * const lfs",
                "lfs_file_t * const file"
            ],
            "definition": "int helper_lfs_file_flush_1(lfs_t * const lfs, lfs_file_t * const file)\n{\n  lfs_off_t pos = file->pos;\n  if (!(file->flags & LFS_F_INLINE))\n  {\n    helper_helper_lfs_file_flush_1_1(lfs, file, pos);\n  }\n  else\n  {\n    file->pos = lfs_max(file->pos, file->ctz.size);\n  }\n  file->ctz.head = file->block;\n  file->ctz.size = file->pos;\n  file->flags &= ~LFS_F_WRITING;\n  file->flags |= LFS_F_DIRTY;\n  file->pos = pos;\n}\n\n",
            "calle": [
                "helper_helper_lfs_file_flush_1_1",
                "lfs_max"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t * const",
                        "definition": [
                            "lfs_file_t * const file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t pos = file->pos"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_lfs_file_sync__1",
            "header": "",
            "params": [
                "int * const err_ref",
                "lfs_t * const lfs",
                "lfs_file_t * const file"
            ],
            "definition": "int helper_lfs_file_sync__1(int * const err_ref, lfs_t * const lfs, lfs_file_t * const file)\n{\n  int err = *err_ref;\n  if (!(file->flags & LFS_F_INLINE))\n  {\n    err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, 0);\n    if (err)\n    {\n      return err;\n    }\n  }\n  uint16_t type;\n  const void *buffer;\n  unsigned int buffer_idx = 0;\n  lfs_size_t size;\n  struct lfs_ctz ctz;\n  if (file->flags & LFS_F_INLINE)\n  {\n    type = LFS_TYPE_INLINESTRUCT;\n    buffer_idx = file->cache.buffer_idx;\n    size = file->ctz.size;\n  }\n  else\n  {\n    type = LFS_TYPE_CTZSTRUCT;\n    ctz = file->ctz;\n    lfs_ctz_tole32(&ctz);\n    buffer_idx = &ctz;\n    size = sizeof(ctz);\n  }\n  err = lfs_dir_commit(lfs, &file->m, (struct lfs_mattr []){{((((lfs_tag_t) type) << 20) | (((lfs_tag_t) file->id) << 10)) | ((lfs_tag_t) size), buffer}, {((((lfs_tag_t) LFS_FROM_USERATTRS) << 20) | (((lfs_tag_t) file->id) << 10)) | ((lfs_tag_t) file->cfg->attr_count), file->cfg->attrs}}, (sizeof((struct lfs_mattr []){{((((lfs_tag_t) type) << 20) | (((lfs_tag_t) file->id) << 10)) | ((lfs_tag_t) size), buffer}, {((((lfs_tag_t) LFS_FROM_USERATTRS) << 20) | (((lfs_tag_t) file->id) << 10)) | ((lfs_tag_t) file->cfg->attr_count), file->cfg->attrs}})) / (sizeof(struct lfs_mattr)));\n  if (err)\n  {\n    file->flags |= LFS_F_ERRED;\n    return err;\n  }\n  file->flags &= ~LFS_F_DIRTY;\n  *err_ref = err;\n}\n\n",
            "calle": [
                "lfs_bd_sync",
                "lfs_ctz_tole32",
                "lfs_dir_commit"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "err_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t * const",
                        "definition": [
                            "lfs_file_t * const file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = *err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "const void *",
                        "definition": [
                            "const void *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int buffer_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ctz",
                        "type": "struct lfs_ctz",
                        "definition": [
                            "struct lfs_ctz ctz"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_lfs_file_flushedwrite_1",
            "header": "",
            "params": [
                "unsigned int * const data_idx_ref",
                "lfs_size_t * const nsize_ref",
                "lfs_t * const lfs",
                "lfs_file_t * const file",
                "const uint8_t * const data"
            ],
            "definition": "lfs_ssize_t helper_lfs_file_flushedwrite_1(unsigned int * const data_idx_ref, lfs_size_t * const nsize_ref, lfs_t * const lfs, lfs_file_t * const file, const uint8_t * const data)\n{\n  unsigned int data_idx = *data_idx_ref;\n  lfs_size_t nsize = *nsize_ref;\n  if ((!(file->flags & LFS_F_WRITING)) || (file->off == lfs->cfg->block_size))\n  {\n    helper_helper_lfs_file_flushedwrite_1_2(lfs, file);\n  }\n  lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);\n  while (1)\n  {\n    helper_helper_lfs_file_flushedwrite_1_1(lfs, file, data, diff);\n  }\n\n  file->pos += diff;\n  file->off += diff;\n  data_idx += diff;\n  nsize -= diff;\n  lfs_alloc_ckpoint(lfs);\n  *data_idx_ref = data_idx;\n  *nsize_ref = nsize;\n}\n\n",
            "calle": [
                "helper_helper_lfs_file_flushedwrite_1_1",
                "helper_helper_lfs_file_flushedwrite_1_2",
                "lfs_alloc_ckpoint",
                "lfs_min"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const data_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nsize_ref",
                        "type": "lfs_size_t * const",
                        "definition": [
                            "lfs_size_t * const nsize_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t * const",
                        "definition": [
                            "lfs_file_t * const file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "const uint8_t * const",
                        "definition": [
                            "const uint8_t * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int data_idx = *data_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nsize",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t nsize = *nsize_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_lfs_file_truncate__1",
            "header": "",
            "params": [
                "lfs_off_t * const size_ref",
                "lfs_t * const lfs",
                "lfs_file_t * const file"
            ],
            "definition": "int helper_lfs_file_truncate__1(lfs_off_t * const size_ref, lfs_t * const lfs, lfs_file_t * const file)\n{\n  lfs_off_t size = *size_ref;\n  if (size <= lfs->inline_max)\n  {\n    lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);\n    if (res < 0)\n    {\n      return (int) res;\n    }\n    lfs_cache_drop(lfs, &lfs->rcache);\n    res = lfs_file_flushedread(lfs, file, lfs->rcache.buffer, size);\n    if (res < 0)\n    {\n      return (int) res;\n    }\n    file->ctz.head = (lfs_block_t) (-2);\n    file->ctz.size = size;\n    file->flags |= (LFS_F_DIRTY | LFS_F_READING) | LFS_F_INLINE;\n    file->cache.block = file->ctz.head;\n    file->cache.off = 0;\n    file->cache.size = lfs->cfg->cache_size;\n    memcpy(file->cache.buffer, lfs->rcache.buffer, size);\n  }\n  else\n  {\n    int err = lfs_file_flush(lfs, file);\n    if (err)\n    {\n      return err;\n    }\n    err = lfs_ctz_find(lfs, 0, &file->cache, file->ctz.head, file->ctz.size, size - 1, &file->block, &((lfs_off_t){0}));\n    if (err)\n    {\n      return err;\n    }\n    file->pos = size;\n    file->ctz.head = file->block;\n    file->ctz.size = size;\n    file->flags |= LFS_F_DIRTY | LFS_F_READING;\n  }\n  *size_ref = size;\n}\n\n",
            "calle": [
                "lfs_cache_drop",
                "lfs_ctz_find",
                "lfs_file_flush",
                "lfs_file_flushedread",
                "lfs_file_seek_",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size_ref",
                        "type": "lfs_off_t * const",
                        "definition": [
                            "lfs_off_t * const size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t * const",
                        "definition": [
                            "lfs_file_t * const file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t size = *size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res",
                        "type": "lfs_soff_t",
                        "definition": [
                            "lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_file_flush(lfs, file)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_lfs_remove__1",
            "header": "",
            "params": [
                "int * const err_ref",
                "struct lfs_mlist * const dir_ref",
                "lfs_t * const lfs",
                "lfs_mdir_t cwd",
                "lfs_stag_t tag"
            ],
            "definition": "int helper_lfs_remove__1(int * const err_ref, struct lfs_mlist * const dir_ref, lfs_t * const lfs, lfs_mdir_t cwd, lfs_stag_t tag)\n{\n  int err = *err_ref;\n  struct lfs_mlist dir = *dir_ref;\n  lfs_block_t pair[2];\n  lfs_stag_t res = lfs_dir_get(lfs, &cwd, ((((lfs_tag_t) 0x700) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) LFS_TYPE_STRUCT) << 20) | (((lfs_tag_t) lfs_tag_id(tag)) << 10)) | ((lfs_tag_t) 8), pair);\n  if (res < 0)\n  {\n    return (int) res;\n  }\n  lfs_pair_fromle32(pair);\n  err = lfs_dir_fetch(lfs, &dir.m, pair);\n  if (err)\n  {\n    return err;\n  }\n  if ((dir.m.count > 0) || dir.m.split)\n  {\n    return LFS_ERR_NOTEMPTY;\n  }\n  err = lfs_fs_preporphans(lfs, +1);\n  if (err)\n  {\n    return err;\n  }\n  dir.type = 0;\n  dir.id = 0;\n  lfs->mlist = &dir;\n  *err_ref = err;\n  *dir_ref = dir;\n}\n\n",
            "calle": [
                "lfs_dir_fetch",
                "lfs_dir_get",
                "lfs_fs_preporphans",
                "lfs_pair_fromle32",
                "lfs_tag_id"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "err_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_mlist",
                        "type": "struct lfs_mlist * const",
                        "definition": [
                            "struct lfs_mlist * const dir_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cwd",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t cwd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t tag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = *err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "struct lfs_mlist",
                        "definition": [
                            "struct lfs_mlist dir = *dir_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pair",
                        "type": "lfs_block_t [2]",
                        "definition": [
                            "lfs_block_t pair[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t res = lfs_dir_get(lfs, &cwd, ((((lfs_tag_t) 0x700) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) LFS_TYPE_STRUCT) << 20) | (((lfs_tag_t) lfs_tag_id(tag)) << 10)) | ((lfs_tag_t) 8), pair)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_lfs_rename__1",
            "header": "",
            "params": [
                "int * const err_ref",
                "struct lfs_mlist * const prevdir_ref",
                "lfs_t * const lfs",
                "lfs_mdir_t newcwd",
                "uint16_t newid"
            ],
            "definition": "int helper_lfs_rename__1(int * const err_ref, struct lfs_mlist * const prevdir_ref, lfs_t * const lfs, lfs_mdir_t newcwd, uint16_t newid)\n{\n  int err = *err_ref;\n  struct lfs_mlist prevdir = *prevdir_ref;\n  lfs_block_t prevpair[2];\n  lfs_stag_t res = lfs_dir_get(lfs, &newcwd, ((((lfs_tag_t) 0x700) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) LFS_TYPE_STRUCT) << 20) | (((lfs_tag_t) newid) << 10)) | ((lfs_tag_t) 8), prevpair);\n  if (res < 0)\n  {\n    return (int) res;\n  }\n  lfs_pair_fromle32(prevpair);\n  err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);\n  if (err)\n  {\n    return err;\n  }\n  if ((prevdir.m.count > 0) || prevdir.m.split)\n  {\n    return LFS_ERR_NOTEMPTY;\n  }\n  err = lfs_fs_preporphans(lfs, +1);\n  if (err)\n  {\n    return err;\n  }\n  prevdir.type = 0;\n  prevdir.id = 0;\n  lfs->mlist = &prevdir;\n  *err_ref = err;\n  *prevdir_ref = prevdir;\n}\n\n",
            "calle": [
                "lfs_dir_fetch",
                "lfs_dir_get",
                "lfs_fs_preporphans",
                "lfs_pair_fromle32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "err_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_mlist",
                        "type": "struct lfs_mlist * const",
                        "definition": [
                            "struct lfs_mlist * const prevdir_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "newcwd",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t newcwd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "newid",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t newid"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = *err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prevdir",
                        "type": "struct lfs_mlist",
                        "definition": [
                            "struct lfs_mlist prevdir = *prevdir_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prevpair",
                        "type": "lfs_block_t [2]",
                        "definition": [
                            "lfs_block_t prevpair[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t res = lfs_dir_get(lfs, &newcwd, ((((lfs_tag_t) 0x700) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) LFS_TYPE_STRUCT) << 20) | (((lfs_tag_t) newid) << 10)) | ((lfs_tag_t) 8), prevpair)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_lfs_mount__1",
            "header": "",
            "params": [
                "int * const err_ref",
                "lfs_t * const lfs",
                "lfs_mdir_t dir",
                "struct lfs_tortoise_t tortoise"
            ],
            "definition": "void helper_lfs_mount__1(int * const err_ref, lfs_t * const lfs, lfs_mdir_t dir, struct lfs_tortoise_t tortoise)\n{\n  int err = *err_ref;\n  err = lfs_tortoise_detectcycles(&dir, &tortoise);\n  if (err < 0)\n  {\n    goto cleanup;\n  }\n  lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail, ((((lfs_tag_t) 0x7ff) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) LFS_TYPE_SUPERBLOCK) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 8), 0, lfs_dir_find_match, &((struct lfs_dir_find_match){lfs, \"littlefs\", 8}));\n  if (tag < 0)\n  {\n    err = tag;\n    goto cleanup;\n  }\n  if (tag && (!lfs_tag_isdelete(tag)))\n  {\n    helper_helper_lfs_mount__1_1(&err, &tag, lfs, dir);\n  }\n  err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);\n  if (err)\n  {\n    goto cleanup;\n  }\n  *err_ref = err;\n}\n\n",
            "calle": [
                "helper_helper_lfs_mount__1_1",
                "lfs_dir_fetchmatch",
                "lfs_dir_find_match",
                "lfs_dir_getgstate",
                "lfs_tag_isdelete",
                "lfs_tortoise_detectcycles"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "err_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tortoise",
                        "type": "struct lfs_tortoise_t",
                        "definition": [
                            "struct lfs_tortoise_t tortoise"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = *err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail, ((((lfs_tag_t) 0x7ff) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) LFS_TYPE_SUPERBLOCK) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 8), 0, lfs_dir_find_match, &((struct lfs_dir_find_match){lfs, \"littlefs\", 8}))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_lfs_fs_traverse__1",
            "header": "",
            "params": [
                "int * const err_ref",
                "int * const err_ref",
                "int * const err_ref",
                "int * const err_ref",
                "int * const err_ref",
                "lfs_t * const lfs",
                "int (* const cb)(void *data, lfs_block_t block)",
                "void * const data",
                "void * const data",
                "bool includeorphans",
                "lfs_mdir_t dir",
                "struct lfs_tortoise_t tortoise"
            ],
            "definition": "int helper_lfs_fs_traverse__1(int * const err_ref, int * const err_ref, int * const err_ref, int * const err_ref, int * const err_ref, lfs_t * const lfs, int (* const cb)(void *data, lfs_block_t block), void * const data, void * const data, bool includeorphans, lfs_mdir_t dir, struct lfs_tortoise_t tortoise)\n{\n  int err = *err_ref;\n  int err = *err_ref;\n  int err = *err_ref;\n  int err = *err_ref;\n  int err = *err_ref;\n  err = lfs_tortoise_detectcycles(&dir, &tortoise);\n  if (err < 0)\n  {\n    return LFS_ERR_CORRUPT;\n  }\n  for (int i = 0; i < 2; i += 1)\n  {\n    int err = cb(data, dir.tail[i]);\n    if (err)\n    {\n      return err;\n    }\n  }\n\n  int err = lfs_dir_fetch(lfs, &dir, dir.tail);\n  if (err)\n  {\n    return err;\n  }\n  for (uint16_t id = 0; id < dir.count; id += 1)\n  {\n    helper_helper_lfs_fs_traverse__1_1(&err, &err, &err, &err, &err, &err, &err, lfs, cb, data, data, data, includeorphans, dir, id);\n  }\n\n  *err_ref = err;\n  *err_ref = err;\n  *err_ref = err;\n  *err_ref = err;\n  *err_ref = err;\n}\n\n",
            "calle": [
                "cb",
                "helper_helper_lfs_fs_traverse__1_1",
                "lfs_dir_fetch",
                "lfs_tortoise_detectcycles"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "err_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb",
                        "type": "int (* const)(void *data, lfs_block_t block)",
                        "definition": [
                            "int (* const cb)(void *data, lfs_block_t block)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "void * const",
                        "definition": [
                            "void * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "includeorphans",
                        "type": "bool",
                        "definition": [
                            "bool includeorphans"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tortoise",
                        "type": "struct lfs_tortoise_t",
                        "definition": [
                            "struct lfs_tortoise_t tortoise"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = *err_ref",
                            "int err = cb(data, dir.tail[i])",
                            "int err = lfs_dir_fetch(lfs, &dir, dir.tail)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t id = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_lfs_fs_deorphan_1",
            "header": "",
            "params": [
                "int * const pass_ref",
                "lfs_t * const lfs",
                "bool powerloss"
            ],
            "definition": "int helper_lfs_fs_deorphan_1(int * const pass_ref, lfs_t * const lfs, bool powerloss)\n{\n  int pass = *pass_ref;\n  lfs_mdir_t pdir = {.split = 1, .tail = {0, 1}};\n  lfs_mdir_t dir;\n  bool moreorphans = 0;\n  while (!lfs_pair_isnull(pdir.tail))\n  {\n    helper_helper_lfs_fs_deorphan_1_1(&pdir, &moreorphans, lfs, powerloss, pass, dir);\n  }\n\n  pass = (moreorphans) ? (0) : (pass + 1);\n  *pass_ref = pass;\n}\n\n",
            "calle": [
                "helper_helper_lfs_fs_deorphan_1_1",
                "lfs_pair_isnull"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pass_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const pass_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "powerloss",
                        "type": "bool",
                        "definition": [
                            "bool powerloss"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pass",
                        "type": "int",
                        "definition": [
                            "int pass = *pass_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pdir",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t pdir = {.split = 1, .tail = {0, 1}}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "moreorphans",
                        "type": "bool",
                        "definition": [
                            "bool moreorphans = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_lfs_dir_traverse_2_1",
            "header": "",
            "params": [
                "lfs_off_t * const off_ref",
                "lfs_tag_t * const ptag_ref",
                "int * const attrcount_ref",
                "lfs_tag_t * const tmask_ref",
                "lfs_tag_t * const ttag_ref",
                "uint16_t * const begin_ref",
                "uint16_t * const end_ref",
                "int16_t * const diff_ref",
                "unsigned int * const attrs_idx_ref",
                "unsigned int * const dir_idx_ref",
                "unsigned * const sp_ref",
                "const lfs_mdir_t * const dir",
                "const struct lfs_mattr * const attrs",
                "int (* const cb)(void *data, lfs_tag_t tag, const void *buffer)",
                "void * const data",
                "lfs_tag_t tag",
                "const void * const buffer",
                "void * const data",
                "const void * const buffer",
                "void * const data",
                "struct lfs_dir_traverse stack[3 - 1]",
                "const void * const buffer",
                "lfs_tag_t tag",
                "unsigned int cb_idx",
                "lfs_tag_t tag",
                "unsigned int buffer_idx"
            ],
            "definition": "void helper_helper_lfs_dir_traverse_2_1(lfs_off_t * const off_ref, lfs_tag_t * const ptag_ref, int * const attrcount_ref, lfs_tag_t * const tmask_ref, lfs_tag_t * const ttag_ref, uint16_t * const begin_ref, uint16_t * const end_ref, int16_t * const diff_ref, unsigned int * const attrs_idx_ref, unsigned int * const dir_idx_ref, unsigned * const sp_ref, const lfs_mdir_t * const dir, const struct lfs_mattr * const attrs, int (* const cb)(void *data, lfs_tag_t tag, const void *buffer), void * const data, lfs_tag_t tag, const void * const buffer, void * const data, const void * const buffer, void * const data, struct lfs_dir_traverse stack[3 - 1], const void * const buffer, lfs_tag_t tag, unsigned int cb_idx, lfs_tag_t tag, unsigned int buffer_idx)\n{\n  lfs_off_t off = *off_ref;\n  lfs_tag_t ptag = *ptag_ref;\n  int attrcount = *attrcount_ref;\n  lfs_tag_t tmask = *tmask_ref;\n  lfs_tag_t ttag = *ttag_ref;\n  uint16_t begin = *begin_ref;\n  uint16_t end = *end_ref;\n  int16_t diff = *diff_ref;\n  unsigned int attrs_idx = *attrs_idx_ref;\n  unsigned int dir_idx = *dir_idx_ref;\n  unsigned sp = *sp_ref;\n  if ((&cb[cb_idx]) == lfs_dir_traverse_filter)\n  {\n    continue;\n  }\n  stack[sp] = (struct lfs_dir_traverse){.dir = dir, .off = off, .ptag = ptag, .attrs = attrs, .attrcount = attrcount, .tmask = tmask, .ttag = ttag, .begin = begin, .end = end, .diff = diff, .cb = cb, .data = data, .tag = ((((lfs_tag_t) LFS_FROM_NOOP) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0)};\n  sp += 1;\n  uint16_t fromid = lfs_tag_size(tag);\n  uint16_t toid = lfs_tag_id(tag);\n  dir_idx = &buffer[buffer_idx];\n  off = 0;\n  ptag = 0xffffffff;\n  attrs_idx = 0;\n  attrcount = 0;\n  tmask = ((((lfs_tag_t) 0x600) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0);\n  ttag = ((((lfs_tag_t) LFS_TYPE_STRUCT) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0);\n  begin = fromid;\n  end = fromid + 1;\n  diff = (toid - fromid) + diff;\n  *off_ref = off;\n  *ptag_ref = ptag;\n  *attrcount_ref = attrcount;\n  *tmask_ref = tmask;\n  *ttag_ref = ttag;\n  *begin_ref = begin;\n  *end_ref = end;\n  *diff_ref = diff;\n  *attrs_idx_ref = attrs_idx;\n  *dir_idx_ref = dir_idx;\n  *sp_ref = sp;\n}\n\n",
            "calle": [
                "lfs_dir_traverse_filter",
                "lfs_tag_id",
                "lfs_tag_size"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "off_ref",
                        "type": "lfs_off_t * const",
                        "definition": [
                            "lfs_off_t * const off_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptag_ref",
                        "type": "lfs_tag_t * const",
                        "definition": [
                            "lfs_tag_t * const ptag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attrcount_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const attrcount_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmask_ref",
                        "type": "lfs_tag_t * const",
                        "definition": [
                            "lfs_tag_t * const tmask_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ttag_ref",
                        "type": "lfs_tag_t * const",
                        "definition": [
                            "lfs_tag_t * const ttag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "begin_ref",
                        "type": "uint16_t * const",
                        "definition": [
                            "uint16_t * const begin_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end_ref",
                        "type": "uint16_t * const",
                        "definition": [
                            "uint16_t * const end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff_ref",
                        "type": "int16_t * const",
                        "definition": [
                            "int16_t * const diff_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attrs_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const attrs_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const dir_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const sp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "const lfs_mdir_t * const",
                        "definition": [
                            "const lfs_mdir_t * const dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_mattr",
                        "type": "const struct lfs_mattr * const",
                        "definition": [
                            "const struct lfs_mattr * const attrs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb",
                        "type": "int (* const)(void *data, lfs_tag_t tag, const void *buffer)",
                        "definition": [
                            "int (* const cb)(void *data, lfs_tag_t tag, const void *buffer)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "void * const",
                        "definition": [
                            "void * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "const void * const",
                        "definition": [
                            "const void * const buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stack",
                        "type": "struct lfs_dir_traverse [3 - 1]",
                        "definition": [
                            "struct lfs_dir_traverse stack[3 - 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int cb_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int buffer_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t off = *off_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t ptag = *ptag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attrcount",
                        "type": "int",
                        "definition": [
                            "int attrcount = *attrcount_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmask",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tmask = *tmask_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ttag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t ttag = *ttag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "begin",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t begin = *begin_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t end = *end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff",
                        "type": "int16_t",
                        "definition": [
                            "int16_t diff = *diff_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attrs_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int attrs_idx = *attrs_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dir_idx = *dir_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp",
                        "type": "unsigned",
                        "definition": [
                            "unsigned sp = *sp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fromid",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t fromid = lfs_tag_size(tag)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "toid",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t toid = lfs_tag_id(tag)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_lfs_dir_traverse_2_2",
            "header": "",
            "params": [
                "lfs_tag_t * const tag_ref",
                "lfs_off_t * const off_ref",
                "lfs_tag_t * const ptag_ref",
                "int * const attrcount_ref",
                "lfs_tag_t * const tmask_ref",
                "lfs_tag_t * const ttag_ref",
                "uint16_t * const begin_ref",
                "uint16_t * const end_ref",
                "int16_t * const diff_ref",
                "lfs_tag_t * const tag_ref",
                "unsigned int * const data_idx_ref",
                "unsigned int * const cb_idx_ref",
                "unsigned int * const attrs_idx_ref",
                "unsigned * const sp_ref",
                "int * const res_ref",
                "lfs_tag_t * const tag_ref",
                "unsigned int * const buffer_idx_ref",
                "struct lfs_diskoff * const disk_ref",
                "lfs_t * const lfs",
                "const lfs_mdir_t * const dir",
                "const struct lfs_mattr * const attrs",
                "int (* const cb)(void *data, lfs_tag_t tag, const void *buffer)",
                "void * const data",
                "const void * const buffer",
                "void * const data",
                "const void * const buffer",
                "void * const data",
                "struct lfs_dir_traverse stack[3 - 1]",
                "const void * const buffer"
            ],
            "definition": "int helper_helper_lfs_dir_traverse_2_2(lfs_tag_t * const tag_ref, lfs_off_t * const off_ref, lfs_tag_t * const ptag_ref, int * const attrcount_ref, lfs_tag_t * const tmask_ref, lfs_tag_t * const ttag_ref, uint16_t * const begin_ref, uint16_t * const end_ref, int16_t * const diff_ref, lfs_tag_t * const tag_ref, unsigned int * const data_idx_ref, unsigned int * const cb_idx_ref, unsigned int * const attrs_idx_ref, unsigned * const sp_ref, int * const res_ref, lfs_tag_t * const tag_ref, unsigned int * const buffer_idx_ref, struct lfs_diskoff * const disk_ref, lfs_t * const lfs, const lfs_mdir_t * const dir, const struct lfs_mattr * const attrs, int (* const cb)(void *data, lfs_tag_t tag, const void *buffer), void * const data, const void * const buffer, void * const data, const void * const buffer, void * const data, struct lfs_dir_traverse stack[3 - 1], const void * const buffer)\n{\n  lfs_tag_t tag = *tag_ref;\n  lfs_off_t off = *off_ref;\n  lfs_tag_t ptag = *ptag_ref;\n  int attrcount = *attrcount_ref;\n  lfs_tag_t tmask = *tmask_ref;\n  lfs_tag_t ttag = *ttag_ref;\n  uint16_t begin = *begin_ref;\n  uint16_t end = *end_ref;\n  int16_t diff = *diff_ref;\n  lfs_tag_t tag = *tag_ref;\n  unsigned int data_idx = *data_idx_ref;\n  unsigned int cb_idx = *cb_idx_ref;\n  unsigned int attrs_idx = *attrs_idx_ref;\n  unsigned sp = *sp_ref;\n  int res = *res_ref;\n  lfs_tag_t tag = *tag_ref;\n  unsigned int buffer_idx = *buffer_idx_ref;\n  struct lfs_diskoff disk = *disk_ref;\n  if ((off + lfs_tag_dsize(ptag)) < dir->off)\n  {\n    off += lfs_tag_dsize(ptag);\n    int err = lfs_bd_read(lfs, 0, &lfs->rcache, sizeof(tag), dir->pair[0], off, &tag, sizeof(tag));\n    if (err)\n    {\n      return err;\n    }\n    tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;\n    disk.block = dir->pair[0];\n    disk.off = off + (sizeof(lfs_tag_t));\n    buffer_idx = &disk;\n    ptag = tag;\n  }\n  else\n    if (attrcount > 0)\n  {\n    tag = attrs[0 + attrs_idx].tag;\n    buffer_idx = attrs[0 + attrs_idx].buffer_idx;\n    attrs_idx += 1;\n    attrcount -= 1;\n  }\n  else\n  {\n    res = 0;\n    break;\n  }\n  lfs_tag_t mask = ((((lfs_tag_t) 0x7ff) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0);\n  if (((mask & tmask) & tag) != ((mask & tmask) & ttag))\n  {\n    continue;\n  }\n  if (lfs_tag_id(tmask) != 0)\n  {\n    helper_helper_helper_lfs_dir_traverse_2_2_1(&tmask, &ttag, &begin, &end, &diff, &data_idx, &cb_idx, &sp, dir, attrs, cb, data, tag, buffer, data, buffer, data, buffer, data, stack, buffer, tag, off, ptag, attrcount, tag, tag, disk);\n  }\n  *tag_ref = tag;\n  *off_ref = off;\n  *ptag_ref = ptag;\n  *attrcount_ref = attrcount;\n  *tmask_ref = tmask;\n  *ttag_ref = ttag;\n  *begin_ref = begin;\n  *end_ref = end;\n  *diff_ref = diff;\n  *tag_ref = tag;\n  *data_idx_ref = data_idx;\n  *cb_idx_ref = cb_idx;\n  *attrs_idx_ref = attrs_idx;\n  *sp_ref = sp;\n  *res_ref = res;\n  *tag_ref = tag;\n  *buffer_idx_ref = buffer_idx;\n  *disk_ref = disk;\n}\n\n",
            "calle": [
                "helper_helper_helper_lfs_dir_traverse_2_2_1",
                "lfs_bd_read",
                "lfs_frombe32",
                "lfs_tag_dsize",
                "lfs_tag_id"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "tag_ref",
                        "type": "lfs_tag_t * const",
                        "definition": [
                            "lfs_tag_t * const tag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off_ref",
                        "type": "lfs_off_t * const",
                        "definition": [
                            "lfs_off_t * const off_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptag_ref",
                        "type": "lfs_tag_t * const",
                        "definition": [
                            "lfs_tag_t * const ptag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attrcount_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const attrcount_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmask_ref",
                        "type": "lfs_tag_t * const",
                        "definition": [
                            "lfs_tag_t * const tmask_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ttag_ref",
                        "type": "lfs_tag_t * const",
                        "definition": [
                            "lfs_tag_t * const ttag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "begin_ref",
                        "type": "uint16_t * const",
                        "definition": [
                            "uint16_t * const begin_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end_ref",
                        "type": "uint16_t * const",
                        "definition": [
                            "uint16_t * const end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff_ref",
                        "type": "int16_t * const",
                        "definition": [
                            "int16_t * const diff_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const data_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const cb_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attrs_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const attrs_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const sp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const res_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const buffer_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_diskoff",
                        "type": "struct lfs_diskoff * const",
                        "definition": [
                            "struct lfs_diskoff * const disk_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "const lfs_mdir_t * const",
                        "definition": [
                            "const lfs_mdir_t * const dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_mattr",
                        "type": "const struct lfs_mattr * const",
                        "definition": [
                            "const struct lfs_mattr * const attrs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb",
                        "type": "int (* const)(void *data, lfs_tag_t tag, const void *buffer)",
                        "definition": [
                            "int (* const cb)(void *data, lfs_tag_t tag, const void *buffer)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "void * const",
                        "definition": [
                            "void * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "const void * const",
                        "definition": [
                            "const void * const buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stack",
                        "type": "struct lfs_dir_traverse [3 - 1]",
                        "definition": [
                            "struct lfs_dir_traverse stack[3 - 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tag = *tag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t off = *off_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t ptag = *ptag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attrcount",
                        "type": "int",
                        "definition": [
                            "int attrcount = *attrcount_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmask",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tmask = *tmask_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ttag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t ttag = *ttag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "begin",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t begin = *begin_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t end = *end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff",
                        "type": "int16_t",
                        "definition": [
                            "int16_t diff = *diff_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int data_idx = *data_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int cb_idx = *cb_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attrs_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int attrs_idx = *attrs_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp",
                        "type": "unsigned",
                        "definition": [
                            "unsigned sp = *sp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res",
                        "type": "int",
                        "definition": [
                            "int res = *res_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int buffer_idx = *buffer_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "disk",
                        "type": "struct lfs_diskoff",
                        "definition": [
                            "struct lfs_diskoff disk = *disk_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_bd_read(lfs, 0, &lfs->rcache, sizeof(tag), dir->pair[0], off, &tag, sizeof(tag))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t mask = ((((lfs_tag_t) 0x7ff) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_lfs_dir_fetchmatch_1_1",
            "header": "",
            "params": [
                "lfs_stag_t * const besttag_ref",
                "lfs_off_t * const off_ref",
                "lfs_tag_t * const ptag_ref",
                "uint16_t * const tempcount_ref",
                "bool * const tempsplit_ref",
                "lfs_stag_t * const tempbesttag_ref",
                "bool * const maybeerased_ref",
                "bool * const hasfcrc_ref",
                "uint32_t * const crc_ref",
                "lfs_t * const lfs",
                "lfs_mdir_t * const dir",
                "lfs_tag_t fmask",
                "lfs_tag_t ftag",
                "void * const data",
                "void * const data",
                "lfs_block_t temptail[2]",
                "struct lfs_fcrc fcrc"
            ],
            "definition": "lfs_stag_t helper_helper_lfs_dir_fetchmatch_1_1(lfs_stag_t * const besttag_ref, lfs_off_t * const off_ref, lfs_tag_t * const ptag_ref, uint16_t * const tempcount_ref, bool * const tempsplit_ref, lfs_stag_t * const tempbesttag_ref, bool * const maybeerased_ref, bool * const hasfcrc_ref, uint32_t * const crc_ref, lfs_t * const lfs, lfs_mdir_t * const dir, lfs_tag_t fmask, lfs_tag_t ftag, void * const data, void * const data, lfs_block_t temptail[2], struct lfs_fcrc fcrc)\n{\n  lfs_stag_t besttag = *besttag_ref;\n  lfs_off_t off = *off_ref;\n  lfs_tag_t ptag = *ptag_ref;\n  uint16_t tempcount = *tempcount_ref;\n  bool tempsplit = *tempsplit_ref;\n  lfs_stag_t tempbesttag = *tempbesttag_ref;\n  bool maybeerased = *maybeerased_ref;\n  bool hasfcrc = *hasfcrc_ref;\n  uint32_t crc = *crc_ref;\n  lfs_tag_t tag;\n  off += lfs_tag_dsize(ptag);\n  int err = lfs_bd_read(lfs, 0, &lfs->rcache, lfs->cfg->block_size, dir->pair[0], off, &tag, sizeof(tag));\n  if (err)\n  {\n    if (err == LFS_ERR_CORRUPT)\n    {\n      break;\n    }\n    return err;\n  }\n  crc = lfs_crc(crc, &tag, sizeof(tag));\n  tag = lfs_frombe32(tag) ^ ptag;\n  if (!lfs_tag_isvalid(tag))\n  {\n    maybeerased = lfs_tag_type2(ptag) == LFS_TYPE_CCRC;\n    break;\n  }\n  else\n    if ((off + lfs_tag_dsize(tag)) > lfs->cfg->block_size)\n  {\n    break;\n  }\n  ptag = tag;\n  if (lfs_tag_type2(tag) == LFS_TYPE_CCRC)\n  {\n    helper_helper_helper_lfs_dir_fetchmatch_1_1_1(&besttag, &off, &ptag, &crc, &err, lfs, dir, temptail, tempcount, tempsplit, tempbesttag, tag);\n  }\n  err = lfs_bd_crc(lfs, 0, &lfs->rcache, lfs->cfg->block_size, dir->pair[0], off + (sizeof(tag)), lfs_tag_dsize(tag) - (sizeof(tag)), &crc);\n  if (err)\n  {\n    if (err == LFS_ERR_CORRUPT)\n    {\n      break;\n    }\n    return err;\n  }\n  if (lfs_tag_type1(tag) == LFS_TYPE_NAME)\n  {\n    if (lfs_tag_id(tag) >= tempcount)\n    {\n      tempcount = lfs_tag_id(tag) + 1;\n    }\n  }\n  else\n    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE)\n  {\n    tempcount += lfs_tag_splice(tag);\n    if (tag == ((((((lfs_tag_t) LFS_TYPE_DELETE) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0)) | ((((((lfs_tag_t) 0) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0)) & tempbesttag)))\n    {\n      tempbesttag |= 0x80000000;\n    }\n    else\n      if ((tempbesttag != (-1)) && (lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)))\n    {\n      tempbesttag += ((((lfs_tag_t) 0) << 20) | (((lfs_tag_t) lfs_tag_splice(tag)) << 10)) | ((lfs_tag_t) 0);\n    }\n  }\n  else\n    if (lfs_tag_type1(tag) == LFS_TYPE_TAIL)\n  {\n    tempsplit = lfs_tag_chunk(tag) & 1;\n    err = lfs_bd_read(lfs, 0, &lfs->rcache, lfs->cfg->block_size, dir->pair[0], off + (sizeof(tag)), &temptail, 8);\n    if (err)\n    {\n      if (err == LFS_ERR_CORRUPT)\n      {\n        break;\n      }\n      return err;\n    }\n    lfs_pair_fromle32(temptail);\n  }\n  else\n    if (lfs_tag_type3(tag) == LFS_TYPE_FCRC)\n  {\n    err = lfs_bd_read(lfs, 0, &lfs->rcache, lfs->cfg->block_size, dir->pair[0], off + (sizeof(tag)), &fcrc, sizeof(fcrc));\n    if (err)\n    {\n      if (err == LFS_ERR_CORRUPT)\n      {\n        break;\n      }\n      return err;\n    }\n    lfs_fcrc_fromle32(&fcrc);\n    hasfcrc = 1;\n  }\n  if ((fmask & tag) == (fmask & ftag))\n  {\n    int res = cb(data, tag, &((struct lfs_diskoff){dir->pair[0], off + (sizeof(tag))}));\n    if (res < 0)\n    {\n      if (res == LFS_ERR_CORRUPT)\n      {\n        break;\n      }\n      return res;\n    }\n    if (res == LFS_CMP_EQ)\n    {\n      tempbesttag = tag;\n    }\n    else\n      if (((((((lfs_tag_t) 0x7ff) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0)) & tag) == ((((((lfs_tag_t) 0x7ff) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0)) & tempbesttag))\n    {\n      tempbesttag = -1;\n    }\n    else\n      if ((res == LFS_CMP_GT) && (lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)))\n    {\n      tempbesttag = tag | 0x80000000;\n    }\n  }\n  *besttag_ref = besttag;\n  *off_ref = off;\n  *ptag_ref = ptag;\n  *tempcount_ref = tempcount;\n  *tempsplit_ref = tempsplit;\n  *tempbesttag_ref = tempbesttag;\n  *maybeerased_ref = maybeerased;\n  *hasfcrc_ref = hasfcrc;\n  *crc_ref = crc;\n}\n\n",
            "calle": [
                "cb",
                "helper_helper_helper_lfs_dir_fetchmatch_1_1_1",
                "lfs_bd_crc",
                "lfs_bd_read",
                "lfs_crc",
                "lfs_fcrc_fromle32",
                "lfs_frombe32",
                "lfs_pair_fromle32",
                "lfs_tag_chunk",
                "lfs_tag_dsize",
                "lfs_tag_id",
                "lfs_tag_isvalid",
                "lfs_tag_splice",
                "lfs_tag_type1",
                "lfs_tag_type2",
                "lfs_tag_type3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "besttag_ref",
                        "type": "lfs_stag_t * const",
                        "definition": [
                            "lfs_stag_t * const besttag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off_ref",
                        "type": "lfs_off_t * const",
                        "definition": [
                            "lfs_off_t * const off_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptag_ref",
                        "type": "lfs_tag_t * const",
                        "definition": [
                            "lfs_tag_t * const ptag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tempcount_ref",
                        "type": "uint16_t * const",
                        "definition": [
                            "uint16_t * const tempcount_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tempsplit_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const tempsplit_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tempbesttag_ref",
                        "type": "lfs_stag_t * const",
                        "definition": [
                            "lfs_stag_t * const tempbesttag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maybeerased_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const maybeerased_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hasfcrc_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const hasfcrc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const crc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t * const",
                        "definition": [
                            "lfs_mdir_t * const dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmask",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t fmask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ftag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t ftag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "void * const",
                        "definition": [
                            "void * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "temptail",
                        "type": "lfs_block_t [2]",
                        "definition": [
                            "lfs_block_t temptail[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fcrc",
                        "type": "struct lfs_fcrc",
                        "definition": [
                            "struct lfs_fcrc fcrc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "besttag",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t besttag = *besttag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t off = *off_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t ptag = *ptag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tempcount",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t tempcount = *tempcount_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tempsplit",
                        "type": "bool",
                        "definition": [
                            "bool tempsplit = *tempsplit_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tempbesttag",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t tempbesttag = *tempbesttag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maybeerased",
                        "type": "bool",
                        "definition": [
                            "bool maybeerased = *maybeerased_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hasfcrc",
                        "type": "bool",
                        "definition": [
                            "bool hasfcrc = *hasfcrc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t crc = *crc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_bd_read(lfs, 0, &lfs->rcache, lfs->cfg->block_size, dir->pair[0], off, &tag, sizeof(tag))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res",
                        "type": "int",
                        "definition": [
                            "int res = cb(data, tag, &((struct lfs_diskoff){dir->pair[0], off + (sizeof(tag))}))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_lfs_dir_find_1_1",
            "header": "",
            "params": [
                "unsigned int * const name_idx_ref",
                "unsigned int * const suffix_idx_ref",
                "lfs_size_t * const sufflen_ref",
                "int * const depth_ref",
                "const char * const suffix"
            ],
            "definition": "void helper_helper_lfs_dir_find_1_1(unsigned int * const name_idx_ref, unsigned int * const suffix_idx_ref, lfs_size_t * const sufflen_ref, int * const depth_ref, const char * const suffix)\n{\n  unsigned int name_idx = *name_idx_ref;\n  unsigned int suffix_idx = *suffix_idx_ref;\n  lfs_size_t sufflen = *sufflen_ref;\n  int depth = *depth_ref;\n  suffix_idx += strspn(suffix_idx, \"/\");\n  sufflen = strcspn(suffix, \"/\");\n  if (sufflen == 0)\n  {\n    break;\n  }\n  if ((sufflen == 1) && (memcmp(suffix, \".\", 1) == 0))\n  {\n  }\n  else\n    if ((sufflen == 2) && (memcmp(suffix, \"..\", 2) == 0))\n  {\n    depth -= 1;\n    if (depth == 0)\n    {\n      name_idx = (&suffix[suffix_idx]) + sufflen;\n      goto nextname;\n    }\n  }\n  else\n  {\n    depth += 1;\n  }\n  suffix_idx += sufflen;\n  *name_idx_ref = name_idx;\n  *suffix_idx_ref = suffix_idx;\n  *sufflen_ref = sufflen;\n  *depth_ref = depth;\n}\n\n",
            "calle": [
                "memcmp",
                "strcspn",
                "strspn"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "name_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const name_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "suffix_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const suffix_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sufflen_ref",
                        "type": "lfs_size_t * const",
                        "definition": [
                            "lfs_size_t * const sufflen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "depth_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const depth_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "suffix",
                        "type": "const char * const",
                        "definition": [
                            "const char * const suffix"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int name_idx = *name_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "suffix_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int suffix_idx = *suffix_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sufflen",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t sufflen = *sufflen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "depth",
                        "type": "int",
                        "definition": [
                            "int depth = *depth_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_lfs_dir_commitcrc_1_1",
            "header": "",
            "params": [
                "lfs_t * const lfs",
                "struct lfs_commit * const commit",
                "uint32_t crc",
                "uint32_t crc",
                "lfs_off_t noff",
                "uint8_t eperturb",
                "uint32_t crc"
            ],
            "definition": "int helper_helper_lfs_dir_commitcrc_1_1(lfs_t * const lfs, struct lfs_commit * const commit, uint32_t crc, uint32_t crc, lfs_off_t noff, uint8_t eperturb, uint32_t crc)\n{\n  int err = lfs_bd_read(lfs, 0, &lfs->rcache, lfs->cfg->prog_size, commit->block, noff, &eperturb, 1);\n  if (err && (err != LFS_ERR_CORRUPT))\n  {\n    return err;\n  }\n  {\n    struct lfs_fcrc fcrc = {.size = lfs->cfg->prog_size, .crc = 0xffffffff};\n    err = lfs_bd_crc(lfs, 0, &lfs->rcache, lfs->cfg->prog_size, commit->block, noff, fcrc.size, &fcrc.crc);\n    if (err && (err != LFS_ERR_CORRUPT))\n    {\n      return err;\n    }\n    lfs_fcrc_tole32(&fcrc);\n    err = lfs_dir_commitattr(lfs, commit, ((((lfs_tag_t) LFS_TYPE_FCRC) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) (sizeof(struct lfs_fcrc))), &fcrc);\n    if (err)\n    {\n      return err;\n    }\n  }\n}\n\n",
            "calle": [
                "lfs_bd_crc",
                "lfs_bd_read",
                "lfs_dir_commitattr",
                "lfs_fcrc_tole32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_commit",
                        "type": "struct lfs_commit * const",
                        "definition": [
                            "struct lfs_commit * const commit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t crc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "noff",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t noff"
                        ]
                    },
                    {
                        "path": null,
                        "name": "eperturb",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t eperturb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_bd_read(lfs, 0, &lfs->rcache, lfs->cfg->prog_size, commit->block, noff, &eperturb, 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fcrc",
                        "type": "struct lfs_fcrc",
                        "definition": [
                            "struct lfs_fcrc fcrc = {.size = lfs->cfg->prog_size, .crc = 0xffffffff}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_lfs_dir_compact_1_1",
            "header": "",
            "params": [
                "lfs_t * const lfs",
                "lfs_mdir_t * const dir",
                "const struct lfs_mattr * const attrs",
                "int attrcount",
                "lfs_mdir_t * const source",
                "uint16_t begin",
                "uint16_t end",
                "bool relocated"
            ],
            "definition": "int helper_helper_lfs_dir_compact_1_1(lfs_t * const lfs, lfs_mdir_t * const dir, const struct lfs_mattr * const attrs, int attrcount, lfs_mdir_t * const source, uint16_t begin, uint16_t end, bool relocated)\n{\n  struct lfs_commit commit = {.block = dir->pair[1], .off = 0, .ptag = 0xffffffff, .crc = 0xffffffff, .begin = 0, .end = ((lfs->cfg->metadata_max) ? (lfs->cfg->metadata_max) : (lfs->cfg->block_size)) - 8};\n  int err = lfs_bd_erase(lfs, dir->pair[1]);\n  if (err)\n  {\n    if (err == LFS_ERR_CORRUPT)\n    {\n      goto relocate;\n    }\n    return err;\n  }\n  dir->rev = lfs_tole32(dir->rev);\n  err = lfs_dir_commitprog(lfs, &commit, &dir->rev, sizeof(dir->rev));\n  dir->rev = lfs_fromle32(dir->rev);\n  if (err)\n  {\n    if (err == LFS_ERR_CORRUPT)\n    {\n      goto relocate;\n    }\n    return err;\n  }\n  err = lfs_dir_traverse(lfs, source, 0, 0xffffffff, attrs, attrcount, ((((lfs_tag_t) 0x400) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) LFS_TYPE_NAME) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0), begin, end, -begin, lfs_dir_commit_commit, &((struct lfs_dir_commit_commit){lfs, &commit}));\n  if (err)\n  {\n    if (err == LFS_ERR_CORRUPT)\n    {\n      goto relocate;\n    }\n    return err;\n  }\n  if (!lfs_pair_isnull(dir->tail))\n  {\n    lfs_pair_tole32(dir->tail);\n    err = lfs_dir_commitattr(lfs, &commit, ((((lfs_tag_t) (LFS_TYPE_TAIL + dir->split)) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 8), dir->tail);\n    lfs_pair_fromle32(dir->tail);\n    if (err)\n    {\n      if (err == LFS_ERR_CORRUPT)\n      {\n        goto relocate;\n      }\n      return err;\n    }\n  }\n  lfs_gstate_t delta = {0};\n  if (!relocated)\n  {\n    lfs_gstate_xor(&delta, &lfs->gdisk);\n    lfs_gstate_xor(&delta, &lfs->gstate);\n  }\n  lfs_gstate_xor(&delta, &lfs->gdelta);\n  delta.tag &= ~(((((lfs_tag_t) 0) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0x3ff));\n  err = lfs_dir_getgstate(lfs, dir, &delta);\n  if (err)\n  {\n    return err;\n  }\n  if (!lfs_gstate_iszero(&delta))\n  {\n    lfs_gstate_tole32(&delta);\n    err = lfs_dir_commitattr(lfs, &commit, ((((lfs_tag_t) LFS_TYPE_MOVESTATE) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) (sizeof(delta))), &delta);\n    if (err)\n    {\n      if (err == LFS_ERR_CORRUPT)\n      {\n        goto relocate;\n      }\n      return err;\n    }\n  }\n  err = lfs_dir_commitcrc(lfs, &commit);\n  if (err)\n  {\n    if (err == LFS_ERR_CORRUPT)\n    {\n      goto relocate;\n    }\n    return err;\n  }\n  assert((commit.off % lfs->cfg->prog_size) == 0);\n  lfs_pair_swap(dir->pair);\n  dir->count = end - begin;\n  dir->off = commit.off;\n  dir->etag = commit.ptag;\n  lfs->gdelta = (lfs_gstate_t){0};\n  if (!relocated)\n  {\n    lfs->gdisk = lfs->gstate;\n  }\n}\n\n",
            "calle": [
                "assert",
                "lfs_bd_erase",
                "lfs_dir_commit_commit",
                "lfs_dir_commitattr",
                "lfs_dir_commitcrc",
                "lfs_dir_commitprog",
                "lfs_dir_getgstate",
                "lfs_dir_traverse",
                "lfs_fromle32",
                "lfs_gstate_iszero",
                "lfs_gstate_tole32",
                "lfs_gstate_xor",
                "lfs_pair_fromle32",
                "lfs_pair_isnull",
                "lfs_pair_swap",
                "lfs_pair_tole32",
                "lfs_tole32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t * const",
                        "definition": [
                            "lfs_mdir_t * const dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_mattr",
                        "type": "const struct lfs_mattr * const",
                        "definition": [
                            "const struct lfs_mattr * const attrs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attrcount",
                        "type": "int",
                        "definition": [
                            "int attrcount"
                        ]
                    },
                    {
                        "path": null,
                        "name": "source",
                        "type": "lfs_mdir_t * const",
                        "definition": [
                            "lfs_mdir_t * const source"
                        ]
                    },
                    {
                        "path": null,
                        "name": "begin",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t begin"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "relocated",
                        "type": "bool",
                        "definition": [
                            "bool relocated"
                        ]
                    },
                    {
                        "path": null,
                        "name": "commit",
                        "type": "struct lfs_commit",
                        "definition": [
                            "struct lfs_commit commit = {.block = dir->pair[1], .off = 0, .ptag = 0xffffffff, .crc = 0xffffffff, .begin = 0, .end = ((lfs->cfg->metadata_max) ? (lfs->cfg->metadata_max) : (lfs->cfg->block_size)) - 8}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_bd_erase(lfs, dir->pair[1])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "delta",
                        "type": "lfs_gstate_t",
                        "definition": [
                            "lfs_gstate_t delta = {0}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_lfs_dir_orphaningcommit_2_1",
            "header": "",
            "params": [
                "lfs_mdir_t * const ldir_ref",
                "int * const state_ref",
                "int * const err_ref",
                "int * const err_ref",
                "lfs_t * const lfs",
                "lfs_block_t lpair[2]",
                "lfs_mdir_t pdir",
                "bool hasparent"
            ],
            "definition": "int helper_helper_lfs_dir_orphaningcommit_2_1(lfs_mdir_t * const ldir_ref, int * const state_ref, int * const err_ref, int * const err_ref, lfs_t * const lfs, lfs_block_t lpair[2], lfs_mdir_t pdir, bool hasparent)\n{\n  lfs_mdir_t ldir = *ldir_ref;\n  int state = *state_ref;\n  int err = *err_ref;\n  int err = *err_ref;\n  if (lfs_gstate_hasorphans(&lfs->gstate))\n  {\n    err = lfs_fs_preporphans(lfs, -((int8_t) hasparent));\n    if (err)\n    {\n      return err;\n    }\n  }\n  uint16_t moveid = 0x3ff;\n  if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair))\n  {\n    moveid = lfs_tag_id(lfs->gstate.tag);\n    printf(\"%s:%d:debug: Fixing move while relocating {0x%x, 0x%x} 0x%x\\n%s\\n\", \"/home/ubuntu/C2RustTranslation/subjects/littlefs/lfs.c\", 2571, pdir.pair[0], pdir.pair[1], moveid, \"\");\n    lfs_fs_prepmove(lfs, 0x3ff, 0);\n  }\n  lpair[0] = pdir.pair[0];\n  lpair[1] = pdir.pair[1];\n  lfs_pair_tole32(ldir.pair);\n  state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, (struct lfs_mattr []){{(moveid != 0x3ff) ? (((((lfs_tag_t) LFS_TYPE_DELETE) << 20) | (((lfs_tag_t) moveid) << 10)) | ((lfs_tag_t) 0)) : (((((lfs_tag_t) LFS_FROM_NOOP) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0)), 0}, {((((lfs_tag_t) (LFS_TYPE_TAIL + pdir.split)) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 8), ldir.pair}}, (sizeof((struct lfs_mattr []){{(moveid != 0x3ff) ? (((((lfs_tag_t) LFS_TYPE_DELETE) << 20) | (((lfs_tag_t) moveid) << 10)) | ((lfs_tag_t) 0)) : (((((lfs_tag_t) LFS_FROM_NOOP) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0)), 0}, {((((lfs_tag_t) (LFS_TYPE_TAIL + pdir.split)) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 8), ldir.pair}})) / (sizeof(struct lfs_mattr)), 0);\n  lfs_pair_fromle32(ldir.pair);\n  if (state < 0)\n  {\n    return state;\n  }\n  ldir = pdir;\n  *ldir_ref = ldir;\n  *state_ref = state;\n  *err_ref = err;\n  *err_ref = err;\n}\n\n",
            "calle": [
                "lfs_dir_relocatingcommit",
                "lfs_fs_prepmove",
                "lfs_fs_preporphans",
                "lfs_gstate_hasmovehere",
                "lfs_gstate_hasorphans",
                "lfs_pair_fromle32",
                "lfs_pair_tole32",
                "lfs_tag_id",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ldir_ref",
                        "type": "lfs_mdir_t * const",
                        "definition": [
                            "lfs_mdir_t * const ldir_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const state_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lpair",
                        "type": "lfs_block_t [2]",
                        "definition": [
                            "lfs_block_t lpair[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pdir",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t pdir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hasparent",
                        "type": "bool",
                        "definition": [
                            "bool hasparent"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ldir",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t ldir = *ldir_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "int",
                        "definition": [
                            "int state = *state_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = *err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "moveid",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t moveid = 0x3ff"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_lfs_dir_orphaningcommit_2_2",
            "header": "",
            "params": [
                "lfs_mdir_t * const ldir_ref",
                "int * const state_ref",
                "bool * const orphans_ref",
                "lfs_stag_t * const tag_ref",
                "lfs_t * const lfs",
                "lfs_block_t lpair[2]",
                "lfs_mdir_t pdir"
            ],
            "definition": "int helper_helper_lfs_dir_orphaningcommit_2_2(lfs_mdir_t * const ldir_ref, int * const state_ref, bool * const orphans_ref, lfs_stag_t * const tag_ref, lfs_t * const lfs, lfs_block_t lpair[2], lfs_mdir_t pdir)\n{\n  lfs_mdir_t ldir = *ldir_ref;\n  int state = *state_ref;\n  bool orphans = *orphans_ref;\n  lfs_stag_t tag = *tag_ref;\n  int err = lfs_fs_preporphans(lfs, +1);\n  if (err)\n  {\n    return err;\n  }\n  uint16_t moveid = 0x3ff;\n  if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair))\n  {\n    moveid = lfs_tag_id(lfs->gstate.tag);\n    printf(\"%s:%d:debug: Fixing move while relocating {0x%x, 0x%x} 0x%x\\n%s\\n\", \"/home/ubuntu/C2RustTranslation/subjects/littlefs/lfs.c\", 2519, pdir.pair[0], pdir.pair[1], moveid, \"\");\n    lfs_fs_prepmove(lfs, 0x3ff, 0);\n    if (moveid < lfs_tag_id(tag))\n    {\n      tag -= ((((lfs_tag_t) 0) << 20) | (((lfs_tag_t) 1) << 10)) | ((lfs_tag_t) 0);\n    }\n  }\n  lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};\n  lfs_pair_tole32(ldir.pair);\n  state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, (struct lfs_mattr []){{(moveid != 0x3ff) ? (((((lfs_tag_t) LFS_TYPE_DELETE) << 20) | (((lfs_tag_t) moveid) << 10)) | ((lfs_tag_t) 0)) : (((((lfs_tag_t) LFS_FROM_NOOP) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0)), 0}, {tag, ldir.pair}}, (sizeof((struct lfs_mattr []){{(moveid != 0x3ff) ? (((((lfs_tag_t) LFS_TYPE_DELETE) << 20) | (((lfs_tag_t) moveid) << 10)) | ((lfs_tag_t) 0)) : (((((lfs_tag_t) LFS_FROM_NOOP) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0)), 0}, {tag, ldir.pair}})) / (sizeof(struct lfs_mattr)), 0);\n  lfs_pair_fromle32(ldir.pair);\n  if (state < 0)\n  {\n    return state;\n  }\n  if (state == LFS_OK_RELOCATED)\n  {\n    lpair[0] = ppair[0];\n    lpair[1] = ppair[1];\n    ldir = pdir;\n    orphans = 1;\n    continue;\n  }\n  *ldir_ref = ldir;\n  *state_ref = state;\n  *orphans_ref = orphans;\n  *tag_ref = tag;\n}\n\n",
            "calle": [
                "lfs_dir_relocatingcommit",
                "lfs_fs_prepmove",
                "lfs_fs_preporphans",
                "lfs_gstate_hasmovehere",
                "lfs_pair_fromle32",
                "lfs_pair_tole32",
                "lfs_tag_id",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ldir_ref",
                        "type": "lfs_mdir_t * const",
                        "definition": [
                            "lfs_mdir_t * const ldir_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const state_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "orphans_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const orphans_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag_ref",
                        "type": "lfs_stag_t * const",
                        "definition": [
                            "lfs_stag_t * const tag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lpair",
                        "type": "lfs_block_t [2]",
                        "definition": [
                            "lfs_block_t lpair[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pdir",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t pdir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ldir",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t ldir = *ldir_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "int",
                        "definition": [
                            "int state = *state_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "orphans",
                        "type": "bool",
                        "definition": [
                            "bool orphans = *orphans_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t tag = *tag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_fs_preporphans(lfs, +1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "moveid",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t moveid = 0x3ff"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ppair",
                        "type": "lfs_block_t [2]",
                        "definition": [
                            "lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_lfs_ctz_extend_1_1",
            "header": "",
            "params": [
                "int * const err_ref",
                "lfs_t * const lfs",
                "lfs_cache_t * const pcache",
                "lfs_cache_t * const rcache",
                "lfs_block_t head",
                "lfs_size_t size",
                "lfs_block_t * const block",
                "lfs_off_t * const off",
                "lfs_block_t nblock"
            ],
            "definition": "int helper_helper_lfs_ctz_extend_1_1(int * const err_ref, lfs_t * const lfs, lfs_cache_t * const pcache, lfs_cache_t * const rcache, lfs_block_t head, lfs_size_t size, lfs_block_t * const block, lfs_off_t * const off, lfs_block_t nblock)\n{\n  int err = *err_ref;\n  err = lfs_bd_erase(lfs, nblock);\n  if (err)\n  {\n    if (err == LFS_ERR_CORRUPT)\n    {\n      goto relocate;\n    }\n    return err;\n  }\n  if (size == 0)\n  {\n    *block = nblock;\n    *off = 0;\n    return 0;\n  }\n  lfs_size_t noff = size - 1;\n  lfs_off_t index = lfs_ctz_index(lfs, &noff);\n  noff = noff + 1;\n  if (noff != lfs->cfg->block_size)\n  {\n    helper_helper_helper_lfs_ctz_extend_1_1_2(&err, lfs, pcache, rcache, head, block, off, nblock, noff);\n  }\n  index += 1;\n  lfs_size_t skips = lfs_ctz(index) + 1;\n  lfs_block_t nhead = head;\n  for (lfs_off_t i = 0; i < skips; i += 1)\n  {\n    helper_helper_helper_lfs_ctz_extend_1_1_1(&err, &nhead, lfs, pcache, rcache, nblock, i, skips, i);\n  }\n\n  *block = nblock;\n  *off = 4 * skips;\n  return 0;\n  *err_ref = err;\n}\n\n",
            "calle": [
                "helper_helper_helper_lfs_ctz_extend_1_1_1",
                "helper_helper_helper_lfs_ctz_extend_1_1_2",
                "lfs_bd_erase",
                "lfs_ctz",
                "lfs_ctz_index"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "err_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pcache",
                        "type": "lfs_cache_t * const",
                        "definition": [
                            "lfs_cache_t * const pcache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rcache",
                        "type": "lfs_cache_t * const",
                        "definition": [
                            "lfs_cache_t * const rcache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "head",
                        "type": "lfs_block_t",
                        "definition": [
                            "lfs_block_t head"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "lfs_block_t * const",
                        "definition": [
                            "lfs_block_t * const block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_off_t * const",
                        "definition": [
                            "lfs_off_t * const off"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "lfs_block_t",
                        "definition": [
                            "lfs_block_t nblock"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = *err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "noff",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t noff = size - 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t index = lfs_ctz_index(lfs, &noff)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "skips",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t skips = lfs_ctz(index) + 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nhead",
                        "type": "lfs_block_t",
                        "definition": [
                            "lfs_block_t nhead = head"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t i = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_lfs_file_relocate_1_1",
            "header": "",
            "params": [
                "int * const err_ref",
                "lfs_t * const lfs",
                "lfs_file_t * const file",
                "lfs_block_t nblock",
                "lfs_off_t i"
            ],
            "definition": "int helper_helper_lfs_file_relocate_1_1(int * const err_ref, lfs_t * const lfs, lfs_file_t * const file, lfs_block_t nblock, lfs_off_t i)\n{\n  int err = *err_ref;\n  uint8_t data;\n  if (file->flags & LFS_F_INLINE)\n  {\n    err = lfs_dir_getread(lfs, &file->m, 0, &file->cache, file->off - i, ((((lfs_tag_t) 0xfff) << 20) | (((lfs_tag_t) 0x1ff) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) LFS_TYPE_INLINESTRUCT) << 20) | (((lfs_tag_t) file->id) << 10)) | ((lfs_tag_t) 0), i, &data, 1);\n    if (err)\n    {\n      return err;\n    }\n  }\n  else\n  {\n    err = lfs_bd_read(lfs, &file->cache, &lfs->rcache, file->off - i, file->block, i, &data, 1);\n    if (err)\n    {\n      return err;\n    }\n  }\n  err = lfs_bd_prog(lfs, &lfs->pcache, &lfs->rcache, 1, nblock, i, &data, 1);\n  if (err)\n  {\n    if (err == LFS_ERR_CORRUPT)\n    {\n      goto relocate;\n    }\n    return err;\n  }\n  *err_ref = err;\n}\n\n",
            "calle": [
                "lfs_bd_prog",
                "lfs_bd_read",
                "lfs_dir_getread"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "err_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t * const",
                        "definition": [
                            "lfs_file_t * const file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "lfs_block_t",
                        "definition": [
                            "lfs_block_t nblock"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = *err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t data"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_lfs_file_flush_1_1",
            "header": "",
            "params": [
                "lfs_t * const lfs",
                "lfs_file_t * const file",
                "lfs_off_t pos"
            ],
            "definition": "int helper_helper_lfs_file_flush_1_1(lfs_t * const lfs, lfs_file_t * const file, lfs_off_t pos)\n{\n  lfs_file_t orig = {.ctz.head = file->ctz.head, .ctz.size = file->ctz.size, .flags = LFS_O_RDONLY, .pos = file->pos, .cache = lfs->rcache};\n  lfs_cache_drop(lfs, &lfs->rcache);\n  while (file->pos < file->ctz.size)\n  {\n    uint8_t data;\n    lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);\n    if (res < 0)\n    {\n      return res;\n    }\n    res = lfs_file_flushedwrite(lfs, file, &data, 1);\n    if (res < 0)\n    {\n      return res;\n    }\n    if (lfs->rcache.block != ((lfs_block_t) (-1)))\n    {\n      lfs_cache_drop(lfs, &orig.cache);\n      lfs_cache_drop(lfs, &lfs->rcache);\n    }\n  }\n\n  while (1)\n  {\n    int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, 1);\n    if (err)\n    {\n      if (err == LFS_ERR_CORRUPT)\n      {\n        goto relocate;\n      }\n      return err;\n    }\n    break;\n    relocate:\n    printf(\"%s:%d:debug: Bad block at 0x%x%s\\n\", \"/home/ubuntu/C2RustTranslation/subjects/littlefs/lfs.c\", 3407, file->block, \"\");\n\n    err = lfs_file_relocate(lfs, file);\n    if (err)\n    {\n      return err;\n    }\n  }\n\n}\n\n",
            "calle": [
                "lfs_bd_flush",
                "lfs_cache_drop",
                "lfs_file_flushedread",
                "lfs_file_flushedwrite",
                "lfs_file_relocate",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t * const",
                        "definition": [
                            "lfs_file_t * const file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "orig",
                        "type": "lfs_file_t",
                        "definition": [
                            "lfs_file_t orig = {.ctz.head = file->ctz.head, .ctz.size = file->ctz.size, .flags = LFS_O_RDONLY, .pos = file->pos, .cache = lfs->rcache}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res",
                        "type": "lfs_ssize_t",
                        "definition": [
                            "lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, 1)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_lfs_file_flushedwrite_1_1",
            "header": "",
            "params": [
                "lfs_t * const lfs",
                "lfs_file_t * const file",
                "const uint8_t * const data",
                "lfs_size_t diff"
            ],
            "definition": "lfs_ssize_t helper_helper_lfs_file_flushedwrite_1_1(lfs_t * const lfs, lfs_file_t * const file, const uint8_t * const data, lfs_size_t diff)\n{\n  int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, 1, file->block, file->off, data, diff);\n  if (err)\n  {\n    if (err == LFS_ERR_CORRUPT)\n    {\n      goto relocate;\n    }\n    file->flags |= LFS_F_ERRED;\n    return err;\n  }\n  break;\n  relocate:\n  err = lfs_file_relocate(lfs, file);\n\n  if (err)\n  {\n    file->flags |= LFS_F_ERRED;\n    return err;\n  }\n}\n\n",
            "calle": [
                "lfs_bd_prog",
                "lfs_file_relocate"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t * const",
                        "definition": [
                            "lfs_file_t * const file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "const uint8_t * const",
                        "definition": [
                            "const uint8_t * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t diff"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, 1, file->block, file->off, data, diff)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_lfs_file_flushedwrite_1_2",
            "header": "",
            "params": [
                "lfs_t * const lfs",
                "lfs_file_t * const file"
            ],
            "definition": "lfs_ssize_t helper_helper_lfs_file_flushedwrite_1_2(lfs_t * const lfs, lfs_file_t * const file)\n{\n  if (!(file->flags & LFS_F_INLINE))\n  {\n    if ((!(file->flags & LFS_F_WRITING)) && (file->pos > 0))\n    {\n      int err = lfs_ctz_find(lfs, 0, &file->cache, file->ctz.head, file->ctz.size, file->pos - 1, &file->block, &((lfs_off_t){0}));\n      if (err)\n      {\n        file->flags |= LFS_F_ERRED;\n        return err;\n      }\n      lfs_cache_zero(lfs, &file->cache);\n    }\n    lfs_alloc_ckpoint(lfs);\n    int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache, file->block, file->pos, &file->block, &file->off);\n    if (err)\n    {\n      file->flags |= LFS_F_ERRED;\n      return err;\n    }\n  }\n  else\n  {\n    file->block = (lfs_block_t) (-2);\n    file->off = file->pos;\n  }\n  file->flags |= LFS_F_WRITING;\n}\n\n",
            "calle": [
                "lfs_alloc_ckpoint",
                "lfs_cache_zero",
                "lfs_ctz_extend",
                "lfs_ctz_find"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "lfs_file_t * const",
                        "definition": [
                            "lfs_file_t * const file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache, file->block, file->pos, &file->block, &file->off)",
                            "int err = lfs_ctz_find(lfs, 0, &file->cache, file->ctz.head, file->ctz.size, file->pos - 1, &file->block, &((lfs_off_t){0}))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_lfs_mount__1_1",
            "header": "",
            "params": [
                "int * const err_ref",
                "lfs_stag_t * const tag_ref",
                "lfs_t * const lfs",
                "lfs_mdir_t dir"
            ],
            "definition": "void helper_helper_lfs_mount__1_1(int * const err_ref, lfs_stag_t * const tag_ref, lfs_t * const lfs, lfs_mdir_t dir)\n{\n  int err = *err_ref;\n  lfs_stag_t tag = *tag_ref;\n  lfs->root[0] = dir.pair[0];\n  lfs->root[1] = dir.pair[1];\n  lfs_superblock_t superblock;\n  tag = lfs_dir_get(lfs, &dir, ((((lfs_tag_t) 0x7ff) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) LFS_TYPE_INLINESTRUCT) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) (sizeof(superblock))), &superblock);\n  if (tag < 0)\n  {\n    err = tag;\n    goto cleanup;\n  }\n  lfs_superblock_fromle32(&superblock);\n  uint16_t major_version = 0xffff & (superblock.version >> 16);\n  uint16_t minor_version = 0xffff & (superblock.version >> 0);\n  if ((major_version != lfs_fs_disk_version_major(lfs)) || (minor_version > lfs_fs_disk_version_minor(lfs)))\n  {\n    printf(\"%s:%d:error: Invalid version v%u.%u != v%u.%u%s\\n\", \"/home/ubuntu/C2RustTranslation/subjects/littlefs/lfs.c\", 4535, major_version, minor_version, lfs_fs_disk_version_major(lfs), lfs_fs_disk_version_minor(lfs), \"\");\n    err = LFS_ERR_INVAL;\n    goto cleanup;\n  }\n  bool needssuperblock = 0;\n  if (minor_version < lfs_fs_disk_version_minor(lfs))\n  {\n    printf(\"%s:%d:debug: Found older minor version v%u.%u < v%u.%u%s\\n\", \"/home/ubuntu/C2RustTranslation/subjects/littlefs/lfs.c\", 4550, major_version, minor_version, lfs_fs_disk_version_major(lfs), lfs_fs_disk_version_minor(lfs), \"\");\n    needssuperblock = 1;\n  }\n  lfs_fs_prepsuperblock(lfs, needssuperblock);\n  if (superblock.name_max)\n  {\n    if (superblock.name_max > lfs->name_max)\n    {\n      printf(\"%s:%d:error: Unsupported name_max (%u > %u)%s\\n\", \"/home/ubuntu/C2RustTranslation/subjects/littlefs/lfs.c\", 4565, superblock.name_max, lfs->name_max, \"\");\n      err = LFS_ERR_INVAL;\n      goto cleanup;\n    }\n    lfs->name_max = superblock.name_max;\n  }\n  if (superblock.file_max)\n  {\n    if (superblock.file_max > lfs->file_max)\n    {\n      printf(\"%s:%d:error: Unsupported file_max (%u > %u)%s\\n\", \"/home/ubuntu/C2RustTranslation/subjects/littlefs/lfs.c\", 4576, superblock.file_max, lfs->file_max, \"\");\n      err = LFS_ERR_INVAL;\n      goto cleanup;\n    }\n    lfs->file_max = superblock.file_max;\n  }\n  if (superblock.attr_max)\n  {\n    if (superblock.attr_max > lfs->attr_max)\n    {\n      printf(\"%s:%d:error: Unsupported attr_max (%u > %u)%s\\n\", \"/home/ubuntu/C2RustTranslation/subjects/littlefs/lfs.c\", 4587, superblock.attr_max, lfs->attr_max, \"\");\n      err = LFS_ERR_INVAL;\n      goto cleanup;\n    }\n    lfs->attr_max = superblock.attr_max;\n    lfs->inline_max = lfs_min(lfs->inline_max, lfs->attr_max);\n  }\n  if (lfs->cfg->block_count && (superblock.block_count != lfs->cfg->block_count))\n  {\n    printf(\"%s:%d:error: Invalid block count (%u != %u)%s\\n\", \"/home/ubuntu/C2RustTranslation/subjects/littlefs/lfs.c\", 4602, superblock.block_count, lfs->cfg->block_count, \"\");\n    err = LFS_ERR_INVAL;\n    goto cleanup;\n  }\n  lfs->block_count = superblock.block_count;\n  if (superblock.block_size != lfs->cfg->block_size)\n  {\n    printf(\"%s:%d:error: Invalid block size (%u != %u)%s\\n\", \"/home/ubuntu/C2RustTranslation/subjects/littlefs/lfs.c\", 4611, superblock.block_size, lfs->cfg->block_size, \"\");\n    err = LFS_ERR_INVAL;\n    goto cleanup;\n  }\n  *err_ref = err;\n  *tag_ref = tag;\n}\n\n",
            "calle": [
                "lfs_dir_get",
                "lfs_fs_disk_version_major",
                "lfs_fs_disk_version_minor",
                "lfs_fs_prepsuperblock",
                "lfs_min",
                "lfs_superblock_fromle32",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "err_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag_ref",
                        "type": "lfs_stag_t * const",
                        "definition": [
                            "lfs_stag_t * const tag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = *err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t tag = *tag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "superblock",
                        "type": "lfs_superblock_t",
                        "definition": [
                            "lfs_superblock_t superblock"
                        ]
                    },
                    {
                        "path": null,
                        "name": "major_version",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t major_version = 0xffff & (superblock.version >> 16)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minor_version",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t minor_version = 0xffff & (superblock.version >> 0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "needssuperblock",
                        "type": "bool",
                        "definition": [
                            "bool needssuperblock = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_lfs_fs_traverse__1_1",
            "header": "",
            "params": [
                "int * const err_ref",
                "int * const err_ref",
                "int * const err_ref",
                "int * const err_ref",
                "int * const err_ref",
                "int * const err_ref",
                "int * const err_ref",
                "lfs_t * const lfs",
                "int (* const cb)(void *data, lfs_block_t block)",
                "void * const data",
                "void * const data",
                "void * const data",
                "bool includeorphans",
                "lfs_mdir_t dir",
                "uint16_t id"
            ],
            "definition": "int helper_helper_lfs_fs_traverse__1_1(int * const err_ref, int * const err_ref, int * const err_ref, int * const err_ref, int * const err_ref, int * const err_ref, int * const err_ref, lfs_t * const lfs, int (* const cb)(void *data, lfs_block_t block), void * const data, void * const data, void * const data, bool includeorphans, lfs_mdir_t dir, uint16_t id)\n{\n  int err = *err_ref;\n  int err = *err_ref;\n  int err = *err_ref;\n  int err = *err_ref;\n  int err = *err_ref;\n  int err = *err_ref;\n  int err = *err_ref;\n  struct lfs_ctz ctz;\n  lfs_stag_t tag = lfs_dir_get(lfs, &dir, ((((lfs_tag_t) 0x700) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) LFS_TYPE_STRUCT) << 20) | (((lfs_tag_t) id) << 10)) | ((lfs_tag_t) (sizeof(ctz))), &ctz);\n  if (tag < 0)\n  {\n    if (tag == LFS_ERR_NOENT)\n    {\n      continue;\n    }\n    return tag;\n  }\n  lfs_ctz_fromle32(&ctz);\n  if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT)\n  {\n    err = lfs_ctz_traverse(lfs, 0, &lfs->rcache, ctz.head, ctz.size, cb, data);\n    if (err)\n    {\n      return err;\n    }\n  }\n  else\n    if (includeorphans && (lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT))\n  {\n    for (int i = 0; i < 2; i += 1)\n    {\n      err = cb(data, (&ctz.head)[i]);\n      if (err)\n      {\n        return err;\n      }\n    }\n\n  }\n  *err_ref = err;\n  *err_ref = err;\n  *err_ref = err;\n  *err_ref = err;\n  *err_ref = err;\n  *err_ref = err;\n  *err_ref = err;\n}\n\n",
            "calle": [
                "cb",
                "lfs_ctz_fromle32",
                "lfs_ctz_traverse",
                "lfs_dir_get",
                "lfs_tag_type3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "err_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb",
                        "type": "int (* const)(void *data, lfs_block_t block)",
                        "definition": [
                            "int (* const cb)(void *data, lfs_block_t block)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "void * const",
                        "definition": [
                            "void * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "includeorphans",
                        "type": "bool",
                        "definition": [
                            "bool includeorphans"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = *err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ctz",
                        "type": "struct lfs_ctz",
                        "definition": [
                            "struct lfs_ctz ctz"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t tag = lfs_dir_get(lfs, &dir, ((((lfs_tag_t) 0x700) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0), ((((lfs_tag_t) LFS_TYPE_STRUCT) << 20) | (((lfs_tag_t) id) << 10)) | ((lfs_tag_t) (sizeof(ctz))), &ctz)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_lfs_fs_deorphan_1_1",
            "header": "",
            "params": [
                "lfs_mdir_t * const pdir_ref",
                "bool * const moreorphans_ref",
                "lfs_t * const lfs",
                "bool powerloss",
                "int pass",
                "lfs_mdir_t dir"
            ],
            "definition": "int helper_helper_lfs_fs_deorphan_1_1(lfs_mdir_t * const pdir_ref, bool * const moreorphans_ref, lfs_t * const lfs, bool powerloss, int pass, lfs_mdir_t dir)\n{\n  lfs_mdir_t pdir = *pdir_ref;\n  bool moreorphans = *moreorphans_ref;\n  int err = lfs_dir_fetch(lfs, &dir, pdir.tail);\n  if (err)\n  {\n    return err;\n  }\n  if (!pdir.split)\n  {\n    helper_helper_helper_lfs_fs_deorphan_1_1_1(&moreorphans, &err, lfs, powerloss, pass, dir, pdir);\n  }\n  pdir = dir;\n  *pdir_ref = pdir;\n  *moreorphans_ref = moreorphans;\n}\n\n",
            "calle": [
                "helper_helper_helper_lfs_fs_deorphan_1_1_1",
                "lfs_dir_fetch"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pdir_ref",
                        "type": "lfs_mdir_t * const",
                        "definition": [
                            "lfs_mdir_t * const pdir_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "moreorphans_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const moreorphans_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "powerloss",
                        "type": "bool",
                        "definition": [
                            "bool powerloss"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pass",
                        "type": "int",
                        "definition": [
                            "int pass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pdir",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t pdir = *pdir_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "moreorphans",
                        "type": "bool",
                        "definition": [
                            "bool moreorphans = *moreorphans_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = lfs_dir_fetch(lfs, &dir, pdir.tail)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_lfs_dir_traverse_2_2_1",
            "header": "",
            "params": [
                "lfs_tag_t * const tmask_ref",
                "lfs_tag_t * const ttag_ref",
                "uint16_t * const begin_ref",
                "uint16_t * const end_ref",
                "int16_t * const diff_ref",
                "unsigned int * const data_idx_ref",
                "unsigned int * const cb_idx_ref",
                "unsigned * const sp_ref",
                "const lfs_mdir_t * const dir",
                "const struct lfs_mattr * const attrs",
                "int (* const cb)(void *data, lfs_tag_t tag, const void *buffer)",
                "void * const data",
                "lfs_tag_t tag",
                "const void * const buffer",
                "void * const data",
                "const void * const buffer",
                "void * const data",
                "const void * const buffer",
                "void * const data",
                "struct lfs_dir_traverse stack[3 - 1]",
                "const void * const buffer",
                "lfs_tag_t tag",
                "lfs_off_t off",
                "lfs_tag_t ptag",
                "int attrcount",
                "lfs_tag_t tag",
                "lfs_tag_t tag",
                "struct lfs_diskoff disk"
            ],
            "definition": "void helper_helper_helper_lfs_dir_traverse_2_2_1(lfs_tag_t * const tmask_ref, lfs_tag_t * const ttag_ref, uint16_t * const begin_ref, uint16_t * const end_ref, int16_t * const diff_ref, unsigned int * const data_idx_ref, unsigned int * const cb_idx_ref, unsigned * const sp_ref, const lfs_mdir_t * const dir, const struct lfs_mattr * const attrs, int (* const cb)(void *data, lfs_tag_t tag, const void *buffer), void * const data, lfs_tag_t tag, const void * const buffer, void * const data, const void * const buffer, void * const data, const void * const buffer, void * const data, struct lfs_dir_traverse stack[3 - 1], const void * const buffer, lfs_tag_t tag, lfs_off_t off, lfs_tag_t ptag, int attrcount, lfs_tag_t tag, lfs_tag_t tag, struct lfs_diskoff disk)\n{\n  lfs_tag_t tmask = *tmask_ref;\n  lfs_tag_t ttag = *ttag_ref;\n  uint16_t begin = *begin_ref;\n  uint16_t end = *end_ref;\n  int16_t diff = *diff_ref;\n  unsigned int data_idx = *data_idx_ref;\n  unsigned int cb_idx = *cb_idx_ref;\n  unsigned sp = *sp_ref;\n  assert(sp < 3);\n  stack[sp] = (struct lfs_dir_traverse){.dir = dir, .off = off, .ptag = ptag, .attrs = attrs, .attrcount = attrcount, .tmask = tmask, .ttag = ttag, .begin = begin, .end = end, .diff = diff, .cb = cb, .data = data, .tag = tag, .buffer = buffer, .disk = disk};\n  sp += 1;\n  tmask = 0;\n  ttag = 0;\n  begin = 0;\n  end = 0;\n  diff = 0;\n  cb_idx = lfs_dir_traverse_filter;\n  data_idx = &stack[sp - 1].tag;\n  continue;\n  *tmask_ref = tmask;\n  *ttag_ref = ttag;\n  *begin_ref = begin;\n  *end_ref = end;\n  *diff_ref = diff;\n  *data_idx_ref = data_idx;\n  *cb_idx_ref = cb_idx;\n  *sp_ref = sp;\n}\n\n",
            "calle": [
                "assert",
                "lfs_dir_traverse_filter"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "tmask_ref",
                        "type": "lfs_tag_t * const",
                        "definition": [
                            "lfs_tag_t * const tmask_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ttag_ref",
                        "type": "lfs_tag_t * const",
                        "definition": [
                            "lfs_tag_t * const ttag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "begin_ref",
                        "type": "uint16_t * const",
                        "definition": [
                            "uint16_t * const begin_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end_ref",
                        "type": "uint16_t * const",
                        "definition": [
                            "uint16_t * const end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff_ref",
                        "type": "int16_t * const",
                        "definition": [
                            "int16_t * const diff_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const data_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const cb_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const sp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "const lfs_mdir_t * const",
                        "definition": [
                            "const lfs_mdir_t * const dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct lfs_mattr",
                        "type": "const struct lfs_mattr * const",
                        "definition": [
                            "const struct lfs_mattr * const attrs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb",
                        "type": "int (* const)(void *data, lfs_tag_t tag, const void *buffer)",
                        "definition": [
                            "int (* const cb)(void *data, lfs_tag_t tag, const void *buffer)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "void * const",
                        "definition": [
                            "void * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "const void * const",
                        "definition": [
                            "const void * const buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stack",
                        "type": "struct lfs_dir_traverse [3 - 1]",
                        "definition": [
                            "struct lfs_dir_traverse stack[3 - 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t off"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t ptag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attrcount",
                        "type": "int",
                        "definition": [
                            "int attrcount"
                        ]
                    },
                    {
                        "path": null,
                        "name": "disk",
                        "type": "struct lfs_diskoff",
                        "definition": [
                            "struct lfs_diskoff disk"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmask",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tmask = *tmask_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ttag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t ttag = *ttag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "begin",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t begin = *begin_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t end = *end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "diff",
                        "type": "int16_t",
                        "definition": [
                            "int16_t diff = *diff_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int data_idx = *data_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int cb_idx = *cb_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp",
                        "type": "unsigned",
                        "definition": [
                            "unsigned sp = *sp_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_lfs_dir_fetchmatch_1_1_1",
            "header": "",
            "params": [
                "lfs_stag_t * const besttag_ref",
                "lfs_off_t * const off_ref",
                "lfs_tag_t * const ptag_ref",
                "uint32_t * const crc_ref",
                "int * const err_ref",
                "lfs_t * const lfs",
                "lfs_mdir_t * const dir",
                "lfs_block_t temptail[2]",
                "uint16_t tempcount",
                "bool tempsplit",
                "lfs_stag_t tempbesttag",
                "lfs_tag_t tag"
            ],
            "definition": "lfs_stag_t helper_helper_helper_lfs_dir_fetchmatch_1_1_1(lfs_stag_t * const besttag_ref, lfs_off_t * const off_ref, lfs_tag_t * const ptag_ref, uint32_t * const crc_ref, int * const err_ref, lfs_t * const lfs, lfs_mdir_t * const dir, lfs_block_t temptail[2], uint16_t tempcount, bool tempsplit, lfs_stag_t tempbesttag, lfs_tag_t tag)\n{\n  lfs_stag_t besttag = *besttag_ref;\n  lfs_off_t off = *off_ref;\n  lfs_tag_t ptag = *ptag_ref;\n  uint32_t crc = *crc_ref;\n  int err = *err_ref;\n  uint32_t dcrc;\n  err = lfs_bd_read(lfs, 0, &lfs->rcache, lfs->cfg->block_size, dir->pair[0], off + (sizeof(tag)), &dcrc, sizeof(dcrc));\n  if (err)\n  {\n    if (err == LFS_ERR_CORRUPT)\n    {\n      break;\n    }\n    return err;\n  }\n  dcrc = lfs_fromle32(dcrc);\n  if (crc != dcrc)\n  {\n    break;\n  }\n  ptag ^= ((lfs_tag_t) (lfs_tag_chunk(tag) & 1U)) << 31;\n  lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));\n  besttag = tempbesttag;\n  dir->off = off + lfs_tag_dsize(tag);\n  dir->etag = ptag;\n  dir->count = tempcount;\n  dir->tail[0] = temptail[0];\n  dir->tail[1] = temptail[1];\n  dir->split = tempsplit;\n  crc = 0xffffffff;\n  continue;\n  *besttag_ref = besttag;\n  *off_ref = off;\n  *ptag_ref = ptag;\n  *crc_ref = crc;\n  *err_ref = err;\n}\n\n",
            "calle": [
                "lfs_bd_read",
                "lfs_crc",
                "lfs_fromle32",
                "lfs_tag_chunk",
                "lfs_tag_dsize"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "besttag_ref",
                        "type": "lfs_stag_t * const",
                        "definition": [
                            "lfs_stag_t * const besttag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off_ref",
                        "type": "lfs_off_t * const",
                        "definition": [
                            "lfs_off_t * const off_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptag_ref",
                        "type": "lfs_tag_t * const",
                        "definition": [
                            "lfs_tag_t * const ptag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc_ref",
                        "type": "uint32_t * const",
                        "definition": [
                            "uint32_t * const crc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t * const",
                        "definition": [
                            "lfs_mdir_t * const dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "temptail",
                        "type": "lfs_block_t [2]",
                        "definition": [
                            "lfs_block_t temptail[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tempcount",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t tempcount"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tempsplit",
                        "type": "bool",
                        "definition": [
                            "bool tempsplit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tempbesttag",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t tempbesttag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t tag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "besttag",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t besttag = *besttag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t off = *off_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptag",
                        "type": "lfs_tag_t",
                        "definition": [
                            "lfs_tag_t ptag = *ptag_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t crc = *crc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = *err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dcrc",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t dcrc"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_lfs_ctz_extend_1_1_1",
            "header": "",
            "params": [
                "int * const err_ref",
                "lfs_block_t * const nhead_ref",
                "lfs_t * const lfs",
                "lfs_cache_t * const pcache",
                "lfs_cache_t * const rcache",
                "lfs_block_t nblock",
                "lfs_off_t i",
                "lfs_size_t skips",
                "lfs_off_t i"
            ],
            "definition": "int helper_helper_helper_lfs_ctz_extend_1_1_1(int * const err_ref, lfs_block_t * const nhead_ref, lfs_t * const lfs, lfs_cache_t * const pcache, lfs_cache_t * const rcache, lfs_block_t nblock, lfs_off_t i, lfs_size_t skips, lfs_off_t i)\n{\n  int err = *err_ref;\n  lfs_block_t nhead = *nhead_ref;\n  nhead = lfs_tole32(nhead);\n  err = lfs_bd_prog(lfs, pcache, rcache, 1, nblock, 4 * i, &nhead, 4);\n  nhead = lfs_fromle32(nhead);\n  if (err)\n  {\n    if (err == LFS_ERR_CORRUPT)\n    {\n      goto relocate;\n    }\n    return err;\n  }\n  if (i != (skips - 1))\n  {\n    err = lfs_bd_read(lfs, 0, rcache, sizeof(nhead), nhead, 4 * i, &nhead, sizeof(nhead));\n    nhead = lfs_fromle32(nhead);\n    if (err)\n    {\n      return err;\n    }\n  }\n  *err_ref = err;\n  *nhead_ref = nhead;\n}\n\n",
            "calle": [
                "lfs_bd_prog",
                "lfs_bd_read",
                "lfs_fromle32",
                "lfs_tole32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "err_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nhead_ref",
                        "type": "lfs_block_t * const",
                        "definition": [
                            "lfs_block_t * const nhead_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pcache",
                        "type": "lfs_cache_t * const",
                        "definition": [
                            "lfs_cache_t * const pcache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rcache",
                        "type": "lfs_cache_t * const",
                        "definition": [
                            "lfs_cache_t * const rcache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "lfs_block_t",
                        "definition": [
                            "lfs_block_t nblock"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "skips",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t skips"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = *err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nhead",
                        "type": "lfs_block_t",
                        "definition": [
                            "lfs_block_t nhead = *nhead_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_lfs_ctz_extend_1_1_2",
            "header": "",
            "params": [
                "int * const err_ref",
                "lfs_t * const lfs",
                "lfs_cache_t * const pcache",
                "lfs_cache_t * const rcache",
                "lfs_block_t head",
                "lfs_block_t * const block",
                "lfs_off_t * const off",
                "lfs_block_t nblock",
                "lfs_size_t noff"
            ],
            "definition": "int helper_helper_helper_lfs_ctz_extend_1_1_2(int * const err_ref, lfs_t * const lfs, lfs_cache_t * const pcache, lfs_cache_t * const rcache, lfs_block_t head, lfs_block_t * const block, lfs_off_t * const off, lfs_block_t nblock, lfs_size_t noff)\n{\n  int err = *err_ref;\n  for (lfs_off_t i = 0; i < noff; i += 1)\n  {\n    uint8_t data;\n    err = lfs_bd_read(lfs, 0, rcache, noff - i, head, i, &data, 1);\n    if (err)\n    {\n      return err;\n    }\n    err = lfs_bd_prog(lfs, pcache, rcache, 1, nblock, i, &data, 1);\n    if (err)\n    {\n      if (err == LFS_ERR_CORRUPT)\n      {\n        goto relocate;\n      }\n      return err;\n    }\n  }\n\n  *block = nblock;\n  *off = noff;\n  return 0;\n  *err_ref = err;\n}\n\n",
            "calle": [
                "lfs_bd_prog",
                "lfs_bd_read"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "err_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pcache",
                        "type": "lfs_cache_t * const",
                        "definition": [
                            "lfs_cache_t * const pcache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rcache",
                        "type": "lfs_cache_t * const",
                        "definition": [
                            "lfs_cache_t * const rcache"
                        ]
                    },
                    {
                        "path": null,
                        "name": "head",
                        "type": "lfs_block_t",
                        "definition": [
                            "lfs_block_t head"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "lfs_block_t * const",
                        "definition": [
                            "lfs_block_t * const block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "off",
                        "type": "lfs_off_t * const",
                        "definition": [
                            "lfs_off_t * const off"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nblock",
                        "type": "lfs_block_t",
                        "definition": [
                            "lfs_block_t nblock"
                        ]
                    },
                    {
                        "path": null,
                        "name": "noff",
                        "type": "lfs_size_t",
                        "definition": [
                            "lfs_size_t noff"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = *err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "lfs_off_t",
                        "definition": [
                            "lfs_off_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t data"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_lfs_fs_deorphan_1_1_1",
            "header": "",
            "params": [
                "bool * const moreorphans_ref",
                "int * const err_ref",
                "lfs_t * const lfs",
                "bool powerloss",
                "int pass",
                "lfs_mdir_t dir",
                "lfs_mdir_t pdir"
            ],
            "definition": "int helper_helper_helper_lfs_fs_deorphan_1_1_1(bool * const moreorphans_ref, int * const err_ref, lfs_t * const lfs, bool powerloss, int pass, lfs_mdir_t dir, lfs_mdir_t pdir)\n{\n  bool moreorphans = *moreorphans_ref;\n  int err = *err_ref;\n  lfs_mdir_t parent;\n  lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);\n  if ((tag < 0) && (tag != LFS_ERR_NOENT))\n  {\n    return tag;\n  }\n  if ((pass == 0) && (tag != LFS_ERR_NOENT))\n  {\n    helper_helper_helper_helper_lfs_fs_deorphan_1_1_1_2(&moreorphans, lfs, pdir, parent, tag);\n  }\n  if (((pass == 1) && (tag == LFS_ERR_NOENT)) && powerloss)\n  {\n    helper_helper_helper_helper_lfs_fs_deorphan_1_1_1_1(&moreorphans, &err, lfs, dir, pdir);\n  }\n  *moreorphans_ref = moreorphans;\n  *err_ref = err;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_lfs_fs_deorphan_1_1_1_1",
                "helper_helper_helper_helper_lfs_fs_deorphan_1_1_1_2",
                "lfs_fs_parent"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "moreorphans_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const moreorphans_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "powerloss",
                        "type": "bool",
                        "definition": [
                            "bool powerloss"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pass",
                        "type": "int",
                        "definition": [
                            "int pass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pdir",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t pdir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "moreorphans",
                        "type": "bool",
                        "definition": [
                            "bool moreorphans = *moreorphans_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = *err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "parent",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t parent"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_lfs_fs_deorphan_1_1_1_1",
            "header": "",
            "params": [
                "bool * const moreorphans_ref",
                "int * const err_ref",
                "lfs_t * const lfs",
                "lfs_mdir_t dir",
                "lfs_mdir_t pdir"
            ],
            "definition": "int helper_helper_helper_helper_lfs_fs_deorphan_1_1_1_1(bool * const moreorphans_ref, int * const err_ref, lfs_t * const lfs, lfs_mdir_t dir, lfs_mdir_t pdir)\n{\n  bool moreorphans = *moreorphans_ref;\n  int err = *err_ref;\n  printf(\"%s:%d:debug: Fixing orphan {0x%x, 0x%x}%s\\n\", \"/home/ubuntu/C2RustTranslation/subjects/littlefs/lfs.c\", 5081, pdir.tail[0], pdir.tail[1], \"\");\n  err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);\n  if (err)\n  {\n    return err;\n  }\n  lfs_pair_tole32(dir.tail);\n  int state = lfs_dir_orphaningcommit(lfs, &pdir, (struct lfs_mattr []){{((((lfs_tag_t) (LFS_TYPE_TAIL + dir.split)) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 8), dir.tail}}, (sizeof((struct lfs_mattr []){{((((lfs_tag_t) (LFS_TYPE_TAIL + dir.split)) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 8), dir.tail}})) / (sizeof(struct lfs_mattr)));\n  lfs_pair_fromle32(dir.tail);\n  if (state < 0)\n  {\n    return state;\n  }\n  if (state == LFS_OK_ORPHANED)\n  {\n    moreorphans = 1;\n  }\n  continue;\n  *moreorphans_ref = moreorphans;\n  *err_ref = err;\n}\n\n",
            "calle": [
                "lfs_dir_getgstate",
                "lfs_dir_orphaningcommit",
                "lfs_pair_fromle32",
                "lfs_pair_tole32",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "moreorphans_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const moreorphans_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t dir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pdir",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t pdir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "moreorphans",
                        "type": "bool",
                        "definition": [
                            "bool moreorphans = *moreorphans_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = *err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "int",
                        "definition": [
                            "int state = lfs_dir_orphaningcommit(lfs, &pdir, (struct lfs_mattr []){{((((lfs_tag_t) (LFS_TYPE_TAIL + dir.split)) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 8), dir.tail}}, (sizeof((struct lfs_mattr []){{((((lfs_tag_t) (LFS_TYPE_TAIL + dir.split)) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 8), dir.tail}})) / (sizeof(struct lfs_mattr)))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_lfs_fs_deorphan_1_1_1_2",
            "header": "",
            "params": [
                "bool * const moreorphans_ref",
                "lfs_t * const lfs",
                "lfs_mdir_t pdir",
                "lfs_mdir_t parent",
                "lfs_stag_t tag"
            ],
            "definition": "int helper_helper_helper_helper_lfs_fs_deorphan_1_1_1_2(bool * const moreorphans_ref, lfs_t * const lfs, lfs_mdir_t pdir, lfs_mdir_t parent, lfs_stag_t tag)\n{\n  bool moreorphans = *moreorphans_ref;\n  lfs_block_t pair[2];\n  lfs_stag_t state = lfs_dir_get(lfs, &parent, ((((lfs_tag_t) 0x7ff) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0), tag, pair);\n  if (state < 0)\n  {\n    return state;\n  }\n  lfs_pair_fromle32(pair);\n  if (!lfs_pair_issync(pair, pdir.tail))\n  {\n    printf(\"%s:%d:debug: Fixing half-orphan {0x%x, 0x%x} -> {0x%x, 0x%x}%s\\n\", \"/home/ubuntu/C2RustTranslation/subjects/littlefs/lfs.c\", 5038, pdir.tail[0], pdir.tail[1], pair[0], pair[1], \"\");\n    uint16_t moveid = 0x3ff;\n    if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair))\n    {\n      moveid = lfs_tag_id(lfs->gstate.tag);\n      printf(\"%s:%d:debug: Fixing move while fixing orphans {0x%x, 0x%x} 0x%x\\n%s\\n\", \"/home/ubuntu/C2RustTranslation/subjects/littlefs/lfs.c\", 5049, pdir.pair[0], pdir.pair[1], moveid, \"\");\n      lfs_fs_prepmove(lfs, 0x3ff, 0);\n    }\n    lfs_pair_tole32(pair);\n    state = lfs_dir_orphaningcommit(lfs, &pdir, (struct lfs_mattr []){{(moveid != 0x3ff) ? (((((lfs_tag_t) LFS_TYPE_DELETE) << 20) | (((lfs_tag_t) moveid) << 10)) | ((lfs_tag_t) 0)) : (((((lfs_tag_t) LFS_FROM_NOOP) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0)), 0}, {((((lfs_tag_t) LFS_TYPE_SOFTTAIL) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 8), pair}}, (sizeof((struct lfs_mattr []){{(moveid != 0x3ff) ? (((((lfs_tag_t) LFS_TYPE_DELETE) << 20) | (((lfs_tag_t) moveid) << 10)) | ((lfs_tag_t) 0)) : (((((lfs_tag_t) LFS_FROM_NOOP) << 20) | (((lfs_tag_t) 0) << 10)) | ((lfs_tag_t) 0)), 0}, {((((lfs_tag_t) LFS_TYPE_SOFTTAIL) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 8), pair}})) / (sizeof(struct lfs_mattr)));\n    lfs_pair_fromle32(pair);\n    if (state < 0)\n    {\n      return state;\n    }\n    if (state == LFS_OK_ORPHANED)\n    {\n      moreorphans = 1;\n    }\n    continue;\n  }\n  *moreorphans_ref = moreorphans;\n}\n\n",
            "calle": [
                "lfs_dir_get",
                "lfs_dir_orphaningcommit",
                "lfs_fs_prepmove",
                "lfs_gstate_hasmovehere",
                "lfs_pair_fromle32",
                "lfs_pair_issync",
                "lfs_pair_tole32",
                "lfs_tag_id",
                "printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "moreorphans_ref",
                        "type": "bool * const",
                        "definition": [
                            "bool * const moreorphans_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lfs",
                        "type": "lfs_t * const",
                        "definition": [
                            "lfs_t * const lfs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pdir",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t pdir"
                        ]
                    },
                    {
                        "path": null,
                        "name": "parent",
                        "type": "lfs_mdir_t",
                        "definition": [
                            "lfs_mdir_t parent"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t tag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "moreorphans",
                        "type": "bool",
                        "definition": [
                            "bool moreorphans = *moreorphans_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pair",
                        "type": "lfs_block_t [2]",
                        "definition": [
                            "lfs_block_t pair[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "lfs_stag_t",
                        "definition": [
                            "lfs_stag_t state = lfs_dir_get(lfs, &parent, ((((lfs_tag_t) 0x7ff) << 20) | (((lfs_tag_t) 0x3ff) << 10)) | ((lfs_tag_t) 0), tag, pair)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "moveid",
                        "type": "uint16_t",
                        "definition": [
                            "uint16_t moveid = 0x3ff"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lfs_crc",
            "header": "uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size)",
            "params": [
                "uint32_t crc",
                "const void *buffer",
                "size_t size"
            ],
            "definition": "uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size)\n{\n  static const uint32_t rtable[16] = {0x00000000, 0x1db71064, 0x3b6e20c8, 0x26d930ac, 0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c, 0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c, 0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c};\n  const uint8_t *data = buffer;\n  for (size_t i = 0; i < size; i += 1)\n  {\n    crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];\n    crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];\n  }\n\n  return crc;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "crc",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t crc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "const void *",
                        "definition": [
                            "const void *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rtable",
                        "type": "const uint32_t [16]",
                        "definition": [
                            "static const uint32_t rtable[16] = {0x00000000, 0x1db71064, 0x3b6e20c8, 0x26d930ac, 0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c, 0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c, 0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *data = buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        }
    ],
    "typedefs": [
        "typedef uint32_t lfs_size_t",
        "typedef uint32_t lfs_off_t",
        "typedef int32_t lfs_ssize_t",
        "typedef int32_t lfs_soff_t",
        "typedef uint32_t lfs_block_t",
        "typedef uint32_t lfs_tag_t",
        "typedef int32_t lfs_stag_t"
    ]
}