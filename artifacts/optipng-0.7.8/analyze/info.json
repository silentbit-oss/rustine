{
    "special_type": [
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef voidpf (*alloc_func)(voidpf opaque, uInt items, uInt size)",
            "name": "alloc_func",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "voidpf",
                        "definition": [
                            "voidpf opaque"
                        ]
                    },
                    {
                        "path": null,
                        "name": "items",
                        "type": "uInt",
                        "definition": [
                            "uInt items"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "uInt",
                        "definition": [
                            "uInt size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef void (*free_func)(voidpf opaque, voidpf address)",
            "name": "free_func",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "voidpf",
                        "definition": [
                            "voidpf opaque"
                        ]
                    },
                    {
                        "path": null,
                        "name": "address",
                        "type": "voidpf",
                        "definition": [
                            "voidpf address"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct z_stream_s\n{\n  Bytef *next_in;\n  uInt avail_in;\n  uLong total_in;\n  Bytef *next_out;\n  uInt avail_out;\n  uLong total_out;\n  char *msg;\n  struct internal_state *state;\n  alloc_func zalloc;\n  free_func zfree;\n  voidpf opaque;\n  int data_type;\n  uLong adler;\n  uLong reserved;\n} z_stream",
            "name": "z_stream",
            "names": [
                "typedef z_stream *z_streamp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "next_in",
                        "type": "Bytef *",
                        "definition": [
                            "Bytef *next_in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avail_in",
                        "type": "uInt",
                        "definition": [
                            "uInt avail_in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total_in",
                        "type": "uLong",
                        "definition": [
                            "uLong total_in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_out",
                        "type": "Bytef *",
                        "definition": [
                            "Bytef *next_out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avail_out",
                        "type": "uInt",
                        "definition": [
                            "uInt avail_out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total_out",
                        "type": "uLong",
                        "definition": [
                            "uLong total_out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg",
                        "type": "char *",
                        "definition": [
                            "char *msg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct internal_state",
                        "type": "struct internal_state *",
                        "definition": [
                            "struct internal_state *state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zalloc",
                        "type": "alloc_func",
                        "definition": [
                            "alloc_func zalloc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zfree",
                        "type": "free_func",
                        "definition": [
                            "free_func zfree"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "voidpf",
                        "definition": [
                            "voidpf opaque"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_type",
                        "type": "int",
                        "definition": [
                            "int data_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "adler",
                        "type": "uLong",
                        "definition": [
                            "uLong adler"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reserved",
                        "type": "uLong",
                        "definition": [
                            "uLong reserved"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef z_stream *z_streamp",
            "name": "z_streamp",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "typedef struct z_stream_s\n{\n  const Bytef *next_in;\n  uInt avail_in;\n  uLong total_in;\n  Bytef *next_out;\n  uInt avail_out;\n  uLong total_out;\n  const char *msg;\n  struct internal_state *state;\n  alloc_func zalloc;\n  free_func zfree;\n  voidpf opaque;\n  int data_type;\n  uLong adler;\n  uLong reserved;\n} z_stream",
                        "name": "z_stream",
                        "names": [
                            "typedef z_stream *z_streamp"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "next_in",
                                    "type": "const Bytef *",
                                    "definition": [
                                        "const Bytef *next_in"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "avail_in",
                                    "type": "uInt",
                                    "definition": [
                                        "uInt avail_in"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "total_in",
                                    "type": "uLong",
                                    "definition": [
                                        "uLong total_in"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "next_out",
                                    "type": "Bytef *",
                                    "definition": [
                                        "Bytef *next_out"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "avail_out",
                                    "type": "uInt",
                                    "definition": [
                                        "uInt avail_out"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "total_out",
                                    "type": "uLong",
                                    "definition": [
                                        "uLong total_out"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "msg",
                                    "type": "const char *",
                                    "definition": [
                                        "const char *msg"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "struct internal_state",
                                    "type": "struct internal_state *",
                                    "definition": [
                                        "struct internal_state *state"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "zalloc",
                                    "type": "alloc_func",
                                    "definition": [
                                        "alloc_func zalloc"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "zfree",
                                    "type": "free_func",
                                    "definition": [
                                        "free_func zfree"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "opaque",
                                    "type": "voidpf",
                                    "definition": [
                                        "voidpf opaque"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "data_type",
                                    "type": "int",
                                    "definition": [
                                        "int data_type"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "adler",
                                    "type": "uLong",
                                    "definition": [
                                        "uLong adler"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "reserved",
                                    "type": "uLong",
                                    "definition": [
                                        "uLong reserved"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct gz_header_s\n{\n  int text;\n  uLong time;\n  int xflags;\n  int os;\n  Bytef *extra;\n  uInt extra_len;\n  uInt extra_max;\n  Bytef *name;\n  uInt name_max;\n  Bytef *comment;\n  uInt comm_max;\n  int hcrc;\n  int done;\n} gz_header",
            "name": "gz_header",
            "names": [
                "typedef gz_header *gz_headerp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "text",
                        "type": "int",
                        "definition": [
                            "int text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "time",
                        "type": "uLong",
                        "definition": [
                            "uLong time"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xflags",
                        "type": "int",
                        "definition": [
                            "int xflags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "os",
                        "type": "int",
                        "definition": [
                            "int os"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extra",
                        "type": "Bytef *",
                        "definition": [
                            "Bytef *extra"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extra_len",
                        "type": "uInt",
                        "definition": [
                            "uInt extra_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extra_max",
                        "type": "uInt",
                        "definition": [
                            "uInt extra_max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "Bytef *",
                        "definition": [
                            "Bytef *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name_max",
                        "type": "uInt",
                        "definition": [
                            "uInt name_max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "comment",
                        "type": "Bytef *",
                        "definition": [
                            "Bytef *comment"
                        ]
                    },
                    {
                        "path": null,
                        "name": "comm_max",
                        "type": "uInt",
                        "definition": [
                            "uInt comm_max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hcrc",
                        "type": "int",
                        "definition": [
                            "int hcrc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "done",
                        "type": "int",
                        "definition": [
                            "int done"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef gz_header *gz_headerp",
            "name": "gz_headerp",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "typedef struct gz_header_s\n{\n  int text;\n  uLong time;\n  int xflags;\n  int os;\n  Bytef *extra;\n  uInt extra_len;\n  uInt extra_max;\n  Bytef *name;\n  uInt name_max;\n  Bytef *comment;\n  uInt comm_max;\n  int hcrc;\n  int done;\n} gz_header",
                        "name": "gz_header",
                        "names": [
                            "typedef gz_header *gz_headerp"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "text",
                                    "type": "int",
                                    "definition": [
                                        "int text"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "time",
                                    "type": "uLong",
                                    "definition": [
                                        "uLong time"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "xflags",
                                    "type": "int",
                                    "definition": [
                                        "int xflags"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "os",
                                    "type": "int",
                                    "definition": [
                                        "int os"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "extra",
                                    "type": "Bytef *",
                                    "definition": [
                                        "Bytef *extra"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "extra_len",
                                    "type": "uInt",
                                    "definition": [
                                        "uInt extra_len"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "extra_max",
                                    "type": "uInt",
                                    "definition": [
                                        "uInt extra_max"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "name",
                                    "type": "Bytef *",
                                    "definition": [
                                        "Bytef *name"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "name_max",
                                    "type": "uInt",
                                    "definition": [
                                        "uInt name_max"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "comment",
                                    "type": "Bytef *",
                                    "definition": [
                                        "Bytef *comment"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "comm_max",
                                    "type": "uInt",
                                    "definition": [
                                        "uInt comm_max"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "hcrc",
                                    "type": "int",
                                    "definition": [
                                        "int hcrc"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "done",
                                    "type": "int",
                                    "definition": [
                                        "int done"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef unsigned (*in_func)(void *, unsigned char **)",
            "name": "in_func",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef int (*out_func)(void *, unsigned char *, unsigned)",
            "name": "out_func",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct gzFile_s\n{\n  unsigned have;\n  unsigned char *next;\n  off_t pos;\n}",
            "name": "gzFile_s",
            "names": [
                "typedef struct gzFile_s *gzFile"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "off_t",
                        "definition": [
                            "off_t pos"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct gzFile_s *gzFile",
            "name": "gzFile",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "struct gzFile_s\n{\n  unsigned have;\n  unsigned char *next;\n  off_t pos;\n}",
                        "name": "gzFile_s",
                        "names": [
                            "typedef struct gzFile_s *gzFile"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "have",
                                    "type": "unsigned",
                                    "definition": [
                                        "unsigned have"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "next",
                                    "type": "unsigned char *",
                                    "definition": [
                                        "unsigned char *next"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "pos",
                                    "type": "off_t",
                                    "definition": [
                                        "off_t pos"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct ct_data_s\n{\n  union \n  {\n    ush freq;\n    ush code;\n  } fc;\n  union \n  {\n    ush dad;\n    ush len;\n  } dl;\n} ct_data",
            "name": "ct_data",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fc",
                        "type": "union \n{\n  ush freq;\n  ush code;\n}",
                        "definition": [
                            "union \n{\n  ush freq;\n  ush code;\n} fc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dl",
                        "type": "union \n{\n  ush dad;\n  ush len;\n}",
                        "definition": [
                            "union \n{\n  ush dad;\n  ush len;\n} dl"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct static_tree_desc_s static_tree_desc",
            "name": "static_tree_desc",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "",
                        "name": "static_tree_desc_s",
                        "names": [
                            "typedef struct static_tree_desc_s static_tree_desc"
                        ]
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct tree_desc_s\n{\n  ct_data *dyn_tree;\n  int max_code;\n  const static_tree_desc *stat_desc;\n} tree_desc",
            "name": "tree_desc",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dyn_tree",
                        "type": "ct_data *",
                        "definition": [
                            "ct_data *dyn_tree"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_code",
                        "type": "int",
                        "definition": [
                            "int max_code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stat_desc",
                        "type": "const static_tree_desc *",
                        "definition": [
                            "const static_tree_desc *stat_desc"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct internal_state\n{\n  z_streamp strm;\n  int status;\n  Bytef *pending_buf;\n  ulg pending_buf_size;\n  Bytef *pending_out;\n  ulg pending;\n  int wrap;\n  gz_headerp gzhead;\n  ulg gzindex;\n  Byte method;\n  int last_flush;\n  uInt w_size;\n  uInt w_bits;\n  uInt w_mask;\n  Bytef *window;\n  ulg window_size;\n  Posf *prev;\n  Posf *head;\n  uInt ins_h;\n  uInt hash_size;\n  uInt hash_bits;\n  uInt hash_mask;\n  uInt hash_shift;\n  long block_start;\n  uInt match_length;\n  IPos prev_match;\n  int match_available;\n  uInt strstart;\n  uInt match_start;\n  uInt lookahead;\n  uInt prev_length;\n  uInt max_chain_length;\n  uInt max_lazy_match;\n  int level;\n  int strategy;\n  uInt good_match;\n  int nice_match;\n  struct ct_data_s dyn_ltree[(2 * ((256 + 1) + 29)) + 1];\n  struct ct_data_s dyn_dtree[(2 * 30) + 1];\n  struct ct_data_s bl_tree[(2 * 19) + 1];\n  struct tree_desc_s l_desc;\n  struct tree_desc_s d_desc;\n  struct tree_desc_s bl_desc;\n  ush bl_count[15 + 1];\n  int heap[(2 * ((256 + 1) + 29)) + 1];\n  int heap_len;\n  int heap_max;\n  uch depth[(2 * ((256 + 1) + 29)) + 1];\n  uchf *sym_buf;\n  uInt lit_bufsize;\n  uInt sym_next;\n  uInt sym_end;\n  ulg opt_len;\n  ulg static_len;\n  uInt matches;\n  uInt insert;\n  ush bi_buf;\n  int bi_valid;\n  ulg high_water;\n} deflate_state",
            "name": "deflate_state",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "status",
                        "type": "int",
                        "definition": [
                            "int status"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pending_buf",
                        "type": "Bytef *",
                        "definition": [
                            "Bytef *pending_buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pending_buf_size",
                        "type": "ulg",
                        "definition": [
                            "ulg pending_buf_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pending_out",
                        "type": "Bytef *",
                        "definition": [
                            "Bytef *pending_out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pending",
                        "type": "ulg",
                        "definition": [
                            "ulg pending"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wrap",
                        "type": "int",
                        "definition": [
                            "int wrap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gzhead",
                        "type": "gz_headerp",
                        "definition": [
                            "gz_headerp gzhead"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gzindex",
                        "type": "ulg",
                        "definition": [
                            "ulg gzindex"
                        ]
                    },
                    {
                        "path": null,
                        "name": "method",
                        "type": "Byte",
                        "definition": [
                            "Byte method"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last_flush",
                        "type": "int",
                        "definition": [
                            "int last_flush"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w_size",
                        "type": "uInt",
                        "definition": [
                            "uInt w_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w_bits",
                        "type": "uInt",
                        "definition": [
                            "uInt w_bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w_mask",
                        "type": "uInt",
                        "definition": [
                            "uInt w_mask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "window",
                        "type": "Bytef *",
                        "definition": [
                            "Bytef *window"
                        ]
                    },
                    {
                        "path": null,
                        "name": "window_size",
                        "type": "ulg",
                        "definition": [
                            "ulg window_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev",
                        "type": "Posf *",
                        "definition": [
                            "Posf *prev"
                        ]
                    },
                    {
                        "path": null,
                        "name": "head",
                        "type": "Posf *",
                        "definition": [
                            "Posf *head"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ins_h",
                        "type": "uInt",
                        "definition": [
                            "uInt ins_h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hash_size",
                        "type": "uInt",
                        "definition": [
                            "uInt hash_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hash_bits",
                        "type": "uInt",
                        "definition": [
                            "uInt hash_bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hash_mask",
                        "type": "uInt",
                        "definition": [
                            "uInt hash_mask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hash_shift",
                        "type": "uInt",
                        "definition": [
                            "uInt hash_shift"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block_start",
                        "type": "long",
                        "definition": [
                            "long block_start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "match_length",
                        "type": "uInt",
                        "definition": [
                            "uInt match_length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_match",
                        "type": "IPos",
                        "definition": [
                            "IPos prev_match"
                        ]
                    },
                    {
                        "path": null,
                        "name": "match_available",
                        "type": "int",
                        "definition": [
                            "int match_available"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strstart",
                        "type": "uInt",
                        "definition": [
                            "uInt strstart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "match_start",
                        "type": "uInt",
                        "definition": [
                            "uInt match_start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lookahead",
                        "type": "uInt",
                        "definition": [
                            "uInt lookahead"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_length",
                        "type": "uInt",
                        "definition": [
                            "uInt prev_length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_chain_length",
                        "type": "uInt",
                        "definition": [
                            "uInt max_chain_length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_lazy_match",
                        "type": "uInt",
                        "definition": [
                            "uInt max_lazy_match"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "int",
                        "definition": [
                            "int level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strategy",
                        "type": "int",
                        "definition": [
                            "int strategy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "good_match",
                        "type": "uInt",
                        "definition": [
                            "uInt good_match"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nice_match",
                        "type": "int",
                        "definition": [
                            "int nice_match"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dyn_ltree",
                        "type": "struct ct_data_s [(2 * ((256 + 1) + 29)) + 1]",
                        "definition": [
                            "struct ct_data_s dyn_ltree[(2 * ((256 + 1) + 29)) + 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dyn_dtree",
                        "type": "struct ct_data_s [(2 * 30) + 1]",
                        "definition": [
                            "struct ct_data_s dyn_dtree[(2 * 30) + 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bl_tree",
                        "type": "struct ct_data_s [(2 * 19) + 1]",
                        "definition": [
                            "struct ct_data_s bl_tree[(2 * 19) + 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "l_desc",
                        "type": "struct tree_desc_s",
                        "definition": [
                            "struct tree_desc_s l_desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_desc",
                        "type": "struct tree_desc_s",
                        "definition": [
                            "struct tree_desc_s d_desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bl_desc",
                        "type": "struct tree_desc_s",
                        "definition": [
                            "struct tree_desc_s bl_desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bl_count",
                        "type": "ush [15 + 1]",
                        "definition": [
                            "ush bl_count[15 + 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "heap",
                        "type": "int [(2 * ((256 + 1) + 29)) + 1]",
                        "definition": [
                            "int heap[(2 * ((256 + 1) + 29)) + 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "heap_len",
                        "type": "int",
                        "definition": [
                            "int heap_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "heap_max",
                        "type": "int",
                        "definition": [
                            "int heap_max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "depth",
                        "type": "uch [(2 * ((256 + 1) + 29)) + 1]",
                        "definition": [
                            "uch depth[(2 * ((256 + 1) + 29)) + 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sym_buf",
                        "type": "uchf *",
                        "definition": [
                            "uchf *sym_buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lit_bufsize",
                        "type": "uInt",
                        "definition": [
                            "uInt lit_bufsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sym_next",
                        "type": "uInt",
                        "definition": [
                            "uInt sym_next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sym_end",
                        "type": "uInt",
                        "definition": [
                            "uInt sym_end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_len",
                        "type": "ulg",
                        "definition": [
                            "ulg opt_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "static_len",
                        "type": "ulg",
                        "definition": [
                            "ulg static_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "matches",
                        "type": "uInt",
                        "definition": [
                            "uInt matches"
                        ]
                    },
                    {
                        "path": null,
                        "name": "insert",
                        "type": "uInt",
                        "definition": [
                            "uInt insert"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bi_buf",
                        "type": "ush",
                        "definition": [
                            "ush bi_buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bi_valid",
                        "type": "int",
                        "definition": [
                            "int bi_valid"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high_water",
                        "type": "ulg",
                        "definition": [
                            "ulg high_water"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "typedef enum \n{\n  need_more,\n  block_done,\n  finish_started,\n  finish_done\n} block_state",
            "name": "block_state",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef block_state (*compress_func)(deflate_state *s, int flush)",
            "name": "compress_func",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flush",
                        "type": "int",
                        "definition": [
                            "int flush"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct config_s\n{\n  ush good_length;\n  ush max_lazy;\n  ush nice_length;\n  ush max_chain;\n  compress_func func;\n} config",
            "name": "config",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "good_length",
                        "type": "ush",
                        "definition": [
                            "ush good_length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_lazy",
                        "type": "ush",
                        "definition": [
                            "ush max_lazy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nice_length",
                        "type": "ush",
                        "definition": [
                            "ush nice_length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_chain",
                        "type": "ush",
                        "definition": [
                            "ush max_chain"
                        ]
                    },
                    {
                        "path": null,
                        "name": "func",
                        "type": "compress_func",
                        "definition": [
                            "compress_func func"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct \n{\n  unsigned char op;\n  unsigned char bits;\n  unsigned short val;\n} code",
            "name": "code",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "op",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char op"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "unsigned short",
                        "definition": [
                            "unsigned short val"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "typedef enum \n{\n  CODES,\n  LENS,\n  DISTS\n} codetype",
            "name": "codetype",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "typedef enum \n{\n  HEAD = 16180,\n  FLAGS,\n  TIME,\n  OS,\n  EXLEN,\n  EXTRA,\n  NAME,\n  COMMENT,\n  HCRC,\n  DICTID,\n  DICT,\n  TYPE,\n  TYPEDO,\n  STORED,\n  COPY_,\n  COPY,\n  TABLE,\n  LENLENS,\n  CODELENS,\n  LEN_,\n  LEN,\n  LENEXT,\n  DIST,\n  DISTEXT,\n  MATCH,\n  LIT,\n  CHECK,\n  LENGTH,\n  DONE,\n  BAD,\n  MEM,\n  SYNC\n} inflate_mode",
            "name": "inflate_mode",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct inflate_state\n{\n  z_streamp strm;\n  inflate_mode mode;\n  int last;\n  int wrap;\n  int havedict;\n  int flags;\n  unsigned dmax;\n  unsigned long check;\n  unsigned long total;\n  gz_headerp head;\n  unsigned wbits;\n  unsigned wsize;\n  unsigned whave;\n  unsigned wnext;\n  unsigned char *window;\n  unsigned long hold;\n  unsigned bits;\n  unsigned length;\n  unsigned offset;\n  unsigned extra;\n  const code *lencode;\n  const code *distcode;\n  unsigned lenbits;\n  unsigned distbits;\n  unsigned ncode;\n  unsigned nlen;\n  unsigned ndist;\n  unsigned have;\n  code *next;\n  unsigned short lens[320];\n  unsigned short work[288];\n  code codes[852 + 592];\n  int sane;\n  int back;\n  unsigned was;\n}",
            "name": "inflate_state",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mode",
                        "type": "inflate_mode",
                        "definition": [
                            "inflate_mode mode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last",
                        "type": "int",
                        "definition": [
                            "int last"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wrap",
                        "type": "int",
                        "definition": [
                            "int wrap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "havedict",
                        "type": "int",
                        "definition": [
                            "int havedict"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmax",
                        "type": "unsigned",
                        "definition": [
                            "unsigned dmax"
                        ]
                    },
                    {
                        "path": null,
                        "name": "check",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long check"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long total"
                        ]
                    },
                    {
                        "path": null,
                        "name": "head",
                        "type": "gz_headerp",
                        "definition": [
                            "gz_headerp head"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wbits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned wbits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsize",
                        "type": "unsigned",
                        "definition": [
                            "unsigned wsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "whave",
                        "type": "unsigned",
                        "definition": [
                            "unsigned whave"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wnext",
                        "type": "unsigned",
                        "definition": [
                            "unsigned wnext"
                        ]
                    },
                    {
                        "path": null,
                        "name": "window",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *window"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "unsigned",
                        "definition": [
                            "unsigned length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offset",
                        "type": "unsigned",
                        "definition": [
                            "unsigned offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extra",
                        "type": "unsigned",
                        "definition": [
                            "unsigned extra"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lencode",
                        "type": "const code *",
                        "definition": [
                            "const code *lencode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "distcode",
                        "type": "const code *",
                        "definition": [
                            "const code *distcode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lenbits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned lenbits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "distbits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned distbits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ncode",
                        "type": "unsigned",
                        "definition": [
                            "unsigned ncode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nlen",
                        "type": "unsigned",
                        "definition": [
                            "unsigned nlen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ndist",
                        "type": "unsigned",
                        "definition": [
                            "unsigned ndist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "code *",
                        "definition": [
                            "code *next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lens",
                        "type": "unsigned short [320]",
                        "definition": [
                            "unsigned short lens[320]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "work",
                        "type": "unsigned short [288]",
                        "definition": [
                            "unsigned short work[288]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "codes",
                        "type": "code [852 + 592]",
                        "definition": [
                            "code codes[852 + 592]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sane",
                        "type": "int",
                        "definition": [
                            "int sane"
                        ]
                    },
                    {
                        "path": null,
                        "name": "back",
                        "type": "int",
                        "definition": [
                            "int back"
                        ]
                    },
                    {
                        "path": null,
                        "name": "was",
                        "type": "unsigned",
                        "definition": [
                            "unsigned was"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct static_tree_desc_s\n{\n  const ct_data *static_tree;\n  const intf *extra_bits;\n  int extra_base;\n  int elems;\n  int max_length;\n}",
            "name": "static_tree_desc_s",
            "names": [
                "typedef struct static_tree_desc_s static_tree_desc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "static_tree",
                        "type": "const ct_data *",
                        "definition": [
                            "const ct_data *static_tree"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extra_bits",
                        "type": "const intf *",
                        "definition": [
                            "const intf *extra_bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extra_base",
                        "type": "int",
                        "definition": [
                            "int extra_base"
                        ]
                    },
                    {
                        "path": null,
                        "name": "elems",
                        "type": "int",
                        "definition": [
                            "int elems"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_length",
                        "type": "int",
                        "definition": [
                            "int max_length"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct \n{\n  struct gzFile_s x;\n  int mode;\n  int fd;\n  char *path;\n  unsigned size;\n  unsigned want;\n  unsigned char *in;\n  unsigned char *out;\n  int direct;\n  int how;\n  off_t start;\n  int eof;\n  int past;\n  int level;\n  int strategy;\n  int reset;\n  off_t skip;\n  int seek;\n  int err;\n  char *msg;\n  z_stream strm;\n} gz_state",
            "name": "gz_state",
            "names": [
                "typedef gz_state *gz_statep"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "x",
                        "type": "struct gzFile_s",
                        "definition": [
                            "struct gzFile_s x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mode",
                        "type": "int",
                        "definition": [
                            "int mode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fd",
                        "type": "int",
                        "definition": [
                            "int fd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "char *",
                        "definition": [
                            "char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "unsigned",
                        "definition": [
                            "unsigned size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "want",
                        "type": "unsigned",
                        "definition": [
                            "unsigned want"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "direct",
                        "type": "int",
                        "definition": [
                            "int direct"
                        ]
                    },
                    {
                        "path": null,
                        "name": "how",
                        "type": "int",
                        "definition": [
                            "int how"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "off_t",
                        "definition": [
                            "off_t start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "eof",
                        "type": "int",
                        "definition": [
                            "int eof"
                        ]
                    },
                    {
                        "path": null,
                        "name": "past",
                        "type": "int",
                        "definition": [
                            "int past"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "int",
                        "definition": [
                            "int level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strategy",
                        "type": "int",
                        "definition": [
                            "int strategy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reset",
                        "type": "int",
                        "definition": [
                            "int reset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "skip",
                        "type": "off_t",
                        "definition": [
                            "off_t skip"
                        ]
                    },
                    {
                        "path": null,
                        "name": "seek",
                        "type": "int",
                        "definition": [
                            "int seek"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg",
                        "type": "char *",
                        "definition": [
                            "char *msg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_stream",
                        "definition": [
                            "z_stream strm"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef gz_state *gz_statep",
            "name": "gz_statep",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "typedef struct \n{\n  struct gzFile_s x;\n  int mode;\n  int fd;\n  char *path;\n  unsigned size;\n  unsigned want;\n  unsigned char *in;\n  unsigned char *out;\n  int direct;\n  int how;\n  off_t start;\n  int eof;\n  int past;\n  int level;\n  int strategy;\n  int reset;\n  off_t skip;\n  int seek;\n  int err;\n  char *msg;\n  z_stream strm;\n} gz_state",
                        "name": "gz_state",
                        "names": [
                            "typedef gz_state *gz_statep"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "x",
                                    "type": "struct gzFile_s",
                                    "definition": [
                                        "struct gzFile_s x"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "mode",
                                    "type": "int",
                                    "definition": [
                                        "int mode"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "fd",
                                    "type": "int",
                                    "definition": [
                                        "int fd"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "path",
                                    "type": "char *",
                                    "definition": [
                                        "char *path"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "size",
                                    "type": "unsigned",
                                    "definition": [
                                        "unsigned size"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "want",
                                    "type": "unsigned",
                                    "definition": [
                                        "unsigned want"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "in",
                                    "type": "unsigned char *",
                                    "definition": [
                                        "unsigned char *in"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "out",
                                    "type": "unsigned char *",
                                    "definition": [
                                        "unsigned char *out"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "direct",
                                    "type": "int",
                                    "definition": [
                                        "int direct"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "how",
                                    "type": "int",
                                    "definition": [
                                        "int how"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "start",
                                    "type": "off_t",
                                    "definition": [
                                        "off_t start"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "eof",
                                    "type": "int",
                                    "definition": [
                                        "int eof"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "past",
                                    "type": "int",
                                    "definition": [
                                        "int past"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "level",
                                    "type": "int",
                                    "definition": [
                                        "int level"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "strategy",
                                    "type": "int",
                                    "definition": [
                                        "int strategy"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "reset",
                                    "type": "int",
                                    "definition": [
                                        "int reset"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "skip",
                                    "type": "off_t",
                                    "definition": [
                                        "off_t skip"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "seek",
                                    "type": "int",
                                    "definition": [
                                        "int seek"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "err",
                                    "type": "int",
                                    "definition": [
                                        "int err"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "msg",
                                    "type": "char *",
                                    "definition": [
                                        "char *msg"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "strm",
                                    "type": "z_stream",
                                    "definition": [
                                        "z_stream strm"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct png_incomplete png_double",
            "name": "png_double",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "",
                        "name": "png_incomplete",
                        "names": [
                            "typedef struct png_incomplete png_double"
                        ]
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct png_struct_def\n{\n  png_error_ptr error_fn;\n  png_error_ptr warning_fn;\n  png_voidp error_ptr;\n  png_rw_ptr write_data_fn;\n  png_rw_ptr read_data_fn;\n  png_voidp io_ptr;\n  png_uint_32 mode;\n  png_uint_32 flags;\n  png_uint_32 transformations;\n  png_uint_32 zowner;\n  z_stream zstream;\n  png_compression_bufferp zbuffer_list;\n  uInt zbuffer_size;\n  int zlib_level;\n  int zlib_method;\n  int zlib_window_bits;\n  int zlib_mem_level;\n  int zlib_strategy;\n  int zlib_set_level;\n  int zlib_set_method;\n  int zlib_set_window_bits;\n  int zlib_set_mem_level;\n  int zlib_set_strategy;\n  png_uint_32 width;\n  png_uint_32 height;\n  png_uint_32 num_rows;\n  png_uint_32 usr_width;\n  size_t rowbytes;\n  png_uint_32 iwidth;\n  png_uint_32 row_number;\n  png_uint_32 chunk_name;\n  png_bytep prev_row;\n  png_bytep row_buf;\n  png_bytep try_row;\n  png_bytep tst_row;\n  size_t info_rowbytes;\n  png_uint_32 idat_size;\n  png_uint_32 crc;\n  png_colorp palette;\n  png_uint_16 num_palette;\n  int num_palette_max;\n  png_uint_16 num_trans;\n  png_byte compression;\n  png_byte filter;\n  png_byte interlaced;\n  png_byte pass;\n  png_byte do_filter;\n  png_byte color_type;\n  png_byte bit_depth;\n  png_byte usr_bit_depth;\n  png_byte pixel_depth;\n  png_byte channels;\n  png_byte usr_channels;\n  png_byte sig_bytes;\n  png_byte maximum_pixel_depth;\n  png_byte transformed_pixel_depth;\n  png_byte zstream_start;\n  png_byte background_gamma_type;\n  png_fixed_point background_gamma;\n  png_color_16 background;\n  png_flush_ptr output_flush_fn;\n  png_uint_32 flush_dist;\n  png_uint_32 flush_rows;\n  png_color_8 sig_bit;\n  png_bytep trans_alpha;\n  png_color_16 trans_color;\n  png_read_status_ptr read_row_fn;\n  png_write_status_ptr write_row_fn;\n  png_uint_32 free_me;\n  int unknown_default;\n  unsigned int num_chunk_list;\n  png_bytep chunk_list;\n  png_bytep big_row_buf;\n  png_byte compression_type;\n  png_uint_32 user_width_max;\n  png_uint_32 user_height_max;\n  png_uint_32 user_chunk_cache_max;\n  png_alloc_size_t user_chunk_malloc_max;\n  png_unknown_chunk unknown_chunk;\n  size_t old_big_row_buf_size;\n  png_bytep read_buffer;\n  png_alloc_size_t read_buffer_size;\n  uInt IDAT_read_size;\n  png_uint_32 io_state;\n  png_bytep big_prev_row;\n  void (*read_filter[5 - 1])(png_row_infop row_info, png_bytep row, png_const_bytep prev_row);\n}",
            "name": "png_struct_def",
            "names": [
                "typedef struct png_struct_def png_struct"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "error_fn",
                        "type": "png_error_ptr",
                        "definition": [
                            "png_error_ptr error_fn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "warning_fn",
                        "type": "png_error_ptr",
                        "definition": [
                            "png_error_ptr warning_fn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "error_ptr",
                        "type": "png_voidp",
                        "definition": [
                            "png_voidp error_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "write_data_fn",
                        "type": "png_rw_ptr",
                        "definition": [
                            "png_rw_ptr write_data_fn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "read_data_fn",
                        "type": "png_rw_ptr",
                        "definition": [
                            "png_rw_ptr read_data_fn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "io_ptr",
                        "type": "png_voidp",
                        "definition": [
                            "png_voidp io_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mode",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 mode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "transformations",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 transformations"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zowner",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 zowner"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zstream",
                        "type": "z_stream",
                        "definition": [
                            "z_stream zstream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zbuffer_list",
                        "type": "png_compression_bufferp",
                        "definition": [
                            "png_compression_bufferp zbuffer_list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zbuffer_size",
                        "type": "uInt",
                        "definition": [
                            "uInt zbuffer_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zlib_level",
                        "type": "int",
                        "definition": [
                            "int zlib_level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zlib_method",
                        "type": "int",
                        "definition": [
                            "int zlib_method"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zlib_window_bits",
                        "type": "int",
                        "definition": [
                            "int zlib_window_bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zlib_mem_level",
                        "type": "int",
                        "definition": [
                            "int zlib_mem_level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zlib_strategy",
                        "type": "int",
                        "definition": [
                            "int zlib_strategy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zlib_set_level",
                        "type": "int",
                        "definition": [
                            "int zlib_set_level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zlib_set_method",
                        "type": "int",
                        "definition": [
                            "int zlib_set_method"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zlib_set_window_bits",
                        "type": "int",
                        "definition": [
                            "int zlib_set_window_bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zlib_set_mem_level",
                        "type": "int",
                        "definition": [
                            "int zlib_set_mem_level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zlib_set_strategy",
                        "type": "int",
                        "definition": [
                            "int zlib_set_strategy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_rows",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 num_rows"
                        ]
                    },
                    {
                        "path": null,
                        "name": "usr_width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 usr_width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rowbytes",
                        "type": "size_t",
                        "definition": [
                            "size_t rowbytes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "iwidth",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 iwidth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_number",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 row_number"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chunk_name",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 chunk_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep prev_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_buf",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep row_buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "try_row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep try_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tst_row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep tst_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_rowbytes",
                        "type": "size_t",
                        "definition": [
                            "size_t info_rowbytes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "idat_size",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 idat_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 crc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "palette",
                        "type": "png_colorp",
                        "definition": [
                            "png_colorp palette"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_palette",
                        "type": "png_uint_16",
                        "definition": [
                            "png_uint_16 num_palette"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_palette_max",
                        "type": "int",
                        "definition": [
                            "int num_palette_max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_trans",
                        "type": "png_uint_16",
                        "definition": [
                            "png_uint_16 num_trans"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compression",
                        "type": "png_byte",
                        "definition": [
                            "png_byte compression"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filter",
                        "type": "png_byte",
                        "definition": [
                            "png_byte filter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "interlaced",
                        "type": "png_byte",
                        "definition": [
                            "png_byte interlaced"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pass",
                        "type": "png_byte",
                        "definition": [
                            "png_byte pass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "do_filter",
                        "type": "png_byte",
                        "definition": [
                            "png_byte do_filter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color_type",
                        "type": "png_byte",
                        "definition": [
                            "png_byte color_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bit_depth",
                        "type": "png_byte",
                        "definition": [
                            "png_byte bit_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "usr_bit_depth",
                        "type": "png_byte",
                        "definition": [
                            "png_byte usr_bit_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pixel_depth",
                        "type": "png_byte",
                        "definition": [
                            "png_byte pixel_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "channels",
                        "type": "png_byte",
                        "definition": [
                            "png_byte channels"
                        ]
                    },
                    {
                        "path": null,
                        "name": "usr_channels",
                        "type": "png_byte",
                        "definition": [
                            "png_byte usr_channels"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sig_bytes",
                        "type": "png_byte",
                        "definition": [
                            "png_byte sig_bytes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maximum_pixel_depth",
                        "type": "png_byte",
                        "definition": [
                            "png_byte maximum_pixel_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "transformed_pixel_depth",
                        "type": "png_byte",
                        "definition": [
                            "png_byte transformed_pixel_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zstream_start",
                        "type": "png_byte",
                        "definition": [
                            "png_byte zstream_start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "background_gamma_type",
                        "type": "png_byte",
                        "definition": [
                            "png_byte background_gamma_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "background_gamma",
                        "type": "png_fixed_point",
                        "definition": [
                            "png_fixed_point background_gamma"
                        ]
                    },
                    {
                        "path": null,
                        "name": "background",
                        "type": "png_color_16",
                        "definition": [
                            "png_color_16 background"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_flush_fn",
                        "type": "png_flush_ptr",
                        "definition": [
                            "png_flush_ptr output_flush_fn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flush_dist",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 flush_dist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flush_rows",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 flush_rows"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sig_bit",
                        "type": "png_color_8",
                        "definition": [
                            "png_color_8 sig_bit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_alpha",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep trans_alpha"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_color",
                        "type": "png_color_16",
                        "definition": [
                            "png_color_16 trans_color"
                        ]
                    },
                    {
                        "path": null,
                        "name": "read_row_fn",
                        "type": "png_read_status_ptr",
                        "definition": [
                            "png_read_status_ptr read_row_fn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "write_row_fn",
                        "type": "png_write_status_ptr",
                        "definition": [
                            "png_write_status_ptr write_row_fn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "free_me",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 free_me"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unknown_default",
                        "type": "int",
                        "definition": [
                            "int unknown_default"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_chunk_list",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int num_chunk_list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chunk_list",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep chunk_list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "big_row_buf",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep big_row_buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compression_type",
                        "type": "png_byte",
                        "definition": [
                            "png_byte compression_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "user_width_max",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 user_width_max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "user_height_max",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 user_height_max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "user_chunk_cache_max",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 user_chunk_cache_max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "user_chunk_malloc_max",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t user_chunk_malloc_max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unknown_chunk",
                        "type": "png_unknown_chunk",
                        "definition": [
                            "png_unknown_chunk unknown_chunk"
                        ]
                    },
                    {
                        "path": null,
                        "name": "old_big_row_buf_size",
                        "type": "size_t",
                        "definition": [
                            "size_t old_big_row_buf_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "read_buffer",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep read_buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "read_buffer_size",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t read_buffer_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "IDAT_read_size",
                        "type": "uInt",
                        "definition": [
                            "uInt IDAT_read_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "io_state",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 io_state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "big_prev_row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep big_prev_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "read_filter",
                        "type": "void (*[5 - 1])(png_row_infop row_info, png_bytep row, png_const_bytep prev_row)",
                        "definition": [
                            "void (*read_filter[5 - 1])(png_row_infop row_info, png_bytep row, png_const_bytep prev_row)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct png_struct_def png_struct",
            "name": "png_struct",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "struct png_struct_def\n{\n  png_error_ptr error_fn;\n  png_error_ptr warning_fn;\n  png_voidp error_ptr;\n  png_rw_ptr write_data_fn;\n  png_rw_ptr read_data_fn;\n  png_voidp io_ptr;\n  png_uint_32 mode;\n  png_uint_32 flags;\n  png_uint_32 transformations;\n  png_uint_32 zowner;\n  z_stream zstream;\n  png_compression_bufferp zbuffer_list;\n  uInt zbuffer_size;\n  int zlib_level;\n  int zlib_method;\n  int zlib_window_bits;\n  int zlib_mem_level;\n  int zlib_strategy;\n  int zlib_set_level;\n  int zlib_set_method;\n  int zlib_set_window_bits;\n  int zlib_set_mem_level;\n  int zlib_set_strategy;\n  png_uint_32 width;\n  png_uint_32 height;\n  png_uint_32 num_rows;\n  png_uint_32 usr_width;\n  size_t rowbytes;\n  png_uint_32 iwidth;\n  png_uint_32 row_number;\n  png_uint_32 chunk_name;\n  png_bytep prev_row;\n  png_bytep row_buf;\n  png_bytep try_row;\n  png_bytep tst_row;\n  size_t info_rowbytes;\n  png_uint_32 idat_size;\n  png_uint_32 crc;\n  png_colorp palette;\n  png_uint_16 num_palette;\n  int num_palette_max;\n  png_uint_16 num_trans;\n  png_byte compression;\n  png_byte filter;\n  png_byte interlaced;\n  png_byte pass;\n  png_byte do_filter;\n  png_byte color_type;\n  png_byte bit_depth;\n  png_byte usr_bit_depth;\n  png_byte pixel_depth;\n  png_byte channels;\n  png_byte usr_channels;\n  png_byte sig_bytes;\n  png_byte maximum_pixel_depth;\n  png_byte transformed_pixel_depth;\n  png_byte zstream_start;\n  png_byte background_gamma_type;\n  png_fixed_point background_gamma;\n  png_color_16 background;\n  png_flush_ptr output_flush_fn;\n  png_uint_32 flush_dist;\n  png_uint_32 flush_rows;\n  png_color_8 sig_bit;\n  png_bytep trans_alpha;\n  png_color_16 trans_color;\n  png_read_status_ptr read_row_fn;\n  png_write_status_ptr write_row_fn;\n  png_uint_32 free_me;\n  int unknown_default;\n  unsigned int num_chunk_list;\n  png_bytep chunk_list;\n  png_bytep big_row_buf;\n  png_byte compression_type;\n  png_uint_32 user_width_max;\n  png_uint_32 user_height_max;\n  png_uint_32 user_chunk_cache_max;\n  png_alloc_size_t user_chunk_malloc_max;\n  png_unknown_chunk unknown_chunk;\n  size_t old_big_row_buf_size;\n  png_bytep read_buffer;\n  png_alloc_size_t read_buffer_size;\n  uInt IDAT_read_size;\n  png_uint_32 io_state;\n  png_bytep big_prev_row;\n  void (*read_filter[5 - 1])(png_row_infop row_info, png_bytep row, png_const_bytep prev_row);\n}",
                        "name": "png_struct_def",
                        "names": [
                            "typedef struct png_struct_def png_struct"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "error_fn",
                                    "type": "png_error_ptr",
                                    "definition": [
                                        "png_error_ptr error_fn"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "warning_fn",
                                    "type": "png_error_ptr",
                                    "definition": [
                                        "png_error_ptr warning_fn"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "error_ptr",
                                    "type": "png_voidp",
                                    "definition": [
                                        "png_voidp error_ptr"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "write_data_fn",
                                    "type": "png_rw_ptr",
                                    "definition": [
                                        "png_rw_ptr write_data_fn"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "read_data_fn",
                                    "type": "png_rw_ptr",
                                    "definition": [
                                        "png_rw_ptr read_data_fn"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "io_ptr",
                                    "type": "png_voidp",
                                    "definition": [
                                        "png_voidp io_ptr"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "mode",
                                    "type": "png_uint_32",
                                    "definition": [
                                        "png_uint_32 mode"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "flags",
                                    "type": "png_uint_32",
                                    "definition": [
                                        "png_uint_32 flags"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "transformations",
                                    "type": "png_uint_32",
                                    "definition": [
                                        "png_uint_32 transformations"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "zowner",
                                    "type": "png_uint_32",
                                    "definition": [
                                        "png_uint_32 zowner"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "zstream",
                                    "type": "z_stream",
                                    "definition": [
                                        "z_stream zstream"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "zbuffer_list",
                                    "type": "png_compression_bufferp",
                                    "definition": [
                                        "png_compression_bufferp zbuffer_list"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "zbuffer_size",
                                    "type": "uInt",
                                    "definition": [
                                        "uInt zbuffer_size"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "zlib_level",
                                    "type": "int",
                                    "definition": [
                                        "int zlib_level"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "zlib_method",
                                    "type": "int",
                                    "definition": [
                                        "int zlib_method"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "zlib_window_bits",
                                    "type": "int",
                                    "definition": [
                                        "int zlib_window_bits"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "zlib_mem_level",
                                    "type": "int",
                                    "definition": [
                                        "int zlib_mem_level"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "zlib_strategy",
                                    "type": "int",
                                    "definition": [
                                        "int zlib_strategy"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "zlib_set_level",
                                    "type": "int",
                                    "definition": [
                                        "int zlib_set_level"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "zlib_set_method",
                                    "type": "int",
                                    "definition": [
                                        "int zlib_set_method"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "zlib_set_window_bits",
                                    "type": "int",
                                    "definition": [
                                        "int zlib_set_window_bits"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "zlib_set_mem_level",
                                    "type": "int",
                                    "definition": [
                                        "int zlib_set_mem_level"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "zlib_set_strategy",
                                    "type": "int",
                                    "definition": [
                                        "int zlib_set_strategy"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "width",
                                    "type": "png_uint_32",
                                    "definition": [
                                        "png_uint_32 width"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "height",
                                    "type": "png_uint_32",
                                    "definition": [
                                        "png_uint_32 height"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "num_rows",
                                    "type": "png_uint_32",
                                    "definition": [
                                        "png_uint_32 num_rows"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "usr_width",
                                    "type": "png_uint_32",
                                    "definition": [
                                        "png_uint_32 usr_width"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "rowbytes",
                                    "type": "size_t",
                                    "definition": [
                                        "size_t rowbytes"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "iwidth",
                                    "type": "png_uint_32",
                                    "definition": [
                                        "png_uint_32 iwidth"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "row_number",
                                    "type": "png_uint_32",
                                    "definition": [
                                        "png_uint_32 row_number"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "chunk_name",
                                    "type": "png_uint_32",
                                    "definition": [
                                        "png_uint_32 chunk_name"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "prev_row",
                                    "type": "png_bytep",
                                    "definition": [
                                        "png_bytep prev_row"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "row_buf",
                                    "type": "png_bytep",
                                    "definition": [
                                        "png_bytep row_buf"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "try_row",
                                    "type": "png_bytep",
                                    "definition": [
                                        "png_bytep try_row"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "tst_row",
                                    "type": "png_bytep",
                                    "definition": [
                                        "png_bytep tst_row"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "info_rowbytes",
                                    "type": "size_t",
                                    "definition": [
                                        "size_t info_rowbytes"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "idat_size",
                                    "type": "png_uint_32",
                                    "definition": [
                                        "png_uint_32 idat_size"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "crc",
                                    "type": "png_uint_32",
                                    "definition": [
                                        "png_uint_32 crc"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "palette",
                                    "type": "png_colorp",
                                    "definition": [
                                        "png_colorp palette"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "num_palette",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 num_palette"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "num_palette_max",
                                    "type": "int",
                                    "definition": [
                                        "int num_palette_max"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "num_trans",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 num_trans"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "compression",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte compression"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "filter",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte filter"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "interlaced",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte interlaced"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "pass",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte pass"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "do_filter",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte do_filter"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "color_type",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte color_type"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "bit_depth",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte bit_depth"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "usr_bit_depth",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte usr_bit_depth"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "pixel_depth",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte pixel_depth"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "channels",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte channels"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "usr_channels",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte usr_channels"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "sig_bytes",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte sig_bytes"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "maximum_pixel_depth",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte maximum_pixel_depth"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "transformed_pixel_depth",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte transformed_pixel_depth"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "zstream_start",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte zstream_start"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "background_gamma_type",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte background_gamma_type"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "background_gamma",
                                    "type": "png_fixed_point",
                                    "definition": [
                                        "png_fixed_point background_gamma"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "background",
                                    "type": "png_color_16",
                                    "definition": [
                                        "png_color_16 background"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "output_flush_fn",
                                    "type": "png_flush_ptr",
                                    "definition": [
                                        "png_flush_ptr output_flush_fn"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "flush_dist",
                                    "type": "png_uint_32",
                                    "definition": [
                                        "png_uint_32 flush_dist"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "flush_rows",
                                    "type": "png_uint_32",
                                    "definition": [
                                        "png_uint_32 flush_rows"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "sig_bit",
                                    "type": "png_color_8",
                                    "definition": [
                                        "png_color_8 sig_bit"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "trans_alpha",
                                    "type": "png_bytep",
                                    "definition": [
                                        "png_bytep trans_alpha"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "trans_color",
                                    "type": "png_color_16",
                                    "definition": [
                                        "png_color_16 trans_color"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "read_row_fn",
                                    "type": "png_read_status_ptr",
                                    "definition": [
                                        "png_read_status_ptr read_row_fn"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "write_row_fn",
                                    "type": "png_write_status_ptr",
                                    "definition": [
                                        "png_write_status_ptr write_row_fn"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "free_me",
                                    "type": "png_uint_32",
                                    "definition": [
                                        "png_uint_32 free_me"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "unknown_default",
                                    "type": "int",
                                    "definition": [
                                        "int unknown_default"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "num_chunk_list",
                                    "type": "unsigned int",
                                    "definition": [
                                        "unsigned int num_chunk_list"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "chunk_list",
                                    "type": "png_bytep",
                                    "definition": [
                                        "png_bytep chunk_list"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "big_row_buf",
                                    "type": "png_bytep",
                                    "definition": [
                                        "png_bytep big_row_buf"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "compression_type",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte compression_type"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "user_width_max",
                                    "type": "png_uint_32",
                                    "definition": [
                                        "png_uint_32 user_width_max"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "user_height_max",
                                    "type": "png_uint_32",
                                    "definition": [
                                        "png_uint_32 user_height_max"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "user_chunk_cache_max",
                                    "type": "png_uint_32",
                                    "definition": [
                                        "png_uint_32 user_chunk_cache_max"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "user_chunk_malloc_max",
                                    "type": "png_alloc_size_t",
                                    "definition": [
                                        "png_alloc_size_t user_chunk_malloc_max"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "unknown_chunk",
                                    "type": "png_unknown_chunk",
                                    "definition": [
                                        "png_unknown_chunk unknown_chunk"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "old_big_row_buf_size",
                                    "type": "size_t",
                                    "definition": [
                                        "size_t old_big_row_buf_size"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "read_buffer",
                                    "type": "png_bytep",
                                    "definition": [
                                        "png_bytep read_buffer"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "read_buffer_size",
                                    "type": "png_alloc_size_t",
                                    "definition": [
                                        "png_alloc_size_t read_buffer_size"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "IDAT_read_size",
                                    "type": "uInt",
                                    "definition": [
                                        "uInt IDAT_read_size"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "io_state",
                                    "type": "png_uint_32",
                                    "definition": [
                                        "png_uint_32 io_state"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "big_prev_row",
                                    "type": "png_bytep",
                                    "definition": [
                                        "png_bytep big_prev_row"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "read_filter",
                                    "type": "void (*[5 - 1])(png_row_infop row_info, png_bytep row, png_const_bytep prev_row)",
                                    "definition": [
                                        "void (*read_filter[5 - 1])(png_row_infop row_info, png_bytep row, png_const_bytep prev_row)"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct png_info_def\n{\n  png_uint_32 width;\n  png_uint_32 height;\n  png_uint_32 valid;\n  size_t rowbytes;\n  png_colorp palette;\n  png_uint_16 num_palette;\n  png_uint_16 num_trans;\n  png_byte bit_depth;\n  png_byte color_type;\n  png_byte compression_type;\n  png_byte filter_type;\n  png_byte interlace_type;\n  png_byte channels;\n  png_byte pixel_depth;\n  png_byte spare_byte;\n  png_byte signature[8];\n  png_color_8 sig_bit;\n  png_bytep trans_alpha;\n  png_color_16 trans_color;\n  png_color_16 background;\n  png_uint_16p hist;\n  png_uint_32 free_me;\n  png_unknown_chunkp unknown_chunks;\n  int unknown_chunks_num;\n  png_bytepp row_pointers;\n}",
            "name": "png_info_def",
            "names": [
                "typedef struct png_info_def png_info"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "valid",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 valid"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rowbytes",
                        "type": "size_t",
                        "definition": [
                            "size_t rowbytes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "palette",
                        "type": "png_colorp",
                        "definition": [
                            "png_colorp palette"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_palette",
                        "type": "png_uint_16",
                        "definition": [
                            "png_uint_16 num_palette"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_trans",
                        "type": "png_uint_16",
                        "definition": [
                            "png_uint_16 num_trans"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bit_depth",
                        "type": "png_byte",
                        "definition": [
                            "png_byte bit_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color_type",
                        "type": "png_byte",
                        "definition": [
                            "png_byte color_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compression_type",
                        "type": "png_byte",
                        "definition": [
                            "png_byte compression_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filter_type",
                        "type": "png_byte",
                        "definition": [
                            "png_byte filter_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "interlace_type",
                        "type": "png_byte",
                        "definition": [
                            "png_byte interlace_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "channels",
                        "type": "png_byte",
                        "definition": [
                            "png_byte channels"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pixel_depth",
                        "type": "png_byte",
                        "definition": [
                            "png_byte pixel_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "spare_byte",
                        "type": "png_byte",
                        "definition": [
                            "png_byte spare_byte"
                        ]
                    },
                    {
                        "path": null,
                        "name": "signature",
                        "type": "png_byte [8]",
                        "definition": [
                            "png_byte signature[8]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sig_bit",
                        "type": "png_color_8",
                        "definition": [
                            "png_color_8 sig_bit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_alpha",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep trans_alpha"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_color",
                        "type": "png_color_16",
                        "definition": [
                            "png_color_16 trans_color"
                        ]
                    },
                    {
                        "path": null,
                        "name": "background",
                        "type": "png_color_16",
                        "definition": [
                            "png_color_16 background"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hist",
                        "type": "png_uint_16p",
                        "definition": [
                            "png_uint_16p hist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "free_me",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 free_me"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unknown_chunks",
                        "type": "png_unknown_chunkp",
                        "definition": [
                            "png_unknown_chunkp unknown_chunks"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unknown_chunks_num",
                        "type": "int",
                        "definition": [
                            "int unknown_chunks_num"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_pointers",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp row_pointers"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct png_info_def png_info",
            "name": "png_info",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "struct png_info_def\n{\n  png_uint_32 width;\n  png_uint_32 height;\n  png_uint_32 valid;\n  size_t rowbytes;\n  png_colorp palette;\n  png_uint_16 num_palette;\n  png_uint_16 num_trans;\n  png_byte bit_depth;\n  png_byte color_type;\n  png_byte compression_type;\n  png_byte filter_type;\n  png_byte interlace_type;\n  png_byte channels;\n  png_byte pixel_depth;\n  png_byte spare_byte;\n  png_byte signature[8];\n  png_color_8 sig_bit;\n  png_bytep trans_alpha;\n  png_color_16 trans_color;\n  png_color_16 background;\n  png_uint_16p hist;\n  png_uint_32 free_me;\n  png_unknown_chunkp unknown_chunks;\n  int unknown_chunks_num;\n  png_bytepp row_pointers;\n}",
                        "name": "png_info_def",
                        "names": [
                            "typedef struct png_info_def png_info"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "width",
                                    "type": "png_uint_32",
                                    "definition": [
                                        "png_uint_32 width"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "height",
                                    "type": "png_uint_32",
                                    "definition": [
                                        "png_uint_32 height"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "valid",
                                    "type": "png_uint_32",
                                    "definition": [
                                        "png_uint_32 valid"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "rowbytes",
                                    "type": "size_t",
                                    "definition": [
                                        "size_t rowbytes"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "palette",
                                    "type": "png_colorp",
                                    "definition": [
                                        "png_colorp palette"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "num_palette",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 num_palette"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "num_trans",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 num_trans"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "bit_depth",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte bit_depth"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "color_type",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte color_type"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "compression_type",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte compression_type"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "filter_type",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte filter_type"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "interlace_type",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte interlace_type"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "channels",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte channels"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "pixel_depth",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte pixel_depth"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "spare_byte",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte spare_byte"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "signature",
                                    "type": "png_byte [8]",
                                    "definition": [
                                        "png_byte signature[8]"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "sig_bit",
                                    "type": "png_color_8",
                                    "definition": [
                                        "png_color_8 sig_bit"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "trans_alpha",
                                    "type": "png_bytep",
                                    "definition": [
                                        "png_bytep trans_alpha"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "trans_color",
                                    "type": "png_color_16",
                                    "definition": [
                                        "png_color_16 trans_color"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "background",
                                    "type": "png_color_16",
                                    "definition": [
                                        "png_color_16 background"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "hist",
                                    "type": "png_uint_16p",
                                    "definition": [
                                        "png_uint_16p hist"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "free_me",
                                    "type": "png_uint_32",
                                    "definition": [
                                        "png_uint_32 free_me"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "unknown_chunks",
                                    "type": "png_unknown_chunkp",
                                    "definition": [
                                        "png_unknown_chunkp unknown_chunks"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "unknown_chunks_num",
                                    "type": "int",
                                    "definition": [
                                        "int unknown_chunks_num"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "row_pointers",
                                    "type": "png_bytepp",
                                    "definition": [
                                        "png_bytepp row_pointers"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct png_color_struct\n{\n  png_byte red;\n  png_byte green;\n  png_byte blue;\n} png_color",
            "name": "png_color",
            "names": [
                "typedef const png_color *png_const_colorp",
                "typedef png_color **png_colorpp",
                "typedef png_color *png_colorp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "red",
                        "type": "png_byte",
                        "definition": [
                            "png_byte red"
                        ]
                    },
                    {
                        "path": null,
                        "name": "green",
                        "type": "png_byte",
                        "definition": [
                            "png_byte green"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blue",
                        "type": "png_byte",
                        "definition": [
                            "png_byte blue"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef png_color *png_colorp",
            "name": "png_colorp",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "typedef struct png_color_struct\n{\n  png_byte red;\n  png_byte green;\n  png_byte blue;\n} png_color",
                        "name": "png_color",
                        "names": [
                            "typedef const png_color *png_const_colorp",
                            "typedef png_color **png_colorpp",
                            "typedef png_color *png_colorp"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "red",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte red"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "green",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte green"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "blue",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte blue"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef const png_color *png_const_colorp",
            "name": "png_const_colorp",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "typedef struct png_color_struct\n{\n  png_byte red;\n  png_byte green;\n  png_byte blue;\n} png_color",
                        "name": "png_color",
                        "names": [
                            "typedef const png_color *png_const_colorp",
                            "typedef png_color **png_colorpp",
                            "typedef png_color *png_colorp"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "red",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte red"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "green",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte green"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "blue",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte blue"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef png_color **png_colorpp",
            "name": "png_colorpp",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "typedef struct png_color_struct\n{\n  png_byte red;\n  png_byte green;\n  png_byte blue;\n} png_color",
                        "name": "png_color",
                        "names": [
                            "typedef const png_color *png_const_colorp",
                            "typedef png_color **png_colorpp",
                            "typedef png_color *png_colorp"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "red",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte red"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "green",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte green"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "blue",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte blue"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct png_color_16_struct\n{\n  png_byte index;\n  png_uint_16 red;\n  png_uint_16 green;\n  png_uint_16 blue;\n  png_uint_16 gray;\n} png_color_16",
            "name": "png_color_16",
            "names": [
                "typedef const png_color_16 *png_const_color_16p",
                "typedef png_color_16 **png_color_16pp",
                "typedef png_color_16 *png_color_16p"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "index",
                        "type": "png_byte",
                        "definition": [
                            "png_byte index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "red",
                        "type": "png_uint_16",
                        "definition": [
                            "png_uint_16 red"
                        ]
                    },
                    {
                        "path": null,
                        "name": "green",
                        "type": "png_uint_16",
                        "definition": [
                            "png_uint_16 green"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blue",
                        "type": "png_uint_16",
                        "definition": [
                            "png_uint_16 blue"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gray",
                        "type": "png_uint_16",
                        "definition": [
                            "png_uint_16 gray"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef png_color_16 *png_color_16p",
            "name": "png_color_16p",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "typedef struct png_color_16_struct\n{\n  png_byte index;\n  png_uint_16 red;\n  png_uint_16 green;\n  png_uint_16 blue;\n  png_uint_16 gray;\n} png_color_16",
                        "name": "png_color_16",
                        "names": [
                            "typedef const png_color_16 *png_const_color_16p",
                            "typedef png_color_16 **png_color_16pp",
                            "typedef png_color_16 *png_color_16p"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "index",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte index"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "red",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 red"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "green",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 green"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "blue",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 blue"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "gray",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 gray"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef const png_color_16 *png_const_color_16p",
            "name": "png_const_color_16p",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "typedef struct png_color_16_struct\n{\n  png_byte index;\n  png_uint_16 red;\n  png_uint_16 green;\n  png_uint_16 blue;\n  png_uint_16 gray;\n} png_color_16",
                        "name": "png_color_16",
                        "names": [
                            "typedef const png_color_16 *png_const_color_16p",
                            "typedef png_color_16 **png_color_16pp",
                            "typedef png_color_16 *png_color_16p"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "index",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte index"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "red",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 red"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "green",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 green"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "blue",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 blue"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "gray",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 gray"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef png_color_16 **png_color_16pp",
            "name": "png_color_16pp",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "typedef struct png_color_16_struct\n{\n  png_byte index;\n  png_uint_16 red;\n  png_uint_16 green;\n  png_uint_16 blue;\n  png_uint_16 gray;\n} png_color_16",
                        "name": "png_color_16",
                        "names": [
                            "typedef const png_color_16 *png_const_color_16p",
                            "typedef png_color_16 **png_color_16pp",
                            "typedef png_color_16 *png_color_16p"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "index",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte index"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "red",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 red"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "green",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 green"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "blue",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 blue"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "gray",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 gray"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct png_color_8_struct\n{\n  png_byte red;\n  png_byte green;\n  png_byte blue;\n  png_byte gray;\n  png_byte alpha;\n} png_color_8",
            "name": "png_color_8",
            "names": [
                "typedef const png_color_8 *png_const_color_8p",
                "typedef png_color_8 **png_color_8pp",
                "typedef png_color_8 *png_color_8p"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "red",
                        "type": "png_byte",
                        "definition": [
                            "png_byte red"
                        ]
                    },
                    {
                        "path": null,
                        "name": "green",
                        "type": "png_byte",
                        "definition": [
                            "png_byte green"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blue",
                        "type": "png_byte",
                        "definition": [
                            "png_byte blue"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gray",
                        "type": "png_byte",
                        "definition": [
                            "png_byte gray"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alpha",
                        "type": "png_byte",
                        "definition": [
                            "png_byte alpha"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef png_color_8 *png_color_8p",
            "name": "png_color_8p",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "typedef struct png_color_8_struct\n{\n  png_byte red;\n  png_byte green;\n  png_byte blue;\n  png_byte gray;\n  png_byte alpha;\n} png_color_8",
                        "name": "png_color_8",
                        "names": [
                            "typedef const png_color_8 *png_const_color_8p",
                            "typedef png_color_8 **png_color_8pp",
                            "typedef png_color_8 *png_color_8p"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "red",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte red"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "green",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte green"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "blue",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte blue"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "gray",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte gray"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "alpha",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte alpha"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef const png_color_8 *png_const_color_8p",
            "name": "png_const_color_8p",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "typedef struct png_color_8_struct\n{\n  png_byte red;\n  png_byte green;\n  png_byte blue;\n  png_byte gray;\n  png_byte alpha;\n} png_color_8",
                        "name": "png_color_8",
                        "names": [
                            "typedef const png_color_8 *png_const_color_8p",
                            "typedef png_color_8 **png_color_8pp",
                            "typedef png_color_8 *png_color_8p"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "red",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte red"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "green",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte green"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "blue",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte blue"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "gray",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte gray"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "alpha",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte alpha"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef png_color_8 **png_color_8pp",
            "name": "png_color_8pp",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "typedef struct png_color_8_struct\n{\n  png_byte red;\n  png_byte green;\n  png_byte blue;\n  png_byte gray;\n  png_byte alpha;\n} png_color_8",
                        "name": "png_color_8",
                        "names": [
                            "typedef const png_color_8 *png_const_color_8p",
                            "typedef png_color_8 **png_color_8pp",
                            "typedef png_color_8 *png_color_8p"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "red",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte red"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "green",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte green"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "blue",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte blue"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "gray",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte gray"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "alpha",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte alpha"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct png_sPLT_entry_struct\n{\n  png_uint_16 red;\n  png_uint_16 green;\n  png_uint_16 blue;\n  png_uint_16 alpha;\n  png_uint_16 frequency;\n} png_sPLT_entry",
            "name": "png_sPLT_entry",
            "names": [
                "typedef const png_sPLT_entry *png_const_sPLT_entryp",
                "typedef png_sPLT_entry **png_sPLT_entrypp",
                "typedef png_sPLT_entry *png_sPLT_entryp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "red",
                        "type": "png_uint_16",
                        "definition": [
                            "png_uint_16 red"
                        ]
                    },
                    {
                        "path": null,
                        "name": "green",
                        "type": "png_uint_16",
                        "definition": [
                            "png_uint_16 green"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blue",
                        "type": "png_uint_16",
                        "definition": [
                            "png_uint_16 blue"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alpha",
                        "type": "png_uint_16",
                        "definition": [
                            "png_uint_16 alpha"
                        ]
                    },
                    {
                        "path": null,
                        "name": "frequency",
                        "type": "png_uint_16",
                        "definition": [
                            "png_uint_16 frequency"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef png_sPLT_entry *png_sPLT_entryp",
            "name": "png_sPLT_entryp",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "typedef struct png_sPLT_entry_struct\n{\n  png_uint_16 red;\n  png_uint_16 green;\n  png_uint_16 blue;\n  png_uint_16 alpha;\n  png_uint_16 frequency;\n} png_sPLT_entry",
                        "name": "png_sPLT_entry",
                        "names": [
                            "typedef const png_sPLT_entry *png_const_sPLT_entryp",
                            "typedef png_sPLT_entry **png_sPLT_entrypp",
                            "typedef png_sPLT_entry *png_sPLT_entryp"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "red",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 red"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "green",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 green"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "blue",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 blue"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "alpha",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 alpha"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "frequency",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 frequency"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef const png_sPLT_entry *png_const_sPLT_entryp",
            "name": "png_const_sPLT_entryp",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "typedef struct png_sPLT_entry_struct\n{\n  png_uint_16 red;\n  png_uint_16 green;\n  png_uint_16 blue;\n  png_uint_16 alpha;\n  png_uint_16 frequency;\n} png_sPLT_entry",
                        "name": "png_sPLT_entry",
                        "names": [
                            "typedef const png_sPLT_entry *png_const_sPLT_entryp",
                            "typedef png_sPLT_entry **png_sPLT_entrypp",
                            "typedef png_sPLT_entry *png_sPLT_entryp"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "red",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 red"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "green",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 green"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "blue",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 blue"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "alpha",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 alpha"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "frequency",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 frequency"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef png_sPLT_entry **png_sPLT_entrypp",
            "name": "png_sPLT_entrypp",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "typedef struct png_sPLT_entry_struct\n{\n  png_uint_16 red;\n  png_uint_16 green;\n  png_uint_16 blue;\n  png_uint_16 alpha;\n  png_uint_16 frequency;\n} png_sPLT_entry",
                        "name": "png_sPLT_entry",
                        "names": [
                            "typedef const png_sPLT_entry *png_const_sPLT_entryp",
                            "typedef png_sPLT_entry **png_sPLT_entrypp",
                            "typedef png_sPLT_entry *png_sPLT_entryp"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "red",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 red"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "green",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 green"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "blue",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 blue"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "alpha",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 alpha"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "frequency",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 frequency"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct png_sPLT_struct\n{\n  png_charp name;\n  png_byte depth;\n  png_sPLT_entryp entries;\n  png_int_32 nentries;\n} png_sPLT_t",
            "name": "png_sPLT_t",
            "names": [
                "typedef const png_sPLT_t *png_const_sPLT_tp",
                "typedef png_sPLT_t **png_sPLT_tpp",
                "typedef png_sPLT_t *png_sPLT_tp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "name",
                        "type": "png_charp",
                        "definition": [
                            "png_charp name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "depth",
                        "type": "png_byte",
                        "definition": [
                            "png_byte depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entries",
                        "type": "png_sPLT_entryp",
                        "definition": [
                            "png_sPLT_entryp entries"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nentries",
                        "type": "png_int_32",
                        "definition": [
                            "png_int_32 nentries"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef png_sPLT_t *png_sPLT_tp",
            "name": "png_sPLT_tp",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "typedef struct png_sPLT_struct\n{\n  png_charp name;\n  png_byte depth;\n  png_sPLT_entryp entries;\n  png_int_32 nentries;\n} png_sPLT_t",
                        "name": "png_sPLT_t",
                        "names": [
                            "typedef const png_sPLT_t *png_const_sPLT_tp",
                            "typedef png_sPLT_t **png_sPLT_tpp",
                            "typedef png_sPLT_t *png_sPLT_tp"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "name",
                                    "type": "png_charp",
                                    "definition": [
                                        "png_charp name"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "depth",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte depth"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "entries",
                                    "type": "png_sPLT_entryp",
                                    "definition": [
                                        "png_sPLT_entryp entries"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "nentries",
                                    "type": "png_int_32",
                                    "definition": [
                                        "png_int_32 nentries"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef const png_sPLT_t *png_const_sPLT_tp",
            "name": "png_const_sPLT_tp",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "typedef struct png_sPLT_struct\n{\n  png_charp name;\n  png_byte depth;\n  png_sPLT_entryp entries;\n  png_int_32 nentries;\n} png_sPLT_t",
                        "name": "png_sPLT_t",
                        "names": [
                            "typedef const png_sPLT_t *png_const_sPLT_tp",
                            "typedef png_sPLT_t **png_sPLT_tpp",
                            "typedef png_sPLT_t *png_sPLT_tp"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "name",
                                    "type": "png_charp",
                                    "definition": [
                                        "png_charp name"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "depth",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte depth"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "entries",
                                    "type": "png_sPLT_entryp",
                                    "definition": [
                                        "png_sPLT_entryp entries"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "nentries",
                                    "type": "png_int_32",
                                    "definition": [
                                        "png_int_32 nentries"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef png_sPLT_t **png_sPLT_tpp",
            "name": "png_sPLT_tpp",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "typedef struct png_sPLT_struct\n{\n  png_charp name;\n  png_byte depth;\n  png_sPLT_entryp entries;\n  png_int_32 nentries;\n} png_sPLT_t",
                        "name": "png_sPLT_t",
                        "names": [
                            "typedef const png_sPLT_t *png_const_sPLT_tp",
                            "typedef png_sPLT_t **png_sPLT_tpp",
                            "typedef png_sPLT_t *png_sPLT_tp"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "name",
                                    "type": "png_charp",
                                    "definition": [
                                        "png_charp name"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "depth",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte depth"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "entries",
                                    "type": "png_sPLT_entryp",
                                    "definition": [
                                        "png_sPLT_entryp entries"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "nentries",
                                    "type": "png_int_32",
                                    "definition": [
                                        "png_int_32 nentries"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct png_time_struct\n{\n  png_uint_16 year;\n  png_byte month;\n  png_byte day;\n  png_byte hour;\n  png_byte minute;\n  png_byte second;\n} png_time",
            "name": "png_time",
            "names": [
                "typedef const png_time *png_const_timep",
                "typedef png_time **png_timepp",
                "typedef png_time *png_timep"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "year",
                        "type": "png_uint_16",
                        "definition": [
                            "png_uint_16 year"
                        ]
                    },
                    {
                        "path": null,
                        "name": "month",
                        "type": "png_byte",
                        "definition": [
                            "png_byte month"
                        ]
                    },
                    {
                        "path": null,
                        "name": "day",
                        "type": "png_byte",
                        "definition": [
                            "png_byte day"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hour",
                        "type": "png_byte",
                        "definition": [
                            "png_byte hour"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minute",
                        "type": "png_byte",
                        "definition": [
                            "png_byte minute"
                        ]
                    },
                    {
                        "path": null,
                        "name": "second",
                        "type": "png_byte",
                        "definition": [
                            "png_byte second"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef png_time *png_timep",
            "name": "png_timep",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "typedef struct png_time_struct\n{\n  png_uint_16 year;\n  png_byte month;\n  png_byte day;\n  png_byte hour;\n  png_byte minute;\n  png_byte second;\n} png_time",
                        "name": "png_time",
                        "names": [
                            "typedef const png_time *png_const_timep",
                            "typedef png_time **png_timepp",
                            "typedef png_time *png_timep"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "year",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 year"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "month",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte month"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "day",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte day"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "hour",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte hour"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "minute",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte minute"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "second",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte second"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef const png_time *png_const_timep",
            "name": "png_const_timep",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "typedef struct png_time_struct\n{\n  png_uint_16 year;\n  png_byte month;\n  png_byte day;\n  png_byte hour;\n  png_byte minute;\n  png_byte second;\n} png_time",
                        "name": "png_time",
                        "names": [
                            "typedef const png_time *png_const_timep",
                            "typedef png_time **png_timepp",
                            "typedef png_time *png_timep"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "year",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 year"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "month",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte month"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "day",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte day"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "hour",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte hour"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "minute",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte minute"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "second",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte second"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef png_time **png_timepp",
            "name": "png_timepp",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "typedef struct png_time_struct\n{\n  png_uint_16 year;\n  png_byte month;\n  png_byte day;\n  png_byte hour;\n  png_byte minute;\n  png_byte second;\n} png_time",
                        "name": "png_time",
                        "names": [
                            "typedef const png_time *png_const_timep",
                            "typedef png_time **png_timepp",
                            "typedef png_time *png_timep"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "year",
                                    "type": "png_uint_16",
                                    "definition": [
                                        "png_uint_16 year"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "month",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte month"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "day",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte day"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "hour",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte hour"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "minute",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte minute"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "second",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte second"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct png_unknown_chunk_t\n{\n  png_byte name[5];\n  png_byte *data;\n  size_t size;\n  png_byte location;\n} png_unknown_chunk",
            "name": "png_unknown_chunk",
            "names": [
                "typedef const png_unknown_chunk *png_const_unknown_chunkp",
                "typedef png_unknown_chunk **png_unknown_chunkpp",
                "typedef png_unknown_chunk *png_unknown_chunkp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "name",
                        "type": "png_byte [5]",
                        "definition": [
                            "png_byte name[5]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "png_byte *",
                        "definition": [
                            "png_byte *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "location",
                        "type": "png_byte",
                        "definition": [
                            "png_byte location"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef png_unknown_chunk *png_unknown_chunkp",
            "name": "png_unknown_chunkp",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "typedef struct png_unknown_chunk_t\n{\n  png_byte name[5];\n  png_byte *data;\n  size_t size;\n  png_byte location;\n} png_unknown_chunk",
                        "name": "png_unknown_chunk",
                        "names": [
                            "typedef const png_unknown_chunk *png_const_unknown_chunkp",
                            "typedef png_unknown_chunk **png_unknown_chunkpp",
                            "typedef png_unknown_chunk *png_unknown_chunkp"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "name",
                                    "type": "png_byte [5]",
                                    "definition": [
                                        "png_byte name[5]"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "data",
                                    "type": "png_byte *",
                                    "definition": [
                                        "png_byte *data"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "size",
                                    "type": "size_t",
                                    "definition": [
                                        "size_t size"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "location",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte location"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef const png_unknown_chunk *png_const_unknown_chunkp",
            "name": "png_const_unknown_chunkp",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "typedef struct png_unknown_chunk_t\n{\n  png_byte name[5];\n  png_byte *data;\n  size_t size;\n  png_byte location;\n} png_unknown_chunk",
                        "name": "png_unknown_chunk",
                        "names": [
                            "typedef const png_unknown_chunk *png_const_unknown_chunkp",
                            "typedef png_unknown_chunk **png_unknown_chunkpp",
                            "typedef png_unknown_chunk *png_unknown_chunkp"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "name",
                                    "type": "png_byte [5]",
                                    "definition": [
                                        "png_byte name[5]"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "data",
                                    "type": "png_byte *",
                                    "definition": [
                                        "png_byte *data"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "size",
                                    "type": "size_t",
                                    "definition": [
                                        "size_t size"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "location",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte location"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef png_unknown_chunk **png_unknown_chunkpp",
            "name": "png_unknown_chunkpp",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "typedef struct png_unknown_chunk_t\n{\n  png_byte name[5];\n  png_byte *data;\n  size_t size;\n  png_byte location;\n} png_unknown_chunk",
                        "name": "png_unknown_chunk",
                        "names": [
                            "typedef const png_unknown_chunk *png_const_unknown_chunkp",
                            "typedef png_unknown_chunk **png_unknown_chunkpp",
                            "typedef png_unknown_chunk *png_unknown_chunkp"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "name",
                                    "type": "png_byte [5]",
                                    "definition": [
                                        "png_byte name[5]"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "data",
                                    "type": "png_byte *",
                                    "definition": [
                                        "png_byte *data"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "size",
                                    "type": "size_t",
                                    "definition": [
                                        "size_t size"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "location",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte location"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct png_row_info_struct\n{\n  png_uint_32 width;\n  size_t rowbytes;\n  png_byte color_type;\n  png_byte bit_depth;\n  png_byte channels;\n  png_byte pixel_depth;\n} png_row_info",
            "name": "png_row_info",
            "names": [
                "typedef png_row_info **png_row_infopp",
                "typedef png_row_info *png_row_infop"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rowbytes",
                        "type": "size_t",
                        "definition": [
                            "size_t rowbytes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color_type",
                        "type": "png_byte",
                        "definition": [
                            "png_byte color_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bit_depth",
                        "type": "png_byte",
                        "definition": [
                            "png_byte bit_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "channels",
                        "type": "png_byte",
                        "definition": [
                            "png_byte channels"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pixel_depth",
                        "type": "png_byte",
                        "definition": [
                            "png_byte pixel_depth"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef png_row_info *png_row_infop",
            "name": "png_row_infop",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "typedef struct png_row_info_struct\n{\n  png_uint_32 width;\n  size_t rowbytes;\n  png_byte color_type;\n  png_byte bit_depth;\n  png_byte channels;\n  png_byte pixel_depth;\n} png_row_info",
                        "name": "png_row_info",
                        "names": [
                            "typedef png_row_info **png_row_infopp",
                            "typedef png_row_info *png_row_infop"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "width",
                                    "type": "png_uint_32",
                                    "definition": [
                                        "png_uint_32 width"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "rowbytes",
                                    "type": "size_t",
                                    "definition": [
                                        "size_t rowbytes"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "color_type",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte color_type"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "bit_depth",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte bit_depth"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "channels",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte channels"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "pixel_depth",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte pixel_depth"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef png_row_info **png_row_infopp",
            "name": "png_row_infopp",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "typedef struct png_row_info_struct\n{\n  png_uint_32 width;\n  size_t rowbytes;\n  png_byte color_type;\n  png_byte bit_depth;\n  png_byte channels;\n  png_byte pixel_depth;\n} png_row_info",
                        "name": "png_row_info",
                        "names": [
                            "typedef png_row_info **png_row_infopp",
                            "typedef png_row_info *png_row_infop"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "width",
                                    "type": "png_uint_32",
                                    "definition": [
                                        "png_uint_32 width"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "rowbytes",
                                    "type": "size_t",
                                    "definition": [
                                        "size_t rowbytes"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "color_type",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte color_type"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "bit_depth",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte bit_depth"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "channels",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte channels"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "pixel_depth",
                                    "type": "png_byte",
                                    "definition": [
                                        "png_byte pixel_depth"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef void (*png_error_ptr)(png_structp, png_const_charp)",
            "name": "png_error_ptr",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef void (*png_rw_ptr)(png_structp, png_bytep, size_t)",
            "name": "png_rw_ptr",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef void (*png_flush_ptr)(png_structp)",
            "name": "png_flush_ptr",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef void (*png_read_status_ptr)(png_structp, png_uint_32, int)",
            "name": "png_read_status_ptr",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef void (*png_write_status_ptr)(png_structp, png_uint_32, int)",
            "name": "png_write_status_ptr",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef png_voidp (*png_malloc_ptr)(png_structp, png_alloc_size_t)",
            "name": "png_malloc_ptr",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef void (*png_free_ptr)(png_structp, png_voidp)",
            "name": "png_free_ptr",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct png_compression_buffer\n{\n  struct png_compression_buffer *next;\n  png_byte output[1];\n} png_compression_buffer",
            "name": "png_compression_buffer",
            "names": [
                "typedef struct png_compression_buffer\n{\n  struct png_compression_buffer *next;\n  png_byte output[1];\n} *png_compression_bufferp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct png_compression_buffer",
                        "type": "struct png_compression_buffer *",
                        "definition": [
                            "struct png_compression_buffer *next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "png_byte [1]",
                        "definition": [
                            "png_byte output[1]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct png_compression_buffer\n{\n  struct png_compression_buffer *next;\n  png_byte output[1];\n} *png_compression_bufferp",
            "name": "png_compression_bufferp",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "typedef struct png_compression_buffer\n{\n  struct png_compression_buffer *next;\n  png_byte output[1];\n} png_compression_buffer",
                        "name": "png_compression_buffer",
                        "names": [
                            "typedef struct png_compression_buffer\n{\n  struct png_compression_buffer *next;\n  png_byte output[1];\n} *png_compression_bufferp"
                        ],
                        "inner": {
                            "special_type": [],
                            "global_variable": [
                                {
                                    "path": null,
                                    "name": "struct png_compression_buffer",
                                    "type": "struct png_compression_buffer *",
                                    "definition": [
                                        "struct png_compression_buffer *next"
                                    ]
                                },
                                {
                                    "path": null,
                                    "name": "output",
                                    "type": "png_byte [1]",
                                    "definition": [
                                        "png_byte output[1]"
                                    ]
                                }
                            ],
                            "function": [],
                            "typedefs": []
                        }
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct GIFScreen\n{\n  unsigned int Width;\n  unsigned int Height;\n  unsigned int GlobalColorFlag;\n  unsigned int ColorResolution;\n  unsigned int SortFlag;\n  unsigned int GlobalNumColors;\n  unsigned int Background;\n  unsigned int PixelAspectRatio;\n  unsigned char GlobalColorTable[256 * 3];\n}",
            "name": "GIFScreen",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "Width",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int Width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "Height",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int Height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "GlobalColorFlag",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int GlobalColorFlag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ColorResolution",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ColorResolution"
                        ]
                    },
                    {
                        "path": null,
                        "name": "SortFlag",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int SortFlag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "GlobalNumColors",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int GlobalNumColors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "Background",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int Background"
                        ]
                    },
                    {
                        "path": null,
                        "name": "PixelAspectRatio",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int PixelAspectRatio"
                        ]
                    },
                    {
                        "path": null,
                        "name": "GlobalColorTable",
                        "type": "unsigned char [256 * 3]",
                        "definition": [
                            "unsigned char GlobalColorTable[256 * 3]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct GIFImage\n{\n  struct GIFScreen *Screen;\n  unsigned int LeftPos;\n  unsigned int TopPos;\n  unsigned int Width;\n  unsigned int Height;\n  unsigned int LocalColorFlag;\n  unsigned int InterlaceFlag;\n  unsigned int SortFlag;\n  unsigned int LocalNumColors;\n  unsigned char LocalColorTable[256 * 3];\n  unsigned char **Rows;\n}",
            "name": "GIFImage",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct GIFScreen",
                        "type": "struct GIFScreen *",
                        "definition": [
                            "struct GIFScreen *Screen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "LeftPos",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int LeftPos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "TopPos",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int TopPos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "Width",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int Width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "Height",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int Height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "LocalColorFlag",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int LocalColorFlag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "InterlaceFlag",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int InterlaceFlag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "SortFlag",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int SortFlag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "LocalNumColors",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int LocalNumColors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "LocalColorTable",
                        "type": "unsigned char [256 * 3]",
                        "definition": [
                            "unsigned char LocalColorTable[256 * 3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "Rows",
                        "type": "unsigned char **",
                        "definition": [
                            "unsigned char **Rows"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct GIFExtension\n{\n  struct GIFScreen *Screen;\n  unsigned char *Buffer;\n  unsigned int BufferSize;\n  unsigned char Label;\n}",
            "name": "GIFExtension",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct GIFScreen",
                        "type": "struct GIFScreen *",
                        "definition": [
                            "struct GIFScreen *Screen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "Buffer",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *Buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "BufferSize",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int BufferSize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "Label",
                        "type": "unsigned char",
                        "definition": [
                            "unsigned char Label"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct GIFGraphicCtlExt\n{\n  unsigned int DisposalMethod;\n  unsigned int InputFlag;\n  unsigned int TransparentFlag;\n  unsigned int DelayTime;\n  unsigned int Transparent;\n}",
            "name": "GIFGraphicCtlExt",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "DisposalMethod",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int DisposalMethod"
                        ]
                    },
                    {
                        "path": null,
                        "name": "InputFlag",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int InputFlag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "TransparentFlag",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int TransparentFlag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "DelayTime",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int DelayTime"
                        ]
                    },
                    {
                        "path": null,
                        "name": "Transparent",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int Transparent"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "enum \n{\n  OPNG_BITSET_ELT_MIN = 0,\n  OPNG_BITSET_ELT_MAX = (int) (((sizeof(opng_bitset_t)) * 8) - 1)\n}",
            "name": null,
            "names": []
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct pnm_struct\n{\n  unsigned int format;\n  unsigned int depth;\n  unsigned int width;\n  unsigned int height;\n  unsigned int maxval;\n} pnm_struct",
            "name": "pnm_struct",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "format",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int format"
                        ]
                    },
                    {
                        "path": null,
                        "name": "depth",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxval",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int maxval"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct minitiff_info\n{\n  void (*error_handler)(const char *msg);\n  void (*warning_handler)(const char *msg);\n  int byte_order;\n  size_t width;\n  size_t height;\n  unsigned int bits_per_sample;\n  unsigned int compression;\n  unsigned int photometric;\n  size_t strip_offsets_count;\n  unsigned long *strip_offsets;\n  unsigned int orientation;\n  unsigned int samples_per_pixel;\n  size_t rows_per_strip;\n}",
            "name": "minitiff_info",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "error_handler",
                        "type": "void (*)(const char *msg)",
                        "definition": [
                            "void (*error_handler)(const char *msg)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "warning_handler",
                        "type": "void (*)(const char *msg)",
                        "definition": [
                            "void (*warning_handler)(const char *msg)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "byte_order",
                        "type": "int",
                        "definition": [
                            "int byte_order"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "size_t",
                        "definition": [
                            "size_t width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "size_t",
                        "definition": [
                            "size_t height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_per_sample",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bits_per_sample"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compression",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int compression"
                        ]
                    },
                    {
                        "path": null,
                        "name": "photometric",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int photometric"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strip_offsets_count",
                        "type": "size_t",
                        "definition": [
                            "size_t strip_offsets_count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strip_offsets",
                        "type": "unsigned long *",
                        "definition": [
                            "unsigned long *strip_offsets"
                        ]
                    },
                    {
                        "path": null,
                        "name": "orientation",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int orientation"
                        ]
                    },
                    {
                        "path": null,
                        "name": "samples_per_pixel",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int samples_per_pixel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rows_per_strip",
                        "type": "size_t",
                        "definition": [
                            "size_t rows_per_strip"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct minitiff_getter\n{\n  unsigned int (*get_ushort)(const unsigned char *buf_ptr);\n  unsigned long (*get_ulong)(const unsigned char *buf_ptr);\n}",
            "name": "minitiff_getter",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "get_ushort",
                        "type": "unsigned int (*)(const unsigned char *buf_ptr)",
                        "definition": [
                            "unsigned int (*get_ushort)(const unsigned char *buf_ptr)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "get_ulong",
                        "type": "unsigned long (*)(const unsigned char *buf_ptr)",
                        "definition": [
                            "unsigned long (*get_ulong)(const unsigned char *buf_ptr)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct opng_options\n{\n  int backup;\n  int clobber;\n  int debug;\n  int fix;\n  int force;\n  int full;\n  int preserve;\n  int quiet;\n  int simulate;\n  int verbose;\n  const char *out_name;\n  const char *dir_name;\n  const char *log_name;\n  int interlace;\n  int nb;\n  int nc;\n  int np;\n  int nz;\n  int optim_level;\n  opng_bitset_t compr_level_set;\n  opng_bitset_t mem_level_set;\n  opng_bitset_t strategy_set;\n  opng_bitset_t filter_set;\n  int window_bits;\n  int snip;\n  int strip_all;\n}",
            "name": "opng_options",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "backup",
                        "type": "int",
                        "definition": [
                            "int backup"
                        ]
                    },
                    {
                        "path": null,
                        "name": "clobber",
                        "type": "int",
                        "definition": [
                            "int clobber"
                        ]
                    },
                    {
                        "path": null,
                        "name": "debug",
                        "type": "int",
                        "definition": [
                            "int debug"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fix",
                        "type": "int",
                        "definition": [
                            "int fix"
                        ]
                    },
                    {
                        "path": null,
                        "name": "force",
                        "type": "int",
                        "definition": [
                            "int force"
                        ]
                    },
                    {
                        "path": null,
                        "name": "full",
                        "type": "int",
                        "definition": [
                            "int full"
                        ]
                    },
                    {
                        "path": null,
                        "name": "preserve",
                        "type": "int",
                        "definition": [
                            "int preserve"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quiet",
                        "type": "int",
                        "definition": [
                            "int quiet"
                        ]
                    },
                    {
                        "path": null,
                        "name": "simulate",
                        "type": "int",
                        "definition": [
                            "int simulate"
                        ]
                    },
                    {
                        "path": null,
                        "name": "verbose",
                        "type": "int",
                        "definition": [
                            "int verbose"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out_name",
                        "type": "const char *",
                        "definition": [
                            "const char *out_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir_name",
                        "type": "const char *",
                        "definition": [
                            "const char *dir_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "log_name",
                        "type": "const char *",
                        "definition": [
                            "const char *log_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "interlace",
                        "type": "int",
                        "definition": [
                            "int interlace"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nb",
                        "type": "int",
                        "definition": [
                            "int nb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nc",
                        "type": "int",
                        "definition": [
                            "int nc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "np",
                        "type": "int",
                        "definition": [
                            "int np"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nz",
                        "type": "int",
                        "definition": [
                            "int nz"
                        ]
                    },
                    {
                        "path": null,
                        "name": "optim_level",
                        "type": "int",
                        "definition": [
                            "int optim_level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compr_level_set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t compr_level_set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mem_level_set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t mem_level_set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strategy_set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t strategy_set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filter_set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t filter_set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "window_bits",
                        "type": "int",
                        "definition": [
                            "int window_bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "snip",
                        "type": "int",
                        "definition": [
                            "int snip"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strip_all",
                        "type": "int",
                        "definition": [
                            "int strip_all"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct opng_ui\n{\n  void (*printf_fn)(const char *fmt, ...);\n  void (*print_cntrl_fn)(int cntrl_code);\n  void (*progress_fn)(unsigned long current_step, unsigned long total_steps);\n  void (*panic_fn)(const char *msg);\n}",
            "name": "opng_ui",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "printf_fn",
                        "type": "void (*)(const char *fmt, ...)",
                        "definition": [
                            "void (*printf_fn)(const char *fmt, ...)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "print_cntrl_fn",
                        "type": "void (*)(int cntrl_code)",
                        "definition": [
                            "void (*print_cntrl_fn)(int cntrl_code)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "progress_fn",
                        "type": "void (*)(unsigned long current_step, unsigned long total_steps)",
                        "definition": [
                            "void (*progress_fn)(unsigned long current_step, unsigned long total_steps)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "panic_fn",
                        "type": "void (*)(const char *msg)",
                        "definition": [
                            "void (*panic_fn)(const char *msg)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct opng_lratio\n{\n  long num;\n  long denom;\n}",
            "name": "opng_lratio",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "num",
                        "type": "long",
                        "definition": [
                            "long num"
                        ]
                    },
                    {
                        "path": null,
                        "name": "denom",
                        "type": "long",
                        "definition": [
                            "long denom"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct opng_ulratio\n{\n  unsigned long num;\n  unsigned long denom;\n}",
            "name": "opng_ulratio",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "num",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long num"
                        ]
                    },
                    {
                        "path": null,
                        "name": "denom",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long denom"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "typedef enum \n{\n  OPNG_STATUS_OK = 0,\n  OPNG_STATUS_ERR_LIBPNG = -1,\n  OPNG_STATUS_ERR_OPTIPNG = -2\n} opng_status_t",
            "name": "opng_status_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct exception_context\n{\n  jmp_buf *penv;\n  int caught;\n  volatile struct \n  {\n    opng_status_t etmp;\n  } v;\n}",
            "name": "exception_context",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "penv",
                        "type": "jmp_buf *",
                        "definition": [
                            "jmp_buf *penv"
                        ]
                    },
                    {
                        "path": null,
                        "name": "caught",
                        "type": "int",
                        "definition": [
                            "int caught"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "volatile struct \n{\n  opng_status_t etmp;\n}",
                        "definition": [
                            "volatile struct \n{\n  opng_status_t etmp;\n} v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        }
    ],
    "global_variable": [
        {
            "path": null,
            "name": "hello",
            "type": "const char []",
            "definition": [
                "static const char hello[] = \"hello, hello!\""
            ]
        },
        {
            "path": null,
            "name": "dictionary",
            "type": "const char []",
            "definition": [
                "static const char dictionary[] = \"hello\""
            ]
        },
        {
            "path": null,
            "name": "dictId",
            "type": "uLong",
            "definition": [
                "static uLong dictId"
            ]
        },
        {
            "path": null,
            "name": "zalloc",
            "type": "alloc_func",
            "definition": [
                "static alloc_func zalloc = (alloc_func) 0"
            ]
        },
        {
            "path": null,
            "name": "zfree",
            "type": "free_func",
            "definition": [
                "static free_func zfree = (free_func) 0"
            ]
        },
        {
            "path": null,
            "name": "z_errmsg",
            "type": "const char * const [10]",
            "definition": [
                "const char * const z_errmsg[10] = {(const char *) \"need dictionary\", (const char *) \"stream end\", (const char *) \"\", (const char *) \"file error\", (const char *) \"stream error\", (const char *) \"data error\", (const char *) \"insufficient memory\", (const char *) \"buffer error\", (const char *) \"incompatible version\", (const char *) \"\"}",
                "extern const char * const z_errmsg[10]"
            ]
        },
        {
            "path": null,
            "name": "crc_table",
            "type": "const z_crc_t []",
            "definition": [
                "static const z_crc_t crc_table[] = {0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f, 0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9, 0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d}"
            ]
        },
        {
            "path": null,
            "name": "crc_big_table",
            "type": "const z_word_t []",
            "definition": [
                "static const z_word_t crc_big_table[] = {0x0000000000000000, 0x9630077700000000, 0x2c610eee00000000, 0xba51099900000000, 0x19c46d0700000000, 0x8ff46a7000000000, 0x35a563e900000000, 0xa395649e00000000, 0x3288db0e00000000, 0xa4b8dc7900000000, 0x1ee9d5e000000000, 0x88d9d29700000000, 0x2b4cb60900000000, 0xbd7cb17e00000000, 0x072db8e700000000, 0x911dbf9000000000, 0x6410b71d00000000, 0xf220b06a00000000, 0x4871b9f300000000, 0xde41be8400000000, 0x7dd4da1a00000000, 0xebe4dd6d00000000, 0x51b5d4f400000000, 0xc785d38300000000, 0x56986c1300000000, 0xc0a86b6400000000, 0x7af962fd00000000, 0xecc9658a00000000, 0x4f5c011400000000, 0xd96c066300000000, 0x633d0ffa00000000, 0xf50d088d00000000, 0xc8206e3b00000000, 0x5e10694c00000000, 0xe44160d500000000, 0x727167a200000000, 0xd1e4033c00000000, 0x47d4044b00000000, 0xfd850dd200000000, 0x6bb50aa500000000, 0xfaa8b53500000000, 0x6c98b24200000000, 0xd6c9bbdb00000000, 0x40f9bcac00000000, 0xe36cd83200000000, 0x755cdf4500000000, 0xcf0dd6dc00000000, 0x593dd1ab00000000, 0xac30d92600000000, 0x3a00de5100000000, 0x8051d7c800000000, 0x1661d0bf00000000, 0xb5f4b42100000000, 0x23c4b35600000000, 0x9995bacf00000000, 0x0fa5bdb800000000, 0x9eb8022800000000, 0x0888055f00000000, 0xb2d90cc600000000, 0x24e90bb100000000, 0x877c6f2f00000000, 0x114c685800000000, 0xab1d61c100000000, 0x3d2d66b600000000, 0x9041dc7600000000, 0x0671db0100000000, 0xbc20d29800000000, 0x2a10d5ef00000000, 0x8985b17100000000, 0x1fb5b60600000000, 0xa5e4bf9f00000000, 0x33d4b8e800000000, 0xa2c9077800000000, 0x34f9000f00000000, 0x8ea8099600000000, 0x18980ee100000000, 0xbb0d6a7f00000000, 0x2d3d6d0800000000, 0x976c649100000000, 0x015c63e600000000, 0xf4516b6b00000000, 0x62616c1c00000000, 0xd830658500000000, 0x4e0062f200000000, 0xed95066c00000000, 0x7ba5011b00000000, 0xc1f4088200000000, 0x57c40ff500000000, 0xc6d9b06500000000, 0x50e9b71200000000, 0xeab8be8b00000000, 0x7c88b9fc00000000, 0xdf1ddd6200000000, 0x492dda1500000000, 0xf37cd38c00000000, 0x654cd4fb00000000, 0x5861b24d00000000, 0xce51b53a00000000, 0x7400bca300000000, 0xe230bbd400000000, 0x41a5df4a00000000, 0xd795d83d00000000, 0x6dc4d1a400000000, 0xfbf4d6d300000000, 0x6ae9694300000000, 0xfcd96e3400000000, 0x468867ad00000000, 0xd0b860da00000000, 0x732d044400000000, 0xe51d033300000000, 0x5f4c0aaa00000000, 0xc97c0ddd00000000, 0x3c71055000000000, 0xaa41022700000000, 0x10100bbe00000000, 0x86200cc900000000, 0x25b5685700000000, 0xb3856f2000000000, 0x09d466b900000000, 0x9fe461ce00000000, 0x0ef9de5e00000000, 0x98c9d92900000000, 0x2298d0b000000000, 0xb4a8d7c700000000, 0x173db35900000000, 0x810db42e00000000, 0x3b5cbdb700000000, 0xad6cbac000000000, 0x2083b8ed00000000, 0xb6b3bf9a00000000, 0x0ce2b60300000000, 0x9ad2b17400000000, 0x3947d5ea00000000, 0xaf77d29d00000000, 0x1526db0400000000, 0x8316dc7300000000, 0x120b63e300000000, 0x843b649400000000, 0x3e6a6d0d00000000, 0xa85a6a7a00000000, 0x0bcf0ee400000000, 0x9dff099300000000, 0x27ae000a00000000, 0xb19e077d00000000, 0x44930ff000000000, 0xd2a3088700000000, 0x68f2011e00000000, 0xfec2066900000000, 0x5d5762f700000000, 0xcb67658000000000, 0x71366c1900000000, 0xe7066b6e00000000, 0x761bd4fe00000000, 0xe02bd38900000000, 0x5a7ada1000000000, 0xcc4add6700000000, 0x6fdfb9f900000000, 0xf9efbe8e00000000, 0x43beb71700000000, 0xd58eb06000000000, 0xe8a3d6d600000000, 0x7e93d1a100000000, 0xc4c2d83800000000, 0x52f2df4f00000000, 0xf167bbd100000000, 0x6757bca600000000, 0xdd06b53f00000000, 0x4b36b24800000000, 0xda2b0dd800000000, 0x4c1b0aaf00000000, 0xf64a033600000000, 0x607a044100000000, 0xc3ef60df00000000, 0x55df67a800000000, 0xef8e6e3100000000, 0x79be694600000000, 0x8cb361cb00000000, 0x1a8366bc00000000, 0xa0d26f2500000000, 0x36e2685200000000, 0x95770ccc00000000, 0x03470bbb00000000, 0xb916022200000000, 0x2f26055500000000, 0xbe3bbac500000000, 0x280bbdb200000000, 0x925ab42b00000000, 0x046ab35c00000000, 0xa7ffd7c200000000, 0x31cfd0b500000000, 0x8b9ed92c00000000, 0x1daede5b00000000, 0xb0c2649b00000000, 0x26f263ec00000000, 0x9ca36a7500000000, 0x0a936d0200000000, 0xa906099c00000000, 0x3f360eeb00000000, 0x8567077200000000, 0x1357000500000000, 0x824abf9500000000, 0x147ab8e200000000, 0xae2bb17b00000000, 0x381bb60c00000000, 0x9b8ed29200000000, 0x0dbed5e500000000, 0xb7efdc7c00000000, 0x21dfdb0b00000000, 0xd4d2d38600000000, 0x42e2d4f100000000, 0xf8b3dd6800000000, 0x6e83da1f00000000, 0xcd16be8100000000, 0x5b26b9f600000000, 0xe177b06f00000000, 0x7747b71800000000, 0xe65a088800000000, 0x706a0fff00000000, 0xca3b066600000000, 0x5c0b011100000000, 0xff9e658f00000000, 0x69ae62f800000000, 0xd3ff6b6100000000, 0x45cf6c1600000000, 0x78e20aa000000000, 0xeed20dd700000000, 0x5483044e00000000, 0xc2b3033900000000, 0x612667a700000000, 0xf71660d000000000, 0x4d47694900000000, 0xdb776e3e00000000, 0x4a6ad1ae00000000, 0xdc5ad6d900000000, 0x660bdf4000000000, 0xf03bd83700000000, 0x53aebca900000000, 0xc59ebbde00000000, 0x7fcfb24700000000, 0xe9ffb53000000000, 0x1cf2bdbd00000000, 0x8ac2baca00000000, 0x3093b35300000000, 0xa6a3b42400000000, 0x0536d0ba00000000, 0x9306d7cd00000000, 0x2957de5400000000, 0xbf67d92300000000, 0x2e7a66b300000000, 0xb84a61c400000000, 0x021b685d00000000, 0x942b6f2a00000000, 0x37be0bb400000000, 0xa18e0cc300000000, 0x1bdf055a00000000, 0x8def022d00000000}"
            ]
        },
        {
            "path": null,
            "name": "crc_braid_table",
            "type": "const z_crc_t [][256]",
            "definition": [
                "static const z_crc_t crc_braid_table[][256] = {{0x00000000, 0xaf449247, 0x85f822cf, 0x2abcb088, 0xd08143df, 0x7fc5d198, 0x55796110, 0xfa3df357, 0x7a7381ff, 0xd53713b8, 0xff8ba330, 0x50cf3177, 0xaaf2c220, 0x05b65067, 0x2f0ae0ef, 0x804e72a8, 0xf4e703fe, 0x5ba391b9, 0x711f2131, 0xde5bb376, 0x24664021, 0x8b22d266, 0xa19e62ee, 0x0edaf0a9, 0x8e948201, 0x21d01046, 0x0b6ca0ce, 0xa4283289, 0x5e15c1de, 0xf1515399, 0xdbede311, 0x74a97156, 0x32bf01bd, 0x9dfb93fa, 0xb7472372, 0x1803b135, 0xe23e4262, 0x4d7ad025, 0x67c660ad, 0xc882f2ea, 0x48cc8042, 0xe7881205, 0xcd34a28d, 0x627030ca, 0x984dc39d, 0x370951da, 0x1db5e152, 0xb2f17315, 0xc6580243, 0x691c9004, 0x43a0208c, 0xece4b2cb, 0x16d9419c, 0xb99dd3db, 0x93216353, 0x3c65f114, 0xbc2b83bc, 0x136f11fb, 0x39d3a173, 0x96973334, 0x6caac063, 0xc3ee5224, 0xe952e2ac, 0x461670eb, 0x657e037a, 0xca3a913d, 0xe08621b5, 0x4fc2b3f2, 0xb5ff40a5, 0x1abbd2e2, 0x3007626a, 0x9f43f02d, 0x1f0d8285, 0xb04910c2, 0x9af5a04a, 0x35b1320d, 0xcf8cc15a, 0x60c8531d, 0x4a74e395, 0xe53071d2, 0x91990084, 0x3edd92c3, 0x1461224b, 0xbb25b00c, 0x4118435b, 0xee5cd11c, 0xc4e06194, 0x6ba4f3d3, 0xebea817b, 0x44ae133c, 0x6e12a3b4, 0xc15631f3, 0x3b6bc2a4, 0x942f50e3, 0xbe93e06b, 0x11d7722c, 0x57c102c7, 0xf8859080, 0xd2392008, 0x7d7db24f, 0x87404118, 0x2804d35f, 0x02b863d7, 0xadfcf190, 0x2db28338, 0x82f6117f, 0xa84aa1f7, 0x070e33b0, 0xfd33c0e7, 0x527752a0, 0x78cbe228, 0xd78f706f, 0xa3260139, 0x0c62937e, 0x26de23f6, 0x899ab1b1, 0x73a742e6, 0xdce3d0a1, 0xf65f6029, 0x591bf26e, 0xd95580c6, 0x76111281, 0x5cada209, 0xf3e9304e, 0x09d4c319, 0xa690515e, 0x8c2ce1d6, 0x23687391, 0xcafc06f4, 0x65b894b3, 0x4f04243b, 0xe040b67c, 0x1a7d452b, 0xb539d76c, 0x9f8567e4, 0x30c1f5a3, 0xb08f870b, 0x1fcb154c, 0x3577a5c4, 0x9a333783, 0x600ec4d4, 0xcf4a5693, 0xe5f6e61b, 0x4ab2745c, 0x3e1b050a, 0x915f974d, 0xbbe327c5, 0x14a7b582, 0xee9a46d5, 0x41ded492, 0x6b62641a, 0xc426f65d, 0x446884f5, 0xeb2c16b2, 0xc190a63a, 0x6ed4347d, 0x94e9c72a, 0x3bad556d, 0x1111e5e5, 0xbe5577a2, 0xf8430749, 0x5707950e, 0x7dbb2586, 0xd2ffb7c1, 0x28c24496, 0x8786d6d1, 0xad3a6659, 0x027ef41e, 0x823086b6, 0x2d7414f1, 0x07c8a479, 0xa88c363e, 0x52b1c569, 0xfdf5572e, 0xd749e7a6, 0x780d75e1, 0x0ca404b7, 0xa3e096f0, 0x895c2678, 0x2618b43f, 0xdc254768, 0x7361d52f, 0x59dd65a7, 0xf699f7e0, 0x76d78548, 0xd993170f, 0xf32fa787, 0x5c6b35c0, 0xa656c697, 0x091254d0, 0x23aee458, 0x8cea761f, 0xaf82058e, 0x00c697c9, 0x2a7a2741, 0x853eb506, 0x7f034651, 0xd047d416, 0xfafb649e, 0x55bff6d9, 0xd5f18471, 0x7ab51636, 0x5009a6be, 0xff4d34f9, 0x0570c7ae, 0xaa3455e9, 0x8088e561, 0x2fcc7726, 0x5b650670, 0xf4219437, 0xde9d24bf, 0x71d9b6f8, 0x8be445af, 0x24a0d7e8, 0x0e1c6760, 0xa158f527, 0x2116878f, 0x8e5215c8, 0xa4eea540, 0x0baa3707, 0xf197c450, 0x5ed35617, 0x746fe69f, 0xdb2b74d8, 0x9d3d0433, 0x32799674, 0x18c526fc, 0xb781b4bb, 0x4dbc47ec, 0xe2f8d5ab, 0xc8446523, 0x6700f764, 0xe74e85cc, 0x480a178b, 0x62b6a703, 0xcdf23544, 0x37cfc613, 0x988b5454, 0xb237e4dc, 0x1d73769b, 0x69da07cd, 0xc69e958a, 0xec222502, 0x4366b745, 0xb95b4412, 0x161fd655, 0x3ca366dd, 0x93e7f49a, 0x13a98632, 0xbced1475, 0x9651a4fd, 0x391536ba, 0xc328c5ed, 0x6c6c57aa, 0x46d0e722, 0xe9947565}, {0x00000000, 0x4e890ba9, 0x9d121752, 0xd39b1cfb, 0xe15528e5, 0xafdc234c, 0x7c473fb7, 0x32ce341e, 0x19db578b, 0x57525c22, 0x84c940d9, 0xca404b70, 0xf88e7f6e, 0xb60774c7, 0x659c683c, 0x2b156395, 0x33b6af16, 0x7d3fa4bf, 0xaea4b844, 0xe02db3ed, 0xd2e387f3, 0x9c6a8c5a, 0x4ff190a1, 0x01789b08, 0x2a6df89d, 0x64e4f334, 0xb77fefcf, 0xf9f6e466, 0xcb38d078, 0x85b1dbd1, 0x562ac72a, 0x18a3cc83, 0x676d5e2c, 0x29e45585, 0xfa7f497e, 0xb4f642d7, 0x863876c9, 0xc8b17d60, 0x1b2a619b, 0x55a36a32, 0x7eb609a7, 0x303f020e, 0xe3a41ef5, 0xad2d155c, 0x9fe32142, 0xd16a2aeb, 0x02f13610, 0x4c783db9, 0x54dbf13a, 0x1a52fa93, 0xc9c9e668, 0x8740edc1, 0xb58ed9df, 0xfb07d276, 0x289cce8d, 0x6615c524, 0x4d00a6b1, 0x0389ad18, 0xd012b1e3, 0x9e9bba4a, 0xac558e54, 0xe2dc85fd, 0x31479906, 0x7fce92af, 0xcedabc58, 0x8053b7f1, 0x53c8ab0a, 0x1d41a0a3, 0x2f8f94bd, 0x61069f14, 0xb29d83ef, 0xfc148846, 0xd701ebd3, 0x9988e07a, 0x4a13fc81, 0x049af728, 0x3654c336, 0x78ddc89f, 0xab46d464, 0xe5cfdfcd, 0xfd6c134e, 0xb3e518e7, 0x607e041c, 0x2ef70fb5, 0x1c393bab, 0x52b03002, 0x812b2cf9, 0xcfa22750, 0xe4b744c5, 0xaa3e4f6c, 0x79a55397, 0x372c583e, 0x05e26c20, 0x4b6b6789, 0x98f07b72, 0xd67970db, 0xa9b7e274, 0xe73ee9dd, 0x34a5f526, 0x7a2cfe8f, 0x48e2ca91, 0x066bc138, 0xd5f0ddc3, 0x9b79d66a, 0xb06cb5ff, 0xfee5be56, 0x2d7ea2ad, 0x63f7a904, 0x51399d1a, 0x1fb096b3, 0xcc2b8a48, 0x82a281e1, 0x9a014d62, 0xd48846cb, 0x07135a30, 0x499a5199, 0x7b546587, 0x35dd6e2e, 0xe64672d5, 0xa8cf797c, 0x83da1ae9, 0xcd531140, 0x1ec80dbb, 0x50410612, 0x628f320c, 0x2c0639a5, 0xff9d255e, 0xb1142ef7, 0x46c47ef1, 0x084d7558, 0xdbd669a3, 0x955f620a, 0xa7915614, 0xe9185dbd, 0x3a834146, 0x740a4aef, 0x5f1f297a, 0x119622d3, 0xc20d3e28, 0x8c843581, 0xbe4a019f, 0xf0c30a36, 0x235816cd, 0x6dd11d64, 0x7572d1e7, 0x3bfbda4e, 0xe860c6b5, 0xa6e9cd1c, 0x9427f902, 0xdaaef2ab, 0x0935ee50, 0x47bce5f9, 0x6ca9866c, 0x22208dc5, 0xf1bb913e, 0xbf329a97, 0x8dfcae89, 0xc375a520, 0x10eeb9db, 0x5e67b272, 0x21a920dd, 0x6f202b74, 0xbcbb378f, 0xf2323c26, 0xc0fc0838, 0x8e750391, 0x5dee1f6a, 0x136714c3, 0x38727756, 0x76fb7cff, 0xa5606004, 0xebe96bad, 0xd9275fb3, 0x97ae541a, 0x443548e1, 0x0abc4348, 0x121f8fcb, 0x5c968462, 0x8f0d9899, 0xc1849330, 0xf34aa72e, 0xbdc3ac87, 0x6e58b07c, 0x20d1bbd5, 0x0bc4d840, 0x454dd3e9, 0x96d6cf12, 0xd85fc4bb, 0xea91f0a5, 0xa418fb0c, 0x7783e7f7, 0x390aec5e, 0x881ec2a9, 0xc697c900, 0x150cd5fb, 0x5b85de52, 0x694bea4c, 0x27c2e1e5, 0xf459fd1e, 0xbad0f6b7, 0x91c59522, 0xdf4c9e8b, 0x0cd78270, 0x425e89d9, 0x7090bdc7, 0x3e19b66e, 0xed82aa95, 0xa30ba13c, 0xbba86dbf, 0xf5216616, 0x26ba7aed, 0x68337144, 0x5afd455a, 0x14744ef3, 0xc7ef5208, 0x896659a1, 0xa2733a34, 0xecfa319d, 0x3f612d66, 0x71e826cf, 0x432612d1, 0x0daf1978, 0xde340583, 0x90bd0e2a, 0xef739c85, 0xa1fa972c, 0x72618bd7, 0x3ce8807e, 0x0e26b460, 0x40afbfc9, 0x9334a332, 0xddbda89b, 0xf6a8cb0e, 0xb821c0a7, 0x6bbadc5c, 0x2533d7f5, 0x17fde3eb, 0x5974e842, 0x8aeff4b9, 0xc466ff10, 0xdcc53393, 0x924c383a, 0x41d724c1, 0x0f5e2f68, 0x3d901b76, 0x731910df, 0xa0820c24, 0xee0b078d, 0xc51e6418, 0x8b976fb1, 0x580c734a, 0x168578e3, 0x244b4cfd, 0x6ac24754, 0xb9595baf, 0xf7d05006}, {0x00000000, 0x8d88fde2, 0xc060fd85, 0x4de80067, 0x5bb0fd4b, 0xd63800a9, 0x9bd000ce, 0x1658fd2c, 0xb761fa96, 0x3ae90774, 0x77010713, 0xfa89faf1, 0xecd107dd, 0x6159fa3f, 0x2cb1fa58, 0xa13907ba, 0xb5b2f36d, 0x383a0e8f, 0x75d20ee8, 0xf85af30a, 0xee020e26, 0x638af3c4, 0x2e62f3a3, 0xa3ea0e41, 0x02d309fb, 0x8f5bf419, 0xc2b3f47e, 0x4f3b099c, 0x5963f4b0, 0xd4eb0952, 0x99030935, 0x148bf4d7, 0xb014e09b, 0x3d9c1d79, 0x70741d1e, 0xfdfce0fc, 0xeba41dd0, 0x662ce032, 0x2bc4e055, 0xa64c1db7, 0x07751a0d, 0x8afde7ef, 0xc715e788, 0x4a9d1a6a, 0x5cc5e746, 0xd14d1aa4, 0x9ca51ac3, 0x112de721, 0x05a613f6, 0x882eee14, 0xc5c6ee73, 0x484e1391, 0x5e16eebd, 0xd39e135f, 0x9e761338, 0x13feeeda, 0xb2c7e960, 0x3f4f1482, 0x72a714e5, 0xff2fe907, 0xe977142b, 0x64ffe9c9, 0x2917e9ae, 0xa49f144c, 0xbb58c777, 0x36d03a95, 0x7b383af2, 0xf6b0c710, 0xe0e83a3c, 0x6d60c7de, 0x2088c7b9, 0xad003a5b, 0x0c393de1, 0x81b1c003, 0xcc59c064, 0x41d13d86, 0x5789c0aa, 0xda013d48, 0x97e93d2f, 0x1a61c0cd, 0x0eea341a, 0x8362c9f8, 0xce8ac99f, 0x4302347d, 0x555ac951, 0xd8d234b3, 0x953a34d4, 0x18b2c936, 0xb98bce8c, 0x3403336e, 0x79eb3309, 0xf463ceeb, 0xe23b33c7, 0x6fb3ce25, 0x225bce42, 0xafd333a0, 0x0b4c27ec, 0x86c4da0e, 0xcb2cda69, 0x46a4278b, 0x50fcdaa7, 0xdd742745, 0x909c2722, 0x1d14dac0, 0xbc2ddd7a, 0x31a52098, 0x7c4d20ff, 0xf1c5dd1d, 0xe79d2031, 0x6a15ddd3, 0x27fdddb4, 0xaa752056, 0xbefed481, 0x33762963, 0x7e9e2904, 0xf316d4e6, 0xe54e29ca, 0x68c6d428, 0x252ed44f, 0xa8a629ad, 0x099f2e17, 0x8417d3f5, 0xc9ffd392, 0x44772e70, 0x522fd35c, 0xdfa72ebe, 0x924f2ed9, 0x1fc7d33b, 0xadc088af, 0x2048754d, 0x6da0752a, 0xe02888c8, 0xf67075e4, 0x7bf88806, 0x36108861, 0xbb987583, 0x1aa17239, 0x97298fdb, 0xdac18fbc, 0x5749725e, 0x41118f72, 0xcc997290, 0x817172f7, 0x0cf98f15, 0x18727bc2, 0x95fa8620, 0xd8128647, 0x559a7ba5, 0x43c28689, 0xce4a7b6b, 0x83a27b0c, 0x0e2a86ee, 0xaf138154, 0x229b7cb6, 0x6f737cd1, 0xe2fb8133, 0xf4a37c1f, 0x792b81fd, 0x34c3819a, 0xb94b7c78, 0x1dd46834, 0x905c95d6, 0xddb495b1, 0x503c6853, 0x4664957f, 0xcbec689d, 0x860468fa, 0x0b8c9518, 0xaab592a2, 0x273d6f40, 0x6ad56f27, 0xe75d92c5, 0xf1056fe9, 0x7c8d920b, 0x3165926c, 0xbced6f8e, 0xa8669b59, 0x25ee66bb, 0x680666dc, 0xe58e9b3e, 0xf3d66612, 0x7e5e9bf0, 0x33b69b97, 0xbe3e6675, 0x1f0761cf, 0x928f9c2d, 0xdf679c4a, 0x52ef61a8, 0x44b79c84, 0xc93f6166, 0x84d76101, 0x095f9ce3, 0x16984fd8, 0x9b10b23a, 0xd6f8b25d, 0x5b704fbf, 0x4d28b293, 0xc0a04f71, 0x8d484f16, 0x00c0b2f4, 0xa1f9b54e, 0x2c7148ac, 0x619948cb, 0xec11b529, 0xfa494805, 0x77c1b5e7, 0x3a29b580, 0xb7a14862, 0xa32abcb5, 0x2ea24157, 0x634a4130, 0xeec2bcd2, 0xf89a41fe, 0x7512bc1c, 0x38fabc7b, 0xb5724199, 0x144b4623, 0x99c3bbc1, 0xd42bbba6, 0x59a34644, 0x4ffbbb68, 0xc273468a, 0x8f9b46ed, 0x0213bb0f, 0xa68caf43, 0x2b0452a1, 0x66ec52c6, 0xeb64af24, 0xfd3c5208, 0x70b4afea, 0x3d5caf8d, 0xb0d4526f, 0x11ed55d5, 0x9c65a837, 0xd18da850, 0x5c0555b2, 0x4a5da89e, 0xc7d5557c, 0x8a3d551b, 0x07b5a8f9, 0x133e5c2e, 0x9eb6a1cc, 0xd35ea1ab, 0x5ed65c49, 0x488ea165, 0xc5065c87, 0x88ee5ce0, 0x0566a102, 0xa45fa6b8, 0x29d75b5a, 0x643f5b3d, 0xe9b7a6df, 0xffef5bf3, 0x7267a611, 0x3f8fa676, 0xb2075b94}, {0x00000000, 0x80f0171f, 0xda91287f, 0x5a613f60, 0x6e5356bf, 0xeea341a0, 0xb4c27ec0, 0x343269df, 0xdca6ad7e, 0x5c56ba61, 0x06378501, 0x86c7921e, 0xb2f5fbc1, 0x3205ecde, 0x6864d3be, 0xe894c4a1, 0x623c5cbd, 0xe2cc4ba2, 0xb8ad74c2, 0x385d63dd, 0x0c6f0a02, 0x8c9f1d1d, 0xd6fe227d, 0x560e3562, 0xbe9af1c3, 0x3e6ae6dc, 0x640bd9bc, 0xe4fbcea3, 0xd0c9a77c, 0x5039b063, 0x0a588f03, 0x8aa8981c, 0xc478b97a, 0x4488ae65, 0x1ee99105, 0x9e19861a, 0xaa2befc5, 0x2adbf8da, 0x70bac7ba, 0xf04ad0a5, 0x18de1404, 0x982e031b, 0xc24f3c7b, 0x42bf2b64, 0x768d42bb, 0xf67d55a4, 0xac1c6ac4, 0x2cec7ddb, 0xa644e5c7, 0x26b4f2d8, 0x7cd5cdb8, 0xfc25daa7, 0xc817b378, 0x48e7a467, 0x12869b07, 0x92768c18, 0x7ae248b9, 0xfa125fa6, 0xa07360c6, 0x208377d9, 0x14b11e06, 0x94410919, 0xce203679, 0x4ed02166, 0x538074b5, 0xd37063aa, 0x89115cca, 0x09e14bd5, 0x3dd3220a, 0xbd233515, 0xe7420a75, 0x67b21d6a, 0x8f26d9cb, 0x0fd6ced4, 0x55b7f1b4, 0xd547e6ab, 0xe1758f74, 0x6185986b, 0x3be4a70b, 0xbb14b014, 0x31bc2808, 0xb14c3f17, 0xeb2d0077, 0x6bdd1768, 0x5fef7eb7, 0xdf1f69a8, 0x857e56c8, 0x058e41d7, 0xed1a8576, 0x6dea9269, 0x378bad09, 0xb77bba16, 0x8349d3c9, 0x03b9c4d6, 0x59d8fbb6, 0xd928eca9, 0x97f8cdcf, 0x1708dad0, 0x4d69e5b0, 0xcd99f2af, 0xf9ab9b70, 0x795b8c6f, 0x233ab30f, 0xa3caa410, 0x4b5e60b1, 0xcbae77ae, 0x91cf48ce, 0x113f5fd1, 0x250d360e, 0xa5fd2111, 0xff9c1e71, 0x7f6c096e, 0xf5c49172, 0x7534866d, 0x2f55b90d, 0xafa5ae12, 0x9b97c7cd, 0x1b67d0d2, 0x4106efb2, 0xc1f6f8ad, 0x29623c0c, 0xa9922b13, 0xf3f31473, 0x7303036c, 0x47316ab3, 0xc7c17dac, 0x9da042cc, 0x1d5055d3, 0xa700e96a, 0x27f0fe75, 0x7d91c115, 0xfd61d60a, 0xc953bfd5, 0x49a3a8ca, 0x13c297aa, 0x933280b5, 0x7ba64414, 0xfb56530b, 0xa1376c6b, 0x21c77b74, 0x15f512ab, 0x950505b4, 0xcf643ad4, 0x4f942dcb, 0xc53cb5d7, 0x45cca2c8, 0x1fad9da8, 0x9f5d8ab7, 0xab6fe368, 0x2b9ff477, 0x71fecb17, 0xf10edc08, 0x199a18a9, 0x996a0fb6, 0xc30b30d6, 0x43fb27c9, 0x77c94e16, 0xf7395909, 0xad586669, 0x2da87176, 0x63785010, 0xe388470f, 0xb9e9786f, 0x39196f70, 0x0d2b06af, 0x8ddb11b0, 0xd7ba2ed0, 0x574a39cf, 0xbfdefd6e, 0x3f2eea71, 0x654fd511, 0xe5bfc20e, 0xd18dabd1, 0x517dbcce, 0x0b1c83ae, 0x8bec94b1, 0x01440cad, 0x81b41bb2, 0xdbd524d2, 0x5b2533cd, 0x6f175a12, 0xefe74d0d, 0xb586726d, 0x35766572, 0xdde2a1d3, 0x5d12b6cc, 0x077389ac, 0x87839eb3, 0xb3b1f76c, 0x3341e073, 0x6920df13, 0xe9d0c80c, 0xf4809ddf, 0x74708ac0, 0x2e11b5a0, 0xaee1a2bf, 0x9ad3cb60, 0x1a23dc7f, 0x4042e31f, 0xc0b2f400, 0x282630a1, 0xa8d627be, 0xf2b718de, 0x72470fc1, 0x4675661e, 0xc6857101, 0x9ce44e61, 0x1c14597e, 0x96bcc162, 0x164cd67d, 0x4c2de91d, 0xccddfe02, 0xf8ef97dd, 0x781f80c2, 0x227ebfa2, 0xa28ea8bd, 0x4a1a6c1c, 0xcaea7b03, 0x908b4463, 0x107b537c, 0x24493aa3, 0xa4b92dbc, 0xfed812dc, 0x7e2805c3, 0x30f824a5, 0xb00833ba, 0xea690cda, 0x6a991bc5, 0x5eab721a, 0xde5b6505, 0x843a5a65, 0x04ca4d7a, 0xec5e89db, 0x6cae9ec4, 0x36cfa1a4, 0xb63fb6bb, 0x820ddf64, 0x02fdc87b, 0x589cf71b, 0xd86ce004, 0x52c47818, 0xd2346f07, 0x88555067, 0x08a54778, 0x3c972ea7, 0xbc6739b8, 0xe60606d8, 0x66f611c7, 0x8e62d566, 0x0e92c279, 0x54f3fd19, 0xd403ea06, 0xe03183d9, 0x60c194c6, 0x3aa0aba6, 0xba50bcb9}, {0x00000000, 0x9570d495, 0xf190af6b, 0x64e07bfe, 0x38505897, 0xad208c02, 0xc9c0f7fc, 0x5cb02369, 0x70a0b12e, 0xe5d065bb, 0x81301e45, 0x1440cad0, 0x48f0e9b9, 0xdd803d2c, 0xb96046d2, 0x2c109247, 0xe141625c, 0x7431b6c9, 0x10d1cd37, 0x85a119a2, 0xd9113acb, 0x4c61ee5e, 0x288195a0, 0xbdf14135, 0x91e1d372, 0x049107e7, 0x60717c19, 0xf501a88c, 0xa9b18be5, 0x3cc15f70, 0x5821248e, 0xcd51f01b, 0x19f3c2f9, 0x8c83166c, 0xe8636d92, 0x7d13b907, 0x21a39a6e, 0xb4d34efb, 0xd0333505, 0x4543e190, 0x695373d7, 0xfc23a742, 0x98c3dcbc, 0x0db30829, 0x51032b40, 0xc473ffd5, 0xa093842b, 0x35e350be, 0xf8b2a0a5, 0x6dc27430, 0x09220fce, 0x9c52db5b, 0xc0e2f832, 0x55922ca7, 0x31725759, 0xa40283cc, 0x8812118b, 0x1d62c51e, 0x7982bee0, 0xecf26a75, 0xb042491c, 0x25329d89, 0x41d2e677, 0xd4a232e2, 0x33e785f2, 0xa6975167, 0xc2772a99, 0x5707fe0c, 0x0bb7dd65, 0x9ec709f0, 0xfa27720e, 0x6f57a69b, 0x434734dc, 0xd637e049, 0xb2d79bb7, 0x27a74f22, 0x7b176c4b, 0xee67b8de, 0x8a87c320, 0x1ff717b5, 0xd2a6e7ae, 0x47d6333b, 0x233648c5, 0xb6469c50, 0xeaf6bf39, 0x7f866bac, 0x1b661052, 0x8e16c4c7, 0xa2065680, 0x37768215, 0x5396f9eb, 0xc6e62d7e, 0x9a560e17, 0x0f26da82, 0x6bc6a17c, 0xfeb675e9, 0x2a14470b, 0xbf64939e, 0xdb84e860, 0x4ef43cf5, 0x12441f9c, 0x8734cb09, 0xe3d4b0f7, 0x76a46462, 0x5ab4f625, 0xcfc422b0, 0xab24594e, 0x3e548ddb, 0x62e4aeb2, 0xf7947a27, 0x937401d9, 0x0604d54c, 0xcb552557, 0x5e25f1c2, 0x3ac58a3c, 0xafb55ea9, 0xf3057dc0, 0x6675a955, 0x0295d2ab, 0x97e5063e, 0xbbf59479, 0x2e8540ec, 0x4a653b12, 0xdf15ef87, 0x83a5ccee, 0x16d5187b, 0x72356385, 0xe745b710, 0x67cf0be4, 0xf2bfdf71, 0x965fa48f, 0x032f701a, 0x5f9f5373, 0xcaef87e6, 0xae0ffc18, 0x3b7f288d, 0x176fbaca, 0x821f6e5f, 0xe6ff15a1, 0x738fc134, 0x2f3fe25d, 0xba4f36c8, 0xdeaf4d36, 0x4bdf99a3, 0x868e69b8, 0x13febd2d, 0x771ec6d3, 0xe26e1246, 0xbede312f, 0x2baee5ba, 0x4f4e9e44, 0xda3e4ad1, 0xf62ed896, 0x635e0c03, 0x07be77fd, 0x92cea368, 0xce7e8001, 0x5b0e5494, 0x3fee2f6a, 0xaa9efbff, 0x7e3cc91d, 0xeb4c1d88, 0x8fac6676, 0x1adcb2e3, 0x466c918a, 0xd31c451f, 0xb7fc3ee1, 0x228cea74, 0x0e9c7833, 0x9becaca6, 0xff0cd758, 0x6a7c03cd, 0x36cc20a4, 0xa3bcf431, 0xc75c8fcf, 0x522c5b5a, 0x9f7dab41, 0x0a0d7fd4, 0x6eed042a, 0xfb9dd0bf, 0xa72df3d6, 0x325d2743, 0x56bd5cbd, 0xc3cd8828, 0xefdd1a6f, 0x7aadcefa, 0x1e4db504, 0x8b3d6191, 0xd78d42f8, 0x42fd966d, 0x261ded93, 0xb36d3906, 0x54288e16, 0xc1585a83, 0xa5b8217d, 0x30c8f5e8, 0x6c78d681, 0xf9080214, 0x9de879ea, 0x0898ad7f, 0x24883f38, 0xb1f8ebad, 0xd5189053, 0x406844c6, 0x1cd867af, 0x89a8b33a, 0xed48c8c4, 0x78381c51, 0xb569ec4a, 0x201938df, 0x44f94321, 0xd18997b4, 0x8d39b4dd, 0x18496048, 0x7ca91bb6, 0xe9d9cf23, 0xc5c95d64, 0x50b989f1, 0x3459f20f, 0xa129269a, 0xfd9905f3, 0x68e9d166, 0x0c09aa98, 0x99797e0d, 0x4ddb4cef, 0xd8ab987a, 0xbc4be384, 0x293b3711, 0x758b1478, 0xe0fbc0ed, 0x841bbb13, 0x116b6f86, 0x3d7bfdc1, 0xa80b2954, 0xcceb52aa, 0x599b863f, 0x052ba556, 0x905b71c3, 0xf4bb0a3d, 0x61cbdea8, 0xac9a2eb3, 0x39eafa26, 0x5d0a81d8, 0xc87a554d, 0x94ca7624, 0x01baa2b1, 0x655ad94f, 0xf02a0dda, 0xdc3a9f9d, 0x494a4b08, 0x2daa30f6, 0xb8dae463, 0xe46ac70a, 0x711a139f, 0x15fa6861, 0x808abcf4}, {0x00000000, 0xcf9e17c8, 0x444d29d1, 0x8bd33e19, 0x889a53a2, 0x4704446a, 0xccd77a73, 0x03496dbb, 0xca45a105, 0x05dbb6cd, 0x8e0888d4, 0x41969f1c, 0x42dff2a7, 0x8d41e56f, 0x0692db76, 0xc90cccbe, 0x4ffa444b, 0x80645383, 0x0bb76d9a, 0xc4297a52, 0xc76017e9, 0x08fe0021, 0x832d3e38, 0x4cb329f0, 0x85bfe54e, 0x4a21f286, 0xc1f2cc9f, 0x0e6cdb57, 0x0d25b6ec, 0xc2bba124, 0x49689f3d, 0x86f688f5, 0x9ff48896, 0x506a9f5e, 0xdbb9a147, 0x1427b68f, 0x176edb34, 0xd8f0ccfc, 0x5323f2e5, 0x9cbde52d, 0x55b12993, 0x9a2f3e5b, 0x11fc0042, 0xde62178a, 0xdd2b7a31, 0x12b56df9, 0x996653e0, 0x56f84428, 0xd00eccdd, 0x1f90db15, 0x9443e50c, 0x5bddf2c4, 0x58949f7f, 0x970a88b7, 0x1cd9b6ae, 0xd347a166, 0x1a4b6dd8, 0xd5d57a10, 0x5e064409, 0x919853c1, 0x92d13e7a, 0x5d4f29b2, 0xd69c17ab, 0x19020063, 0xe498176d, 0x2b0600a5, 0xa0d53ebc, 0x6f4b2974, 0x6c0244cf, 0xa39c5307, 0x284f6d1e, 0xe7d17ad6, 0x2eddb668, 0xe143a1a0, 0x6a909fb9, 0xa50e8871, 0xa647e5ca, 0x69d9f202, 0xe20acc1b, 0x2d94dbd3, 0xab625326, 0x64fc44ee, 0xef2f7af7, 0x20b16d3f, 0x23f80084, 0xec66174c, 0x67b52955, 0xa82b3e9d, 0x6127f223, 0xaeb9e5eb, 0x256adbf2, 0xeaf4cc3a, 0xe9bda181, 0x2623b649, 0xadf08850, 0x626e9f98, 0x7b6c9ffb, 0xb4f28833, 0x3f21b62a, 0xf0bfa1e2, 0xf3f6cc59, 0x3c68db91, 0xb7bbe588, 0x7825f240, 0xb1293efe, 0x7eb72936, 0xf564172f, 0x3afa00e7, 0x39b36d5c, 0xf62d7a94, 0x7dfe448d, 0xb2605345, 0x3496dbb0, 0xfb08cc78, 0x70dbf261, 0xbf45e5a9, 0xbc0c8812, 0x73929fda, 0xf841a1c3, 0x37dfb60b, 0xfed37ab5, 0x314d6d7d, 0xba9e5364, 0x750044ac, 0x76492917, 0xb9d73edf, 0x320400c6, 0xfd9a170e, 0x1241289b, 0xdddf3f53, 0x560c014a, 0x99921682, 0x9adb7b39, 0x55456cf1, 0xde9652e8, 0x11084520, 0xd804899e, 0x179a9e56, 0x9c49a04f, 0x53d7b787, 0x509eda3c, 0x9f00cdf4, 0x14d3f3ed, 0xdb4de425, 0x5dbb6cd0, 0x92257b18, 0x19f64501, 0xd66852c9, 0xd5213f72, 0x1abf28ba, 0x916c16a3, 0x5ef2016b, 0x97fecdd5, 0x5860da1d, 0xd3b3e404, 0x1c2df3cc, 0x1f649e77, 0xd0fa89bf, 0x5b29b7a6, 0x94b7a06e, 0x8db5a00d, 0x422bb7c5, 0xc9f889dc, 0x06669e14, 0x052ff3af, 0xcab1e467, 0x4162da7e, 0x8efccdb6, 0x47f00108, 0x886e16c0, 0x03bd28d9, 0xcc233f11, 0xcf6a52aa, 0x00f44562, 0x8b277b7b, 0x44b96cb3, 0xc24fe446, 0x0dd1f38e, 0x8602cd97, 0x499cda5f, 0x4ad5b7e4, 0x854ba02c, 0x0e989e35, 0xc10689fd, 0x080a4543, 0xc794528b, 0x4c476c92, 0x83d97b5a, 0x809016e1, 0x4f0e0129, 0xc4dd3f30, 0x0b4328f8, 0xf6d93ff6, 0x3947283e, 0xb2941627, 0x7d0a01ef, 0x7e436c54, 0xb1dd7b9c, 0x3a0e4585, 0xf590524d, 0x3c9c9ef3, 0xf302893b, 0x78d1b722, 0xb74fa0ea, 0xb406cd51, 0x7b98da99, 0xf04be480, 0x3fd5f348, 0xb9237bbd, 0x76bd6c75, 0xfd6e526c, 0x32f045a4, 0x31b9281f, 0xfe273fd7, 0x75f401ce, 0xba6a1606, 0x7366dab8, 0xbcf8cd70, 0x372bf369, 0xf8b5e4a1, 0xfbfc891a, 0x34629ed2, 0xbfb1a0cb, 0x702fb703, 0x692db760, 0xa6b3a0a8, 0x2d609eb1, 0xe2fe8979, 0xe1b7e4c2, 0x2e29f30a, 0xa5facd13, 0x6a64dadb, 0xa3681665, 0x6cf601ad, 0xe7253fb4, 0x28bb287c, 0x2bf245c7, 0xe46c520f, 0x6fbf6c16, 0xa0217bde, 0x26d7f32b, 0xe949e4e3, 0x629adafa, 0xad04cd32, 0xae4da089, 0x61d3b741, 0xea008958, 0x259e9e90, 0xec92522e, 0x230c45e6, 0xa8df7bff, 0x67416c37, 0x6408018c, 0xab961644, 0x2045285d, 0xefdb3f95}, {0x00000000, 0x24825136, 0x4904a26c, 0x6d86f35a, 0x920944d8, 0xb68b15ee, 0xdb0de6b4, 0xff8fb782, 0xff638ff1, 0xdbe1dec7, 0xb6672d9d, 0x92e57cab, 0x6d6acb29, 0x49e89a1f, 0x246e6945, 0x00ec3873, 0x25b619a3, 0x01344895, 0x6cb2bbcf, 0x4830eaf9, 0xb7bf5d7b, 0x933d0c4d, 0xfebbff17, 0xda39ae21, 0xdad59652, 0xfe57c764, 0x93d1343e, 0xb7536508, 0x48dcd28a, 0x6c5e83bc, 0x01d870e6, 0x255a21d0, 0x4b6c3346, 0x6fee6270, 0x0268912a, 0x26eac01c, 0xd965779e, 0xfde726a8, 0x9061d5f2, 0xb4e384c4, 0xb40fbcb7, 0x908ded81, 0xfd0b1edb, 0xd9894fed, 0x2606f86f, 0x0284a959, 0x6f025a03, 0x4b800b35, 0x6eda2ae5, 0x4a587bd3, 0x27de8889, 0x035cd9bf, 0xfcd36e3d, 0xd8513f0b, 0xb5d7cc51, 0x91559d67, 0x91b9a514, 0xb53bf422, 0xd8bd0778, 0xfc3f564e, 0x03b0e1cc, 0x2732b0fa, 0x4ab443a0, 0x6e361296, 0x96d8668c, 0xb25a37ba, 0xdfdcc4e0, 0xfb5e95d6, 0x04d12254, 0x20537362, 0x4dd58038, 0x6957d10e, 0x69bbe97d, 0x4d39b84b, 0x20bf4b11, 0x043d1a27, 0xfbb2ada5, 0xdf30fc93, 0xb2b60fc9, 0x96345eff, 0xb36e7f2f, 0x97ec2e19, 0xfa6add43, 0xdee88c75, 0x21673bf7, 0x05e56ac1, 0x6863999b, 0x4ce1c8ad, 0x4c0df0de, 0x688fa1e8, 0x050952b2, 0x218b0384, 0xde04b406, 0xfa86e530, 0x9700166a, 0xb382475c, 0xddb455ca, 0xf93604fc, 0x94b0f7a6, 0xb032a690, 0x4fbd1112, 0x6b3f4024, 0x06b9b37e, 0x223be248, 0x22d7da3b, 0x06558b0d, 0x6bd37857, 0x4f512961, 0xb0de9ee3, 0x945ccfd5, 0xf9da3c8f, 0xdd586db9, 0xf8024c69, 0xdc801d5f, 0xb106ee05, 0x9584bf33, 0x6a0b08b1, 0x4e895987, 0x230faadd, 0x078dfbeb, 0x0761c398, 0x23e392ae, 0x4e6561f4, 0x6ae730c2, 0x95688740, 0xb1ead676, 0xdc6c252c, 0xf8ee741a, 0xf6c1cb59, 0xd2439a6f, 0xbfc56935, 0x9b473803, 0x64c88f81, 0x404adeb7, 0x2dcc2ded, 0x094e7cdb, 0x09a244a8, 0x2d20159e, 0x40a6e6c4, 0x6424b7f2, 0x9bab0070, 0xbf295146, 0xd2afa21c, 0xf62df32a, 0xd377d2fa, 0xf7f583cc, 0x9a737096, 0xbef121a0, 0x417e9622, 0x65fcc714, 0x087a344e, 0x2cf86578, 0x2c145d0b, 0x08960c3d, 0x6510ff67, 0x4192ae51, 0xbe1d19d3, 0x9a9f48e5, 0xf719bbbf, 0xd39bea89, 0xbdadf81f, 0x992fa929, 0xf4a95a73, 0xd02b0b45, 0x2fa4bcc7, 0x0b26edf1, 0x66a01eab, 0x42224f9d, 0x42ce77ee, 0x664c26d8, 0x0bcad582, 0x2f4884b4, 0xd0c73336, 0xf4456200, 0x99c3915a, 0xbd41c06c, 0x981be1bc, 0xbc99b08a, 0xd11f43d0, 0xf59d12e6, 0x0a12a564, 0x2e90f452, 0x43160708, 0x6794563e, 0x67786e4d, 0x43fa3f7b, 0x2e7ccc21, 0x0afe9d17, 0xf5712a95, 0xd1f37ba3, 0xbc7588f9, 0x98f7d9cf, 0x6019add5, 0x449bfce3, 0x291d0fb9, 0x0d9f5e8f, 0xf210e90d, 0xd692b83b, 0xbb144b61, 0x9f961a57, 0x9f7a2224, 0xbbf87312, 0xd67e8048, 0xf2fcd17e, 0x0d7366fc, 0x29f137ca, 0x4477c490, 0x60f595a6, 0x45afb476, 0x612de540, 0x0cab161a, 0x2829472c, 0xd7a6f0ae, 0xf324a198, 0x9ea252c2, 0xba2003f4, 0xbacc3b87, 0x9e4e6ab1, 0xf3c899eb, 0xd74ac8dd, 0x28c57f5f, 0x0c472e69, 0x61c1dd33, 0x45438c05, 0x2b759e93, 0x0ff7cfa5, 0x62713cff, 0x46f36dc9, 0xb97cda4b, 0x9dfe8b7d, 0xf0787827, 0xd4fa2911, 0xd4161162, 0xf0944054, 0x9d12b30e, 0xb990e238, 0x461f55ba, 0x629d048c, 0x0f1bf7d6, 0x2b99a6e0, 0x0ec38730, 0x2a41d606, 0x47c7255c, 0x6345746a, 0x9ccac3e8, 0xb84892de, 0xd5ce6184, 0xf14c30b2, 0xf1a008c1, 0xd52259f7, 0xb8a4aaad, 0x9c26fb9b, 0x63a94c19, 0x472b1d2f, 0x2aadee75, 0x0e2fbf43}, {0x00000000, 0x36f290f3, 0x6de521e6, 0x5b17b115, 0xdbca43cc, 0xed38d33f, 0xb62f622a, 0x80ddf2d9, 0x6ce581d9, 0x5a17112a, 0x0100a03f, 0x37f230cc, 0xb72fc215, 0x81dd52e6, 0xdacae3f3, 0xec387300, 0xd9cb03b2, 0xef399341, 0xb42e2254, 0x82dcb2a7, 0x0201407e, 0x34f3d08d, 0x6fe46198, 0x5916f16b, 0xb52e826b, 0x83dc1298, 0xd8cba38d, 0xee39337e, 0x6ee4c1a7, 0x58165154, 0x0301e041, 0x35f370b2, 0x68e70125, 0x5e1591d6, 0x050220c3, 0x33f0b030, 0xb32d42e9, 0x85dfd21a, 0xdec8630f, 0xe83af3fc, 0x040280fc, 0x32f0100f, 0x69e7a11a, 0x5f1531e9, 0xdfc8c330, 0xe93a53c3, 0xb22de2d6, 0x84df7225, 0xb12c0297, 0x87de9264, 0xdcc92371, 0xea3bb382, 0x6ae6415b, 0x5c14d1a8, 0x070360bd, 0x31f1f04e, 0xddc9834e, 0xeb3b13bd, 0xb02ca2a8, 0x86de325b, 0x0603c082, 0x30f15071, 0x6be6e164, 0x5d147197, 0xd1ce024a, 0xe73c92b9, 0xbc2b23ac, 0x8ad9b35f, 0x0a044186, 0x3cf6d175, 0x67e16060, 0x5113f093, 0xbd2b8393, 0x8bd91360, 0xd0cea275, 0xe63c3286, 0x66e1c05f, 0x501350ac, 0x0b04e1b9, 0x3df6714a, 0x080501f8, 0x3ef7910b, 0x65e0201e, 0x5312b0ed, 0xd3cf4234, 0xe53dd2c7, 0xbe2a63d2, 0x88d8f321, 0x64e08021, 0x521210d2, 0x0905a1c7, 0x3ff73134, 0xbf2ac3ed, 0x89d8531e, 0xd2cfe20b, 0xe43d72f8, 0xb929036f, 0x8fdb939c, 0xd4cc2289, 0xe23eb27a, 0x62e340a3, 0x5411d050, 0x0f066145, 0x39f4f1b6, 0xd5cc82b6, 0xe33e1245, 0xb829a350, 0x8edb33a3, 0x0e06c17a, 0x38f45189, 0x63e3e09c, 0x5511706f, 0x60e200dd, 0x5610902e, 0x0d07213b, 0x3bf5b1c8, 0xbb284311, 0x8ddad3e2, 0xd6cd62f7, 0xe03ff204, 0x0c078104, 0x3af511f7, 0x61e2a0e2, 0x57103011, 0xd7cdc2c8, 0xe13f523b, 0xba28e32e, 0x8cda73dd, 0x78ed02d5, 0x4e1f9226, 0x15082333, 0x23fab3c0, 0xa3274119, 0x95d5d1ea, 0xcec260ff, 0xf830f00c, 0x1408830c, 0x22fa13ff, 0x79eda2ea, 0x4f1f3219, 0xcfc2c0c0, 0xf9305033, 0xa227e126, 0x94d571d5, 0xa1260167, 0x97d49194, 0xccc32081, 0xfa31b072, 0x7aec42ab, 0x4c1ed258, 0x1709634d, 0x21fbf3be, 0xcdc380be, 0xfb31104d, 0xa026a158, 0x96d431ab, 0x1609c372, 0x20fb5381, 0x7bece294, 0x4d1e7267, 0x100a03f0, 0x26f89303, 0x7def2216, 0x4b1db2e5, 0xcbc0403c, 0xfd32d0cf, 0xa62561da, 0x90d7f129, 0x7cef8229, 0x4a1d12da, 0x110aa3cf, 0x27f8333c, 0xa725c1e5, 0x91d75116, 0xcac0e003, 0xfc3270f0, 0xc9c10042, 0xff3390b1, 0xa42421a4, 0x92d6b157, 0x120b438e, 0x24f9d37d, 0x7fee6268, 0x491cf29b, 0xa524819b, 0x93d61168, 0xc8c1a07d, 0xfe33308e, 0x7eeec257, 0x481c52a4, 0x130be3b1, 0x25f97342, 0xa923009f, 0x9fd1906c, 0xc4c62179, 0xf234b18a, 0x72e94353, 0x441bd3a0, 0x1f0c62b5, 0x29fef246, 0xc5c68146, 0xf33411b5, 0xa823a0a0, 0x9ed13053, 0x1e0cc28a, 0x28fe5279, 0x73e9e36c, 0x451b739f, 0x70e8032d, 0x461a93de, 0x1d0d22cb, 0x2bffb238, 0xab2240e1, 0x9dd0d012, 0xc6c76107, 0xf035f1f4, 0x1c0d82f4, 0x2aff1207, 0x71e8a312, 0x471a33e1, 0xc7c7c138, 0xf13551cb, 0xaa22e0de, 0x9cd0702d, 0xc1c401ba, 0xf7369149, 0xac21205c, 0x9ad3b0af, 0x1a0e4276, 0x2cfcd285, 0x77eb6390, 0x4119f363, 0xad218063, 0x9bd31090, 0xc0c4a185, 0xf6363176, 0x76ebc3af, 0x4019535c, 0x1b0ee249, 0x2dfc72ba, 0x180f0208, 0x2efd92fb, 0x75ea23ee, 0x4318b31d, 0xc3c541c4, 0xf537d137, 0xae206022, 0x98d2f0d1, 0x74ea83d1, 0x42181322, 0x190fa237, 0x2ffd32c4, 0xaf20c01d, 0x99d250ee, 0xc2c5e1fb, 0xf4377108}}"
            ]
        },
        {
            "path": null,
            "name": "crc_braid_big_table",
            "type": "const z_word_t [][256]",
            "definition": [
                "static const z_word_t crc_braid_big_table[][256] = {{0x0000000000000000, 0xf390f23600000000, 0xe621e56d00000000, 0x15b1175b00000000, 0xcc43cadb00000000, 0x3fd338ed00000000, 0x2a622fb600000000, 0xd9f2dd8000000000, 0xd981e56c00000000, 0x2a11175a00000000, 0x3fa0000100000000, 0xcc30f23700000000, 0x15c22fb700000000, 0xe652dd8100000000, 0xf3e3cada00000000, 0x007338ec00000000, 0xb203cbd900000000, 0x419339ef00000000, 0x54222eb400000000, 0xa7b2dc8200000000, 0x7e40010200000000, 0x8dd0f33400000000, 0x9861e46f00000000, 0x6bf1165900000000, 0x6b822eb500000000, 0x9812dc8300000000, 0x8da3cbd800000000, 0x7e3339ee00000000, 0xa7c1e46e00000000, 0x5451165800000000, 0x41e0010300000000, 0xb270f33500000000, 0x2501e76800000000, 0xd691155e00000000, 0xc320020500000000, 0x30b0f03300000000, 0xe9422db300000000, 0x1ad2df8500000000, 0x0f63c8de00000000, 0xfcf33ae800000000, 0xfc80020400000000, 0x0f10f03200000000, 0x1aa1e76900000000, 0xe931155f00000000, 0x30c3c8df00000000, 0xc3533ae900000000, 0xd6e22db200000000, 0x2572df8400000000, 0x97022cb100000000, 0x6492de8700000000, 0x7123c9dc00000000, 0x82b33bea00000000, 0x5b41e66a00000000, 0xa8d1145c00000000, 0xbd60030700000000, 0x4ef0f13100000000, 0x4e83c9dd00000000, 0xbd133beb00000000, 0xa8a22cb000000000, 0x5b32de8600000000, 0x82c0030600000000, 0x7150f13000000000, 0x64e1e66b00000000, 0x9771145d00000000, 0x4a02ced100000000, 0xb9923ce700000000, 0xac232bbc00000000, 0x5fb3d98a00000000, 0x8641040a00000000, 0x75d1f63c00000000, 0x6060e16700000000, 0x93f0135100000000, 0x93832bbd00000000, 0x6013d98b00000000, 0x75a2ced000000000, 0x86323ce600000000, 0x5fc0e16600000000, 0xac50135000000000, 0xb9e1040b00000000, 0x4a71f63d00000000, 0xf801050800000000, 0x0b91f73e00000000, 0x1e20e06500000000, 0xedb0125300000000, 0x3442cfd300000000, 0xc7d23de500000000, 0xd2632abe00000000, 0x21f3d88800000000, 0x2180e06400000000, 0xd210125200000000, 0xc7a1050900000000, 0x3431f73f00000000, 0xedc32abf00000000, 0x1e53d88900000000, 0x0be2cfd200000000, 0xf8723de400000000, 0x6f0329b900000000, 0x9c93db8f00000000, 0x8922ccd400000000, 0x7ab23ee200000000, 0xa340e36200000000, 0x50d0115400000000, 0x4561060f00000000, 0xb6f1f43900000000, 0xb682ccd500000000, 0x45123ee300000000, 0x50a329b800000000, 0xa333db8e00000000, 0x7ac1060e00000000, 0x8951f43800000000, 0x9ce0e36300000000, 0x6f70115500000000, 0xdd00e26000000000, 0x2e90105600000000, 0x3b21070d00000000, 0xc8b1f53b00000000, 0x114328bb00000000, 0xe2d3da8d00000000, 0xf762cdd600000000, 0x04f23fe000000000, 0x0481070c00000000, 0xf711f53a00000000, 0xe2a0e26100000000, 0x1130105700000000, 0xc8c2cdd700000000, 0x3b523fe100000000, 0x2ee328ba00000000, 0xdd73da8c00000000, 0xd502ed7800000000, 0x26921f4e00000000, 0x3323081500000000, 0xc0b3fa2300000000, 0x194127a300000000, 0xead1d59500000000, 0xff60c2ce00000000, 0x0cf030f800000000, 0x0c83081400000000, 0xff13fa2200000000, 0xeaa2ed7900000000, 0x19321f4f00000000, 0xc0c0c2cf00000000, 0x335030f900000000, 0x26e127a200000000, 0xd571d59400000000, 0x670126a100000000, 0x9491d49700000000, 0x8120c3cc00000000, 0x72b031fa00000000, 0xab42ec7a00000000, 0x58d21e4c00000000, 0x4d63091700000000, 0xbef3fb2100000000, 0xbe80c3cd00000000, 0x4d1031fb00000000, 0x58a126a000000000, 0xab31d49600000000, 0x72c3091600000000, 0x8153fb2000000000, 0x94e2ec7b00000000, 0x67721e4d00000000, 0xf0030a1000000000, 0x0393f82600000000, 0x1622ef7d00000000, 0xe5b21d4b00000000, 0x3c40c0cb00000000, 0xcfd032fd00000000, 0xda6125a600000000, 0x29f1d79000000000, 0x2982ef7c00000000, 0xda121d4a00000000, 0xcfa30a1100000000, 0x3c33f82700000000, 0xe5c125a700000000, 0x1651d79100000000, 0x03e0c0ca00000000, 0xf07032fc00000000, 0x4200c1c900000000, 0xb19033ff00000000, 0xa42124a400000000, 0x57b1d69200000000, 0x8e430b1200000000, 0x7dd3f92400000000, 0x6862ee7f00000000, 0x9bf21c4900000000, 0x9b8124a500000000, 0x6811d69300000000, 0x7da0c1c800000000, 0x8e3033fe00000000, 0x57c2ee7e00000000, 0xa4521c4800000000, 0xb1e30b1300000000, 0x4273f92500000000, 0x9f0023a900000000, 0x6c90d19f00000000, 0x7921c6c400000000, 0x8ab134f200000000, 0x5343e97200000000, 0xa0d31b4400000000, 0xb5620c1f00000000, 0x46f2fe2900000000, 0x4681c6c500000000, 0xb51134f300000000, 0xa0a023a800000000, 0x5330d19e00000000, 0x8ac20c1e00000000, 0x7952fe2800000000, 0x6ce3e97300000000, 0x9f731b4500000000, 0x2d03e87000000000, 0xde931a4600000000, 0xcb220d1d00000000, 0x38b2ff2b00000000, 0xe14022ab00000000, 0x12d0d09d00000000, 0x0761c7c600000000, 0xf4f135f000000000, 0xf4820d1c00000000, 0x0712ff2a00000000, 0x12a3e87100000000, 0xe1331a4700000000, 0x38c1c7c700000000, 0xcb5135f100000000, 0xdee022aa00000000, 0x2d70d09c00000000, 0xba01c4c100000000, 0x499136f700000000, 0x5c2021ac00000000, 0xafb0d39a00000000, 0x76420e1a00000000, 0x85d2fc2c00000000, 0x9063eb7700000000, 0x63f3194100000000, 0x638021ad00000000, 0x9010d39b00000000, 0x85a1c4c000000000, 0x763136f600000000, 0xafc3eb7600000000, 0x5c53194000000000, 0x49e20e1b00000000, 0xba72fc2d00000000, 0x08020f1800000000, 0xfb92fd2e00000000, 0xee23ea7500000000, 0x1db3184300000000, 0xc441c5c300000000, 0x37d137f500000000, 0x226020ae00000000, 0xd1f0d29800000000, 0xd183ea7400000000, 0x2213184200000000, 0x37a20f1900000000, 0xc432fd2f00000000, 0x1dc020af00000000, 0xee50d29900000000, 0xfbe1c5c200000000, 0x087137f400000000}, {0x0000000000000000, 0x3651822400000000, 0x6ca2044900000000, 0x5af3866d00000000, 0xd844099200000000, 0xee158bb600000000, 0xb4e60ddb00000000, 0x82b78fff00000000, 0xf18f63ff00000000, 0xc7dee1db00000000, 0x9d2d67b600000000, 0xab7ce59200000000, 0x29cb6a6d00000000, 0x1f9ae84900000000, 0x45696e2400000000, 0x7338ec0000000000, 0xa319b62500000000, 0x9548340100000000, 0xcfbbb26c00000000, 0xf9ea304800000000, 0x7b5dbfb700000000, 0x4d0c3d9300000000, 0x17ffbbfe00000000, 0x21ae39da00000000, 0x5296d5da00000000, 0x64c757fe00000000, 0x3e34d19300000000, 0x086553b700000000, 0x8ad2dc4800000000, 0xbc835e6c00000000, 0xe670d80100000000, 0xd0215a2500000000, 0x46336c4b00000000, 0x7062ee6f00000000, 0x2a91680200000000, 0x1cc0ea2600000000, 0x9e7765d900000000, 0xa826e7fd00000000, 0xf2d5619000000000, 0xc484e3b400000000, 0xb7bc0fb400000000, 0x81ed8d9000000000, 0xdb1e0bfd00000000, 0xed4f89d900000000, 0x6ff8062600000000, 0x59a9840200000000, 0x035a026f00000000, 0x350b804b00000000, 0xe52ada6e00000000, 0xd37b584a00000000, 0x8988de2700000000, 0xbfd95c0300000000, 0x3d6ed3fc00000000, 0x0b3f51d800000000, 0x51ccd7b500000000, 0x679d559100000000, 0x14a5b99100000000, 0x22f43bb500000000, 0x7807bdd800000000, 0x4e563ffc00000000, 0xcce1b00300000000, 0xfab0322700000000, 0xa043b44a00000000, 0x9612366e00000000, 0x8c66d89600000000, 0xba375ab200000000, 0xe0c4dcdf00000000, 0xd6955efb00000000, 0x5422d10400000000, 0x6273532000000000, 0x3880d54d00000000, 0x0ed1576900000000, 0x7de9bb6900000000, 0x4bb8394d00000000, 0x114bbf2000000000, 0x271a3d0400000000, 0xa5adb2fb00000000, 0x93fc30df00000000, 0xc90fb6b200000000, 0xff5e349600000000, 0x2f7f6eb300000000, 0x192eec9700000000, 0x43dd6afa00000000, 0x758ce8de00000000, 0xf73b672100000000, 0xc16ae50500000000, 0x9b99636800000000, 0xadc8e14c00000000, 0xdef00d4c00000000, 0xe8a18f6800000000, 0xb252090500000000, 0x84038b2100000000, 0x06b404de00000000, 0x30e586fa00000000, 0x6a16009700000000, 0x5c4782b300000000, 0xca55b4dd00000000, 0xfc0436f900000000, 0xa6f7b09400000000, 0x90a632b000000000, 0x1211bd4f00000000, 0x24403f6b00000000, 0x7eb3b90600000000, 0x48e23b2200000000, 0x3bdad72200000000, 0x0d8b550600000000, 0x5778d36b00000000, 0x6129514f00000000, 0xe39edeb000000000, 0xd5cf5c9400000000, 0x8f3cdaf900000000, 0xb96d58dd00000000, 0x694c02f800000000, 0x5f1d80dc00000000, 0x05ee06b100000000, 0x33bf849500000000, 0xb1080b6a00000000, 0x8759894e00000000, 0xddaa0f2300000000, 0xebfb8d0700000000, 0x98c3610700000000, 0xae92e32300000000, 0xf461654e00000000, 0xc230e76a00000000, 0x4087689500000000, 0x76d6eab100000000, 0x2c256cdc00000000, 0x1a74eef800000000, 0x59cbc1f600000000, 0x6f9a43d200000000, 0x3569c5bf00000000, 0x0338479b00000000, 0x818fc86400000000, 0xb7de4a4000000000, 0xed2dcc2d00000000, 0xdb7c4e0900000000, 0xa844a20900000000, 0x9e15202d00000000, 0xc4e6a64000000000, 0xf2b7246400000000, 0x7000ab9b00000000, 0x465129bf00000000, 0x1ca2afd200000000, 0x2af32df600000000, 0xfad277d300000000, 0xcc83f5f700000000, 0x9670739a00000000, 0xa021f1be00000000, 0x22967e4100000000, 0x14c7fc6500000000, 0x4e347a0800000000, 0x7865f82c00000000, 0x0b5d142c00000000, 0x3d0c960800000000, 0x67ff106500000000, 0x51ae924100000000, 0xd3191dbe00000000, 0xe5489f9a00000000, 0xbfbb19f700000000, 0x89ea9bd300000000, 0x1ff8adbd00000000, 0x29a92f9900000000, 0x735aa9f400000000, 0x450b2bd000000000, 0xc7bca42f00000000, 0xf1ed260b00000000, 0xab1ea06600000000, 0x9d4f224200000000, 0xee77ce4200000000, 0xd8264c6600000000, 0x82d5ca0b00000000, 0xb484482f00000000, 0x3633c7d000000000, 0x006245f400000000, 0x5a91c39900000000, 0x6cc041bd00000000, 0xbce11b9800000000, 0x8ab099bc00000000, 0xd0431fd100000000, 0xe6129df500000000, 0x64a5120a00000000, 0x52f4902e00000000, 0x0807164300000000, 0x3e56946700000000, 0x4d6e786700000000, 0x7b3ffa4300000000, 0x21cc7c2e00000000, 0x179dfe0a00000000, 0x952a71f500000000, 0xa37bf3d100000000, 0xf98875bc00000000, 0xcfd9f79800000000, 0xd5ad196000000000, 0xe3fc9b4400000000, 0xb90f1d2900000000, 0x8f5e9f0d00000000, 0x0de910f200000000, 0x3bb892d600000000, 0x614b14bb00000000, 0x571a969f00000000, 0x24227a9f00000000, 0x1273f8bb00000000, 0x48807ed600000000, 0x7ed1fcf200000000, 0xfc66730d00000000, 0xca37f12900000000, 0x90c4774400000000, 0xa695f56000000000, 0x76b4af4500000000, 0x40e52d6100000000, 0x1a16ab0c00000000, 0x2c47292800000000, 0xaef0a6d700000000, 0x98a124f300000000, 0xc252a29e00000000, 0xf40320ba00000000, 0x873bccba00000000, 0xb16a4e9e00000000, 0xeb99c8f300000000, 0xddc84ad700000000, 0x5f7fc52800000000, 0x692e470c00000000, 0x33ddc16100000000, 0x058c434500000000, 0x939e752b00000000, 0xa5cff70f00000000, 0xff3c716200000000, 0xc96df34600000000, 0x4bda7cb900000000, 0x7d8bfe9d00000000, 0x277878f000000000, 0x1129fad400000000, 0x621116d400000000, 0x544094f000000000, 0x0eb3129d00000000, 0x38e290b900000000, 0xba551f4600000000, 0x8c049d6200000000, 0xd6f71b0f00000000, 0xe0a6992b00000000, 0x3087c30e00000000, 0x06d6412a00000000, 0x5c25c74700000000, 0x6a74456300000000, 0xe8c3ca9c00000000, 0xde9248b800000000, 0x8461ced500000000, 0xb2304cf100000000, 0xc108a0f100000000, 0xf75922d500000000, 0xadaaa4b800000000, 0x9bfb269c00000000, 0x194ca96300000000, 0x2f1d2b4700000000, 0x75eead2a00000000, 0x43bf2f0e00000000}, {0x0000000000000000, 0xc8179ecf00000000, 0xd1294d4400000000, 0x193ed38b00000000, 0xa2539a8800000000, 0x6a44044700000000, 0x737ad7cc00000000, 0xbb6d490300000000, 0x05a145ca00000000, 0xcdb6db0500000000, 0xd488088e00000000, 0x1c9f964100000000, 0xa7f2df4200000000, 0x6fe5418d00000000, 0x76db920600000000, 0xbecc0cc900000000, 0x4b44fa4f00000000, 0x8353648000000000, 0x9a6db70b00000000, 0x527a29c400000000, 0xe91760c700000000, 0x2100fe0800000000, 0x383e2d8300000000, 0xf029b34c00000000, 0x4ee5bf8500000000, 0x86f2214a00000000, 0x9fccf2c100000000, 0x57db6c0e00000000, 0xecb6250d00000000, 0x24a1bbc200000000, 0x3d9f684900000000, 0xf588f68600000000, 0x9688f49f00000000, 0x5e9f6a5000000000, 0x47a1b9db00000000, 0x8fb6271400000000, 0x34db6e1700000000, 0xfcccf0d800000000, 0xe5f2235300000000, 0x2de5bd9c00000000, 0x9329b15500000000, 0x5b3e2f9a00000000, 0x4200fc1100000000, 0x8a1762de00000000, 0x317a2bdd00000000, 0xf96db51200000000, 0xe053669900000000, 0x2844f85600000000, 0xddcc0ed000000000, 0x15db901f00000000, 0x0ce5439400000000, 0xc4f2dd5b00000000, 0x7f9f945800000000, 0xb7880a9700000000, 0xaeb6d91c00000000, 0x66a147d300000000, 0xd86d4b1a00000000, 0x107ad5d500000000, 0x0944065e00000000, 0xc153989100000000, 0x7a3ed19200000000, 0xb2294f5d00000000, 0xab179cd600000000, 0x6300021900000000, 0x6d1798e400000000, 0xa500062b00000000, 0xbc3ed5a000000000, 0x74294b6f00000000, 0xcf44026c00000000, 0x07539ca300000000, 0x1e6d4f2800000000, 0xd67ad1e700000000, 0x68b6dd2e00000000, 0xa0a143e100000000, 0xb99f906a00000000, 0x71880ea500000000, 0xcae547a600000000, 0x02f2d96900000000, 0x1bcc0ae200000000, 0xd3db942d00000000, 0x265362ab00000000, 0xee44fc6400000000, 0xf77a2fef00000000, 0x3f6db12000000000, 0x8400f82300000000, 0x4c1766ec00000000, 0x5529b56700000000, 0x9d3e2ba800000000, 0x23f2276100000000, 0xebe5b9ae00000000, 0xf2db6a2500000000, 0x3accf4ea00000000, 0x81a1bde900000000, 0x49b6232600000000, 0x5088f0ad00000000, 0x989f6e6200000000, 0xfb9f6c7b00000000, 0x3388f2b400000000, 0x2ab6213f00000000, 0xe2a1bff000000000, 0x59ccf6f300000000, 0x91db683c00000000, 0x88e5bbb700000000, 0x40f2257800000000, 0xfe3e29b100000000, 0x3629b77e00000000, 0x2f1764f500000000, 0xe700fa3a00000000, 0x5c6db33900000000, 0x947a2df600000000, 0x8d44fe7d00000000, 0x455360b200000000, 0xb0db963400000000, 0x78cc08fb00000000, 0x61f2db7000000000, 0xa9e545bf00000000, 0x12880cbc00000000, 0xda9f927300000000, 0xc3a141f800000000, 0x0bb6df3700000000, 0xb57ad3fe00000000, 0x7d6d4d3100000000, 0x64539eba00000000, 0xac44007500000000, 0x1729497600000000, 0xdf3ed7b900000000, 0xc600043200000000, 0x0e179afd00000000, 0x9b28411200000000, 0x533fdfdd00000000, 0x4a010c5600000000, 0x8216929900000000, 0x397bdb9a00000000, 0xf16c455500000000, 0xe85296de00000000, 0x2045081100000000, 0x9e8904d800000000, 0x569e9a1700000000, 0x4fa0499c00000000, 0x87b7d75300000000, 0x3cda9e5000000000, 0xf4cd009f00000000, 0xedf3d31400000000, 0x25e44ddb00000000, 0xd06cbb5d00000000, 0x187b259200000000, 0x0145f61900000000, 0xc95268d600000000, 0x723f21d500000000, 0xba28bf1a00000000, 0xa3166c9100000000, 0x6b01f25e00000000, 0xd5cdfe9700000000, 0x1dda605800000000, 0x04e4b3d300000000, 0xccf32d1c00000000, 0x779e641f00000000, 0xbf89fad000000000, 0xa6b7295b00000000, 0x6ea0b79400000000, 0x0da0b58d00000000, 0xc5b72b4200000000, 0xdc89f8c900000000, 0x149e660600000000, 0xaff32f0500000000, 0x67e4b1ca00000000, 0x7eda624100000000, 0xb6cdfc8e00000000, 0x0801f04700000000, 0xc0166e8800000000, 0xd928bd0300000000, 0x113f23cc00000000, 0xaa526acf00000000, 0x6245f40000000000, 0x7b7b278b00000000, 0xb36cb94400000000, 0x46e44fc200000000, 0x8ef3d10d00000000, 0x97cd028600000000, 0x5fda9c4900000000, 0xe4b7d54a00000000, 0x2ca04b8500000000, 0x359e980e00000000, 0xfd8906c100000000, 0x43450a0800000000, 0x8b5294c700000000, 0x926c474c00000000, 0x5a7bd98300000000, 0xe116908000000000, 0x29010e4f00000000, 0x303fddc400000000, 0xf828430b00000000, 0xf63fd9f600000000, 0x3e28473900000000, 0x271694b200000000, 0xef010a7d00000000, 0x546c437e00000000, 0x9c7bddb100000000, 0x85450e3a00000000, 0x4d5290f500000000, 0xf39e9c3c00000000, 0x3b8902f300000000, 0x22b7d17800000000, 0xeaa04fb700000000, 0x51cd06b400000000, 0x99da987b00000000, 0x80e44bf000000000, 0x48f3d53f00000000, 0xbd7b23b900000000, 0x756cbd7600000000, 0x6c526efd00000000, 0xa445f03200000000, 0x1f28b93100000000, 0xd73f27fe00000000, 0xce01f47500000000, 0x06166aba00000000, 0xb8da667300000000, 0x70cdf8bc00000000, 0x69f32b3700000000, 0xa1e4b5f800000000, 0x1a89fcfb00000000, 0xd29e623400000000, 0xcba0b1bf00000000, 0x03b72f7000000000, 0x60b72d6900000000, 0xa8a0b3a600000000, 0xb19e602d00000000, 0x7989fee200000000, 0xc2e4b7e100000000, 0x0af3292e00000000, 0x13cdfaa500000000, 0xdbda646a00000000, 0x651668a300000000, 0xad01f66c00000000, 0xb43f25e700000000, 0x7c28bb2800000000, 0xc745f22b00000000, 0x0f526ce400000000, 0x166cbf6f00000000, 0xde7b21a000000000, 0x2bf3d72600000000, 0xe3e449e900000000, 0xfada9a6200000000, 0x32cd04ad00000000, 0x89a04dae00000000, 0x41b7d36100000000, 0x588900ea00000000, 0x909e9e2500000000, 0x2e5292ec00000000, 0xe6450c2300000000, 0xff7bdfa800000000, 0x376c416700000000, 0x8c01086400000000, 0x441696ab00000000, 0x5d28452000000000, 0x953fdbef00000000}, {0x0000000000000000, 0x95d4709500000000, 0x6baf90f100000000, 0xfe7be06400000000, 0x9758503800000000, 0x028c20ad00000000, 0xfcf7c0c900000000, 0x6923b05c00000000, 0x2eb1a07000000000, 0xbb65d0e500000000, 0x451e308100000000, 0xd0ca401400000000, 0xb9e9f04800000000, 0x2c3d80dd00000000, 0xd24660b900000000, 0x4792102c00000000, 0x5c6241e100000000, 0xc9b6317400000000, 0x37cdd11000000000, 0xa219a18500000000, 0xcb3a11d900000000, 0x5eee614c00000000, 0xa095812800000000, 0x3541f1bd00000000, 0x72d3e19100000000, 0xe707910400000000, 0x197c716000000000, 0x8ca801f500000000, 0xe58bb1a900000000, 0x705fc13c00000000, 0x8e24215800000000, 0x1bf051cd00000000, 0xf9c2f31900000000, 0x6c16838c00000000, 0x926d63e800000000, 0x07b9137d00000000, 0x6e9aa32100000000, 0xfb4ed3b400000000, 0x053533d000000000, 0x90e1434500000000, 0xd773536900000000, 0x42a723fc00000000, 0xbcdcc39800000000, 0x2908b30d00000000, 0x402b035100000000, 0xd5ff73c400000000, 0x2b8493a000000000, 0xbe50e33500000000, 0xa5a0b2f800000000, 0x3074c26d00000000, 0xce0f220900000000, 0x5bdb529c00000000, 0x32f8e2c000000000, 0xa72c925500000000, 0x5957723100000000, 0xcc8302a400000000, 0x8b11128800000000, 0x1ec5621d00000000, 0xe0be827900000000, 0x756af2ec00000000, 0x1c4942b000000000, 0x899d322500000000, 0x77e6d24100000000, 0xe232a2d400000000, 0xf285e73300000000, 0x675197a600000000, 0x992a77c200000000, 0x0cfe075700000000, 0x65ddb70b00000000, 0xf009c79e00000000, 0x0e7227fa00000000, 0x9ba6576f00000000, 0xdc34474300000000, 0x49e037d600000000, 0xb79bd7b200000000, 0x224fa72700000000, 0x4b6c177b00000000, 0xdeb867ee00000000, 0x20c3878a00000000, 0xb517f71f00000000, 0xaee7a6d200000000, 0x3b33d64700000000, 0xc548362300000000, 0x509c46b600000000, 0x39bff6ea00000000, 0xac6b867f00000000, 0x5210661b00000000, 0xc7c4168e00000000, 0x805606a200000000, 0x1582763700000000, 0xebf9965300000000, 0x7e2de6c600000000, 0x170e569a00000000, 0x82da260f00000000, 0x7ca1c66b00000000, 0xe975b6fe00000000, 0x0b47142a00000000, 0x9e9364bf00000000, 0x60e884db00000000, 0xf53cf44e00000000, 0x9c1f441200000000, 0x09cb348700000000, 0xf7b0d4e300000000, 0x6264a47600000000, 0x25f6b45a00000000, 0xb022c4cf00000000, 0x4e5924ab00000000, 0xdb8d543e00000000, 0xb2aee46200000000, 0x277a94f700000000, 0xd901749300000000, 0x4cd5040600000000, 0x572555cb00000000, 0xc2f1255e00000000, 0x3c8ac53a00000000, 0xa95eb5af00000000, 0xc07d05f300000000, 0x55a9756600000000, 0xabd2950200000000, 0x3e06e59700000000, 0x7994f5bb00000000, 0xec40852e00000000, 0x123b654a00000000, 0x87ef15df00000000, 0xeecca58300000000, 0x7b18d51600000000, 0x8563357200000000, 0x10b745e700000000, 0xe40bcf6700000000, 0x71dfbff200000000, 0x8fa45f9600000000, 0x1a702f0300000000, 0x73539f5f00000000, 0xe687efca00000000, 0x18fc0fae00000000, 0x8d287f3b00000000, 0xcaba6f1700000000, 0x5f6e1f8200000000, 0xa115ffe600000000, 0x34c18f7300000000, 0x5de23f2f00000000, 0xc8364fba00000000, 0x364dafde00000000, 0xa399df4b00000000, 0xb8698e8600000000, 0x2dbdfe1300000000, 0xd3c61e7700000000, 0x46126ee200000000, 0x2f31debe00000000, 0xbae5ae2b00000000, 0x449e4e4f00000000, 0xd14a3eda00000000, 0x96d82ef600000000, 0x030c5e6300000000, 0xfd77be0700000000, 0x68a3ce9200000000, 0x01807ece00000000, 0x94540e5b00000000, 0x6a2fee3f00000000, 0xfffb9eaa00000000, 0x1dc93c7e00000000, 0x881d4ceb00000000, 0x7666ac8f00000000, 0xe3b2dc1a00000000, 0x8a916c4600000000, 0x1f451cd300000000, 0xe13efcb700000000, 0x74ea8c2200000000, 0x33789c0e00000000, 0xa6acec9b00000000, 0x58d70cff00000000, 0xcd037c6a00000000, 0xa420cc3600000000, 0x31f4bca300000000, 0xcf8f5cc700000000, 0x5a5b2c5200000000, 0x41ab7d9f00000000, 0xd47f0d0a00000000, 0x2a04ed6e00000000, 0xbfd09dfb00000000, 0xd6f32da700000000, 0x43275d3200000000, 0xbd5cbd5600000000, 0x2888cdc300000000, 0x6f1addef00000000, 0xfacead7a00000000, 0x04b54d1e00000000, 0x91613d8b00000000, 0xf8428dd700000000, 0x6d96fd4200000000, 0x93ed1d2600000000, 0x06396db300000000, 0x168e285400000000, 0x835a58c100000000, 0x7d21b8a500000000, 0xe8f5c83000000000, 0x81d6786c00000000, 0x140208f900000000, 0xea79e89d00000000, 0x7fad980800000000, 0x383f882400000000, 0xadebf8b100000000, 0x539018d500000000, 0xc644684000000000, 0xaf67d81c00000000, 0x3ab3a88900000000, 0xc4c848ed00000000, 0x511c387800000000, 0x4aec69b500000000, 0xdf38192000000000, 0x2143f94400000000, 0xb49789d100000000, 0xddb4398d00000000, 0x4860491800000000, 0xb61ba97c00000000, 0x23cfd9e900000000, 0x645dc9c500000000, 0xf189b95000000000, 0x0ff2593400000000, 0x9a2629a100000000, 0xf30599fd00000000, 0x66d1e96800000000, 0x98aa090c00000000, 0x0d7e799900000000, 0xef4cdb4d00000000, 0x7a98abd800000000, 0x84e34bbc00000000, 0x11373b2900000000, 0x78148b7500000000, 0xedc0fbe000000000, 0x13bb1b8400000000, 0x866f6b1100000000, 0xc1fd7b3d00000000, 0x54290ba800000000, 0xaa52ebcc00000000, 0x3f869b5900000000, 0x56a52b0500000000, 0xc3715b9000000000, 0x3d0abbf400000000, 0xa8decb6100000000, 0xb32e9aac00000000, 0x26faea3900000000, 0xd8810a5d00000000, 0x4d557ac800000000, 0x2476ca9400000000, 0xb1a2ba0100000000, 0x4fd95a6500000000, 0xda0d2af000000000, 0x9d9f3adc00000000, 0x084b4a4900000000, 0xf630aa2d00000000, 0x63e4dab800000000, 0x0ac76ae400000000, 0x9f131a7100000000, 0x6168fa1500000000, 0xf4bc8a8000000000}, {0x0000000000000000, 0x1f17f08000000000, 0x7f2891da00000000, 0x603f615a00000000, 0xbf56536e00000000, 0xa041a3ee00000000, 0xc07ec2b400000000, 0xdf69323400000000, 0x7eada6dc00000000, 0x61ba565c00000000, 0x0185370600000000, 0x1e92c78600000000, 0xc1fbf5b200000000, 0xdeec053200000000, 0xbed3646800000000, 0xa1c494e800000000, 0xbd5c3c6200000000, 0xa24bcce200000000, 0xc274adb800000000, 0xdd635d3800000000, 0x020a6f0c00000000, 0x1d1d9f8c00000000, 0x7d22fed600000000, 0x62350e5600000000, 0xc3f19abe00000000, 0xdce66a3e00000000, 0xbcd90b6400000000, 0xa3cefbe400000000, 0x7ca7c9d000000000, 0x63b0395000000000, 0x038f580a00000000, 0x1c98a88a00000000, 0x7ab978c400000000, 0x65ae884400000000, 0x0591e91e00000000, 0x1a86199e00000000, 0xc5ef2baa00000000, 0xdaf8db2a00000000, 0xbac7ba7000000000, 0xa5d04af000000000, 0x0414de1800000000, 0x1b032e9800000000, 0x7b3c4fc200000000, 0x642bbf4200000000, 0xbb428d7600000000, 0xa4557df600000000, 0xc46a1cac00000000, 0xdb7dec2c00000000, 0xc7e544a600000000, 0xd8f2b42600000000, 0xb8cdd57c00000000, 0xa7da25fc00000000, 0x78b317c800000000, 0x67a4e74800000000, 0x079b861200000000, 0x188c769200000000, 0xb948e27a00000000, 0xa65f12fa00000000, 0xc66073a000000000, 0xd977832000000000, 0x061eb11400000000, 0x1909419400000000, 0x793620ce00000000, 0x6621d04e00000000, 0xb574805300000000, 0xaa6370d300000000, 0xca5c118900000000, 0xd54be10900000000, 0x0a22d33d00000000, 0x153523bd00000000, 0x750a42e700000000, 0x6a1db26700000000, 0xcbd9268f00000000, 0xd4ced60f00000000, 0xb4f1b75500000000, 0xabe647d500000000, 0x748f75e100000000, 0x6b98856100000000, 0x0ba7e43b00000000, 0x14b014bb00000000, 0x0828bc3100000000, 0x173f4cb100000000, 0x77002deb00000000, 0x6817dd6b00000000, 0xb77eef5f00000000, 0xa8691fdf00000000, 0xc8567e8500000000, 0xd7418e0500000000, 0x76851aed00000000, 0x6992ea6d00000000, 0x09ad8b3700000000, 0x16ba7bb700000000, 0xc9d3498300000000, 0xd6c4b90300000000, 0xb6fbd85900000000, 0xa9ec28d900000000, 0xcfcdf89700000000, 0xd0da081700000000, 0xb0e5694d00000000, 0xaff299cd00000000, 0x709babf900000000, 0x6f8c5b7900000000, 0x0fb33a2300000000, 0x10a4caa300000000, 0xb1605e4b00000000, 0xae77aecb00000000, 0xce48cf9100000000, 0xd15f3f1100000000, 0x0e360d2500000000, 0x1121fda500000000, 0x711e9cff00000000, 0x6e096c7f00000000, 0x7291c4f500000000, 0x6d86347500000000, 0x0db9552f00000000, 0x12aea5af00000000, 0xcdc7979b00000000, 0xd2d0671b00000000, 0xb2ef064100000000, 0xadf8f6c100000000, 0x0c3c622900000000, 0x132b92a900000000, 0x7314f3f300000000, 0x6c03037300000000, 0xb36a314700000000, 0xac7dc1c700000000, 0xcc42a09d00000000, 0xd355501d00000000, 0x6ae900a700000000, 0x75fef02700000000, 0x15c1917d00000000, 0x0ad661fd00000000, 0xd5bf53c900000000, 0xcaa8a34900000000, 0xaa97c21300000000, 0xb580329300000000, 0x1444a67b00000000, 0x0b5356fb00000000, 0x6b6c37a100000000, 0x747bc72100000000, 0xab12f51500000000, 0xb405059500000000, 0xd43a64cf00000000, 0xcb2d944f00000000, 0xd7b53cc500000000, 0xc8a2cc4500000000, 0xa89dad1f00000000, 0xb78a5d9f00000000, 0x68e36fab00000000, 0x77f49f2b00000000, 0x17cbfe7100000000, 0x08dc0ef100000000, 0xa9189a1900000000, 0xb60f6a9900000000, 0xd6300bc300000000, 0xc927fb4300000000, 0x164ec97700000000, 0x095939f700000000, 0x696658ad00000000, 0x7671a82d00000000, 0x1050786300000000, 0x0f4788e300000000, 0x6f78e9b900000000, 0x706f193900000000, 0xaf062b0d00000000, 0xb011db8d00000000, 0xd02ebad700000000, 0xcf394a5700000000, 0x6efddebf00000000, 0x71ea2e3f00000000, 0x11d54f6500000000, 0x0ec2bfe500000000, 0xd1ab8dd100000000, 0xcebc7d5100000000, 0xae831c0b00000000, 0xb194ec8b00000000, 0xad0c440100000000, 0xb21bb48100000000, 0xd224d5db00000000, 0xcd33255b00000000, 0x125a176f00000000, 0x0d4de7ef00000000, 0x6d7286b500000000, 0x7265763500000000, 0xd3a1e2dd00000000, 0xccb6125d00000000, 0xac89730700000000, 0xb39e838700000000, 0x6cf7b1b300000000, 0x73e0413300000000, 0x13df206900000000, 0x0cc8d0e900000000, 0xdf9d80f400000000, 0xc08a707400000000, 0xa0b5112e00000000, 0xbfa2e1ae00000000, 0x60cbd39a00000000, 0x7fdc231a00000000, 0x1fe3424000000000, 0x00f4b2c000000000, 0xa130262800000000, 0xbe27d6a800000000, 0xde18b7f200000000, 0xc10f477200000000, 0x1e66754600000000, 0x017185c600000000, 0x614ee49c00000000, 0x7e59141c00000000, 0x62c1bc9600000000, 0x7dd64c1600000000, 0x1de92d4c00000000, 0x02feddcc00000000, 0xdd97eff800000000, 0xc2801f7800000000, 0xa2bf7e2200000000, 0xbda88ea200000000, 0x1c6c1a4a00000000, 0x037beaca00000000, 0x63448b9000000000, 0x7c537b1000000000, 0xa33a492400000000, 0xbc2db9a400000000, 0xdc12d8fe00000000, 0xc305287e00000000, 0xa524f83000000000, 0xba3308b000000000, 0xda0c69ea00000000, 0xc51b996a00000000, 0x1a72ab5e00000000, 0x05655bde00000000, 0x655a3a8400000000, 0x7a4dca0400000000, 0xdb895eec00000000, 0xc49eae6c00000000, 0xa4a1cf3600000000, 0xbbb63fb600000000, 0x64df0d8200000000, 0x7bc8fd0200000000, 0x1bf79c5800000000, 0x04e06cd800000000, 0x1878c45200000000, 0x076f34d200000000, 0x6750558800000000, 0x7847a50800000000, 0xa72e973c00000000, 0xb83967bc00000000, 0xd80606e600000000, 0xc711f66600000000, 0x66d5628e00000000, 0x79c2920e00000000, 0x19fdf35400000000, 0x06ea03d400000000, 0xd98331e000000000, 0xc694c16000000000, 0xa6aba03a00000000, 0xb9bc50ba00000000}, {0x0000000000000000, 0xe2fd888d00000000, 0x85fd60c000000000, 0x6700e84d00000000, 0x4bfdb05b00000000, 0xa90038d600000000, 0xce00d09b00000000, 0x2cfd581600000000, 0x96fa61b700000000, 0x7407e93a00000000, 0x1307017700000000, 0xf1fa89fa00000000, 0xdd07d1ec00000000, 0x3ffa596100000000, 0x58fab12c00000000, 0xba0739a100000000, 0x6df3b2b500000000, 0x8f0e3a3800000000, 0xe80ed27500000000, 0x0af35af800000000, 0x260e02ee00000000, 0xc4f38a6300000000, 0xa3f3622e00000000, 0x410eeaa300000000, 0xfb09d30200000000, 0x19f45b8f00000000, 0x7ef4b3c200000000, 0x9c093b4f00000000, 0xb0f4635900000000, 0x5209ebd400000000, 0x3509039900000000, 0xd7f48b1400000000, 0x9be014b000000000, 0x791d9c3d00000000, 0x1e1d747000000000, 0xfce0fcfd00000000, 0xd01da4eb00000000, 0x32e02c6600000000, 0x55e0c42b00000000, 0xb71d4ca600000000, 0x0d1a750700000000, 0xefe7fd8a00000000, 0x88e715c700000000, 0x6a1a9d4a00000000, 0x46e7c55c00000000, 0xa41a4dd100000000, 0xc31aa59c00000000, 0x21e72d1100000000, 0xf613a60500000000, 0x14ee2e8800000000, 0x73eec6c500000000, 0x91134e4800000000, 0xbdee165e00000000, 0x5f139ed300000000, 0x3813769e00000000, 0xdaeefe1300000000, 0x60e9c7b200000000, 0x82144f3f00000000, 0xe514a77200000000, 0x07e92fff00000000, 0x2b1477e900000000, 0xc9e9ff6400000000, 0xaee9172900000000, 0x4c149fa400000000, 0x77c758bb00000000, 0x953ad03600000000, 0xf23a387b00000000, 0x10c7b0f600000000, 0x3c3ae8e000000000, 0xdec7606d00000000, 0xb9c7882000000000, 0x5b3a00ad00000000, 0xe13d390c00000000, 0x03c0b18100000000, 0x64c059cc00000000, 0x863dd14100000000, 0xaac0895700000000, 0x483d01da00000000, 0x2f3de99700000000, 0xcdc0611a00000000, 0x1a34ea0e00000000, 0xf8c9628300000000, 0x9fc98ace00000000, 0x7d34024300000000, 0x51c95a5500000000, 0xb334d2d800000000, 0xd4343a9500000000, 0x36c9b21800000000, 0x8cce8bb900000000, 0x6e33033400000000, 0x0933eb7900000000, 0xebce63f400000000, 0xc7333be200000000, 0x25ceb36f00000000, 0x42ce5b2200000000, 0xa033d3af00000000, 0xec274c0b00000000, 0x0edac48600000000, 0x69da2ccb00000000, 0x8b27a44600000000, 0xa7dafc5000000000, 0x452774dd00000000, 0x22279c9000000000, 0xc0da141d00000000, 0x7add2dbc00000000, 0x9820a53100000000, 0xff204d7c00000000, 0x1dddc5f100000000, 0x31209de700000000, 0xd3dd156a00000000, 0xb4ddfd2700000000, 0x562075aa00000000, 0x81d4febe00000000, 0x6329763300000000, 0x04299e7e00000000, 0xe6d416f300000000, 0xca294ee500000000, 0x28d4c66800000000, 0x4fd42e2500000000, 0xad29a6a800000000, 0x172e9f0900000000, 0xf5d3178400000000, 0x92d3ffc900000000, 0x702e774400000000, 0x5cd32f5200000000, 0xbe2ea7df00000000, 0xd92e4f9200000000, 0x3bd3c71f00000000, 0xaf88c0ad00000000, 0x4d75482000000000, 0x2a75a06d00000000, 0xc88828e000000000, 0xe47570f600000000, 0x0688f87b00000000, 0x6188103600000000, 0x837598bb00000000, 0x3972a11a00000000, 0xdb8f299700000000, 0xbc8fc1da00000000, 0x5e72495700000000, 0x728f114100000000, 0x907299cc00000000, 0xf772718100000000, 0x158ff90c00000000, 0xc27b721800000000, 0x2086fa9500000000, 0x478612d800000000, 0xa57b9a5500000000, 0x8986c24300000000, 0x6b7b4ace00000000, 0x0c7ba28300000000, 0xee862a0e00000000, 0x548113af00000000, 0xb67c9b2200000000, 0xd17c736f00000000, 0x3381fbe200000000, 0x1f7ca3f400000000, 0xfd812b7900000000, 0x9a81c33400000000, 0x787c4bb900000000, 0x3468d41d00000000, 0xd6955c9000000000, 0xb195b4dd00000000, 0x53683c5000000000, 0x7f95644600000000, 0x9d68eccb00000000, 0xfa68048600000000, 0x18958c0b00000000, 0xa292b5aa00000000, 0x406f3d2700000000, 0x276fd56a00000000, 0xc5925de700000000, 0xe96f05f100000000, 0x0b928d7c00000000, 0x6c92653100000000, 0x8e6fedbc00000000, 0x599b66a800000000, 0xbb66ee2500000000, 0xdc66066800000000, 0x3e9b8ee500000000, 0x1266d6f300000000, 0xf09b5e7e00000000, 0x979bb63300000000, 0x75663ebe00000000, 0xcf61071f00000000, 0x2d9c8f9200000000, 0x4a9c67df00000000, 0xa861ef5200000000, 0x849cb74400000000, 0x66613fc900000000, 0x0161d78400000000, 0xe39c5f0900000000, 0xd84f981600000000, 0x3ab2109b00000000, 0x5db2f8d600000000, 0xbf4f705b00000000, 0x93b2284d00000000, 0x714fa0c000000000, 0x164f488d00000000, 0xf4b2c00000000000, 0x4eb5f9a100000000, 0xac48712c00000000, 0xcb48996100000000, 0x29b511ec00000000, 0x054849fa00000000, 0xe7b5c17700000000, 0x80b5293a00000000, 0x6248a1b700000000, 0xb5bc2aa300000000, 0x5741a22e00000000, 0x30414a6300000000, 0xd2bcc2ee00000000, 0xfe419af800000000, 0x1cbc127500000000, 0x7bbcfa3800000000, 0x994172b500000000, 0x23464b1400000000, 0xc1bbc39900000000, 0xa6bb2bd400000000, 0x4446a35900000000, 0x68bbfb4f00000000, 0x8a4673c200000000, 0xed469b8f00000000, 0x0fbb130200000000, 0x43af8ca600000000, 0xa152042b00000000, 0xc652ec6600000000, 0x24af64eb00000000, 0x08523cfd00000000, 0xeaafb47000000000, 0x8daf5c3d00000000, 0x6f52d4b000000000, 0xd555ed1100000000, 0x37a8659c00000000, 0x50a88dd100000000, 0xb255055c00000000, 0x9ea85d4a00000000, 0x7c55d5c700000000, 0x1b553d8a00000000, 0xf9a8b50700000000, 0x2e5c3e1300000000, 0xcca1b69e00000000, 0xaba15ed300000000, 0x495cd65e00000000, 0x65a18e4800000000, 0x875c06c500000000, 0xe05cee8800000000, 0x02a1660500000000, 0xb8a65fa400000000, 0x5a5bd72900000000, 0x3d5b3f6400000000, 0xdfa6b7e900000000, 0xf35befff00000000, 0x11a6677200000000, 0x76a68f3f00000000, 0x945b07b200000000}, {0x0000000000000000, 0xa90b894e00000000, 0x5217129d00000000, 0xfb1c9bd300000000, 0xe52855e100000000, 0x4c23dcaf00000000, 0xb73f477c00000000, 0x1e34ce3200000000, 0x8b57db1900000000, 0x225c525700000000, 0xd940c98400000000, 0x704b40ca00000000, 0x6e7f8ef800000000, 0xc77407b600000000, 0x3c689c6500000000, 0x9563152b00000000, 0x16afb63300000000, 0xbfa43f7d00000000, 0x44b8a4ae00000000, 0xedb32de000000000, 0xf387e3d200000000, 0x5a8c6a9c00000000, 0xa190f14f00000000, 0x089b780100000000, 0x9df86d2a00000000, 0x34f3e46400000000, 0xcfef7fb700000000, 0x66e4f6f900000000, 0x78d038cb00000000, 0xd1dbb18500000000, 0x2ac72a5600000000, 0x83cca31800000000, 0x2c5e6d6700000000, 0x8555e42900000000, 0x7e497ffa00000000, 0xd742f6b400000000, 0xc976388600000000, 0x607db1c800000000, 0x9b612a1b00000000, 0x326aa35500000000, 0xa709b67e00000000, 0x0e023f3000000000, 0xf51ea4e300000000, 0x5c152dad00000000, 0x4221e39f00000000, 0xeb2a6ad100000000, 0x1036f10200000000, 0xb93d784c00000000, 0x3af1db5400000000, 0x93fa521a00000000, 0x68e6c9c900000000, 0xc1ed408700000000, 0xdfd98eb500000000, 0x76d207fb00000000, 0x8dce9c2800000000, 0x24c5156600000000, 0xb1a6004d00000000, 0x18ad890300000000, 0xe3b112d000000000, 0x4aba9b9e00000000, 0x548e55ac00000000, 0xfd85dce200000000, 0x0699473100000000, 0xaf92ce7f00000000, 0x58bcdace00000000, 0xf1b7538000000000, 0x0aabc85300000000, 0xa3a0411d00000000, 0xbd948f2f00000000, 0x149f066100000000, 0xef839db200000000, 0x468814fc00000000, 0xd3eb01d700000000, 0x7ae0889900000000, 0x81fc134a00000000, 0x28f79a0400000000, 0x36c3543600000000, 0x9fc8dd7800000000, 0x64d446ab00000000, 0xcddfcfe500000000, 0x4e136cfd00000000, 0xe718e5b300000000, 0x1c047e6000000000, 0xb50ff72e00000000, 0xab3b391c00000000, 0x0230b05200000000, 0xf92c2b8100000000, 0x5027a2cf00000000, 0xc544b7e400000000, 0x6c4f3eaa00000000, 0x9753a57900000000, 0x3e582c3700000000, 0x206ce20500000000, 0x89676b4b00000000, 0x727bf09800000000, 0xdb7079d600000000, 0x74e2b7a900000000, 0xdde93ee700000000, 0x26f5a53400000000, 0x8ffe2c7a00000000, 0x91cae24800000000, 0x38c16b0600000000, 0xc3ddf0d500000000, 0x6ad6799b00000000, 0xffb56cb000000000, 0x56bee5fe00000000, 0xada27e2d00000000, 0x04a9f76300000000, 0x1a9d395100000000, 0xb396b01f00000000, 0x488a2bcc00000000, 0xe181a28200000000, 0x624d019a00000000, 0xcb4688d400000000, 0x305a130700000000, 0x99519a4900000000, 0x8765547b00000000, 0x2e6edd3500000000, 0xd57246e600000000, 0x7c79cfa800000000, 0xe91ada8300000000, 0x401153cd00000000, 0xbb0dc81e00000000, 0x1206415000000000, 0x0c328f6200000000, 0xa539062c00000000, 0x5e259dff00000000, 0xf72e14b100000000, 0xf17ec44600000000, 0x58754d0800000000, 0xa369d6db00000000, 0x0a625f9500000000, 0x145691a700000000, 0xbd5d18e900000000, 0x4641833a00000000, 0xef4a0a7400000000, 0x7a291f5f00000000, 0xd322961100000000, 0x283e0dc200000000, 0x8135848c00000000, 0x9f014abe00000000, 0x360ac3f000000000, 0xcd16582300000000, 0x641dd16d00000000, 0xe7d1727500000000, 0x4edafb3b00000000, 0xb5c660e800000000, 0x1ccde9a600000000, 0x02f9279400000000, 0xabf2aeda00000000, 0x50ee350900000000, 0xf9e5bc4700000000, 0x6c86a96c00000000, 0xc58d202200000000, 0x3e91bbf100000000, 0x979a32bf00000000, 0x89aefc8d00000000, 0x20a575c300000000, 0xdbb9ee1000000000, 0x72b2675e00000000, 0xdd20a92100000000, 0x742b206f00000000, 0x8f37bbbc00000000, 0x263c32f200000000, 0x3808fcc000000000, 0x9103758e00000000, 0x6a1fee5d00000000, 0xc314671300000000, 0x5677723800000000, 0xff7cfb7600000000, 0x046060a500000000, 0xad6be9eb00000000, 0xb35f27d900000000, 0x1a54ae9700000000, 0xe148354400000000, 0x4843bc0a00000000, 0xcb8f1f1200000000, 0x6284965c00000000, 0x99980d8f00000000, 0x309384c100000000, 0x2ea74af300000000, 0x87acc3bd00000000, 0x7cb0586e00000000, 0xd5bbd12000000000, 0x40d8c40b00000000, 0xe9d34d4500000000, 0x12cfd69600000000, 0xbbc45fd800000000, 0xa5f091ea00000000, 0x0cfb18a400000000, 0xf7e7837700000000, 0x5eec0a3900000000, 0xa9c21e8800000000, 0x00c997c600000000, 0xfbd50c1500000000, 0x52de855b00000000, 0x4cea4b6900000000, 0xe5e1c22700000000, 0x1efd59f400000000, 0xb7f6d0ba00000000, 0x2295c59100000000, 0x8b9e4cdf00000000, 0x7082d70c00000000, 0xd9895e4200000000, 0xc7bd907000000000, 0x6eb6193e00000000, 0x95aa82ed00000000, 0x3ca10ba300000000, 0xbf6da8bb00000000, 0x166621f500000000, 0xed7aba2600000000, 0x4471336800000000, 0x5a45fd5a00000000, 0xf34e741400000000, 0x0852efc700000000, 0xa159668900000000, 0x343a73a200000000, 0x9d31faec00000000, 0x662d613f00000000, 0xcf26e87100000000, 0xd112264300000000, 0x7819af0d00000000, 0x830534de00000000, 0x2a0ebd9000000000, 0x859c73ef00000000, 0x2c97faa100000000, 0xd78b617200000000, 0x7e80e83c00000000, 0x60b4260e00000000, 0xc9bfaf4000000000, 0x32a3349300000000, 0x9ba8bddd00000000, 0x0ecba8f600000000, 0xa7c021b800000000, 0x5cdcba6b00000000, 0xf5d7332500000000, 0xebe3fd1700000000, 0x42e8745900000000, 0xb9f4ef8a00000000, 0x10ff66c400000000, 0x9333c5dc00000000, 0x3a384c9200000000, 0xc124d74100000000, 0x682f5e0f00000000, 0x761b903d00000000, 0xdf10197300000000, 0x240c82a000000000, 0x8d070bee00000000, 0x18641ec500000000, 0xb16f978b00000000, 0x4a730c5800000000, 0xe378851600000000, 0xfd4c4b2400000000, 0x5447c26a00000000, 0xaf5b59b900000000, 0x0650d0f700000000}, {0x0000000000000000, 0x479244af00000000, 0xcf22f88500000000, 0x88b0bc2a00000000, 0xdf4381d000000000, 0x98d1c57f00000000, 0x1061795500000000, 0x57f33dfa00000000, 0xff81737a00000000, 0xb81337d500000000, 0x30a38bff00000000, 0x7731cf5000000000, 0x20c2f2aa00000000, 0x6750b60500000000, 0xefe00a2f00000000, 0xa8724e8000000000, 0xfe03e7f400000000, 0xb991a35b00000000, 0x31211f7100000000, 0x76b35bde00000000, 0x2140662400000000, 0x66d2228b00000000, 0xee629ea100000000, 0xa9f0da0e00000000, 0x0182948e00000000, 0x4610d02100000000, 0xcea06c0b00000000, 0x893228a400000000, 0xdec1155e00000000, 0x995351f100000000, 0x11e3eddb00000000, 0x5671a97400000000, 0xbd01bf3200000000, 0xfa93fb9d00000000, 0x722347b700000000, 0x35b1031800000000, 0x62423ee200000000, 0x25d07a4d00000000, 0xad60c66700000000, 0xeaf282c800000000, 0x4280cc4800000000, 0x051288e700000000, 0x8da234cd00000000, 0xca30706200000000, 0x9dc34d9800000000, 0xda51093700000000, 0x52e1b51d00000000, 0x1573f1b200000000, 0x430258c600000000, 0x04901c6900000000, 0x8c20a04300000000, 0xcbb2e4ec00000000, 0x9c41d91600000000, 0xdbd39db900000000, 0x5363219300000000, 0x14f1653c00000000, 0xbc832bbc00000000, 0xfb116f1300000000, 0x73a1d33900000000, 0x3433979600000000, 0x63c0aa6c00000000, 0x2452eec300000000, 0xace252e900000000, 0xeb70164600000000, 0x7a037e6500000000, 0x3d913aca00000000, 0xb52186e000000000, 0xf2b3c24f00000000, 0xa540ffb500000000, 0xe2d2bb1a00000000, 0x6a62073000000000, 0x2df0439f00000000, 0x85820d1f00000000, 0xc21049b000000000, 0x4aa0f59a00000000, 0x0d32b13500000000, 0x5ac18ccf00000000, 0x1d53c86000000000, 0x95e3744a00000000, 0xd27130e500000000, 0x8400999100000000, 0xc392dd3e00000000, 0x4b22611400000000, 0x0cb025bb00000000, 0x5b43184100000000, 0x1cd15cee00000000, 0x9461e0c400000000, 0xd3f3a46b00000000, 0x7b81eaeb00000000, 0x3c13ae4400000000, 0xb4a3126e00000000, 0xf33156c100000000, 0xa4c26b3b00000000, 0xe3502f9400000000, 0x6be093be00000000, 0x2c72d71100000000, 0xc702c15700000000, 0x809085f800000000, 0x082039d200000000, 0x4fb27d7d00000000, 0x1841408700000000, 0x5fd3042800000000, 0xd763b80200000000, 0x90f1fcad00000000, 0x3883b22d00000000, 0x7f11f68200000000, 0xf7a14aa800000000, 0xb0330e0700000000, 0xe7c033fd00000000, 0xa052775200000000, 0x28e2cb7800000000, 0x6f708fd700000000, 0x390126a300000000, 0x7e93620c00000000, 0xf623de2600000000, 0xb1b19a8900000000, 0xe642a77300000000, 0xa1d0e3dc00000000, 0x29605ff600000000, 0x6ef21b5900000000, 0xc68055d900000000, 0x8112117600000000, 0x09a2ad5c00000000, 0x4e30e9f300000000, 0x19c3d40900000000, 0x5e5190a600000000, 0xd6e12c8c00000000, 0x9173682300000000, 0xf406fcca00000000, 0xb394b86500000000, 0x3b24044f00000000, 0x7cb640e000000000, 0x2b457d1a00000000, 0x6cd739b500000000, 0xe467859f00000000, 0xa3f5c13000000000, 0x0b878fb000000000, 0x4c15cb1f00000000, 0xc4a5773500000000, 0x8337339a00000000, 0xd4c40e6000000000, 0x93564acf00000000, 0x1be6f6e500000000, 0x5c74b24a00000000, 0x0a051b3e00000000, 0x4d975f9100000000, 0xc527e3bb00000000, 0x82b5a71400000000, 0xd5469aee00000000, 0x92d4de4100000000, 0x1a64626b00000000, 0x5df626c400000000, 0xf584684400000000, 0xb2162ceb00000000, 0x3aa690c100000000, 0x7d34d46e00000000, 0x2ac7e99400000000, 0x6d55ad3b00000000, 0xe5e5111100000000, 0xa27755be00000000, 0x490743f800000000, 0x0e95075700000000, 0x8625bb7d00000000, 0xc1b7ffd200000000, 0x9644c22800000000, 0xd1d6868700000000, 0x59663aad00000000, 0x1ef47e0200000000, 0xb686308200000000, 0xf114742d00000000, 0x79a4c80700000000, 0x3e368ca800000000, 0x69c5b15200000000, 0x2e57f5fd00000000, 0xa6e749d700000000, 0xe1750d7800000000, 0xb704a40c00000000, 0xf096e0a300000000, 0x78265c8900000000, 0x3fb4182600000000, 0x684725dc00000000, 0x2fd5617300000000, 0xa765dd5900000000, 0xe0f799f600000000, 0x4885d77600000000, 0x0f1793d900000000, 0x87a72ff300000000, 0xc0356b5c00000000, 0x97c656a600000000, 0xd054120900000000, 0x58e4ae2300000000, 0x1f76ea8c00000000, 0x8e0582af00000000, 0xc997c60000000000, 0x41277a2a00000000, 0x06b53e8500000000, 0x5146037f00000000, 0x16d447d000000000, 0x9e64fbfa00000000, 0xd9f6bf5500000000, 0x7184f1d500000000, 0x3616b57a00000000, 0xbea6095000000000, 0xf9344dff00000000, 0xaec7700500000000, 0xe95534aa00000000, 0x61e5888000000000, 0x2677cc2f00000000, 0x7006655b00000000, 0x379421f400000000, 0xbf249dde00000000, 0xf8b6d97100000000, 0xaf45e48b00000000, 0xe8d7a02400000000, 0x60671c0e00000000, 0x27f558a100000000, 0x8f87162100000000, 0xc815528e00000000, 0x40a5eea400000000, 0x0737aa0b00000000, 0x50c497f100000000, 0x1756d35e00000000, 0x9fe66f7400000000, 0xd8742bdb00000000, 0x33043d9d00000000, 0x7496793200000000, 0xfc26c51800000000, 0xbbb481b700000000, 0xec47bc4d00000000, 0xabd5f8e200000000, 0x236544c800000000, 0x64f7006700000000, 0xcc854ee700000000, 0x8b170a4800000000, 0x03a7b66200000000, 0x4435f2cd00000000, 0x13c6cf3700000000, 0x54548b9800000000, 0xdce437b200000000, 0x9b76731d00000000, 0xcd07da6900000000, 0x8a959ec600000000, 0x022522ec00000000, 0x45b7664300000000, 0x12445bb900000000, 0x55d61f1600000000, 0xdd66a33c00000000, 0x9af4e79300000000, 0x3286a91300000000, 0x7514edbc00000000, 0xfda4519600000000, 0xba36153900000000, 0xedc528c300000000, 0xaa576c6c00000000, 0x22e7d04600000000, 0x657594e900000000}}"
            ]
        },
        {
            "path": null,
            "name": "x2n_table",
            "type": "const z_crc_t []",
            "definition": [
                "static const z_crc_t x2n_table[] = {0x40000000, 0x20000000, 0x08000000, 0x00800000, 0x00008000, 0xedb88320, 0xb1e6b092, 0xa06a2517, 0xed627dae, 0x88d14467, 0xd7bbfe6a, 0xec447f11, 0x8e7ea170, 0x6427800e, 0x4d47bae0, 0x09fe548f, 0x83852d0f, 0x30362f1a, 0x7b5a9cc3, 0x31fec169, 0x9fec022a, 0x6c8dedc4, 0x15d6874d, 0x5fde7a4e, 0xbad90e37, 0x2e4e5eef, 0x4eaba214, 0xa8a472c0, 0x429a969e, 0x148d302a, 0xc40ba6d0, 0xc4e22c3c}"
            ]
        },
        {
            "path": null,
            "name": "_length_code",
            "type": "const uch []",
            "definition": [
                "const uch _length_code[(258 - 3) + 1] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28}",
                "extern const uch _length_code[]"
            ]
        },
        {
            "path": null,
            "name": "_dist_code",
            "type": "const uch []",
            "definition": [
                "const uch _dist_code[512] = {0, 1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 16, 17, 18, 18, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29}",
                "extern const uch _dist_code[]"
            ]
        },
        {
            "path": null,
            "name": "deflate_copyright",
            "type": "const char []",
            "definition": [
                "const char deflate_copyright[] = \" deflate 1.3 Copyright 1995-2023 Jean-loup Gailly and Mark Adler \""
            ]
        },
        {
            "path": null,
            "name": "configuration_table",
            "type": "const config [10]",
            "definition": [
                "static const config configuration_table[10] = {{0, 0, 0, 0, deflate_stored}, {4, 4, 8, 4, deflate_fast}, {4, 5, 16, 8, deflate_fast}, {4, 6, 32, 32, deflate_fast}, {4, 4, 16, 16, deflate_slow}, {8, 16, 32, 32, deflate_slow}, {8, 16, 128, 128, deflate_slow}, {8, 32, 128, 256, deflate_slow}, {32, 128, 258, 1024, deflate_slow}, {32, 258, 258, 4096, deflate_slow}}"
            ]
        },
        {
            "path": null,
            "name": "inflate_copyright",
            "type": "const char []",
            "definition": [
                "const char inflate_copyright[] = \" inflate 1.3 Copyright 1995-2023 Mark Adler \""
            ]
        },
        {
            "path": null,
            "name": "extra_lbits",
            "type": "const int [29]",
            "definition": [
                "static const int extra_lbits[29] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0}"
            ]
        },
        {
            "path": null,
            "name": "extra_dbits",
            "type": "const int [30]",
            "definition": [
                "static const int extra_dbits[30] = {0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13}"
            ]
        },
        {
            "path": null,
            "name": "extra_blbits",
            "type": "const int [19]",
            "definition": [
                "static const int extra_blbits[19] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7}"
            ]
        },
        {
            "path": null,
            "name": "bl_order",
            "type": "const uch [19]",
            "definition": [
                "static const uch bl_order[19] = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15}"
            ]
        },
        {
            "path": null,
            "name": "static_ltree",
            "type": "const ct_data [((256 + 1) + 29) + 2]",
            "definition": [
                "static const ct_data static_ltree[((256 + 1) + 29) + 2] = {{{12}, {8}}, {{140}, {8}}, {{76}, {8}}, {{204}, {8}}, {{44}, {8}}, {{172}, {8}}, {{108}, {8}}, {{236}, {8}}, {{28}, {8}}, {{156}, {8}}, {{92}, {8}}, {{220}, {8}}, {{60}, {8}}, {{188}, {8}}, {{124}, {8}}, {{252}, {8}}, {{2}, {8}}, {{130}, {8}}, {{66}, {8}}, {{194}, {8}}, {{34}, {8}}, {{162}, {8}}, {{98}, {8}}, {{226}, {8}}, {{18}, {8}}, {{146}, {8}}, {{82}, {8}}, {{210}, {8}}, {{50}, {8}}, {{178}, {8}}, {{114}, {8}}, {{242}, {8}}, {{10}, {8}}, {{138}, {8}}, {{74}, {8}}, {{202}, {8}}, {{42}, {8}}, {{170}, {8}}, {{106}, {8}}, {{234}, {8}}, {{26}, {8}}, {{154}, {8}}, {{90}, {8}}, {{218}, {8}}, {{58}, {8}}, {{186}, {8}}, {{122}, {8}}, {{250}, {8}}, {{6}, {8}}, {{134}, {8}}, {{70}, {8}}, {{198}, {8}}, {{38}, {8}}, {{166}, {8}}, {{102}, {8}}, {{230}, {8}}, {{22}, {8}}, {{150}, {8}}, {{86}, {8}}, {{214}, {8}}, {{54}, {8}}, {{182}, {8}}, {{118}, {8}}, {{246}, {8}}, {{14}, {8}}, {{142}, {8}}, {{78}, {8}}, {{206}, {8}}, {{46}, {8}}, {{174}, {8}}, {{110}, {8}}, {{238}, {8}}, {{30}, {8}}, {{158}, {8}}, {{94}, {8}}, {{222}, {8}}, {{62}, {8}}, {{190}, {8}}, {{126}, {8}}, {{254}, {8}}, {{1}, {8}}, {{129}, {8}}, {{65}, {8}}, {{193}, {8}}, {{33}, {8}}, {{161}, {8}}, {{97}, {8}}, {{225}, {8}}, {{17}, {8}}, {{145}, {8}}, {{81}, {8}}, {{209}, {8}}, {{49}, {8}}, {{177}, {8}}, {{113}, {8}}, {{241}, {8}}, {{9}, {8}}, {{137}, {8}}, {{73}, {8}}, {{201}, {8}}, {{41}, {8}}, {{169}, {8}}, {{105}, {8}}, {{233}, {8}}, {{25}, {8}}, {{153}, {8}}, {{89}, {8}}, {{217}, {8}}, {{57}, {8}}, {{185}, {8}}, {{121}, {8}}, {{249}, {8}}, {{5}, {8}}, {{133}, {8}}, {{69}, {8}}, {{197}, {8}}, {{37}, {8}}, {{165}, {8}}, {{101}, {8}}, {{229}, {8}}, {{21}, {8}}, {{149}, {8}}, {{85}, {8}}, {{213}, {8}}, {{53}, {8}}, {{181}, {8}}, {{117}, {8}}, {{245}, {8}}, {{13}, {8}}, {{141}, {8}}, {{77}, {8}}, {{205}, {8}}, {{45}, {8}}, {{173}, {8}}, {{109}, {8}}, {{237}, {8}}, {{29}, {8}}, {{157}, {8}}, {{93}, {8}}, {{221}, {8}}, {{61}, {8}}, {{189}, {8}}, {{125}, {8}}, {{253}, {8}}, {{19}, {9}}, {{275}, {9}}, {{147}, {9}}, {{403}, {9}}, {{83}, {9}}, {{339}, {9}}, {{211}, {9}}, {{467}, {9}}, {{51}, {9}}, {{307}, {9}}, {{179}, {9}}, {{435}, {9}}, {{115}, {9}}, {{371}, {9}}, {{243}, {9}}, {{499}, {9}}, {{11}, {9}}, {{267}, {9}}, {{139}, {9}}, {{395}, {9}}, {{75}, {9}}, {{331}, {9}}, {{203}, {9}}, {{459}, {9}}, {{43}, {9}}, {{299}, {9}}, {{171}, {9}}, {{427}, {9}}, {{107}, {9}}, {{363}, {9}}, {{235}, {9}}, {{491}, {9}}, {{27}, {9}}, {{283}, {9}}, {{155}, {9}}, {{411}, {9}}, {{91}, {9}}, {{347}, {9}}, {{219}, {9}}, {{475}, {9}}, {{59}, {9}}, {{315}, {9}}, {{187}, {9}}, {{443}, {9}}, {{123}, {9}}, {{379}, {9}}, {{251}, {9}}, {{507}, {9}}, {{7}, {9}}, {{263}, {9}}, {{135}, {9}}, {{391}, {9}}, {{71}, {9}}, {{327}, {9}}, {{199}, {9}}, {{455}, {9}}, {{39}, {9}}, {{295}, {9}}, {{167}, {9}}, {{423}, {9}}, {{103}, {9}}, {{359}, {9}}, {{231}, {9}}, {{487}, {9}}, {{23}, {9}}, {{279}, {9}}, {{151}, {9}}, {{407}, {9}}, {{87}, {9}}, {{343}, {9}}, {{215}, {9}}, {{471}, {9}}, {{55}, {9}}, {{311}, {9}}, {{183}, {9}}, {{439}, {9}}, {{119}, {9}}, {{375}, {9}}, {{247}, {9}}, {{503}, {9}}, {{15}, {9}}, {{271}, {9}}, {{143}, {9}}, {{399}, {9}}, {{79}, {9}}, {{335}, {9}}, {{207}, {9}}, {{463}, {9}}, {{47}, {9}}, {{303}, {9}}, {{175}, {9}}, {{431}, {9}}, {{111}, {9}}, {{367}, {9}}, {{239}, {9}}, {{495}, {9}}, {{31}, {9}}, {{287}, {9}}, {{159}, {9}}, {{415}, {9}}, {{95}, {9}}, {{351}, {9}}, {{223}, {9}}, {{479}, {9}}, {{63}, {9}}, {{319}, {9}}, {{191}, {9}}, {{447}, {9}}, {{127}, {9}}, {{383}, {9}}, {{255}, {9}}, {{511}, {9}}, {{0}, {7}}, {{64}, {7}}, {{32}, {7}}, {{96}, {7}}, {{16}, {7}}, {{80}, {7}}, {{48}, {7}}, {{112}, {7}}, {{8}, {7}}, {{72}, {7}}, {{40}, {7}}, {{104}, {7}}, {{24}, {7}}, {{88}, {7}}, {{56}, {7}}, {{120}, {7}}, {{4}, {7}}, {{68}, {7}}, {{36}, {7}}, {{100}, {7}}, {{20}, {7}}, {{84}, {7}}, {{52}, {7}}, {{116}, {7}}, {{3}, {8}}, {{131}, {8}}, {{67}, {8}}, {{195}, {8}}, {{35}, {8}}, {{163}, {8}}, {{99}, {8}}, {{227}, {8}}}"
            ]
        },
        {
            "path": null,
            "name": "static_dtree",
            "type": "const ct_data [30]",
            "definition": [
                "static const ct_data static_dtree[30] = {{{0}, {5}}, {{16}, {5}}, {{8}, {5}}, {{24}, {5}}, {{4}, {5}}, {{20}, {5}}, {{12}, {5}}, {{28}, {5}}, {{2}, {5}}, {{18}, {5}}, {{10}, {5}}, {{26}, {5}}, {{6}, {5}}, {{22}, {5}}, {{14}, {5}}, {{30}, {5}}, {{1}, {5}}, {{17}, {5}}, {{9}, {5}}, {{25}, {5}}, {{5}, {5}}, {{21}, {5}}, {{13}, {5}}, {{29}, {5}}, {{3}, {5}}, {{19}, {5}}, {{11}, {5}}, {{27}, {5}}, {{7}, {5}}, {{23}, {5}}}"
            ]
        },
        {
            "path": null,
            "name": "base_length",
            "type": "const int [29]",
            "definition": [
                "static const int base_length[29] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 20, 24, 28, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 0}"
            ]
        },
        {
            "path": null,
            "name": "base_dist",
            "type": "const int [30]",
            "definition": [
                "static const int base_dist[30] = {0, 1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, 128, 192, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 6144, 8192, 12288, 16384, 24576}"
            ]
        },
        {
            "path": null,
            "name": "static_l_desc",
            "type": "const static_tree_desc",
            "definition": [
                "static const static_tree_desc static_l_desc = {static_ltree, extra_lbits, 256 + 1, (256 + 1) + 29, 15}"
            ]
        },
        {
            "path": null,
            "name": "static_d_desc",
            "type": "const static_tree_desc",
            "definition": [
                "static const static_tree_desc static_d_desc = {static_dtree, extra_dbits, 0, 30, 15}"
            ]
        },
        {
            "path": null,
            "name": "static_bl_desc",
            "type": "const static_tree_desc",
            "definition": [
                "static const static_tree_desc static_bl_desc = {(const ct_data *) 0, extra_blbits, 0, 19, 7}"
            ]
        },
        {
            "path": null,
            "name": "prog",
            "type": "char *",
            "definition": [
                "static char *prog"
            ]
        },
        {
            "path": null,
            "name": "png_digit",
            "type": "const char [16]",
            "definition": [
                "static const char png_digit[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}"
            ]
        },
        {
            "path": null,
            "name": "GIFError",
            "type": "void (*)(const char *message)",
            "definition": [
                "extern void (*GIFError)(const char *message)"
            ]
        },
        {
            "path": null,
            "name": "GIFWarning",
            "type": "void (*)(const char *message)",
            "definition": [
                "extern void (*GIFWarning)(const char *message)"
            ]
        },
        {
            "path": null,
            "name": "DataBlockSize",
            "type": "int",
            "definition": [
                "static int DataBlockSize = 0"
            ]
        },
        {
            "path": null,
            "name": "DefaultColorTable",
            "type": "unsigned char []",
            "definition": [
                "static unsigned char DefaultColorTable[] = {0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 255, 255, 0, 255, 0, 255, 0, 255, 0, 0, 255, 255, 255, 0}"
            ]
        },
        {
            "path": null,
            "name": "minitiff_sig_m",
            "type": "const char [4]",
            "definition": [
                "extern const char minitiff_sig_m[4]"
            ]
        },
        {
            "path": null,
            "name": "minitiff_sig_i",
            "type": "const char [4]",
            "definition": [
                "extern const char minitiff_sig_i[4]"
            ]
        },
        {
            "path": null,
            "name": "minitiff_sig_bigm",
            "type": "const char [4]",
            "definition": [
                "extern const char minitiff_sig_bigm[4]"
            ]
        },
        {
            "path": null,
            "name": "minitiff_sig_bigi",
            "type": "const char [4]",
            "definition": [
                "extern const char minitiff_sig_bigi[4]"
            ]
        },
        {
            "path": null,
            "name": "msg_err_alloc",
            "type": "const char *",
            "definition": [
                "static const char *msg_err_alloc = \"Error allocating memory for TIFF file\""
            ]
        },
        {
            "path": null,
            "name": "msg_err_read",
            "type": "const char *",
            "definition": [
                "static const char *msg_err_read = \"Error reading TIFF file\""
            ]
        },
        {
            "path": null,
            "name": "msg_err_seek",
            "type": "const char *",
            "definition": [
                "static const char *msg_err_seek = \"Error repositioning TIFF file\""
            ]
        },
        {
            "path": null,
            "name": "msg_err_notiff",
            "type": "const char *",
            "definition": [
                "static const char *msg_err_notiff = \"Not a TIFF file\""
            ]
        },
        {
            "path": null,
            "name": "msg_err_bigtiff",
            "type": "const char *",
            "definition": [
                "static const char *msg_err_bigtiff = \"Unsupported BigTIFF file\""
            ]
        },
        {
            "path": null,
            "name": "msg_err_invalid",
            "type": "const char *",
            "definition": [
                "static const char *msg_err_invalid = \"Invalid TIFF file\""
            ]
        },
        {
            "path": null,
            "name": "msg_err_range",
            "type": "const char *",
            "definition": [
                "static const char *msg_err_range = \"Value out of the supported range in TIFF file\""
            ]
        },
        {
            "path": null,
            "name": "msg_err_unsupported",
            "type": "const char *",
            "definition": [
                "static const char *msg_err_unsupported = \"Unsupported data in TIFF file\""
            ]
        },
        {
            "path": null,
            "name": "msg_warn_metadata",
            "type": "const char *",
            "definition": [
                "static const char *msg_warn_metadata = \"Unrecognized metadata in TIFF file\""
            ]
        },
        {
            "path": null,
            "name": "msg_warn_multiple",
            "type": "const char *",
            "definition": [
                "static const char *msg_warn_multiple = \"Selected first image from multi-image TIFF file\""
            ]
        },
        {
            "path": null,
            "name": "gif_fmt_name",
            "type": "const char []",
            "definition": [
                "static const char gif_fmt_name[] = \"GIF\""
            ]
        },
        {
            "path": null,
            "name": "gif_fmt_long_name",
            "type": "const char []",
            "definition": [
                "static const char gif_fmt_long_name[] = \"Graphics Interchange Format\""
            ]
        },
        {
            "path": null,
            "name": "gif_sig_gif87a",
            "type": "const png_byte [6]",
            "definition": [
                "static const png_byte gif_sig_gif87a[6] = {0x47, 0x49, 0x46, 0x38, 0x37, 0x61}"
            ]
        },
        {
            "path": null,
            "name": "gif_sig_gif89a",
            "type": "const png_byte [6]",
            "definition": [
                "static const png_byte gif_sig_gif89a[6] = {0x47, 0x49, 0x46, 0x38, 0x39, 0x61}"
            ]
        },
        {
            "path": null,
            "name": "err_png_ptr",
            "type": "png_structp",
            "definition": [
                "static png_structp err_png_ptr = 0"
            ]
        },
        {
            "path": null,
            "name": "struct GIFImage",
            "type": "struct GIFImage *",
            "definition": [
                "static struct GIFImage *err_gif_image_ptr"
            ]
        },
        {
            "path": null,
            "name": "struct GIFExtension",
            "type": "struct GIFExtension *",
            "definition": [
                "static struct GIFExtension *err_gif_ext_ptr"
            ]
        },
        {
            "path": null,
            "name": "jpeg_sig_jp2",
            "type": "const png_byte [12]",
            "definition": [
                "static const png_byte jpeg_sig_jp2[12] = {0x00, 0x00, 0x00, 0x0c, 0x6a, 0x50, 0x20, 0x20, 0x0d, 0x0a, 0x87, 0x0a}"
            ]
        },
        {
            "path": null,
            "name": "jpeg_sig_jpc",
            "type": "const png_byte [4]",
            "definition": [
                "static const png_byte jpeg_sig_jpc[4] = {0xff, 0x4f, 0xff, 0x51}"
            ]
        },
        {
            "path": null,
            "name": "jpeg_sig_jng",
            "type": "const png_byte [8]",
            "definition": [
                "static const png_byte jpeg_sig_jng[8] = {0x8b, 0x4a, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a}"
            ]
        },
        {
            "path": null,
            "name": "jpeg_sig_jng_jhdr",
            "type": "const png_byte [8]",
            "definition": [
                "static const png_byte jpeg_sig_jng_jhdr[8] = {0x00, 0x00, 0x00, 0x1a, 0x4a, 0x48, 0x44, 0x52}"
            ]
        },
        {
            "path": null,
            "name": "pbm_fmt_name",
            "type": "const char []",
            "definition": [
                "static const char pbm_fmt_name[] = \"PBM\""
            ]
        },
        {
            "path": null,
            "name": "pgm_fmt_name",
            "type": "const char []",
            "definition": [
                "static const char pgm_fmt_name[] = \"PGM\""
            ]
        },
        {
            "path": null,
            "name": "ppm_fmt_name",
            "type": "const char []",
            "definition": [
                "static const char ppm_fmt_name[] = \"PPM\""
            ]
        },
        {
            "path": null,
            "name": "pam_fmt_name",
            "type": "const char []",
            "definition": [
                "static const char pam_fmt_name[] = \"PAM\""
            ]
        },
        {
            "path": null,
            "name": "pbm_fmt_long_name",
            "type": "const char []",
            "definition": [
                "static const char pbm_fmt_long_name[] = \"Portable Bitmap\""
            ]
        },
        {
            "path": null,
            "name": "pgm_fmt_long_name",
            "type": "const char []",
            "definition": [
                "static const char pgm_fmt_long_name[] = \"Portable Graymap\""
            ]
        },
        {
            "path": null,
            "name": "ppm_fmt_long_name",
            "type": "const char []",
            "definition": [
                "static const char ppm_fmt_long_name[] = \"Portable Pixmap\""
            ]
        },
        {
            "path": null,
            "name": "pam_fmt_long_name",
            "type": "const char []",
            "definition": [
                "static const char pam_fmt_long_name[] = \"Portable Anymap\""
            ]
        },
        {
            "path": null,
            "name": "tiff_fmt_name",
            "type": "const char []",
            "definition": [
                "static const char tiff_fmt_name[] = \"TIFF\""
            ]
        },
        {
            "path": null,
            "name": "tiff_fmt_long_name",
            "type": "const char []",
            "definition": [
                "static const char tiff_fmt_long_name[] = \"Tagged Image File Format\""
            ]
        },
        {
            "path": null,
            "name": "num_extra_images",
            "type": "unsigned int",
            "definition": [
                "static unsigned int num_extra_images"
            ]
        },
        {
            "path": null,
            "name": "msg_intro",
            "type": "const char *",
            "definition": [
                "static const char *msg_intro = \"OptiPNG version 0.7.8\\nCopyright (C) 2001-2023 Cosmin Truta and the Contributing Authors.\\n\""
            ]
        },
        {
            "path": null,
            "name": "msg_license",
            "type": "const char *",
            "definition": [
                "static const char *msg_license = \"This program is open-source software. See LICENSE for more details.\\n\\nPortions of this software are based in part on the work of:\\n  Jean-loup Gailly and Mark Adler (zlib)\\n  Glenn Randers-Pehrson and the PNG Development Group (libpng)\\n  Miyasaka Masaru (BMP support)\\n  David Koblas (GIF support)\\n\""
            ]
        },
        {
            "path": null,
            "name": "msg_help_synopsis",
            "type": "const char *",
            "definition": [
                "static const char *msg_help_synopsis = \"Synopsis:\\n    optipng [options] files ...\\nFiles:\\n    Image files of type: PNG, BMP, GIF, PNM or TIFF\\n\""
            ]
        },
        {
            "path": null,
            "name": "msg_help_basic_options",
            "type": "const char *",
            "definition": [
                "static const char *msg_help_basic_options = \"Basic options:\\n    -?, -h, -help\\tshow the extended help\\n    -o <level>\\t\\toptimization level (0-7)\\t\\t[default: 2]\\n    -v\\t\\t\\trun in verbose mode / show copyright and version info\\n\""
            ]
        },
        {
            "path": null,
            "name": "msg_help_options",
            "type": "const char *",
            "definition": [
                "static const char *msg_help_options = \"Basic options:\\n    -?, -h, -help\\tshow this help\\n    -o <level>\\t\\toptimization level (0-7)\\t\\t[default: 2]\\n    -v\\t\\t\\trun in verbose mode / show copyright and version info\\nGeneral options:\\n    -backup, -keep\\tkeep a backup of the modified files\\n    -clobber\\t\\toverwrite existing files\\n    -fix\\t\\tenable error recovery\\n    -force\\t\\tenforce writing of a new output file\\n    -preserve\\t\\tpreserve file attributes if possible\\n    -quiet, -silent\\trun in quiet mode\\n    -simulate\\t\\trun in simulation mode\\n    -out <file>\\t\\twrite output file to <file>\\n    -dir <directory>\\twrite output file(s) to <directory>\\n    -log <file>\\t\\tlog messages to <file>\\n    --\\t\\t\\tstop option switch parsing\\nOptimization options:\\n    -f <filters>\\tPNG delta filters (0-5)\\t\\t\\t[default: 0,5]\\n    -i <type>\\t\\tPNG interlace type (0-1)\\n    -zc <levels>\\tzlib compression levels (1-9)\\t\\t[default: 9]\\n    -zm <levels>\\tzlib memory levels (1-9)\\t\\t[default: 8]\\n    -zs <strategies>\\tzlib compression strategies (0-3)\\t[default: 0-3]\\n    -zw <size>\\t\\tzlib window size (256,512,1k,2k,4k,8k,16k,32k)\\n    -full\\t\\tproduce a full report on IDAT (might reduce speed)\\n    -nb\\t\\t\\tno bit depth reduction\\n    -nc\\t\\t\\tno color type reduction\\n    -np\\t\\t\\tno palette reduction\\n    -nx\\t\\t\\tno reductions\\n    -nz\\t\\t\\tno IDAT recoding\\nEditing options:\\n    -snip\\t\\tcut one image out of multi-image or animation files\\n    -strip <objects>\\tstrip metadata objects (e.g. \\\"all\\\")\\nOptimization levels:\\n    -o0\\t\\t<=>\\t-o1 -nx -nz\\t\\t\\t\\t(0 or 1 trials)\\n    -o1\\t\\t<=>\\t-zc9 -zm8 -zs0 -f0\\t\\t\\t(1 trial)\\n    \\t\\t(or...)\\t-zc9 -zm8 -zs1 -f5\\t\\t\\t(1 trial)\\n    -o2\\t\\t<=>\\t-zc9 -zm8 -zs0-3 -f0,5\\t\\t\\t(8 trials)\\n    -o3\\t\\t<=>\\t-zc9 -zm8-9 -zs0-3 -f0,5\\t\\t(16 trials)\\n    -o4\\t\\t<=>\\t-zc9 -zm8 -zs0-3 -f0-5\\t\\t\\t(24 trials)\\n    -o5\\t\\t<=>\\t-zc9 -zm8-9 -zs0-3 -f0-5\\t\\t(48 trials)\\n    -o6\\t\\t<=>\\t-zc1-9 -zm8 -zs0-3 -f0-5\\t\\t(120 trials)\\n    -o7\\t\\t<=>\\t-zc1-9 -zm8-9 -zs0-3 -f0-5\\t\\t(240 trials)\\n    -o7 -zm1-9\\t<=>\\t-zc1-9 -zm1-9 -zs0-3 -f0-5\\t\\t(1080 trials)\\nNotes:\\n    The combination for -o1 is chosen heuristically.\\n    Exhaustive combinations such as \\\"-o7 -zm1-9\\\" are not generally recommended.\\n\""
            ]
        },
        {
            "path": null,
            "name": "msg_help_examples",
            "type": "const char *",
            "definition": [
                "static const char *msg_help_examples = \"Examples:\\n    optipng file.png\\t\\t\\t\\t\\t\\t(default speed)\\n    optipng -o5 file.png\\t\\t\\t\\t\\t(slow)\\n    optipng -o7 file.png\\t\\t\\t\\t\\t(very slow)\\n\""
            ]
        },
        {
            "path": null,
            "name": "msg_help_more",
            "type": "const char *",
            "definition": [
                "static const char *msg_help_more = \"Type \\\"optipng -h\\\" for extended help.\\n\""
            ]
        },
        {
            "path": null,
            "name": "operation",
            "type": "enum \n{\n  OP_RUN,\n  OP_SHOW_HELP,\n  OP_SHOW_VERSION\n}",
            "definition": [
                "static enum \n{\n  OP_RUN,\n  OP_SHOW_HELP,\n  OP_SHOW_VERSION\n} operation"
            ]
        },
        {
            "path": null,
            "name": "local_options",
            "type": "struct \n{\n  int help;\n  int version;\n}",
            "definition": [
                "static struct \n{\n  int help;\n  int version;\n} local_options"
            ]
        },
        {
            "path": null,
            "name": "options",
            "type": "struct opng_options",
            "definition": [
                "static struct opng_options options"
            ]
        },
        {
            "path": null,
            "name": "con_file",
            "type": "FILE *",
            "definition": [
                "static FILE *con_file"
            ]
        },
        {
            "path": null,
            "name": "log_file",
            "type": "FILE *",
            "definition": [
                "static FILE *log_file"
            ]
        },
        {
            "path": null,
            "name": "start_of_line",
            "type": "int",
            "definition": [
                "static int start_of_line"
            ]
        },
        {
            "path": null,
            "name": "the_exception_context",
            "type": "struct exception_context [1]",
            "definition": [
                "struct exception_context the_exception_context[1]"
            ]
        },
        {
            "path": null,
            "name": "k_presets",
            "type": "const struct opng_preset_struct\n{\n  const char *compr_level;\n  const char *mem_level;\n  const char *strategy;\n  const char *filter;\n} [7 + 1]",
            "definition": [
                "static const struct opng_preset_struct\n{\n  const char *compr_level;\n  const char *mem_level;\n  const char *strategy;\n  const char *filter;\n} k_presets[7 + 1] = {{\"\", \"\", \"\", \"\"}, {\"\", \"\", \"\", \"\"}, {\"9\", \"8\", \"0-\", \"0,5\"}, {\"9\", \"8-9\", \"0-\", \"0,5\"}, {\"9\", \"8\", \"0-\", \"0-\"}, {\"9\", \"8-9\", \"0-\", \"0-\"}, {\"1-9\", \"8\", \"0-\", \"0-\"}, {\"1-9\", \"8-9\", \"0-\", \"0-\"}}"
            ]
        },
        {
            "path": null,
            "name": "k_filter_table",
            "type": "const int [5 + 1]",
            "definition": [
                "static const int k_filter_table[5 + 1] = {0x08, 0x10, 0x20, 0x40, 0x80, (((0x08 | 0x10) | 0x20) | 0x40) | 0x80}"
            ]
        },
        {
            "path": null,
            "name": "k_sig_PLTE",
            "type": "const png_byte [4]",
            "definition": [
                "static const png_byte k_sig_PLTE[4] = {0x50, 0x4c, 0x54, 0x45}"
            ]
        },
        {
            "path": null,
            "name": "k_sig_tRNS",
            "type": "const png_byte [4]",
            "definition": [
                "static const png_byte k_sig_tRNS[4] = {0x74, 0x52, 0x4e, 0x53}"
            ]
        },
        {
            "path": null,
            "name": "k_sig_IDAT",
            "type": "const png_byte [4]",
            "definition": [
                "static const png_byte k_sig_IDAT[4] = {0x49, 0x44, 0x41, 0x54}"
            ]
        },
        {
            "path": null,
            "name": "k_sig_IEND",
            "type": "const png_byte [4]",
            "definition": [
                "static const png_byte k_sig_IEND[4] = {0x49, 0x45, 0x4e, 0x44}"
            ]
        },
        {
            "path": null,
            "name": "k_sig_bKGD",
            "type": "const png_byte [4]",
            "definition": [
                "static const png_byte k_sig_bKGD[4] = {0x62, 0x4b, 0x47, 0x44}"
            ]
        },
        {
            "path": null,
            "name": "k_sig_hIST",
            "type": "const png_byte [4]",
            "definition": [
                "static const png_byte k_sig_hIST[4] = {0x68, 0x49, 0x53, 0x54}"
            ]
        },
        {
            "path": null,
            "name": "k_sig_sBIT",
            "type": "const png_byte [4]",
            "definition": [
                "static const png_byte k_sig_sBIT[4] = {0x73, 0x42, 0x49, 0x54}"
            ]
        },
        {
            "path": null,
            "name": "k_sig_dSIG",
            "type": "const png_byte [4]",
            "definition": [
                "static const png_byte k_sig_dSIG[4] = {0x64, 0x53, 0x49, 0x47}"
            ]
        },
        {
            "path": null,
            "name": "k_sig_acTL",
            "type": "const png_byte [4]",
            "definition": [
                "static const png_byte k_sig_acTL[4] = {0x61, 0x63, 0x54, 0x4c}"
            ]
        },
        {
            "path": null,
            "name": "k_sig_fcTL",
            "type": "const png_byte [4]",
            "definition": [
                "static const png_byte k_sig_fcTL[4] = {0x66, 0x63, 0x54, 0x4c}"
            ]
        },
        {
            "path": null,
            "name": "k_sig_fdAT",
            "type": "const png_byte [4]",
            "definition": [
                "static const png_byte k_sig_fdAT[4] = {0x66, 0x64, 0x41, 0x54}"
            ]
        },
        {
            "path": null,
            "name": "k_idat_size_max",
            "type": "const opng_fsize_t",
            "definition": [
                "static const opng_fsize_t k_idat_size_max = (png_uint_32) 0x7fffffffL"
            ]
        },
        {
            "path": null,
            "name": "k_idat_size_max_string",
            "type": "const char *",
            "definition": [
                "static const char *k_idat_size_max_string = \"2GB\""
            ]
        },
        {
            "path": null,
            "name": "s_engine",
            "type": "struct opng_engine_struct\n{\n  int started;\n}",
            "definition": [
                "static struct opng_engine_struct\n{\n  int started;\n} s_engine"
            ]
        },
        {
            "path": null,
            "name": "s_process",
            "type": "struct opng_process_struct\n{\n  unsigned int status;\n  int num_iterations;\n  opng_foffset_t in_datastream_offset;\n  opng_fsize_t in_file_size;\n  opng_fsize_t out_file_size;\n  opng_fsize_t in_idat_size;\n  opng_fsize_t out_idat_size;\n  opng_fsize_t best_idat_size;\n  opng_fsize_t max_idat_size;\n  png_uint_32 in_plte_trns_size;\n  png_uint_32 out_plte_trns_size;\n  png_uint_32 reductions;\n  opng_bitset_t compr_level_set;\n  opng_bitset_t mem_level_set;\n  opng_bitset_t strategy_set;\n  opng_bitset_t filter_set;\n  int best_compr_level;\n  int best_mem_level;\n  int best_strategy;\n  int best_filter;\n}",
            "definition": [
                "static struct opng_process_struct\n{\n  unsigned int status;\n  int num_iterations;\n  opng_foffset_t in_datastream_offset;\n  opng_fsize_t in_file_size;\n  opng_fsize_t out_file_size;\n  opng_fsize_t in_idat_size;\n  opng_fsize_t out_idat_size;\n  opng_fsize_t best_idat_size;\n  opng_fsize_t max_idat_size;\n  png_uint_32 in_plte_trns_size;\n  png_uint_32 out_plte_trns_size;\n  png_uint_32 reductions;\n  opng_bitset_t compr_level_set;\n  opng_bitset_t mem_level_set;\n  opng_bitset_t strategy_set;\n  opng_bitset_t filter_set;\n  int best_compr_level;\n  int best_mem_level;\n  int best_strategy;\n  int best_filter;\n} s_process"
            ]
        },
        {
            "path": null,
            "name": "s_summary",
            "type": "struct opng_summary_struct\n{\n  unsigned int file_count;\n  unsigned int err_count;\n  unsigned int fix_count;\n  unsigned int snip_count;\n}",
            "definition": [
                "static struct opng_summary_struct\n{\n  unsigned int file_count;\n  unsigned int err_count;\n  unsigned int fix_count;\n  unsigned int snip_count;\n} s_summary"
            ]
        },
        {
            "path": null,
            "name": "s_image",
            "type": "struct opng_image_struct\n{\n  png_uint_32 width;\n  png_uint_32 height;\n  int bit_depth;\n  int color_type;\n  int compression_type;\n  int filter_type;\n  int interlace_type;\n  png_bytepp row_pointers;\n  png_colorp palette;\n  int num_palette;\n  png_color_16p background_ptr;\n  png_color_16 background;\n  png_uint_16p hist;\n  png_color_8p sig_bit_ptr;\n  png_color_8 sig_bit;\n  png_bytep trans_alpha;\n  int num_trans;\n  png_color_16p trans_color_ptr;\n  png_color_16 trans_color;\n  png_unknown_chunkp unknowns;\n  int num_unknowns;\n}",
            "definition": [
                "static struct opng_image_struct\n{\n  png_uint_32 width;\n  png_uint_32 height;\n  int bit_depth;\n  int color_type;\n  int compression_type;\n  int filter_type;\n  int interlace_type;\n  png_bytepp row_pointers;\n  png_colorp palette;\n  int num_palette;\n  png_color_16p background_ptr;\n  png_color_16 background;\n  png_uint_16p hist;\n  png_color_8p sig_bit_ptr;\n  png_color_8 sig_bit;\n  png_bytep trans_alpha;\n  int num_trans;\n  png_color_16p trans_color_ptr;\n  png_color_16 trans_color;\n  png_unknown_chunkp unknowns;\n  int num_unknowns;\n} s_image"
            ]
        },
        {
            "path": null,
            "name": "s_options",
            "type": "struct opng_options",
            "definition": [
                "static struct opng_options s_options"
            ]
        },
        {
            "path": null,
            "name": "s_read_ptr",
            "type": "png_structp",
            "definition": [
                "static png_structp s_read_ptr"
            ]
        },
        {
            "path": null,
            "name": "s_read_info_ptr",
            "type": "png_infop",
            "definition": [
                "static png_infop s_read_info_ptr"
            ]
        },
        {
            "path": null,
            "name": "s_write_ptr",
            "type": "png_structp",
            "definition": [
                "static png_structp s_write_ptr"
            ]
        },
        {
            "path": null,
            "name": "s_write_info_ptr",
            "type": "png_infop",
            "definition": [
                "static png_infop s_write_info_ptr"
            ]
        },
        {
            "path": null,
            "name": "usr_printf",
            "type": "void (*)(const char *fmt, ...)",
            "definition": [
                "static void (*usr_printf)(const char *fmt, ...)"
            ]
        },
        {
            "path": null,
            "name": "usr_print_cntrl",
            "type": "void (*)(int cntrl_code)",
            "definition": [
                "static void (*usr_print_cntrl)(int cntrl_code)"
            ]
        },
        {
            "path": null,
            "name": "usr_progress",
            "type": "void (*)(unsigned long num, unsigned long denom)",
            "definition": [
                "static void (*usr_progress)(unsigned long num, unsigned long denom)"
            ]
        },
        {
            "path": null,
            "name": "usr_panic",
            "type": "void (*)(const char *msg)",
            "definition": [
                "static void (*usr_panic)(const char *msg)"
            ]
        }
    ],
    "function": [
        {
            "path": null,
            "name": "test_compress",
            "header": "",
            "params": [
                "Byte *compr",
                "uLong comprLen",
                "Byte *uncompr",
                "uLong uncomprLen"
            ],
            "definition": "void test_compress(Byte *compr, uLong comprLen, Byte *uncompr, uLong uncomprLen)\n{\n  int err;\n  uLong len = ((uLong) strlen(hello)) + 1;\n  err = compress(compr, &comprLen, (const Bytef *) hello, len);\n  {\n    if (err != 0)\n    {\n      fprintf(stderr, \"%s error: %d\\n\", \"compress\", err);\n      exit(1);\n    }\n  }\n  ;\n  strcpy((char *) uncompr, \"garbage\");\n  err = uncompress(uncompr, &uncomprLen, compr, comprLen);\n  {\n    if (err != 0)\n    {\n      fprintf(stderr, \"%s error: %d\\n\", \"uncompress\", err);\n      exit(1);\n    }\n  }\n  ;\n  if (strcmp((char *) uncompr, hello))\n  {\n    fprintf(stderr, \"bad uncompress\\n\");\n    exit(1);\n  }\n  else\n  {\n    printf(\"uncompress(): %s\\n\", (char *) uncompr);\n  }\n}\n\n",
            "calle": [
                "compress",
                "exit",
                "fprintf",
                "printf",
                "strcmp",
                "strcpy",
                "strlen",
                "uncompress"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "compr",
                        "type": "Byte *",
                        "definition": [
                            "Byte *compr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "comprLen",
                        "type": "uLong",
                        "definition": [
                            "uLong comprLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uncompr",
                        "type": "Byte *",
                        "definition": [
                            "Byte *uncompr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uncomprLen",
                        "type": "uLong",
                        "definition": [
                            "uLong uncomprLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "uLong",
                        "definition": [
                            "uLong len = ((uLong) strlen(hello)) + 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hello",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_gzio",
            "header": "",
            "params": [
                "const char *fname",
                "Byte *uncompr",
                "uLong uncomprLen"
            ],
            "definition": "void test_gzio(const char *fname, Byte *uncompr, uLong uncomprLen)\n{\n  fprintf(stderr, \"NO_GZCOMPRESS -- gz* functions cannot compress\\n\");\n}\n\n",
            "calle": [
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fname",
                        "type": "const char *",
                        "definition": [
                            "const char *fname"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uncompr",
                        "type": "Byte *",
                        "definition": [
                            "Byte *uncompr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uncomprLen",
                        "type": "uLong",
                        "definition": [
                            "uLong uncomprLen"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_deflate",
            "header": "",
            "params": [
                "Byte *compr",
                "uLong comprLen"
            ],
            "definition": "void test_deflate(Byte *compr, uLong comprLen)\n{\n  z_stream c_stream;\n  int err;\n  uLong len = ((uLong) strlen(hello)) + 1;\n  c_stream.zalloc = zalloc;\n  c_stream.zfree = zfree;\n  c_stream.opaque = (voidpf) 0;\n  err = deflateInit_(&c_stream, -1, \"1.3-optipng\", (int) (sizeof(z_stream)));\n  {\n    if (err != 0)\n    {\n      fprintf(stderr, \"%s error: %d\\n\", \"deflateInit\", err);\n      exit(1);\n    }\n  }\n  ;\n  c_stream.next_in = (const unsigned char *) hello;\n  c_stream.next_out = compr;\n  while ((c_stream.total_in != len) && (c_stream.total_out < comprLen))\n  {\n    c_stream.avail_in = (c_stream.avail_out = 1);\n    err = deflate(&c_stream, 0);\n    {\n      if (err != 0)\n      {\n        fprintf(stderr, \"%s error: %d\\n\", \"deflate\", err);\n        exit(1);\n      }\n    }\n    ;\n  }\n\n  for (;;)\n  {\n    c_stream.avail_out = 1;\n    err = deflate(&c_stream, 4);\n    if (err == 1)\n    {\n      break;\n    }\n    {\n      if (err != 0)\n      {\n        fprintf(stderr, \"%s error: %d\\n\", \"deflate\", err);\n        exit(1);\n      }\n    }\n    ;\n  }\n\n  err = deflateEnd(&c_stream);\n  {\n    if (err != 0)\n    {\n      fprintf(stderr, \"%s error: %d\\n\", \"deflateEnd\", err);\n      exit(1);\n    }\n  }\n  ;\n}\n\n",
            "calle": [
                "deflate",
                "deflateEnd",
                "deflateInit_",
                "exit",
                "fprintf",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "compr",
                        "type": "Byte *",
                        "definition": [
                            "Byte *compr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "comprLen",
                        "type": "uLong",
                        "definition": [
                            "uLong comprLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_stream",
                        "type": "z_stream",
                        "definition": [
                            "z_stream c_stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "uLong",
                        "definition": [
                            "uLong len = ((uLong) strlen(hello)) + 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hello",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "zalloc",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "zfree",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_inflate",
            "header": "",
            "params": [
                "Byte *compr",
                "uLong comprLen",
                "Byte *uncompr",
                "uLong uncomprLen"
            ],
            "definition": "void test_inflate(Byte *compr, uLong comprLen, Byte *uncompr, uLong uncomprLen)\n{\n  int err;\n  z_stream d_stream;\n  strcpy((char *) uncompr, \"garbage\");\n  d_stream.zalloc = zalloc;\n  d_stream.zfree = zfree;\n  d_stream.opaque = (voidpf) 0;\n  d_stream.next_in = compr;\n  d_stream.avail_in = 0;\n  d_stream.next_out = uncompr;\n  err = inflateInit_(&d_stream, \"1.3-optipng\", (int) (sizeof(z_stream)));\n  {\n    if (err != 0)\n    {\n      fprintf(stderr, \"%s error: %d\\n\", \"inflateInit\", err);\n      exit(1);\n    }\n  }\n  ;\n  while ((d_stream.total_out < uncomprLen) && (d_stream.total_in < comprLen))\n  {\n    d_stream.avail_in = (d_stream.avail_out = 1);\n    err = inflate(&d_stream, 0);\n    if (err == 1)\n    {\n      break;\n    }\n    {\n      if (err != 0)\n      {\n        fprintf(stderr, \"%s error: %d\\n\", \"inflate\", err);\n        exit(1);\n      }\n    }\n    ;\n  }\n\n  err = inflateEnd(&d_stream);\n  {\n    if (err != 0)\n    {\n      fprintf(stderr, \"%s error: %d\\n\", \"inflateEnd\", err);\n      exit(1);\n    }\n  }\n  ;\n  if (strcmp((char *) uncompr, hello))\n  {\n    fprintf(stderr, \"bad inflate\\n\");\n    exit(1);\n  }\n  else\n  {\n    printf(\"inflate(): %s\\n\", (char *) uncompr);\n  }\n}\n\n",
            "calle": [
                "exit",
                "fprintf",
                "inflate",
                "inflateEnd",
                "inflateInit_",
                "printf",
                "strcmp",
                "strcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "compr",
                        "type": "Byte *",
                        "definition": [
                            "Byte *compr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "comprLen",
                        "type": "uLong",
                        "definition": [
                            "uLong comprLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uncompr",
                        "type": "Byte *",
                        "definition": [
                            "Byte *uncompr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uncomprLen",
                        "type": "uLong",
                        "definition": [
                            "uLong uncomprLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_stream",
                        "type": "z_stream",
                        "definition": [
                            "z_stream d_stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zalloc",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "zfree",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "hello",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_large_deflate",
            "header": "",
            "params": [
                "Byte *compr",
                "uLong comprLen",
                "Byte *uncompr",
                "uLong uncomprLen"
            ],
            "definition": "void test_large_deflate(Byte *compr, uLong comprLen, Byte *uncompr, uLong uncomprLen)\n{\n  z_stream c_stream;\n  int err;\n  c_stream.zalloc = zalloc;\n  c_stream.zfree = zfree;\n  c_stream.opaque = (voidpf) 0;\n  err = deflateInit_(&c_stream, 1, \"1.3-optipng\", (int) (sizeof(z_stream)));\n  {\n    if (err != 0)\n    {\n      fprintf(stderr, \"%s error: %d\\n\", \"deflateInit\", err);\n      exit(1);\n    }\n  }\n  ;\n  c_stream.next_out = compr;\n  c_stream.avail_out = (uInt) comprLen;\n  c_stream.next_in = uncompr;\n  c_stream.avail_in = (uInt) uncomprLen;\n  err = deflate(&c_stream, 0);\n  {\n    if (err != 0)\n    {\n      fprintf(stderr, \"%s error: %d\\n\", \"deflate\", err);\n      exit(1);\n    }\n  }\n  ;\n  if (c_stream.avail_in != 0)\n  {\n    fprintf(stderr, \"deflate not greedy\\n\");\n    exit(1);\n  }\n  deflateParams(&c_stream, 0, 0);\n  c_stream.next_in = compr;\n  c_stream.avail_in = ((uInt) uncomprLen) / 2;\n  err = deflate(&c_stream, 0);\n  {\n    if (err != 0)\n    {\n      fprintf(stderr, \"%s error: %d\\n\", \"deflate\", err);\n      exit(1);\n    }\n  }\n  ;\n  deflateParams(&c_stream, 9, 1);\n  c_stream.next_in = uncompr;\n  c_stream.avail_in = (uInt) uncomprLen;\n  err = deflate(&c_stream, 0);\n  {\n    if (err != 0)\n    {\n      fprintf(stderr, \"%s error: %d\\n\", \"deflate\", err);\n      exit(1);\n    }\n  }\n  ;\n  err = deflate(&c_stream, 4);\n  if (err != 1)\n  {\n    fprintf(stderr, \"deflate should report Z_STREAM_END\\n\");\n    exit(1);\n  }\n  err = deflateEnd(&c_stream);\n  {\n    if (err != 0)\n    {\n      fprintf(stderr, \"%s error: %d\\n\", \"deflateEnd\", err);\n      exit(1);\n    }\n  }\n  ;\n}\n\n",
            "calle": [
                "deflate",
                "deflateEnd",
                "deflateInit_",
                "deflateParams",
                "exit",
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "compr",
                        "type": "Byte *",
                        "definition": [
                            "Byte *compr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "comprLen",
                        "type": "uLong",
                        "definition": [
                            "uLong comprLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uncompr",
                        "type": "Byte *",
                        "definition": [
                            "Byte *uncompr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uncomprLen",
                        "type": "uLong",
                        "definition": [
                            "uLong uncomprLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_stream",
                        "type": "z_stream",
                        "definition": [
                            "z_stream c_stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zalloc",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "zfree",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_large_inflate",
            "header": "",
            "params": [
                "Byte *compr",
                "uLong comprLen",
                "Byte *uncompr",
                "uLong uncomprLen"
            ],
            "definition": "void test_large_inflate(Byte *compr, uLong comprLen, Byte *uncompr, uLong uncomprLen)\n{\n  int err;\n  z_stream d_stream;\n  strcpy((char *) uncompr, \"garbage\");\n  d_stream.zalloc = zalloc;\n  d_stream.zfree = zfree;\n  d_stream.opaque = (voidpf) 0;\n  d_stream.next_in = compr;\n  d_stream.avail_in = (uInt) comprLen;\n  err = inflateInit_(&d_stream, \"1.3-optipng\", (int) (sizeof(z_stream)));\n  {\n    if (err != 0)\n    {\n      fprintf(stderr, \"%s error: %d\\n\", \"inflateInit\", err);\n      exit(1);\n    }\n  }\n  ;\n  for (;;)\n  {\n    d_stream.next_out = uncompr;\n    d_stream.avail_out = (uInt) uncomprLen;\n    err = inflate(&d_stream, 0);\n    if (err == 1)\n    {\n      break;\n    }\n    {\n      if (err != 0)\n      {\n        fprintf(stderr, \"%s error: %d\\n\", \"large inflate\", err);\n        exit(1);\n      }\n    }\n    ;\n  }\n\n  err = inflateEnd(&d_stream);\n  {\n    if (err != 0)\n    {\n      fprintf(stderr, \"%s error: %d\\n\", \"inflateEnd\", err);\n      exit(1);\n    }\n  }\n  ;\n  if (d_stream.total_out != ((2 * uncomprLen) + (uncomprLen / 2)))\n  {\n    fprintf(stderr, \"bad large inflate: %ld\\n\", d_stream.total_out);\n    exit(1);\n  }\n  else\n  {\n    printf(\"large_inflate(): OK\\n\");\n  }\n}\n\n",
            "calle": [
                "exit",
                "fprintf",
                "inflate",
                "inflateEnd",
                "inflateInit_",
                "printf",
                "strcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "compr",
                        "type": "Byte *",
                        "definition": [
                            "Byte *compr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "comprLen",
                        "type": "uLong",
                        "definition": [
                            "uLong comprLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uncompr",
                        "type": "Byte *",
                        "definition": [
                            "Byte *uncompr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uncomprLen",
                        "type": "uLong",
                        "definition": [
                            "uLong uncomprLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_stream",
                        "type": "z_stream",
                        "definition": [
                            "z_stream d_stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zalloc",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "zfree",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_flush",
            "header": "",
            "params": [
                "Byte *compr",
                "uLong *comprLen"
            ],
            "definition": "void test_flush(Byte *compr, uLong *comprLen)\n{\n  z_stream c_stream;\n  int err;\n  uInt len = ((uInt) strlen(hello)) + 1;\n  c_stream.zalloc = zalloc;\n  c_stream.zfree = zfree;\n  c_stream.opaque = (voidpf) 0;\n  err = deflateInit_(&c_stream, -1, \"1.3-optipng\", (int) (sizeof(z_stream)));\n  {\n    if (err != 0)\n    {\n      fprintf(stderr, \"%s error: %d\\n\", \"deflateInit\", err);\n      exit(1);\n    }\n  }\n  ;\n  c_stream.next_in = (const unsigned char *) hello;\n  c_stream.next_out = compr;\n  c_stream.avail_in = 3;\n  c_stream.avail_out = (uInt) (*comprLen);\n  err = deflate(&c_stream, 3);\n  {\n    if (err != 0)\n    {\n      fprintf(stderr, \"%s error: %d\\n\", \"deflate\", err);\n      exit(1);\n    }\n  }\n  ;\n  compr[3] += 1;\n  c_stream.avail_in = len - 3;\n  err = deflate(&c_stream, 4);\n  if (err != 1)\n  {\n    {\n      if (err != 0)\n      {\n        fprintf(stderr, \"%s error: %d\\n\", \"deflate\", err);\n        exit(1);\n      }\n    }\n    ;\n  }\n  err = deflateEnd(&c_stream);\n  {\n    if (err != 0)\n    {\n      fprintf(stderr, \"%s error: %d\\n\", \"deflateEnd\", err);\n      exit(1);\n    }\n  }\n  ;\n  *comprLen = c_stream.total_out;\n}\n\n",
            "calle": [
                "deflate",
                "deflateEnd",
                "deflateInit_",
                "exit",
                "fprintf",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "compr",
                        "type": "Byte *",
                        "definition": [
                            "Byte *compr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "comprLen",
                        "type": "uLong *",
                        "definition": [
                            "uLong *comprLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_stream",
                        "type": "z_stream",
                        "definition": [
                            "z_stream c_stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "uInt",
                        "definition": [
                            "uInt len = ((uInt) strlen(hello)) + 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hello",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "zalloc",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "zfree",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_sync",
            "header": "",
            "params": [
                "Byte *compr",
                "uLong comprLen",
                "Byte *uncompr",
                "uLong uncomprLen"
            ],
            "definition": "void test_sync(Byte *compr, uLong comprLen, Byte *uncompr, uLong uncomprLen)\n{\n  int err;\n  z_stream d_stream;\n  strcpy((char *) uncompr, \"garbage\");\n  d_stream.zalloc = zalloc;\n  d_stream.zfree = zfree;\n  d_stream.opaque = (voidpf) 0;\n  d_stream.next_in = compr;\n  d_stream.avail_in = 2;\n  err = inflateInit_(&d_stream, \"1.3-optipng\", (int) (sizeof(z_stream)));\n  {\n    if (err != 0)\n    {\n      fprintf(stderr, \"%s error: %d\\n\", \"inflateInit\", err);\n      exit(1);\n    }\n  }\n  ;\n  d_stream.next_out = uncompr;\n  d_stream.avail_out = (uInt) uncomprLen;\n  err = inflate(&d_stream, 0);\n  {\n    if (err != 0)\n    {\n      fprintf(stderr, \"%s error: %d\\n\", \"inflate\", err);\n      exit(1);\n    }\n  }\n  ;\n  d_stream.avail_in = ((uInt) comprLen) - 2;\n  err = inflateSync(&d_stream);\n  {\n    if (err != 0)\n    {\n      fprintf(stderr, \"%s error: %d\\n\", \"inflateSync\", err);\n      exit(1);\n    }\n  }\n  ;\n  err = inflate(&d_stream, 4);\n  if (err != 1)\n  {\n    fprintf(stderr, \"inflate should report Z_STREAM_END\\n\");\n    exit(1);\n  }\n  err = inflateEnd(&d_stream);\n  {\n    if (err != 0)\n    {\n      fprintf(stderr, \"%s error: %d\\n\", \"inflateEnd\", err);\n      exit(1);\n    }\n  }\n  ;\n  printf(\"after inflateSync(): hel%s\\n\", (char *) uncompr);\n}\n\n",
            "calle": [
                "exit",
                "fprintf",
                "inflate",
                "inflateEnd",
                "inflateInit_",
                "inflateSync",
                "printf",
                "strcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "compr",
                        "type": "Byte *",
                        "definition": [
                            "Byte *compr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "comprLen",
                        "type": "uLong",
                        "definition": [
                            "uLong comprLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uncompr",
                        "type": "Byte *",
                        "definition": [
                            "Byte *uncompr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uncomprLen",
                        "type": "uLong",
                        "definition": [
                            "uLong uncomprLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_stream",
                        "type": "z_stream",
                        "definition": [
                            "z_stream d_stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zalloc",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "zfree",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_dict_deflate",
            "header": "",
            "params": [
                "Byte *compr",
                "uLong comprLen"
            ],
            "definition": "void test_dict_deflate(Byte *compr, uLong comprLen)\n{\n  z_stream c_stream;\n  int err;\n  c_stream.zalloc = zalloc;\n  c_stream.zfree = zfree;\n  c_stream.opaque = (voidpf) 0;\n  err = deflateInit_(&c_stream, 9, \"1.3-optipng\", (int) (sizeof(z_stream)));\n  {\n    if (err != 0)\n    {\n      fprintf(stderr, \"%s error: %d\\n\", \"deflateInit\", err);\n      exit(1);\n    }\n  }\n  ;\n  err = deflateSetDictionary(&c_stream, (const Bytef *) dictionary, (int) (sizeof(dictionary)));\n  {\n    if (err != 0)\n    {\n      fprintf(stderr, \"%s error: %d\\n\", \"deflateSetDictionary\", err);\n      exit(1);\n    }\n  }\n  ;\n  dictId = c_stream.adler;\n  c_stream.next_out = compr;\n  c_stream.avail_out = (uInt) comprLen;\n  c_stream.next_in = (const unsigned char *) hello;\n  c_stream.avail_in = ((uInt) strlen(hello)) + 1;\n  err = deflate(&c_stream, 4);\n  if (err != 1)\n  {\n    fprintf(stderr, \"deflate should report Z_STREAM_END\\n\");\n    exit(1);\n  }\n  err = deflateEnd(&c_stream);\n  {\n    if (err != 0)\n    {\n      fprintf(stderr, \"%s error: %d\\n\", \"deflateEnd\", err);\n      exit(1);\n    }\n  }\n  ;\n}\n\n",
            "calle": [
                "deflate",
                "deflateEnd",
                "deflateInit_",
                "deflateSetDictionary",
                "exit",
                "fprintf",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "compr",
                        "type": "Byte *",
                        "definition": [
                            "Byte *compr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "comprLen",
                        "type": "uLong",
                        "definition": [
                            "uLong comprLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_stream",
                        "type": "z_stream",
                        "definition": [
                            "z_stream c_stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zalloc",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "zfree",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "dictionary",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "dictId",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "hello",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "test_dict_inflate",
            "header": "",
            "params": [
                "Byte *compr",
                "uLong comprLen",
                "Byte *uncompr",
                "uLong uncomprLen"
            ],
            "definition": "void test_dict_inflate(Byte *compr, uLong comprLen, Byte *uncompr, uLong uncomprLen)\n{\n  int err;\n  z_stream d_stream;\n  strcpy((char *) uncompr, \"garbage\");\n  d_stream.zalloc = zalloc;\n  d_stream.zfree = zfree;\n  d_stream.opaque = (voidpf) 0;\n  d_stream.next_in = compr;\n  d_stream.avail_in = (uInt) comprLen;\n  err = inflateInit_(&d_stream, \"1.3-optipng\", (int) (sizeof(z_stream)));\n  {\n    if (err != 0)\n    {\n      fprintf(stderr, \"%s error: %d\\n\", \"inflateInit\", err);\n      exit(1);\n    }\n  }\n  ;\n  d_stream.next_out = uncompr;\n  d_stream.avail_out = (uInt) uncomprLen;\n  for (;;)\n  {\n    helper_test_dict_inflate_1(&err, d_stream);\n  }\n\n  err = inflateEnd(&d_stream);\n  {\n    if (err != 0)\n    {\n      fprintf(stderr, \"%s error: %d\\n\", \"inflateEnd\", err);\n      exit(1);\n    }\n  }\n  ;\n  if (strcmp((char *) uncompr, hello))\n  {\n    fprintf(stderr, \"bad inflate with dict\\n\");\n    exit(1);\n  }\n  else\n  {\n    printf(\"inflate with dictionary: %s\\n\", (char *) uncompr);\n  }\n}\n\n",
            "calle": [
                "exit",
                "fprintf",
                "helper_test_dict_inflate_1",
                "inflateEnd",
                "inflateInit_",
                "printf",
                "strcmp",
                "strcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "compr",
                        "type": "Byte *",
                        "definition": [
                            "Byte *compr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "comprLen",
                        "type": "uLong",
                        "definition": [
                            "uLong comprLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uncompr",
                        "type": "Byte *",
                        "definition": [
                            "Byte *uncompr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uncomprLen",
                        "type": "uLong",
                        "definition": [
                            "uLong uncomprLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_stream",
                        "type": "z_stream",
                        "definition": [
                            "z_stream d_stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "zalloc",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "zfree",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "hello",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#example",
            "header": "",
            "params": [
                "int argc",
                "char *argv[]"
            ],
            "definition": "int main(int argc, char *argv[])\n{\n  Byte *compr;\n  unsigned int compr_idx = 0;\n  Byte *uncompr;\n  unsigned int uncompr_idx = 0;\n  uLong uncomprLen = 20000;\n  uLong comprLen = 3 * uncomprLen;\n  static const char *myVersion = \"1.3-optipng\";\n  if (zlibVersion()[0] != myVersion[0])\n  {\n    fprintf(stderr, \"incompatible zlib version\\n\");\n    exit(1);\n  }\n  else\n    if (strcmp(zlibVersion(), \"1.3-optipng\") != 0)\n  {\n    fprintf(stderr, \"warning: different zlib version linked: %s\\n\", zlibVersion());\n  }\n  printf(\"zlib version %s = 0x%04x, compile flags = 0x%lx\\n\", \"1.3-optipng\", 0x130f, zlibCompileFlags());\n  compr_idx = (Byte *) calloc((uInt) comprLen, 1);\n  uncompr_idx = (Byte *) calloc((uInt) uncomprLen, 1);\n  if (((&compr[compr_idx]) == 0) || ((&uncompr[uncompr_idx]) == 0))\n  {\n    printf(\"out of memory\\n\");\n    exit(1);\n  }\n  test_compress(compr, comprLen, uncompr, uncomprLen);\n  test_gzio((argc > 1) ? (argv[1]) : (\"foo.gz\"), uncompr, uncomprLen);\n  test_deflate(compr, comprLen);\n  test_inflate(compr, comprLen, uncompr, uncomprLen);\n  test_large_deflate(compr, comprLen, uncompr, uncomprLen);\n  test_large_inflate(compr, comprLen, uncompr, uncomprLen);\n  test_flush(compr, &comprLen);\n  test_sync(compr, comprLen, uncompr, uncomprLen);\n  comprLen = 3 * uncomprLen;\n  test_dict_deflate(compr, comprLen);\n  test_dict_inflate(compr, comprLen, uncompr, uncomprLen);\n  free(compr);\n  free(uncompr);\n  return 0;\n}\n\n",
            "calle": [
                "calloc",
                "exit",
                "fprintf",
                "free",
                "printf",
                "strcmp",
                "test_compress",
                "test_deflate",
                "test_dict_deflate",
                "test_dict_inflate",
                "test_flush",
                "test_gzio",
                "test_inflate",
                "test_large_deflate",
                "test_large_inflate",
                "test_sync",
                "zlibCompileFlags",
                "zlibVersion"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char *[]",
                        "definition": [
                            "char *argv[]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compr",
                        "type": "Byte *",
                        "definition": [
                            "Byte *compr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int compr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uncompr",
                        "type": "Byte *",
                        "definition": [
                            "Byte *uncompr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uncompr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int uncompr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uncomprLen",
                        "type": "uLong",
                        "definition": [
                            "uLong uncomprLen = 20000"
                        ]
                    },
                    {
                        "path": null,
                        "name": "comprLen",
                        "type": "uLong",
                        "definition": [
                            "uLong comprLen = 3 * uncomprLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "myVersion",
                        "type": "const char *",
                        "definition": [
                            "static const char *myVersion = \"1.3-optipng\""
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_test_dict_inflate_1",
            "header": "",
            "params": [
                "int * const err_ref",
                "z_stream d_stream"
            ],
            "definition": "void helper_test_dict_inflate_1(int * const err_ref, z_stream d_stream)\n{\n  int err = *err_ref;\n  err = inflate(&d_stream, 0);\n  if (err == 1)\n  {\n    break;\n  }\n  if (err == 2)\n  {\n    if (d_stream.adler != dictId)\n    {\n      fprintf(stderr, \"unexpected dictionary\");\n      exit(1);\n    }\n    err = inflateSetDictionary(&d_stream, (const Bytef *) dictionary, (int) (sizeof(dictionary)));\n  }\n  {\n    if (err != 0)\n    {\n      fprintf(stderr, \"%s error: %d\\n\", \"inflate with dict\", err);\n      exit(1);\n    }\n  }\n  ;\n  *err_ref = err;\n}\n\n",
            "calle": [
                "exit",
                "fprintf",
                "inflate",
                "inflateSetDictionary"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "err_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d_stream",
                        "type": "z_stream",
                        "definition": [
                            "z_stream d_stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = *err_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dictId",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "dictionary",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "adler32",
            "header": "extern uLong adler32(uLong adler, const Bytef *buf, uInt len)",
            "params": [
                "uLong adler",
                "const Bytef *buf",
                "uInt len"
            ],
            "definition": "uLong adler32(uLong adler, const Bytef *buf, uInt len)\n{\n  return adler32_z(adler, buf, len);\n}\n\n",
            "calle": [
                "adler32_z"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "adler",
                        "type": "uLong",
                        "definition": [
                            "uLong adler"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "const Bytef *",
                        "definition": [
                            "const Bytef *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "uInt",
                        "definition": [
                            "uInt len"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "adler32_z",
            "header": "extern uLong adler32_z(uLong adler, const Bytef *buf, z_size_t len)",
            "params": [
                "uLong adler",
                "const Bytef *buf",
                "z_size_t len"
            ],
            "definition": "uLong adler32_z(uLong adler, const Bytef *buf, z_size_t len)\n{\n  unsigned int buf_idx = 0;\n  unsigned long sum2;\n  unsigned n;\n  sum2 = (adler >> 16) & 0xffff;\n  adler &= 0xffff;\n  if (len == 1)\n  {\n    adler += buf[0 + buf_idx];\n    if (adler >= 65521U)\n    {\n      adler -= 65521U;\n    }\n    sum2 += adler;\n    if (sum2 >= 65521U)\n    {\n      sum2 -= 65521U;\n    }\n    return adler | (sum2 << 16);\n  }\n  if ((&buf[buf_idx]) == 0)\n  {\n    return 1L;\n  }\n  if (len < 16)\n  {\n    while (len--)\n    {\n      adler += buf[buf_idx];\n      buf_idx += 1;\n      sum2 += adler;\n    }\n\n    if (adler >= 65521U)\n    {\n      adler -= 65521U;\n    }\n    sum2 %= 65521U;\n    return adler | (sum2 << 16);\n  }\n  while (len >= 5552)\n  {\n    helper_adler32_z_1(&adler, &len, &buf_idx, &sum2, &n, buf);\n  }\n\n  if (len)\n  {\n    helper_adler32_z_2(&adler, &len, &buf_idx, &sum2, buf);\n  }\n  return adler | (sum2 << 16);\n}\n\n",
            "calle": [
                "helper_adler32_z_1",
                "helper_adler32_z_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "adler",
                        "type": "uLong",
                        "definition": [
                            "uLong adler"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "const Bytef *",
                        "definition": [
                            "const Bytef *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "z_size_t",
                        "definition": [
                            "z_size_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int buf_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum2",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long sum2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "unsigned",
                        "definition": [
                            "unsigned n"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "adler32_combine",
            "header": "extern uLong adler32_combine(uLong, uLong, off_t)",
            "params": [
                "uLong adler1",
                "uLong adler2",
                "off_t len2"
            ],
            "definition": "uLong adler32_combine(uLong adler1, uLong adler2, off_t len2)\n{\n  return adler32_combine_(adler1, adler2, len2);\n}\n\n",
            "calle": [
                "adler32_combine_"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "adler1",
                        "type": "uLong",
                        "definition": [
                            "uLong adler1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "adler2",
                        "type": "uLong",
                        "definition": [
                            "uLong adler2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len2",
                        "type": "off_t",
                        "definition": [
                            "off_t len2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "adler32_combine64",
            "header": "extern uLong adler32_combine64(uLong, uLong, off_t)",
            "params": [
                "uLong adler1",
                "uLong adler2",
                "off_t len2"
            ],
            "definition": "uLong adler32_combine64(uLong adler1, uLong adler2, off_t len2)\n{\n  return adler32_combine_(adler1, adler2, len2);\n}\n\n",
            "calle": [
                "adler32_combine_"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "adler1",
                        "type": "uLong",
                        "definition": [
                            "uLong adler1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "adler2",
                        "type": "uLong",
                        "definition": [
                            "uLong adler2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len2",
                        "type": "off_t",
                        "definition": [
                            "off_t len2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "adler32_combine_",
            "header": "",
            "params": [
                "uLong adler1",
                "uLong adler2",
                "off_t len2"
            ],
            "definition": "static uLong adler32_combine_(uLong adler1, uLong adler2, off_t len2)\n{\n  unsigned long sum1;\n  unsigned long sum2;\n  unsigned rem;\n  if (len2 < 0)\n  {\n    return 0xffffffffUL;\n  }\n  len2 %= 65521U;\n  rem = (unsigned) len2;\n  sum1 = adler1 & 0xffff;\n  sum2 = rem * sum1;\n  sum2 %= 65521U;\n  sum1 += ((adler2 & 0xffff) + 65521U) - 1;\n  sum2 += ((((adler1 >> 16) & 0xffff) + ((adler2 >> 16) & 0xffff)) + 65521U) - rem;\n  if (sum1 >= 65521U)\n  {\n    sum1 -= 65521U;\n  }\n  if (sum1 >= 65521U)\n  {\n    sum1 -= 65521U;\n  }\n  if (sum2 >= (((unsigned long) 65521U) << 1))\n  {\n    sum2 -= ((unsigned long) 65521U) << 1;\n  }\n  if (sum2 >= 65521U)\n  {\n    sum2 -= 65521U;\n  }\n  return sum1 | (sum2 << 16);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "adler1",
                        "type": "uLong",
                        "definition": [
                            "uLong adler1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "adler2",
                        "type": "uLong",
                        "definition": [
                            "uLong adler2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len2",
                        "type": "off_t",
                        "definition": [
                            "off_t len2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum1",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long sum1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum2",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long sum2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rem",
                        "type": "unsigned",
                        "definition": [
                            "unsigned rem"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_adler32_z_1",
            "header": "",
            "params": [
                "uLong * const adler_ref",
                "z_size_t * const len_ref",
                "unsigned int * const buf_idx_ref",
                "unsigned long * const sum2_ref",
                "unsigned * const n_ref",
                "const Bytef * const buf"
            ],
            "definition": "void helper_adler32_z_1(uLong * const adler_ref, z_size_t * const len_ref, unsigned int * const buf_idx_ref, unsigned long * const sum2_ref, unsigned * const n_ref, const Bytef * const buf)\n{\n  uLong adler = *adler_ref;\n  z_size_t len = *len_ref;\n  unsigned int buf_idx = *buf_idx_ref;\n  unsigned long sum2 = *sum2_ref;\n  unsigned n = *n_ref;\n  len -= 5552;\n  n = 5552 / 16;\n  do\n  {\n    helper_helper_adler32_z_1_1(&adler, &buf_idx, &sum2, buf);\n  }\n  while (--n);\n  adler %= 65521U;\n  sum2 %= 65521U;\n  *adler_ref = adler;\n  *len_ref = len;\n  *buf_idx_ref = buf_idx;\n  *sum2_ref = sum2;\n  *n_ref = n;\n}\n\n",
            "calle": [
                "helper_helper_adler32_z_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "adler_ref",
                        "type": "uLong * const",
                        "definition": [
                            "uLong * const adler_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "z_size_t * const",
                        "definition": [
                            "z_size_t * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const buf_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum2_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const sum2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "const Bytef * const",
                        "definition": [
                            "const Bytef * const buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "adler",
                        "type": "uLong",
                        "definition": [
                            "uLong adler = *adler_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "z_size_t",
                        "definition": [
                            "z_size_t len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int buf_idx = *buf_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum2",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long sum2 = *sum2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "unsigned",
                        "definition": [
                            "unsigned n = *n_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_adler32_z_2",
            "header": "",
            "params": [
                "uLong * const adler_ref",
                "z_size_t * const len_ref",
                "unsigned int * const buf_idx_ref",
                "unsigned long * const sum2_ref",
                "const Bytef * const buf"
            ],
            "definition": "void helper_adler32_z_2(uLong * const adler_ref, z_size_t * const len_ref, unsigned int * const buf_idx_ref, unsigned long * const sum2_ref, const Bytef * const buf)\n{\n  uLong adler = *adler_ref;\n  z_size_t len = *len_ref;\n  unsigned int buf_idx = *buf_idx_ref;\n  unsigned long sum2 = *sum2_ref;\n  while (len >= 16)\n  {\n    helper_helper_adler32_z_2_1(&adler, &len, &buf_idx, &sum2, buf);\n  }\n\n  while (len--)\n  {\n    adler += buf[buf_idx];\n    buf_idx += 1;\n    sum2 += adler;\n  }\n\n  adler %= 65521U;\n  sum2 %= 65521U;\n  *adler_ref = adler;\n  *len_ref = len;\n  *buf_idx_ref = buf_idx;\n  *sum2_ref = sum2;\n}\n\n",
            "calle": [
                "helper_helper_adler32_z_2_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "adler_ref",
                        "type": "uLong * const",
                        "definition": [
                            "uLong * const adler_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "z_size_t * const",
                        "definition": [
                            "z_size_t * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const buf_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum2_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const sum2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "const Bytef * const",
                        "definition": [
                            "const Bytef * const buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "adler",
                        "type": "uLong",
                        "definition": [
                            "uLong adler = *adler_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "z_size_t",
                        "definition": [
                            "z_size_t len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int buf_idx = *buf_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum2",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long sum2 = *sum2_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_adler32_z_1_1",
            "header": "",
            "params": [
                "uLong * const adler_ref",
                "unsigned int * const buf_idx_ref",
                "unsigned long * const sum2_ref",
                "const Bytef * const buf"
            ],
            "definition": "void helper_helper_adler32_z_1_1(uLong * const adler_ref, unsigned int * const buf_idx_ref, unsigned long * const sum2_ref, const Bytef * const buf)\n{\n  uLong adler = *adler_ref;\n  unsigned int buf_idx = *buf_idx_ref;\n  unsigned long sum2 = *sum2_ref;\n  {\n    adler += buf[0 + buf_idx];\n    sum2 += adler;\n  }\n  ;\n  {\n    adler += buf[(0 + 1) + buf_idx];\n    sum2 += adler;\n  }\n  ;\n  ;\n  {\n    adler += buf[(0 + 2) + buf_idx];\n    sum2 += adler;\n  }\n  ;\n  {\n    adler += buf[((0 + 2) + 1) + buf_idx];\n    sum2 += adler;\n  }\n  ;\n  ;\n  ;\n  {\n    adler += buf[(0 + 4) + buf_idx];\n    sum2 += adler;\n  }\n  ;\n  {\n    adler += buf[((0 + 4) + 1) + buf_idx];\n    sum2 += adler;\n  }\n  ;\n  ;\n  {\n    adler += buf[((0 + 4) + 2) + buf_idx];\n    sum2 += adler;\n  }\n  ;\n  {\n    adler += buf[(((0 + 4) + 2) + 1) + buf_idx];\n    sum2 += adler;\n  }\n  ;\n  ;\n  ;\n  ;\n  {\n    adler += buf[8 + buf_idx];\n    sum2 += adler;\n  }\n  ;\n  {\n    adler += buf[(8 + 1) + buf_idx];\n    sum2 += adler;\n  }\n  ;\n  ;\n  {\n    adler += buf[(8 + 2) + buf_idx];\n    sum2 += adler;\n  }\n  ;\n  {\n    adler += buf[((8 + 2) + 1) + buf_idx];\n    sum2 += adler;\n  }\n  ;\n  ;\n  ;\n  {\n    adler += buf[(8 + 4) + buf_idx];\n    sum2 += adler;\n  }\n  ;\n  {\n    adler += buf[((8 + 4) + 1) + buf_idx];\n    sum2 += adler;\n  }\n  ;\n  ;\n  {\n    adler += buf[((8 + 4) + 2) + buf_idx];\n    sum2 += adler;\n  }\n  ;\n  {\n    adler += buf[(((8 + 4) + 2) + 1) + buf_idx];\n    sum2 += adler;\n  }\n  ;\n  ;\n  ;\n  ;\n  ;\n  buf_idx += 16;\n  *adler_ref = adler;\n  *buf_idx_ref = buf_idx;\n  *sum2_ref = sum2;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "adler_ref",
                        "type": "uLong * const",
                        "definition": [
                            "uLong * const adler_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const buf_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum2_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const sum2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "const Bytef * const",
                        "definition": [
                            "const Bytef * const buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "adler",
                        "type": "uLong",
                        "definition": [
                            "uLong adler = *adler_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int buf_idx = *buf_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum2",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long sum2 = *sum2_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_adler32_z_2_1",
            "header": "",
            "params": [
                "uLong * const adler_ref",
                "z_size_t * const len_ref",
                "unsigned int * const buf_idx_ref",
                "unsigned long * const sum2_ref",
                "const Bytef * const buf"
            ],
            "definition": "void helper_helper_adler32_z_2_1(uLong * const adler_ref, z_size_t * const len_ref, unsigned int * const buf_idx_ref, unsigned long * const sum2_ref, const Bytef * const buf)\n{\n  uLong adler = *adler_ref;\n  z_size_t len = *len_ref;\n  unsigned int buf_idx = *buf_idx_ref;\n  unsigned long sum2 = *sum2_ref;\n  len -= 16;\n  {\n    adler += buf[0 + buf_idx];\n    sum2 += adler;\n  }\n  ;\n  {\n    adler += buf[(0 + 1) + buf_idx];\n    sum2 += adler;\n  }\n  ;\n  ;\n  {\n    adler += buf[(0 + 2) + buf_idx];\n    sum2 += adler;\n  }\n  ;\n  {\n    adler += buf[((0 + 2) + 1) + buf_idx];\n    sum2 += adler;\n  }\n  ;\n  ;\n  ;\n  {\n    adler += buf[(0 + 4) + buf_idx];\n    sum2 += adler;\n  }\n  ;\n  {\n    adler += buf[((0 + 4) + 1) + buf_idx];\n    sum2 += adler;\n  }\n  ;\n  ;\n  {\n    adler += buf[((0 + 4) + 2) + buf_idx];\n    sum2 += adler;\n  }\n  ;\n  {\n    adler += buf[(((0 + 4) + 2) + 1) + buf_idx];\n    sum2 += adler;\n  }\n  ;\n  ;\n  ;\n  ;\n  {\n    adler += buf[8 + buf_idx];\n    sum2 += adler;\n  }\n  ;\n  {\n    adler += buf[(8 + 1) + buf_idx];\n    sum2 += adler;\n  }\n  ;\n  ;\n  {\n    adler += buf[(8 + 2) + buf_idx];\n    sum2 += adler;\n  }\n  ;\n  {\n    adler += buf[((8 + 2) + 1) + buf_idx];\n    sum2 += adler;\n  }\n  ;\n  ;\n  ;\n  {\n    adler += buf[(8 + 4) + buf_idx];\n    sum2 += adler;\n  }\n  ;\n  {\n    adler += buf[((8 + 4) + 1) + buf_idx];\n    sum2 += adler;\n  }\n  ;\n  ;\n  {\n    adler += buf[((8 + 4) + 2) + buf_idx];\n    sum2 += adler;\n  }\n  ;\n  {\n    adler += buf[(((8 + 4) + 2) + 1) + buf_idx];\n    sum2 += adler;\n  }\n  ;\n  ;\n  ;\n  ;\n  ;\n  buf_idx += 16;\n  *adler_ref = adler;\n  *len_ref = len;\n  *buf_idx_ref = buf_idx;\n  *sum2_ref = sum2;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "adler_ref",
                        "type": "uLong * const",
                        "definition": [
                            "uLong * const adler_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "z_size_t * const",
                        "definition": [
                            "z_size_t * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const buf_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum2_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const sum2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "const Bytef * const",
                        "definition": [
                            "const Bytef * const buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "adler",
                        "type": "uLong",
                        "definition": [
                            "uLong adler = *adler_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "z_size_t",
                        "definition": [
                            "z_size_t len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int buf_idx = *buf_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum2",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long sum2 = *sum2_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "crc32",
            "header": "extern uLong crc32(uLong crc, const Bytef *buf, uInt len)",
            "params": [
                "unsigned long crc",
                "const unsigned char *buf",
                "uInt len"
            ],
            "definition": "unsigned long crc32(unsigned long crc, const unsigned char *buf, uInt len)\n{\n  return crc32_z(crc, buf, len);\n}\n\n",
            "calle": [
                "crc32_z"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "crc",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long crc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "uInt",
                        "definition": [
                            "uInt len"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "crc32_z",
            "header": "extern uLong crc32_z(uLong crc, const Bytef *buf, z_size_t len)",
            "params": [
                "unsigned long crc",
                "const unsigned char *buf",
                "z_size_t len"
            ],
            "definition": "unsigned long crc32_z(unsigned long crc, const unsigned char *buf, z_size_t len)\n{\n  unsigned int buf_idx = 0;\n  if ((&buf[buf_idx]) == 0)\n  {\n    return 0;\n  }\n  crc = (~crc) & 0xffffffff;\n  if (len >= (((5 * 8) + 8) - 1))\n  {\n    helper_crc32_z_2(&crc, &len, &buf_idx, buf);\n  }\n  while (len >= 8)\n  {\n    helper_crc32_z_1(&crc, &len, &buf_idx, buf);\n  }\n\n  while (len)\n  {\n    len -= 1;\n    crc = (crc >> 8) ^ crc_table[(crc ^ buf[buf_idx]) & 0xff];\n    buf_idx += 1;\n  }\n\n  return crc ^ 0xffffffff;\n}\n\n",
            "calle": [
                "helper_crc32_z_1",
                "helper_crc32_z_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "crc",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long crc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "z_size_t",
                        "definition": [
                            "z_size_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int buf_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc_table",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "crc32_combine_op",
            "header": "extern uLong crc32_combine_op(uLong crc1, uLong crc2, uLong op)",
            "params": [
                "uLong crc1",
                "uLong crc2",
                "uLong op"
            ],
            "definition": "uLong crc32_combine_op(uLong crc1, uLong crc2, uLong op)\n{\n  return multmodp(op, crc1) ^ (crc2 & 0xffffffff);\n}\n\n",
            "calle": [
                "multmodp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "crc1",
                        "type": "uLong",
                        "definition": [
                            "uLong crc1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc2",
                        "type": "uLong",
                        "definition": [
                            "uLong crc2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "op",
                        "type": "uLong",
                        "definition": [
                            "uLong op"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "crc32_combine",
            "header": "extern uLong crc32_combine(uLong, uLong, off_t)",
            "params": [
                "uLong crc1",
                "uLong crc2",
                "off_t len2"
            ],
            "definition": "uLong crc32_combine(uLong crc1, uLong crc2, off_t len2)\n{\n  return crc32_combine64(crc1, crc2, (off_t) len2);\n}\n\n",
            "calle": [
                "crc32_combine64"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "crc1",
                        "type": "uLong",
                        "definition": [
                            "uLong crc1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc2",
                        "type": "uLong",
                        "definition": [
                            "uLong crc2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len2",
                        "type": "off_t",
                        "definition": [
                            "off_t len2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "crc32_combine_gen",
            "header": "extern uLong crc32_combine_gen(off_t)",
            "params": [
                "off_t len2"
            ],
            "definition": "uLong crc32_combine_gen(off_t len2)\n{\n  return crc32_combine_gen64((off_t) len2);\n}\n\n",
            "calle": [
                "crc32_combine_gen64"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "len2",
                        "type": "off_t",
                        "definition": [
                            "off_t len2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "get_crc_table",
            "header": "extern const z_crc_t *get_crc_table(void)",
            "params": [
                "void"
            ],
            "definition": "const z_crc_t *get_crc_table(void)\n{\n  return (const z_crc_t *) crc_table;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc_table",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "crc32_combine64",
            "header": "extern uLong crc32_combine64(uLong, uLong, off_t)",
            "params": [
                "uLong crc1",
                "uLong crc2",
                "off_t len2"
            ],
            "definition": "uLong crc32_combine64(uLong crc1, uLong crc2, off_t len2)\n{\n  return multmodp(x2nmodp(len2, 3), crc1) ^ (crc2 & 0xffffffff);\n}\n\n",
            "calle": [
                "multmodp",
                "x2nmodp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "crc1",
                        "type": "uLong",
                        "definition": [
                            "uLong crc1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc2",
                        "type": "uLong",
                        "definition": [
                            "uLong crc2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len2",
                        "type": "off_t",
                        "definition": [
                            "off_t len2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "crc32_combine_gen64",
            "header": "extern uLong crc32_combine_gen64(off_t)",
            "params": [
                "off_t len2"
            ],
            "definition": "uLong crc32_combine_gen64(off_t len2)\n{\n  return x2nmodp(len2, 3);\n}\n\n",
            "calle": [
                "x2nmodp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "len2",
                        "type": "off_t",
                        "definition": [
                            "off_t len2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "byte_swap",
            "header": "",
            "params": [
                "z_word_t word"
            ],
            "definition": "static z_word_t byte_swap(z_word_t word)\n{\n  return ((((((((word & 0xff00000000000000) >> 56) | ((word & 0xff000000000000) >> 40)) | ((word & 0xff0000000000) >> 24)) | ((word & 0xff00000000) >> 8)) | ((word & 0xff000000) << 8)) | ((word & 0xff0000) << 24)) | ((word & 0xff00) << 40)) | ((word & 0xff) << 56);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "word",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t word"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "multmodp",
            "header": "",
            "params": [
                "z_crc_t a",
                "z_crc_t b"
            ],
            "definition": "static z_crc_t multmodp(z_crc_t a, z_crc_t b)\n{\n  z_crc_t m;\n  z_crc_t p;\n  m = ((z_crc_t) 1) << 31;\n  p = 0;\n  for (;;)\n  {\n    if (a & m)\n    {\n      p ^= b;\n      if ((a & (m - 1)) == 0)\n      {\n        break;\n      }\n    }\n    m >>= 1;\n    b = (b & 1) ? ((b >> 1) ^ 0xedb88320) : (b >> 1);\n  }\n\n  return p;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "z_crc_t",
                        "definition": [
                            "z_crc_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "z_crc_t",
                        "definition": [
                            "z_crc_t b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m",
                        "type": "z_crc_t",
                        "definition": [
                            "z_crc_t m"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "z_crc_t",
                        "definition": [
                            "z_crc_t p"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "x2nmodp",
            "header": "",
            "params": [
                "off_t n",
                "unsigned k"
            ],
            "definition": "static z_crc_t x2nmodp(off_t n, unsigned k)\n{\n  z_crc_t p;\n  p = ((z_crc_t) 1) << 31;\n  while (n)\n  {\n    if (n & 1)\n    {\n      p = multmodp(x2n_table[k & 31], p);\n    }\n    n >>= 1;\n    k += 1;\n  }\n\n  return p;\n}\n\n",
            "calle": [
                "multmodp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n",
                        "type": "off_t",
                        "definition": [
                            "off_t n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "unsigned",
                        "definition": [
                            "unsigned k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "z_crc_t",
                        "definition": [
                            "z_crc_t p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x2n_table",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "crc_word",
            "header": "",
            "params": [
                "z_word_t data"
            ],
            "definition": "static z_crc_t crc_word(z_word_t data)\n{\n  int k;\n  for (k = 0; k < 8; k += 1)\n  {\n    data = (data >> 8) ^ crc_table[data & 0xff];\n  }\n\n  return (z_crc_t) data;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "int",
                        "definition": [
                            "int k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc_table",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "crc_word_big",
            "header": "",
            "params": [
                "z_word_t data"
            ],
            "definition": "static z_word_t crc_word_big(z_word_t data)\n{\n  int k;\n  for (k = 0; k < 8; k += 1)\n  {\n    data = (data << 8) ^ crc_big_table[(data >> ((8 - 1) << 3)) & 0xff];\n  }\n\n  return data;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "int",
                        "definition": [
                            "int k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc_big_table",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_crc32_z_1",
            "header": "",
            "params": [
                "unsigned long * const crc_ref",
                "z_size_t * const len_ref",
                "unsigned int * const buf_idx_ref",
                "const unsigned char * const buf"
            ],
            "definition": "void helper_crc32_z_1(unsigned long * const crc_ref, z_size_t * const len_ref, unsigned int * const buf_idx_ref, const unsigned char * const buf)\n{\n  unsigned long crc = *crc_ref;\n  z_size_t len = *len_ref;\n  unsigned int buf_idx = *buf_idx_ref;\n  len -= 8;\n  crc = (crc >> 8) ^ crc_table[(crc ^ buf[buf_idx]) & 0xff];\n  buf_idx += 1;\n  crc = (crc >> 8) ^ crc_table[(crc ^ buf[buf_idx]) & 0xff];\n  buf_idx += 1;\n  crc = (crc >> 8) ^ crc_table[(crc ^ buf[buf_idx]) & 0xff];\n  buf_idx += 1;\n  crc = (crc >> 8) ^ crc_table[(crc ^ buf[buf_idx]) & 0xff];\n  buf_idx += 1;\n  crc = (crc >> 8) ^ crc_table[(crc ^ buf[buf_idx]) & 0xff];\n  buf_idx += 1;\n  crc = (crc >> 8) ^ crc_table[(crc ^ buf[buf_idx]) & 0xff];\n  buf_idx += 1;\n  crc = (crc >> 8) ^ crc_table[(crc ^ buf[buf_idx]) & 0xff];\n  buf_idx += 1;\n  crc = (crc >> 8) ^ crc_table[(crc ^ buf[buf_idx]) & 0xff];\n  buf_idx += 1;\n  *crc_ref = crc;\n  *len_ref = len;\n  *buf_idx_ref = buf_idx;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "crc_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const crc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "z_size_t * const",
                        "definition": [
                            "z_size_t * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const buf_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long crc = *crc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "z_size_t",
                        "definition": [
                            "z_size_t len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int buf_idx = *buf_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc_table",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_crc32_z_2",
            "header": "",
            "params": [
                "unsigned long * const crc_ref",
                "z_size_t * const len_ref",
                "unsigned int * const buf_idx_ref",
                "const unsigned char * const buf"
            ],
            "definition": "void helper_crc32_z_2(unsigned long * const crc_ref, z_size_t * const len_ref, unsigned int * const buf_idx_ref, const unsigned char * const buf)\n{\n  unsigned long crc = *crc_ref;\n  z_size_t len = *len_ref;\n  unsigned int buf_idx = *buf_idx_ref;\n  z_size_t blks;\n  const z_word_t *words;\n  unsigned int words_idx = 0;\n  unsigned endian;\n  int k;\n  while (len && ((((z_size_t) buf) & (8 - 1)) != 0))\n  {\n    len -= 1;\n    crc = (crc >> 8) ^ crc_table[(crc ^ buf[buf_idx]) & 0xff];\n    buf_idx += 1;\n  }\n\n  blks = len / (5 * 8);\n  len -= (blks * 5) * 8;\n  words_idx = (const z_word_t *) buf;\n  endian = 1;\n  if (*((unsigned char *) (&endian)))\n  {\n    helper_helper_crc32_z_2_1(&crc, &words_idx, &k, blks, words);\n  }\n  else\n  {\n    helper_helper_crc32_z_2_2(&crc, &words_idx, &k, blks, words);\n  }\n  buf_idx = (const unsigned char *) words;\n  *crc_ref = crc;\n  *len_ref = len;\n  *buf_idx_ref = buf_idx;\n}\n\n",
            "calle": [
                "helper_helper_crc32_z_2_1",
                "helper_helper_crc32_z_2_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "crc_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const crc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "z_size_t * const",
                        "definition": [
                            "z_size_t * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const buf_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long crc = *crc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "z_size_t",
                        "definition": [
                            "z_size_t len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int buf_idx = *buf_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blks",
                        "type": "z_size_t",
                        "definition": [
                            "z_size_t blks"
                        ]
                    },
                    {
                        "path": null,
                        "name": "words",
                        "type": "const z_word_t *",
                        "definition": [
                            "const z_word_t *words"
                        ]
                    },
                    {
                        "path": null,
                        "name": "words_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int words_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "endian",
                        "type": "unsigned",
                        "definition": [
                            "unsigned endian"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "int",
                        "definition": [
                            "int k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc_table",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_crc32_z_2_1",
            "header": "",
            "params": [
                "unsigned long * const crc_ref",
                "unsigned int * const words_idx_ref",
                "int * const k_ref",
                "z_size_t blks",
                "const z_word_t * const words"
            ],
            "definition": "void helper_helper_crc32_z_2_1(unsigned long * const crc_ref, unsigned int * const words_idx_ref, int * const k_ref, z_size_t blks, const z_word_t * const words)\n{\n  unsigned long crc = *crc_ref;\n  unsigned int words_idx = *words_idx_ref;\n  int k = *k_ref;\n  z_crc_t crc0;\n  z_word_t word0;\n  z_crc_t crc1;\n  z_word_t word1;\n  z_crc_t crc2;\n  z_word_t word2;\n  z_crc_t crc3;\n  z_word_t word3;\n  z_crc_t crc4;\n  z_word_t word4;\n  crc0 = crc;\n  crc1 = 0;\n  crc2 = 0;\n  crc3 = 0;\n  crc4 = 0;\n  while (--blks)\n  {\n    helper_helper_helper_crc32_z_2_1_1(&words_idx, &k, &crc0, &word0, &crc1, &word1, &crc2, &word2, &crc3, &word3, &crc4, &word4, words);\n  }\n\n  crc = crc_word(crc0 ^ words[0 + words_idx]);\n  crc = crc_word((crc1 ^ words[1 + words_idx]) ^ crc);\n  crc = crc_word((crc2 ^ words[2 + words_idx]) ^ crc);\n  crc = crc_word((crc3 ^ words[3 + words_idx]) ^ crc);\n  crc = crc_word((crc4 ^ words[4 + words_idx]) ^ crc);\n  words_idx += 5;\n  *crc_ref = crc;\n  *words_idx_ref = words_idx;\n  *k_ref = k;\n}\n\n",
            "calle": [
                "crc_word",
                "helper_helper_helper_crc32_z_2_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "crc_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const crc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "words_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const words_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blks",
                        "type": "z_size_t",
                        "definition": [
                            "z_size_t blks"
                        ]
                    },
                    {
                        "path": null,
                        "name": "words",
                        "type": "const z_word_t * const",
                        "definition": [
                            "const z_word_t * const words"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long crc = *crc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "words_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int words_idx = *words_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "int",
                        "definition": [
                            "int k = *k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc0",
                        "type": "z_crc_t",
                        "definition": [
                            "z_crc_t crc0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "word0",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t word0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc1",
                        "type": "z_crc_t",
                        "definition": [
                            "z_crc_t crc1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "word1",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t word1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc2",
                        "type": "z_crc_t",
                        "definition": [
                            "z_crc_t crc2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "word2",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t word2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc3",
                        "type": "z_crc_t",
                        "definition": [
                            "z_crc_t crc3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "word3",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t word3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc4",
                        "type": "z_crc_t",
                        "definition": [
                            "z_crc_t crc4"
                        ]
                    },
                    {
                        "path": null,
                        "name": "word4",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t word4"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_crc32_z_2_2",
            "header": "",
            "params": [
                "unsigned long * const crc_ref",
                "unsigned int * const words_idx_ref",
                "int * const k_ref",
                "z_size_t blks",
                "const z_word_t * const words"
            ],
            "definition": "void helper_helper_crc32_z_2_2(unsigned long * const crc_ref, unsigned int * const words_idx_ref, int * const k_ref, z_size_t blks, const z_word_t * const words)\n{\n  unsigned long crc = *crc_ref;\n  unsigned int words_idx = *words_idx_ref;\n  int k = *k_ref;\n  z_word_t crc0;\n  z_word_t word0;\n  z_word_t comb;\n  z_word_t crc1;\n  z_word_t word1;\n  z_word_t crc2;\n  z_word_t word2;\n  z_word_t crc3;\n  z_word_t word3;\n  z_word_t crc4;\n  z_word_t word4;\n  crc0 = byte_swap(crc);\n  crc1 = 0;\n  crc2 = 0;\n  crc3 = 0;\n  crc4 = 0;\n  while (--blks)\n  {\n    helper_helper_helper_crc32_z_2_2_1(&words_idx, &k, &crc0, &word0, &crc1, &word1, &crc2, &word2, &crc3, &word3, &crc4, &word4, words);\n  }\n\n  comb = crc_word_big(crc0 ^ words[0 + words_idx]);\n  comb = crc_word_big((crc1 ^ words[1 + words_idx]) ^ comb);\n  comb = crc_word_big((crc2 ^ words[2 + words_idx]) ^ comb);\n  comb = crc_word_big((crc3 ^ words[3 + words_idx]) ^ comb);\n  comb = crc_word_big((crc4 ^ words[4 + words_idx]) ^ comb);\n  words_idx += 5;\n  crc = byte_swap(comb);\n  *crc_ref = crc;\n  *words_idx_ref = words_idx;\n  *k_ref = k;\n}\n\n",
            "calle": [
                "byte_swap",
                "crc_word_big",
                "helper_helper_helper_crc32_z_2_2_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "crc_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const crc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "words_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const words_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blks",
                        "type": "z_size_t",
                        "definition": [
                            "z_size_t blks"
                        ]
                    },
                    {
                        "path": null,
                        "name": "words",
                        "type": "const z_word_t * const",
                        "definition": [
                            "const z_word_t * const words"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long crc = *crc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "words_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int words_idx = *words_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "int",
                        "definition": [
                            "int k = *k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc0",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t crc0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "word0",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t word0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "comb",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t comb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc1",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t crc1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "word1",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t word1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc2",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t crc2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "word2",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t word2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc3",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t crc3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "word3",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t word3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc4",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t crc4"
                        ]
                    },
                    {
                        "path": null,
                        "name": "word4",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t word4"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_crc32_z_2_1_1",
            "header": "",
            "params": [
                "unsigned int * const words_idx_ref",
                "int * const k_ref",
                "z_crc_t * const crc0_ref",
                "z_word_t * const word0_ref",
                "z_crc_t * const crc1_ref",
                "z_word_t * const word1_ref",
                "z_crc_t * const crc2_ref",
                "z_word_t * const word2_ref",
                "z_crc_t * const crc3_ref",
                "z_word_t * const word3_ref",
                "z_crc_t * const crc4_ref",
                "z_word_t * const word4_ref",
                "const z_word_t * const words"
            ],
            "definition": "void helper_helper_helper_crc32_z_2_1_1(unsigned int * const words_idx_ref, int * const k_ref, z_crc_t * const crc0_ref, z_word_t * const word0_ref, z_crc_t * const crc1_ref, z_word_t * const word1_ref, z_crc_t * const crc2_ref, z_word_t * const word2_ref, z_crc_t * const crc3_ref, z_word_t * const word3_ref, z_crc_t * const crc4_ref, z_word_t * const word4_ref, const z_word_t * const words)\n{\n  unsigned int words_idx = *words_idx_ref;\n  int k = *k_ref;\n  z_crc_t crc0 = *crc0_ref;\n  z_word_t word0 = *word0_ref;\n  z_crc_t crc1 = *crc1_ref;\n  z_word_t word1 = *word1_ref;\n  z_crc_t crc2 = *crc2_ref;\n  z_word_t word2 = *word2_ref;\n  z_crc_t crc3 = *crc3_ref;\n  z_word_t word3 = *word3_ref;\n  z_crc_t crc4 = *crc4_ref;\n  z_word_t word4 = *word4_ref;\n  word0 = crc0 ^ words[0 + words_idx];\n  word1 = crc1 ^ words[1 + words_idx];\n  word2 = crc2 ^ words[2 + words_idx];\n  word3 = crc3 ^ words[3 + words_idx];\n  word4 = crc4 ^ words[4 + words_idx];\n  words_idx += 5;\n  crc0 = crc_braid_table[0][word0 & 0xff];\n  crc1 = crc_braid_table[0][word1 & 0xff];\n  crc2 = crc_braid_table[0][word2 & 0xff];\n  crc3 = crc_braid_table[0][word3 & 0xff];\n  crc4 = crc_braid_table[0][word4 & 0xff];\n  for (k = 1; k < 8; k += 1)\n  {\n    crc0 ^= crc_braid_table[k][(word0 >> (k << 3)) & 0xff];\n    crc1 ^= crc_braid_table[k][(word1 >> (k << 3)) & 0xff];\n    crc2 ^= crc_braid_table[k][(word2 >> (k << 3)) & 0xff];\n    crc3 ^= crc_braid_table[k][(word3 >> (k << 3)) & 0xff];\n    crc4 ^= crc_braid_table[k][(word4 >> (k << 3)) & 0xff];\n  }\n\n  *words_idx_ref = words_idx;\n  *k_ref = k;\n  *crc0_ref = crc0;\n  *word0_ref = word0;\n  *crc1_ref = crc1;\n  *word1_ref = word1;\n  *crc2_ref = crc2;\n  *word2_ref = word2;\n  *crc3_ref = crc3;\n  *word3_ref = word3;\n  *crc4_ref = crc4;\n  *word4_ref = word4;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "words_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const words_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc0_ref",
                        "type": "z_crc_t * const",
                        "definition": [
                            "z_crc_t * const crc0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "word0_ref",
                        "type": "z_word_t * const",
                        "definition": [
                            "z_word_t * const word0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc1_ref",
                        "type": "z_crc_t * const",
                        "definition": [
                            "z_crc_t * const crc1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "word1_ref",
                        "type": "z_word_t * const",
                        "definition": [
                            "z_word_t * const word1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc2_ref",
                        "type": "z_crc_t * const",
                        "definition": [
                            "z_crc_t * const crc2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "word2_ref",
                        "type": "z_word_t * const",
                        "definition": [
                            "z_word_t * const word2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc3_ref",
                        "type": "z_crc_t * const",
                        "definition": [
                            "z_crc_t * const crc3_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "word3_ref",
                        "type": "z_word_t * const",
                        "definition": [
                            "z_word_t * const word3_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc4_ref",
                        "type": "z_crc_t * const",
                        "definition": [
                            "z_crc_t * const crc4_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "word4_ref",
                        "type": "z_word_t * const",
                        "definition": [
                            "z_word_t * const word4_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "words",
                        "type": "const z_word_t * const",
                        "definition": [
                            "const z_word_t * const words"
                        ]
                    },
                    {
                        "path": null,
                        "name": "words_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int words_idx = *words_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "int",
                        "definition": [
                            "int k = *k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc0",
                        "type": "z_crc_t",
                        "definition": [
                            "z_crc_t crc0 = *crc0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "word0",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t word0 = *word0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc1",
                        "type": "z_crc_t",
                        "definition": [
                            "z_crc_t crc1 = *crc1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "word1",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t word1 = *word1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc2",
                        "type": "z_crc_t",
                        "definition": [
                            "z_crc_t crc2 = *crc2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "word2",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t word2 = *word2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc3",
                        "type": "z_crc_t",
                        "definition": [
                            "z_crc_t crc3 = *crc3_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "word3",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t word3 = *word3_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc4",
                        "type": "z_crc_t",
                        "definition": [
                            "z_crc_t crc4 = *crc4_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "word4",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t word4 = *word4_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc_braid_table",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_crc32_z_2_2_1",
            "header": "",
            "params": [
                "unsigned int * const words_idx_ref",
                "int * const k_ref",
                "z_word_t * const crc0_ref",
                "z_word_t * const word0_ref",
                "z_word_t * const crc1_ref",
                "z_word_t * const word1_ref",
                "z_word_t * const crc2_ref",
                "z_word_t * const word2_ref",
                "z_word_t * const crc3_ref",
                "z_word_t * const word3_ref",
                "z_word_t * const crc4_ref",
                "z_word_t * const word4_ref",
                "const z_word_t * const words"
            ],
            "definition": "void helper_helper_helper_crc32_z_2_2_1(unsigned int * const words_idx_ref, int * const k_ref, z_word_t * const crc0_ref, z_word_t * const word0_ref, z_word_t * const crc1_ref, z_word_t * const word1_ref, z_word_t * const crc2_ref, z_word_t * const word2_ref, z_word_t * const crc3_ref, z_word_t * const word3_ref, z_word_t * const crc4_ref, z_word_t * const word4_ref, const z_word_t * const words)\n{\n  unsigned int words_idx = *words_idx_ref;\n  int k = *k_ref;\n  z_word_t crc0 = *crc0_ref;\n  z_word_t word0 = *word0_ref;\n  z_word_t crc1 = *crc1_ref;\n  z_word_t word1 = *word1_ref;\n  z_word_t crc2 = *crc2_ref;\n  z_word_t word2 = *word2_ref;\n  z_word_t crc3 = *crc3_ref;\n  z_word_t word3 = *word3_ref;\n  z_word_t crc4 = *crc4_ref;\n  z_word_t word4 = *word4_ref;\n  word0 = crc0 ^ words[0 + words_idx];\n  word1 = crc1 ^ words[1 + words_idx];\n  word2 = crc2 ^ words[2 + words_idx];\n  word3 = crc3 ^ words[3 + words_idx];\n  word4 = crc4 ^ words[4 + words_idx];\n  words_idx += 5;\n  crc0 = crc_braid_big_table[0][word0 & 0xff];\n  crc1 = crc_braid_big_table[0][word1 & 0xff];\n  crc2 = crc_braid_big_table[0][word2 & 0xff];\n  crc3 = crc_braid_big_table[0][word3 & 0xff];\n  crc4 = crc_braid_big_table[0][word4 & 0xff];\n  for (k = 1; k < 8; k += 1)\n  {\n    crc0 ^= crc_braid_big_table[k][(word0 >> (k << 3)) & 0xff];\n    crc1 ^= crc_braid_big_table[k][(word1 >> (k << 3)) & 0xff];\n    crc2 ^= crc_braid_big_table[k][(word2 >> (k << 3)) & 0xff];\n    crc3 ^= crc_braid_big_table[k][(word3 >> (k << 3)) & 0xff];\n    crc4 ^= crc_braid_big_table[k][(word4 >> (k << 3)) & 0xff];\n  }\n\n  *words_idx_ref = words_idx;\n  *k_ref = k;\n  *crc0_ref = crc0;\n  *word0_ref = word0;\n  *crc1_ref = crc1;\n  *word1_ref = word1;\n  *crc2_ref = crc2;\n  *word2_ref = word2;\n  *crc3_ref = crc3;\n  *word3_ref = word3;\n  *crc4_ref = crc4;\n  *word4_ref = word4;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "words_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const words_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc0_ref",
                        "type": "z_word_t * const",
                        "definition": [
                            "z_word_t * const crc0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "word0_ref",
                        "type": "z_word_t * const",
                        "definition": [
                            "z_word_t * const word0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc1_ref",
                        "type": "z_word_t * const",
                        "definition": [
                            "z_word_t * const crc1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "word1_ref",
                        "type": "z_word_t * const",
                        "definition": [
                            "z_word_t * const word1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc2_ref",
                        "type": "z_word_t * const",
                        "definition": [
                            "z_word_t * const crc2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "word2_ref",
                        "type": "z_word_t * const",
                        "definition": [
                            "z_word_t * const word2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc3_ref",
                        "type": "z_word_t * const",
                        "definition": [
                            "z_word_t * const crc3_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "word3_ref",
                        "type": "z_word_t * const",
                        "definition": [
                            "z_word_t * const word3_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc4_ref",
                        "type": "z_word_t * const",
                        "definition": [
                            "z_word_t * const crc4_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "word4_ref",
                        "type": "z_word_t * const",
                        "definition": [
                            "z_word_t * const word4_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "words",
                        "type": "const z_word_t * const",
                        "definition": [
                            "const z_word_t * const words"
                        ]
                    },
                    {
                        "path": null,
                        "name": "words_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int words_idx = *words_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "int",
                        "definition": [
                            "int k = *k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc0",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t crc0 = *crc0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "word0",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t word0 = *word0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc1",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t crc1 = *crc1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "word1",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t word1 = *word1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc2",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t crc2 = *crc2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "word2",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t word2 = *word2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc3",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t crc3 = *crc3_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "word3",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t word3 = *word3_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc4",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t crc4 = *crc4_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "word4",
                        "type": "z_word_t",
                        "definition": [
                            "z_word_t word4 = *word4_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc_braid_big_table",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "deflate",
            "header": "extern int deflate(z_streamp strm, int flush)",
            "params": [
                "z_streamp strm",
                "int flush"
            ],
            "definition": "int deflate(z_streamp strm, int flush)\n{\n  int old_flush;\n  deflate_state *s;\n  unsigned int s_idx = 0;\n  if ((deflateStateCheck(strm) || (flush > 5)) || (flush < 0))\n  {\n    return -2;\n  }\n  s_idx = strm->state;\n  if (((strm->next_out == 0) || ((strm->avail_in != 0) && (strm->next_in == 0))) || ((s->status == 666) && (flush != 4)))\n  {\n    return strm->msg = z_errmsg[2 - (-2)], -2;\n  }\n  if (strm->avail_out == 0)\n  {\n    return strm->msg = z_errmsg[2 - (-5)], -5;\n  }\n  old_flush = s->last_flush;\n  s->last_flush = flush;\n  if (s->pending != 0)\n  {\n    flush_pending(strm);\n    if (strm->avail_out == 0)\n    {\n      s->last_flush = -1;\n      return 0;\n    }\n  }\n  else\n    if (((strm->avail_in == 0) && (((flush * 2) - ((flush > 4) ? (9) : (0))) <= ((old_flush * 2) - ((old_flush > 4) ? (9) : (0))))) && (flush != 4))\n  {\n    return strm->msg = z_errmsg[2 - (-5)], -5;\n  }\n  if ((s->status == 666) && (strm->avail_in != 0))\n  {\n    return strm->msg = z_errmsg[2 - (-5)], -5;\n  }\n  if ((s->status == 42) && (s->wrap == 0))\n  {\n    s->status = 113;\n  }\n  if (s->status == 42)\n  {\n    helper_deflate_1(&strm, s);\n  }\n  if (((strm->avail_in != 0) || (s->lookahead != 0)) || ((flush != 0) && (s->status != 666)))\n  {\n    helper_deflate_2(strm, flush, s);\n  }\n  if (flush != 4)\n  {\n    return 0;\n  }\n  if (s->wrap <= 0)\n  {\n    return 1;\n  }\n  {\n    putShortMSB(s, (uInt) (strm->adler >> 16));\n    putShortMSB(s, (uInt) (strm->adler & 0xffff));\n  }\n  flush_pending(strm);\n  if (s->wrap > 0)\n  {\n    s->wrap = -s->wrap;\n  }\n  return (s->pending != 0) ? (0) : (1);\n}\n\n",
            "calle": [
                "deflateStateCheck",
                "flush_pending",
                "helper_deflate_1",
                "helper_deflate_2",
                "putShortMSB"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flush",
                        "type": "int",
                        "definition": [
                            "int flush"
                        ]
                    },
                    {
                        "path": null,
                        "name": "old_flush",
                        "type": "int",
                        "definition": [
                            "int old_flush"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int s_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z_errmsg",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "deflateEnd",
            "header": "extern int deflateEnd(z_streamp strm)",
            "params": [
                "z_streamp strm"
            ],
            "definition": "int deflateEnd(z_streamp strm)\n{\n  int status;\n  if (deflateStateCheck(strm))\n  {\n    return -2;\n  }\n  status = strm->state->status;\n  {\n    if (strm->state->pending_buf)\n    {\n      (*strm->zfree)(strm->opaque, (voidpf) strm->state->pending_buf);\n    }\n  }\n  ;\n  {\n    if (strm->state->head)\n    {\n      (*strm->zfree)(strm->opaque, (voidpf) strm->state->head);\n    }\n  }\n  ;\n  {\n    if (strm->state->prev)\n    {\n      (*strm->zfree)(strm->opaque, (voidpf) strm->state->prev);\n    }\n  }\n  ;\n  {\n    if (strm->state->window)\n    {\n      (*strm->zfree)(strm->opaque, (voidpf) strm->state->window);\n    }\n  }\n  ;\n  (*strm->zfree)(strm->opaque, (voidpf) strm->state);\n  strm->state = 0;\n  return (status == 113) ? (-3) : (0);\n}\n\n",
            "calle": [
                "*strm->zfree",
                "deflateStateCheck"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "status",
                        "type": "int",
                        "definition": [
                            "int status"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "deflateSetDictionary",
            "header": "extern int deflateSetDictionary(z_streamp strm, const Bytef *dictionary, uInt dictLength)",
            "params": [
                "z_streamp strm",
                "const Bytef *dictionary",
                "uInt dictLength"
            ],
            "definition": "int deflateSetDictionary(z_streamp strm, const Bytef *dictionary, uInt dictLength)\n{\n  unsigned int dictionary_idx = 0;\n  deflate_state *s;\n  unsigned int s_idx = 0;\n  uInt str;\n  uInt n;\n  int wrap;\n  unsigned avail;\n  const unsigned char *next;\n  unsigned int next_idx = 0;\n  if (deflateStateCheck(strm) || ((&dictionary[dictionary_idx]) == 0))\n  {\n    return -2;\n  }\n  s_idx = strm->state;\n  wrap = s->wrap;\n  if (((wrap == 2) || ((wrap == 1) && (s->status != 42))) || s->lookahead)\n  {\n    return -2;\n  }\n  if (wrap == 1)\n  {\n    strm->adler = adler32(strm->adler, dictionary, dictLength);\n  }\n  s->wrap = 0;\n  if (dictLength >= s->w_size)\n  {\n    if (wrap == 0)\n    {\n      do\n      {\n        s->head[s->hash_size - 1] = 0;\n        memset((Bytef *) s->head, 0, ((unsigned) (s->hash_size - 1)) * (sizeof(*s->head)));\n      }\n      while (0);\n      s->strstart = 0;\n      s->block_start = 0L;\n      s->insert = 0;\n    }\n    dictionary_idx += dictLength - s->w_size;\n    dictLength = s->w_size;\n  }\n  avail = strm->avail_in;\n  next_idx = strm->next_in;\n  strm->avail_in = dictLength;\n  strm->next_in = (const Bytef *) dictionary;\n  fill_window(s);\n  while (s->lookahead >= 3)\n  {\n    str = s->strstart;\n    n = s->lookahead - (3 - 1);\n    do\n    {\n      s->ins_h = ((s->ins_h << s->hash_shift) ^ s->window[(str + 3) - 1]) & s->hash_mask;\n      s->prev[str & s->w_mask] = s->head[s->ins_h];\n      s->head[s->ins_h] = (Pos) str;\n      str += 1;\n    }\n    while (--n);\n    s->strstart = str;\n    s->lookahead = 3 - 1;\n    fill_window(s);\n  }\n\n  s->strstart += s->lookahead;\n  s->block_start = (long) s->strstart;\n  s->insert = s->lookahead;\n  s->lookahead = 0;\n  s->match_length = (s->prev_length = 3 - 1);\n  s->match_available = 0;\n  strm->next_in = &next[next_idx];\n  strm->avail_in = avail;\n  s->wrap = wrap;\n  return 0;\n}\n\n",
            "calle": [
                "adler32",
                "deflateStateCheck",
                "fill_window",
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dictionary",
                        "type": "const Bytef *",
                        "definition": [
                            "const Bytef *dictionary"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dictLength",
                        "type": "uInt",
                        "definition": [
                            "uInt dictLength"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dictionary_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dictionary_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int s_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "uInt",
                        "definition": [
                            "uInt str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "uInt",
                        "definition": [
                            "uInt n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wrap",
                        "type": "int",
                        "definition": [
                            "int wrap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avail",
                        "type": "unsigned",
                        "definition": [
                            "unsigned avail"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "deflateGetDictionary",
            "header": "extern int deflateGetDictionary(z_streamp strm, Bytef *dictionary, uInt *dictLength)",
            "params": [
                "z_streamp strm",
                "Bytef *dictionary",
                "uInt *dictLength"
            ],
            "definition": "int deflateGetDictionary(z_streamp strm, Bytef *dictionary, uInt *dictLength)\n{\n  deflate_state *s;\n  unsigned int s_idx = 0;\n  uInt len;\n  if (deflateStateCheck(strm))\n  {\n    return -2;\n  }\n  s_idx = strm->state;\n  len = s->strstart + s->lookahead;\n  if (len > s->w_size)\n  {\n    len = s->w_size;\n  }\n  if ((dictionary != 0) && len)\n  {\n    memcpy(dictionary, ((s->window + s->strstart) + s->lookahead) - len, len);\n  }\n  if (dictLength != 0)\n  {\n    *dictLength = len;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "deflateStateCheck",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dictionary",
                        "type": "Bytef *",
                        "definition": [
                            "Bytef *dictionary"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dictLength",
                        "type": "uInt *",
                        "definition": [
                            "uInt *dictLength"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int s_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "uInt",
                        "definition": [
                            "uInt len"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "deflateCopy",
            "header": "extern int deflateCopy(z_streamp dest, z_streamp source)",
            "params": [
                "z_streamp dest",
                "z_streamp source"
            ],
            "definition": "int deflateCopy(z_streamp dest, z_streamp source)\n{\n  deflate_state *ds;\n  unsigned int ds_idx = 0;\n  deflate_state *ss;\n  unsigned int ss_idx = 0;\n  if (deflateStateCheck(source) || (dest == 0))\n  {\n    return -2;\n  }\n  ss_idx = source->state;\n  memcpy((voidpf) dest, (voidpf) source, sizeof(z_stream));\n  ds_idx = (deflate_state *) (*dest->zalloc)(dest->opaque, 1, sizeof(deflate_state));\n  if ((&ds[ds_idx]) == 0)\n  {\n    return -4;\n  }\n  dest->state = (struct internal_state *) ds;\n  memcpy((voidpf) ds, (voidpf) ss, sizeof(deflate_state));\n  ds->strm = dest;\n  ds->window = (Bytef *) (*dest->zalloc)(dest->opaque, ds->w_size, 2 * (sizeof(Byte)));\n  ds->prev = (Posf *) (*dest->zalloc)(dest->opaque, ds->w_size, sizeof(Pos));\n  ds->head = (Posf *) (*dest->zalloc)(dest->opaque, ds->hash_size, sizeof(Pos));\n  ds->pending_buf = (uchf *) (*dest->zalloc)(dest->opaque, ds->lit_bufsize, 4);\n  if ((((ds->window == 0) || (ds->prev == 0)) || (ds->head == 0)) || (ds->pending_buf == 0))\n  {\n    deflateEnd(dest);\n    return -4;\n  }\n  memcpy(ds->window, ss->window, (ds->w_size * 2) * (sizeof(Byte)));\n  memcpy((voidpf) ds->prev, (voidpf) ss->prev, ds->w_size * (sizeof(Pos)));\n  memcpy((voidpf) ds->head, (voidpf) ss->head, ds->hash_size * (sizeof(Pos)));\n  memcpy(ds->pending_buf, ss->pending_buf, (uInt) ds->pending_buf_size);\n  ds->pending_out = ds->pending_buf + (ss->pending_out - ss->pending_buf);\n  ds->sym_buf = ds->pending_buf + ds->lit_bufsize;\n  ds->l_desc.dyn_tree = ds->dyn_ltree;\n  ds->d_desc.dyn_tree = ds->dyn_dtree;\n  ds->bl_desc.dyn_tree = ds->bl_tree;\n  return 0;\n}\n\n",
            "calle": [
                "*dest->zalloc",
                "deflateEnd",
                "deflateStateCheck",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dest",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp dest"
                        ]
                    },
                    {
                        "path": null,
                        "name": "source",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp source"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ds",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *ds"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ds_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ds_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ss",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *ss"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ss_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ss_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "deflateReset",
            "header": "extern int deflateReset(z_streamp strm)",
            "params": [
                "z_streamp strm"
            ],
            "definition": "int deflateReset(z_streamp strm)\n{\n  int ret;\n  ret = deflateResetKeep(strm);\n  if (ret == 0)\n  {\n    lm_init(strm->state);\n  }\n  return ret;\n}\n\n",
            "calle": [
                "deflateResetKeep",
                "lm_init"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "deflateParams",
            "header": "extern int deflateParams(z_streamp strm, int level, int strategy)",
            "params": [
                "z_streamp strm",
                "int level",
                "int strategy"
            ],
            "definition": "int deflateParams(z_streamp strm, int level, int strategy)\n{\n  deflate_state *s;\n  unsigned int s_idx = 0;\n  compress_func func;\n  if (deflateStateCheck(strm))\n  {\n    return -2;\n  }\n  s_idx = strm->state;\n  if (level == (-1))\n  {\n    level = 6;\n  }\n  if ((((level < 0) || (level > 9)) || (strategy < 0)) || (strategy > 4))\n  {\n    return -2;\n  }\n  func = configuration_table[s->level].func;\n  if (((strategy != s->strategy) || (func != configuration_table[level].func)) && (s->last_flush != (-2)))\n  {\n    int err = deflate(strm, 5);\n    if (err == (-2))\n    {\n      return err;\n    }\n    if (strm->avail_in || ((s->strstart - s->block_start) + s->lookahead))\n    {\n      return -5;\n    }\n  }\n  if (s->level != level)\n  {\n    helper_deflateParams_1(&level, s);\n  }\n  s->strategy = strategy;\n  return 0;\n}\n\n",
            "calle": [
                "deflate",
                "deflateStateCheck",
                "helper_deflateParams_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "int",
                        "definition": [
                            "int level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strategy",
                        "type": "int",
                        "definition": [
                            "int strategy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int s_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "func",
                        "type": "compress_func",
                        "definition": [
                            "compress_func func"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err = deflate(strm, 5)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "configuration_table",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "deflateTune",
            "header": "extern int deflateTune(z_streamp strm, int good_length, int max_lazy, int nice_length, int max_chain)",
            "params": [
                "z_streamp strm",
                "int good_length",
                "int max_lazy",
                "int nice_length",
                "int max_chain"
            ],
            "definition": "int deflateTune(z_streamp strm, int good_length, int max_lazy, int nice_length, int max_chain)\n{\n  deflate_state *s;\n  unsigned int s_idx = 0;\n  if (deflateStateCheck(strm))\n  {\n    return -2;\n  }\n  s_idx = strm->state;\n  s->good_match = (uInt) good_length;\n  s->max_lazy_match = (uInt) max_lazy;\n  s->nice_match = nice_length;\n  s->max_chain_length = (uInt) max_chain;\n  return 0;\n}\n\n",
            "calle": [
                "deflateStateCheck"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "good_length",
                        "type": "int",
                        "definition": [
                            "int good_length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_lazy",
                        "type": "int",
                        "definition": [
                            "int max_lazy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nice_length",
                        "type": "int",
                        "definition": [
                            "int nice_length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_chain",
                        "type": "int",
                        "definition": [
                            "int max_chain"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int s_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "deflateBound",
            "header": "extern uLong deflateBound(z_streamp strm, uLong sourceLen)",
            "params": [
                "z_streamp strm",
                "uLong sourceLen"
            ],
            "definition": "uLong deflateBound(z_streamp strm, uLong sourceLen)\n{\n  deflate_state *s;\n  unsigned int s_idx = 0;\n  uLong fixedlen;\n  uLong storelen;\n  uLong wraplen;\n  fixedlen = (((sourceLen + (sourceLen >> 3)) + (sourceLen >> 8)) + (sourceLen >> 9)) + 4;\n  storelen = (((sourceLen + (sourceLen >> 5)) + (sourceLen >> 7)) + (sourceLen >> 11)) + 7;\n  if (deflateStateCheck(strm))\n  {\n    return ((fixedlen > storelen) ? (fixedlen) : (storelen)) + 6;\n  }\n  s_idx = strm->state;\n  switch (s->wrap)\n  {\n    case 0:\n    {\n      wraplen = 0;\n      break;\n    }\n\n    case 1:\n    {\n      wraplen = 6 + ((s->strstart) ? (4) : (0));\n      break;\n    }\n\n    default:\n    {\n      wraplen = 6;\n    }\n\n  }\n\n  if ((s->w_bits != 15) || (s->hash_bits != (8 + 7)))\n  {\n    return (((s->w_bits <= s->hash_bits) && s->level) ? (fixedlen) : (storelen)) + wraplen;\n  }\n  return (((((sourceLen + (sourceLen >> 12)) + (sourceLen >> 14)) + (sourceLen >> 25)) + 13) - 6) + wraplen;\n}\n\n",
            "calle": [
                "deflateStateCheck"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sourceLen",
                        "type": "uLong",
                        "definition": [
                            "uLong sourceLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int s_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fixedlen",
                        "type": "uLong",
                        "definition": [
                            "uLong fixedlen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "storelen",
                        "type": "uLong",
                        "definition": [
                            "uLong storelen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wraplen",
                        "type": "uLong",
                        "definition": [
                            "uLong wraplen"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "deflatePending",
            "header": "extern int deflatePending(z_streamp strm, unsigned *pending, int *bits)",
            "params": [
                "z_streamp strm",
                "unsigned *pending",
                "int *bits"
            ],
            "definition": "int deflatePending(z_streamp strm, unsigned *pending, int *bits)\n{\n  if (deflateStateCheck(strm))\n  {\n    return -2;\n  }\n  if (pending != 0)\n  {\n    *pending = strm->state->pending;\n  }\n  if (bits != 0)\n  {\n    *bits = strm->state->bi_valid;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "deflateStateCheck"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pending",
                        "type": "unsigned *",
                        "definition": [
                            "unsigned *pending"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "int *",
                        "definition": [
                            "int *bits"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "deflatePrime",
            "header": "extern int deflatePrime(z_streamp strm, int bits, int value)",
            "params": [
                "z_streamp strm",
                "int bits",
                "int value"
            ],
            "definition": "int deflatePrime(z_streamp strm, int bits, int value)\n{\n  deflate_state *s;\n  unsigned int s_idx = 0;\n  int put;\n  if (deflateStateCheck(strm))\n  {\n    return -2;\n  }\n  s_idx = strm->state;\n  if (((bits < 0) || (bits > 16)) || (s->sym_buf < (s->pending_out + ((16 + 7) >> 3))))\n  {\n    return -5;\n  }\n  do\n  {\n    put = 16 - s->bi_valid;\n    if (put > bits)\n    {\n      put = bits;\n    }\n    s->bi_buf |= (ush) ((value & ((1 << put) - 1)) << s->bi_valid);\n    s->bi_valid += put;\n    _tr_flush_bits(s);\n    value >>= put;\n    bits -= put;\n  }\n  while (bits);\n  return 0;\n}\n\n",
            "calle": [
                "_tr_flush_bits",
                "deflateStateCheck"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "int",
                        "definition": [
                            "int bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "int",
                        "definition": [
                            "int value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int s_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put",
                        "type": "int",
                        "definition": [
                            "int put"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "deflateSetHeader",
            "header": "extern int deflateSetHeader(z_streamp strm, gz_headerp head)",
            "params": [
                "z_streamp strm",
                "gz_headerp head"
            ],
            "definition": "int deflateSetHeader(z_streamp strm, gz_headerp head)\n{\n  if (deflateStateCheck(strm) || (strm->state->wrap != 2))\n  {\n    return -2;\n  }\n  strm->state->gzhead = head;\n  return 0;\n}\n\n",
            "calle": [
                "deflateStateCheck"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "head",
                        "type": "gz_headerp",
                        "definition": [
                            "gz_headerp head"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "deflateInit_",
            "header": "extern int deflateInit_(z_streamp strm, int level, const char *version, int stream_size)",
            "params": [
                "z_streamp strm",
                "int level",
                "const char *version",
                "int stream_size"
            ],
            "definition": "int deflateInit_(z_streamp strm, int level, const char *version, int stream_size)\n{\n  return deflateInit2_(strm, level, 8, 15, 8, 0, version, stream_size);\n}\n\n",
            "calle": [
                "deflateInit2_"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "int",
                        "definition": [
                            "int level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "version",
                        "type": "const char *",
                        "definition": [
                            "const char *version"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream_size",
                        "type": "int",
                        "definition": [
                            "int stream_size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "deflateInit2_",
            "header": "extern int deflateInit2_(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)",
            "params": [
                "z_streamp strm",
                "int level",
                "int method",
                "int windowBits",
                "int memLevel",
                "int strategy",
                "const char *version",
                "int stream_size"
            ],
            "definition": "int deflateInit2_(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)\n{\n  deflate_state *s;\n  unsigned int s_idx = 0;\n  int wrap = 1;\n  static const char my_version[] = \"1.3-optipng\";\n  if (((version == 0) || (version[0] != my_version[0])) || (stream_size != (sizeof(z_stream))))\n  {\n    return -6;\n  }\n  if (strm == 0)\n  {\n    return -2;\n  }\n  strm->msg = 0;\n  if (strm->zalloc == ((alloc_func) 0))\n  {\n    strm->zalloc = zcalloc;\n    strm->opaque = (voidpf) 0;\n  }\n  if (strm->zfree == ((free_func) 0))\n  {\n    strm->zfree = zcfree;\n  }\n  if (level == (-1))\n  {\n    level = 6;\n  }\n  if (windowBits < 0)\n  {\n    wrap = 0;\n    if (windowBits < (-15))\n    {\n      return -2;\n    }\n    windowBits = -windowBits;\n  }\n  if ((((((((((memLevel < 1) || (memLevel > 9)) || (method != 8)) || (windowBits < 8)) || (windowBits > 15)) || (level < 0)) || (level > 9)) || (strategy < 0)) || (strategy > 4)) || ((windowBits == 8) && (wrap != 1)))\n  {\n    return -2;\n  }\n  if (windowBits == 8)\n  {\n    windowBits = 9;\n  }\n  s_idx = (deflate_state *) (*strm->zalloc)(strm->opaque, 1, sizeof(deflate_state));\n  if ((&s[s_idx]) == 0)\n  {\n    return -4;\n  }\n  strm->state = (struct internal_state *) s;\n  s->strm = strm;\n  s->status = 42;\n  s->wrap = wrap;\n  s->gzhead = 0;\n  s->w_bits = (uInt) windowBits;\n  s->w_size = 1 << s->w_bits;\n  s->w_mask = s->w_size - 1;\n  s->hash_bits = ((uInt) memLevel) + 7;\n  s->hash_size = 1 << s->hash_bits;\n  s->hash_mask = s->hash_size - 1;\n  s->hash_shift = ((s->hash_bits + 3) - 1) / 3;\n  s->window = (Bytef *) (*strm->zalloc)(strm->opaque, s->w_size, 2 * (sizeof(Byte)));\n  s->prev = (Posf *) (*strm->zalloc)(strm->opaque, s->w_size, sizeof(Pos));\n  s->head = (Posf *) (*strm->zalloc)(strm->opaque, s->hash_size, sizeof(Pos));\n  s->high_water = 0;\n  s->lit_bufsize = 1 << (memLevel + 6);\n  s->pending_buf = (uchf *) (*strm->zalloc)(strm->opaque, s->lit_bufsize, 4);\n  s->pending_buf_size = ((ulg) s->lit_bufsize) * 4;\n  if ((((s->window == 0) || (s->prev == 0)) || (s->head == 0)) || (s->pending_buf == 0))\n  {\n    s->status = 666;\n    strm->msg = z_errmsg[2 - (-4)];\n    deflateEnd(strm);\n    return -4;\n  }\n  s->sym_buf = s->pending_buf + s->lit_bufsize;\n  s->sym_end = (s->lit_bufsize - 1) * 3;\n  s->level = level;\n  s->strategy = strategy;\n  s->method = (Byte) method;\n  return deflateReset(strm);\n}\n\n",
            "calle": [
                "*strm->zalloc",
                "deflateEnd",
                "deflateReset",
                "zcalloc",
                "zcfree"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "int",
                        "definition": [
                            "int level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "method",
                        "type": "int",
                        "definition": [
                            "int method"
                        ]
                    },
                    {
                        "path": null,
                        "name": "windowBits",
                        "type": "int",
                        "definition": [
                            "int windowBits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "memLevel",
                        "type": "int",
                        "definition": [
                            "int memLevel"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strategy",
                        "type": "int",
                        "definition": [
                            "int strategy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "version",
                        "type": "const char *",
                        "definition": [
                            "const char *version"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream_size",
                        "type": "int",
                        "definition": [
                            "int stream_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int s_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wrap",
                        "type": "int",
                        "definition": [
                            "int wrap = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "my_version",
                        "type": "const char []",
                        "definition": [
                            "static const char my_version[] = \"1.3-optipng\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "z_errmsg",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "deflateResetKeep",
            "header": "extern int deflateResetKeep(z_streamp)",
            "params": [
                "z_streamp strm"
            ],
            "definition": "int deflateResetKeep(z_streamp strm)\n{\n  deflate_state *s;\n  unsigned int s_idx = 0;\n  if (deflateStateCheck(strm))\n  {\n    return -2;\n  }\n  strm->total_in = (strm->total_out = 0);\n  strm->msg = 0;\n  strm->data_type = 2;\n  s_idx = (deflate_state *) strm->state;\n  s->pending = 0;\n  s->pending_out = s->pending_buf;\n  if (s->wrap < 0)\n  {\n    s->wrap = -s->wrap;\n  }\n  s->status = 42;\n  strm->adler = adler32(0L, 0, 0);\n  s->last_flush = -2;\n  _tr_init(s);\n  return 0;\n}\n\n",
            "calle": [
                "_tr_init",
                "adler32",
                "deflateStateCheck"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int s_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "deflate_stored",
            "header": "static block_state deflate_stored(deflate_state *s, int flush)",
            "params": [
                "deflate_state *s",
                "int flush"
            ],
            "definition": "static block_state deflate_stored(deflate_state *s, int flush)\n{\n  unsigned min_block = ((s->pending_buf_size - 5) > s->w_size) ? (s->w_size) : (s->pending_buf_size - 5);\n  unsigned len;\n  unsigned left;\n  unsigned have;\n  unsigned last = 0;\n  unsigned used = s->strm->avail_in;\n  do\n  {\n    helper_deflate_stored_2(&len, &left, &have, &last, s, flush, min_block);\n  }\n  while (last == 0);\n  used -= s->strm->avail_in;\n  if (used)\n  {\n    helper_deflate_stored_1(s, used);\n  }\n  if (s->high_water < s->strstart)\n  {\n    s->high_water = s->strstart;\n  }\n  if (last)\n  {\n    return finish_done;\n  }\n  if ((((flush != 0) && (flush != 4)) && (s->strm->avail_in == 0)) && (((long) s->strstart) == s->block_start))\n  {\n    return block_done;\n  }\n  have = s->window_size - s->strstart;\n  if ((s->strm->avail_in > have) && (s->block_start >= ((long) s->w_size)))\n  {\n    s->block_start -= s->w_size;\n    s->strstart -= s->w_size;\n    memcpy(s->window, s->window + s->w_size, s->strstart);\n    if (s->matches < 2)\n    {\n      s->matches += 1;\n    }\n    have += s->w_size;\n    if (s->insert > s->strstart)\n    {\n      s->insert = s->strstart;\n    }\n  }\n  if (have > s->strm->avail_in)\n  {\n    have = s->strm->avail_in;\n  }\n  if (have)\n  {\n    read_buf(s->strm, s->window + s->strstart, have);\n    s->strstart += have;\n    s->insert += (have > (s->w_size - s->insert)) ? (s->w_size - s->insert) : (have);\n  }\n  if (s->high_water < s->strstart)\n  {\n    s->high_water = s->strstart;\n  }\n  have = (s->bi_valid + 42) >> 3;\n  have = ((s->pending_buf_size - have) > 65535) ? (65535) : (s->pending_buf_size - have);\n  min_block = (have > s->w_size) ? (s->w_size) : (have);\n  left = s->strstart - s->block_start;\n  if ((left >= min_block) || ((((left || (flush == 4)) && (flush != 0)) && (s->strm->avail_in == 0)) && (left <= have)))\n  {\n    len = (left > have) ? (have) : (left);\n    last = (((flush == 4) && (s->strm->avail_in == 0)) && (len == left)) ? (1) : (0);\n    _tr_stored_block(s, ((charf *) s->window) + s->block_start, len, last);\n    s->block_start += len;\n    flush_pending(s->strm);\n  }\n  return (last) ? (finish_started) : (need_more);\n}\n\n",
            "calle": [
                "_tr_stored_block",
                "flush_pending",
                "helper_deflate_stored_1",
                "helper_deflate_stored_2",
                "memcpy",
                "read_buf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flush",
                        "type": "int",
                        "definition": [
                            "int flush"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min_block",
                        "type": "unsigned",
                        "definition": [
                            "unsigned min_block = ((s->pending_buf_size - 5) > s->w_size) ? (s->w_size) : (s->pending_buf_size - 5)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned",
                        "definition": [
                            "unsigned len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left",
                        "type": "unsigned",
                        "definition": [
                            "unsigned left"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last",
                        "type": "unsigned",
                        "definition": [
                            "unsigned last = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "used",
                        "type": "unsigned",
                        "definition": [
                            "unsigned used = s->strm->avail_in"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "deflate_fast",
            "header": "static block_state deflate_fast(deflate_state *s, int flush)",
            "params": [
                "deflate_state *s",
                "int flush"
            ],
            "definition": "static block_state deflate_fast(deflate_state *s, int flush)\n{\n  IPos hash_head;\n  int bflush;\n  for (;;)\n  {\n    helper_deflate_fast_2(&hash_head, &bflush, s, flush);\n  }\n\n  s->insert = (s->strstart < (3 - 1)) ? (s->strstart) : (3 - 1);\n  if (flush == 4)\n  {\n    helper_deflate_fast_1(s);\n  }\n  if (s->sym_next)\n  {\n    {\n      _tr_flush_block(s, (s->block_start >= 0L) ? ((charf *) (&s->window[(unsigned) s->block_start])) : ((charf *) 0), (ulg) (((long) s->strstart) - s->block_start), 0);\n      s->block_start = s->strstart;\n      flush_pending(s->strm);\n      ;\n    }\n    ;\n    if (s->strm->avail_out == 0)\n    {\n      return (0) ? (finish_started) : (need_more);\n    }\n  }\n  ;\n  return block_done;\n}\n\n",
            "calle": [
                "_tr_flush_block",
                "flush_pending",
                "helper_deflate_fast_1",
                "helper_deflate_fast_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flush",
                        "type": "int",
                        "definition": [
                            "int flush"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hash_head",
                        "type": "IPos",
                        "definition": [
                            "IPos hash_head"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bflush",
                        "type": "int",
                        "definition": [
                            "int bflush"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "deflate_slow",
            "header": "static block_state deflate_slow(deflate_state *s, int flush)",
            "params": [
                "deflate_state *s",
                "int flush"
            ],
            "definition": "static block_state deflate_slow(deflate_state *s, int flush)\n{\n  IPos hash_head;\n  int bflush;\n  for (;;)\n  {\n    helper_deflate_slow_2(&hash_head, &bflush, s, flush);\n  }\n\n  ;\n  if (s->match_available)\n  {\n    ;\n    {\n      uch cc = s->window[s->strstart - 1];\n      s->sym_buf[s->sym_next++] = 0;\n      s->sym_buf[s->sym_next++] = 0;\n      s->sym_buf[s->sym_next++] = cc;\n      s->dyn_ltree[cc].fc.freq += 1;\n      bflush = s->sym_next == s->sym_end;\n    }\n    ;\n    s->match_available = 0;\n  }\n  s->insert = (s->strstart < (3 - 1)) ? (s->strstart) : (3 - 1);\n  if (flush == 4)\n  {\n    helper_deflate_slow_1(s);\n  }\n  if (s->sym_next)\n  {\n    {\n      _tr_flush_block(s, (s->block_start >= 0L) ? ((charf *) (&s->window[(unsigned) s->block_start])) : ((charf *) 0), (ulg) (((long) s->strstart) - s->block_start), 0);\n      s->block_start = s->strstart;\n      flush_pending(s->strm);\n      ;\n    }\n    ;\n    if (s->strm->avail_out == 0)\n    {\n      return (0) ? (finish_started) : (need_more);\n    }\n  }\n  ;\n  return block_done;\n}\n\n",
            "calle": [
                "_tr_flush_block",
                "flush_pending",
                "helper_deflate_slow_1",
                "helper_deflate_slow_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flush",
                        "type": "int",
                        "definition": [
                            "int flush"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hash_head",
                        "type": "IPos",
                        "definition": [
                            "IPos hash_head"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bflush",
                        "type": "int",
                        "definition": [
                            "int bflush"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cc",
                        "type": "uch",
                        "definition": [
                            "uch cc = s->window[s->strstart - 1]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "deflate_rle",
            "header": "static block_state deflate_rle(deflate_state *s, int flush)",
            "params": [
                "deflate_state *s",
                "int flush"
            ],
            "definition": "static block_state deflate_rle(deflate_state *s, int flush)\n{\n  int bflush;\n  uInt prev;\n  Bytef *scan;\n  unsigned int scan_idx = 0;\n  Bytef *strend;\n  unsigned int strend_idx = 0;\n  for (;;)\n  {\n    helper_deflate_rle_2(&bflush, &prev, &scan_idx, &strend_idx, s, flush, scan, strend);\n  }\n\n  s->insert = 0;\n  if (flush == 4)\n  {\n    helper_deflate_rle_1(s);\n  }\n  if (s->sym_next)\n  {\n    {\n      _tr_flush_block(s, (s->block_start >= 0L) ? ((charf *) (&s->window[(unsigned) s->block_start])) : ((charf *) 0), (ulg) (((long) s->strstart) - s->block_start), 0);\n      s->block_start = s->strstart;\n      flush_pending(s->strm);\n      ;\n    }\n    ;\n    if (s->strm->avail_out == 0)\n    {\n      return (0) ? (finish_started) : (need_more);\n    }\n  }\n  ;\n  return block_done;\n}\n\n",
            "calle": [
                "_tr_flush_block",
                "flush_pending",
                "helper_deflate_rle_1",
                "helper_deflate_rle_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flush",
                        "type": "int",
                        "definition": [
                            "int flush"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bflush",
                        "type": "int",
                        "definition": [
                            "int bflush"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev",
                        "type": "uInt",
                        "definition": [
                            "uInt prev"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scan",
                        "type": "Bytef *",
                        "definition": [
                            "Bytef *scan"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scan_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int scan_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strend",
                        "type": "Bytef *",
                        "definition": [
                            "Bytef *strend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strend_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int strend_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "deflate_huff",
            "header": "static block_state deflate_huff(deflate_state *s, int flush)",
            "params": [
                "deflate_state *s",
                "int flush"
            ],
            "definition": "static block_state deflate_huff(deflate_state *s, int flush)\n{\n  int bflush;\n  for (;;)\n  {\n    helper_deflate_huff_2(&bflush, s, flush);\n  }\n\n  s->insert = 0;\n  if (flush == 4)\n  {\n    helper_deflate_huff_1(s);\n  }\n  if (s->sym_next)\n  {\n    {\n      _tr_flush_block(s, (s->block_start >= 0L) ? ((charf *) (&s->window[(unsigned) s->block_start])) : ((charf *) 0), (ulg) (((long) s->strstart) - s->block_start), 0);\n      s->block_start = s->strstart;\n      flush_pending(s->strm);\n      ;\n    }\n    ;\n    if (s->strm->avail_out == 0)\n    {\n      return (0) ? (finish_started) : (need_more);\n    }\n  }\n  ;\n  return block_done;\n}\n\n",
            "calle": [
                "_tr_flush_block",
                "flush_pending",
                "helper_deflate_huff_1",
                "helper_deflate_huff_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flush",
                        "type": "int",
                        "definition": [
                            "int flush"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bflush",
                        "type": "int",
                        "definition": [
                            "int bflush"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "slide_hash",
            "header": "",
            "params": [
                "deflate_state *s"
            ],
            "definition": "static void slide_hash(deflate_state *s)\n{\n  unsigned n;\n  unsigned m;\n  Posf *p;\n  unsigned int p_idx = 0;\n  uInt wsize = s->w_size;\n  n = s->hash_size;\n  p_idx = &s->head[n];\n  do\n  {\n    p_idx -= 1;\n    m = p[p_idx];\n    p[p_idx] = (Pos) ((m >= wsize) ? (m - wsize) : (0));\n  }\n  while (--n);\n  n = wsize;\n  p_idx = &s->prev[n];\n  do\n  {\n    p_idx -= 1;\n    m = p[p_idx];\n    p[p_idx] = (Pos) ((m >= wsize) ? (m - wsize) : (0));\n  }\n  while (--n);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "unsigned",
                        "definition": [
                            "unsigned n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m",
                        "type": "unsigned",
                        "definition": [
                            "unsigned m"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "Posf *",
                        "definition": [
                            "Posf *p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsize",
                        "type": "uInt",
                        "definition": [
                            "uInt wsize = s->w_size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "read_buf",
            "header": "",
            "params": [
                "z_streamp strm",
                "Bytef *buf",
                "unsigned size"
            ],
            "definition": "static unsigned read_buf(z_streamp strm, Bytef *buf, unsigned size)\n{\n  unsigned len = strm->avail_in;\n  if (len > size)\n  {\n    len = size;\n  }\n  if (len == 0)\n  {\n    return 0;\n  }\n  strm->avail_in -= len;\n  memcpy(buf, strm->next_in, len);\n  if (strm->state->wrap == 1)\n  {\n    strm->adler = adler32(strm->adler, buf, len);\n  }\n  strm->next_in += len;\n  strm->total_in += len;\n  return len;\n}\n\n",
            "calle": [
                "adler32",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "Bytef *",
                        "definition": [
                            "Bytef *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "unsigned",
                        "definition": [
                            "unsigned size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned",
                        "definition": [
                            "unsigned len = strm->avail_in"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fill_window",
            "header": "",
            "params": [
                "deflate_state *s"
            ],
            "definition": "static void fill_window(deflate_state *s)\n{\n  unsigned n;\n  unsigned more;\n  uInt wsize = s->w_size;\n  ;\n  do\n  {\n    helper_fill_window_2(&n, &more, s, wsize);\n  }\n  while ((s->lookahead < ((258 + 3) + 1)) && (s->strm->avail_in != 0));\n  if (s->high_water < s->window_size)\n  {\n    helper_fill_window_1(s);\n  }\n  ;\n}\n\n",
            "calle": [
                "helper_fill_window_1",
                "helper_fill_window_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "unsigned",
                        "definition": [
                            "unsigned n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "more",
                        "type": "unsigned",
                        "definition": [
                            "unsigned more"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsize",
                        "type": "uInt",
                        "definition": [
                            "uInt wsize = s->w_size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "deflateStateCheck",
            "header": "",
            "params": [
                "z_streamp strm"
            ],
            "definition": "static int deflateStateCheck(z_streamp strm)\n{\n  deflate_state *s;\n  unsigned int s_idx = 0;\n  if (((strm == 0) || (strm->zalloc == ((alloc_func) 0))) || (strm->zfree == ((free_func) 0)))\n  {\n    return 1;\n  }\n  s_idx = strm->state;\n  if ((((&s[s_idx]) == 0) || (s->strm != strm)) || (((((((s->status != 42) && (s->status != 69)) && (s->status != 73)) && (s->status != 91)) && (s->status != 103)) && (s->status != 113)) && (s->status != 666)))\n  {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int s_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "lm_init",
            "header": "",
            "params": [
                "deflate_state *s"
            ],
            "definition": "static void lm_init(deflate_state *s)\n{\n  s->window_size = ((ulg) 2L) * s->w_size;\n  do\n  {\n    s->head[s->hash_size - 1] = 0;\n    memset((Bytef *) s->head, 0, ((unsigned) (s->hash_size - 1)) * (sizeof(*s->head)));\n  }\n  while (0);\n  s->max_lazy_match = configuration_table[s->level].max_lazy;\n  s->good_match = configuration_table[s->level].good_length;\n  s->nice_match = configuration_table[s->level].nice_length;\n  s->max_chain_length = configuration_table[s->level].max_chain;\n  s->strstart = 0;\n  s->block_start = 0L;\n  s->lookahead = 0;\n  s->insert = 0;\n  s->match_length = (s->prev_length = 3 - 1);\n  s->match_available = 0;\n  s->ins_h = 0;\n}\n\n",
            "calle": [
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "configuration_table",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "putShortMSB",
            "header": "",
            "params": [
                "deflate_state *s",
                "uInt b"
            ],
            "definition": "static void putShortMSB(deflate_state *s, uInt b)\n{\n  {\n    s->pending_buf[s->pending++] = (Bytef) ((Byte) (b >> 8));\n  }\n  ;\n  {\n    s->pending_buf[s->pending++] = (Bytef) ((Byte) (b & 0xff));\n  }\n  ;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "uInt",
                        "definition": [
                            "uInt b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "flush_pending",
            "header": "",
            "params": [
                "z_streamp strm"
            ],
            "definition": "static void flush_pending(z_streamp strm)\n{\n  unsigned len;\n  deflate_state *s = strm->state;\n  _tr_flush_bits(s);\n  len = s->pending;\n  if (len > strm->avail_out)\n  {\n    len = strm->avail_out;\n  }\n  if (len == 0)\n  {\n    return;\n  }\n  memcpy(strm->next_out, s->pending_out, len);\n  strm->next_out += len;\n  s->pending_out += len;\n  strm->total_out += len;\n  strm->avail_out -= len;\n  s->pending -= len;\n  if (s->pending == 0)\n  {\n    s->pending_out = s->pending_buf;\n  }\n}\n\n",
            "calle": [
                "_tr_flush_bits",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned",
                        "definition": [
                            "unsigned len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s = strm->state"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "longest_match",
            "header": "",
            "params": [
                "deflate_state *s",
                "IPos cur_match"
            ],
            "definition": "static uInt longest_match(deflate_state *s, IPos cur_match)\n{\n  unsigned chain_length = s->max_chain_length;\n  register Bytef *scan = s->window + s->strstart;\n  unsigned int scan_idx = 0;\n  register Bytef *match;\n  unsigned int match_idx = 0;\n  register int len;\n  int best_len = (int) s->prev_length;\n  int nice_match = s->nice_match;\n  IPos limit = (s->strstart > ((IPos) (s->w_size - ((258 + 3) + 1)))) ? (s->strstart - ((IPos) (s->w_size - ((258 + 3) + 1)))) : (0);\n  Posf *prev = s->prev;\n  uInt wmask = s->w_mask;\n  register Bytef *strend = (s->window + s->strstart) + 258;\n  register Byte scan_end1 = scan[(best_len - 1) + scan_idx];\n  register Byte scan_end = scan[best_len + scan_idx];\n  ;\n  if (s->prev_length >= s->good_match)\n  {\n    chain_length >>= 2;\n  }\n  if (((uInt) nice_match) > s->lookahead)\n  {\n    nice_match = (int) s->lookahead;\n  }\n  ;\n  do\n  {\n    helper_longest_match_1(&scan_idx, &match_idx, &len, &best_len, &scan_end1, &scan_end, s, cur_match, scan, match, nice_match, strend);\n  }\n  while (((cur_match = prev[cur_match & wmask]) > limit) && ((--chain_length) != 0));\n  if (((uInt) best_len) <= s->lookahead)\n  {\n    return (uInt) best_len;\n  }\n  return s->lookahead;\n}\n\n",
            "calle": [
                "helper_longest_match_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cur_match",
                        "type": "IPos",
                        "definition": [
                            "IPos cur_match"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chain_length",
                        "type": "unsigned",
                        "definition": [
                            "unsigned chain_length = s->max_chain_length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scan",
                        "type": "Bytef *",
                        "definition": [
                            "register Bytef *scan = s->window + s->strstart"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scan_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int scan_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "match",
                        "type": "Bytef *",
                        "definition": [
                            "register Bytef *match"
                        ]
                    },
                    {
                        "path": null,
                        "name": "match_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int match_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "register int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "best_len",
                        "type": "int",
                        "definition": [
                            "int best_len = (int) s->prev_length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nice_match",
                        "type": "int",
                        "definition": [
                            "int nice_match = s->nice_match"
                        ]
                    },
                    {
                        "path": null,
                        "name": "limit",
                        "type": "IPos",
                        "definition": [
                            "IPos limit = (s->strstart > ((IPos) (s->w_size - ((258 + 3) + 1)))) ? (s->strstart - ((IPos) (s->w_size - ((258 + 3) + 1)))) : (0)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev",
                        "type": "Posf *",
                        "definition": [
                            "Posf *prev = s->prev"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wmask",
                        "type": "uInt",
                        "definition": [
                            "uInt wmask = s->w_mask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strend",
                        "type": "Bytef *",
                        "definition": [
                            "register Bytef *strend = (s->window + s->strstart) + 258"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scan_end1",
                        "type": "Byte",
                        "definition": [
                            "register Byte scan_end1 = scan[(best_len - 1) + scan_idx]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scan_end",
                        "type": "Byte",
                        "definition": [
                            "register Byte scan_end = scan[best_len + scan_idx]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_fill_window_1",
            "header": "",
            "params": [
                "deflate_state * const s"
            ],
            "definition": "void helper_fill_window_1(deflate_state * const s)\n{\n  ulg curr = s->strstart + ((ulg) s->lookahead);\n  ulg init;\n  if (s->high_water < curr)\n  {\n    init = s->window_size - curr;\n    if (init > 258)\n    {\n      init = 258;\n    }\n    memset(s->window + curr, 0, (unsigned) init);\n    s->high_water = curr + init;\n  }\n  else\n    if (s->high_water < (((ulg) curr) + 258))\n  {\n    init = (((ulg) curr) + 258) - s->high_water;\n    if (init > (s->window_size - s->high_water))\n    {\n      init = s->window_size - s->high_water;\n    }\n    memset(s->window + s->high_water, 0, (unsigned) init);\n    s->high_water += init;\n  }\n}\n\n",
            "calle": [
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curr",
                        "type": "ulg",
                        "definition": [
                            "ulg curr = s->strstart + ((ulg) s->lookahead)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "init",
                        "type": "ulg",
                        "definition": [
                            "ulg init"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_fill_window_2",
            "header": "",
            "params": [
                "unsigned * const n_ref",
                "unsigned * const more_ref",
                "deflate_state * const s",
                "uInt wsize"
            ],
            "definition": "void helper_fill_window_2(unsigned * const n_ref, unsigned * const more_ref, deflate_state * const s, uInt wsize)\n{\n  unsigned n = *n_ref;\n  unsigned more = *more_ref;\n  more = (unsigned) ((s->window_size - ((ulg) s->lookahead)) - ((ulg) s->strstart));\n  if ((sizeof(int)) <= 2)\n  {\n    if (((more == 0) && (s->strstart == 0)) && (s->lookahead == 0))\n    {\n      more = wsize;\n    }\n    else\n      if (more == ((unsigned) (-1)))\n    {\n      more -= 1;\n    }\n  }\n  if (s->strstart >= (wsize + (s->w_size - ((258 + 3) + 1))))\n  {\n    memcpy(s->window, s->window + wsize, ((unsigned) wsize) - more);\n    s->match_start -= wsize;\n    s->strstart -= wsize;\n    s->block_start -= (long) wsize;\n    if (s->insert > s->strstart)\n    {\n      s->insert = s->strstart;\n    }\n    slide_hash(s);\n    more += wsize;\n  }\n  if (s->strm->avail_in == 0)\n  {\n    break;\n  }\n  ;\n  n = read_buf(s->strm, (s->window + s->strstart) + s->lookahead, more);\n  s->lookahead += n;\n  if ((s->lookahead + s->insert) >= 3)\n  {\n    helper_helper_fill_window_2_1(s);\n  }\n  *n_ref = n;\n  *more_ref = more;\n}\n\n",
            "calle": [
                "helper_helper_fill_window_2_1",
                "memcpy",
                "read_buf",
                "slide_hash"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "more_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const more_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsize",
                        "type": "uInt",
                        "definition": [
                            "uInt wsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "unsigned",
                        "definition": [
                            "unsigned n = *n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "more",
                        "type": "unsigned",
                        "definition": [
                            "unsigned more = *more_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_deflateParams_1",
            "header": "",
            "params": [
                "int * const level_ref",
                "deflate_state * const s"
            ],
            "definition": "void helper_deflateParams_1(int * const level_ref, deflate_state * const s)\n{\n  int level = *level_ref;\n  if ((s->level == 0) && (s->matches != 0))\n  {\n    if (s->matches == 1)\n    {\n      slide_hash(s);\n    }\n    else\n      do\n    {\n      s->head[s->hash_size - 1] = 0;\n      memset((Bytef *) s->head, 0, ((unsigned) (s->hash_size - 1)) * (sizeof(*s->head)));\n    }\n    while (0);\n    s->matches = 0;\n  }\n  s->level = level;\n  s->max_lazy_match = configuration_table[level].max_lazy;\n  s->good_match = configuration_table[level].good_length;\n  s->nice_match = configuration_table[level].nice_length;\n  s->max_chain_length = configuration_table[level].max_chain;\n  *level_ref = level;\n}\n\n",
            "calle": [
                "memset",
                "slide_hash"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "level_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const level_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "int",
                        "definition": [
                            "int level = *level_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "configuration_table",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_deflate_1",
            "header": "",
            "params": [
                "z_streamp * const strm_ref",
                "deflate_state * const s"
            ],
            "definition": "int helper_deflate_1(z_streamp * const strm_ref, deflate_state * const s)\n{\n  z_streamp strm = *strm_ref;\n  uInt header = (8 + ((s->w_bits - 8) << 4)) << 8;\n  uInt level_flags;\n  if ((s->strategy >= 2) || (s->level < 2))\n  {\n    level_flags = 0;\n  }\n  else\n    if (s->level < 6)\n  {\n    level_flags = 1;\n  }\n  else\n    if (s->level == 6)\n  {\n    level_flags = 2;\n  }\n  else\n    level_flags = 3;\n  header |= level_flags << 6;\n  if (s->strstart != 0)\n  {\n    header |= 0x20;\n  }\n  header += 31 - (header % 31);\n  putShortMSB(s, header);\n  if (s->strstart != 0)\n  {\n    putShortMSB(s, (uInt) (strm->adler >> 16));\n    putShortMSB(s, (uInt) (strm->adler & 0xffff));\n  }\n  strm->adler = adler32(0L, 0, 0);\n  s->status = 113;\n  flush_pending(strm);\n  if (s->pending != 0)\n  {\n    s->last_flush = -1;\n    return 0;\n  }\n  *strm_ref = strm;\n}\n\n",
            "calle": [
                "adler32",
                "flush_pending",
                "putShortMSB"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm_ref",
                        "type": "z_streamp * const",
                        "definition": [
                            "z_streamp * const strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = *strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "header",
                        "type": "uInt",
                        "definition": [
                            "uInt header = (8 + ((s->w_bits - 8) << 4)) << 8"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level_flags",
                        "type": "uInt",
                        "definition": [
                            "uInt level_flags"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_deflate_2",
            "header": "",
            "params": [
                "z_streamp strm",
                "int flush",
                "deflate_state * const s"
            ],
            "definition": "int helper_deflate_2(z_streamp strm, int flush, deflate_state * const s)\n{\n  block_state bstate;\n  bstate = (s->level == 0) ? (deflate_stored(s, flush)) : ((s->strategy == 2) ? (deflate_huff(s, flush)) : ((s->strategy == 3) ? (deflate_rle(s, flush)) : ((*configuration_table[s->level].func)(s, flush))));\n  if ((bstate == finish_started) || (bstate == finish_done))\n  {\n    s->status = 666;\n  }\n  if ((bstate == need_more) || (bstate == finish_started))\n  {\n    if (strm->avail_out == 0)\n    {\n      s->last_flush = -1;\n    }\n    return 0;\n  }\n  if (bstate == block_done)\n  {\n    if (flush == 1)\n    {\n      _tr_align(s);\n    }\n    else\n      if (flush != 5)\n    {\n      _tr_stored_block(s, (char *) 0, 0L, 0);\n      if (flush == 3)\n      {\n        do\n        {\n          s->head[s->hash_size - 1] = 0;\n          memset((Bytef *) s->head, 0, ((unsigned) (s->hash_size - 1)) * (sizeof(*s->head)));\n        }\n        while (0);\n        if (s->lookahead == 0)\n        {\n          s->strstart = 0;\n          s->block_start = 0L;\n          s->insert = 0;\n        }\n      }\n    }\n    flush_pending(strm);\n    if (strm->avail_out == 0)\n    {\n      s->last_flush = -1;\n      return 0;\n    }\n  }\n}\n\n",
            "calle": [
                "*configuration_table[s->level].func",
                "_tr_align",
                "_tr_stored_block",
                "deflate_huff",
                "deflate_rle",
                "deflate_stored",
                "flush_pending",
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flush",
                        "type": "int",
                        "definition": [
                            "int flush"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bstate",
                        "type": "block_state",
                        "definition": [
                            "block_state bstate"
                        ]
                    },
                    {
                        "path": null,
                        "name": "configuration_table",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_longest_match_1",
            "header": "",
            "params": [
                "unsigned int * const scan_idx_ref",
                "unsigned int * const match_idx_ref",
                "register int * const len_ref",
                "int * const best_len_ref",
                "register Byte * const scan_end1_ref",
                "register Byte * const scan_end_ref",
                "deflate_state * const s",
                "IPos cur_match",
                "register Bytef * const scan",
                "register Bytef * const match",
                "int nice_match",
                "register Bytef * const strend"
            ],
            "definition": "void helper_longest_match_1(unsigned int * const scan_idx_ref, unsigned int * const match_idx_ref, register int * const len_ref, int * const best_len_ref, register Byte * const scan_end1_ref, register Byte * const scan_end_ref, deflate_state * const s, IPos cur_match, register Bytef * const scan, register Bytef * const match, int nice_match, register Bytef * const strend)\n{\n  unsigned int scan_idx = *scan_idx_ref;\n  unsigned int match_idx = *match_idx_ref;\n  register int len = *len_ref;\n  int best_len = *best_len_ref;\n  register Byte scan_end1 = *scan_end1_ref;\n  register Byte scan_end = *scan_end_ref;\n  ;\n  match_idx = s->window + cur_match;\n  if ((((match[best_len + match_idx] != scan_end) || (match[(best_len - 1) + match_idx] != scan_end1)) || (match[match_idx] != scan[scan_idx])) || ((*(++(&match[match_idx]))) != scan[1 + scan_idx]))\n  {\n    continue;\n  }\n  scan_idx += 2, (&match[match_idx])++;\n  match_idx += 1;\n  ;\n  do\n  {\n  }\n  while ((((((((((*(++(&scan[scan_idx]))) == (*(++(&match[match_idx])))) && ((*(++(&scan[scan_idx]))) == (*(++(&match[match_idx]))))) && ((*(++(&scan[scan_idx]))) == (*(++(&match[match_idx]))))) && ((*(++(&scan[scan_idx]))) == (*(++(&match[match_idx]))))) && ((*(++(&scan[scan_idx]))) == (*(++(&match[match_idx]))))) && ((*(++(&scan[scan_idx]))) == (*(++(&match[match_idx]))))) && ((*(++(&scan[scan_idx]))) == (*(++(&match[match_idx]))))) && ((*(++(&scan[scan_idx]))) == (*(++(&match[match_idx]))))) && ((&scan[scan_idx]) < strend));\n  ;\n  len = 258 - ((int) (strend - (&scan[scan_idx])));\n  scan_idx = strend - 258;\n  if (len > best_len)\n  {\n    s->match_start = cur_match;\n    best_len = len;\n    if (len >= nice_match)\n    {\n      break;\n    }\n    scan_end1 = scan[(best_len - 1) + scan_idx];\n    scan_end = scan[best_len + scan_idx];\n  }\n  *scan_idx_ref = scan_idx;\n  *match_idx_ref = match_idx;\n  *len_ref = len;\n  *best_len_ref = best_len;\n  *scan_end1_ref = scan_end1;\n  *scan_end_ref = scan_end;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "scan_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const scan_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "match_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const match_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "int * const",
                        "definition": [
                            "register int * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "best_len_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const best_len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scan_end1_ref",
                        "type": "Byte * const",
                        "definition": [
                            "register Byte * const scan_end1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scan_end_ref",
                        "type": "Byte * const",
                        "definition": [
                            "register Byte * const scan_end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cur_match",
                        "type": "IPos",
                        "definition": [
                            "IPos cur_match"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scan",
                        "type": "Bytef * const",
                        "definition": [
                            "register Bytef * const scan"
                        ]
                    },
                    {
                        "path": null,
                        "name": "match",
                        "type": "Bytef * const",
                        "definition": [
                            "register Bytef * const match"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nice_match",
                        "type": "int",
                        "definition": [
                            "int nice_match"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strend",
                        "type": "Bytef * const",
                        "definition": [
                            "register Bytef * const strend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scan_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int scan_idx = *scan_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "match_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int match_idx = *match_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "register int len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "best_len",
                        "type": "int",
                        "definition": [
                            "int best_len = *best_len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scan_end1",
                        "type": "Byte",
                        "definition": [
                            "register Byte scan_end1 = *scan_end1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scan_end",
                        "type": "Byte",
                        "definition": [
                            "register Byte scan_end = *scan_end_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_deflate_stored_1",
            "header": "",
            "params": [
                "deflate_state * const s",
                "unsigned used"
            ],
            "definition": "void helper_deflate_stored_1(deflate_state * const s, unsigned used)\n{\n  if (used >= s->w_size)\n  {\n    s->matches = 2;\n    memcpy(s->window, s->strm->next_in - s->w_size, s->w_size);\n    s->strstart = s->w_size;\n    s->insert = s->strstart;\n  }\n  else\n  {\n    if ((s->window_size - s->strstart) <= used)\n    {\n      s->strstart -= s->w_size;\n      memcpy(s->window, s->window + s->w_size, s->strstart);\n      if (s->matches < 2)\n      {\n        s->matches += 1;\n      }\n      if (s->insert > s->strstart)\n      {\n        s->insert = s->strstart;\n      }\n    }\n    memcpy(s->window + s->strstart, s->strm->next_in - used, used);\n    s->strstart += used;\n    s->insert += (used > (s->w_size - s->insert)) ? (s->w_size - s->insert) : (used);\n  }\n  s->block_start = s->strstart;\n}\n\n",
            "calle": [
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "used",
                        "type": "unsigned",
                        "definition": [
                            "unsigned used"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_deflate_stored_2",
            "header": "",
            "params": [
                "unsigned * const len_ref",
                "unsigned * const left_ref",
                "unsigned * const have_ref",
                "unsigned * const last_ref",
                "deflate_state * const s",
                "int flush",
                "unsigned min_block"
            ],
            "definition": "void helper_deflate_stored_2(unsigned * const len_ref, unsigned * const left_ref, unsigned * const have_ref, unsigned * const last_ref, deflate_state * const s, int flush, unsigned min_block)\n{\n  unsigned len = *len_ref;\n  unsigned left = *left_ref;\n  unsigned have = *have_ref;\n  unsigned last = *last_ref;\n  len = 65535;\n  have = (s->bi_valid + 42) >> 3;\n  if (s->strm->avail_out < have)\n  {\n    break;\n  }\n  have = s->strm->avail_out - have;\n  left = s->strstart - s->block_start;\n  if (len > (((ulg) left) + s->strm->avail_in))\n  {\n    len = left + s->strm->avail_in;\n  }\n  if (len > have)\n  {\n    len = have;\n  }\n  if ((len < min_block) && ((((len == 0) && (flush != 4)) || (flush == 0)) || (len != (left + s->strm->avail_in))))\n  {\n    break;\n  }\n  last = ((flush == 4) && (len == (left + s->strm->avail_in))) ? (1) : (0);\n  _tr_stored_block(s, (char *) 0, 0L, last);\n  s->pending_buf[s->pending - 4] = len;\n  s->pending_buf[s->pending - 3] = len >> 8;\n  s->pending_buf[s->pending - 2] = ~len;\n  s->pending_buf[s->pending - 1] = (~len) >> 8;\n  flush_pending(s->strm);\n  if (left)\n  {\n    if (left > len)\n    {\n      left = len;\n    }\n    memcpy(s->strm->next_out, s->window + s->block_start, left);\n    s->strm->next_out += left;\n    s->strm->avail_out -= left;\n    s->strm->total_out += left;\n    s->block_start += left;\n    len -= left;\n  }\n  if (len)\n  {\n    read_buf(s->strm, s->strm->next_out, len);\n    s->strm->next_out += len;\n    s->strm->avail_out -= len;\n    s->strm->total_out += len;\n  }\n  *len_ref = len;\n  *left_ref = left;\n  *have_ref = have;\n  *last_ref = last;\n}\n\n",
            "calle": [
                "_tr_stored_block",
                "flush_pending",
                "memcpy",
                "read_buf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const left_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const last_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flush",
                        "type": "int",
                        "definition": [
                            "int flush"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min_block",
                        "type": "unsigned",
                        "definition": [
                            "unsigned min_block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned",
                        "definition": [
                            "unsigned len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left",
                        "type": "unsigned",
                        "definition": [
                            "unsigned left = *left_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last",
                        "type": "unsigned",
                        "definition": [
                            "unsigned last = *last_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_deflate_fast_1",
            "header": "",
            "params": [
                "deflate_state * const s"
            ],
            "definition": "block_state helper_deflate_fast_1(deflate_state * const s)\n{\n  {\n    {\n      _tr_flush_block(s, (s->block_start >= 0L) ? ((charf *) (&s->window[(unsigned) s->block_start])) : ((charf *) 0), (ulg) (((long) s->strstart) - s->block_start), 1);\n      s->block_start = s->strstart;\n      flush_pending(s->strm);\n      ;\n    }\n    ;\n    if (s->strm->avail_out == 0)\n    {\n      return (1) ? (finish_started) : (need_more);\n    }\n  }\n  ;\n  return finish_done;\n}\n\n",
            "calle": [
                "_tr_flush_block",
                "flush_pending"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_deflate_fast_2",
            "header": "",
            "params": [
                "IPos * const hash_head_ref",
                "int * const bflush_ref",
                "deflate_state * const s",
                "int flush"
            ],
            "definition": "block_state helper_deflate_fast_2(IPos * const hash_head_ref, int * const bflush_ref, deflate_state * const s, int flush)\n{\n  IPos hash_head = *hash_head_ref;\n  int bflush = *bflush_ref;\n  if (s->lookahead < ((258 + 3) + 1))\n  {\n    fill_window(s);\n    if ((s->lookahead < ((258 + 3) + 1)) && (flush == 0))\n    {\n      return need_more;\n    }\n    if (s->lookahead == 0)\n    {\n      break;\n    }\n  }\n  hash_head = 0;\n  if (s->lookahead >= 3)\n  {\n    s->ins_h = ((s->ins_h << s->hash_shift) ^ s->window[s->strstart + (3 - 1)]) & s->hash_mask, hash_head = (s->prev[s->strstart & s->w_mask] = s->head[s->ins_h]), s->head[s->ins_h] = (Pos) s->strstart;\n  }\n  if ((hash_head != 0) && ((s->strstart - hash_head) <= (s->w_size - ((258 + 3) + 1))))\n  {\n    s->match_length = longest_match(s, hash_head);\n  }\n  if (s->match_length >= 3)\n  {\n    helper_helper_deflate_fast_2_2(&hash_head, &bflush, s);\n  }\n  else\n  {\n    helper_helper_deflate_fast_2_1(&bflush, s);\n  }\n  if (bflush)\n  {\n    {\n      _tr_flush_block(s, (s->block_start >= 0L) ? ((charf *) (&s->window[(unsigned) s->block_start])) : ((charf *) 0), (ulg) (((long) s->strstart) - s->block_start), 0);\n      s->block_start = s->strstart;\n      flush_pending(s->strm);\n      ;\n    }\n    ;\n    if (s->strm->avail_out == 0)\n    {\n      return (0) ? (finish_started) : (need_more);\n    }\n  }\n  ;\n  *hash_head_ref = hash_head;\n  *bflush_ref = bflush;\n}\n\n",
            "calle": [
                "_tr_flush_block",
                "fill_window",
                "flush_pending",
                "helper_helper_deflate_fast_2_1",
                "helper_helper_deflate_fast_2_2",
                "longest_match"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "hash_head_ref",
                        "type": "IPos * const",
                        "definition": [
                            "IPos * const hash_head_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bflush_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const bflush_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flush",
                        "type": "int",
                        "definition": [
                            "int flush"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hash_head",
                        "type": "IPos",
                        "definition": [
                            "IPos hash_head = *hash_head_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bflush",
                        "type": "int",
                        "definition": [
                            "int bflush = *bflush_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_deflate_slow_1",
            "header": "",
            "params": [
                "deflate_state * const s"
            ],
            "definition": "block_state helper_deflate_slow_1(deflate_state * const s)\n{\n  {\n    {\n      _tr_flush_block(s, (s->block_start >= 0L) ? ((charf *) (&s->window[(unsigned) s->block_start])) : ((charf *) 0), (ulg) (((long) s->strstart) - s->block_start), 1);\n      s->block_start = s->strstart;\n      flush_pending(s->strm);\n      ;\n    }\n    ;\n    if (s->strm->avail_out == 0)\n    {\n      return (1) ? (finish_started) : (need_more);\n    }\n  }\n  ;\n  return finish_done;\n}\n\n",
            "calle": [
                "_tr_flush_block",
                "flush_pending"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_deflate_slow_2",
            "header": "",
            "params": [
                "IPos * const hash_head_ref",
                "int * const bflush_ref",
                "deflate_state * const s",
                "int flush"
            ],
            "definition": "block_state helper_deflate_slow_2(IPos * const hash_head_ref, int * const bflush_ref, deflate_state * const s, int flush)\n{\n  IPos hash_head = *hash_head_ref;\n  int bflush = *bflush_ref;\n  if (s->lookahead < ((258 + 3) + 1))\n  {\n    fill_window(s);\n    if ((s->lookahead < ((258 + 3) + 1)) && (flush == 0))\n    {\n      return need_more;\n    }\n    if (s->lookahead == 0)\n    {\n      break;\n    }\n  }\n  hash_head = 0;\n  if (s->lookahead >= 3)\n  {\n    s->ins_h = ((s->ins_h << s->hash_shift) ^ s->window[s->strstart + (3 - 1)]) & s->hash_mask, hash_head = (s->prev[s->strstart & s->w_mask] = s->head[s->ins_h]), s->head[s->ins_h] = (Pos) s->strstart;\n  }\n  s->prev_length = s->match_length, s->prev_match = s->match_start;\n  s->match_length = 3 - 1;\n  if (((hash_head != 0) && (s->prev_length < s->max_lazy_match)) && ((s->strstart - hash_head) <= (s->w_size - ((258 + 3) + 1))))\n  {\n    s->match_length = longest_match(s, hash_head);\n    if ((s->match_length <= 5) && (s->strategy == 1))\n    {\n      s->match_length = 3 - 1;\n    }\n  }\n  if ((s->prev_length >= 3) && (s->match_length <= s->prev_length))\n  {\n    helper_helper_deflate_slow_2_2(&hash_head, &bflush, s);\n  }\n  else\n    if (s->match_available)\n  {\n    helper_helper_deflate_slow_2_1(&bflush, s);\n  }\n  else\n  {\n    s->match_available = 1;\n    s->strstart += 1;\n    s->lookahead -= 1;\n  }\n  *hash_head_ref = hash_head;\n  *bflush_ref = bflush;\n}\n\n",
            "calle": [
                "fill_window",
                "helper_helper_deflate_slow_2_1",
                "helper_helper_deflate_slow_2_2",
                "longest_match"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "hash_head_ref",
                        "type": "IPos * const",
                        "definition": [
                            "IPos * const hash_head_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bflush_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const bflush_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flush",
                        "type": "int",
                        "definition": [
                            "int flush"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hash_head",
                        "type": "IPos",
                        "definition": [
                            "IPos hash_head = *hash_head_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bflush",
                        "type": "int",
                        "definition": [
                            "int bflush = *bflush_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_deflate_rle_1",
            "header": "",
            "params": [
                "deflate_state * const s"
            ],
            "definition": "block_state helper_deflate_rle_1(deflate_state * const s)\n{\n  {\n    {\n      _tr_flush_block(s, (s->block_start >= 0L) ? ((charf *) (&s->window[(unsigned) s->block_start])) : ((charf *) 0), (ulg) (((long) s->strstart) - s->block_start), 1);\n      s->block_start = s->strstart;\n      flush_pending(s->strm);\n      ;\n    }\n    ;\n    if (s->strm->avail_out == 0)\n    {\n      return (1) ? (finish_started) : (need_more);\n    }\n  }\n  ;\n  return finish_done;\n}\n\n",
            "calle": [
                "_tr_flush_block",
                "flush_pending"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_deflate_rle_2",
            "header": "",
            "params": [
                "int * const bflush_ref",
                "uInt * const prev_ref",
                "unsigned int * const scan_idx_ref",
                "unsigned int * const strend_idx_ref",
                "deflate_state * const s",
                "int flush",
                "Bytef * const scan",
                "Bytef * const strend"
            ],
            "definition": "block_state helper_deflate_rle_2(int * const bflush_ref, uInt * const prev_ref, unsigned int * const scan_idx_ref, unsigned int * const strend_idx_ref, deflate_state * const s, int flush, Bytef * const scan, Bytef * const strend)\n{\n  int bflush = *bflush_ref;\n  uInt prev = *prev_ref;\n  unsigned int scan_idx = *scan_idx_ref;\n  unsigned int strend_idx = *strend_idx_ref;\n  if (s->lookahead <= 258)\n  {\n    fill_window(s);\n    if ((s->lookahead <= 258) && (flush == 0))\n    {\n      return need_more;\n    }\n    if (s->lookahead == 0)\n    {\n      break;\n    }\n  }\n  s->match_length = 0;\n  if ((s->lookahead >= 3) && (s->strstart > 0))\n  {\n    scan_idx = (s->window + s->strstart) - 1;\n    prev = scan[scan_idx];\n    if (((prev == (*(++(&scan[scan_idx])))) && (prev == (*(++(&scan[scan_idx]))))) && (prev == (*(++(&scan[scan_idx])))))\n    {\n      strend_idx = (s->window + s->strstart) + 258;\n      do\n      {\n      }\n      while (((((((((prev == (*(++(&scan[scan_idx])))) && (prev == (*(++(&scan[scan_idx]))))) && (prev == (*(++(&scan[scan_idx]))))) && (prev == (*(++(&scan[scan_idx]))))) && (prev == (*(++(&scan[scan_idx]))))) && (prev == (*(++(&scan[scan_idx]))))) && (prev == (*(++(&scan[scan_idx]))))) && (prev == (*(++(&scan[scan_idx]))))) && ((&scan[scan_idx]) < (&strend[strend_idx])));\n      s->match_length = 258 - ((uInt) ((&strend[strend_idx]) - (&scan[scan_idx])));\n      if (s->match_length > s->lookahead)\n      {\n        s->match_length = s->lookahead;\n      }\n    }\n    ;\n  }\n  if (s->match_length >= 3)\n  {\n    helper_helper_deflate_rle_2_2(&bflush, s);\n  }\n  else\n  {\n    helper_helper_deflate_rle_2_1(&bflush, s);\n  }\n  if (bflush)\n  {\n    {\n      _tr_flush_block(s, (s->block_start >= 0L) ? ((charf *) (&s->window[(unsigned) s->block_start])) : ((charf *) 0), (ulg) (((long) s->strstart) - s->block_start), 0);\n      s->block_start = s->strstart;\n      flush_pending(s->strm);\n      ;\n    }\n    ;\n    if (s->strm->avail_out == 0)\n    {\n      return (0) ? (finish_started) : (need_more);\n    }\n  }\n  ;\n  *bflush_ref = bflush;\n  *prev_ref = prev;\n  *scan_idx_ref = scan_idx;\n  *strend_idx_ref = strend_idx;\n}\n\n",
            "calle": [
                "_tr_flush_block",
                "fill_window",
                "flush_pending",
                "helper_helper_deflate_rle_2_1",
                "helper_helper_deflate_rle_2_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bflush_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const bflush_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_ref",
                        "type": "uInt * const",
                        "definition": [
                            "uInt * const prev_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scan_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const scan_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strend_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const strend_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flush",
                        "type": "int",
                        "definition": [
                            "int flush"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scan",
                        "type": "Bytef * const",
                        "definition": [
                            "Bytef * const scan"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strend",
                        "type": "Bytef * const",
                        "definition": [
                            "Bytef * const strend"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bflush",
                        "type": "int",
                        "definition": [
                            "int bflush = *bflush_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev",
                        "type": "uInt",
                        "definition": [
                            "uInt prev = *prev_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scan_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int scan_idx = *scan_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strend_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int strend_idx = *strend_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_deflate_huff_1",
            "header": "",
            "params": [
                "deflate_state * const s"
            ],
            "definition": "block_state helper_deflate_huff_1(deflate_state * const s)\n{\n  {\n    {\n      _tr_flush_block(s, (s->block_start >= 0L) ? ((charf *) (&s->window[(unsigned) s->block_start])) : ((charf *) 0), (ulg) (((long) s->strstart) - s->block_start), 1);\n      s->block_start = s->strstart;\n      flush_pending(s->strm);\n      ;\n    }\n    ;\n    if (s->strm->avail_out == 0)\n    {\n      return (1) ? (finish_started) : (need_more);\n    }\n  }\n  ;\n  return finish_done;\n}\n\n",
            "calle": [
                "_tr_flush_block",
                "flush_pending"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_deflate_huff_2",
            "header": "",
            "params": [
                "int * const bflush_ref",
                "deflate_state * const s",
                "int flush"
            ],
            "definition": "block_state helper_deflate_huff_2(int * const bflush_ref, deflate_state * const s, int flush)\n{\n  int bflush = *bflush_ref;\n  if (s->lookahead == 0)\n  {\n    fill_window(s);\n    if (s->lookahead == 0)\n    {\n      if (flush == 0)\n      {\n        return need_more;\n      }\n      break;\n    }\n  }\n  s->match_length = 0;\n  ;\n  {\n    uch cc = s->window[s->strstart];\n    s->sym_buf[s->sym_next++] = 0;\n    s->sym_buf[s->sym_next++] = 0;\n    s->sym_buf[s->sym_next++] = cc;\n    s->dyn_ltree[cc].fc.freq += 1;\n    bflush = s->sym_next == s->sym_end;\n  }\n  ;\n  s->lookahead -= 1;\n  s->strstart += 1;\n  if (bflush)\n  {\n    {\n      _tr_flush_block(s, (s->block_start >= 0L) ? ((charf *) (&s->window[(unsigned) s->block_start])) : ((charf *) 0), (ulg) (((long) s->strstart) - s->block_start), 0);\n      s->block_start = s->strstart;\n      flush_pending(s->strm);\n      ;\n    }\n    ;\n    if (s->strm->avail_out == 0)\n    {\n      return (0) ? (finish_started) : (need_more);\n    }\n  }\n  ;\n  *bflush_ref = bflush;\n}\n\n",
            "calle": [
                "_tr_flush_block",
                "fill_window",
                "flush_pending"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bflush_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const bflush_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flush",
                        "type": "int",
                        "definition": [
                            "int flush"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bflush",
                        "type": "int",
                        "definition": [
                            "int bflush = *bflush_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cc",
                        "type": "uch",
                        "definition": [
                            "uch cc = s->window[s->strstart]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_fill_window_2_1",
            "header": "",
            "params": [
                "deflate_state * const s"
            ],
            "definition": "void helper_helper_fill_window_2_1(deflate_state * const s)\n{\n  uInt str = s->strstart - s->insert;\n  s->ins_h = s->window[str];\n  s->ins_h = ((s->ins_h << s->hash_shift) ^ s->window[str + 1]) & s->hash_mask;\n  while (s->insert)\n  {\n    s->ins_h = ((s->ins_h << s->hash_shift) ^ s->window[(str + 3) - 1]) & s->hash_mask;\n    s->prev[str & s->w_mask] = s->head[s->ins_h];\n    s->head[s->ins_h] = (Pos) str;\n    str += 1;\n    s->insert -= 1;\n    if ((s->lookahead + s->insert) < 3)\n    {\n      break;\n    }\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "uInt",
                        "definition": [
                            "uInt str = s->strstart - s->insert"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_deflate_fast_2_1",
            "header": "",
            "params": [
                "int * const bflush_ref",
                "deflate_state * const s"
            ],
            "definition": "void helper_helper_deflate_fast_2_1(int * const bflush_ref, deflate_state * const s)\n{\n  int bflush = *bflush_ref;\n  ;\n  {\n    uch cc = s->window[s->strstart];\n    s->sym_buf[s->sym_next++] = 0;\n    s->sym_buf[s->sym_next++] = 0;\n    s->sym_buf[s->sym_next++] = cc;\n    s->dyn_ltree[cc].fc.freq += 1;\n    bflush = s->sym_next == s->sym_end;\n  }\n  ;\n  s->lookahead -= 1;\n  s->strstart += 1;\n  *bflush_ref = bflush;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bflush_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const bflush_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bflush",
                        "type": "int",
                        "definition": [
                            "int bflush = *bflush_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cc",
                        "type": "uch",
                        "definition": [
                            "uch cc = s->window[s->strstart]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_deflate_fast_2_2",
            "header": "",
            "params": [
                "IPos * const hash_head_ref",
                "int * const bflush_ref",
                "deflate_state * const s"
            ],
            "definition": "void helper_helper_deflate_fast_2_2(IPos * const hash_head_ref, int * const bflush_ref, deflate_state * const s)\n{\n  IPos hash_head = *hash_head_ref;\n  int bflush = *bflush_ref;\n  ;\n  {\n    uch len = (uch) (s->match_length - 3);\n    ush dist = (ush) (s->strstart - s->match_start);\n    s->sym_buf[s->sym_next++] = (uch) dist;\n    s->sym_buf[s->sym_next++] = (uch) (dist >> 8);\n    s->sym_buf[s->sym_next++] = len;\n    dist -= 1;\n    s->dyn_ltree[(_length_code[len] + 256) + 1].fc.freq += 1;\n    s->dyn_dtree[(dist < 256) ? (_dist_code[dist]) : (_dist_code[256 + (dist >> 7)])].fc.freq += 1;\n    bflush = s->sym_next == s->sym_end;\n  }\n  ;\n  s->lookahead -= s->match_length;\n  if ((s->match_length <= s->max_lazy_match) && (s->lookahead >= 3))\n  {\n    s->match_length -= 1;\n    do\n    {\n      s->strstart += 1;\n      s->ins_h = ((s->ins_h << s->hash_shift) ^ s->window[s->strstart + (3 - 1)]) & s->hash_mask, hash_head = (s->prev[s->strstart & s->w_mask] = s->head[s->ins_h]), s->head[s->ins_h] = (Pos) s->strstart;\n    }\n    while ((--s->match_length) != 0);\n    s->strstart += 1;\n  }\n  else\n  {\n    s->strstart += s->match_length;\n    s->match_length = 0;\n    s->ins_h = s->window[s->strstart];\n    s->ins_h = ((s->ins_h << s->hash_shift) ^ s->window[s->strstart + 1]) & s->hash_mask;\n  }\n  *hash_head_ref = hash_head;\n  *bflush_ref = bflush;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "hash_head_ref",
                        "type": "IPos * const",
                        "definition": [
                            "IPos * const hash_head_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bflush_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const bflush_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hash_head",
                        "type": "IPos",
                        "definition": [
                            "IPos hash_head = *hash_head_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bflush",
                        "type": "int",
                        "definition": [
                            "int bflush = *bflush_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "uch",
                        "definition": [
                            "uch len = (uch) (s->match_length - 3)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "ush",
                        "definition": [
                            "ush dist = (ush) (s->strstart - s->match_start)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "_length_code",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "_dist_code",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_deflate_slow_2_1",
            "header": "",
            "params": [
                "int * const bflush_ref",
                "deflate_state * const s"
            ],
            "definition": "block_state helper_helper_deflate_slow_2_1(int * const bflush_ref, deflate_state * const s)\n{\n  int bflush = *bflush_ref;\n  ;\n  {\n    uch cc = s->window[s->strstart - 1];\n    s->sym_buf[s->sym_next++] = 0;\n    s->sym_buf[s->sym_next++] = 0;\n    s->sym_buf[s->sym_next++] = cc;\n    s->dyn_ltree[cc].fc.freq += 1;\n    bflush = s->sym_next == s->sym_end;\n  }\n  ;\n  if (bflush)\n  {\n    {\n      _tr_flush_block(s, (s->block_start >= 0L) ? ((charf *) (&s->window[(unsigned) s->block_start])) : ((charf *) 0), (ulg) (((long) s->strstart) - s->block_start), 0);\n      s->block_start = s->strstart;\n      flush_pending(s->strm);\n      ;\n    }\n    ;\n  }\n  s->strstart += 1;\n  s->lookahead -= 1;\n  if (s->strm->avail_out == 0)\n  {\n    return need_more;\n  }\n  *bflush_ref = bflush;\n}\n\n",
            "calle": [
                "_tr_flush_block",
                "flush_pending"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bflush_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const bflush_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bflush",
                        "type": "int",
                        "definition": [
                            "int bflush = *bflush_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cc",
                        "type": "uch",
                        "definition": [
                            "uch cc = s->window[s->strstart - 1]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_deflate_slow_2_2",
            "header": "",
            "params": [
                "IPos * const hash_head_ref",
                "int * const bflush_ref",
                "deflate_state * const s"
            ],
            "definition": "block_state helper_helper_deflate_slow_2_2(IPos * const hash_head_ref, int * const bflush_ref, deflate_state * const s)\n{\n  IPos hash_head = *hash_head_ref;\n  int bflush = *bflush_ref;\n  uInt max_insert = (s->strstart + s->lookahead) - 3;\n  ;\n  {\n    uch len = (uch) (s->prev_length - 3);\n    ush dist = (ush) ((s->strstart - 1) - s->prev_match);\n    s->sym_buf[s->sym_next++] = (uch) dist;\n    s->sym_buf[s->sym_next++] = (uch) (dist >> 8);\n    s->sym_buf[s->sym_next++] = len;\n    dist -= 1;\n    s->dyn_ltree[(_length_code[len] + 256) + 1].fc.freq += 1;\n    s->dyn_dtree[(dist < 256) ? (_dist_code[dist]) : (_dist_code[256 + (dist >> 7)])].fc.freq += 1;\n    bflush = s->sym_next == s->sym_end;\n  }\n  ;\n  s->lookahead -= s->prev_length - 1;\n  s->prev_length -= 2;\n  do\n  {\n    if ((++s->strstart) <= max_insert)\n    {\n      s->ins_h = ((s->ins_h << s->hash_shift) ^ s->window[s->strstart + (3 - 1)]) & s->hash_mask, hash_head = (s->prev[s->strstart & s->w_mask] = s->head[s->ins_h]), s->head[s->ins_h] = (Pos) s->strstart;\n    }\n  }\n  while ((--s->prev_length) != 0);\n  s->match_available = 0;\n  s->match_length = 3 - 1;\n  s->strstart += 1;\n  if (bflush)\n  {\n    {\n      _tr_flush_block(s, (s->block_start >= 0L) ? ((charf *) (&s->window[(unsigned) s->block_start])) : ((charf *) 0), (ulg) (((long) s->strstart) - s->block_start), 0);\n      s->block_start = s->strstart;\n      flush_pending(s->strm);\n      ;\n    }\n    ;\n    if (s->strm->avail_out == 0)\n    {\n      return (0) ? (finish_started) : (need_more);\n    }\n  }\n  ;\n  *hash_head_ref = hash_head;\n  *bflush_ref = bflush;\n}\n\n",
            "calle": [
                "_tr_flush_block",
                "flush_pending"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "hash_head_ref",
                        "type": "IPos * const",
                        "definition": [
                            "IPos * const hash_head_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bflush_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const bflush_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hash_head",
                        "type": "IPos",
                        "definition": [
                            "IPos hash_head = *hash_head_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bflush",
                        "type": "int",
                        "definition": [
                            "int bflush = *bflush_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_insert",
                        "type": "uInt",
                        "definition": [
                            "uInt max_insert = (s->strstart + s->lookahead) - 3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "uch",
                        "definition": [
                            "uch len = (uch) (s->prev_length - 3)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "ush",
                        "definition": [
                            "ush dist = (ush) ((s->strstart - 1) - s->prev_match)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "_length_code",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "_dist_code",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_deflate_rle_2_1",
            "header": "",
            "params": [
                "int * const bflush_ref",
                "deflate_state * const s"
            ],
            "definition": "void helper_helper_deflate_rle_2_1(int * const bflush_ref, deflate_state * const s)\n{\n  int bflush = *bflush_ref;\n  ;\n  {\n    uch cc = s->window[s->strstart];\n    s->sym_buf[s->sym_next++] = 0;\n    s->sym_buf[s->sym_next++] = 0;\n    s->sym_buf[s->sym_next++] = cc;\n    s->dyn_ltree[cc].fc.freq += 1;\n    bflush = s->sym_next == s->sym_end;\n  }\n  ;\n  s->lookahead -= 1;\n  s->strstart += 1;\n  *bflush_ref = bflush;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bflush_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const bflush_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bflush",
                        "type": "int",
                        "definition": [
                            "int bflush = *bflush_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cc",
                        "type": "uch",
                        "definition": [
                            "uch cc = s->window[s->strstart]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_deflate_rle_2_2",
            "header": "",
            "params": [
                "int * const bflush_ref",
                "deflate_state * const s"
            ],
            "definition": "void helper_helper_deflate_rle_2_2(int * const bflush_ref, deflate_state * const s)\n{\n  int bflush = *bflush_ref;\n  ;\n  {\n    uch len = (uch) (s->match_length - 3);\n    ush dist = (ush) 1;\n    s->sym_buf[s->sym_next++] = (uch) dist;\n    s->sym_buf[s->sym_next++] = (uch) (dist >> 8);\n    s->sym_buf[s->sym_next++] = len;\n    dist -= 1;\n    s->dyn_ltree[(_length_code[len] + 256) + 1].fc.freq += 1;\n    s->dyn_dtree[(dist < 256) ? (_dist_code[dist]) : (_dist_code[256 + (dist >> 7)])].fc.freq += 1;\n    bflush = s->sym_next == s->sym_end;\n  }\n  ;\n  s->lookahead -= s->match_length;\n  s->strstart += s->match_length;\n  s->match_length = 0;\n  *bflush_ref = bflush;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bflush_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const bflush_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bflush",
                        "type": "int",
                        "definition": [
                            "int bflush = *bflush_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "uch",
                        "definition": [
                            "uch len = (uch) (s->match_length - 3)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "ush",
                        "definition": [
                            "ush dist = (ush) 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "_length_code",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "_dist_code",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "inflateBack",
            "header": "extern int inflateBack(z_streamp strm, in_func in, void *in_desc, out_func out, void *out_desc)",
            "params": [
                "z_streamp strm",
                "in_func in",
                "void *in_desc",
                "out_func out",
                "void *out_desc"
            ],
            "definition": "int inflateBack(z_streamp strm, in_func in, void *in_desc, out_func out, void *out_desc)\n{\n  struct inflate_state *state;\n  unsigned int state_idx = 0;\n  const unsigned char *next;\n  unsigned int next_idx = 0;\n  unsigned char *put;\n  unsigned int put_idx = 0;\n  unsigned have;\n  unsigned left;\n  unsigned long hold;\n  unsigned bits;\n  unsigned copy;\n  unsigned char *from;\n  unsigned int from_idx = 0;\n  code here;\n  code last;\n  unsigned len;\n  int ret;\n  static const unsigned short order[19] = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};\n  if ((strm == 0) || (strm->state == 0))\n  {\n    return -2;\n  }\n  state_idx = (struct inflate_state *) strm->state_idx;\n  strm->msg = 0;\n  state->mode = TYPE;\n  state->last = 0;\n  state->whave = 0;\n  next_idx = strm->next_in;\n  have = ((&next[next_idx]) != 0) ? (strm->avail_in) : (0);\n  hold = 0;\n  bits = 0;\n  put_idx = state->window;\n  left = state->wsize;\n  for (;;)\n  {\n    helper_inflateBack_1(&strm, &next_idx, &put_idx, &have, &left, &hold, &bits, &copy, &from_idx, &here, &last, &len, &ret, in_desc, out_desc, state, next, put, from, order);\n  }\n\n  inf_leave:\n  if (left < state->wsize)\n  {\n    if (out(out_desc, state->window, state->wsize - left) && (ret == 1))\n    {\n      ret = -5;\n    }\n  }\n\n  strm->next_in = &next[next_idx];\n  strm->avail_in = have;\n  return ret;\n}\n\n",
            "calle": [
                "helper_inflateBack_1",
                "out"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "in_func",
                        "definition": [
                            "in_func in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_desc",
                        "type": "void *",
                        "definition": [
                            "void *in_desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "out_func",
                        "definition": [
                            "out_func out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out_desc",
                        "type": "void *",
                        "definition": [
                            "void *out_desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state *",
                        "definition": [
                            "struct inflate_state *state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int state_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *put"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int put_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left",
                        "type": "unsigned",
                        "definition": [
                            "unsigned left"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy",
                        "type": "unsigned",
                        "definition": [
                            "unsigned copy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *from"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int from_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here",
                        "type": "code",
                        "definition": [
                            "code here"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last",
                        "type": "code",
                        "definition": [
                            "code last"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned",
                        "definition": [
                            "unsigned len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret"
                        ]
                    },
                    {
                        "path": null,
                        "name": "order",
                        "type": "const unsigned short [19]",
                        "definition": [
                            "static const unsigned short order[19] = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "inflateBackEnd",
            "header": "extern int inflateBackEnd(z_streamp strm)",
            "params": [
                "z_streamp strm"
            ],
            "definition": "int inflateBackEnd(z_streamp strm)\n{\n  if (((strm == 0) || (strm->state == 0)) || (strm->zfree == ((free_func) 0)))\n  {\n    return -2;\n  }\n  (*strm->zfree)(strm->opaque, (voidpf) strm->state);\n  strm->state = 0;\n  ;\n  return 0;\n}\n\n",
            "calle": [
                "*strm->zfree"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "inflateBackInit_",
            "header": "extern int inflateBackInit_(z_streamp strm, int windowBits, unsigned char *window, const char *version, int stream_size)",
            "params": [
                "z_streamp strm",
                "int windowBits",
                "unsigned char *window",
                "const char *version",
                "int stream_size"
            ],
            "definition": "int inflateBackInit_(z_streamp strm, int windowBits, unsigned char *window, const char *version, int stream_size)\n{\n  struct inflate_state *state;\n  unsigned int state_idx = 0;\n  if (((version == 0) || (version[0] != \"1.3-optipng\"[0])) || (stream_size != ((int) (sizeof(z_stream)))))\n  {\n    return -6;\n  }\n  if ((((strm == 0) || (window == 0)) || (windowBits < 8)) || (windowBits > 15))\n  {\n    return -2;\n  }\n  strm->msg = 0;\n  if (strm->zalloc == ((alloc_func) 0))\n  {\n    strm->zalloc = zcalloc;\n    strm->opaque = (voidpf) 0;\n  }\n  if (strm->zfree == ((free_func) 0))\n  {\n    strm->zfree = zcfree;\n  }\n  state_idx = (struct inflate_state *) (*strm->zalloc)(strm->opaque, 1, sizeof(struct inflate_state));\n  if ((&state[state_idx]) == 0)\n  {\n    return -4;\n  }\n  ;\n  strm->state = (struct internal_state *) state;\n  state->dmax = 32768U;\n  state->wbits = (uInt) windowBits;\n  state->wsize = 1U << windowBits;\n  state->window = window;\n  state->wnext = 0;\n  state->whave = 0;\n  state->sane = 1;\n  return 0;\n}\n\n",
            "calle": [
                "*strm->zalloc",
                "zcalloc",
                "zcfree"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "windowBits",
                        "type": "int",
                        "definition": [
                            "int windowBits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "window",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *window"
                        ]
                    },
                    {
                        "path": null,
                        "name": "version",
                        "type": "const char *",
                        "definition": [
                            "const char *version"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream_size",
                        "type": "int",
                        "definition": [
                            "int stream_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state *",
                        "definition": [
                            "struct inflate_state *state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int state_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "fixedtables",
            "header": "",
            "params": [
                "struct inflate_state *state"
            ],
            "definition": "static void fixedtables(struct inflate_state *state)\n{\n  static const code lenfix[512] = {{96, 7, 0}, {0, 8, 80}, {0, 8, 16}, {20, 8, 115}, {18, 7, 31}, {0, 8, 112}, {0, 8, 48}, {0, 9, 192}, {16, 7, 10}, {0, 8, 96}, {0, 8, 32}, {0, 9, 160}, {0, 8, 0}, {0, 8, 128}, {0, 8, 64}, {0, 9, 224}, {16, 7, 6}, {0, 8, 88}, {0, 8, 24}, {0, 9, 144}, {19, 7, 59}, {0, 8, 120}, {0, 8, 56}, {0, 9, 208}, {17, 7, 17}, {0, 8, 104}, {0, 8, 40}, {0, 9, 176}, {0, 8, 8}, {0, 8, 136}, {0, 8, 72}, {0, 9, 240}, {16, 7, 4}, {0, 8, 84}, {0, 8, 20}, {21, 8, 227}, {19, 7, 43}, {0, 8, 116}, {0, 8, 52}, {0, 9, 200}, {17, 7, 13}, {0, 8, 100}, {0, 8, 36}, {0, 9, 168}, {0, 8, 4}, {0, 8, 132}, {0, 8, 68}, {0, 9, 232}, {16, 7, 8}, {0, 8, 92}, {0, 8, 28}, {0, 9, 152}, {20, 7, 83}, {0, 8, 124}, {0, 8, 60}, {0, 9, 216}, {18, 7, 23}, {0, 8, 108}, {0, 8, 44}, {0, 9, 184}, {0, 8, 12}, {0, 8, 140}, {0, 8, 76}, {0, 9, 248}, {16, 7, 3}, {0, 8, 82}, {0, 8, 18}, {21, 8, 163}, {19, 7, 35}, {0, 8, 114}, {0, 8, 50}, {0, 9, 196}, {17, 7, 11}, {0, 8, 98}, {0, 8, 34}, {0, 9, 164}, {0, 8, 2}, {0, 8, 130}, {0, 8, 66}, {0, 9, 228}, {16, 7, 7}, {0, 8, 90}, {0, 8, 26}, {0, 9, 148}, {20, 7, 67}, {0, 8, 122}, {0, 8, 58}, {0, 9, 212}, {18, 7, 19}, {0, 8, 106}, {0, 8, 42}, {0, 9, 180}, {0, 8, 10}, {0, 8, 138}, {0, 8, 74}, {0, 9, 244}, {16, 7, 5}, {0, 8, 86}, {0, 8, 22}, {64, 8, 0}, {19, 7, 51}, {0, 8, 118}, {0, 8, 54}, {0, 9, 204}, {17, 7, 15}, {0, 8, 102}, {0, 8, 38}, {0, 9, 172}, {0, 8, 6}, {0, 8, 134}, {0, 8, 70}, {0, 9, 236}, {16, 7, 9}, {0, 8, 94}, {0, 8, 30}, {0, 9, 156}, {20, 7, 99}, {0, 8, 126}, {0, 8, 62}, {0, 9, 220}, {18, 7, 27}, {0, 8, 110}, {0, 8, 46}, {0, 9, 188}, {0, 8, 14}, {0, 8, 142}, {0, 8, 78}, {0, 9, 252}, {96, 7, 0}, {0, 8, 81}, {0, 8, 17}, {21, 8, 131}, {18, 7, 31}, {0, 8, 113}, {0, 8, 49}, {0, 9, 194}, {16, 7, 10}, {0, 8, 97}, {0, 8, 33}, {0, 9, 162}, {0, 8, 1}, {0, 8, 129}, {0, 8, 65}, {0, 9, 226}, {16, 7, 6}, {0, 8, 89}, {0, 8, 25}, {0, 9, 146}, {19, 7, 59}, {0, 8, 121}, {0, 8, 57}, {0, 9, 210}, {17, 7, 17}, {0, 8, 105}, {0, 8, 41}, {0, 9, 178}, {0, 8, 9}, {0, 8, 137}, {0, 8, 73}, {0, 9, 242}, {16, 7, 4}, {0, 8, 85}, {0, 8, 21}, {16, 8, 258}, {19, 7, 43}, {0, 8, 117}, {0, 8, 53}, {0, 9, 202}, {17, 7, 13}, {0, 8, 101}, {0, 8, 37}, {0, 9, 170}, {0, 8, 5}, {0, 8, 133}, {0, 8, 69}, {0, 9, 234}, {16, 7, 8}, {0, 8, 93}, {0, 8, 29}, {0, 9, 154}, {20, 7, 83}, {0, 8, 125}, {0, 8, 61}, {0, 9, 218}, {18, 7, 23}, {0, 8, 109}, {0, 8, 45}, {0, 9, 186}, {0, 8, 13}, {0, 8, 141}, {0, 8, 77}, {0, 9, 250}, {16, 7, 3}, {0, 8, 83}, {0, 8, 19}, {21, 8, 195}, {19, 7, 35}, {0, 8, 115}, {0, 8, 51}, {0, 9, 198}, {17, 7, 11}, {0, 8, 99}, {0, 8, 35}, {0, 9, 166}, {0, 8, 3}, {0, 8, 131}, {0, 8, 67}, {0, 9, 230}, {16, 7, 7}, {0, 8, 91}, {0, 8, 27}, {0, 9, 150}, {20, 7, 67}, {0, 8, 123}, {0, 8, 59}, {0, 9, 214}, {18, 7, 19}, {0, 8, 107}, {0, 8, 43}, {0, 9, 182}, {0, 8, 11}, {0, 8, 139}, {0, 8, 75}, {0, 9, 246}, {16, 7, 5}, {0, 8, 87}, {0, 8, 23}, {64, 8, 0}, {19, 7, 51}, {0, 8, 119}, {0, 8, 55}, {0, 9, 206}, {17, 7, 15}, {0, 8, 103}, {0, 8, 39}, {0, 9, 174}, {0, 8, 7}, {0, 8, 135}, {0, 8, 71}, {0, 9, 238}, {16, 7, 9}, {0, 8, 95}, {0, 8, 31}, {0, 9, 158}, {20, 7, 99}, {0, 8, 127}, {0, 8, 63}, {0, 9, 222}, {18, 7, 27}, {0, 8, 111}, {0, 8, 47}, {0, 9, 190}, {0, 8, 15}, {0, 8, 143}, {0, 8, 79}, {0, 9, 254}, {96, 7, 0}, {0, 8, 80}, {0, 8, 16}, {20, 8, 115}, {18, 7, 31}, {0, 8, 112}, {0, 8, 48}, {0, 9, 193}, {16, 7, 10}, {0, 8, 96}, {0, 8, 32}, {0, 9, 161}, {0, 8, 0}, {0, 8, 128}, {0, 8, 64}, {0, 9, 225}, {16, 7, 6}, {0, 8, 88}, {0, 8, 24}, {0, 9, 145}, {19, 7, 59}, {0, 8, 120}, {0, 8, 56}, {0, 9, 209}, {17, 7, 17}, {0, 8, 104}, {0, 8, 40}, {0, 9, 177}, {0, 8, 8}, {0, 8, 136}, {0, 8, 72}, {0, 9, 241}, {16, 7, 4}, {0, 8, 84}, {0, 8, 20}, {21, 8, 227}, {19, 7, 43}, {0, 8, 116}, {0, 8, 52}, {0, 9, 201}, {17, 7, 13}, {0, 8, 100}, {0, 8, 36}, {0, 9, 169}, {0, 8, 4}, {0, 8, 132}, {0, 8, 68}, {0, 9, 233}, {16, 7, 8}, {0, 8, 92}, {0, 8, 28}, {0, 9, 153}, {20, 7, 83}, {0, 8, 124}, {0, 8, 60}, {0, 9, 217}, {18, 7, 23}, {0, 8, 108}, {0, 8, 44}, {0, 9, 185}, {0, 8, 12}, {0, 8, 140}, {0, 8, 76}, {0, 9, 249}, {16, 7, 3}, {0, 8, 82}, {0, 8, 18}, {21, 8, 163}, {19, 7, 35}, {0, 8, 114}, {0, 8, 50}, {0, 9, 197}, {17, 7, 11}, {0, 8, 98}, {0, 8, 34}, {0, 9, 165}, {0, 8, 2}, {0, 8, 130}, {0, 8, 66}, {0, 9, 229}, {16, 7, 7}, {0, 8, 90}, {0, 8, 26}, {0, 9, 149}, {20, 7, 67}, {0, 8, 122}, {0, 8, 58}, {0, 9, 213}, {18, 7, 19}, {0, 8, 106}, {0, 8, 42}, {0, 9, 181}, {0, 8, 10}, {0, 8, 138}, {0, 8, 74}, {0, 9, 245}, {16, 7, 5}, {0, 8, 86}, {0, 8, 22}, {64, 8, 0}, {19, 7, 51}, {0, 8, 118}, {0, 8, 54}, {0, 9, 205}, {17, 7, 15}, {0, 8, 102}, {0, 8, 38}, {0, 9, 173}, {0, 8, 6}, {0, 8, 134}, {0, 8, 70}, {0, 9, 237}, {16, 7, 9}, {0, 8, 94}, {0, 8, 30}, {0, 9, 157}, {20, 7, 99}, {0, 8, 126}, {0, 8, 62}, {0, 9, 221}, {18, 7, 27}, {0, 8, 110}, {0, 8, 46}, {0, 9, 189}, {0, 8, 14}, {0, 8, 142}, {0, 8, 78}, {0, 9, 253}, {96, 7, 0}, {0, 8, 81}, {0, 8, 17}, {21, 8, 131}, {18, 7, 31}, {0, 8, 113}, {0, 8, 49}, {0, 9, 195}, {16, 7, 10}, {0, 8, 97}, {0, 8, 33}, {0, 9, 163}, {0, 8, 1}, {0, 8, 129}, {0, 8, 65}, {0, 9, 227}, {16, 7, 6}, {0, 8, 89}, {0, 8, 25}, {0, 9, 147}, {19, 7, 59}, {0, 8, 121}, {0, 8, 57}, {0, 9, 211}, {17, 7, 17}, {0, 8, 105}, {0, 8, 41}, {0, 9, 179}, {0, 8, 9}, {0, 8, 137}, {0, 8, 73}, {0, 9, 243}, {16, 7, 4}, {0, 8, 85}, {0, 8, 21}, {16, 8, 258}, {19, 7, 43}, {0, 8, 117}, {0, 8, 53}, {0, 9, 203}, {17, 7, 13}, {0, 8, 101}, {0, 8, 37}, {0, 9, 171}, {0, 8, 5}, {0, 8, 133}, {0, 8, 69}, {0, 9, 235}, {16, 7, 8}, {0, 8, 93}, {0, 8, 29}, {0, 9, 155}, {20, 7, 83}, {0, 8, 125}, {0, 8, 61}, {0, 9, 219}, {18, 7, 23}, {0, 8, 109}, {0, 8, 45}, {0, 9, 187}, {0, 8, 13}, {0, 8, 141}, {0, 8, 77}, {0, 9, 251}, {16, 7, 3}, {0, 8, 83}, {0, 8, 19}, {21, 8, 195}, {19, 7, 35}, {0, 8, 115}, {0, 8, 51}, {0, 9, 199}, {17, 7, 11}, {0, 8, 99}, {0, 8, 35}, {0, 9, 167}, {0, 8, 3}, {0, 8, 131}, {0, 8, 67}, {0, 9, 231}, {16, 7, 7}, {0, 8, 91}, {0, 8, 27}, {0, 9, 151}, {20, 7, 67}, {0, 8, 123}, {0, 8, 59}, {0, 9, 215}, {18, 7, 19}, {0, 8, 107}, {0, 8, 43}, {0, 9, 183}, {0, 8, 11}, {0, 8, 139}, {0, 8, 75}, {0, 9, 247}, {16, 7, 5}, {0, 8, 87}, {0, 8, 23}, {64, 8, 0}, {19, 7, 51}, {0, 8, 119}, {0, 8, 55}, {0, 9, 207}, {17, 7, 15}, {0, 8, 103}, {0, 8, 39}, {0, 9, 175}, {0, 8, 7}, {0, 8, 135}, {0, 8, 71}, {0, 9, 239}, {16, 7, 9}, {0, 8, 95}, {0, 8, 31}, {0, 9, 159}, {20, 7, 99}, {0, 8, 127}, {0, 8, 63}, {0, 9, 223}, {18, 7, 27}, {0, 8, 111}, {0, 8, 47}, {0, 9, 191}, {0, 8, 15}, {0, 8, 143}, {0, 8, 79}, {0, 9, 255}};\n  static const code distfix[32] = {{16, 5, 1}, {23, 5, 257}, {19, 5, 17}, {27, 5, 4097}, {17, 5, 5}, {25, 5, 1025}, {21, 5, 65}, {29, 5, 16385}, {16, 5, 3}, {24, 5, 513}, {20, 5, 33}, {28, 5, 8193}, {18, 5, 9}, {26, 5, 2049}, {22, 5, 129}, {64, 5, 0}, {16, 5, 2}, {23, 5, 385}, {19, 5, 25}, {27, 5, 6145}, {17, 5, 7}, {25, 5, 1537}, {21, 5, 97}, {29, 5, 24577}, {16, 5, 4}, {24, 5, 769}, {20, 5, 49}, {28, 5, 12289}, {18, 5, 13}, {26, 5, 3073}, {22, 5, 193}, {64, 5, 0}};\n  state->lencode = lenfix;\n  state->lenbits = 9;\n  state->distcode = distfix;\n  state->distbits = 5;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state *",
                        "definition": [
                            "struct inflate_state *state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lenfix",
                        "type": "const code [512]",
                        "definition": [
                            "static const code lenfix[512] = {{96, 7, 0}, {0, 8, 80}, {0, 8, 16}, {20, 8, 115}, {18, 7, 31}, {0, 8, 112}, {0, 8, 48}, {0, 9, 192}, {16, 7, 10}, {0, 8, 96}, {0, 8, 32}, {0, 9, 160}, {0, 8, 0}, {0, 8, 128}, {0, 8, 64}, {0, 9, 224}, {16, 7, 6}, {0, 8, 88}, {0, 8, 24}, {0, 9, 144}, {19, 7, 59}, {0, 8, 120}, {0, 8, 56}, {0, 9, 208}, {17, 7, 17}, {0, 8, 104}, {0, 8, 40}, {0, 9, 176}, {0, 8, 8}, {0, 8, 136}, {0, 8, 72}, {0, 9, 240}, {16, 7, 4}, {0, 8, 84}, {0, 8, 20}, {21, 8, 227}, {19, 7, 43}, {0, 8, 116}, {0, 8, 52}, {0, 9, 200}, {17, 7, 13}, {0, 8, 100}, {0, 8, 36}, {0, 9, 168}, {0, 8, 4}, {0, 8, 132}, {0, 8, 68}, {0, 9, 232}, {16, 7, 8}, {0, 8, 92}, {0, 8, 28}, {0, 9, 152}, {20, 7, 83}, {0, 8, 124}, {0, 8, 60}, {0, 9, 216}, {18, 7, 23}, {0, 8, 108}, {0, 8, 44}, {0, 9, 184}, {0, 8, 12}, {0, 8, 140}, {0, 8, 76}, {0, 9, 248}, {16, 7, 3}, {0, 8, 82}, {0, 8, 18}, {21, 8, 163}, {19, 7, 35}, {0, 8, 114}, {0, 8, 50}, {0, 9, 196}, {17, 7, 11}, {0, 8, 98}, {0, 8, 34}, {0, 9, 164}, {0, 8, 2}, {0, 8, 130}, {0, 8, 66}, {0, 9, 228}, {16, 7, 7}, {0, 8, 90}, {0, 8, 26}, {0, 9, 148}, {20, 7, 67}, {0, 8, 122}, {0, 8, 58}, {0, 9, 212}, {18, 7, 19}, {0, 8, 106}, {0, 8, 42}, {0, 9, 180}, {0, 8, 10}, {0, 8, 138}, {0, 8, 74}, {0, 9, 244}, {16, 7, 5}, {0, 8, 86}, {0, 8, 22}, {64, 8, 0}, {19, 7, 51}, {0, 8, 118}, {0, 8, 54}, {0, 9, 204}, {17, 7, 15}, {0, 8, 102}, {0, 8, 38}, {0, 9, 172}, {0, 8, 6}, {0, 8, 134}, {0, 8, 70}, {0, 9, 236}, {16, 7, 9}, {0, 8, 94}, {0, 8, 30}, {0, 9, 156}, {20, 7, 99}, {0, 8, 126}, {0, 8, 62}, {0, 9, 220}, {18, 7, 27}, {0, 8, 110}, {0, 8, 46}, {0, 9, 188}, {0, 8, 14}, {0, 8, 142}, {0, 8, 78}, {0, 9, 252}, {96, 7, 0}, {0, 8, 81}, {0, 8, 17}, {21, 8, 131}, {18, 7, 31}, {0, 8, 113}, {0, 8, 49}, {0, 9, 194}, {16, 7, 10}, {0, 8, 97}, {0, 8, 33}, {0, 9, 162}, {0, 8, 1}, {0, 8, 129}, {0, 8, 65}, {0, 9, 226}, {16, 7, 6}, {0, 8, 89}, {0, 8, 25}, {0, 9, 146}, {19, 7, 59}, {0, 8, 121}, {0, 8, 57}, {0, 9, 210}, {17, 7, 17}, {0, 8, 105}, {0, 8, 41}, {0, 9, 178}, {0, 8, 9}, {0, 8, 137}, {0, 8, 73}, {0, 9, 242}, {16, 7, 4}, {0, 8, 85}, {0, 8, 21}, {16, 8, 258}, {19, 7, 43}, {0, 8, 117}, {0, 8, 53}, {0, 9, 202}, {17, 7, 13}, {0, 8, 101}, {0, 8, 37}, {0, 9, 170}, {0, 8, 5}, {0, 8, 133}, {0, 8, 69}, {0, 9, 234}, {16, 7, 8}, {0, 8, 93}, {0, 8, 29}, {0, 9, 154}, {20, 7, 83}, {0, 8, 125}, {0, 8, 61}, {0, 9, 218}, {18, 7, 23}, {0, 8, 109}, {0, 8, 45}, {0, 9, 186}, {0, 8, 13}, {0, 8, 141}, {0, 8, 77}, {0, 9, 250}, {16, 7, 3}, {0, 8, 83}, {0, 8, 19}, {21, 8, 195}, {19, 7, 35}, {0, 8, 115}, {0, 8, 51}, {0, 9, 198}, {17, 7, 11}, {0, 8, 99}, {0, 8, 35}, {0, 9, 166}, {0, 8, 3}, {0, 8, 131}, {0, 8, 67}, {0, 9, 230}, {16, 7, 7}, {0, 8, 91}, {0, 8, 27}, {0, 9, 150}, {20, 7, 67}, {0, 8, 123}, {0, 8, 59}, {0, 9, 214}, {18, 7, 19}, {0, 8, 107}, {0, 8, 43}, {0, 9, 182}, {0, 8, 11}, {0, 8, 139}, {0, 8, 75}, {0, 9, 246}, {16, 7, 5}, {0, 8, 87}, {0, 8, 23}, {64, 8, 0}, {19, 7, 51}, {0, 8, 119}, {0, 8, 55}, {0, 9, 206}, {17, 7, 15}, {0, 8, 103}, {0, 8, 39}, {0, 9, 174}, {0, 8, 7}, {0, 8, 135}, {0, 8, 71}, {0, 9, 238}, {16, 7, 9}, {0, 8, 95}, {0, 8, 31}, {0, 9, 158}, {20, 7, 99}, {0, 8, 127}, {0, 8, 63}, {0, 9, 222}, {18, 7, 27}, {0, 8, 111}, {0, 8, 47}, {0, 9, 190}, {0, 8, 15}, {0, 8, 143}, {0, 8, 79}, {0, 9, 254}, {96, 7, 0}, {0, 8, 80}, {0, 8, 16}, {20, 8, 115}, {18, 7, 31}, {0, 8, 112}, {0, 8, 48}, {0, 9, 193}, {16, 7, 10}, {0, 8, 96}, {0, 8, 32}, {0, 9, 161}, {0, 8, 0}, {0, 8, 128}, {0, 8, 64}, {0, 9, 225}, {16, 7, 6}, {0, 8, 88}, {0, 8, 24}, {0, 9, 145}, {19, 7, 59}, {0, 8, 120}, {0, 8, 56}, {0, 9, 209}, {17, 7, 17}, {0, 8, 104}, {0, 8, 40}, {0, 9, 177}, {0, 8, 8}, {0, 8, 136}, {0, 8, 72}, {0, 9, 241}, {16, 7, 4}, {0, 8, 84}, {0, 8, 20}, {21, 8, 227}, {19, 7, 43}, {0, 8, 116}, {0, 8, 52}, {0, 9, 201}, {17, 7, 13}, {0, 8, 100}, {0, 8, 36}, {0, 9, 169}, {0, 8, 4}, {0, 8, 132}, {0, 8, 68}, {0, 9, 233}, {16, 7, 8}, {0, 8, 92}, {0, 8, 28}, {0, 9, 153}, {20, 7, 83}, {0, 8, 124}, {0, 8, 60}, {0, 9, 217}, {18, 7, 23}, {0, 8, 108}, {0, 8, 44}, {0, 9, 185}, {0, 8, 12}, {0, 8, 140}, {0, 8, 76}, {0, 9, 249}, {16, 7, 3}, {0, 8, 82}, {0, 8, 18}, {21, 8, 163}, {19, 7, 35}, {0, 8, 114}, {0, 8, 50}, {0, 9, 197}, {17, 7, 11}, {0, 8, 98}, {0, 8, 34}, {0, 9, 165}, {0, 8, 2}, {0, 8, 130}, {0, 8, 66}, {0, 9, 229}, {16, 7, 7}, {0, 8, 90}, {0, 8, 26}, {0, 9, 149}, {20, 7, 67}, {0, 8, 122}, {0, 8, 58}, {0, 9, 213}, {18, 7, 19}, {0, 8, 106}, {0, 8, 42}, {0, 9, 181}, {0, 8, 10}, {0, 8, 138}, {0, 8, 74}, {0, 9, 245}, {16, 7, 5}, {0, 8, 86}, {0, 8, 22}, {64, 8, 0}, {19, 7, 51}, {0, 8, 118}, {0, 8, 54}, {0, 9, 205}, {17, 7, 15}, {0, 8, 102}, {0, 8, 38}, {0, 9, 173}, {0, 8, 6}, {0, 8, 134}, {0, 8, 70}, {0, 9, 237}, {16, 7, 9}, {0, 8, 94}, {0, 8, 30}, {0, 9, 157}, {20, 7, 99}, {0, 8, 126}, {0, 8, 62}, {0, 9, 221}, {18, 7, 27}, {0, 8, 110}, {0, 8, 46}, {0, 9, 189}, {0, 8, 14}, {0, 8, 142}, {0, 8, 78}, {0, 9, 253}, {96, 7, 0}, {0, 8, 81}, {0, 8, 17}, {21, 8, 131}, {18, 7, 31}, {0, 8, 113}, {0, 8, 49}, {0, 9, 195}, {16, 7, 10}, {0, 8, 97}, {0, 8, 33}, {0, 9, 163}, {0, 8, 1}, {0, 8, 129}, {0, 8, 65}, {0, 9, 227}, {16, 7, 6}, {0, 8, 89}, {0, 8, 25}, {0, 9, 147}, {19, 7, 59}, {0, 8, 121}, {0, 8, 57}, {0, 9, 211}, {17, 7, 17}, {0, 8, 105}, {0, 8, 41}, {0, 9, 179}, {0, 8, 9}, {0, 8, 137}, {0, 8, 73}, {0, 9, 243}, {16, 7, 4}, {0, 8, 85}, {0, 8, 21}, {16, 8, 258}, {19, 7, 43}, {0, 8, 117}, {0, 8, 53}, {0, 9, 203}, {17, 7, 13}, {0, 8, 101}, {0, 8, 37}, {0, 9, 171}, {0, 8, 5}, {0, 8, 133}, {0, 8, 69}, {0, 9, 235}, {16, 7, 8}, {0, 8, 93}, {0, 8, 29}, {0, 9, 155}, {20, 7, 83}, {0, 8, 125}, {0, 8, 61}, {0, 9, 219}, {18, 7, 23}, {0, 8, 109}, {0, 8, 45}, {0, 9, 187}, {0, 8, 13}, {0, 8, 141}, {0, 8, 77}, {0, 9, 251}, {16, 7, 3}, {0, 8, 83}, {0, 8, 19}, {21, 8, 195}, {19, 7, 35}, {0, 8, 115}, {0, 8, 51}, {0, 9, 199}, {17, 7, 11}, {0, 8, 99}, {0, 8, 35}, {0, 9, 167}, {0, 8, 3}, {0, 8, 131}, {0, 8, 67}, {0, 9, 231}, {16, 7, 7}, {0, 8, 91}, {0, 8, 27}, {0, 9, 151}, {20, 7, 67}, {0, 8, 123}, {0, 8, 59}, {0, 9, 215}, {18, 7, 19}, {0, 8, 107}, {0, 8, 43}, {0, 9, 183}, {0, 8, 11}, {0, 8, 139}, {0, 8, 75}, {0, 9, 247}, {16, 7, 5}, {0, 8, 87}, {0, 8, 23}, {64, 8, 0}, {19, 7, 51}, {0, 8, 119}, {0, 8, 55}, {0, 9, 207}, {17, 7, 15}, {0, 8, 103}, {0, 8, 39}, {0, 9, 175}, {0, 8, 7}, {0, 8, 135}, {0, 8, 71}, {0, 9, 239}, {16, 7, 9}, {0, 8, 95}, {0, 8, 31}, {0, 9, 159}, {20, 7, 99}, {0, 8, 127}, {0, 8, 63}, {0, 9, 223}, {18, 7, 27}, {0, 8, 111}, {0, 8, 47}, {0, 9, 191}, {0, 8, 15}, {0, 8, 143}, {0, 8, 79}, {0, 9, 255}}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "distfix",
                        "type": "const code [32]",
                        "definition": [
                            "static const code distfix[32] = {{16, 5, 1}, {23, 5, 257}, {19, 5, 17}, {27, 5, 4097}, {17, 5, 5}, {25, 5, 1025}, {21, 5, 65}, {29, 5, 16385}, {16, 5, 3}, {24, 5, 513}, {20, 5, 33}, {28, 5, 8193}, {18, 5, 9}, {26, 5, 2049}, {22, 5, 129}, {64, 5, 0}, {16, 5, 2}, {23, 5, 385}, {19, 5, 25}, {27, 5, 6145}, {17, 5, 7}, {25, 5, 1537}, {21, 5, 97}, {29, 5, 24577}, {16, 5, 4}, {24, 5, 769}, {20, 5, 49}, {28, 5, 12289}, {18, 5, 13}, {26, 5, 3073}, {22, 5, 193}, {64, 5, 0}}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_inflateBack_1",
            "header": "",
            "params": [
                "z_streamp * const strm_ref",
                "unsigned int * const next_idx_ref",
                "unsigned int * const put_idx_ref",
                "unsigned * const have_ref",
                "unsigned * const left_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "unsigned * const copy_ref",
                "unsigned int * const from_idx_ref",
                "code * const here_ref",
                "code * const last_ref",
                "unsigned * const len_ref",
                "int * const ret_ref",
                "void * const in_desc",
                "void * const out_desc",
                "struct inflate_state * const state",
                "const unsigned char * const next",
                "unsigned char * const put",
                "unsigned char * const from",
                "static const unsigned short order[19]"
            ],
            "definition": "void helper_inflateBack_1(z_streamp * const strm_ref, unsigned int * const next_idx_ref, unsigned int * const put_idx_ref, unsigned * const have_ref, unsigned * const left_ref, unsigned long * const hold_ref, unsigned * const bits_ref, unsigned * const copy_ref, unsigned int * const from_idx_ref, code * const here_ref, code * const last_ref, unsigned * const len_ref, int * const ret_ref, void * const in_desc, void * const out_desc, struct inflate_state * const state, const unsigned char * const next, unsigned char * const put, unsigned char * const from, static const unsigned short order[19])\n{\n  z_streamp strm = *strm_ref;\n  unsigned int next_idx = *next_idx_ref;\n  unsigned int put_idx = *put_idx_ref;\n  unsigned have = *have_ref;\n  unsigned left = *left_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  unsigned copy = *copy_ref;\n  unsigned int from_idx = *from_idx_ref;\n  code here = *here_ref;\n  code last = *last_ref;\n  unsigned len = *len_ref;\n  int ret = *ret_ref;\n  switch (state->mode)\n  {\n    case TYPE:\n    {\n      helper_helper_inflateBack_1_1(&strm, &next_idx, &have, &hold, &bits, &ret, in_desc, state, next);\n    }\n\n    case STORED:\n    {\n      helper_helper_inflateBack_1_2(&strm, &next_idx, &put_idx, &have, &left, &hold, &bits, &copy, &ret, in_desc, out_desc, state, next, put);\n    }\n\n    case TABLE:\n    {\n      helper_helper_inflateBack_1_3(&strm, &next_idx, &have, &hold, &bits, &copy, &here, &len, &ret, in_desc, state, next, order);\n    }\n\n    case LEN:\n    {\n      helper_helper_inflateBack_1_4(&strm, &next_idx, &put_idx, &have, &left, &hold, &bits, &copy, &from_idx, &here, &last, &ret, in_desc, out_desc, state, next, put, from);\n    }\n\n    case DONE:\n    {\n      ret = 1;\n      goto inf_leave;\n    }\n\n    case BAD:\n    {\n      ret = -3;\n      goto inf_leave;\n    }\n\n    default:\n    {\n      ret = -2;\n      goto inf_leave;\n    }\n\n  }\n\n  *strm_ref = strm;\n  *next_idx_ref = next_idx;\n  *put_idx_ref = put_idx;\n  *have_ref = have;\n  *left_ref = left;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *copy_ref = copy;\n  *from_idx_ref = from_idx;\n  *here_ref = here;\n  *last_ref = last;\n  *len_ref = len;\n  *ret_ref = ret;\n}\n\n",
            "calle": [
                "helper_helper_inflateBack_1_1",
                "helper_helper_inflateBack_1_2",
                "helper_helper_inflateBack_1_3",
                "helper_helper_inflateBack_1_4"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm_ref",
                        "type": "z_streamp * const",
                        "definition": [
                            "z_streamp * const strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const put_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const left_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const copy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const from_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here_ref",
                        "type": "code * const",
                        "definition": [
                            "code * const here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last_ref",
                        "type": "code * const",
                        "definition": [
                            "code * const last_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_desc",
                        "type": "void * const",
                        "definition": [
                            "void * const in_desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out_desc",
                        "type": "void * const",
                        "definition": [
                            "void * const out_desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const put"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const from"
                        ]
                    },
                    {
                        "path": null,
                        "name": "order",
                        "type": "const unsigned short [19]",
                        "definition": [
                            "static const unsigned short order[19]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = *strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int put_idx = *put_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left",
                        "type": "unsigned",
                        "definition": [
                            "unsigned left = *left_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy",
                        "type": "unsigned",
                        "definition": [
                            "unsigned copy = *copy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int from_idx = *from_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here",
                        "type": "code",
                        "definition": [
                            "code here = *here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last",
                        "type": "code",
                        "definition": [
                            "code last = *last_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned",
                        "definition": [
                            "unsigned len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = *ret_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_inflateBack_1_1",
            "header": "",
            "params": [
                "z_streamp * const strm_ref",
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "int * const ret_ref",
                "void * const in_desc",
                "struct inflate_state * const state",
                "const unsigned char * const next"
            ],
            "definition": "void helper_helper_inflateBack_1_1(z_streamp * const strm_ref, unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, int * const ret_ref, void * const in_desc, struct inflate_state * const state, const unsigned char * const next)\n{\n  z_streamp strm = *strm_ref;\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  int ret = *ret_ref;\n  if (state->last)\n  {\n    do\n    {\n      hold >>= bits & 7;\n      bits -= bits & 7;\n    }\n    while (0);\n    state->mode = DONE;\n    break;\n  }\n  do\n  {\n    helper_helper_helper_inflateBack_1_1_1(&next_idx, &have, &hold, &bits, &ret, in_desc, next);\n  }\n  while (0);\n  state->last = ((unsigned) hold) & ((1U << 1) - 1);\n  do\n  {\n    hold >>= 1;\n    bits -= (unsigned) 1;\n  }\n  while (0);\n  switch (((unsigned) hold) & ((1U << 2) - 1))\n  {\n    case 0:\n    {\n      ;\n      state->mode = STORED;\n      break;\n    }\n\n    case 1:\n    {\n      fixedtables(state);\n      ;\n      state->mode = LEN;\n      break;\n    }\n\n    case 2:\n    {\n      ;\n      state->mode = TABLE;\n      break;\n    }\n\n    case 3:\n    {\n      strm->msg = (char *) \"invalid block type\";\n      state->mode = BAD;\n    }\n\n  }\n\n  do\n  {\n    hold >>= 2;\n    bits -= (unsigned) 2;\n  }\n  while (0);\n  break;\n  *strm_ref = strm;\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *ret_ref = ret;\n}\n\n",
            "calle": [
                "fixedtables",
                "helper_helper_helper_inflateBack_1_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm_ref",
                        "type": "z_streamp * const",
                        "definition": [
                            "z_streamp * const strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_desc",
                        "type": "void * const",
                        "definition": [
                            "void * const in_desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = *strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = *ret_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_inflateBack_1_2",
            "header": "",
            "params": [
                "z_streamp * const strm_ref",
                "unsigned int * const next_idx_ref",
                "unsigned int * const put_idx_ref",
                "unsigned * const have_ref",
                "unsigned * const left_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "unsigned * const copy_ref",
                "int * const ret_ref",
                "void * const in_desc",
                "void * const out_desc",
                "struct inflate_state * const state",
                "const unsigned char * const next",
                "unsigned char * const put"
            ],
            "definition": "void helper_helper_inflateBack_1_2(z_streamp * const strm_ref, unsigned int * const next_idx_ref, unsigned int * const put_idx_ref, unsigned * const have_ref, unsigned * const left_ref, unsigned long * const hold_ref, unsigned * const bits_ref, unsigned * const copy_ref, int * const ret_ref, void * const in_desc, void * const out_desc, struct inflate_state * const state, const unsigned char * const next, unsigned char * const put)\n{\n  z_streamp strm = *strm_ref;\n  unsigned int next_idx = *next_idx_ref;\n  unsigned int put_idx = *put_idx_ref;\n  unsigned have = *have_ref;\n  unsigned left = *left_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  unsigned copy = *copy_ref;\n  int ret = *ret_ref;\n  do\n  {\n    hold >>= bits & 7;\n    bits -= bits & 7;\n  }\n  while (0);\n  do\n  {\n    helper_helper_helper_inflateBack_1_2_1(&next_idx, &have, &hold, &bits, &ret, in_desc, next);\n  }\n  while (0);\n  if ((hold & 0xffff) != ((hold >> 16) ^ 0xffff))\n  {\n    strm->msg = (char *) \"invalid stored block lengths\";\n    state->mode = BAD;\n    break;\n  }\n  state->length = ((unsigned) hold) & 0xffff;\n  ;\n  do\n  {\n    hold = 0;\n    bits = 0;\n  }\n  while (0);\n  while (state->length != 0)\n  {\n    helper_helper_helper_inflateBack_1_2_2(&next_idx, &put_idx, &have, &left, &copy, &ret, in_desc, out_desc, state, next, put);\n  }\n\n  ;\n  state->mode = TYPE;\n  break;\n  *strm_ref = strm;\n  *next_idx_ref = next_idx;\n  *put_idx_ref = put_idx;\n  *have_ref = have;\n  *left_ref = left;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *copy_ref = copy;\n  *ret_ref = ret;\n}\n\n",
            "calle": [
                "helper_helper_helper_inflateBack_1_2_1",
                "helper_helper_helper_inflateBack_1_2_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm_ref",
                        "type": "z_streamp * const",
                        "definition": [
                            "z_streamp * const strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const put_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const left_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const copy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_desc",
                        "type": "void * const",
                        "definition": [
                            "void * const in_desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out_desc",
                        "type": "void * const",
                        "definition": [
                            "void * const out_desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const put"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = *strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int put_idx = *put_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left",
                        "type": "unsigned",
                        "definition": [
                            "unsigned left = *left_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy",
                        "type": "unsigned",
                        "definition": [
                            "unsigned copy = *copy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = *ret_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_inflateBack_1_3",
            "header": "",
            "params": [
                "z_streamp * const strm_ref",
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "unsigned * const copy_ref",
                "code * const here_ref",
                "unsigned * const len_ref",
                "int * const ret_ref",
                "void * const in_desc",
                "struct inflate_state * const state",
                "const unsigned char * const next",
                "static const unsigned short order[19]"
            ],
            "definition": "void helper_helper_inflateBack_1_3(z_streamp * const strm_ref, unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, unsigned * const copy_ref, code * const here_ref, unsigned * const len_ref, int * const ret_ref, void * const in_desc, struct inflate_state * const state, const unsigned char * const next, static const unsigned short order[19])\n{\n  z_streamp strm = *strm_ref;\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  unsigned copy = *copy_ref;\n  code here = *here_ref;\n  unsigned len = *len_ref;\n  int ret = *ret_ref;\n  do\n  {\n    helper_helper_helper_inflateBack_1_3_1(&next_idx, &have, &hold, &bits, &ret, in_desc, next);\n  }\n  while (0);\n  state->nlen = (((unsigned) hold) & ((1U << 5) - 1)) + 257;\n  do\n  {\n    hold >>= 5;\n    bits -= (unsigned) 5;\n  }\n  while (0);\n  state->ndist = (((unsigned) hold) & ((1U << 5) - 1)) + 1;\n  do\n  {\n    hold >>= 5;\n    bits -= (unsigned) 5;\n  }\n  while (0);\n  state->ncode = (((unsigned) hold) & ((1U << 4) - 1)) + 4;\n  do\n  {\n    hold >>= 4;\n    bits -= (unsigned) 4;\n  }\n  while (0);\n  if ((state->nlen > 286) || (state->ndist > 30))\n  {\n    strm->msg = (char *) \"too many length or distance symbols\";\n    state->mode = BAD;\n    break;\n  }\n  ;\n  state->have = 0;\n  while (state->have < state->ncode)\n  {\n    helper_helper_helper_inflateBack_1_3_2(&next_idx, &have, &hold, &bits, &ret, in_desc, state, next, order);\n  }\n\n  while (state->have < 19)\n  {\n    state->lens[order[state->have++]] = 0;\n  }\n\n  state->next = state->codes;\n  state->lencode = (const code *) state->next;\n  state->lenbits = 7;\n  ret = inflate_table(CODES, state->lens, 19, &state->next, &state->lenbits, state->work);\n  if (ret)\n  {\n    strm->msg = (char *) \"invalid code lengths set\";\n    state->mode = BAD;\n    break;\n  }\n  ;\n  state->have = 0;\n  while (state->have < (state->nlen + state->ndist))\n  {\n    helper_helper_helper_inflateBack_1_3_3(&strm, &next_idx, &have, &hold, &bits, &copy, &here, &len, &ret, in_desc, state, next);\n  }\n\n  if (state->mode == BAD)\n  {\n    break;\n  }\n  if (state->lens[256] == 0)\n  {\n    strm->msg = (char *) \"invalid code -- missing end-of-block\";\n    state->mode = BAD;\n    break;\n  }\n  state->next = state->codes;\n  state->lencode = (const code *) state->next;\n  state->lenbits = 9;\n  ret = inflate_table(LENS, state->lens, state->nlen, &state->next, &state->lenbits, state->work);\n  if (ret)\n  {\n    strm->msg = (char *) \"invalid literal/lengths set\";\n    state->mode = BAD;\n    break;\n  }\n  state->distcode = (const code *) state->next;\n  state->distbits = 6;\n  ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist, &state->next, &state->distbits, state->work);\n  if (ret)\n  {\n    strm->msg = (char *) \"invalid distances set\";\n    state->mode = BAD;\n    break;\n  }\n  ;\n  state->mode = LEN;\n  *strm_ref = strm;\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *copy_ref = copy;\n  *here_ref = here;\n  *len_ref = len;\n  *ret_ref = ret;\n}\n\n",
            "calle": [
                "helper_helper_helper_inflateBack_1_3_1",
                "helper_helper_helper_inflateBack_1_3_2",
                "helper_helper_helper_inflateBack_1_3_3",
                "inflate_table"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm_ref",
                        "type": "z_streamp * const",
                        "definition": [
                            "z_streamp * const strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const copy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here_ref",
                        "type": "code * const",
                        "definition": [
                            "code * const here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_desc",
                        "type": "void * const",
                        "definition": [
                            "void * const in_desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "order",
                        "type": "const unsigned short [19]",
                        "definition": [
                            "static const unsigned short order[19]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = *strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy",
                        "type": "unsigned",
                        "definition": [
                            "unsigned copy = *copy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here",
                        "type": "code",
                        "definition": [
                            "code here = *here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned",
                        "definition": [
                            "unsigned len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = *ret_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_inflateBack_1_4",
            "header": "",
            "params": [
                "z_streamp * const strm_ref",
                "unsigned int * const next_idx_ref",
                "unsigned int * const put_idx_ref",
                "unsigned * const have_ref",
                "unsigned * const left_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "unsigned * const copy_ref",
                "unsigned int * const from_idx_ref",
                "code * const here_ref",
                "code * const last_ref",
                "int * const ret_ref",
                "void * const in_desc",
                "void * const out_desc",
                "struct inflate_state * const state",
                "const unsigned char * const next",
                "unsigned char * const put",
                "unsigned char * const from"
            ],
            "definition": "void helper_helper_inflateBack_1_4(z_streamp * const strm_ref, unsigned int * const next_idx_ref, unsigned int * const put_idx_ref, unsigned * const have_ref, unsigned * const left_ref, unsigned long * const hold_ref, unsigned * const bits_ref, unsigned * const copy_ref, unsigned int * const from_idx_ref, code * const here_ref, code * const last_ref, int * const ret_ref, void * const in_desc, void * const out_desc, struct inflate_state * const state, const unsigned char * const next, unsigned char * const put, unsigned char * const from)\n{\n  z_streamp strm = *strm_ref;\n  unsigned int next_idx = *next_idx_ref;\n  unsigned int put_idx = *put_idx_ref;\n  unsigned have = *have_ref;\n  unsigned left = *left_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  unsigned copy = *copy_ref;\n  unsigned int from_idx = *from_idx_ref;\n  code here = *here_ref;\n  code last = *last_ref;\n  int ret = *ret_ref;\n  if ((have >= 6) && (left >= 258))\n  {\n    helper_helper_helper_inflateBack_1_4_4(&strm, &next_idx, &put_idx, &have, &left, &hold, &bits, state, next, put);\n  }\n  for (;;)\n  {\n    helper_helper_helper_inflateBack_1_4_2(&next_idx, &have, &hold, &bits, &here, &ret, in_desc, state, next);\n  }\n\n  if (here.op && ((here.op & 0xf0) == 0))\n  {\n    helper_helper_helper_inflateBack_1_4_7(&next_idx, &have, &hold, &bits, &here, &last, &ret, in_desc, state, next);\n  }\n  do\n  {\n    hold >>= here.bits;\n    bits -= (unsigned) here.bits;\n  }\n  while (0);\n  state->length = (unsigned) here.val;\n  if (here.op == 0)\n  {\n    helper_helper_helper_inflateBack_1_4_1(&put_idx, &left, &ret, out_desc, state, put);\n  }\n  if (here.op & 32)\n  {\n    ;\n    state->mode = TYPE;\n    break;\n  }\n  if (here.op & 64)\n  {\n    strm->msg = (char *) \"invalid literal/length code\";\n    state->mode = BAD;\n    break;\n  }\n  state->extra = ((unsigned) here.op) & 15;\n  if (state->extra != 0)\n  {\n    helper_helper_helper_inflateBack_1_4_5(&next_idx, &have, &hold, &bits, &ret, in_desc, state, next);\n  }\n  ;\n  for (;;)\n  {\n    helper_helper_helper_inflateBack_1_4_3(&next_idx, &have, &hold, &bits, &here, &ret, in_desc, state, next);\n  }\n\n  if ((here.op & 0xf0) == 0)\n  {\n    helper_helper_helper_inflateBack_1_4_8(&next_idx, &have, &hold, &bits, &here, &last, &ret, in_desc, state, next);\n  }\n  do\n  {\n    hold >>= here.bits;\n    bits -= (unsigned) here.bits;\n  }\n  while (0);\n  if (here.op & 64)\n  {\n    strm->msg = (char *) \"invalid distance code\";\n    state->mode = BAD;\n    break;\n  }\n  state->offset = (unsigned) here.val;\n  state->extra = ((unsigned) here.op) & 15;\n  if (state->extra != 0)\n  {\n    helper_helper_helper_inflateBack_1_4_6(&next_idx, &have, &hold, &bits, &ret, in_desc, state, next);\n  }\n  if (state->offset > (state->wsize - ((state->whave < state->wsize) ? (left) : (0))))\n  {\n    strm->msg = (char *) \"invalid distance too far back\";\n    state->mode = BAD;\n    break;\n  }\n  ;\n  do\n  {\n    helper_helper_helper_inflateBack_1_4_9(&put_idx, &left, &copy, &from_idx, &ret, out_desc, state, put, from);\n  }\n  while (state->length != 0);\n  break;\n  *strm_ref = strm;\n  *next_idx_ref = next_idx;\n  *put_idx_ref = put_idx;\n  *have_ref = have;\n  *left_ref = left;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *copy_ref = copy;\n  *from_idx_ref = from_idx;\n  *here_ref = here;\n  *last_ref = last;\n  *ret_ref = ret;\n}\n\n",
            "calle": [
                "helper_helper_helper_inflateBack_1_4_1",
                "helper_helper_helper_inflateBack_1_4_2",
                "helper_helper_helper_inflateBack_1_4_3",
                "helper_helper_helper_inflateBack_1_4_4",
                "helper_helper_helper_inflateBack_1_4_5",
                "helper_helper_helper_inflateBack_1_4_6",
                "helper_helper_helper_inflateBack_1_4_7",
                "helper_helper_helper_inflateBack_1_4_8",
                "helper_helper_helper_inflateBack_1_4_9"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm_ref",
                        "type": "z_streamp * const",
                        "definition": [
                            "z_streamp * const strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const put_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const left_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const copy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const from_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here_ref",
                        "type": "code * const",
                        "definition": [
                            "code * const here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last_ref",
                        "type": "code * const",
                        "definition": [
                            "code * const last_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_desc",
                        "type": "void * const",
                        "definition": [
                            "void * const in_desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out_desc",
                        "type": "void * const",
                        "definition": [
                            "void * const out_desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const put"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const from"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = *strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int put_idx = *put_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left",
                        "type": "unsigned",
                        "definition": [
                            "unsigned left = *left_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy",
                        "type": "unsigned",
                        "definition": [
                            "unsigned copy = *copy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int from_idx = *from_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here",
                        "type": "code",
                        "definition": [
                            "code here = *here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last",
                        "type": "code",
                        "definition": [
                            "code last = *last_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = *ret_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_inflateBack_1_1_1",
            "header": "",
            "params": [
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "int * const ret_ref",
                "void * const in_desc",
                "const unsigned char * const next"
            ],
            "definition": "void helper_helper_helper_inflateBack_1_1_1(unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, int * const ret_ref, void * const in_desc, const unsigned char * const next)\n{\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  int ret = *ret_ref;\n  while (bits < ((unsigned) 3))\n  {\n    do\n    {\n      do\n      {\n        if (have == 0)\n        {\n          have = in(in_desc, &(&next[next_idx]));\n          if (have == 0)\n          {\n            next_idx = 0;\n            ret = -5;\n            goto inf_leave;\n          }\n        }\n      }\n      while (0);\n      have -= 1;\n      hold += ((unsigned long) next[next_idx]) << bits;\n      next_idx += 1;\n      bits += 8;\n    }\n    while (0);\n  }\n\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *ret_ref = ret;\n}\n\n",
            "calle": [
                "in"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_desc",
                        "type": "void * const",
                        "definition": [
                            "void * const in_desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = *ret_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_inflateBack_1_2_1",
            "header": "",
            "params": [
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "int * const ret_ref",
                "void * const in_desc",
                "const unsigned char * const next"
            ],
            "definition": "void helper_helper_helper_inflateBack_1_2_1(unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, int * const ret_ref, void * const in_desc, const unsigned char * const next)\n{\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  int ret = *ret_ref;\n  while (bits < ((unsigned) 32))\n  {\n    do\n    {\n      do\n      {\n        if (have == 0)\n        {\n          have = in(in_desc, &(&next[next_idx]));\n          if (have == 0)\n          {\n            next_idx = 0;\n            ret = -5;\n            goto inf_leave;\n          }\n        }\n      }\n      while (0);\n      have -= 1;\n      hold += ((unsigned long) next[next_idx]) << bits;\n      next_idx += 1;\n      bits += 8;\n    }\n    while (0);\n  }\n\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *ret_ref = ret;\n}\n\n",
            "calle": [
                "in"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_desc",
                        "type": "void * const",
                        "definition": [
                            "void * const in_desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = *ret_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_inflateBack_1_2_2",
            "header": "",
            "params": [
                "unsigned int * const next_idx_ref",
                "unsigned int * const put_idx_ref",
                "unsigned * const have_ref",
                "unsigned * const left_ref",
                "unsigned * const copy_ref",
                "int * const ret_ref",
                "void * const in_desc",
                "void * const out_desc",
                "struct inflate_state * const state",
                "const unsigned char * const next",
                "unsigned char * const put"
            ],
            "definition": "void helper_helper_helper_inflateBack_1_2_2(unsigned int * const next_idx_ref, unsigned int * const put_idx_ref, unsigned * const have_ref, unsigned * const left_ref, unsigned * const copy_ref, int * const ret_ref, void * const in_desc, void * const out_desc, struct inflate_state * const state, const unsigned char * const next, unsigned char * const put)\n{\n  unsigned int next_idx = *next_idx_ref;\n  unsigned int put_idx = *put_idx_ref;\n  unsigned have = *have_ref;\n  unsigned left = *left_ref;\n  unsigned copy = *copy_ref;\n  int ret = *ret_ref;\n  copy = state->length;\n  do\n  {\n    if (have == 0)\n    {\n      have = in(in_desc, &(&next[next_idx]));\n      if (have == 0)\n      {\n        next_idx = 0;\n        ret = -5;\n        goto inf_leave;\n      }\n    }\n  }\n  while (0);\n  do\n  {\n    if (left == 0)\n    {\n      put_idx = state->window;\n      left = state->wsize;\n      state->whave = left;\n      if (out(out_desc, put, left))\n      {\n        ret = -5;\n        goto inf_leave;\n      }\n    }\n  }\n  while (0);\n  if (copy > have)\n  {\n    copy = have;\n  }\n  if (copy > left)\n  {\n    copy = left;\n  }\n  memcpy(put, next, copy);\n  have -= copy;\n  next_idx += copy;\n  left -= copy;\n  put_idx += copy;\n  state->length -= copy;\n  *next_idx_ref = next_idx;\n  *put_idx_ref = put_idx;\n  *have_ref = have;\n  *left_ref = left;\n  *copy_ref = copy;\n  *ret_ref = ret;\n}\n\n",
            "calle": [
                "in",
                "memcpy",
                "out"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const put_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const left_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const copy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_desc",
                        "type": "void * const",
                        "definition": [
                            "void * const in_desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out_desc",
                        "type": "void * const",
                        "definition": [
                            "void * const out_desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const put"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int put_idx = *put_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left",
                        "type": "unsigned",
                        "definition": [
                            "unsigned left = *left_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy",
                        "type": "unsigned",
                        "definition": [
                            "unsigned copy = *copy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = *ret_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_inflateBack_1_3_1",
            "header": "",
            "params": [
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "int * const ret_ref",
                "void * const in_desc",
                "const unsigned char * const next"
            ],
            "definition": "void helper_helper_helper_inflateBack_1_3_1(unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, int * const ret_ref, void * const in_desc, const unsigned char * const next)\n{\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  int ret = *ret_ref;\n  while (bits < ((unsigned) 14))\n  {\n    do\n    {\n      do\n      {\n        if (have == 0)\n        {\n          have = in(in_desc, &(&next[next_idx]));\n          if (have == 0)\n          {\n            next_idx = 0;\n            ret = -5;\n            goto inf_leave;\n          }\n        }\n      }\n      while (0);\n      have -= 1;\n      hold += ((unsigned long) next[next_idx]) << bits;\n      next_idx += 1;\n      bits += 8;\n    }\n    while (0);\n  }\n\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *ret_ref = ret;\n}\n\n",
            "calle": [
                "in"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_desc",
                        "type": "void * const",
                        "definition": [
                            "void * const in_desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = *ret_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_inflateBack_1_3_2",
            "header": "",
            "params": [
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "int * const ret_ref",
                "void * const in_desc",
                "struct inflate_state * const state",
                "const unsigned char * const next",
                "static const unsigned short order[19]"
            ],
            "definition": "void helper_helper_helper_inflateBack_1_3_2(unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, int * const ret_ref, void * const in_desc, struct inflate_state * const state, const unsigned char * const next, static const unsigned short order[19])\n{\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  int ret = *ret_ref;\n  do\n  {\n    while (bits < ((unsigned) 3))\n    {\n      do\n      {\n        do\n        {\n          if (have == 0)\n          {\n            have = in(in_desc, &(&next[next_idx]));\n            if (have == 0)\n            {\n              next_idx = 0;\n              ret = -5;\n              goto inf_leave;\n            }\n          }\n        }\n        while (0);\n        have -= 1;\n        hold += ((unsigned long) next[next_idx]) << bits;\n        next_idx += 1;\n        bits += 8;\n      }\n      while (0);\n    }\n\n  }\n  while (0);\n  state->lens[order[state->have++]] = (unsigned short) (((unsigned) hold) & ((1U << 3) - 1));\n  do\n  {\n    hold >>= 3;\n    bits -= (unsigned) 3;\n  }\n  while (0);\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *ret_ref = ret;\n}\n\n",
            "calle": [
                "in"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_desc",
                        "type": "void * const",
                        "definition": [
                            "void * const in_desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "order",
                        "type": "const unsigned short [19]",
                        "definition": [
                            "static const unsigned short order[19]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = *ret_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_inflateBack_1_3_3",
            "header": "",
            "params": [
                "z_streamp * const strm_ref",
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "unsigned * const copy_ref",
                "code * const here_ref",
                "unsigned * const len_ref",
                "int * const ret_ref",
                "void * const in_desc",
                "struct inflate_state * const state",
                "const unsigned char * const next"
            ],
            "definition": "void helper_helper_helper_inflateBack_1_3_3(z_streamp * const strm_ref, unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, unsigned * const copy_ref, code * const here_ref, unsigned * const len_ref, int * const ret_ref, void * const in_desc, struct inflate_state * const state, const unsigned char * const next)\n{\n  z_streamp strm = *strm_ref;\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  unsigned copy = *copy_ref;\n  code here = *here_ref;\n  unsigned len = *len_ref;\n  int ret = *ret_ref;\n  for (;;)\n  {\n    helper_helper_helper_helper_inflateBack_1_3_3_1(&next_idx, &have, &hold, &bits, &here, &ret, in_desc, state, next);\n  }\n\n  if (here.val < 16)\n  {\n    do\n    {\n      hold >>= here.bits;\n      bits -= (unsigned) here.bits;\n    }\n    while (0);\n    state->lens[state->have++] = here.val;\n  }\n  else\n  {\n    helper_helper_helper_helper_inflateBack_1_3_3_2(&strm, &next_idx, &have, &hold, &bits, &copy, &len, &ret, in_desc, state, next, here);\n  }\n  *strm_ref = strm;\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *copy_ref = copy;\n  *here_ref = here;\n  *len_ref = len;\n  *ret_ref = ret;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_inflateBack_1_3_3_1",
                "helper_helper_helper_helper_inflateBack_1_3_3_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm_ref",
                        "type": "z_streamp * const",
                        "definition": [
                            "z_streamp * const strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const copy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here_ref",
                        "type": "code * const",
                        "definition": [
                            "code * const here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_desc",
                        "type": "void * const",
                        "definition": [
                            "void * const in_desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = *strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy",
                        "type": "unsigned",
                        "definition": [
                            "unsigned copy = *copy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here",
                        "type": "code",
                        "definition": [
                            "code here = *here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned",
                        "definition": [
                            "unsigned len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = *ret_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_inflateBack_1_4_1",
            "header": "",
            "params": [
                "unsigned int * const put_idx_ref",
                "unsigned * const left_ref",
                "int * const ret_ref",
                "void * const out_desc",
                "struct inflate_state * const state",
                "unsigned char * const put"
            ],
            "definition": "void helper_helper_helper_inflateBack_1_4_1(unsigned int * const put_idx_ref, unsigned * const left_ref, int * const ret_ref, void * const out_desc, struct inflate_state * const state, unsigned char * const put)\n{\n  unsigned int put_idx = *put_idx_ref;\n  unsigned left = *left_ref;\n  int ret = *ret_ref;\n  ;\n  do\n  {\n    if (left == 0)\n    {\n      put_idx = state->window;\n      left = state->wsize;\n      state->whave = left;\n      if (out(out_desc, put, left))\n      {\n        ret = -5;\n        goto inf_leave;\n      }\n    }\n  }\n  while (0);\n  put[put_idx] = (unsigned char) state->length;\n  put_idx += 1;\n  left -= 1;\n  state->mode = LEN;\n  break;\n  *put_idx_ref = put_idx;\n  *left_ref = left;\n  *ret_ref = ret;\n}\n\n",
            "calle": [
                "out"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "put_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const put_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const left_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out_desc",
                        "type": "void * const",
                        "definition": [
                            "void * const out_desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const put"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int put_idx = *put_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left",
                        "type": "unsigned",
                        "definition": [
                            "unsigned left = *left_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = *ret_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_inflateBack_1_4_2",
            "header": "",
            "params": [
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "code * const here_ref",
                "int * const ret_ref",
                "void * const in_desc",
                "struct inflate_state * const state",
                "const unsigned char * const next"
            ],
            "definition": "void helper_helper_helper_inflateBack_1_4_2(unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, code * const here_ref, int * const ret_ref, void * const in_desc, struct inflate_state * const state, const unsigned char * const next)\n{\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  code here = *here_ref;\n  int ret = *ret_ref;\n  here = state->lencode[((unsigned) hold) & ((1U << state->lenbits) - 1)];\n  if (((unsigned) here.bits) <= bits)\n  {\n    break;\n  }\n  do\n  {\n    do\n    {\n      if (have == 0)\n      {\n        have = in(in_desc, &(&next[next_idx]));\n        if (have == 0)\n        {\n          next_idx = 0;\n          ret = -5;\n          goto inf_leave;\n        }\n      }\n    }\n    while (0);\n    have -= 1;\n    hold += ((unsigned long) next[next_idx]) << bits;\n    next_idx += 1;\n    bits += 8;\n  }\n  while (0);\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *here_ref = here;\n  *ret_ref = ret;\n}\n\n",
            "calle": [
                "in"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here_ref",
                        "type": "code * const",
                        "definition": [
                            "code * const here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_desc",
                        "type": "void * const",
                        "definition": [
                            "void * const in_desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here",
                        "type": "code",
                        "definition": [
                            "code here = *here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = *ret_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_inflateBack_1_4_3",
            "header": "",
            "params": [
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "code * const here_ref",
                "int * const ret_ref",
                "void * const in_desc",
                "struct inflate_state * const state",
                "const unsigned char * const next"
            ],
            "definition": "void helper_helper_helper_inflateBack_1_4_3(unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, code * const here_ref, int * const ret_ref, void * const in_desc, struct inflate_state * const state, const unsigned char * const next)\n{\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  code here = *here_ref;\n  int ret = *ret_ref;\n  here = state->distcode[((unsigned) hold) & ((1U << state->distbits) - 1)];\n  if (((unsigned) here.bits) <= bits)\n  {\n    break;\n  }\n  do\n  {\n    do\n    {\n      if (have == 0)\n      {\n        have = in(in_desc, &(&next[next_idx]));\n        if (have == 0)\n        {\n          next_idx = 0;\n          ret = -5;\n          goto inf_leave;\n        }\n      }\n    }\n    while (0);\n    have -= 1;\n    hold += ((unsigned long) next[next_idx]) << bits;\n    next_idx += 1;\n    bits += 8;\n  }\n  while (0);\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *here_ref = here;\n  *ret_ref = ret;\n}\n\n",
            "calle": [
                "in"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here_ref",
                        "type": "code * const",
                        "definition": [
                            "code * const here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_desc",
                        "type": "void * const",
                        "definition": [
                            "void * const in_desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here",
                        "type": "code",
                        "definition": [
                            "code here = *here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = *ret_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_inflateBack_1_4_4",
            "header": "",
            "params": [
                "z_streamp * const strm_ref",
                "unsigned int * const next_idx_ref",
                "unsigned int * const put_idx_ref",
                "unsigned * const have_ref",
                "unsigned * const left_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "struct inflate_state * const state",
                "const unsigned char * const next",
                "unsigned char * const put"
            ],
            "definition": "void helper_helper_helper_inflateBack_1_4_4(z_streamp * const strm_ref, unsigned int * const next_idx_ref, unsigned int * const put_idx_ref, unsigned * const have_ref, unsigned * const left_ref, unsigned long * const hold_ref, unsigned * const bits_ref, struct inflate_state * const state, const unsigned char * const next, unsigned char * const put)\n{\n  z_streamp strm = *strm_ref;\n  unsigned int next_idx = *next_idx_ref;\n  unsigned int put_idx = *put_idx_ref;\n  unsigned have = *have_ref;\n  unsigned left = *left_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  do\n  {\n    strm->next_out = &put[put_idx];\n    strm->avail_out = left;\n    strm->next_in = &next[next_idx];\n    strm->avail_in = have;\n    state->hold = hold;\n    state->bits = bits;\n  }\n  while (0);\n  if (state->whave < state->wsize)\n  {\n    state->whave = state->wsize - left;\n  }\n  inflate_fast(strm, state->wsize);\n  do\n  {\n    put_idx = strm->next_out;\n    left = strm->avail_out;\n    next_idx = strm->next_in;\n    have = strm->avail_in;\n    hold = state->hold;\n    bits = state->bits;\n  }\n  while (0);\n  break;\n  *strm_ref = strm;\n  *next_idx_ref = next_idx;\n  *put_idx_ref = put_idx;\n  *have_ref = have;\n  *left_ref = left;\n  *hold_ref = hold;\n  *bits_ref = bits;\n}\n\n",
            "calle": [
                "inflate_fast"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm_ref",
                        "type": "z_streamp * const",
                        "definition": [
                            "z_streamp * const strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const put_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const left_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const put"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = *strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int put_idx = *put_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left",
                        "type": "unsigned",
                        "definition": [
                            "unsigned left = *left_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_inflateBack_1_4_5",
            "header": "",
            "params": [
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "int * const ret_ref",
                "void * const in_desc",
                "struct inflate_state * const state",
                "const unsigned char * const next"
            ],
            "definition": "void helper_helper_helper_inflateBack_1_4_5(unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, int * const ret_ref, void * const in_desc, struct inflate_state * const state, const unsigned char * const next)\n{\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  int ret = *ret_ref;\n  do\n  {\n    while (bits < ((unsigned) state->extra))\n    {\n      do\n      {\n        do\n        {\n          if (have == 0)\n          {\n            have = in(in_desc, &(&next[next_idx]));\n            if (have == 0)\n            {\n              next_idx = 0;\n              ret = -5;\n              goto inf_leave;\n            }\n          }\n        }\n        while (0);\n        have -= 1;\n        hold += ((unsigned long) next[next_idx]) << bits;\n        next_idx += 1;\n        bits += 8;\n      }\n      while (0);\n    }\n\n  }\n  while (0);\n  state->length += ((unsigned) hold) & ((1U << state->extra) - 1);\n  do\n  {\n    hold >>= state->extra;\n    bits -= (unsigned) state->extra;\n  }\n  while (0);\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *ret_ref = ret;\n}\n\n",
            "calle": [
                "in"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_desc",
                        "type": "void * const",
                        "definition": [
                            "void * const in_desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = *ret_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_inflateBack_1_4_6",
            "header": "",
            "params": [
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "int * const ret_ref",
                "void * const in_desc",
                "struct inflate_state * const state",
                "const unsigned char * const next"
            ],
            "definition": "void helper_helper_helper_inflateBack_1_4_6(unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, int * const ret_ref, void * const in_desc, struct inflate_state * const state, const unsigned char * const next)\n{\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  int ret = *ret_ref;\n  do\n  {\n    while (bits < ((unsigned) state->extra))\n    {\n      do\n      {\n        do\n        {\n          if (have == 0)\n          {\n            have = in(in_desc, &(&next[next_idx]));\n            if (have == 0)\n            {\n              next_idx = 0;\n              ret = -5;\n              goto inf_leave;\n            }\n          }\n        }\n        while (0);\n        have -= 1;\n        hold += ((unsigned long) next[next_idx]) << bits;\n        next_idx += 1;\n        bits += 8;\n      }\n      while (0);\n    }\n\n  }\n  while (0);\n  state->offset += ((unsigned) hold) & ((1U << state->extra) - 1);\n  do\n  {\n    hold >>= state->extra;\n    bits -= (unsigned) state->extra;\n  }\n  while (0);\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *ret_ref = ret;\n}\n\n",
            "calle": [
                "in"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_desc",
                        "type": "void * const",
                        "definition": [
                            "void * const in_desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = *ret_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_inflateBack_1_4_7",
            "header": "",
            "params": [
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "code * const here_ref",
                "code * const last_ref",
                "int * const ret_ref",
                "void * const in_desc",
                "struct inflate_state * const state",
                "const unsigned char * const next"
            ],
            "definition": "void helper_helper_helper_inflateBack_1_4_7(unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, code * const here_ref, code * const last_ref, int * const ret_ref, void * const in_desc, struct inflate_state * const state, const unsigned char * const next)\n{\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  code here = *here_ref;\n  code last = *last_ref;\n  int ret = *ret_ref;\n  last = here;\n  for (;;)\n  {\n    helper_helper_helper_helper_inflateBack_1_4_7_1(&next_idx, &have, &hold, &bits, &here, &ret, in_desc, state, next, last);\n  }\n\n  do\n  {\n    hold >>= last.bits;\n    bits -= (unsigned) last.bits;\n  }\n  while (0);\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *here_ref = here;\n  *last_ref = last;\n  *ret_ref = ret;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_inflateBack_1_4_7_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here_ref",
                        "type": "code * const",
                        "definition": [
                            "code * const here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last_ref",
                        "type": "code * const",
                        "definition": [
                            "code * const last_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_desc",
                        "type": "void * const",
                        "definition": [
                            "void * const in_desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here",
                        "type": "code",
                        "definition": [
                            "code here = *here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last",
                        "type": "code",
                        "definition": [
                            "code last = *last_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = *ret_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_inflateBack_1_4_8",
            "header": "",
            "params": [
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "code * const here_ref",
                "code * const last_ref",
                "int * const ret_ref",
                "void * const in_desc",
                "struct inflate_state * const state",
                "const unsigned char * const next"
            ],
            "definition": "void helper_helper_helper_inflateBack_1_4_8(unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, code * const here_ref, code * const last_ref, int * const ret_ref, void * const in_desc, struct inflate_state * const state, const unsigned char * const next)\n{\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  code here = *here_ref;\n  code last = *last_ref;\n  int ret = *ret_ref;\n  last = here;\n  for (;;)\n  {\n    helper_helper_helper_helper_inflateBack_1_4_8_1(&next_idx, &have, &hold, &bits, &here, &ret, in_desc, state, next, last);\n  }\n\n  do\n  {\n    hold >>= last.bits;\n    bits -= (unsigned) last.bits;\n  }\n  while (0);\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *here_ref = here;\n  *last_ref = last;\n  *ret_ref = ret;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_inflateBack_1_4_8_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here_ref",
                        "type": "code * const",
                        "definition": [
                            "code * const here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last_ref",
                        "type": "code * const",
                        "definition": [
                            "code * const last_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_desc",
                        "type": "void * const",
                        "definition": [
                            "void * const in_desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here",
                        "type": "code",
                        "definition": [
                            "code here = *here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last",
                        "type": "code",
                        "definition": [
                            "code last = *last_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = *ret_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_inflateBack_1_4_9",
            "header": "",
            "params": [
                "unsigned int * const put_idx_ref",
                "unsigned * const left_ref",
                "unsigned * const copy_ref",
                "unsigned int * const from_idx_ref",
                "int * const ret_ref",
                "void * const out_desc",
                "struct inflate_state * const state",
                "unsigned char * const put",
                "unsigned char * const from"
            ],
            "definition": "void helper_helper_helper_inflateBack_1_4_9(unsigned int * const put_idx_ref, unsigned * const left_ref, unsigned * const copy_ref, unsigned int * const from_idx_ref, int * const ret_ref, void * const out_desc, struct inflate_state * const state, unsigned char * const put, unsigned char * const from)\n{\n  unsigned int put_idx = *put_idx_ref;\n  unsigned left = *left_ref;\n  unsigned copy = *copy_ref;\n  unsigned int from_idx = *from_idx_ref;\n  int ret = *ret_ref;\n  do\n  {\n    if (left == 0)\n    {\n      put_idx = state->window;\n      left = state->wsize;\n      state->whave = left;\n      if (out(out_desc, put, left))\n      {\n        ret = -5;\n        goto inf_leave;\n      }\n    }\n  }\n  while (0);\n  copy = state->wsize - state->offset;\n  if (copy < left)\n  {\n    from_idx = (&put[put_idx]) + copy;\n    copy = left - copy;\n  }\n  else\n  {\n    from_idx = (&put[put_idx]) - state->offset;\n    copy = left;\n  }\n  if (copy > state->length)\n  {\n    copy = state->length;\n  }\n  state->length -= copy;\n  left -= copy;\n  do\n  {\n    put[put_idx] = from[from_idx];\n    from_idx += 1;\n    put_idx += 1;\n  }\n  while (--copy);\n  *put_idx_ref = put_idx;\n  *left_ref = left;\n  *copy_ref = copy;\n  *from_idx_ref = from_idx;\n  *ret_ref = ret;\n}\n\n",
            "calle": [
                "out"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "put_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const put_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const left_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const copy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const from_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out_desc",
                        "type": "void * const",
                        "definition": [
                            "void * const out_desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const put"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const from"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int put_idx = *put_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left",
                        "type": "unsigned",
                        "definition": [
                            "unsigned left = *left_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy",
                        "type": "unsigned",
                        "definition": [
                            "unsigned copy = *copy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int from_idx = *from_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = *ret_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_inflateBack_1_3_3_1",
            "header": "",
            "params": [
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "code * const here_ref",
                "int * const ret_ref",
                "void * const in_desc",
                "struct inflate_state * const state",
                "const unsigned char * const next"
            ],
            "definition": "void helper_helper_helper_helper_inflateBack_1_3_3_1(unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, code * const here_ref, int * const ret_ref, void * const in_desc, struct inflate_state * const state, const unsigned char * const next)\n{\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  code here = *here_ref;\n  int ret = *ret_ref;\n  here = state->lencode[((unsigned) hold) & ((1U << state->lenbits) - 1)];\n  if (((unsigned) here.bits) <= bits)\n  {\n    break;\n  }\n  do\n  {\n    do\n    {\n      if (have == 0)\n      {\n        have = in(in_desc, &(&next[next_idx]));\n        if (have == 0)\n        {\n          next_idx = 0;\n          ret = -5;\n          goto inf_leave;\n        }\n      }\n    }\n    while (0);\n    have -= 1;\n    hold += ((unsigned long) next[next_idx]) << bits;\n    next_idx += 1;\n    bits += 8;\n  }\n  while (0);\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *here_ref = here;\n  *ret_ref = ret;\n}\n\n",
            "calle": [
                "in"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here_ref",
                        "type": "code * const",
                        "definition": [
                            "code * const here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_desc",
                        "type": "void * const",
                        "definition": [
                            "void * const in_desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here",
                        "type": "code",
                        "definition": [
                            "code here = *here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = *ret_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_inflateBack_1_3_3_2",
            "header": "",
            "params": [
                "z_streamp * const strm_ref",
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "unsigned * const copy_ref",
                "unsigned * const len_ref",
                "int * const ret_ref",
                "void * const in_desc",
                "struct inflate_state * const state",
                "const unsigned char * const next",
                "code here"
            ],
            "definition": "void helper_helper_helper_helper_inflateBack_1_3_3_2(z_streamp * const strm_ref, unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, unsigned * const copy_ref, unsigned * const len_ref, int * const ret_ref, void * const in_desc, struct inflate_state * const state, const unsigned char * const next, code here)\n{\n  z_streamp strm = *strm_ref;\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  unsigned copy = *copy_ref;\n  unsigned len = *len_ref;\n  int ret = *ret_ref;\n  if (here.val == 16)\n  {\n    do\n    {\n      while (bits < ((unsigned) (here.bits + 2)))\n      {\n        do\n        {\n          do\n          {\n            if (have == 0)\n            {\n              have = in(in_desc, &(&next[next_idx]));\n              if (have == 0)\n              {\n                next_idx = 0;\n                ret = -5;\n                goto inf_leave;\n              }\n            }\n          }\n          while (0);\n          have -= 1;\n          hold += ((unsigned long) next[next_idx]) << bits;\n          next_idx += 1;\n          bits += 8;\n        }\n        while (0);\n      }\n\n    }\n    while (0);\n    do\n    {\n      hold >>= here.bits;\n      bits -= (unsigned) here.bits;\n    }\n    while (0);\n    if (state->have == 0)\n    {\n      strm->msg = (char *) \"invalid bit length repeat\";\n      state->mode = BAD;\n      break;\n    }\n    len = (unsigned) state->lens[state->have - 1];\n    copy = 3 + (((unsigned) hold) & ((1U << 2) - 1));\n    do\n    {\n      hold >>= 2;\n      bits -= (unsigned) 2;\n    }\n    while (0);\n  }\n  else\n    if (here.val == 17)\n  {\n    do\n    {\n      while (bits < ((unsigned) (here.bits + 3)))\n      {\n        do\n        {\n          do\n          {\n            if (have == 0)\n            {\n              have = in(in_desc, &(&next[next_idx]));\n              if (have == 0)\n              {\n                next_idx = 0;\n                ret = -5;\n                goto inf_leave;\n              }\n            }\n          }\n          while (0);\n          have -= 1;\n          hold += ((unsigned long) next[next_idx]) << bits;\n          next_idx += 1;\n          bits += 8;\n        }\n        while (0);\n      }\n\n    }\n    while (0);\n    do\n    {\n      hold >>= here.bits;\n      bits -= (unsigned) here.bits;\n    }\n    while (0);\n    len = 0;\n    copy = 3 + (((unsigned) hold) & ((1U << 3) - 1));\n    do\n    {\n      hold >>= 3;\n      bits -= (unsigned) 3;\n    }\n    while (0);\n  }\n  else\n  {\n    do\n    {\n      while (bits < ((unsigned) (here.bits + 7)))\n      {\n        do\n        {\n          do\n          {\n            if (have == 0)\n            {\n              have = in(in_desc, &(&next[next_idx]));\n              if (have == 0)\n              {\n                next_idx = 0;\n                ret = -5;\n                goto inf_leave;\n              }\n            }\n          }\n          while (0);\n          have -= 1;\n          hold += ((unsigned long) next[next_idx]) << bits;\n          next_idx += 1;\n          bits += 8;\n        }\n        while (0);\n      }\n\n    }\n    while (0);\n    do\n    {\n      hold >>= here.bits;\n      bits -= (unsigned) here.bits;\n    }\n    while (0);\n    len = 0;\n    copy = 11 + (((unsigned) hold) & ((1U << 7) - 1));\n    do\n    {\n      hold >>= 7;\n      bits -= (unsigned) 7;\n    }\n    while (0);\n  }\n  if ((state->have + copy) > (state->nlen + state->ndist))\n  {\n    strm->msg = (char *) \"invalid bit length repeat\";\n    state->mode = BAD;\n    break;\n  }\n  while (copy--)\n  {\n    state->lens[state->have++] = (unsigned short) len;\n  }\n\n  *strm_ref = strm;\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *copy_ref = copy;\n  *len_ref = len;\n  *ret_ref = ret;\n}\n\n",
            "calle": [
                "in"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm_ref",
                        "type": "z_streamp * const",
                        "definition": [
                            "z_streamp * const strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const copy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_desc",
                        "type": "void * const",
                        "definition": [
                            "void * const in_desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here",
                        "type": "code",
                        "definition": [
                            "code here"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = *strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy",
                        "type": "unsigned",
                        "definition": [
                            "unsigned copy = *copy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned",
                        "definition": [
                            "unsigned len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = *ret_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_inflateBack_1_4_7_1",
            "header": "",
            "params": [
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "code * const here_ref",
                "int * const ret_ref",
                "void * const in_desc",
                "struct inflate_state * const state",
                "const unsigned char * const next",
                "code last"
            ],
            "definition": "void helper_helper_helper_helper_inflateBack_1_4_7_1(unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, code * const here_ref, int * const ret_ref, void * const in_desc, struct inflate_state * const state, const unsigned char * const next, code last)\n{\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  code here = *here_ref;\n  int ret = *ret_ref;\n  here = state->lencode[last.val + ((((unsigned) hold) & ((1U << (last.bits + last.op)) - 1)) >> last.bits)];\n  if (((unsigned) (last.bits + here.bits)) <= bits)\n  {\n    break;\n  }\n  do\n  {\n    do\n    {\n      if (have == 0)\n      {\n        have = in(in_desc, &(&next[next_idx]));\n        if (have == 0)\n        {\n          next_idx = 0;\n          ret = -5;\n          goto inf_leave;\n        }\n      }\n    }\n    while (0);\n    have -= 1;\n    hold += ((unsigned long) next[next_idx]) << bits;\n    next_idx += 1;\n    bits += 8;\n  }\n  while (0);\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *here_ref = here;\n  *ret_ref = ret;\n}\n\n",
            "calle": [
                "in"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here_ref",
                        "type": "code * const",
                        "definition": [
                            "code * const here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_desc",
                        "type": "void * const",
                        "definition": [
                            "void * const in_desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last",
                        "type": "code",
                        "definition": [
                            "code last"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here",
                        "type": "code",
                        "definition": [
                            "code here = *here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = *ret_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_inflateBack_1_4_8_1",
            "header": "",
            "params": [
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "code * const here_ref",
                "int * const ret_ref",
                "void * const in_desc",
                "struct inflate_state * const state",
                "const unsigned char * const next",
                "code last"
            ],
            "definition": "void helper_helper_helper_helper_inflateBack_1_4_8_1(unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, code * const here_ref, int * const ret_ref, void * const in_desc, struct inflate_state * const state, const unsigned char * const next, code last)\n{\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  code here = *here_ref;\n  int ret = *ret_ref;\n  here = state->distcode[last.val + ((((unsigned) hold) & ((1U << (last.bits + last.op)) - 1)) >> last.bits)];\n  if (((unsigned) (last.bits + here.bits)) <= bits)\n  {\n    break;\n  }\n  do\n  {\n    do\n    {\n      if (have == 0)\n      {\n        have = in(in_desc, &(&next[next_idx]));\n        if (have == 0)\n        {\n          next_idx = 0;\n          ret = -5;\n          goto inf_leave;\n        }\n      }\n    }\n    while (0);\n    have -= 1;\n    hold += ((unsigned long) next[next_idx]) << bits;\n    next_idx += 1;\n    bits += 8;\n  }\n  while (0);\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *here_ref = here;\n  *ret_ref = ret;\n}\n\n",
            "calle": [
                "in"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here_ref",
                        "type": "code * const",
                        "definition": [
                            "code * const here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_desc",
                        "type": "void * const",
                        "definition": [
                            "void * const in_desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last",
                        "type": "code",
                        "definition": [
                            "code last"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here",
                        "type": "code",
                        "definition": [
                            "code here = *here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = *ret_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "inflate_fast",
            "header": "void inflate_fast(z_streamp strm, unsigned start)",
            "params": [
                "z_streamp strm",
                "unsigned start"
            ],
            "definition": "void inflate_fast(z_streamp strm, unsigned start)\n{\n  struct inflate_state *state;\n  unsigned int state_idx = 0;\n  const unsigned char *in;\n  unsigned int in_idx = 0;\n  const unsigned char *last;\n  unsigned int last_idx = 0;\n  unsigned char *out;\n  unsigned int out_idx = 0;\n  unsigned char *beg;\n  unsigned int beg_idx = 0;\n  unsigned char *end;\n  unsigned int end_idx = 0;\n  unsigned wsize;\n  unsigned whave;\n  unsigned wnext;\n  unsigned char *window;\n  unsigned int window_idx = 0;\n  unsigned long hold;\n  unsigned bits;\n  const code *lcode;\n  unsigned int lcode_idx = 0;\n  const code *dcode;\n  unsigned int dcode_idx = 0;\n  unsigned lmask;\n  unsigned dmask;\n  const code *here;\n  unsigned int here_idx = 0;\n  unsigned op;\n  unsigned len;\n  unsigned dist;\n  unsigned char *from;\n  unsigned int from_idx = 0;\n  state_idx = (struct inflate_state *) strm->state_idx;\n  in_idx = strm->next_in;\n  last_idx = (&in[in_idx]) + (strm->avail_in - 5);\n  out_idx = strm->next_out;\n  beg_idx = (&out[out_idx]) - (start - strm->avail_out);\n  end_idx = (&out[out_idx]) + (strm->avail_out - 257);\n  wsize = state->wsize;\n  whave = state->whave;\n  wnext = state->wnext;\n  window_idx = state->window_idx;\n  hold = state->hold;\n  bits = state->bits;\n  lcode_idx = state->lencode;\n  dcode_idx = state->distcode;\n  lmask = (1U << state->lenbits) - 1;\n  dmask = (1U << state->distbits) - 1;\n  do\n  {\n    helper_inflate_fast_1(&strm, &in_idx, &out_idx, &hold, &bits, &here_idx, &op, &len, &dist, &from_idx, state, in, out, beg, beg_idx, wsize, whave, wnext, window, window_idx, lcode, lcode_idx, dcode, dcode_idx, lmask, dmask, here, from);\n  }\n  while (((&in[in_idx]) < (&last[last_idx])) && ((&out[out_idx]) < (&end[end_idx])));\n  len = bits >> 3;\n  in_idx -= len;\n  bits -= len << 3;\n  hold &= (1U << bits) - 1;\n  strm->next_in = &in[in_idx];\n  strm->next_out = &out[out_idx];\n  strm->avail_in = (unsigned) (((&in[in_idx]) < (&last[last_idx])) ? (5 + ((&last[last_idx]) - (&in[in_idx]))) : (5 - ((&in[in_idx]) - (&last[last_idx]))));\n  strm->avail_out = (unsigned) (((&out[out_idx]) < (&end[end_idx])) ? (257 + ((&end[end_idx]) - (&out[out_idx]))) : (257 - ((&out[out_idx]) - (&end[end_idx]))));\n  state->hold = hold;\n  state->bits = bits;\n  return;\n}\n\n",
            "calle": [
                "helper_inflate_fast_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "unsigned",
                        "definition": [
                            "unsigned start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state *",
                        "definition": [
                            "struct inflate_state *state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int state_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int in_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *last"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int last_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int out_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "beg",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *beg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "beg_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int beg_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int end_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsize",
                        "type": "unsigned",
                        "definition": [
                            "unsigned wsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "whave",
                        "type": "unsigned",
                        "definition": [
                            "unsigned whave"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wnext",
                        "type": "unsigned",
                        "definition": [
                            "unsigned wnext"
                        ]
                    },
                    {
                        "path": null,
                        "name": "window",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *window"
                        ]
                    },
                    {
                        "path": null,
                        "name": "window_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int window_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lcode",
                        "type": "const code *",
                        "definition": [
                            "const code *lcode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lcode_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int lcode_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dcode",
                        "type": "const code *",
                        "definition": [
                            "const code *dcode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dcode_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dcode_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lmask",
                        "type": "unsigned",
                        "definition": [
                            "unsigned lmask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmask",
                        "type": "unsigned",
                        "definition": [
                            "unsigned dmask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here",
                        "type": "const code *",
                        "definition": [
                            "const code *here"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int here_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "op",
                        "type": "unsigned",
                        "definition": [
                            "unsigned op"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned",
                        "definition": [
                            "unsigned len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned",
                        "definition": [
                            "unsigned dist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *from"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int from_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_inflate_fast_1",
            "header": "",
            "params": [
                "z_streamp * const strm_ref",
                "unsigned int * const in_idx_ref",
                "unsigned int * const out_idx_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "unsigned int * const here_idx_ref",
                "unsigned * const op_ref",
                "unsigned * const len_ref",
                "unsigned * const dist_ref",
                "unsigned int * const from_idx_ref",
                "struct inflate_state * const state",
                "const unsigned char * const in",
                "unsigned char * const out",
                "unsigned char * const beg",
                "unsigned int beg_idx",
                "unsigned wsize",
                "unsigned whave",
                "unsigned wnext",
                "unsigned char * const window",
                "unsigned int window_idx",
                "const code * const lcode",
                "unsigned int lcode_idx",
                "const code * const dcode",
                "unsigned int dcode_idx",
                "unsigned lmask",
                "unsigned dmask",
                "const code * const here",
                "unsigned char * const from"
            ],
            "definition": "void helper_inflate_fast_1(z_streamp * const strm_ref, unsigned int * const in_idx_ref, unsigned int * const out_idx_ref, unsigned long * const hold_ref, unsigned * const bits_ref, unsigned int * const here_idx_ref, unsigned * const op_ref, unsigned * const len_ref, unsigned * const dist_ref, unsigned int * const from_idx_ref, struct inflate_state * const state, const unsigned char * const in, unsigned char * const out, unsigned char * const beg, unsigned int beg_idx, unsigned wsize, unsigned whave, unsigned wnext, unsigned char * const window, unsigned int window_idx, const code * const lcode, unsigned int lcode_idx, const code * const dcode, unsigned int dcode_idx, unsigned lmask, unsigned dmask, const code * const here, unsigned char * const from)\n{\n  z_streamp strm = *strm_ref;\n  unsigned int in_idx = *in_idx_ref;\n  unsigned int out_idx = *out_idx_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  unsigned int here_idx = *here_idx_ref;\n  unsigned op = *op_ref;\n  unsigned len = *len_ref;\n  unsigned dist = *dist_ref;\n  unsigned int from_idx = *from_idx_ref;\n  if (bits < 15)\n  {\n    hold += ((unsigned long) in[in_idx]) << bits;\n    in_idx += 1;\n    bits += 8;\n    hold += ((unsigned long) in[in_idx]) << bits;\n    in_idx += 1;\n    bits += 8;\n  }\n  here_idx = (&lcode[lcode_idx]) + (hold & lmask);\n  dolen:\n  op = (unsigned) here->bits;\n\n  hold >>= op;\n  bits -= op;\n  op = (unsigned) here->op;\n  if (op == 0)\n  {\n    ;\n    out[out_idx] = (unsigned char) here->val;\n    out_idx += 1;\n  }\n  else\n    if (op & 16)\n  {\n    helper_helper_inflate_fast_1_1(&strm, &in_idx, &out_idx, &hold, &bits, &here_idx, &op, &len, &dist, &from_idx, state, in, out, beg, beg_idx, wsize, whave, wnext, window, window_idx, dcode, dcode_idx, dmask, here, from);\n  }\n  else\n    if ((op & 64) == 0)\n  {\n    here_idx = ((&lcode[lcode_idx]) + here_idx->val) + (hold & ((1U << op) - 1));\n    goto dolen;\n  }\n  else\n    if (op & 32)\n  {\n    ;\n    state->mode = TYPE;\n    break;\n  }\n  else\n  {\n    strm->msg = (char *) \"invalid literal/length code\";\n    state->mode = BAD;\n    break;\n  }\n  *strm_ref = strm;\n  *in_idx_ref = in_idx;\n  *out_idx_ref = out_idx;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *here_idx_ref = here_idx;\n  *op_ref = op;\n  *len_ref = len;\n  *dist_ref = dist;\n  *from_idx_ref = from_idx;\n}\n\n",
            "calle": [
                "helper_helper_inflate_fast_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm_ref",
                        "type": "z_streamp * const",
                        "definition": [
                            "z_streamp * const strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const in_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const out_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const here_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "op_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const op_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const dist_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const from_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "beg",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const beg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "beg_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int beg_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsize",
                        "type": "unsigned",
                        "definition": [
                            "unsigned wsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "whave",
                        "type": "unsigned",
                        "definition": [
                            "unsigned whave"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wnext",
                        "type": "unsigned",
                        "definition": [
                            "unsigned wnext"
                        ]
                    },
                    {
                        "path": null,
                        "name": "window",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const window"
                        ]
                    },
                    {
                        "path": null,
                        "name": "window_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int window_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lcode",
                        "type": "const code * const",
                        "definition": [
                            "const code * const lcode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lcode_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int lcode_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dcode",
                        "type": "const code * const",
                        "definition": [
                            "const code * const dcode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dcode_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dcode_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lmask",
                        "type": "unsigned",
                        "definition": [
                            "unsigned lmask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmask",
                        "type": "unsigned",
                        "definition": [
                            "unsigned dmask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here",
                        "type": "const code * const",
                        "definition": [
                            "const code * const here"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const from"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = *strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int in_idx = *in_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int out_idx = *out_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int here_idx = *here_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "op",
                        "type": "unsigned",
                        "definition": [
                            "unsigned op = *op_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned",
                        "definition": [
                            "unsigned len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned",
                        "definition": [
                            "unsigned dist = *dist_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int from_idx = *from_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_inflate_fast_1_1",
            "header": "",
            "params": [
                "z_streamp * const strm_ref",
                "unsigned int * const in_idx_ref",
                "unsigned int * const out_idx_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "unsigned int * const here_idx_ref",
                "unsigned * const op_ref",
                "unsigned * const len_ref",
                "unsigned * const dist_ref",
                "unsigned int * const from_idx_ref",
                "struct inflate_state * const state",
                "const unsigned char * const in",
                "unsigned char * const out",
                "unsigned char * const beg",
                "unsigned int beg_idx",
                "unsigned wsize",
                "unsigned whave",
                "unsigned wnext",
                "unsigned char * const window",
                "unsigned int window_idx",
                "const code * const dcode",
                "unsigned int dcode_idx",
                "unsigned dmask",
                "const code * const here",
                "unsigned char * const from"
            ],
            "definition": "void helper_helper_inflate_fast_1_1(z_streamp * const strm_ref, unsigned int * const in_idx_ref, unsigned int * const out_idx_ref, unsigned long * const hold_ref, unsigned * const bits_ref, unsigned int * const here_idx_ref, unsigned * const op_ref, unsigned * const len_ref, unsigned * const dist_ref, unsigned int * const from_idx_ref, struct inflate_state * const state, const unsigned char * const in, unsigned char * const out, unsigned char * const beg, unsigned int beg_idx, unsigned wsize, unsigned whave, unsigned wnext, unsigned char * const window, unsigned int window_idx, const code * const dcode, unsigned int dcode_idx, unsigned dmask, const code * const here, unsigned char * const from)\n{\n  z_streamp strm = *strm_ref;\n  unsigned int in_idx = *in_idx_ref;\n  unsigned int out_idx = *out_idx_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  unsigned int here_idx = *here_idx_ref;\n  unsigned op = *op_ref;\n  unsigned len = *len_ref;\n  unsigned dist = *dist_ref;\n  unsigned int from_idx = *from_idx_ref;\n  len = (unsigned) here->val;\n  op &= 15;\n  if (op)\n  {\n    if (bits < op)\n    {\n      hold += ((unsigned long) in[in_idx]) << bits;\n      in_idx += 1;\n      bits += 8;\n    }\n    len += ((unsigned) hold) & ((1U << op) - 1);\n    hold >>= op;\n    bits -= op;\n  }\n  ;\n  if (bits < 15)\n  {\n    hold += ((unsigned long) in[in_idx]) << bits;\n    in_idx += 1;\n    bits += 8;\n    hold += ((unsigned long) in[in_idx]) << bits;\n    in_idx += 1;\n    bits += 8;\n  }\n  here_idx = (&dcode[dcode_idx]) + (hold & dmask);\n  dodist:\n  op = (unsigned) here->bits;\n\n  hold >>= op;\n  bits -= op;\n  op = (unsigned) here->op;\n  if (op & 16)\n  {\n    helper_helper_helper_inflate_fast_1_1_1(&strm, &in_idx, &out_idx, &hold, &bits, &op, &len, &dist, &from_idx, state, in, out, beg, beg_idx, wsize, whave, wnext, window, window_idx, here, from);\n  }\n  else\n    if ((op & 64) == 0)\n  {\n    here_idx = ((&dcode[dcode_idx]) + here_idx->val) + (hold & ((1U << op) - 1));\n    goto dodist;\n  }\n  else\n  {\n    strm->msg = (char *) \"invalid distance code\";\n    state->mode = BAD;\n    break;\n  }\n  *strm_ref = strm;\n  *in_idx_ref = in_idx;\n  *out_idx_ref = out_idx;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *here_idx_ref = here_idx;\n  *op_ref = op;\n  *len_ref = len;\n  *dist_ref = dist;\n  *from_idx_ref = from_idx;\n}\n\n",
            "calle": [
                "helper_helper_helper_inflate_fast_1_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm_ref",
                        "type": "z_streamp * const",
                        "definition": [
                            "z_streamp * const strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const in_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const out_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const here_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "op_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const op_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const dist_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const from_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "beg",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const beg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "beg_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int beg_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsize",
                        "type": "unsigned",
                        "definition": [
                            "unsigned wsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "whave",
                        "type": "unsigned",
                        "definition": [
                            "unsigned whave"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wnext",
                        "type": "unsigned",
                        "definition": [
                            "unsigned wnext"
                        ]
                    },
                    {
                        "path": null,
                        "name": "window",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const window"
                        ]
                    },
                    {
                        "path": null,
                        "name": "window_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int window_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dcode",
                        "type": "const code * const",
                        "definition": [
                            "const code * const dcode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dcode_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dcode_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dmask",
                        "type": "unsigned",
                        "definition": [
                            "unsigned dmask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here",
                        "type": "const code * const",
                        "definition": [
                            "const code * const here"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const from"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = *strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int in_idx = *in_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int out_idx = *out_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int here_idx = *here_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "op",
                        "type": "unsigned",
                        "definition": [
                            "unsigned op = *op_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned",
                        "definition": [
                            "unsigned len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned",
                        "definition": [
                            "unsigned dist = *dist_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int from_idx = *from_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_inflate_fast_1_1_1",
            "header": "",
            "params": [
                "z_streamp * const strm_ref",
                "unsigned int * const in_idx_ref",
                "unsigned int * const out_idx_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "unsigned * const op_ref",
                "unsigned * const len_ref",
                "unsigned * const dist_ref",
                "unsigned int * const from_idx_ref",
                "struct inflate_state * const state",
                "const unsigned char * const in",
                "unsigned char * const out",
                "unsigned char * const beg",
                "unsigned int beg_idx",
                "unsigned wsize",
                "unsigned whave",
                "unsigned wnext",
                "unsigned char * const window",
                "unsigned int window_idx",
                "const code * const here",
                "unsigned char * const from"
            ],
            "definition": "void helper_helper_helper_inflate_fast_1_1_1(z_streamp * const strm_ref, unsigned int * const in_idx_ref, unsigned int * const out_idx_ref, unsigned long * const hold_ref, unsigned * const bits_ref, unsigned * const op_ref, unsigned * const len_ref, unsigned * const dist_ref, unsigned int * const from_idx_ref, struct inflate_state * const state, const unsigned char * const in, unsigned char * const out, unsigned char * const beg, unsigned int beg_idx, unsigned wsize, unsigned whave, unsigned wnext, unsigned char * const window, unsigned int window_idx, const code * const here, unsigned char * const from)\n{\n  z_streamp strm = *strm_ref;\n  unsigned int in_idx = *in_idx_ref;\n  unsigned int out_idx = *out_idx_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  unsigned op = *op_ref;\n  unsigned len = *len_ref;\n  unsigned dist = *dist_ref;\n  unsigned int from_idx = *from_idx_ref;\n  dist = (unsigned) here->val;\n  op &= 15;\n  if (bits < op)\n  {\n    hold += ((unsigned long) in[in_idx]) << bits;\n    in_idx += 1;\n    bits += 8;\n    if (bits < op)\n    {\n      hold += ((unsigned long) in[in_idx]) << bits;\n      in_idx += 1;\n      bits += 8;\n    }\n  }\n  dist += ((unsigned) hold) & ((1U << op) - 1);\n  hold >>= op;\n  bits -= op;\n  ;\n  op = (unsigned) ((&out[out_idx]) - (&beg[beg_idx]));\n  if (dist > op)\n  {\n    helper_helper_helper_helper_inflate_fast_1_1_1_2(&strm, &out_idx, &op, &len, &from_idx, state, out, wsize, whave, wnext, window, window_idx, from, dist);\n  }\n  else\n  {\n    helper_helper_helper_helper_inflate_fast_1_1_1_1(&out_idx, &len, &from_idx, out, from, dist);\n  }\n  *strm_ref = strm;\n  *in_idx_ref = in_idx;\n  *out_idx_ref = out_idx;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *op_ref = op;\n  *len_ref = len;\n  *dist_ref = dist;\n  *from_idx_ref = from_idx;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_inflate_fast_1_1_1_1",
                "helper_helper_helper_helper_inflate_fast_1_1_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm_ref",
                        "type": "z_streamp * const",
                        "definition": [
                            "z_streamp * const strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const in_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const out_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "op_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const op_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const dist_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const from_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "beg",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const beg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "beg_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int beg_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsize",
                        "type": "unsigned",
                        "definition": [
                            "unsigned wsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "whave",
                        "type": "unsigned",
                        "definition": [
                            "unsigned whave"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wnext",
                        "type": "unsigned",
                        "definition": [
                            "unsigned wnext"
                        ]
                    },
                    {
                        "path": null,
                        "name": "window",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const window"
                        ]
                    },
                    {
                        "path": null,
                        "name": "window_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int window_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here",
                        "type": "const code * const",
                        "definition": [
                            "const code * const here"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const from"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = *strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int in_idx = *in_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int out_idx = *out_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "op",
                        "type": "unsigned",
                        "definition": [
                            "unsigned op = *op_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned",
                        "definition": [
                            "unsigned len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned",
                        "definition": [
                            "unsigned dist = *dist_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int from_idx = *from_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_inflate_fast_1_1_1_1",
            "header": "",
            "params": [
                "unsigned int * const out_idx_ref",
                "unsigned * const len_ref",
                "unsigned int * const from_idx_ref",
                "unsigned char * const out",
                "unsigned char * const from",
                "unsigned dist"
            ],
            "definition": "void helper_helper_helper_helper_inflate_fast_1_1_1_1(unsigned int * const out_idx_ref, unsigned * const len_ref, unsigned int * const from_idx_ref, unsigned char * const out, unsigned char * const from, unsigned dist)\n{\n  unsigned int out_idx = *out_idx_ref;\n  unsigned len = *len_ref;\n  unsigned int from_idx = *from_idx_ref;\n  from_idx = (&out[out_idx]) - dist;\n  do\n  {\n    out[out_idx] = from[from_idx];\n    from_idx += 1;\n    out_idx += 1;\n    out[out_idx] = from[from_idx];\n    from_idx += 1;\n    out_idx += 1;\n    out[out_idx] = from[from_idx];\n    from_idx += 1;\n    out_idx += 1;\n    len -= 3;\n  }\n  while (len > 2);\n  if (len)\n  {\n    out[out_idx] = from[from_idx];\n    from_idx += 1;\n    out_idx += 1;\n    if (len > 1)\n    {\n      out[out_idx] = from[from_idx];\n      from_idx += 1;\n      out_idx += 1;\n    }\n  }\n  *out_idx_ref = out_idx;\n  *len_ref = len;\n  *from_idx_ref = from_idx;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "out_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const out_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const from_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const from"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned",
                        "definition": [
                            "unsigned dist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int out_idx = *out_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned",
                        "definition": [
                            "unsigned len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int from_idx = *from_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_inflate_fast_1_1_1_2",
            "header": "",
            "params": [
                "z_streamp * const strm_ref",
                "unsigned int * const out_idx_ref",
                "unsigned * const op_ref",
                "unsigned * const len_ref",
                "unsigned int * const from_idx_ref",
                "struct inflate_state * const state",
                "unsigned char * const out",
                "unsigned wsize",
                "unsigned whave",
                "unsigned wnext",
                "unsigned char * const window",
                "unsigned int window_idx",
                "unsigned char * const from",
                "unsigned dist"
            ],
            "definition": "void helper_helper_helper_helper_inflate_fast_1_1_1_2(z_streamp * const strm_ref, unsigned int * const out_idx_ref, unsigned * const op_ref, unsigned * const len_ref, unsigned int * const from_idx_ref, struct inflate_state * const state, unsigned char * const out, unsigned wsize, unsigned whave, unsigned wnext, unsigned char * const window, unsigned int window_idx, unsigned char * const from, unsigned dist)\n{\n  z_streamp strm = *strm_ref;\n  unsigned int out_idx = *out_idx_ref;\n  unsigned op = *op_ref;\n  unsigned len = *len_ref;\n  unsigned int from_idx = *from_idx_ref;\n  op = dist - op;\n  if (op > whave)\n  {\n    if (state->sane)\n    {\n      strm->msg = (char *) \"invalid distance too far back\";\n      state->mode = BAD;\n      break;\n    }\n  }\n  from_idx = &window[window_idx];\n  if (wnext == 0)\n  {\n    from_idx += wsize - op;\n    if (op < len)\n    {\n      len -= op;\n      do\n      {\n        out[out_idx] = from[from_idx];\n        from_idx += 1;\n        out_idx += 1;\n      }\n      while (--op);\n      from_idx = (&out[out_idx]) - dist;\n    }\n  }\n  else\n    if (wnext < op)\n  {\n    from_idx += (wsize + wnext) - op;\n    op -= wnext;\n    if (op < len)\n    {\n      len -= op;\n      do\n      {\n        out[out_idx] = from[from_idx];\n        from_idx += 1;\n        out_idx += 1;\n      }\n      while (--op);\n      from_idx = &window[window_idx];\n      if (wnext < len)\n      {\n        op = wnext;\n        len -= op;\n        do\n        {\n          out[out_idx] = from[from_idx];\n          from_idx += 1;\n          out_idx += 1;\n        }\n        while (--op);\n        from_idx = (&out[out_idx]) - dist;\n      }\n    }\n  }\n  else\n  {\n    from_idx += wnext - op;\n    if (op < len)\n    {\n      len -= op;\n      do\n      {\n        out[out_idx] = from[from_idx];\n        from_idx += 1;\n        out_idx += 1;\n      }\n      while (--op);\n      from_idx = (&out[out_idx]) - dist;\n    }\n  }\n  while (len > 2)\n  {\n    out[out_idx] = from[from_idx];\n    from_idx += 1;\n    out_idx += 1;\n    out[out_idx] = from[from_idx];\n    from_idx += 1;\n    out_idx += 1;\n    out[out_idx] = from[from_idx];\n    from_idx += 1;\n    out_idx += 1;\n    len -= 3;\n  }\n\n  if (len)\n  {\n    out[out_idx] = from[from_idx];\n    from_idx += 1;\n    out_idx += 1;\n    if (len > 1)\n    {\n      out[out_idx] = from[from_idx];\n      from_idx += 1;\n      out_idx += 1;\n    }\n  }\n  *strm_ref = strm;\n  *out_idx_ref = out_idx;\n  *op_ref = op;\n  *len_ref = len;\n  *from_idx_ref = from_idx;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm_ref",
                        "type": "z_streamp * const",
                        "definition": [
                            "z_streamp * const strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const out_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "op_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const op_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const from_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsize",
                        "type": "unsigned",
                        "definition": [
                            "unsigned wsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "whave",
                        "type": "unsigned",
                        "definition": [
                            "unsigned whave"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wnext",
                        "type": "unsigned",
                        "definition": [
                            "unsigned wnext"
                        ]
                    },
                    {
                        "path": null,
                        "name": "window",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const window"
                        ]
                    },
                    {
                        "path": null,
                        "name": "window_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int window_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const from"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned",
                        "definition": [
                            "unsigned dist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = *strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int out_idx = *out_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "op",
                        "type": "unsigned",
                        "definition": [
                            "unsigned op = *op_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned",
                        "definition": [
                            "unsigned len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int from_idx = *from_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "inflate",
            "header": "extern int inflate(z_streamp strm, int flush)",
            "params": [
                "z_streamp strm",
                "int flush"
            ],
            "definition": "int inflate(z_streamp strm, int flush)\n{\n  struct inflate_state *state;\n  unsigned int state_idx = 0;\n  const unsigned char *next;\n  unsigned int next_idx = 0;\n  unsigned char *put;\n  unsigned int put_idx = 0;\n  unsigned have;\n  unsigned left;\n  unsigned long hold;\n  unsigned bits;\n  unsigned in;\n  unsigned out;\n  unsigned copy;\n  unsigned char *from;\n  unsigned int from_idx = 0;\n  code here;\n  code last;\n  unsigned len;\n  int ret;\n  static const unsigned short order[19] = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};\n  if ((inflateStateCheck(strm) || (strm->next_out == 0)) || ((strm->next_in == 0) && (strm->avail_in != 0)))\n  {\n    return -2;\n  }\n  state_idx = (struct inflate_state *) strm->state_idx;\n  if (state->mode == TYPE)\n  {\n    state->mode = TYPEDO;\n  }\n  do\n  {\n    put_idx = strm->next_out;\n    left = strm->avail_out;\n    next_idx = strm->next_in;\n    have = strm->avail_in;\n    hold = state->hold;\n    bits = state->bits;\n  }\n  while (0);\n  in = have;\n  out = left;\n  ret = 0;\n  for (;;)\n  {\n    helper_inflate_1(&strm, &next_idx, &put_idx, &have, &left, &hold, &bits, &out, &copy, &from_idx, &here, &last, &len, &ret, flush, state, next, put, from, order);\n  }\n\n  inf_leave:\n  do\n  {\n    strm->next_out = &put[put_idx];\n    strm->avail_out = left;\n    strm->next_in = &next[next_idx];\n    strm->avail_in = have;\n    state->hold = hold;\n    state->bits = bits;\n  }\n  while (0);\n\n  if (state->wsize || (((out != strm->avail_out) && (state->mode < BAD)) && ((state->mode < CHECK) || (flush != 4))))\n  {\n    if (updatewindow(strm, strm->next_out, out - strm->avail_out))\n    {\n      state->mode = MEM;\n      return -4;\n    }\n  }\n  in -= strm->avail_in;\n  out -= strm->avail_out;\n  strm->total_in += in;\n  strm->total_out += out;\n  state->total += out;\n  if ((state->wrap & 4) && out)\n  {\n    strm->adler = (state->check = adler32(state->check, strm->next_out - out, out));\n  }\n  strm->data_type = ((((int) state->bits) + ((state->last) ? (64) : (0))) + ((state->mode == TYPE) ? (128) : (0))) + (((state->mode == LEN_) || (state->mode == COPY_)) ? (256) : (0));\n  if ((((in == 0) && (out == 0)) || (flush == 4)) && (ret == 0))\n  {\n    ret = -5;\n  }\n  return ret;\n}\n\n",
            "calle": [
                "adler32",
                "helper_inflate_1",
                "inflateStateCheck",
                "updatewindow"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flush",
                        "type": "int",
                        "definition": [
                            "int flush"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state *",
                        "definition": [
                            "struct inflate_state *state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int state_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *put"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int put_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left",
                        "type": "unsigned",
                        "definition": [
                            "unsigned left"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "unsigned",
                        "definition": [
                            "unsigned in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned",
                        "definition": [
                            "unsigned out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy",
                        "type": "unsigned",
                        "definition": [
                            "unsigned copy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *from"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int from_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here",
                        "type": "code",
                        "definition": [
                            "code here"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last",
                        "type": "code",
                        "definition": [
                            "code last"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned",
                        "definition": [
                            "unsigned len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret"
                        ]
                    },
                    {
                        "path": null,
                        "name": "order",
                        "type": "const unsigned short [19]",
                        "definition": [
                            "static const unsigned short order[19] = {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "inflateEnd",
            "header": "extern int inflateEnd(z_streamp strm)",
            "params": [
                "z_streamp strm"
            ],
            "definition": "int inflateEnd(z_streamp strm)\n{\n  struct inflate_state *state;\n  unsigned int state_idx = 0;\n  if (inflateStateCheck(strm))\n  {\n    return -2;\n  }\n  state_idx = (struct inflate_state *) strm->state_idx;\n  if (state->window != 0)\n  {\n    (*strm->zfree)(strm->opaque, (voidpf) state->window);\n  }\n  (*strm->zfree)(strm->opaque, (voidpf) strm->state);\n  strm->state = 0;\n  ;\n  return 0;\n}\n\n",
            "calle": [
                "*strm->zfree",
                "inflateStateCheck"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state *",
                        "definition": [
                            "struct inflate_state *state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int state_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "inflateSetDictionary",
            "header": "extern int inflateSetDictionary(z_streamp strm, const Bytef *dictionary, uInt dictLength)",
            "params": [
                "z_streamp strm",
                "const Bytef *dictionary",
                "uInt dictLength"
            ],
            "definition": "int inflateSetDictionary(z_streamp strm, const Bytef *dictionary, uInt dictLength)\n{\n  struct inflate_state *state;\n  unsigned int state_idx = 0;\n  unsigned long dictid;\n  int ret;\n  if (inflateStateCheck(strm))\n  {\n    return -2;\n  }\n  state_idx = (struct inflate_state *) strm->state_idx;\n  if ((state->wrap != 0) && (state->mode != DICT))\n  {\n    return -2;\n  }\n  if (state->mode == DICT)\n  {\n    dictid = adler32(0L, 0, 0);\n    dictid = adler32(dictid, dictionary, dictLength);\n    if (dictid != state->check)\n    {\n      return -3;\n    }\n  }\n  ret = updatewindow(strm, dictionary + dictLength, dictLength);\n  if (ret)\n  {\n    state->mode = MEM;\n    return -4;\n  }\n  state->havedict = 1;\n  ;\n  return 0;\n}\n\n",
            "calle": [
                "adler32",
                "inflateStateCheck",
                "updatewindow"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dictionary",
                        "type": "const Bytef *",
                        "definition": [
                            "const Bytef *dictionary"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dictLength",
                        "type": "uInt",
                        "definition": [
                            "uInt dictLength"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state *",
                        "definition": [
                            "struct inflate_state *state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int state_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dictid",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long dictid"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "inflateGetDictionary",
            "header": "extern int inflateGetDictionary(z_streamp strm, Bytef *dictionary, uInt *dictLength)",
            "params": [
                "z_streamp strm",
                "Bytef *dictionary",
                "uInt *dictLength"
            ],
            "definition": "int inflateGetDictionary(z_streamp strm, Bytef *dictionary, uInt *dictLength)\n{\n  struct inflate_state *state;\n  unsigned int state_idx = 0;\n  if (inflateStateCheck(strm))\n  {\n    return -2;\n  }\n  state_idx = (struct inflate_state *) strm->state_idx;\n  if (state->whave && (dictionary != 0))\n  {\n    memcpy(dictionary, state->window + state->wnext, state->whave - state->wnext);\n    memcpy((dictionary + state->whave) - state->wnext, state->window, state->wnext);\n  }\n  if (dictLength != 0)\n  {\n    *dictLength = state->whave;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "inflateStateCheck",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dictionary",
                        "type": "Bytef *",
                        "definition": [
                            "Bytef *dictionary"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dictLength",
                        "type": "uInt *",
                        "definition": [
                            "uInt *dictLength"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state *",
                        "definition": [
                            "struct inflate_state *state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int state_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "inflateSync",
            "header": "extern int inflateSync(z_streamp strm)",
            "params": [
                "z_streamp strm"
            ],
            "definition": "int inflateSync(z_streamp strm)\n{\n  unsigned len;\n  int flags;\n  unsigned long in;\n  unsigned long out;\n  unsigned char buf[4];\n  struct inflate_state *state;\n  unsigned int state_idx = 0;\n  if (inflateStateCheck(strm))\n  {\n    return -2;\n  }\n  state_idx = (struct inflate_state *) strm->state_idx;\n  if ((strm->avail_in == 0) && (state->bits < 8))\n  {\n    return -5;\n  }\n  if (state->mode != SYNC)\n  {\n    helper_inflateSync_1(&len, buf, state);\n  }\n  len = syncsearch(&state->have, strm->next_in, strm->avail_in);\n  strm->avail_in -= len;\n  strm->next_in += len;\n  strm->total_in += len;\n  if (state->have != 4)\n  {\n    return -3;\n  }\n  if (state->flags == (-1))\n  {\n    state->wrap = 0;\n  }\n  else\n    state->wrap &= ~4;\n  flags = state->flags;\n  in = strm->total_in;\n  out = strm->total_out;\n  inflateReset(strm);\n  strm->total_in = in;\n  strm->total_out = out;\n  state->flags = flags;\n  state->mode = TYPE;\n  return 0;\n}\n\n",
            "calle": [
                "helper_inflateSync_1",
                "inflateReset",
                "inflateStateCheck",
                "syncsearch"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned",
                        "definition": [
                            "unsigned len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "unsigned char [4]",
                        "definition": [
                            "unsigned char buf[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state *",
                        "definition": [
                            "struct inflate_state *state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int state_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "inflateCopy",
            "header": "extern int inflateCopy(z_streamp dest, z_streamp source)",
            "params": [
                "z_streamp dest",
                "z_streamp source"
            ],
            "definition": "int inflateCopy(z_streamp dest, z_streamp source)\n{\n  struct inflate_state *state;\n  unsigned int state_idx = 0;\n  struct inflate_state *copy;\n  unsigned int copy_idx = 0;\n  unsigned char *window;\n  unsigned int window_idx = 0;\n  unsigned wsize;\n  if (inflateStateCheck(source) || (dest == 0))\n  {\n    return -2;\n  }\n  state_idx = (struct inflate_state *) source->state_idx;\n  copy_idx = (struct inflate_state *) (*source->zalloc)(source->opaque, 1, sizeof(struct inflate_state));\n  if ((&copy[copy_idx]) == 0)\n  {\n    return -4;\n  }\n  window_idx = 0;\n  if (state->window != 0)\n  {\n    window_idx = (unsigned char *) (*source->zalloc)(source->opaque, 1U << state->wbits, sizeof(unsigned char));\n    if ((&window[window_idx]) == 0)\n    {\n      (*source->zfree)(source->opaque, (voidpf) copy);\n      return -4;\n    }\n  }\n  memcpy((voidpf) dest, (voidpf) source, sizeof(z_stream));\n  memcpy((voidpf) copy, (voidpf) state, sizeof(struct inflate_state));\n  copy->strm = dest;\n  if ((state->lencode >= state->codes) && (state->lencode <= ((state->codes + (852 + 592)) - 1)))\n  {\n    copy->lencode = copy->codes + (state->lencode - state->codes);\n    copy->distcode = copy->codes + (state->distcode - state->codes);\n  }\n  copy->next = copy->codes + (state->next - state->codes);\n  if ((&window[window_idx]) != 0)\n  {\n    wsize = 1U << state->wbits;\n    memcpy(window, state->window, wsize);\n  }\n  copy->window = &window[window_idx];\n  dest->state = (struct internal_state *) copy;\n  return 0;\n}\n\n",
            "calle": [
                "*source->zalloc",
                "*source->zfree",
                "inflateStateCheck",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dest",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp dest"
                        ]
                    },
                    {
                        "path": null,
                        "name": "source",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp source"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state *",
                        "definition": [
                            "struct inflate_state *state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int state_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state *",
                        "definition": [
                            "struct inflate_state *copy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int copy_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "window",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *window"
                        ]
                    },
                    {
                        "path": null,
                        "name": "window_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int window_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wsize",
                        "type": "unsigned",
                        "definition": [
                            "unsigned wsize"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "inflateReset",
            "header": "extern int inflateReset(z_streamp strm)",
            "params": [
                "z_streamp strm"
            ],
            "definition": "int inflateReset(z_streamp strm)\n{\n  struct inflate_state *state;\n  unsigned int state_idx = 0;\n  if (inflateStateCheck(strm))\n  {\n    return -2;\n  }\n  state_idx = (struct inflate_state *) strm->state_idx;\n  state->wsize = 0;\n  state->whave = 0;\n  state->wnext = 0;\n  return inflateResetKeep(strm);\n}\n\n",
            "calle": [
                "inflateResetKeep",
                "inflateStateCheck"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state *",
                        "definition": [
                            "struct inflate_state *state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int state_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "inflateReset2",
            "header": "extern int inflateReset2(z_streamp strm, int windowBits)",
            "params": [
                "z_streamp strm",
                "int windowBits"
            ],
            "definition": "int inflateReset2(z_streamp strm, int windowBits)\n{\n  int wrap;\n  struct inflate_state *state;\n  unsigned int state_idx = 0;\n  if (inflateStateCheck(strm))\n  {\n    return -2;\n  }\n  state_idx = (struct inflate_state *) strm->state_idx;\n  if (windowBits < 0)\n  {\n    if (windowBits < (-15))\n    {\n      return -2;\n    }\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else\n  {\n    wrap = (windowBits >> 4) + 5;\n  }\n  if (windowBits && ((windowBits < 8) || (windowBits > 15)))\n  {\n    return -2;\n  }\n  if ((state->window != 0) && (state->wbits != ((unsigned) windowBits)))\n  {\n    (*strm->zfree)(strm->opaque, (voidpf) state->window);\n    state->window = 0;\n  }\n  state->wrap = wrap;\n  state->wbits = (unsigned) windowBits;\n  return inflateReset(strm);\n}\n\n",
            "calle": [
                "*strm->zfree",
                "inflateReset",
                "inflateStateCheck"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "windowBits",
                        "type": "int",
                        "definition": [
                            "int windowBits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wrap",
                        "type": "int",
                        "definition": [
                            "int wrap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state *",
                        "definition": [
                            "struct inflate_state *state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int state_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "inflatePrime",
            "header": "extern int inflatePrime(z_streamp strm, int bits, int value)",
            "params": [
                "z_streamp strm",
                "int bits",
                "int value"
            ],
            "definition": "int inflatePrime(z_streamp strm, int bits, int value)\n{\n  struct inflate_state *state;\n  unsigned int state_idx = 0;\n  if (inflateStateCheck(strm))\n  {\n    return -2;\n  }\n  if (bits == 0)\n  {\n    return 0;\n  }\n  state_idx = (struct inflate_state *) strm->state_idx;\n  if (bits < 0)\n  {\n    state->hold = 0;\n    state->bits = 0;\n    return 0;\n  }\n  if ((bits > 16) || ((state->bits + ((uInt) bits)) > 32))\n  {\n    return -2;\n  }\n  value &= (1L << bits) - 1;\n  state->hold += ((unsigned) value) << state->bits;\n  state->bits += (uInt) bits;\n  return 0;\n}\n\n",
            "calle": [
                "inflateStateCheck"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "int",
                        "definition": [
                            "int bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "int",
                        "definition": [
                            "int value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state *",
                        "definition": [
                            "struct inflate_state *state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int state_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "inflateMark",
            "header": "extern long inflateMark(z_streamp strm)",
            "params": [
                "z_streamp strm"
            ],
            "definition": "long inflateMark(z_streamp strm)\n{\n  struct inflate_state *state;\n  unsigned int state_idx = 0;\n  if (inflateStateCheck(strm))\n  {\n    return -(1L << 16);\n  }\n  state_idx = (struct inflate_state *) strm->state_idx;\n  return ((long) (((unsigned long) ((long) state->back)) << 16)) + ((state->mode == COPY) ? (state->length) : ((state->mode == MATCH) ? (state->was - state->length) : (0)));\n}\n\n",
            "calle": [
                "inflateStateCheck"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state *",
                        "definition": [
                            "struct inflate_state *state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int state_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "inflateGetHeader",
            "header": "extern int inflateGetHeader(z_streamp strm, gz_headerp head)",
            "params": [
                "z_streamp strm",
                "gz_headerp head"
            ],
            "definition": "int inflateGetHeader(z_streamp strm, gz_headerp head)\n{\n  struct inflate_state *state;\n  unsigned int state_idx = 0;\n  if (inflateStateCheck(strm))\n  {\n    return -2;\n  }\n  state_idx = (struct inflate_state *) strm->state_idx;\n  if ((state->wrap & 2) == 0)\n  {\n    return -2;\n  }\n  state->head = head;\n  head->done = 0;\n  return 0;\n}\n\n",
            "calle": [
                "inflateStateCheck"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "head",
                        "type": "gz_headerp",
                        "definition": [
                            "gz_headerp head"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state *",
                        "definition": [
                            "struct inflate_state *state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int state_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "inflateInit_",
            "header": "extern int inflateInit_(z_streamp strm, const char *version, int stream_size)",
            "params": [
                "z_streamp strm",
                "const char *version",
                "int stream_size"
            ],
            "definition": "int inflateInit_(z_streamp strm, const char *version, int stream_size)\n{\n  return inflateInit2_(strm, 15, version, stream_size);\n}\n\n",
            "calle": [
                "inflateInit2_"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "version",
                        "type": "const char *",
                        "definition": [
                            "const char *version"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream_size",
                        "type": "int",
                        "definition": [
                            "int stream_size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "inflateInit2_",
            "header": "extern int inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size)",
            "params": [
                "z_streamp strm",
                "int windowBits",
                "const char *version",
                "int stream_size"
            ],
            "definition": "int inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size)\n{\n  int ret;\n  struct inflate_state *state;\n  unsigned int state_idx = 0;\n  if (((version == 0) || (version[0] != \"1.3-optipng\"[0])) || (stream_size != ((int) (sizeof(z_stream)))))\n  {\n    return -6;\n  }\n  if (strm == 0)\n  {\n    return -2;\n  }\n  strm->msg = 0;\n  if (strm->zalloc == ((alloc_func) 0))\n  {\n    strm->zalloc = zcalloc;\n    strm->opaque = (voidpf) 0;\n  }\n  if (strm->zfree == ((free_func) 0))\n  {\n    strm->zfree = zcfree;\n  }\n  state_idx = (struct inflate_state *) (*strm->zalloc)(strm->opaque, 1, sizeof(struct inflate_state));\n  if ((&state[state_idx]) == 0)\n  {\n    return -4;\n  }\n  ;\n  strm->state = (struct internal_state *) state;\n  state->strm = strm;\n  state->window = 0;\n  state->mode = HEAD;\n  ret = inflateReset2(strm, windowBits);\n  if (ret != 0)\n  {\n    (*strm->zfree)(strm->opaque, (voidpf) state);\n    strm->state = 0;\n  }\n  return ret;\n}\n\n",
            "calle": [
                "*strm->zalloc",
                "*strm->zfree",
                "inflateReset2",
                "zcalloc",
                "zcfree"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "windowBits",
                        "type": "int",
                        "definition": [
                            "int windowBits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "version",
                        "type": "const char *",
                        "definition": [
                            "const char *version"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream_size",
                        "type": "int",
                        "definition": [
                            "int stream_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state *",
                        "definition": [
                            "struct inflate_state *state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int state_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "inflateSyncPoint",
            "header": "extern int inflateSyncPoint(z_streamp)",
            "params": [
                "z_streamp strm"
            ],
            "definition": "int inflateSyncPoint(z_streamp strm)\n{\n  struct inflate_state *state;\n  unsigned int state_idx = 0;\n  if (inflateStateCheck(strm))\n  {\n    return -2;\n  }\n  state_idx = (struct inflate_state *) strm->state_idx;\n  return (state->mode == STORED) && (state->bits == 0);\n}\n\n",
            "calle": [
                "inflateStateCheck"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state *",
                        "definition": [
                            "struct inflate_state *state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int state_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "inflateUndermine",
            "header": "extern int inflateUndermine(z_streamp, int)",
            "params": [
                "z_streamp strm",
                "int subvert"
            ],
            "definition": "int inflateUndermine(z_streamp strm, int subvert)\n{\n  struct inflate_state *state;\n  unsigned int state_idx = 0;\n  if (inflateStateCheck(strm))\n  {\n    return -2;\n  }\n  state_idx = (struct inflate_state *) strm->state_idx;\n  (void) subvert;\n  state->sane = 1;\n  return -3;\n}\n\n",
            "calle": [
                "inflateStateCheck"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "subvert",
                        "type": "int",
                        "definition": [
                            "int subvert"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state *",
                        "definition": [
                            "struct inflate_state *state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int state_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "inflateValidate",
            "header": "extern int inflateValidate(z_streamp, int)",
            "params": [
                "z_streamp strm",
                "int check"
            ],
            "definition": "int inflateValidate(z_streamp strm, int check)\n{\n  struct inflate_state *state;\n  unsigned int state_idx = 0;\n  if (inflateStateCheck(strm))\n  {\n    return -2;\n  }\n  state_idx = (struct inflate_state *) strm->state_idx;\n  if (check && state->wrap)\n  {\n    state->wrap |= 4;\n  }\n  else\n    state->wrap &= ~4;\n  return 0;\n}\n\n",
            "calle": [
                "inflateStateCheck"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "check",
                        "type": "int",
                        "definition": [
                            "int check"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state *",
                        "definition": [
                            "struct inflate_state *state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int state_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "inflateCodesUsed",
            "header": "extern unsigned long inflateCodesUsed(z_streamp)",
            "params": [
                "z_streamp strm"
            ],
            "definition": "unsigned long inflateCodesUsed(z_streamp strm)\n{\n  struct inflate_state *state;\n  unsigned int state_idx = 0;\n  if (inflateStateCheck(strm))\n  {\n    return (unsigned long) (-1);\n  }\n  state_idx = (struct inflate_state *) strm->state_idx;\n  return (unsigned long) (state->next - state->codes);\n}\n\n",
            "calle": [
                "inflateStateCheck"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state *",
                        "definition": [
                            "struct inflate_state *state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int state_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "inflateResetKeep",
            "header": "extern int inflateResetKeep(z_streamp)",
            "params": [
                "z_streamp strm"
            ],
            "definition": "int inflateResetKeep(z_streamp strm)\n{\n  struct inflate_state *state;\n  unsigned int state_idx = 0;\n  if (inflateStateCheck(strm))\n  {\n    return -2;\n  }\n  state_idx = (struct inflate_state *) strm->state_idx;\n  strm->total_in = (strm->total_out = (state->total = 0));\n  strm->msg = 0;\n  if (state->wrap)\n  {\n    strm->adler = state->wrap & 1;\n  }\n  state->mode = HEAD;\n  state->last = 0;\n  state->havedict = 0;\n  state->flags = -1;\n  state->dmax = 32768U;\n  state->head = 0;\n  state->hold = 0;\n  state->bits = 0;\n  state->lencode = (state->distcode = (state->next = state->codes));\n  state->sane = 1;\n  state->back = -1;\n  ;\n  return 0;\n}\n\n",
            "calle": [
                "inflateStateCheck"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state *",
                        "definition": [
                            "struct inflate_state *state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int state_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "inflateStateCheck",
            "header": "",
            "params": [
                "z_streamp strm"
            ],
            "definition": "static int inflateStateCheck(z_streamp strm)\n{\n  struct inflate_state *state;\n  unsigned int state_idx = 0;\n  if (((strm == 0) || (strm->zalloc == ((alloc_func) 0))) || (strm->zfree == ((free_func) 0)))\n  {\n    return 1;\n  }\n  state_idx = (struct inflate_state *) strm->state_idx;\n  if (((((&state[state_idx]) == 0) || (state->strm != strm)) || (state->mode < HEAD)) || (state->mode > SYNC))\n  {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state *",
                        "definition": [
                            "struct inflate_state *state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int state_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "updatewindow",
            "header": "",
            "params": [
                "z_streamp strm",
                "const Bytef *end",
                "unsigned copy"
            ],
            "definition": "static int updatewindow(z_streamp strm, const Bytef *end, unsigned copy)\n{\n  struct inflate_state *state;\n  unsigned int state_idx = 0;\n  unsigned dist;\n  state_idx = (struct inflate_state *) strm->state_idx;\n  if (state->window == 0)\n  {\n    state->window = (unsigned char *) (*strm->zalloc)(strm->opaque, 1U << state->wbits, sizeof(unsigned char));\n    if (state->window == 0)\n    {\n      return 1;\n    }\n  }\n  if (state->wsize == 0)\n  {\n    state->wsize = 1U << state->wbits;\n    state->wnext = 0;\n    state->whave = 0;\n  }\n  if (copy >= state->wsize)\n  {\n    memcpy(state->window, end - state->wsize, state->wsize);\n    state->wnext = 0;\n    state->whave = state->wsize;\n  }\n  else\n  {\n    helper_updatewindow_1(&copy, &dist, end, state);\n  }\n  return 0;\n}\n\n",
            "calle": [
                "*strm->zalloc",
                "helper_updatewindow_1",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "const Bytef *",
                        "definition": [
                            "const Bytef *end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy",
                        "type": "unsigned",
                        "definition": [
                            "unsigned copy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state *",
                        "definition": [
                            "struct inflate_state *state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int state_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned",
                        "definition": [
                            "unsigned dist"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "syncsearch",
            "header": "",
            "params": [
                "unsigned *have",
                "const unsigned char *buf",
                "unsigned len"
            ],
            "definition": "static unsigned syncsearch(unsigned *have, const unsigned char *buf, unsigned len)\n{\n  unsigned got;\n  unsigned next;\n  got = *have;\n  next = 0;\n  while ((next < len) && (got < 4))\n  {\n    if (((int) buf[next]) == ((got < 2) ? (0) : (0xff)))\n    {\n      got += 1;\n    }\n    else\n      if (buf[next])\n    {\n      got = 0;\n    }\n    else\n      got = 4 - got;\n    next += 1;\n  }\n\n  *have = got;\n  return next;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned *",
                        "definition": [
                            "unsigned *have"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned",
                        "definition": [
                            "unsigned len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "got",
                        "type": "unsigned",
                        "definition": [
                            "unsigned got"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "unsigned",
                        "definition": [
                            "unsigned next"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_updatewindow_1",
            "header": "",
            "params": [
                "unsigned * const copy_ref",
                "unsigned * const dist_ref",
                "const Bytef * const end",
                "struct inflate_state * const state"
            ],
            "definition": "void helper_updatewindow_1(unsigned * const copy_ref, unsigned * const dist_ref, const Bytef * const end, struct inflate_state * const state)\n{\n  unsigned copy = *copy_ref;\n  unsigned dist = *dist_ref;\n  dist = state->wsize - state->wnext;\n  if (dist > copy)\n  {\n    dist = copy;\n  }\n  memcpy(state->window + state->wnext, end - copy, dist);\n  copy -= dist;\n  if (copy)\n  {\n    memcpy(state->window, end - copy, copy);\n    state->wnext = copy;\n    state->whave = state->wsize;\n  }\n  else\n  {\n    state->wnext += dist;\n    if (state->wnext == state->wsize)\n    {\n      state->wnext = 0;\n    }\n    if (state->whave < state->wsize)\n    {\n      state->whave += dist;\n    }\n  }\n  *copy_ref = copy;\n  *dist_ref = dist;\n}\n\n",
            "calle": [
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "copy_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const copy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const dist_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "const Bytef * const",
                        "definition": [
                            "const Bytef * const end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy",
                        "type": "unsigned",
                        "definition": [
                            "unsigned copy = *copy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned",
                        "definition": [
                            "unsigned dist = *dist_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_inflate_1",
            "header": "",
            "params": [
                "z_streamp * const strm_ref",
                "unsigned int * const next_idx_ref",
                "unsigned int * const put_idx_ref",
                "unsigned * const have_ref",
                "unsigned * const left_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "unsigned * const out_ref",
                "unsigned * const copy_ref",
                "unsigned int * const from_idx_ref",
                "code * const here_ref",
                "code * const last_ref",
                "unsigned * const len_ref",
                "int * const ret_ref",
                "int flush",
                "struct inflate_state * const state",
                "const unsigned char * const next",
                "unsigned char * const put",
                "unsigned char * const from",
                "static const unsigned short order[19]"
            ],
            "definition": "int helper_inflate_1(z_streamp * const strm_ref, unsigned int * const next_idx_ref, unsigned int * const put_idx_ref, unsigned * const have_ref, unsigned * const left_ref, unsigned long * const hold_ref, unsigned * const bits_ref, unsigned * const out_ref, unsigned * const copy_ref, unsigned int * const from_idx_ref, code * const here_ref, code * const last_ref, unsigned * const len_ref, int * const ret_ref, int flush, struct inflate_state * const state, const unsigned char * const next, unsigned char * const put, unsigned char * const from, static const unsigned short order[19])\n{\n  z_streamp strm = *strm_ref;\n  unsigned int next_idx = *next_idx_ref;\n  unsigned int put_idx = *put_idx_ref;\n  unsigned have = *have_ref;\n  unsigned left = *left_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  unsigned out = *out_ref;\n  unsigned copy = *copy_ref;\n  unsigned int from_idx = *from_idx_ref;\n  code here = *here_ref;\n  code last = *last_ref;\n  unsigned len = *len_ref;\n  int ret = *ret_ref;\n  switch (state->mode)\n  {\n    case HEAD:\n    {\n      helper_helper_inflate_1_11(&strm, &next_idx, &have, &hold, &bits, &len, state, next);\n    }\n\n    case DICTID:\n    {\n      helper_helper_inflate_1_2(&strm, &next_idx, &have, &hold, &bits, state, next);\n    }\n\n    case DICT:\n    {\n      helper_helper_inflate_1_1(&strm, &hold, &bits, state, next, put, next_idx, put_idx, have, left);\n    }\n\n    case TYPE:\n    {\n      if ((flush == 5) || (flush == 6))\n      {\n        goto inf_leave;\n      }\n    }\n\n    case TYPEDO:\n    {\n      helper_helper_inflate_1_13(&strm, &next_idx, &have, &hold, &bits, flush, state, next);\n    }\n\n    case STORED:\n    {\n      helper_helper_inflate_1_6(&strm, &next_idx, &have, &hold, &bits, flush, state, next);\n    }\n\n    case COPY_:\n    {\n      state->mode = COPY;\n    }\n\n    case COPY:\n    {\n      helper_helper_inflate_1_4(&next_idx, &put_idx, &have, &left, &copy, state, next, put);\n    }\n\n    case TABLE:\n    {\n      helper_helper_inflate_1_9(&strm, &next_idx, &have, &hold, &bits, state, next);\n    }\n\n    case LENLENS:\n    {\n      helper_helper_inflate_1_8(&strm, &next_idx, &have, &hold, &bits, &ret, state, next, order);\n    }\n\n    case CODELENS:\n    {\n      helper_helper_inflate_1_15(&strm, &next_idx, &have, &hold, &bits, &copy, &here, &len, &ret, flush, state, next);\n    }\n\n    case LEN_:\n    {\n      state->mode = LEN;\n    }\n\n    case LEN:\n    {\n      helper_helper_inflate_1_14(&strm, &next_idx, &put_idx, &have, &left, &hold, &bits, &here, &last, state, next, put, out);\n    }\n\n    case LENEXT:\n    {\n      helper_helper_inflate_1_5(&next_idx, &have, &hold, &bits, state, next);\n    }\n\n    case DIST:\n    {\n      helper_helper_inflate_1_12(&strm, &next_idx, &have, &hold, &bits, &here, &last, state, next);\n    }\n\n    case DISTEXT:\n    {\n      helper_helper_inflate_1_3(&next_idx, &have, &hold, &bits, state, next);\n    }\n\n    case MATCH:\n    {\n      helper_helper_inflate_1_10(&strm, &put_idx, &left, &copy, &from_idx, state, put, from, out);\n    }\n\n    case LIT:\n    {\n      if (left == 0)\n      {\n        goto inf_leave;\n      }\n      put[put_idx] = (unsigned char) state->length;\n      put_idx += 1;\n      left -= 1;\n      state->mode = LEN;\n      break;\n    }\n\n    case CHECK:\n    {\n      helper_helper_inflate_1_7(&strm, &next_idx, &have, &hold, &bits, &out, state, next, put, put_idx, left);\n    }\n\n    case DONE:\n    {\n      ret = 1;\n      goto inf_leave;\n    }\n\n    case BAD:\n    {\n      ret = -3;\n      goto inf_leave;\n    }\n\n    case MEM:\n    {\n      return -4;\n    }\n\n    case SYNC:\n\n    default:\n    {\n      return -2;\n    }\n\n  }\n\n  *strm_ref = strm;\n  *next_idx_ref = next_idx;\n  *put_idx_ref = put_idx;\n  *have_ref = have;\n  *left_ref = left;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *out_ref = out;\n  *copy_ref = copy;\n  *from_idx_ref = from_idx;\n  *here_ref = here;\n  *last_ref = last;\n  *len_ref = len;\n  *ret_ref = ret;\n}\n\n",
            "calle": [
                "helper_helper_inflate_1_1",
                "helper_helper_inflate_1_10",
                "helper_helper_inflate_1_11",
                "helper_helper_inflate_1_12",
                "helper_helper_inflate_1_13",
                "helper_helper_inflate_1_14",
                "helper_helper_inflate_1_15",
                "helper_helper_inflate_1_2",
                "helper_helper_inflate_1_3",
                "helper_helper_inflate_1_4",
                "helper_helper_inflate_1_5",
                "helper_helper_inflate_1_6",
                "helper_helper_inflate_1_7",
                "helper_helper_inflate_1_8",
                "helper_helper_inflate_1_9"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm_ref",
                        "type": "z_streamp * const",
                        "definition": [
                            "z_streamp * const strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const put_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const left_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const out_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const copy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const from_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here_ref",
                        "type": "code * const",
                        "definition": [
                            "code * const here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last_ref",
                        "type": "code * const",
                        "definition": [
                            "code * const last_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flush",
                        "type": "int",
                        "definition": [
                            "int flush"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const put"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const from"
                        ]
                    },
                    {
                        "path": null,
                        "name": "order",
                        "type": "const unsigned short [19]",
                        "definition": [
                            "static const unsigned short order[19]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = *strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int put_idx = *put_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left",
                        "type": "unsigned",
                        "definition": [
                            "unsigned left = *left_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned",
                        "definition": [
                            "unsigned out = *out_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy",
                        "type": "unsigned",
                        "definition": [
                            "unsigned copy = *copy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int from_idx = *from_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here",
                        "type": "code",
                        "definition": [
                            "code here = *here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last",
                        "type": "code",
                        "definition": [
                            "code last = *last_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned",
                        "definition": [
                            "unsigned len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = *ret_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_inflateSync_1",
            "header": "",
            "params": [
                "unsigned * const len_ref",
                "unsigned char buf[4]",
                "struct inflate_state * const state"
            ],
            "definition": "void helper_inflateSync_1(unsigned * const len_ref, unsigned char buf[4], struct inflate_state * const state)\n{\n  unsigned len = *len_ref;\n  state->mode = SYNC;\n  state->hold <<= state->bits & 7;\n  state->bits -= state->bits & 7;\n  len = 0;\n  while (state->bits >= 8)\n  {\n    buf[len] = (unsigned char) state->hold;\n    len += 1;\n    state->hold >>= 8;\n    state->bits -= 8;\n  }\n\n  state->have = 0;\n  syncsearch(&state->have, buf, len);\n  *len_ref = len;\n}\n\n",
            "calle": [
                "syncsearch"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "unsigned char [4]",
                        "definition": [
                            "unsigned char buf[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned",
                        "definition": [
                            "unsigned len = *len_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_inflate_1_1",
            "header": "",
            "params": [
                "z_streamp * const strm_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "struct inflate_state * const state",
                "const unsigned char * const next",
                "unsigned char * const put",
                "unsigned int next_idx",
                "unsigned int put_idx",
                "unsigned have",
                "unsigned left"
            ],
            "definition": "int helper_helper_inflate_1_1(z_streamp * const strm_ref, unsigned long * const hold_ref, unsigned * const bits_ref, struct inflate_state * const state, const unsigned char * const next, unsigned char * const put, unsigned int next_idx, unsigned int put_idx, unsigned have, unsigned left)\n{\n  z_streamp strm = *strm_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  if (state->havedict == 0)\n  {\n    do\n    {\n      strm->next_out = &put[put_idx];\n      strm->avail_out = left;\n      strm->next_in = &next[next_idx];\n      strm->avail_in = have;\n      state->hold = hold;\n      state->bits = bits;\n    }\n    while (0);\n    return 2;\n  }\n  strm->adler = (state->check = adler32(0L, 0, 0));\n  state->mode = TYPE;\n  *strm_ref = strm;\n  *hold_ref = hold;\n  *bits_ref = bits;\n}\n\n",
            "calle": [
                "adler32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm_ref",
                        "type": "z_streamp * const",
                        "definition": [
                            "z_streamp * const strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const put"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int put_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left",
                        "type": "unsigned",
                        "definition": [
                            "unsigned left"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = *strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_inflate_1_2",
            "header": "",
            "params": [
                "z_streamp * const strm_ref",
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "struct inflate_state * const state",
                "const unsigned char * const next"
            ],
            "definition": "void helper_helper_inflate_1_2(z_streamp * const strm_ref, unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, struct inflate_state * const state, const unsigned char * const next)\n{\n  z_streamp strm = *strm_ref;\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  do\n  {\n    while (bits < ((unsigned) 32))\n    {\n      do\n      {\n        if (have == 0)\n        {\n          goto inf_leave;\n        }\n        have -= 1;\n        hold += ((unsigned long) next[next_idx]) << bits;\n        next_idx += 1;\n        bits += 8;\n      }\n      while (0);\n    }\n\n  }\n  while (0);\n  strm->adler = (state->check = ((((hold >> 24) & 0xff) + ((hold >> 8) & 0xff00)) + ((hold & 0xff00) << 8)) + ((hold & 0xff) << 24));\n  do\n  {\n    hold = 0;\n    bits = 0;\n  }\n  while (0);\n  state->mode = DICT;\n  *strm_ref = strm;\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm_ref",
                        "type": "z_streamp * const",
                        "definition": [
                            "z_streamp * const strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = *strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_inflate_1_3",
            "header": "",
            "params": [
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "struct inflate_state * const state",
                "const unsigned char * const next"
            ],
            "definition": "void helper_helper_inflate_1_3(unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, struct inflate_state * const state, const unsigned char * const next)\n{\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  if (state->extra)\n  {\n    do\n    {\n      while (bits < ((unsigned) state->extra))\n      {\n        do\n        {\n          if (have == 0)\n          {\n            goto inf_leave;\n          }\n          have -= 1;\n          hold += ((unsigned long) next[next_idx]) << bits;\n          next_idx += 1;\n          bits += 8;\n        }\n        while (0);\n      }\n\n    }\n    while (0);\n    state->offset += ((unsigned) hold) & ((1U << state->extra) - 1);\n    do\n    {\n      hold >>= state->extra;\n      bits -= (unsigned) state->extra;\n    }\n    while (0);\n    state->back += state->extra;\n  }\n  ;\n  state->mode = MATCH;\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_inflate_1_4",
            "header": "",
            "params": [
                "unsigned int * const next_idx_ref",
                "unsigned int * const put_idx_ref",
                "unsigned * const have_ref",
                "unsigned * const left_ref",
                "unsigned * const copy_ref",
                "struct inflate_state * const state",
                "const unsigned char * const next",
                "unsigned char * const put"
            ],
            "definition": "void helper_helper_inflate_1_4(unsigned int * const next_idx_ref, unsigned int * const put_idx_ref, unsigned * const have_ref, unsigned * const left_ref, unsigned * const copy_ref, struct inflate_state * const state, const unsigned char * const next, unsigned char * const put)\n{\n  unsigned int next_idx = *next_idx_ref;\n  unsigned int put_idx = *put_idx_ref;\n  unsigned have = *have_ref;\n  unsigned left = *left_ref;\n  unsigned copy = *copy_ref;\n  copy = state->length;\n  if (copy)\n  {\n    if (copy > have)\n    {\n      copy = have;\n    }\n    if (copy > left)\n    {\n      copy = left;\n    }\n    if (copy == 0)\n    {\n      goto inf_leave;\n    }\n    memcpy(put, next, copy);\n    have -= copy;\n    next_idx += copy;\n    left -= copy;\n    put_idx += copy;\n    state->length -= copy;\n    break;\n  }\n  ;\n  state->mode = TYPE;\n  break;\n  *next_idx_ref = next_idx;\n  *put_idx_ref = put_idx;\n  *have_ref = have;\n  *left_ref = left;\n  *copy_ref = copy;\n}\n\n",
            "calle": [
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const put_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const left_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const copy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const put"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int put_idx = *put_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left",
                        "type": "unsigned",
                        "definition": [
                            "unsigned left = *left_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy",
                        "type": "unsigned",
                        "definition": [
                            "unsigned copy = *copy_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_inflate_1_5",
            "header": "",
            "params": [
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "struct inflate_state * const state",
                "const unsigned char * const next"
            ],
            "definition": "void helper_helper_inflate_1_5(unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, struct inflate_state * const state, const unsigned char * const next)\n{\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  if (state->extra)\n  {\n    do\n    {\n      while (bits < ((unsigned) state->extra))\n      {\n        do\n        {\n          if (have == 0)\n          {\n            goto inf_leave;\n          }\n          have -= 1;\n          hold += ((unsigned long) next[next_idx]) << bits;\n          next_idx += 1;\n          bits += 8;\n        }\n        while (0);\n      }\n\n    }\n    while (0);\n    state->length += ((unsigned) hold) & ((1U << state->extra) - 1);\n    do\n    {\n      hold >>= state->extra;\n      bits -= (unsigned) state->extra;\n    }\n    while (0);\n    state->back += state->extra;\n  }\n  ;\n  state->was = state->length;\n  state->mode = DIST;\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_inflate_1_6",
            "header": "",
            "params": [
                "z_streamp * const strm_ref",
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "int flush",
                "struct inflate_state * const state",
                "const unsigned char * const next"
            ],
            "definition": "void helper_helper_inflate_1_6(z_streamp * const strm_ref, unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, int flush, struct inflate_state * const state, const unsigned char * const next)\n{\n  z_streamp strm = *strm_ref;\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  do\n  {\n    hold >>= bits & 7;\n    bits -= bits & 7;\n  }\n  while (0);\n  do\n  {\n    while (bits < ((unsigned) 32))\n    {\n      do\n      {\n        if (have == 0)\n        {\n          goto inf_leave;\n        }\n        have -= 1;\n        hold += ((unsigned long) next[next_idx]) << bits;\n        next_idx += 1;\n        bits += 8;\n      }\n      while (0);\n    }\n\n  }\n  while (0);\n  if ((hold & 0xffff) != ((hold >> 16) ^ 0xffff))\n  {\n    strm->msg = (char *) \"invalid stored block lengths\";\n    state->mode = BAD;\n    break;\n  }\n  state->length = ((unsigned) hold) & 0xffff;\n  ;\n  do\n  {\n    hold = 0;\n    bits = 0;\n  }\n  while (0);\n  state->mode = COPY_;\n  if (flush == 6)\n  {\n    goto inf_leave;\n  }\n  *strm_ref = strm;\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm_ref",
                        "type": "z_streamp * const",
                        "definition": [
                            "z_streamp * const strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flush",
                        "type": "int",
                        "definition": [
                            "int flush"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = *strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_inflate_1_7",
            "header": "",
            "params": [
                "z_streamp * const strm_ref",
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "unsigned * const out_ref",
                "struct inflate_state * const state",
                "const unsigned char * const next",
                "unsigned char * const put",
                "unsigned int put_idx",
                "unsigned left"
            ],
            "definition": "void helper_helper_inflate_1_7(z_streamp * const strm_ref, unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, unsigned * const out_ref, struct inflate_state * const state, const unsigned char * const next, unsigned char * const put, unsigned int put_idx, unsigned left)\n{\n  z_streamp strm = *strm_ref;\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  unsigned out = *out_ref;\n  if (state->wrap)\n  {\n    helper_helper_helper_inflate_1_7_1(&strm, &next_idx, &have, &hold, &bits, &out, state, next, put, put_idx, left);\n  }\n  state->mode = DONE;\n  *strm_ref = strm;\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *out_ref = out;\n}\n\n",
            "calle": [
                "helper_helper_helper_inflate_1_7_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm_ref",
                        "type": "z_streamp * const",
                        "definition": [
                            "z_streamp * const strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const out_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const put"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int put_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left",
                        "type": "unsigned",
                        "definition": [
                            "unsigned left"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = *strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned",
                        "definition": [
                            "unsigned out = *out_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_inflate_1_8",
            "header": "",
            "params": [
                "z_streamp * const strm_ref",
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "int * const ret_ref",
                "struct inflate_state * const state",
                "const unsigned char * const next",
                "static const unsigned short order[19]"
            ],
            "definition": "void helper_helper_inflate_1_8(z_streamp * const strm_ref, unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, int * const ret_ref, struct inflate_state * const state, const unsigned char * const next, static const unsigned short order[19])\n{\n  z_streamp strm = *strm_ref;\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  int ret = *ret_ref;\n  while (state->have < state->ncode)\n  {\n    helper_helper_helper_inflate_1_8_1(&next_idx, &have, &hold, &bits, state, next, order);\n  }\n\n  while (state->have < 19)\n  {\n    state->lens[order[state->have++]] = 0;\n  }\n\n  state->next = state->codes;\n  state->lencode = (const code *) state->next;\n  state->lenbits = 7;\n  ret = inflate_table(CODES, state->lens, 19, &state->next, &state->lenbits, state->work);\n  if (ret)\n  {\n    strm->msg = (char *) \"invalid code lengths set\";\n    state->mode = BAD;\n    break;\n  }\n  ;\n  state->have = 0;\n  state->mode = CODELENS;\n  *strm_ref = strm;\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *ret_ref = ret;\n}\n\n",
            "calle": [
                "helper_helper_helper_inflate_1_8_1",
                "inflate_table"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm_ref",
                        "type": "z_streamp * const",
                        "definition": [
                            "z_streamp * const strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "order",
                        "type": "const unsigned short [19]",
                        "definition": [
                            "static const unsigned short order[19]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = *strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = *ret_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_inflate_1_9",
            "header": "",
            "params": [
                "z_streamp * const strm_ref",
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "struct inflate_state * const state",
                "const unsigned char * const next"
            ],
            "definition": "void helper_helper_inflate_1_9(z_streamp * const strm_ref, unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, struct inflate_state * const state, const unsigned char * const next)\n{\n  z_streamp strm = *strm_ref;\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  do\n  {\n    while (bits < ((unsigned) 14))\n    {\n      do\n      {\n        if (have == 0)\n        {\n          goto inf_leave;\n        }\n        have -= 1;\n        hold += ((unsigned long) next[next_idx]) << bits;\n        next_idx += 1;\n        bits += 8;\n      }\n      while (0);\n    }\n\n  }\n  while (0);\n  state->nlen = (((unsigned) hold) & ((1U << 5) - 1)) + 257;\n  do\n  {\n    hold >>= 5;\n    bits -= (unsigned) 5;\n  }\n  while (0);\n  state->ndist = (((unsigned) hold) & ((1U << 5) - 1)) + 1;\n  do\n  {\n    hold >>= 5;\n    bits -= (unsigned) 5;\n  }\n  while (0);\n  state->ncode = (((unsigned) hold) & ((1U << 4) - 1)) + 4;\n  do\n  {\n    hold >>= 4;\n    bits -= (unsigned) 4;\n  }\n  while (0);\n  if ((state->nlen > 286) || (state->ndist > 30))\n  {\n    strm->msg = (char *) \"too many length or distance symbols\";\n    state->mode = BAD;\n    break;\n  }\n  ;\n  state->have = 0;\n  state->mode = LENLENS;\n  *strm_ref = strm;\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm_ref",
                        "type": "z_streamp * const",
                        "definition": [
                            "z_streamp * const strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = *strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_inflate_1_10",
            "header": "",
            "params": [
                "z_streamp * const strm_ref",
                "unsigned int * const put_idx_ref",
                "unsigned * const left_ref",
                "unsigned * const copy_ref",
                "unsigned int * const from_idx_ref",
                "struct inflate_state * const state",
                "unsigned char * const put",
                "unsigned char * const from",
                "unsigned out"
            ],
            "definition": "void helper_helper_inflate_1_10(z_streamp * const strm_ref, unsigned int * const put_idx_ref, unsigned * const left_ref, unsigned * const copy_ref, unsigned int * const from_idx_ref, struct inflate_state * const state, unsigned char * const put, unsigned char * const from, unsigned out)\n{\n  z_streamp strm = *strm_ref;\n  unsigned int put_idx = *put_idx_ref;\n  unsigned left = *left_ref;\n  unsigned copy = *copy_ref;\n  unsigned int from_idx = *from_idx_ref;\n  if (left == 0)\n  {\n    goto inf_leave;\n  }\n  copy = out - left;\n  if (state->offset > copy)\n  {\n    helper_helper_helper_inflate_1_10_1(&strm, &copy, &from_idx, state);\n  }\n  else\n  {\n    from_idx = (&put[put_idx]) - state->offset;\n    copy = state->length;\n  }\n  if (copy > left)\n  {\n    copy = left;\n  }\n  left -= copy;\n  state->length -= copy;\n  do\n  {\n    put[put_idx] = from[from_idx];\n    from_idx += 1;\n    put_idx += 1;\n  }\n  while (--copy);\n  if (state->length == 0)\n  {\n    state->mode = LEN;\n  }\n  break;\n  *strm_ref = strm;\n  *put_idx_ref = put_idx;\n  *left_ref = left;\n  *copy_ref = copy;\n  *from_idx_ref = from_idx;\n}\n\n",
            "calle": [
                "helper_helper_helper_inflate_1_10_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm_ref",
                        "type": "z_streamp * const",
                        "definition": [
                            "z_streamp * const strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const put_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const left_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const copy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const from_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const put"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const from"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned",
                        "definition": [
                            "unsigned out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = *strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int put_idx = *put_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left",
                        "type": "unsigned",
                        "definition": [
                            "unsigned left = *left_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy",
                        "type": "unsigned",
                        "definition": [
                            "unsigned copy = *copy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int from_idx = *from_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_inflate_1_11",
            "header": "",
            "params": [
                "z_streamp * const strm_ref",
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "unsigned * const len_ref",
                "struct inflate_state * const state",
                "const unsigned char * const next"
            ],
            "definition": "void helper_helper_inflate_1_11(z_streamp * const strm_ref, unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, unsigned * const len_ref, struct inflate_state * const state, const unsigned char * const next)\n{\n  z_streamp strm = *strm_ref;\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  unsigned len = *len_ref;\n  if (state->wrap == 0)\n  {\n    state->mode = TYPEDO;\n    break;\n  }\n  do\n  {\n    while (bits < ((unsigned) 16))\n    {\n      do\n      {\n        if (have == 0)\n        {\n          goto inf_leave;\n        }\n        have -= 1;\n        hold += ((unsigned long) next[next_idx]) << bits;\n        next_idx += 1;\n        bits += 8;\n      }\n      while (0);\n    }\n\n  }\n  while (0);\n  if ((((((unsigned) hold) & ((1U << 8) - 1)) << 8) + (hold >> 8)) % 31)\n  {\n    strm->msg = (char *) \"incorrect header check\";\n    state->mode = BAD;\n    break;\n  }\n  if ((((unsigned) hold) & ((1U << 4) - 1)) != 8)\n  {\n    strm->msg = (char *) \"unknown compression method\";\n    state->mode = BAD;\n    break;\n  }\n  do\n  {\n    hold >>= 4;\n    bits -= (unsigned) 4;\n  }\n  while (0);\n  len = (((unsigned) hold) & ((1U << 4) - 1)) + 8;\n  if (state->wbits == 0)\n  {\n    state->wbits = len;\n  }\n  if ((len > 15) || (len > state->wbits))\n  {\n    strm->msg = (char *) \"invalid window size\";\n    state->mode = BAD;\n    break;\n  }\n  state->dmax = 1U << len;\n  state->flags = 0;\n  ;\n  strm->adler = (state->check = adler32(0L, 0, 0));\n  state->mode = (hold & 0x200) ? (DICTID) : (TYPE);\n  do\n  {\n    hold = 0;\n    bits = 0;\n  }\n  while (0);\n  break;\n  *strm_ref = strm;\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *len_ref = len;\n}\n\n",
            "calle": [
                "adler32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm_ref",
                        "type": "z_streamp * const",
                        "definition": [
                            "z_streamp * const strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = *strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned",
                        "definition": [
                            "unsigned len = *len_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_inflate_1_12",
            "header": "",
            "params": [
                "z_streamp * const strm_ref",
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "code * const here_ref",
                "code * const last_ref",
                "struct inflate_state * const state",
                "const unsigned char * const next"
            ],
            "definition": "void helper_helper_inflate_1_12(z_streamp * const strm_ref, unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, code * const here_ref, code * const last_ref, struct inflate_state * const state, const unsigned char * const next)\n{\n  z_streamp strm = *strm_ref;\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  code here = *here_ref;\n  code last = *last_ref;\n  for (;;)\n  {\n    here = state->distcode[((unsigned) hold) & ((1U << state->distbits) - 1)];\n    if (((unsigned) here.bits) <= bits)\n    {\n      break;\n    }\n    do\n    {\n      if (have == 0)\n      {\n        goto inf_leave;\n      }\n      have -= 1;\n      hold += ((unsigned long) next[next_idx]) << bits;\n      next_idx += 1;\n      bits += 8;\n    }\n    while (0);\n  }\n\n  if ((here.op & 0xf0) == 0)\n  {\n    helper_helper_helper_inflate_1_12_1(&next_idx, &have, &hold, &bits, &here, &last, state, next);\n  }\n  do\n  {\n    hold >>= here.bits;\n    bits -= (unsigned) here.bits;\n  }\n  while (0);\n  state->back += here.bits;\n  if (here.op & 64)\n  {\n    strm->msg = (char *) \"invalid distance code\";\n    state->mode = BAD;\n    break;\n  }\n  state->offset = (unsigned) here.val;\n  state->extra = ((unsigned) here.op) & 15;\n  state->mode = DISTEXT;\n  *strm_ref = strm;\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *here_ref = here;\n  *last_ref = last;\n}\n\n",
            "calle": [
                "helper_helper_helper_inflate_1_12_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm_ref",
                        "type": "z_streamp * const",
                        "definition": [
                            "z_streamp * const strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here_ref",
                        "type": "code * const",
                        "definition": [
                            "code * const here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last_ref",
                        "type": "code * const",
                        "definition": [
                            "code * const last_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = *strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here",
                        "type": "code",
                        "definition": [
                            "code here = *here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last",
                        "type": "code",
                        "definition": [
                            "code last = *last_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_inflate_1_13",
            "header": "",
            "params": [
                "z_streamp * const strm_ref",
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "int flush",
                "struct inflate_state * const state",
                "const unsigned char * const next"
            ],
            "definition": "void helper_helper_inflate_1_13(z_streamp * const strm_ref, unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, int flush, struct inflate_state * const state, const unsigned char * const next)\n{\n  z_streamp strm = *strm_ref;\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  if (state->last)\n  {\n    do\n    {\n      hold >>= bits & 7;\n      bits -= bits & 7;\n    }\n    while (0);\n    state->mode = CHECK;\n    break;\n  }\n  do\n  {\n    while (bits < ((unsigned) 3))\n    {\n      do\n      {\n        if (have == 0)\n        {\n          goto inf_leave;\n        }\n        have -= 1;\n        hold += ((unsigned long) next[next_idx]) << bits;\n        next_idx += 1;\n        bits += 8;\n      }\n      while (0);\n    }\n\n  }\n  while (0);\n  state->last = ((unsigned) hold) & ((1U << 1) - 1);\n  do\n  {\n    hold >>= 1;\n    bits -= (unsigned) 1;\n  }\n  while (0);\n  switch (((unsigned) hold) & ((1U << 2) - 1))\n  {\n    case 0:\n    {\n      ;\n      state->mode = STORED;\n      break;\n    }\n\n    case 1:\n    {\n      fixedtables(state);\n      ;\n      state->mode = LEN_;\n      if (flush == 6)\n      {\n        do\n        {\n          hold >>= 2;\n          bits -= (unsigned) 2;\n        }\n        while (0);\n        goto inf_leave;\n      }\n      break;\n    }\n\n    case 2:\n    {\n      ;\n      state->mode = TABLE;\n      break;\n    }\n\n    case 3:\n    {\n      strm->msg = (char *) \"invalid block type\";\n      state->mode = BAD;\n    }\n\n  }\n\n  do\n  {\n    hold >>= 2;\n    bits -= (unsigned) 2;\n  }\n  while (0);\n  break;\n  *strm_ref = strm;\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n}\n\n",
            "calle": [
                "fixedtables"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm_ref",
                        "type": "z_streamp * const",
                        "definition": [
                            "z_streamp * const strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flush",
                        "type": "int",
                        "definition": [
                            "int flush"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = *strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_inflate_1_14",
            "header": "",
            "params": [
                "z_streamp * const strm_ref",
                "unsigned int * const next_idx_ref",
                "unsigned int * const put_idx_ref",
                "unsigned * const have_ref",
                "unsigned * const left_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "code * const here_ref",
                "code * const last_ref",
                "struct inflate_state * const state",
                "const unsigned char * const next",
                "unsigned char * const put",
                "unsigned out"
            ],
            "definition": "void helper_helper_inflate_1_14(z_streamp * const strm_ref, unsigned int * const next_idx_ref, unsigned int * const put_idx_ref, unsigned * const have_ref, unsigned * const left_ref, unsigned long * const hold_ref, unsigned * const bits_ref, code * const here_ref, code * const last_ref, struct inflate_state * const state, const unsigned char * const next, unsigned char * const put, unsigned out)\n{\n  z_streamp strm = *strm_ref;\n  unsigned int next_idx = *next_idx_ref;\n  unsigned int put_idx = *put_idx_ref;\n  unsigned have = *have_ref;\n  unsigned left = *left_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  code here = *here_ref;\n  code last = *last_ref;\n  if ((have >= 6) && (left >= 258))\n  {\n    helper_helper_helper_inflate_1_14_2(&strm, &next_idx, &put_idx, &have, &left, &hold, &bits, state, next, put, out);\n  }\n  state->back = 0;\n  for (;;)\n  {\n    here = state->lencode[((unsigned) hold) & ((1U << state->lenbits) - 1)];\n    if (((unsigned) here.bits) <= bits)\n    {\n      break;\n    }\n    do\n    {\n      if (have == 0)\n      {\n        goto inf_leave;\n      }\n      have -= 1;\n      hold += ((unsigned long) next[next_idx]) << bits;\n      next_idx += 1;\n      bits += 8;\n    }\n    while (0);\n  }\n\n  if (here.op && ((here.op & 0xf0) == 0))\n  {\n    helper_helper_helper_inflate_1_14_1(&next_idx, &have, &hold, &bits, &here, &last, state, next);\n  }\n  do\n  {\n    hold >>= here.bits;\n    bits -= (unsigned) here.bits;\n  }\n  while (0);\n  state->back += here.bits;\n  state->length = (unsigned) here.val;\n  if (((int) here.op) == 0)\n  {\n    ;\n    state->mode = LIT;\n    break;\n  }\n  if (here.op & 32)\n  {\n    ;\n    state->back = -1;\n    state->mode = TYPE;\n    break;\n  }\n  if (here.op & 64)\n  {\n    strm->msg = (char *) \"invalid literal/length code\";\n    state->mode = BAD;\n    break;\n  }\n  state->extra = ((unsigned) here.op) & 15;\n  state->mode = LENEXT;\n  *strm_ref = strm;\n  *next_idx_ref = next_idx;\n  *put_idx_ref = put_idx;\n  *have_ref = have;\n  *left_ref = left;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *here_ref = here;\n  *last_ref = last;\n}\n\n",
            "calle": [
                "helper_helper_helper_inflate_1_14_1",
                "helper_helper_helper_inflate_1_14_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm_ref",
                        "type": "z_streamp * const",
                        "definition": [
                            "z_streamp * const strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const put_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const left_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here_ref",
                        "type": "code * const",
                        "definition": [
                            "code * const here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last_ref",
                        "type": "code * const",
                        "definition": [
                            "code * const last_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const put"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned",
                        "definition": [
                            "unsigned out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = *strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int put_idx = *put_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left",
                        "type": "unsigned",
                        "definition": [
                            "unsigned left = *left_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here",
                        "type": "code",
                        "definition": [
                            "code here = *here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last",
                        "type": "code",
                        "definition": [
                            "code last = *last_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_inflate_1_15",
            "header": "",
            "params": [
                "z_streamp * const strm_ref",
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "unsigned * const copy_ref",
                "code * const here_ref",
                "unsigned * const len_ref",
                "int * const ret_ref",
                "int flush",
                "struct inflate_state * const state",
                "const unsigned char * const next"
            ],
            "definition": "void helper_helper_inflate_1_15(z_streamp * const strm_ref, unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, unsigned * const copy_ref, code * const here_ref, unsigned * const len_ref, int * const ret_ref, int flush, struct inflate_state * const state, const unsigned char * const next)\n{\n  z_streamp strm = *strm_ref;\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  unsigned copy = *copy_ref;\n  code here = *here_ref;\n  unsigned len = *len_ref;\n  int ret = *ret_ref;\n  while (state->have < (state->nlen + state->ndist))\n  {\n    helper_helper_helper_inflate_1_15_1(&strm, &next_idx, &have, &hold, &bits, &copy, &here, &len, state, next);\n  }\n\n  if (state->mode == BAD)\n  {\n    break;\n  }\n  if (state->lens[256] == 0)\n  {\n    strm->msg = (char *) \"invalid code -- missing end-of-block\";\n    state->mode = BAD;\n    break;\n  }\n  state->next = state->codes;\n  state->lencode = (const code *) state->next;\n  state->lenbits = 9;\n  ret = inflate_table(LENS, state->lens, state->nlen, &state->next, &state->lenbits, state->work);\n  if (ret)\n  {\n    strm->msg = (char *) \"invalid literal/lengths set\";\n    state->mode = BAD;\n    break;\n  }\n  state->distcode = (const code *) state->next;\n  state->distbits = 6;\n  ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist, &state->next, &state->distbits, state->work);\n  if (ret)\n  {\n    strm->msg = (char *) \"invalid distances set\";\n    state->mode = BAD;\n    break;\n  }\n  ;\n  state->mode = LEN_;\n  if (flush == 6)\n  {\n    goto inf_leave;\n  }\n  *strm_ref = strm;\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *copy_ref = copy;\n  *here_ref = here;\n  *len_ref = len;\n  *ret_ref = ret;\n}\n\n",
            "calle": [
                "helper_helper_helper_inflate_1_15_1",
                "inflate_table"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm_ref",
                        "type": "z_streamp * const",
                        "definition": [
                            "z_streamp * const strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const copy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here_ref",
                        "type": "code * const",
                        "definition": [
                            "code * const here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flush",
                        "type": "int",
                        "definition": [
                            "int flush"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = *strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy",
                        "type": "unsigned",
                        "definition": [
                            "unsigned copy = *copy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here",
                        "type": "code",
                        "definition": [
                            "code here = *here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned",
                        "definition": [
                            "unsigned len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = *ret_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_inflate_1_7_1",
            "header": "",
            "params": [
                "z_streamp * const strm_ref",
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "unsigned * const out_ref",
                "struct inflate_state * const state",
                "const unsigned char * const next",
                "unsigned char * const put",
                "unsigned int put_idx",
                "unsigned left"
            ],
            "definition": "void helper_helper_helper_inflate_1_7_1(z_streamp * const strm_ref, unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, unsigned * const out_ref, struct inflate_state * const state, const unsigned char * const next, unsigned char * const put, unsigned int put_idx, unsigned left)\n{\n  z_streamp strm = *strm_ref;\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  unsigned out = *out_ref;\n  do\n  {\n    while (bits < ((unsigned) 32))\n    {\n      do\n      {\n        if (have == 0)\n        {\n          goto inf_leave;\n        }\n        have -= 1;\n        hold += ((unsigned long) next[next_idx]) << bits;\n        next_idx += 1;\n        bits += 8;\n      }\n      while (0);\n    }\n\n  }\n  while (0);\n  out -= left;\n  strm->total_out += out;\n  state->total += out;\n  if ((state->wrap & 4) && out)\n  {\n    strm->adler = (state->check = adler32(state->check, (&put[put_idx]) - out, out));\n  }\n  out = left;\n  if ((state->wrap & 4) && ((((((hold >> 24) & 0xff) + ((hold >> 8) & 0xff00)) + ((hold & 0xff00) << 8)) + ((hold & 0xff) << 24)) != state->check))\n  {\n    strm->msg = (char *) \"incorrect data check\";\n    state->mode = BAD;\n    break;\n  }\n  do\n  {\n    hold = 0;\n    bits = 0;\n  }\n  while (0);\n  ;\n  *strm_ref = strm;\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *out_ref = out;\n}\n\n",
            "calle": [
                "adler32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm_ref",
                        "type": "z_streamp * const",
                        "definition": [
                            "z_streamp * const strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const out_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const put"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int put_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left",
                        "type": "unsigned",
                        "definition": [
                            "unsigned left"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = *strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned",
                        "definition": [
                            "unsigned out = *out_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_inflate_1_8_1",
            "header": "",
            "params": [
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "struct inflate_state * const state",
                "const unsigned char * const next",
                "static const unsigned short order[19]"
            ],
            "definition": "void helper_helper_helper_inflate_1_8_1(unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, struct inflate_state * const state, const unsigned char * const next, static const unsigned short order[19])\n{\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  do\n  {\n    while (bits < ((unsigned) 3))\n    {\n      do\n      {\n        if (have == 0)\n        {\n          goto inf_leave;\n        }\n        have -= 1;\n        hold += ((unsigned long) next[next_idx]) << bits;\n        next_idx += 1;\n        bits += 8;\n      }\n      while (0);\n    }\n\n  }\n  while (0);\n  state->lens[order[state->have++]] = (unsigned short) (((unsigned) hold) & ((1U << 3) - 1));\n  do\n  {\n    hold >>= 3;\n    bits -= (unsigned) 3;\n  }\n  while (0);\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "order",
                        "type": "const unsigned short [19]",
                        "definition": [
                            "static const unsigned short order[19]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_inflate_1_10_1",
            "header": "",
            "params": [
                "z_streamp * const strm_ref",
                "unsigned * const copy_ref",
                "unsigned int * const from_idx_ref",
                "struct inflate_state * const state"
            ],
            "definition": "void helper_helper_helper_inflate_1_10_1(z_streamp * const strm_ref, unsigned * const copy_ref, unsigned int * const from_idx_ref, struct inflate_state * const state)\n{\n  z_streamp strm = *strm_ref;\n  unsigned copy = *copy_ref;\n  unsigned int from_idx = *from_idx_ref;\n  copy = state->offset - copy;\n  if (copy > state->whave)\n  {\n    if (state->sane)\n    {\n      strm->msg = (char *) \"invalid distance too far back\";\n      state->mode = BAD;\n      break;\n    }\n  }\n  if (copy > state->wnext)\n  {\n    copy -= state->wnext;\n    from_idx = state->window + (state->wsize - copy);\n  }\n  else\n    from_idx = state->window + (state->wnext - copy);\n  if (copy > state->length)\n  {\n    copy = state->length;\n  }\n  *strm_ref = strm;\n  *copy_ref = copy;\n  *from_idx_ref = from_idx;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm_ref",
                        "type": "z_streamp * const",
                        "definition": [
                            "z_streamp * const strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const copy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const from_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = *strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy",
                        "type": "unsigned",
                        "definition": [
                            "unsigned copy = *copy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "from_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int from_idx = *from_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_inflate_1_12_1",
            "header": "",
            "params": [
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "code * const here_ref",
                "code * const last_ref",
                "struct inflate_state * const state",
                "const unsigned char * const next"
            ],
            "definition": "void helper_helper_helper_inflate_1_12_1(unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, code * const here_ref, code * const last_ref, struct inflate_state * const state, const unsigned char * const next)\n{\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  code here = *here_ref;\n  code last = *last_ref;\n  last = here;\n  for (;;)\n  {\n    here = state->distcode[last.val + ((((unsigned) hold) & ((1U << (last.bits + last.op)) - 1)) >> last.bits)];\n    if (((unsigned) (last.bits + here.bits)) <= bits)\n    {\n      break;\n    }\n    do\n    {\n      if (have == 0)\n      {\n        goto inf_leave;\n      }\n      have -= 1;\n      hold += ((unsigned long) next[next_idx]) << bits;\n      next_idx += 1;\n      bits += 8;\n    }\n    while (0);\n  }\n\n  do\n  {\n    hold >>= last.bits;\n    bits -= (unsigned) last.bits;\n  }\n  while (0);\n  state->back += last.bits;\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *here_ref = here;\n  *last_ref = last;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here_ref",
                        "type": "code * const",
                        "definition": [
                            "code * const here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last_ref",
                        "type": "code * const",
                        "definition": [
                            "code * const last_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here",
                        "type": "code",
                        "definition": [
                            "code here = *here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last",
                        "type": "code",
                        "definition": [
                            "code last = *last_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_inflate_1_14_1",
            "header": "",
            "params": [
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "code * const here_ref",
                "code * const last_ref",
                "struct inflate_state * const state",
                "const unsigned char * const next"
            ],
            "definition": "void helper_helper_helper_inflate_1_14_1(unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, code * const here_ref, code * const last_ref, struct inflate_state * const state, const unsigned char * const next)\n{\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  code here = *here_ref;\n  code last = *last_ref;\n  last = here;\n  for (;;)\n  {\n    here = state->lencode[last.val + ((((unsigned) hold) & ((1U << (last.bits + last.op)) - 1)) >> last.bits)];\n    if (((unsigned) (last.bits + here.bits)) <= bits)\n    {\n      break;\n    }\n    do\n    {\n      if (have == 0)\n      {\n        goto inf_leave;\n      }\n      have -= 1;\n      hold += ((unsigned long) next[next_idx]) << bits;\n      next_idx += 1;\n      bits += 8;\n    }\n    while (0);\n  }\n\n  do\n  {\n    hold >>= last.bits;\n    bits -= (unsigned) last.bits;\n  }\n  while (0);\n  state->back += last.bits;\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *here_ref = here;\n  *last_ref = last;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here_ref",
                        "type": "code * const",
                        "definition": [
                            "code * const here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last_ref",
                        "type": "code * const",
                        "definition": [
                            "code * const last_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here",
                        "type": "code",
                        "definition": [
                            "code here = *here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last",
                        "type": "code",
                        "definition": [
                            "code last = *last_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_inflate_1_14_2",
            "header": "",
            "params": [
                "z_streamp * const strm_ref",
                "unsigned int * const next_idx_ref",
                "unsigned int * const put_idx_ref",
                "unsigned * const have_ref",
                "unsigned * const left_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "struct inflate_state * const state",
                "const unsigned char * const next",
                "unsigned char * const put",
                "unsigned out"
            ],
            "definition": "void helper_helper_helper_inflate_1_14_2(z_streamp * const strm_ref, unsigned int * const next_idx_ref, unsigned int * const put_idx_ref, unsigned * const have_ref, unsigned * const left_ref, unsigned long * const hold_ref, unsigned * const bits_ref, struct inflate_state * const state, const unsigned char * const next, unsigned char * const put, unsigned out)\n{\n  z_streamp strm = *strm_ref;\n  unsigned int next_idx = *next_idx_ref;\n  unsigned int put_idx = *put_idx_ref;\n  unsigned have = *have_ref;\n  unsigned left = *left_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  do\n  {\n    strm->next_out = &put[put_idx];\n    strm->avail_out = left;\n    strm->next_in = &next[next_idx];\n    strm->avail_in = have;\n    state->hold = hold;\n    state->bits = bits;\n  }\n  while (0);\n  inflate_fast(strm, out);\n  do\n  {\n    put_idx = strm->next_out;\n    left = strm->avail_out;\n    next_idx = strm->next_in;\n    have = strm->avail_in;\n    hold = state->hold;\n    bits = state->bits;\n  }\n  while (0);\n  if (state->mode == TYPE)\n  {\n    state->back = -1;\n  }\n  break;\n  *strm_ref = strm;\n  *next_idx_ref = next_idx;\n  *put_idx_ref = put_idx;\n  *have_ref = have;\n  *left_ref = left;\n  *hold_ref = hold;\n  *bits_ref = bits;\n}\n\n",
            "calle": [
                "inflate_fast"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm_ref",
                        "type": "z_streamp * const",
                        "definition": [
                            "z_streamp * const strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const put_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const left_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const put"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "unsigned",
                        "definition": [
                            "unsigned out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = *strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int put_idx = *put_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left",
                        "type": "unsigned",
                        "definition": [
                            "unsigned left = *left_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_inflate_1_15_1",
            "header": "",
            "params": [
                "z_streamp * const strm_ref",
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "unsigned * const copy_ref",
                "code * const here_ref",
                "unsigned * const len_ref",
                "struct inflate_state * const state",
                "const unsigned char * const next"
            ],
            "definition": "void helper_helper_helper_inflate_1_15_1(z_streamp * const strm_ref, unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, unsigned * const copy_ref, code * const here_ref, unsigned * const len_ref, struct inflate_state * const state, const unsigned char * const next)\n{\n  z_streamp strm = *strm_ref;\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  unsigned copy = *copy_ref;\n  code here = *here_ref;\n  unsigned len = *len_ref;\n  for (;;)\n  {\n    here = state->lencode[((unsigned) hold) & ((1U << state->lenbits) - 1)];\n    if (((unsigned) here.bits) <= bits)\n    {\n      break;\n    }\n    do\n    {\n      if (have == 0)\n      {\n        goto inf_leave;\n      }\n      have -= 1;\n      hold += ((unsigned long) next[next_idx]) << bits;\n      next_idx += 1;\n      bits += 8;\n    }\n    while (0);\n  }\n\n  if (here.val < 16)\n  {\n    do\n    {\n      hold >>= here.bits;\n      bits -= (unsigned) here.bits;\n    }\n    while (0);\n    state->lens[state->have++] = here.val;\n  }\n  else\n  {\n    helper_helper_helper_helper_inflate_1_15_1_1(&strm, &next_idx, &have, &hold, &bits, &copy, &len, state, next, here);\n  }\n  *strm_ref = strm;\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *copy_ref = copy;\n  *here_ref = here;\n  *len_ref = len;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_inflate_1_15_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm_ref",
                        "type": "z_streamp * const",
                        "definition": [
                            "z_streamp * const strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const copy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here_ref",
                        "type": "code * const",
                        "definition": [
                            "code * const here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = *strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy",
                        "type": "unsigned",
                        "definition": [
                            "unsigned copy = *copy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here",
                        "type": "code",
                        "definition": [
                            "code here = *here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned",
                        "definition": [
                            "unsigned len = *len_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_inflate_1_15_1_1",
            "header": "",
            "params": [
                "z_streamp * const strm_ref",
                "unsigned int * const next_idx_ref",
                "unsigned * const have_ref",
                "unsigned long * const hold_ref",
                "unsigned * const bits_ref",
                "unsigned * const copy_ref",
                "unsigned * const len_ref",
                "struct inflate_state * const state",
                "const unsigned char * const next",
                "code here"
            ],
            "definition": "void helper_helper_helper_helper_inflate_1_15_1_1(z_streamp * const strm_ref, unsigned int * const next_idx_ref, unsigned * const have_ref, unsigned long * const hold_ref, unsigned * const bits_ref, unsigned * const copy_ref, unsigned * const len_ref, struct inflate_state * const state, const unsigned char * const next, code here)\n{\n  z_streamp strm = *strm_ref;\n  unsigned int next_idx = *next_idx_ref;\n  unsigned have = *have_ref;\n  unsigned long hold = *hold_ref;\n  unsigned bits = *bits_ref;\n  unsigned copy = *copy_ref;\n  unsigned len = *len_ref;\n  if (here.val == 16)\n  {\n    do\n    {\n      while (bits < ((unsigned) (here.bits + 2)))\n      {\n        do\n        {\n          if (have == 0)\n          {\n            goto inf_leave;\n          }\n          have -= 1;\n          hold += ((unsigned long) next[next_idx]) << bits;\n          next_idx += 1;\n          bits += 8;\n        }\n        while (0);\n      }\n\n    }\n    while (0);\n    do\n    {\n      hold >>= here.bits;\n      bits -= (unsigned) here.bits;\n    }\n    while (0);\n    if (state->have == 0)\n    {\n      strm->msg = (char *) \"invalid bit length repeat\";\n      state->mode = BAD;\n      break;\n    }\n    len = state->lens[state->have - 1];\n    copy = 3 + (((unsigned) hold) & ((1U << 2) - 1));\n    do\n    {\n      hold >>= 2;\n      bits -= (unsigned) 2;\n    }\n    while (0);\n  }\n  else\n    if (here.val == 17)\n  {\n    do\n    {\n      while (bits < ((unsigned) (here.bits + 3)))\n      {\n        do\n        {\n          if (have == 0)\n          {\n            goto inf_leave;\n          }\n          have -= 1;\n          hold += ((unsigned long) next[next_idx]) << bits;\n          next_idx += 1;\n          bits += 8;\n        }\n        while (0);\n      }\n\n    }\n    while (0);\n    do\n    {\n      hold >>= here.bits;\n      bits -= (unsigned) here.bits;\n    }\n    while (0);\n    len = 0;\n    copy = 3 + (((unsigned) hold) & ((1U << 3) - 1));\n    do\n    {\n      hold >>= 3;\n      bits -= (unsigned) 3;\n    }\n    while (0);\n  }\n  else\n  {\n    do\n    {\n      while (bits < ((unsigned) (here.bits + 7)))\n      {\n        do\n        {\n          if (have == 0)\n          {\n            goto inf_leave;\n          }\n          have -= 1;\n          hold += ((unsigned long) next[next_idx]) << bits;\n          next_idx += 1;\n          bits += 8;\n        }\n        while (0);\n      }\n\n    }\n    while (0);\n    do\n    {\n      hold >>= here.bits;\n      bits -= (unsigned) here.bits;\n    }\n    while (0);\n    len = 0;\n    copy = 11 + (((unsigned) hold) & ((1U << 7) - 1));\n    do\n    {\n      hold >>= 7;\n      bits -= (unsigned) 7;\n    }\n    while (0);\n  }\n  if ((state->have + copy) > (state->nlen + state->ndist))\n  {\n    strm->msg = (char *) \"invalid bit length repeat\";\n    state->mode = BAD;\n    break;\n  }\n  while (copy--)\n  {\n    state->lens[state->have++] = (unsigned short) len;\n  }\n\n  *strm_ref = strm;\n  *next_idx_ref = next_idx;\n  *have_ref = have;\n  *hold_ref = hold;\n  *bits_ref = bits;\n  *copy_ref = copy;\n  *len_ref = len;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "strm_ref",
                        "type": "z_streamp * const",
                        "definition": [
                            "z_streamp * const strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const copy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct inflate_state",
                        "type": "struct inflate_state * const",
                        "definition": [
                            "struct inflate_state * const state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here",
                        "type": "code",
                        "definition": [
                            "code here"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = *strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hold",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long hold = *hold_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned",
                        "definition": [
                            "unsigned bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy",
                        "type": "unsigned",
                        "definition": [
                            "unsigned copy = *copy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned",
                        "definition": [
                            "unsigned len = *len_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "inflate_table",
            "header": "int inflate_table(codetype type, unsigned short *lens, unsigned codes, code **table, unsigned *bits, unsigned short *work)",
            "params": [
                "codetype type",
                "unsigned short *lens",
                "unsigned codes",
                "code **table",
                "unsigned *bits",
                "unsigned short *work"
            ],
            "definition": "int inflate_table(codetype type, unsigned short *lens, unsigned codes, code **table, unsigned *bits, unsigned short *work)\n{\n  unsigned len;\n  unsigned sym;\n  unsigned min;\n  unsigned max;\n  unsigned root;\n  unsigned curr;\n  unsigned drop;\n  int left;\n  unsigned used;\n  unsigned huff;\n  unsigned incr;\n  unsigned fill;\n  unsigned low;\n  unsigned mask;\n  code here;\n  code *next;\n  unsigned int next_idx = 0;\n  const unsigned short *base;\n  unsigned int base_idx = 0;\n  const unsigned short *extra;\n  unsigned int extra_idx = 0;\n  unsigned match;\n  unsigned short count[15 + 1];\n  unsigned short offs[15 + 1];\n  static const unsigned short lbase[31] = {3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};\n  static const unsigned short lext[31] = {16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 198, 203};\n  static const unsigned short dbase[32] = {1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0};\n  static const unsigned short dext[32] = {16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64};\n  for (len = 0; len <= 15; len += 1)\n  {\n    count[len] = 0;\n  }\n\n  for (sym = 0; sym < codes; sym += 1)\n  {\n    count[lens[sym]] += 1;\n  }\n\n  root = *bits;\n  for (max = 15; max >= 1; max -= 1)\n  {\n    if (count[max] != 0)\n    {\n      break;\n    }\n  }\n\n  if (root > max)\n  {\n    root = max;\n  }\n  if (max == 0)\n  {\n    here.op = (unsigned char) 64;\n    here.bits = (unsigned char) 1;\n    here.val = (unsigned short) 0;\n    *((*table)++) = here;\n    *((*table)++) = here;\n    *bits = 1;\n    return 0;\n  }\n  for (min = 1; min < max; min += 1)\n  {\n    if (count[min] != 0)\n    {\n      break;\n    }\n  }\n\n  if (root < min)\n  {\n    root = min;\n  }\n  left = 1;\n  for (len = 1; len <= 15; len += 1)\n  {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0)\n    {\n      return -1;\n    }\n  }\n\n  if ((left > 0) && ((type == CODES) || (max != 1)))\n  {\n    return -1;\n  }\n  offs[1] = 0;\n  for (len = 1; len < 15; len += 1)\n  {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  for (sym = 0; sym < codes; sym += 1)\n  {\n    if (lens[sym] != 0)\n    {\n      work[offs[lens[sym]]++] = (unsigned short) sym;\n    }\n  }\n\n  switch (type)\n  {\n    case CODES:\n    {\n      base_idx = (extra = &extra[extra_idx + extra_idx]);\n      match = 20;\n      break;\n    }\n\n    case LENS:\n    {\n      base_idx = lbase;\n      extra_idx = lext;\n      match = 257;\n      break;\n    }\n\n    default:\n    {\n      base_idx = dbase;\n      extra_idx = dext;\n      match = 0;\n    }\n\n  }\n\n  huff = 0;\n  sym = 0;\n  len = min;\n  next_idx = *table;\n  curr = root;\n  drop = 0;\n  low = (unsigned) (-1);\n  used = 1U << root;\n  mask = used - 1;\n  if (((type == LENS) && (used > 852)) || ((type == DISTS) && (used > 592)))\n  {\n    return 1;\n  }\n  for (;;)\n  {\n    helper_inflate_table_1(&len, &sym, &min, &curr, &drop, &left, &used, &huff, &incr, &fill, &low, &here, &next_idx, type, lens, table, work, max, root, mask, next, base, base_idx, extra, extra_idx, match, count);\n  }\n\n  if (huff != 0)\n  {\n    here.op = (unsigned char) 64;\n    here.bits = (unsigned char) (len - drop);\n    here.val = (unsigned short) 0;\n    next[huff + next_idx] = here;\n  }\n  *table += used;\n  *bits = root;\n  return 0;\n}\n\n",
            "calle": [
                "helper_inflate_table_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "type",
                        "type": "codetype",
                        "definition": [
                            "codetype type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lens",
                        "type": "unsigned short *",
                        "definition": [
                            "unsigned short *lens"
                        ]
                    },
                    {
                        "path": null,
                        "name": "codes",
                        "type": "unsigned",
                        "definition": [
                            "unsigned codes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "table",
                        "type": "code **",
                        "definition": [
                            "code **table"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "unsigned *",
                        "definition": [
                            "unsigned *bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "work",
                        "type": "unsigned short *",
                        "definition": [
                            "unsigned short *work"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned",
                        "definition": [
                            "unsigned len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sym",
                        "type": "unsigned",
                        "definition": [
                            "unsigned sym"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min",
                        "type": "unsigned",
                        "definition": [
                            "unsigned min"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "unsigned",
                        "definition": [
                            "unsigned max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "root",
                        "type": "unsigned",
                        "definition": [
                            "unsigned root"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curr",
                        "type": "unsigned",
                        "definition": [
                            "unsigned curr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "drop",
                        "type": "unsigned",
                        "definition": [
                            "unsigned drop"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left",
                        "type": "int",
                        "definition": [
                            "int left"
                        ]
                    },
                    {
                        "path": null,
                        "name": "used",
                        "type": "unsigned",
                        "definition": [
                            "unsigned used"
                        ]
                    },
                    {
                        "path": null,
                        "name": "huff",
                        "type": "unsigned",
                        "definition": [
                            "unsigned huff"
                        ]
                    },
                    {
                        "path": null,
                        "name": "incr",
                        "type": "unsigned",
                        "definition": [
                            "unsigned incr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fill",
                        "type": "unsigned",
                        "definition": [
                            "unsigned fill"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "unsigned",
                        "definition": [
                            "unsigned low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask",
                        "type": "unsigned",
                        "definition": [
                            "unsigned mask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here",
                        "type": "code",
                        "definition": [
                            "code here"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "code *",
                        "definition": [
                            "code *next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base",
                        "type": "const unsigned short *",
                        "definition": [
                            "const unsigned short *base"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int base_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extra",
                        "type": "const unsigned short *",
                        "definition": [
                            "const unsigned short *extra"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extra_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int extra_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "match",
                        "type": "unsigned",
                        "definition": [
                            "unsigned match"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "unsigned short [15 + 1]",
                        "definition": [
                            "unsigned short count[15 + 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offs",
                        "type": "unsigned short [15 + 1]",
                        "definition": [
                            "unsigned short offs[15 + 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lbase",
                        "type": "const unsigned short [31]",
                        "definition": [
                            "static const unsigned short lbase[31] = {3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lext",
                        "type": "const unsigned short [31]",
                        "definition": [
                            "static const unsigned short lext[31] = {16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 198, 203}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dbase",
                        "type": "const unsigned short [32]",
                        "definition": [
                            "static const unsigned short dbase[32] = {1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dext",
                        "type": "const unsigned short [32]",
                        "definition": [
                            "static const unsigned short dext[32] = {16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_inflate_table_1",
            "header": "",
            "params": [
                "unsigned * const len_ref",
                "unsigned * const sym_ref",
                "unsigned * const min_ref",
                "unsigned * const curr_ref",
                "unsigned * const drop_ref",
                "int * const left_ref",
                "unsigned * const used_ref",
                "unsigned * const huff_ref",
                "unsigned * const incr_ref",
                "unsigned * const fill_ref",
                "unsigned * const low_ref",
                "code * const here_ref",
                "unsigned int * const next_idx_ref",
                "codetype type",
                "unsigned short * const lens",
                "code ** const table",
                "unsigned short * const work",
                "unsigned max",
                "unsigned root",
                "unsigned mask",
                "code * const next",
                "const unsigned short * const base",
                "unsigned int base_idx",
                "const unsigned short * const extra",
                "unsigned int extra_idx",
                "unsigned match",
                "unsigned short count[15 + 1]"
            ],
            "definition": "int helper_inflate_table_1(unsigned * const len_ref, unsigned * const sym_ref, unsigned * const min_ref, unsigned * const curr_ref, unsigned * const drop_ref, int * const left_ref, unsigned * const used_ref, unsigned * const huff_ref, unsigned * const incr_ref, unsigned * const fill_ref, unsigned * const low_ref, code * const here_ref, unsigned int * const next_idx_ref, codetype type, unsigned short * const lens, code ** const table, unsigned short * const work, unsigned max, unsigned root, unsigned mask, code * const next, const unsigned short * const base, unsigned int base_idx, const unsigned short * const extra, unsigned int extra_idx, unsigned match, unsigned short count[15 + 1])\n{\n  unsigned len = *len_ref;\n  unsigned sym = *sym_ref;\n  unsigned min = *min_ref;\n  unsigned curr = *curr_ref;\n  unsigned drop = *drop_ref;\n  int left = *left_ref;\n  unsigned used = *used_ref;\n  unsigned huff = *huff_ref;\n  unsigned incr = *incr_ref;\n  unsigned fill = *fill_ref;\n  unsigned low = *low_ref;\n  code here = *here_ref;\n  unsigned int next_idx = *next_idx_ref;\n  here.bits = (unsigned char) (len - drop);\n  if ((work[sym] + 1U) < match)\n  {\n    here.op = (unsigned char) 0;\n    here.val = work[sym];\n  }\n  else\n    if (work[sym] >= match)\n  {\n    here.op = (unsigned char) extra[(work[sym] - match) + extra_idx];\n    here.val = base[(work[sym] - match) + base_idx];\n  }\n  else\n  {\n    here.op = (unsigned char) (32 + 64);\n    here.val = 0;\n  }\n  incr = 1U << (len - drop);\n  fill = 1U << curr;\n  min = fill;\n  do\n  {\n    fill -= incr;\n    next[((huff >> drop) + fill) + next_idx] = here;\n  }\n  while (fill != 0);\n  incr = 1U << (len - 1);\n  while (huff & incr)\n  {\n    incr >>= 1;\n  }\n\n  if (incr != 0)\n  {\n    huff &= incr - 1;\n    huff += incr;\n  }\n  else\n    huff = 0;\n  sym += 1;\n  if ((--count[len]) == 0)\n  {\n    if (len == max)\n    {\n      break;\n    }\n    len = lens[work[sym]];\n  }\n  if ((len > root) && ((huff & mask) != low))\n  {\n    helper_helper_inflate_table_1_1(&curr, &drop, &left, &used, &low, &next_idx, type, table, max, root, mask, next, count, len, min, huff);\n  }\n  *len_ref = len;\n  *sym_ref = sym;\n  *min_ref = min;\n  *curr_ref = curr;\n  *drop_ref = drop;\n  *left_ref = left;\n  *used_ref = used;\n  *huff_ref = huff;\n  *incr_ref = incr;\n  *fill_ref = fill;\n  *low_ref = low;\n  *here_ref = here;\n  *next_idx_ref = next_idx;\n}\n\n",
            "calle": [
                "helper_helper_inflate_table_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sym_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const sym_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const min_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curr_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const curr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "drop_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const drop_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const left_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "used_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const used_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "huff_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const huff_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "incr_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const incr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fill_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const fill_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const low_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here_ref",
                        "type": "code * const",
                        "definition": [
                            "code * const here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "codetype",
                        "definition": [
                            "codetype type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lens",
                        "type": "unsigned short * const",
                        "definition": [
                            "unsigned short * const lens"
                        ]
                    },
                    {
                        "path": null,
                        "name": "table",
                        "type": "code ** const",
                        "definition": [
                            "code ** const table"
                        ]
                    },
                    {
                        "path": null,
                        "name": "work",
                        "type": "unsigned short * const",
                        "definition": [
                            "unsigned short * const work"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "unsigned",
                        "definition": [
                            "unsigned max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "root",
                        "type": "unsigned",
                        "definition": [
                            "unsigned root"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask",
                        "type": "unsigned",
                        "definition": [
                            "unsigned mask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "code * const",
                        "definition": [
                            "code * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base",
                        "type": "const unsigned short * const",
                        "definition": [
                            "const unsigned short * const base"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int base_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extra",
                        "type": "const unsigned short * const",
                        "definition": [
                            "const unsigned short * const extra"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extra_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int extra_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "match",
                        "type": "unsigned",
                        "definition": [
                            "unsigned match"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "unsigned short [15 + 1]",
                        "definition": [
                            "unsigned short count[15 + 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned",
                        "definition": [
                            "unsigned len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sym",
                        "type": "unsigned",
                        "definition": [
                            "unsigned sym = *sym_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min",
                        "type": "unsigned",
                        "definition": [
                            "unsigned min = *min_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curr",
                        "type": "unsigned",
                        "definition": [
                            "unsigned curr = *curr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "drop",
                        "type": "unsigned",
                        "definition": [
                            "unsigned drop = *drop_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left",
                        "type": "int",
                        "definition": [
                            "int left = *left_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "used",
                        "type": "unsigned",
                        "definition": [
                            "unsigned used = *used_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "huff",
                        "type": "unsigned",
                        "definition": [
                            "unsigned huff = *huff_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "incr",
                        "type": "unsigned",
                        "definition": [
                            "unsigned incr = *incr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fill",
                        "type": "unsigned",
                        "definition": [
                            "unsigned fill = *fill_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "unsigned",
                        "definition": [
                            "unsigned low = *low_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "here",
                        "type": "code",
                        "definition": [
                            "code here = *here_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_inflate_table_1_1",
            "header": "",
            "params": [
                "unsigned * const curr_ref",
                "unsigned * const drop_ref",
                "int * const left_ref",
                "unsigned * const used_ref",
                "unsigned * const low_ref",
                "unsigned int * const next_idx_ref",
                "codetype type",
                "code ** const table",
                "unsigned max",
                "unsigned root",
                "unsigned mask",
                "code * const next",
                "unsigned short count[15 + 1]",
                "unsigned len",
                "unsigned min",
                "unsigned huff"
            ],
            "definition": "int helper_helper_inflate_table_1_1(unsigned * const curr_ref, unsigned * const drop_ref, int * const left_ref, unsigned * const used_ref, unsigned * const low_ref, unsigned int * const next_idx_ref, codetype type, code ** const table, unsigned max, unsigned root, unsigned mask, code * const next, unsigned short count[15 + 1], unsigned len, unsigned min, unsigned huff)\n{\n  unsigned curr = *curr_ref;\n  unsigned drop = *drop_ref;\n  int left = *left_ref;\n  unsigned used = *used_ref;\n  unsigned low = *low_ref;\n  unsigned int next_idx = *next_idx_ref;\n  if (drop == 0)\n  {\n    drop = root;\n  }\n  next_idx += min;\n  curr = len - drop;\n  left = (int) (1 << curr);\n  while ((curr + drop) < max)\n  {\n    left -= count[curr + drop];\n    if (left <= 0)\n    {\n      break;\n    }\n    curr += 1;\n    left <<= 1;\n  }\n\n  used += 1U << curr;\n  if (((type == LENS) && (used > 852)) || ((type == DISTS) && (used > 592)))\n  {\n    return 1;\n  }\n  low = huff & mask;\n  (*table)[low].op = (unsigned char) curr;\n  (*table)[low].bits = (unsigned char) root;\n  (*table)[low].val = (unsigned short) ((&next[next_idx]) - (*table));\n  *curr_ref = curr;\n  *drop_ref = drop;\n  *left_ref = left;\n  *used_ref = used;\n  *low_ref = low;\n  *next_idx_ref = next_idx;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "curr_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const curr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "drop_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const drop_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const left_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "used_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const used_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const low_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const next_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "codetype",
                        "definition": [
                            "codetype type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "table",
                        "type": "code ** const",
                        "definition": [
                            "code ** const table"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "unsigned",
                        "definition": [
                            "unsigned max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "root",
                        "type": "unsigned",
                        "definition": [
                            "unsigned root"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask",
                        "type": "unsigned",
                        "definition": [
                            "unsigned mask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "code * const",
                        "definition": [
                            "code * const next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "unsigned short [15 + 1]",
                        "definition": [
                            "unsigned short count[15 + 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned",
                        "definition": [
                            "unsigned len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min",
                        "type": "unsigned",
                        "definition": [
                            "unsigned min"
                        ]
                    },
                    {
                        "path": null,
                        "name": "huff",
                        "type": "unsigned",
                        "definition": [
                            "unsigned huff"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curr",
                        "type": "unsigned",
                        "definition": [
                            "unsigned curr = *curr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "drop",
                        "type": "unsigned",
                        "definition": [
                            "unsigned drop = *drop_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left",
                        "type": "int",
                        "definition": [
                            "int left = *left_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "used",
                        "type": "unsigned",
                        "definition": [
                            "unsigned used = *used_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "unsigned",
                        "definition": [
                            "unsigned low = *low_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = *next_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "_tr_init",
            "header": "void _tr_init(deflate_state *s)",
            "params": [
                "deflate_state *s"
            ],
            "definition": "void _tr_init(deflate_state *s)\n{\n  tr_static_init();\n  s->l_desc.dyn_tree = s->dyn_ltree;\n  s->l_desc.stat_desc = &static_l_desc;\n  s->d_desc.dyn_tree = s->dyn_dtree;\n  s->d_desc.stat_desc = &static_d_desc;\n  s->bl_desc.dyn_tree = s->bl_tree;\n  s->bl_desc.stat_desc = &static_bl_desc;\n  s->bi_buf = 0;\n  s->bi_valid = 0;\n  init_block(s);\n}\n\n",
            "calle": [
                "init_block",
                "tr_static_init"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "static_l_desc",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "static_d_desc",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "static_bl_desc",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "_tr_tally",
            "header": "int _tr_tally(deflate_state *s, unsigned dist, unsigned lc)",
            "params": [
                "deflate_state *s",
                "unsigned dist",
                "unsigned lc"
            ],
            "definition": "int _tr_tally(deflate_state *s, unsigned dist, unsigned lc)\n{\n  s->sym_buf[s->sym_next++] = (uch) dist;\n  s->sym_buf[s->sym_next++] = (uch) (dist >> 8);\n  s->sym_buf[s->sym_next++] = (uch) lc;\n  if (dist == 0)\n  {\n    s->dyn_ltree[lc].fc.freq += 1;\n  }\n  else\n  {\n    s->matches += 1;\n    dist -= 1;\n    ;\n    s->dyn_ltree[(_length_code[lc] + 256) + 1].fc.freq += 1;\n    s->dyn_dtree[(dist < 256) ? (_dist_code[dist]) : (_dist_code[256 + (dist >> 7)])].fc.freq += 1;\n  }\n  return s->sym_next == s->sym_end;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned",
                        "definition": [
                            "unsigned dist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lc",
                        "type": "unsigned",
                        "definition": [
                            "unsigned lc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "_length_code",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "_dist_code",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "_tr_flush_block",
            "header": "void _tr_flush_block(deflate_state *s, charf *buf, ulg stored_len, int last)",
            "params": [
                "deflate_state *s",
                "charf *buf",
                "ulg stored_len",
                "int last"
            ],
            "definition": "void _tr_flush_block(deflate_state *s, charf *buf, ulg stored_len, int last)\n{\n  ulg opt_lenb;\n  ulg static_lenb;\n  int max_blindex = 0;\n  if (s->level > 0)\n  {\n    helper__tr_flush_block_1(&opt_lenb, &static_lenb, &max_blindex, s);\n  }\n  else\n  {\n    ;\n    opt_lenb = (static_lenb = stored_len + 5);\n  }\n  if (((stored_len + 4) <= opt_lenb) && (buf != ((char *) 0)))\n  {\n    _tr_stored_block(s, buf, stored_len, last);\n  }\n  else\n    if (static_lenb == opt_lenb)\n  {\n    helper__tr_flush_block_2(s, last);\n  }\n  else\n  {\n    helper__tr_flush_block_3(s, last, max_blindex);\n  }\n  ;\n  init_block(s);\n  if (last)\n  {\n    bi_windup(s);\n  }\n  ;\n}\n\n",
            "calle": [
                "_tr_stored_block",
                "bi_windup",
                "helper__tr_flush_block_1",
                "helper__tr_flush_block_2",
                "helper__tr_flush_block_3",
                "init_block"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "charf *",
                        "definition": [
                            "charf *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stored_len",
                        "type": "ulg",
                        "definition": [
                            "ulg stored_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last",
                        "type": "int",
                        "definition": [
                            "int last"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_lenb",
                        "type": "ulg",
                        "definition": [
                            "ulg opt_lenb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "static_lenb",
                        "type": "ulg",
                        "definition": [
                            "ulg static_lenb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_blindex",
                        "type": "int",
                        "definition": [
                            "int max_blindex = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "_tr_flush_bits",
            "header": "void _tr_flush_bits(deflate_state *s)",
            "params": [
                "deflate_state *s"
            ],
            "definition": "void _tr_flush_bits(deflate_state *s)\n{\n  bi_flush(s);\n}\n\n",
            "calle": [
                "bi_flush"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "_tr_align",
            "header": "void _tr_align(deflate_state *s)",
            "params": [
                "deflate_state *s"
            ],
            "definition": "void _tr_align(deflate_state *s)\n{\n  {\n    helper__tr_align_1(s);\n  }\n  ;\n  {\n    helper__tr_align_2(s);\n  }\n  ;\n  bi_flush(s);\n}\n\n",
            "calle": [
                "bi_flush",
                "helper__tr_align_1",
                "helper__tr_align_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "_tr_stored_block",
            "header": "void _tr_stored_block(deflate_state *s, charf *buf, ulg stored_len, int last)",
            "params": [
                "deflate_state *s",
                "charf *buf",
                "ulg stored_len",
                "int last"
            ],
            "definition": "void _tr_stored_block(deflate_state *s, charf *buf, ulg stored_len, int last)\n{\n  {\n    helper__tr_stored_block_1(s, last);\n  }\n  ;\n  bi_windup(s);\n  {\n    {\n      s->pending_buf[s->pending++] = (Bytef) ((uch) (((ush) stored_len) & 0xff));\n    }\n    ;\n    {\n      s->pending_buf[s->pending++] = (Bytef) ((uch) (((ush) ((ush) stored_len)) >> 8));\n    }\n    ;\n  }\n  ;\n  {\n    {\n      s->pending_buf[s->pending++] = (Bytef) ((uch) (((ush) (~stored_len)) & 0xff));\n    }\n    ;\n    {\n      s->pending_buf[s->pending++] = (Bytef) ((uch) (((ush) ((ush) (~stored_len))) >> 8));\n    }\n    ;\n  }\n  ;\n  if (stored_len)\n  {\n    memcpy(s->pending_buf + s->pending, (Bytef *) buf, stored_len);\n  }\n  s->pending += stored_len;\n}\n\n",
            "calle": [
                "bi_windup",
                "helper__tr_stored_block_1",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "charf *",
                        "definition": [
                            "charf *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stored_len",
                        "type": "ulg",
                        "definition": [
                            "ulg stored_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last",
                        "type": "int",
                        "definition": [
                            "int last"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bi_reverse",
            "header": "",
            "params": [
                "unsigned code",
                "int len"
            ],
            "definition": "static unsigned bi_reverse(unsigned code, int len)\n{\n  register unsigned res = 0;\n  do\n  {\n    res |= code & 1;\n    code >>= 1, res <<= 1;\n  }\n  while ((--len) > 0);\n  return res >> 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "code",
                        "type": "unsigned",
                        "definition": [
                            "unsigned code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "res",
                        "type": "unsigned",
                        "definition": [
                            "register unsigned res = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bi_flush",
            "header": "",
            "params": [
                "deflate_state *s"
            ],
            "definition": "static void bi_flush(deflate_state *s)\n{\n  if (s->bi_valid == 16)\n  {\n    {\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (s->bi_buf & 0xff));\n      }\n      ;\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (((ush) s->bi_buf) >> 8));\n      }\n      ;\n    }\n    ;\n    s->bi_buf = 0;\n    s->bi_valid = 0;\n  }\n  else\n    if (s->bi_valid >= 8)\n  {\n    {\n      s->pending_buf[s->pending++] = (Bytef) ((Byte) s->bi_buf);\n    }\n    ;\n    s->bi_buf >>= 8;\n    s->bi_valid -= 8;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bi_windup",
            "header": "",
            "params": [
                "deflate_state *s"
            ],
            "definition": "static void bi_windup(deflate_state *s)\n{\n  if (s->bi_valid > 8)\n  {\n    {\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (s->bi_buf & 0xff));\n      }\n      ;\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (((ush) s->bi_buf) >> 8));\n      }\n      ;\n    }\n    ;\n  }\n  else\n    if (s->bi_valid > 0)\n  {\n    {\n      s->pending_buf[s->pending++] = (Bytef) ((Byte) s->bi_buf);\n    }\n    ;\n  }\n  s->bi_buf = 0;\n  s->bi_valid = 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gen_codes",
            "header": "",
            "params": [
                "ct_data *tree",
                "int max_code",
                "ushf *bl_count"
            ],
            "definition": "static void gen_codes(ct_data *tree, int max_code, ushf *bl_count)\n{\n  ush next_code[15 + 1];\n  unsigned code = 0;\n  int bits;\n  int n;\n  for (bits = 1; bits <= 15; bits += 1)\n  {\n    code = (code + bl_count[bits - 1]) << 1;\n    next_code[bits] = (ush) code;\n  }\n\n  ;\n  ;\n  for (n = 0; n <= max_code; n += 1)\n  {\n    int len = tree[n].dl.len;\n    if (len == 0)\n    {\n      continue;\n    }\n    tree[n].fc.code = (ush) bi_reverse(next_code[len]++, len);\n    ;\n  }\n\n}\n\n",
            "calle": [
                "bi_reverse"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "tree",
                        "type": "ct_data *",
                        "definition": [
                            "ct_data *tree"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_code",
                        "type": "int",
                        "definition": [
                            "int max_code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bl_count",
                        "type": "ushf *",
                        "definition": [
                            "ushf *bl_count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_code",
                        "type": "ush [15 + 1]",
                        "definition": [
                            "ush next_code[15 + 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code",
                        "type": "unsigned",
                        "definition": [
                            "unsigned code = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "int",
                        "definition": [
                            "int bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "int",
                        "definition": [
                            "int n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len = tree[n].dl.len"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tr_static_init",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "static void tr_static_init(void)\n{\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "init_block",
            "header": "",
            "params": [
                "deflate_state *s"
            ],
            "definition": "static void init_block(deflate_state *s)\n{\n  int n;\n  for (n = 0; n < ((256 + 1) + 29); n += 1)\n  {\n    s->dyn_ltree[n].fc.freq = 0;\n  }\n\n  for (n = 0; n < 30; n += 1)\n  {\n    s->dyn_dtree[n].fc.freq = 0;\n  }\n\n  for (n = 0; n < 19; n += 1)\n  {\n    s->bl_tree[n].fc.freq = 0;\n  }\n\n  s->dyn_ltree[256].fc.freq = 1;\n  s->opt_len = (s->static_len = 0L);\n  s->sym_next = (s->matches = 0);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "int",
                        "definition": [
                            "int n"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pqdownheap",
            "header": "",
            "params": [
                "deflate_state *s",
                "ct_data *tree",
                "int k"
            ],
            "definition": "static void pqdownheap(deflate_state *s, ct_data *tree, int k)\n{\n  int v = s->heap[k];\n  int j = k << 1;\n  while (j <= s->heap_len)\n  {\n    if ((j < s->heap_len) && ((tree[s->heap[j + 1]].fc.freq < tree[s->heap[j]].fc.freq) || ((tree[s->heap[j + 1]].fc.freq == tree[s->heap[j]].fc.freq) && (s->depth[s->heap[j + 1]] <= s->depth[s->heap[j]]))))\n    {\n      j += 1;\n    }\n    if ((tree[v].fc.freq < tree[s->heap[j]].fc.freq) || ((tree[v].fc.freq == tree[s->heap[j]].fc.freq) && (s->depth[v] <= s->depth[s->heap[j]])))\n    {\n      break;\n    }\n    s->heap[k] = s->heap[j];\n    k = j;\n    j <<= 1;\n  }\n\n  s->heap[k] = v;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tree",
                        "type": "ct_data *",
                        "definition": [
                            "ct_data *tree"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "int",
                        "definition": [
                            "int k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "int",
                        "definition": [
                            "int v = s->heap[k]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j = k << 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gen_bitlen",
            "header": "",
            "params": [
                "deflate_state *s",
                "tree_desc *desc"
            ],
            "definition": "static void gen_bitlen(deflate_state *s, tree_desc *desc)\n{\n  ct_data *tree = desc->dyn_tree;\n  int max_code = desc->max_code;\n  const ct_data *stree = desc->stat_desc->static_tree;\n  const intf *extra = desc->stat_desc->extra_bits;\n  int base = desc->stat_desc->extra_base;\n  int max_length = desc->stat_desc->max_length;\n  int h;\n  int n;\n  int m;\n  int bits;\n  int xbits;\n  ush f;\n  int overflow = 0;\n  for (bits = 0; bits <= 15; bits += 1)\n  {\n    s->bl_count[bits] = 0;\n  }\n\n  tree[s->heap[s->heap_max]].dl.len = 0;\n  for (h = s->heap_max + 1; h < ((2 * ((256 + 1) + 29)) + 1); h += 1)\n  {\n    helper_gen_bitlen_2(&n, &bits, &xbits, &f, &overflow, s, tree, max_code, stree, extra, base, max_length, h);\n  }\n\n  if (overflow == 0)\n  {\n    return;\n  }\n  ;\n  do\n  {\n    bits = max_length - 1;\n    while (s->bl_count[bits] == 0)\n    {\n      bits -= 1;\n    }\n\n    s->bl_count[bits] -= 1;\n    s->bl_count[bits + 1] += 2;\n    s->bl_count[max_length] -= 1;\n    overflow -= 2;\n  }\n  while (overflow > 0);\n  for (bits = max_length; bits != 0; bits -= 1)\n  {\n    helper_gen_bitlen_1(&h, &n, &m, s, tree, max_code, bits);\n  }\n\n}\n\n",
            "calle": [
                "helper_gen_bitlen_1",
                "helper_gen_bitlen_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "desc",
                        "type": "tree_desc *",
                        "definition": [
                            "tree_desc *desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tree",
                        "type": "ct_data *",
                        "definition": [
                            "ct_data *tree = desc->dyn_tree"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_code",
                        "type": "int",
                        "definition": [
                            "int max_code = desc->max_code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stree",
                        "type": "const ct_data *",
                        "definition": [
                            "const ct_data *stree = desc->stat_desc->static_tree"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extra",
                        "type": "const intf *",
                        "definition": [
                            "const intf *extra = desc->stat_desc->extra_bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base",
                        "type": "int",
                        "definition": [
                            "int base = desc->stat_desc->extra_base"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_length",
                        "type": "int",
                        "definition": [
                            "int max_length = desc->stat_desc->max_length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "int",
                        "definition": [
                            "int h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "int",
                        "definition": [
                            "int n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m",
                        "type": "int",
                        "definition": [
                            "int m"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "int",
                        "definition": [
                            "int bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xbits",
                        "type": "int",
                        "definition": [
                            "int xbits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f",
                        "type": "ush",
                        "definition": [
                            "ush f"
                        ]
                    },
                    {
                        "path": null,
                        "name": "overflow",
                        "type": "int",
                        "definition": [
                            "int overflow = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "build_tree",
            "header": "",
            "params": [
                "deflate_state *s",
                "tree_desc *desc"
            ],
            "definition": "static void build_tree(deflate_state *s, tree_desc *desc)\n{\n  ct_data *tree = desc->dyn_tree;\n  const ct_data *stree = desc->stat_desc->static_tree;\n  int elems = desc->stat_desc->elems;\n  int n;\n  int m;\n  int max_code = -1;\n  int node;\n  s->heap_len = 0, s->heap_max = (2 * ((256 + 1) + 29)) + 1;\n  for (n = 0; n < elems; n += 1)\n  {\n    if (tree[n].fc.freq != 0)\n    {\n      s->heap[++s->heap_len] = (max_code = n);\n      s->depth[n] = 0;\n    }\n    else\n    {\n      tree[n].dl.len = 0;\n    }\n  }\n\n  while (s->heap_len < 2)\n  {\n    node = (s->heap[++s->heap_len] = (max_code < 2) ? (++max_code) : (0));\n    tree[node].fc.freq = 1;\n    s->depth[node] = 0;\n    s->opt_len -= 1;\n    if (stree)\n    {\n      s->static_len -= stree[node].dl.len;\n    }\n  }\n\n  desc->max_code = max_code;\n  for (n = s->heap_len / 2; n >= 1; n -= 1)\n  {\n    pqdownheap(s, tree, n);\n  }\n\n  node = elems;\n  do\n  {\n    helper_build_tree_1(&n, &m, &node, s, tree);\n  }\n  while (s->heap_len >= 2);\n  s->heap[--s->heap_max] = s->heap[1];\n  gen_bitlen(s, (tree_desc *) desc);\n  gen_codes((ct_data *) tree, max_code, s->bl_count);\n}\n\n",
            "calle": [
                "gen_bitlen",
                "gen_codes",
                "helper_build_tree_1",
                "pqdownheap"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "desc",
                        "type": "tree_desc *",
                        "definition": [
                            "tree_desc *desc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tree",
                        "type": "ct_data *",
                        "definition": [
                            "ct_data *tree = desc->dyn_tree"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stree",
                        "type": "const ct_data *",
                        "definition": [
                            "const ct_data *stree = desc->stat_desc->static_tree"
                        ]
                    },
                    {
                        "path": null,
                        "name": "elems",
                        "type": "int",
                        "definition": [
                            "int elems = desc->stat_desc->elems"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "int",
                        "definition": [
                            "int n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m",
                        "type": "int",
                        "definition": [
                            "int m"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_code",
                        "type": "int",
                        "definition": [
                            "int max_code = -1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "node",
                        "type": "int",
                        "definition": [
                            "int node"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "scan_tree",
            "header": "",
            "params": [
                "deflate_state *s",
                "ct_data *tree",
                "int max_code"
            ],
            "definition": "static void scan_tree(deflate_state *s, ct_data *tree, int max_code)\n{\n  int n;\n  int prevlen = -1;\n  int curlen;\n  int nextlen = tree[0].dl.len;\n  int count = 0;\n  int max_count = 7;\n  int min_count = 4;\n  if (nextlen == 0)\n  {\n    max_count = 138, min_count = 3;\n  }\n  tree[max_code + 1].dl.len = (ush) 0xffff;\n  for (n = 0; n <= max_code; n += 1)\n  {\n    curlen = nextlen;\n    nextlen = tree[n + 1].dl.len;\n    if (((++count) < max_count) && (curlen == nextlen))\n    {\n      continue;\n    }\n    else\n      if (count < min_count)\n    {\n      s->bl_tree[curlen].fc.freq += count;\n    }\n    else\n      if (curlen != 0)\n    {\n      if (curlen != prevlen)\n      {\n        s->bl_tree[curlen].fc.freq += 1;\n      }\n      s->bl_tree[16].fc.freq += 1;\n    }\n    else\n      if (count <= 10)\n    {\n      s->bl_tree[17].fc.freq += 1;\n    }\n    else\n    {\n      s->bl_tree[18].fc.freq += 1;\n    }\n    count = 0;\n    prevlen = curlen;\n    if (nextlen == 0)\n    {\n      max_count = 138, min_count = 3;\n    }\n    else\n      if (curlen == nextlen)\n    {\n      max_count = 6, min_count = 3;\n    }\n    else\n    {\n      max_count = 7, min_count = 4;\n    }\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tree",
                        "type": "ct_data *",
                        "definition": [
                            "ct_data *tree"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_code",
                        "type": "int",
                        "definition": [
                            "int max_code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "int",
                        "definition": [
                            "int n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prevlen",
                        "type": "int",
                        "definition": [
                            "int prevlen = -1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curlen",
                        "type": "int",
                        "definition": [
                            "int curlen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextlen",
                        "type": "int",
                        "definition": [
                            "int nextlen = tree[0].dl.len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_count",
                        "type": "int",
                        "definition": [
                            "int max_count = 7"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min_count",
                        "type": "int",
                        "definition": [
                            "int min_count = 4"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "send_tree",
            "header": "",
            "params": [
                "deflate_state *s",
                "ct_data *tree",
                "int max_code"
            ],
            "definition": "static void send_tree(deflate_state *s, ct_data *tree, int max_code)\n{\n  int n;\n  int prevlen = -1;\n  int curlen;\n  int nextlen = tree[0].dl.len;\n  int count = 0;\n  int max_count = 7;\n  int min_count = 4;\n  if (nextlen == 0)\n  {\n    max_count = 138, min_count = 3;\n  }\n  for (n = 0; n <= max_code; n += 1)\n  {\n    helper_send_tree_1(&prevlen, &curlen, &nextlen, &count, &max_count, &min_count, s, tree, n);\n  }\n\n}\n\n",
            "calle": [
                "helper_send_tree_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tree",
                        "type": "ct_data *",
                        "definition": [
                            "ct_data *tree"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_code",
                        "type": "int",
                        "definition": [
                            "int max_code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "int",
                        "definition": [
                            "int n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prevlen",
                        "type": "int",
                        "definition": [
                            "int prevlen = -1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curlen",
                        "type": "int",
                        "definition": [
                            "int curlen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextlen",
                        "type": "int",
                        "definition": [
                            "int nextlen = tree[0].dl.len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_count",
                        "type": "int",
                        "definition": [
                            "int max_count = 7"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min_count",
                        "type": "int",
                        "definition": [
                            "int min_count = 4"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "build_bl_tree",
            "header": "",
            "params": [
                "deflate_state *s"
            ],
            "definition": "static int build_bl_tree(deflate_state *s)\n{\n  int max_blindex;\n  scan_tree(s, (ct_data *) s->dyn_ltree, s->l_desc.max_code);\n  scan_tree(s, (ct_data *) s->dyn_dtree, s->d_desc.max_code);\n  build_tree(s, (tree_desc *) (&s->bl_desc));\n  for (max_blindex = 19 - 1; max_blindex >= 3; max_blindex -= 1)\n  {\n    if (s->bl_tree[bl_order[max_blindex]].dl.len != 0)\n    {\n      break;\n    }\n  }\n\n  s->opt_len += (((3 * (((ulg) max_blindex) + 1)) + 5) + 5) + 4;\n  ;\n  return max_blindex;\n}\n\n",
            "calle": [
                "build_tree",
                "scan_tree"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_blindex",
                        "type": "int",
                        "definition": [
                            "int max_blindex"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bl_order",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "send_all_trees",
            "header": "",
            "params": [
                "deflate_state *s",
                "int lcodes",
                "int dcodes",
                "int blcodes"
            ],
            "definition": "static void send_all_trees(deflate_state *s, int lcodes, int dcodes, int blcodes)\n{\n  int rank;\n  ;\n  ;\n  ;\n  {\n    helper_send_all_trees_1(s, lcodes);\n  }\n  ;\n  {\n    helper_send_all_trees_2(s, dcodes);\n  }\n  ;\n  {\n    helper_send_all_trees_3(s, blcodes);\n  }\n  ;\n  for (rank = 0; rank < blcodes; rank += 1)\n  {\n    helper_send_all_trees_4(s, rank);\n  }\n\n  ;\n  send_tree(s, (ct_data *) s->dyn_ltree, lcodes - 1);\n  ;\n  send_tree(s, (ct_data *) s->dyn_dtree, dcodes - 1);\n  ;\n}\n\n",
            "calle": [
                "helper_send_all_trees_1",
                "helper_send_all_trees_2",
                "helper_send_all_trees_3",
                "helper_send_all_trees_4",
                "send_tree"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lcodes",
                        "type": "int",
                        "definition": [
                            "int lcodes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dcodes",
                        "type": "int",
                        "definition": [
                            "int dcodes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blcodes",
                        "type": "int",
                        "definition": [
                            "int blcodes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rank",
                        "type": "int",
                        "definition": [
                            "int rank"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "compress_block",
            "header": "",
            "params": [
                "deflate_state *s",
                "const ct_data *ltree",
                "const ct_data *dtree"
            ],
            "definition": "static void compress_block(deflate_state *s, const ct_data *ltree, const ct_data *dtree)\n{\n  unsigned dist;\n  int lc;\n  unsigned sx = 0;\n  unsigned code;\n  int extra;\n  if (s->sym_next != 0)\n  {\n    helper_compress_block_2(&dist, &lc, &sx, &code, &extra, s, ltree, dtree);\n  }\n  {\n    helper_compress_block_1(s, ltree);\n  }\n  ;\n}\n\n",
            "calle": [
                "helper_compress_block_1",
                "helper_compress_block_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ltree",
                        "type": "const ct_data *",
                        "definition": [
                            "const ct_data *ltree"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dtree",
                        "type": "const ct_data *",
                        "definition": [
                            "const ct_data *dtree"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned",
                        "definition": [
                            "unsigned dist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lc",
                        "type": "int",
                        "definition": [
                            "int lc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sx",
                        "type": "unsigned",
                        "definition": [
                            "unsigned sx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code",
                        "type": "unsigned",
                        "definition": [
                            "unsigned code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extra",
                        "type": "int",
                        "definition": [
                            "int extra"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "detect_data_type",
            "header": "",
            "params": [
                "deflate_state *s"
            ],
            "definition": "static int detect_data_type(deflate_state *s)\n{\n  unsigned long block_mask = 0xf3ffc07fUL;\n  int n;\n  for (n = 0; n <= 31; n += 1, block_mask >>= 1)\n  {\n    if ((block_mask & 1) && (s->dyn_ltree[n].fc.freq != 0))\n    {\n      return 0;\n    }\n  }\n\n  if (((s->dyn_ltree[9].fc.freq != 0) || (s->dyn_ltree[10].fc.freq != 0)) || (s->dyn_ltree[13].fc.freq != 0))\n  {\n    return 1;\n  }\n  for (n = 32; n < 256; n += 1)\n  {\n    if (s->dyn_ltree[n].fc.freq != 0)\n    {\n      return 1;\n    }\n  }\n\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state *",
                        "definition": [
                            "deflate_state *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block_mask",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long block_mask = 0xf3ffc07fUL"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "int",
                        "definition": [
                            "int n"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_gen_bitlen_1",
            "header": "",
            "params": [
                "int * const h_ref",
                "int * const n_ref",
                "int * const m_ref",
                "deflate_state * const s",
                "ct_data * const tree",
                "int max_code",
                "int bits"
            ],
            "definition": "void helper_gen_bitlen_1(int * const h_ref, int * const n_ref, int * const m_ref, deflate_state * const s, ct_data * const tree, int max_code, int bits)\n{\n  int h = *h_ref;\n  int n = *n_ref;\n  int m = *m_ref;\n  n = s->bl_count[bits];\n  while (n != 0)\n  {\n    h -= 1;\n    m = s->heap[h];\n    if (m > max_code)\n    {\n      continue;\n    }\n    if (((unsigned) tree[m].dl.len) != ((unsigned) bits))\n    {\n      ;\n      s->opt_len += (((ulg) bits) - tree[m].dl.len) * tree[m].fc.freq;\n      tree[m].dl.len = (ush) bits;\n    }\n    n -= 1;\n  }\n\n  *h_ref = h;\n  *n_ref = n;\n  *m_ref = m;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "h_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const h_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const m_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tree",
                        "type": "ct_data * const",
                        "definition": [
                            "ct_data * const tree"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_code",
                        "type": "int",
                        "definition": [
                            "int max_code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "int",
                        "definition": [
                            "int bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "int",
                        "definition": [
                            "int h = *h_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "int",
                        "definition": [
                            "int n = *n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m",
                        "type": "int",
                        "definition": [
                            "int m = *m_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_gen_bitlen_2",
            "header": "",
            "params": [
                "int * const n_ref",
                "int * const bits_ref",
                "int * const xbits_ref",
                "ush * const f_ref",
                "int * const overflow_ref",
                "deflate_state * const s",
                "ct_data * const tree",
                "int max_code",
                "const ct_data * const stree",
                "const intf * const extra",
                "int base",
                "int max_length",
                "int h"
            ],
            "definition": "void helper_gen_bitlen_2(int * const n_ref, int * const bits_ref, int * const xbits_ref, ush * const f_ref, int * const overflow_ref, deflate_state * const s, ct_data * const tree, int max_code, const ct_data * const stree, const intf * const extra, int base, int max_length, int h)\n{\n  int n = *n_ref;\n  int bits = *bits_ref;\n  int xbits = *xbits_ref;\n  ush f = *f_ref;\n  int overflow = *overflow_ref;\n  n = s->heap[h];\n  bits = tree[tree[n].dl.dad].dl.len + 1;\n  if (bits > max_length)\n  {\n    bits = max_length, overflow++;\n    overflow += 1;\n  }\n  tree[n].dl.len = (ush) bits;\n  if (n > max_code)\n  {\n    continue;\n  }\n  s->bl_count[bits] += 1;\n  xbits = 0;\n  if (n >= base)\n  {\n    xbits = extra[n - base];\n  }\n  f = tree[n].fc.freq;\n  s->opt_len += ((ulg) f) * ((unsigned) (bits + xbits));\n  if (stree)\n  {\n    s->static_len += ((ulg) f) * ((unsigned) (stree[n].dl.len + xbits));\n  }\n  *n_ref = n;\n  *bits_ref = bits;\n  *xbits_ref = xbits;\n  *f_ref = f;\n  *overflow_ref = overflow;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xbits_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const xbits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f_ref",
                        "type": "ush * const",
                        "definition": [
                            "ush * const f_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "overflow_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const overflow_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tree",
                        "type": "ct_data * const",
                        "definition": [
                            "ct_data * const tree"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_code",
                        "type": "int",
                        "definition": [
                            "int max_code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stree",
                        "type": "const ct_data * const",
                        "definition": [
                            "const ct_data * const stree"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extra",
                        "type": "const intf * const",
                        "definition": [
                            "const intf * const extra"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base",
                        "type": "int",
                        "definition": [
                            "int base"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_length",
                        "type": "int",
                        "definition": [
                            "int max_length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "int",
                        "definition": [
                            "int h"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "int",
                        "definition": [
                            "int n = *n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits",
                        "type": "int",
                        "definition": [
                            "int bits = *bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xbits",
                        "type": "int",
                        "definition": [
                            "int xbits = *xbits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f",
                        "type": "ush",
                        "definition": [
                            "ush f = *f_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "overflow",
                        "type": "int",
                        "definition": [
                            "int overflow = *overflow_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_build_tree_1",
            "header": "",
            "params": [
                "int * const n_ref",
                "int * const m_ref",
                "int * const node_ref",
                "deflate_state * const s",
                "ct_data * const tree"
            ],
            "definition": "void helper_build_tree_1(int * const n_ref, int * const m_ref, int * const node_ref, deflate_state * const s, ct_data * const tree)\n{\n  int n = *n_ref;\n  int m = *m_ref;\n  int node = *node_ref;\n  {\n    n = s->heap[1];\n    s->heap[1] = s->heap[s->heap_len--];\n    pqdownheap(s, tree, 1);\n  }\n  ;\n  m = s->heap[1];\n  s->heap[--s->heap_max] = n;\n  s->heap[--s->heap_max] = m;\n  tree[node].fc.freq = tree[n].fc.freq + tree[m].fc.freq;\n  s->depth[node] = (uch) (((s->depth[n] >= s->depth[m]) ? (s->depth[n]) : (s->depth[m])) + 1);\n  tree[n].dl.dad = (tree[m].dl.dad = (ush) node);\n  s->heap[1] = node;\n  node += 1;\n  pqdownheap(s, tree, 1);\n  *n_ref = n;\n  *m_ref = m;\n  *node_ref = node;\n}\n\n",
            "calle": [
                "pqdownheap"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "n_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const m_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "node_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const node_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tree",
                        "type": "ct_data * const",
                        "definition": [
                            "ct_data * const tree"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "int",
                        "definition": [
                            "int n = *n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m",
                        "type": "int",
                        "definition": [
                            "int m = *m_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "node",
                        "type": "int",
                        "definition": [
                            "int node = *node_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_send_tree_1",
            "header": "",
            "params": [
                "int * const prevlen_ref",
                "int * const curlen_ref",
                "int * const nextlen_ref",
                "int * const count_ref",
                "int * const max_count_ref",
                "int * const min_count_ref",
                "deflate_state * const s",
                "ct_data * const tree",
                "int n"
            ],
            "definition": "void helper_send_tree_1(int * const prevlen_ref, int * const curlen_ref, int * const nextlen_ref, int * const count_ref, int * const max_count_ref, int * const min_count_ref, deflate_state * const s, ct_data * const tree, int n)\n{\n  int prevlen = *prevlen_ref;\n  int curlen = *curlen_ref;\n  int nextlen = *nextlen_ref;\n  int count = *count_ref;\n  int max_count = *max_count_ref;\n  int min_count = *min_count_ref;\n  curlen = nextlen;\n  nextlen = tree[n + 1].dl.len;\n  if (((++count) < max_count) && (curlen == nextlen))\n  {\n    continue;\n  }\n  else\n    if (count < min_count)\n  {\n    helper_helper_send_tree_1_1(s, curlen, count);\n  }\n  else\n    if (curlen != 0)\n  {\n    helper_helper_send_tree_1_4(&count, s, prevlen, curlen);\n  }\n  else\n    if (count <= 10)\n  {\n    helper_helper_send_tree_1_2(s, count);\n  }\n  else\n  {\n    helper_helper_send_tree_1_3(s, count);\n  }\n  count = 0;\n  prevlen = curlen;\n  if (nextlen == 0)\n  {\n    max_count = 138, min_count = 3;\n  }\n  else\n    if (curlen == nextlen)\n  {\n    max_count = 6, min_count = 3;\n  }\n  else\n  {\n    max_count = 7, min_count = 4;\n  }\n  *prevlen_ref = prevlen;\n  *curlen_ref = curlen;\n  *nextlen_ref = nextlen;\n  *count_ref = count;\n  *max_count_ref = max_count;\n  *min_count_ref = min_count;\n}\n\n",
            "calle": [
                "helper_helper_send_tree_1_1",
                "helper_helper_send_tree_1_2",
                "helper_helper_send_tree_1_3",
                "helper_helper_send_tree_1_4"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "prevlen_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const prevlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curlen_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const curlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextlen_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const nextlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const count_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_count_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const max_count_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min_count_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const min_count_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tree",
                        "type": "ct_data * const",
                        "definition": [
                            "ct_data * const tree"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "int",
                        "definition": [
                            "int n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prevlen",
                        "type": "int",
                        "definition": [
                            "int prevlen = *prevlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curlen",
                        "type": "int",
                        "definition": [
                            "int curlen = *curlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nextlen",
                        "type": "int",
                        "definition": [
                            "int nextlen = *nextlen_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count = *count_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_count",
                        "type": "int",
                        "definition": [
                            "int max_count = *max_count_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min_count",
                        "type": "int",
                        "definition": [
                            "int min_count = *min_count_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_send_all_trees_1",
            "header": "",
            "params": [
                "deflate_state * const s",
                "int lcodes"
            ],
            "definition": "void helper_send_all_trees_1(deflate_state * const s, int lcodes)\n{\n  int len = 5;\n  if (s->bi_valid > (((int) 16) - len))\n  {\n    int val = ((int) lcodes) - 257;\n    s->bi_buf |= ((ush) val) << s->bi_valid;\n    {\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (s->bi_buf & 0xff));\n      }\n      ;\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (((ush) s->bi_buf) >> 8));\n      }\n      ;\n    }\n    ;\n    s->bi_buf = ((ush) val) >> (16 - s->bi_valid);\n    s->bi_valid += len - 16;\n  }\n  else\n  {\n    s->bi_buf |= ((ush) (lcodes - 257)) << s->bi_valid;\n    s->bi_valid += len;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lcodes",
                        "type": "int",
                        "definition": [
                            "int lcodes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len = 5"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int",
                        "definition": [
                            "int val = ((int) lcodes) - 257"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_send_all_trees_2",
            "header": "",
            "params": [
                "deflate_state * const s",
                "int dcodes"
            ],
            "definition": "void helper_send_all_trees_2(deflate_state * const s, int dcodes)\n{\n  int len = 5;\n  if (s->bi_valid > (((int) 16) - len))\n  {\n    int val = ((int) dcodes) - 1;\n    s->bi_buf |= ((ush) val) << s->bi_valid;\n    {\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (s->bi_buf & 0xff));\n      }\n      ;\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (((ush) s->bi_buf) >> 8));\n      }\n      ;\n    }\n    ;\n    s->bi_buf = ((ush) val) >> (16 - s->bi_valid);\n    s->bi_valid += len - 16;\n  }\n  else\n  {\n    s->bi_buf |= ((ush) (dcodes - 1)) << s->bi_valid;\n    s->bi_valid += len;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dcodes",
                        "type": "int",
                        "definition": [
                            "int dcodes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len = 5"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int",
                        "definition": [
                            "int val = ((int) dcodes) - 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_send_all_trees_3",
            "header": "",
            "params": [
                "deflate_state * const s",
                "int blcodes"
            ],
            "definition": "void helper_send_all_trees_3(deflate_state * const s, int blcodes)\n{\n  int len = 4;\n  if (s->bi_valid > (((int) 16) - len))\n  {\n    int val = ((int) blcodes) - 4;\n    s->bi_buf |= ((ush) val) << s->bi_valid;\n    {\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (s->bi_buf & 0xff));\n      }\n      ;\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (((ush) s->bi_buf) >> 8));\n      }\n      ;\n    }\n    ;\n    s->bi_buf = ((ush) val) >> (16 - s->bi_valid);\n    s->bi_valid += len - 16;\n  }\n  else\n  {\n    s->bi_buf |= ((ush) (blcodes - 4)) << s->bi_valid;\n    s->bi_valid += len;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blcodes",
                        "type": "int",
                        "definition": [
                            "int blcodes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len = 4"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int",
                        "definition": [
                            "int val = ((int) blcodes) - 4"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_send_all_trees_4",
            "header": "",
            "params": [
                "deflate_state * const s",
                "int rank"
            ],
            "definition": "void helper_send_all_trees_4(deflate_state * const s, int rank)\n{\n  ;\n  {\n    int len = 3;\n    if (s->bi_valid > (((int) 16) - len))\n    {\n      int val = (int) s->bl_tree[bl_order[rank]].dl.len;\n      s->bi_buf |= ((ush) val) << s->bi_valid;\n      {\n        {\n          s->pending_buf[s->pending++] = (Bytef) ((uch) (s->bi_buf & 0xff));\n        }\n        ;\n        {\n          s->pending_buf[s->pending++] = (Bytef) ((uch) (((ush) s->bi_buf) >> 8));\n        }\n        ;\n      }\n      ;\n      s->bi_buf = ((ush) val) >> (16 - s->bi_valid);\n      s->bi_valid += len - 16;\n    }\n    else\n    {\n      s->bi_buf |= ((ush) s->bl_tree[bl_order[rank]].dl.len) << s->bi_valid;\n      s->bi_valid += len;\n    }\n  }\n  ;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rank",
                        "type": "int",
                        "definition": [
                            "int rank"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len = 3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int",
                        "definition": [
                            "int val = (int) s->bl_tree[bl_order[rank]].dl.len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bl_order",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper__tr_stored_block_1",
            "header": "",
            "params": [
                "deflate_state * const s",
                "int last"
            ],
            "definition": "void helper__tr_stored_block_1(deflate_state * const s, int last)\n{\n  int len = 3;\n  if (s->bi_valid > (((int) 16) - len))\n  {\n    int val = ((int) (0 << 1)) + last;\n    s->bi_buf |= ((ush) val) << s->bi_valid;\n    {\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (s->bi_buf & 0xff));\n      }\n      ;\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (((ush) s->bi_buf) >> 8));\n      }\n      ;\n    }\n    ;\n    s->bi_buf = ((ush) val) >> (16 - s->bi_valid);\n    s->bi_valid += len - 16;\n  }\n  else\n  {\n    s->bi_buf |= ((ush) ((0 << 1) + last)) << s->bi_valid;\n    s->bi_valid += len;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last",
                        "type": "int",
                        "definition": [
                            "int last"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len = 3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int",
                        "definition": [
                            "int val = ((int) (0 << 1)) + last"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper__tr_align_1",
            "header": "",
            "params": [
                "deflate_state * const s"
            ],
            "definition": "void helper__tr_align_1(deflate_state * const s)\n{\n  int len = 3;\n  if (s->bi_valid > (((int) 16) - len))\n  {\n    int val = ((int) 1) << 1;\n    s->bi_buf |= ((ush) val) << s->bi_valid;\n    {\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (s->bi_buf & 0xff));\n      }\n      ;\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (((ush) s->bi_buf) >> 8));\n      }\n      ;\n    }\n    ;\n    s->bi_buf = ((ush) val) >> (16 - s->bi_valid);\n    s->bi_valid += len - 16;\n  }\n  else\n  {\n    s->bi_buf |= ((ush) (1 << 1)) << s->bi_valid;\n    s->bi_valid += len;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len = 3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int",
                        "definition": [
                            "int val = ((int) 1) << 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper__tr_align_2",
            "header": "",
            "params": [
                "deflate_state * const s"
            ],
            "definition": "void helper__tr_align_2(deflate_state * const s)\n{\n  int len = static_ltree[256].dl.len;\n  if (s->bi_valid > (((int) 16) - len))\n  {\n    int val = (int) static_ltree[256].fc.code;\n    s->bi_buf |= ((ush) val) << s->bi_valid;\n    {\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (s->bi_buf & 0xff));\n      }\n      ;\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (((ush) s->bi_buf) >> 8));\n      }\n      ;\n    }\n    ;\n    s->bi_buf = ((ush) val) >> (16 - s->bi_valid);\n    s->bi_valid += len - 16;\n  }\n  else\n  {\n    s->bi_buf |= ((ush) static_ltree[256].fc.code) << s->bi_valid;\n    s->bi_valid += len;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len = static_ltree[256].dl.len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int",
                        "definition": [
                            "int val = (int) static_ltree[256].fc.code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "static_ltree",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_compress_block_1",
            "header": "",
            "params": [
                "deflate_state * const s",
                "const ct_data * const ltree"
            ],
            "definition": "void helper_compress_block_1(deflate_state * const s, const ct_data * const ltree)\n{\n  int len = ltree[256].dl.len;\n  if (s->bi_valid > (((int) 16) - len))\n  {\n    int val = (int) ltree[256].fc.code;\n    s->bi_buf |= ((ush) val) << s->bi_valid;\n    {\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (s->bi_buf & 0xff));\n      }\n      ;\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (((ush) s->bi_buf) >> 8));\n      }\n      ;\n    }\n    ;\n    s->bi_buf = ((ush) val) >> (16 - s->bi_valid);\n    s->bi_valid += len - 16;\n  }\n  else\n  {\n    s->bi_buf |= ((ush) ltree[256].fc.code) << s->bi_valid;\n    s->bi_valid += len;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ltree",
                        "type": "const ct_data * const",
                        "definition": [
                            "const ct_data * const ltree"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len = ltree[256].dl.len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int",
                        "definition": [
                            "int val = (int) ltree[256].fc.code"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_compress_block_2",
            "header": "",
            "params": [
                "unsigned * const dist_ref",
                "int * const lc_ref",
                "unsigned * const sx_ref",
                "unsigned * const code_ref",
                "int * const extra_ref",
                "deflate_state * const s",
                "const ct_data * const ltree",
                "const ct_data * const dtree"
            ],
            "definition": "void helper_compress_block_2(unsigned * const dist_ref, int * const lc_ref, unsigned * const sx_ref, unsigned * const code_ref, int * const extra_ref, deflate_state * const s, const ct_data * const ltree, const ct_data * const dtree)\n{\n  unsigned dist = *dist_ref;\n  int lc = *lc_ref;\n  unsigned sx = *sx_ref;\n  unsigned code = *code_ref;\n  int extra = *extra_ref;\n  do\n  {\n    helper_helper_compress_block_2_1(&dist, &lc, &sx, &code, &extra, s, ltree, dtree);\n  }\n  while (sx < s->sym_next);\n  *dist_ref = dist;\n  *lc_ref = lc;\n  *sx_ref = sx;\n  *code_ref = code;\n  *extra_ref = extra;\n}\n\n",
            "calle": [
                "helper_helper_compress_block_2_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dist_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const dist_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lc_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const lc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sx_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const sx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const code_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extra_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const extra_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ltree",
                        "type": "const ct_data * const",
                        "definition": [
                            "const ct_data * const ltree"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dtree",
                        "type": "const ct_data * const",
                        "definition": [
                            "const ct_data * const dtree"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned",
                        "definition": [
                            "unsigned dist = *dist_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lc",
                        "type": "int",
                        "definition": [
                            "int lc = *lc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sx",
                        "type": "unsigned",
                        "definition": [
                            "unsigned sx = *sx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code",
                        "type": "unsigned",
                        "definition": [
                            "unsigned code = *code_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extra",
                        "type": "int",
                        "definition": [
                            "int extra = *extra_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper__tr_flush_block_1",
            "header": "",
            "params": [
                "ulg * const opt_lenb_ref",
                "ulg * const static_lenb_ref",
                "int * const max_blindex_ref",
                "deflate_state * const s"
            ],
            "definition": "void helper__tr_flush_block_1(ulg * const opt_lenb_ref, ulg * const static_lenb_ref, int * const max_blindex_ref, deflate_state * const s)\n{\n  ulg opt_lenb = *opt_lenb_ref;\n  ulg static_lenb = *static_lenb_ref;\n  int max_blindex = *max_blindex_ref;\n  if (s->strm->data_type == 2)\n  {\n    s->strm->data_type = detect_data_type(s);\n  }\n  build_tree(s, (tree_desc *) (&s->l_desc));\n  ;\n  build_tree(s, (tree_desc *) (&s->d_desc));\n  ;\n  max_blindex = build_bl_tree(s);\n  opt_lenb = ((s->opt_len + 3) + 7) >> 3;\n  static_lenb = ((s->static_len + 3) + 7) >> 3;\n  ;\n  if ((static_lenb <= opt_lenb) || (s->strategy == 4))\n  {\n    opt_lenb = static_lenb;\n  }\n  *opt_lenb_ref = opt_lenb;\n  *static_lenb_ref = static_lenb;\n  *max_blindex_ref = max_blindex;\n}\n\n",
            "calle": [
                "build_bl_tree",
                "build_tree",
                "detect_data_type"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opt_lenb_ref",
                        "type": "ulg * const",
                        "definition": [
                            "ulg * const opt_lenb_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "static_lenb_ref",
                        "type": "ulg * const",
                        "definition": [
                            "ulg * const static_lenb_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_blindex_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const max_blindex_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_lenb",
                        "type": "ulg",
                        "definition": [
                            "ulg opt_lenb = *opt_lenb_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "static_lenb",
                        "type": "ulg",
                        "definition": [
                            "ulg static_lenb = *static_lenb_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_blindex",
                        "type": "int",
                        "definition": [
                            "int max_blindex = *max_blindex_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper__tr_flush_block_2",
            "header": "",
            "params": [
                "deflate_state * const s",
                "int last"
            ],
            "definition": "void helper__tr_flush_block_2(deflate_state * const s, int last)\n{\n  {\n    int len = 3;\n    if (s->bi_valid > (((int) 16) - len))\n    {\n      int val = ((int) (1 << 1)) + last;\n      s->bi_buf |= ((ush) val) << s->bi_valid;\n      {\n        {\n          s->pending_buf[s->pending++] = (Bytef) ((uch) (s->bi_buf & 0xff));\n        }\n        ;\n        {\n          s->pending_buf[s->pending++] = (Bytef) ((uch) (((ush) s->bi_buf) >> 8));\n        }\n        ;\n      }\n      ;\n      s->bi_buf = ((ush) val) >> (16 - s->bi_valid);\n      s->bi_valid += len - 16;\n    }\n    else\n    {\n      s->bi_buf |= ((ush) ((1 << 1) + last)) << s->bi_valid;\n      s->bi_valid += len;\n    }\n  }\n  ;\n  compress_block(s, (const ct_data *) static_ltree, (const ct_data *) static_dtree);\n}\n\n",
            "calle": [
                "compress_block"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last",
                        "type": "int",
                        "definition": [
                            "int last"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len = 3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int",
                        "definition": [
                            "int val = ((int) (1 << 1)) + last"
                        ]
                    },
                    {
                        "path": null,
                        "name": "static_ltree",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "static_dtree",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper__tr_flush_block_3",
            "header": "",
            "params": [
                "deflate_state * const s",
                "int last",
                "int max_blindex"
            ],
            "definition": "void helper__tr_flush_block_3(deflate_state * const s, int last, int max_blindex)\n{\n  {\n    int len = 3;\n    if (s->bi_valid > (((int) 16) - len))\n    {\n      int val = ((int) (2 << 1)) + last;\n      s->bi_buf |= ((ush) val) << s->bi_valid;\n      {\n        {\n          s->pending_buf[s->pending++] = (Bytef) ((uch) (s->bi_buf & 0xff));\n        }\n        ;\n        {\n          s->pending_buf[s->pending++] = (Bytef) ((uch) (((ush) s->bi_buf) >> 8));\n        }\n        ;\n      }\n      ;\n      s->bi_buf = ((ush) val) >> (16 - s->bi_valid);\n      s->bi_valid += len - 16;\n    }\n    else\n    {\n      s->bi_buf |= ((ush) ((2 << 1) + last)) << s->bi_valid;\n      s->bi_valid += len;\n    }\n  }\n  ;\n  send_all_trees(s, s->l_desc.max_code + 1, s->d_desc.max_code + 1, max_blindex + 1);\n  compress_block(s, (const ct_data *) s->dyn_ltree, (const ct_data *) s->dyn_dtree);\n}\n\n",
            "calle": [
                "compress_block",
                "send_all_trees"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last",
                        "type": "int",
                        "definition": [
                            "int last"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_blindex",
                        "type": "int",
                        "definition": [
                            "int max_blindex"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len = 3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int",
                        "definition": [
                            "int val = ((int) (2 << 1)) + last"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_send_tree_1_1",
            "header": "",
            "params": [
                "deflate_state * const s",
                "int curlen",
                "int count"
            ],
            "definition": "void helper_helper_send_tree_1_1(deflate_state * const s, int curlen, int count)\n{\n  do\n  {\n    {\n      int len = s->bl_tree[curlen].dl.len;\n      if (s->bi_valid > (((int) 16) - len))\n      {\n        int val = (int) s->bl_tree[curlen].fc.code;\n        s->bi_buf |= ((ush) val) << s->bi_valid;\n        {\n          {\n            s->pending_buf[s->pending++] = (Bytef) ((uch) (s->bi_buf & 0xff));\n          }\n          ;\n          {\n            s->pending_buf[s->pending++] = (Bytef) ((uch) (((ush) s->bi_buf) >> 8));\n          }\n          ;\n        }\n        ;\n        s->bi_buf = ((ush) val) >> (16 - s->bi_valid);\n        s->bi_valid += len - 16;\n      }\n      else\n      {\n        s->bi_buf |= ((ush) s->bl_tree[curlen].fc.code) << s->bi_valid;\n        s->bi_valid += len;\n      }\n    }\n    ;\n  }\n  while ((--count) != 0);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curlen",
                        "type": "int",
                        "definition": [
                            "int curlen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len = s->bl_tree[curlen].dl.len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int",
                        "definition": [
                            "int val = (int) s->bl_tree[curlen].fc.code"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_send_tree_1_2",
            "header": "",
            "params": [
                "deflate_state * const s",
                "int count"
            ],
            "definition": "void helper_helper_send_tree_1_2(deflate_state * const s, int count)\n{\n  {\n    helper_helper_helper_send_tree_1_2_1(s);\n  }\n  ;\n  {\n    helper_helper_helper_send_tree_1_2_2(s, count);\n  }\n  ;\n}\n\n",
            "calle": [
                "helper_helper_helper_send_tree_1_2_1",
                "helper_helper_helper_send_tree_1_2_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_send_tree_1_3",
            "header": "",
            "params": [
                "deflate_state * const s",
                "int count"
            ],
            "definition": "void helper_helper_send_tree_1_3(deflate_state * const s, int count)\n{\n  {\n    helper_helper_helper_send_tree_1_3_1(s);\n  }\n  ;\n  {\n    helper_helper_helper_send_tree_1_3_2(s, count);\n  }\n  ;\n}\n\n",
            "calle": [
                "helper_helper_helper_send_tree_1_3_1",
                "helper_helper_helper_send_tree_1_3_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_send_tree_1_4",
            "header": "",
            "params": [
                "int * const count_ref",
                "deflate_state * const s",
                "int prevlen",
                "int curlen"
            ],
            "definition": "void helper_helper_send_tree_1_4(int * const count_ref, deflate_state * const s, int prevlen, int curlen)\n{\n  int count = *count_ref;\n  if (curlen != prevlen)\n  {\n    helper_helper_helper_send_tree_1_4_3(&count, s, curlen);\n  }\n  ;\n  {\n    helper_helper_helper_send_tree_1_4_1(s);\n  }\n  ;\n  {\n    helper_helper_helper_send_tree_1_4_2(s, count);\n  }\n  ;\n  *count_ref = count;\n}\n\n",
            "calle": [
                "helper_helper_helper_send_tree_1_4_1",
                "helper_helper_helper_send_tree_1_4_2",
                "helper_helper_helper_send_tree_1_4_3"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "count_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const count_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prevlen",
                        "type": "int",
                        "definition": [
                            "int prevlen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curlen",
                        "type": "int",
                        "definition": [
                            "int curlen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count = *count_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_compress_block_2_1",
            "header": "",
            "params": [
                "unsigned * const dist_ref",
                "int * const lc_ref",
                "unsigned * const sx_ref",
                "unsigned * const code_ref",
                "int * const extra_ref",
                "deflate_state * const s",
                "const ct_data * const ltree",
                "const ct_data * const dtree"
            ],
            "definition": "void helper_helper_compress_block_2_1(unsigned * const dist_ref, int * const lc_ref, unsigned * const sx_ref, unsigned * const code_ref, int * const extra_ref, deflate_state * const s, const ct_data * const ltree, const ct_data * const dtree)\n{\n  unsigned dist = *dist_ref;\n  int lc = *lc_ref;\n  unsigned sx = *sx_ref;\n  unsigned code = *code_ref;\n  int extra = *extra_ref;\n  dist = s->sym_buf[sx] & 0xff;\n  sx += 1;\n  dist += ((unsigned) (s->sym_buf[sx] & 0xff)) << 8;\n  sx += 1;\n  lc = s->sym_buf[sx];\n  sx += 1;\n  if (dist == 0)\n  {\n    helper_helper_helper_compress_block_2_1_1(s, ltree, lc);\n  }\n  else\n  {\n    helper_helper_helper_compress_block_2_1_2(&dist, &lc, &code, &extra, s, ltree, dtree);\n  }\n  ;\n  *dist_ref = dist;\n  *lc_ref = lc;\n  *sx_ref = sx;\n  *code_ref = code;\n  *extra_ref = extra;\n}\n\n",
            "calle": [
                "helper_helper_helper_compress_block_2_1_1",
                "helper_helper_helper_compress_block_2_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dist_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const dist_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lc_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const lc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sx_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const sx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const code_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extra_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const extra_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ltree",
                        "type": "const ct_data * const",
                        "definition": [
                            "const ct_data * const ltree"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dtree",
                        "type": "const ct_data * const",
                        "definition": [
                            "const ct_data * const dtree"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned",
                        "definition": [
                            "unsigned dist = *dist_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lc",
                        "type": "int",
                        "definition": [
                            "int lc = *lc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sx",
                        "type": "unsigned",
                        "definition": [
                            "unsigned sx = *sx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code",
                        "type": "unsigned",
                        "definition": [
                            "unsigned code = *code_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extra",
                        "type": "int",
                        "definition": [
                            "int extra = *extra_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_send_tree_1_2_1",
            "header": "",
            "params": [
                "deflate_state * const s"
            ],
            "definition": "void helper_helper_helper_send_tree_1_2_1(deflate_state * const s)\n{\n  int len = s->bl_tree[17].dl.len;\n  if (s->bi_valid > (((int) 16) - len))\n  {\n    int val = (int) s->bl_tree[17].fc.code;\n    s->bi_buf |= ((ush) val) << s->bi_valid;\n    {\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (s->bi_buf & 0xff));\n      }\n      ;\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (((ush) s->bi_buf) >> 8));\n      }\n      ;\n    }\n    ;\n    s->bi_buf = ((ush) val) >> (16 - s->bi_valid);\n    s->bi_valid += len - 16;\n  }\n  else\n  {\n    s->bi_buf |= ((ush) s->bl_tree[17].fc.code) << s->bi_valid;\n    s->bi_valid += len;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len = s->bl_tree[17].dl.len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int",
                        "definition": [
                            "int val = (int) s->bl_tree[17].fc.code"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_send_tree_1_2_2",
            "header": "",
            "params": [
                "deflate_state * const s",
                "int count"
            ],
            "definition": "void helper_helper_helper_send_tree_1_2_2(deflate_state * const s, int count)\n{\n  int len = 3;\n  if (s->bi_valid > (((int) 16) - len))\n  {\n    int val = ((int) count) - 3;\n    s->bi_buf |= ((ush) val) << s->bi_valid;\n    {\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (s->bi_buf & 0xff));\n      }\n      ;\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (((ush) s->bi_buf) >> 8));\n      }\n      ;\n    }\n    ;\n    s->bi_buf = ((ush) val) >> (16 - s->bi_valid);\n    s->bi_valid += len - 16;\n  }\n  else\n  {\n    s->bi_buf |= ((ush) (count - 3)) << s->bi_valid;\n    s->bi_valid += len;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len = 3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int",
                        "definition": [
                            "int val = ((int) count) - 3"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_send_tree_1_3_1",
            "header": "",
            "params": [
                "deflate_state * const s"
            ],
            "definition": "void helper_helper_helper_send_tree_1_3_1(deflate_state * const s)\n{\n  int len = s->bl_tree[18].dl.len;\n  if (s->bi_valid > (((int) 16) - len))\n  {\n    int val = (int) s->bl_tree[18].fc.code;\n    s->bi_buf |= ((ush) val) << s->bi_valid;\n    {\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (s->bi_buf & 0xff));\n      }\n      ;\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (((ush) s->bi_buf) >> 8));\n      }\n      ;\n    }\n    ;\n    s->bi_buf = ((ush) val) >> (16 - s->bi_valid);\n    s->bi_valid += len - 16;\n  }\n  else\n  {\n    s->bi_buf |= ((ush) s->bl_tree[18].fc.code) << s->bi_valid;\n    s->bi_valid += len;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len = s->bl_tree[18].dl.len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int",
                        "definition": [
                            "int val = (int) s->bl_tree[18].fc.code"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_send_tree_1_3_2",
            "header": "",
            "params": [
                "deflate_state * const s",
                "int count"
            ],
            "definition": "void helper_helper_helper_send_tree_1_3_2(deflate_state * const s, int count)\n{\n  int len = 7;\n  if (s->bi_valid > (((int) 16) - len))\n  {\n    int val = ((int) count) - 11;\n    s->bi_buf |= ((ush) val) << s->bi_valid;\n    {\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (s->bi_buf & 0xff));\n      }\n      ;\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (((ush) s->bi_buf) >> 8));\n      }\n      ;\n    }\n    ;\n    s->bi_buf = ((ush) val) >> (16 - s->bi_valid);\n    s->bi_valid += len - 16;\n  }\n  else\n  {\n    s->bi_buf |= ((ush) (count - 11)) << s->bi_valid;\n    s->bi_valid += len;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len = 7"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int",
                        "definition": [
                            "int val = ((int) count) - 11"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_send_tree_1_4_1",
            "header": "",
            "params": [
                "deflate_state * const s"
            ],
            "definition": "void helper_helper_helper_send_tree_1_4_1(deflate_state * const s)\n{\n  int len = s->bl_tree[16].dl.len;\n  if (s->bi_valid > (((int) 16) - len))\n  {\n    int val = (int) s->bl_tree[16].fc.code;\n    s->bi_buf |= ((ush) val) << s->bi_valid;\n    {\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (s->bi_buf & 0xff));\n      }\n      ;\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (((ush) s->bi_buf) >> 8));\n      }\n      ;\n    }\n    ;\n    s->bi_buf = ((ush) val) >> (16 - s->bi_valid);\n    s->bi_valid += len - 16;\n  }\n  else\n  {\n    s->bi_buf |= ((ush) s->bl_tree[16].fc.code) << s->bi_valid;\n    s->bi_valid += len;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len = s->bl_tree[16].dl.len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int",
                        "definition": [
                            "int val = (int) s->bl_tree[16].fc.code"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_send_tree_1_4_2",
            "header": "",
            "params": [
                "deflate_state * const s",
                "int count"
            ],
            "definition": "void helper_helper_helper_send_tree_1_4_2(deflate_state * const s, int count)\n{\n  int len = 2;\n  if (s->bi_valid > (((int) 16) - len))\n  {\n    int val = ((int) count) - 3;\n    s->bi_buf |= ((ush) val) << s->bi_valid;\n    {\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (s->bi_buf & 0xff));\n      }\n      ;\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (((ush) s->bi_buf) >> 8));\n      }\n      ;\n    }\n    ;\n    s->bi_buf = ((ush) val) >> (16 - s->bi_valid);\n    s->bi_valid += len - 16;\n  }\n  else\n  {\n    s->bi_buf |= ((ush) (count - 3)) << s->bi_valid;\n    s->bi_valid += len;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len = 2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int",
                        "definition": [
                            "int val = ((int) count) - 3"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_send_tree_1_4_3",
            "header": "",
            "params": [
                "int * const count_ref",
                "deflate_state * const s",
                "int curlen"
            ],
            "definition": "void helper_helper_helper_send_tree_1_4_3(int * const count_ref, deflate_state * const s, int curlen)\n{\n  int count = *count_ref;\n  {\n    int len = s->bl_tree[curlen].dl.len;\n    if (s->bi_valid > (((int) 16) - len))\n    {\n      int val = (int) s->bl_tree[curlen].fc.code;\n      s->bi_buf |= ((ush) val) << s->bi_valid;\n      {\n        {\n          s->pending_buf[s->pending++] = (Bytef) ((uch) (s->bi_buf & 0xff));\n        }\n        ;\n        {\n          s->pending_buf[s->pending++] = (Bytef) ((uch) (((ush) s->bi_buf) >> 8));\n        }\n        ;\n      }\n      ;\n      s->bi_buf = ((ush) val) >> (16 - s->bi_valid);\n      s->bi_valid += len - 16;\n    }\n    else\n    {\n      s->bi_buf |= ((ush) s->bl_tree[curlen].fc.code) << s->bi_valid;\n      s->bi_valid += len;\n    }\n  }\n  ;\n  count -= 1;\n  *count_ref = count;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "count_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const count_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curlen",
                        "type": "int",
                        "definition": [
                            "int curlen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count = *count_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len = s->bl_tree[curlen].dl.len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int",
                        "definition": [
                            "int val = (int) s->bl_tree[curlen].fc.code"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_compress_block_2_1_1",
            "header": "",
            "params": [
                "deflate_state * const s",
                "const ct_data * const ltree",
                "int lc"
            ],
            "definition": "void helper_helper_helper_compress_block_2_1_1(deflate_state * const s, const ct_data * const ltree, int lc)\n{\n  {\n    int len = ltree[lc].dl.len;\n    if (s->bi_valid > (((int) 16) - len))\n    {\n      int val = (int) ltree[lc].fc.code;\n      s->bi_buf |= ((ush) val) << s->bi_valid;\n      {\n        {\n          s->pending_buf[s->pending++] = (Bytef) ((uch) (s->bi_buf & 0xff));\n        }\n        ;\n        {\n          s->pending_buf[s->pending++] = (Bytef) ((uch) (((ush) s->bi_buf) >> 8));\n        }\n        ;\n      }\n      ;\n      s->bi_buf = ((ush) val) >> (16 - s->bi_valid);\n      s->bi_valid += len - 16;\n    }\n    else\n    {\n      s->bi_buf |= ((ush) ltree[lc].fc.code) << s->bi_valid;\n      s->bi_valid += len;\n    }\n  }\n  ;\n  ;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ltree",
                        "type": "const ct_data * const",
                        "definition": [
                            "const ct_data * const ltree"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lc",
                        "type": "int",
                        "definition": [
                            "int lc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len = ltree[lc].dl.len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int",
                        "definition": [
                            "int val = (int) ltree[lc].fc.code"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_compress_block_2_1_2",
            "header": "",
            "params": [
                "unsigned * const dist_ref",
                "int * const lc_ref",
                "unsigned * const code_ref",
                "int * const extra_ref",
                "deflate_state * const s",
                "const ct_data * const ltree",
                "const ct_data * const dtree"
            ],
            "definition": "void helper_helper_helper_compress_block_2_1_2(unsigned * const dist_ref, int * const lc_ref, unsigned * const code_ref, int * const extra_ref, deflate_state * const s, const ct_data * const ltree, const ct_data * const dtree)\n{\n  unsigned dist = *dist_ref;\n  int lc = *lc_ref;\n  unsigned code = *code_ref;\n  int extra = *extra_ref;\n  code = _length_code[lc];\n  {\n    helper_helper_helper_helper_compress_block_2_1_2_1(s, ltree, code);\n  }\n  ;\n  extra = extra_lbits[code];\n  if (extra != 0)\n  {\n    helper_helper_helper_helper_compress_block_2_1_2_3(&lc, s, code, extra);\n  }\n  dist -= 1;\n  code = (dist < 256) ? (_dist_code[dist]) : (_dist_code[256 + (dist >> 7)]);\n  ;\n  {\n    helper_helper_helper_helper_compress_block_2_1_2_2(s, dtree, code);\n  }\n  ;\n  extra = extra_dbits[code];\n  if (extra != 0)\n  {\n    helper_helper_helper_helper_compress_block_2_1_2_4(&dist, s, code, extra);\n  }\n  *dist_ref = dist;\n  *lc_ref = lc;\n  *code_ref = code;\n  *extra_ref = extra;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_compress_block_2_1_2_1",
                "helper_helper_helper_helper_compress_block_2_1_2_2",
                "helper_helper_helper_helper_compress_block_2_1_2_3",
                "helper_helper_helper_helper_compress_block_2_1_2_4"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dist_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const dist_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lc_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const lc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const code_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extra_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const extra_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ltree",
                        "type": "const ct_data * const",
                        "definition": [
                            "const ct_data * const ltree"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dtree",
                        "type": "const ct_data * const",
                        "definition": [
                            "const ct_data * const dtree"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned",
                        "definition": [
                            "unsigned dist = *dist_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lc",
                        "type": "int",
                        "definition": [
                            "int lc = *lc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code",
                        "type": "unsigned",
                        "definition": [
                            "unsigned code = *code_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extra",
                        "type": "int",
                        "definition": [
                            "int extra = *extra_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "_length_code",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "extra_lbits",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "_dist_code",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "extra_dbits",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_compress_block_2_1_2_1",
            "header": "",
            "params": [
                "deflate_state * const s",
                "const ct_data * const ltree",
                "unsigned code"
            ],
            "definition": "void helper_helper_helper_helper_compress_block_2_1_2_1(deflate_state * const s, const ct_data * const ltree, unsigned code)\n{\n  int len = ltree[(code + 256) + 1].dl.len;\n  if (s->bi_valid > (((int) 16) - len))\n  {\n    int val = (int) ltree[(code + 256) + 1].fc.code;\n    s->bi_buf |= ((ush) val) << s->bi_valid;\n    {\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (s->bi_buf & 0xff));\n      }\n      ;\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (((ush) s->bi_buf) >> 8));\n      }\n      ;\n    }\n    ;\n    s->bi_buf = ((ush) val) >> (16 - s->bi_valid);\n    s->bi_valid += len - 16;\n  }\n  else\n  {\n    s->bi_buf |= ((ush) ltree[(code + 256) + 1].fc.code) << s->bi_valid;\n    s->bi_valid += len;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ltree",
                        "type": "const ct_data * const",
                        "definition": [
                            "const ct_data * const ltree"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code",
                        "type": "unsigned",
                        "definition": [
                            "unsigned code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len = ltree[(code + 256) + 1].dl.len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int",
                        "definition": [
                            "int val = (int) ltree[(code + 256) + 1].fc.code"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_compress_block_2_1_2_2",
            "header": "",
            "params": [
                "deflate_state * const s",
                "const ct_data * const dtree",
                "unsigned code"
            ],
            "definition": "void helper_helper_helper_helper_compress_block_2_1_2_2(deflate_state * const s, const ct_data * const dtree, unsigned code)\n{\n  int len = dtree[code].dl.len;\n  if (s->bi_valid > (((int) 16) - len))\n  {\n    int val = (int) dtree[code].fc.code;\n    s->bi_buf |= ((ush) val) << s->bi_valid;\n    {\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (s->bi_buf & 0xff));\n      }\n      ;\n      {\n        s->pending_buf[s->pending++] = (Bytef) ((uch) (((ush) s->bi_buf) >> 8));\n      }\n      ;\n    }\n    ;\n    s->bi_buf = ((ush) val) >> (16 - s->bi_valid);\n    s->bi_valid += len - 16;\n  }\n  else\n  {\n    s->bi_buf |= ((ush) dtree[code].fc.code) << s->bi_valid;\n    s->bi_valid += len;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dtree",
                        "type": "const ct_data * const",
                        "definition": [
                            "const ct_data * const dtree"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code",
                        "type": "unsigned",
                        "definition": [
                            "unsigned code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len = dtree[code].dl.len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int",
                        "definition": [
                            "int val = (int) dtree[code].fc.code"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_compress_block_2_1_2_3",
            "header": "",
            "params": [
                "int * const lc_ref",
                "deflate_state * const s",
                "unsigned code",
                "int extra"
            ],
            "definition": "void helper_helper_helper_helper_compress_block_2_1_2_3(int * const lc_ref, deflate_state * const s, unsigned code, int extra)\n{\n  int lc = *lc_ref;\n  lc -= base_length[code];\n  {\n    int len = extra;\n    if (s->bi_valid > (((int) 16) - len))\n    {\n      int val = (int) lc;\n      s->bi_buf |= ((ush) val) << s->bi_valid;\n      {\n        {\n          s->pending_buf[s->pending++] = (Bytef) ((uch) (s->bi_buf & 0xff));\n        }\n        ;\n        {\n          s->pending_buf[s->pending++] = (Bytef) ((uch) (((ush) s->bi_buf) >> 8));\n        }\n        ;\n      }\n      ;\n      s->bi_buf = ((ush) val) >> (16 - s->bi_valid);\n      s->bi_valid += len - 16;\n    }\n    else\n    {\n      s->bi_buf |= ((ush) lc) << s->bi_valid;\n      s->bi_valid += len;\n    }\n  }\n  ;\n  *lc_ref = lc;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "lc_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const lc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code",
                        "type": "unsigned",
                        "definition": [
                            "unsigned code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extra",
                        "type": "int",
                        "definition": [
                            "int extra"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lc",
                        "type": "int",
                        "definition": [
                            "int lc = *lc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len = extra"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int",
                        "definition": [
                            "int val = (int) lc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base_length",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_compress_block_2_1_2_4",
            "header": "",
            "params": [
                "unsigned * const dist_ref",
                "deflate_state * const s",
                "unsigned code",
                "int extra"
            ],
            "definition": "void helper_helper_helper_helper_compress_block_2_1_2_4(unsigned * const dist_ref, deflate_state * const s, unsigned code, int extra)\n{\n  unsigned dist = *dist_ref;\n  dist -= (unsigned) base_dist[code];\n  {\n    int len = extra;\n    if (s->bi_valid > (((int) 16) - len))\n    {\n      int val = (int) dist;\n      s->bi_buf |= ((ush) val) << s->bi_valid;\n      {\n        {\n          s->pending_buf[s->pending++] = (Bytef) ((uch) (s->bi_buf & 0xff));\n        }\n        ;\n        {\n          s->pending_buf[s->pending++] = (Bytef) ((uch) (((ush) s->bi_buf) >> 8));\n        }\n        ;\n      }\n      ;\n      s->bi_buf = ((ush) val) >> (16 - s->bi_valid);\n      s->bi_valid += len - 16;\n    }\n    else\n    {\n      s->bi_buf |= ((ush) dist) << s->bi_valid;\n      s->bi_valid += len;\n    }\n  }\n  ;\n  *dist_ref = dist;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dist_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const dist_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "deflate_state * const",
                        "definition": [
                            "deflate_state * const s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code",
                        "type": "unsigned",
                        "definition": [
                            "unsigned code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extra",
                        "type": "int",
                        "definition": [
                            "int extra"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dist",
                        "type": "unsigned",
                        "definition": [
                            "unsigned dist = *dist_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len = extra"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int",
                        "definition": [
                            "int val = (int) dist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "base_dist",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zlibVersion",
            "header": "extern const char *zlibVersion(void)",
            "params": [
                "void"
            ],
            "definition": "const char *zlibVersion(void)\n{\n  return \"1.3-optipng\";\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zlibCompileFlags",
            "header": "extern uLong zlibCompileFlags(void)",
            "params": [
                "void"
            ],
            "definition": "uLong zlibCompileFlags(void)\n{\n  uLong flags;\n  flags = 0;\n  switch ((int) (sizeof(uInt)))\n  {\n    case 2:\n    {\n      break;\n    }\n\n    case 4:\n    {\n      flags += 1;\n      break;\n    }\n\n    case 8:\n    {\n      flags += 2;\n      break;\n    }\n\n    default:\n    {\n      flags += 3;\n    }\n\n  }\n\n  switch ((int) (sizeof(uLong)))\n  {\n    case 2:\n    {\n      break;\n    }\n\n    case 4:\n    {\n      flags += 1 << 2;\n      break;\n    }\n\n    case 8:\n    {\n      flags += 2 << 2;\n      break;\n    }\n\n    default:\n    {\n      flags += 3 << 2;\n    }\n\n  }\n\n  switch ((int) (sizeof(voidpf)))\n  {\n    case 2:\n    {\n      break;\n    }\n\n    case 4:\n    {\n      flags += 1 << 4;\n      break;\n    }\n\n    case 8:\n    {\n      flags += 2 << 4;\n      break;\n    }\n\n    default:\n    {\n      flags += 3 << 4;\n    }\n\n  }\n\n  switch ((int) (sizeof(off_t)))\n  {\n    case 2:\n    {\n      break;\n    }\n\n    case 4:\n    {\n      flags += 1 << 6;\n      break;\n    }\n\n    case 8:\n    {\n      flags += 2 << 6;\n      break;\n    }\n\n    default:\n    {\n      flags += 3 << 6;\n    }\n\n  }\n\n  flags += 1L << 16;\n  flags += 1L << 17;\n  return flags;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "uLong",
                        "definition": [
                            "uLong flags"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zError",
            "header": "extern const char *zError(int)",
            "params": [
                "int err"
            ],
            "definition": "const char *zError(int err)\n{\n  return z_errmsg[2 - err];\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z_errmsg",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zcalloc",
            "header": "voidpf zcalloc(voidpf opaque, unsigned items, unsigned size)",
            "params": [
                "voidpf opaque",
                "unsigned items",
                "unsigned size"
            ],
            "definition": "voidpf zcalloc(voidpf opaque, unsigned items, unsigned size)\n{\n  (void) opaque;\n  return ((sizeof(uInt)) > 2) ? ((voidpf) malloc(items * size)) : ((voidpf) calloc(items, size));\n}\n\n",
            "calle": [
                "calloc",
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "voidpf",
                        "definition": [
                            "voidpf opaque"
                        ]
                    },
                    {
                        "path": null,
                        "name": "items",
                        "type": "unsigned",
                        "definition": [
                            "unsigned items"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "unsigned",
                        "definition": [
                            "unsigned size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "zcfree",
            "header": "void zcfree(voidpf opaque, voidpf ptr)",
            "params": [
                "voidpf opaque",
                "voidpf ptr"
            ],
            "definition": "void zcfree(voidpf opaque, voidpf ptr)\n{\n  (void) opaque;\n  free(ptr);\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "voidpf",
                        "definition": [
                            "voidpf opaque"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "voidpf",
                        "definition": [
                            "voidpf ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "compress",
            "header": "extern int compress(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen)",
            "params": [
                "Bytef *dest",
                "uLongf *destLen",
                "const Bytef *source",
                "uLong sourceLen"
            ],
            "definition": "int compress(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen)\n{\n  return compress2(dest, destLen, source, sourceLen, -1);\n}\n\n",
            "calle": [
                "compress2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dest",
                        "type": "Bytef *",
                        "definition": [
                            "Bytef *dest"
                        ]
                    },
                    {
                        "path": null,
                        "name": "destLen",
                        "type": "uLongf *",
                        "definition": [
                            "uLongf *destLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "source",
                        "type": "const Bytef *",
                        "definition": [
                            "const Bytef *source"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sourceLen",
                        "type": "uLong",
                        "definition": [
                            "uLong sourceLen"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "compress2",
            "header": "extern int compress2(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen, int level)",
            "params": [
                "Bytef *dest",
                "uLongf *destLen",
                "const Bytef *source",
                "uLong sourceLen",
                "int level"
            ],
            "definition": "int compress2(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen, int level)\n{\n  z_stream stream;\n  int err;\n  const uInt max = (uInt) (-1);\n  uLong left;\n  left = *destLen;\n  *destLen = 0;\n  stream.zalloc = (alloc_func) 0;\n  stream.zfree = (free_func) 0;\n  stream.opaque = (voidpf) 0;\n  err = deflateInit_(&stream, level, \"1.3-optipng\", (int) (sizeof(z_stream)));\n  if (err != 0)\n  {\n    return err;\n  }\n  stream.next_out = dest;\n  stream.avail_out = 0;\n  stream.next_in = (const Bytef *) source;\n  stream.avail_in = 0;\n  do\n  {\n    if (stream.avail_out == 0)\n    {\n      stream.avail_out = (left > ((uLong) max)) ? (max) : ((uInt) left);\n      left -= stream.avail_out;\n    }\n    if (stream.avail_in == 0)\n    {\n      stream.avail_in = (sourceLen > ((uLong) max)) ? (max) : ((uInt) sourceLen);\n      sourceLen -= stream.avail_in;\n    }\n    err = deflate(&stream, (sourceLen) ? (0) : (4));\n  }\n  while (err == 0);\n  *destLen = stream.total_out;\n  deflateEnd(&stream);\n  return (err == 1) ? (0) : (err);\n}\n\n",
            "calle": [
                "deflate",
                "deflateEnd",
                "deflateInit_"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dest",
                        "type": "Bytef *",
                        "definition": [
                            "Bytef *dest"
                        ]
                    },
                    {
                        "path": null,
                        "name": "destLen",
                        "type": "uLongf *",
                        "definition": [
                            "uLongf *destLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "source",
                        "type": "const Bytef *",
                        "definition": [
                            "const Bytef *source"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sourceLen",
                        "type": "uLong",
                        "definition": [
                            "uLong sourceLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "int",
                        "definition": [
                            "int level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "z_stream",
                        "definition": [
                            "z_stream stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "const uInt",
                        "definition": [
                            "const uInt max = (uInt) (-1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left",
                        "type": "uLong",
                        "definition": [
                            "uLong left"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "compressBound",
            "header": "extern uLong compressBound(uLong sourceLen)",
            "params": [
                "uLong sourceLen"
            ],
            "definition": "uLong compressBound(uLong sourceLen)\n{\n  return (((sourceLen + (sourceLen >> 12)) + (sourceLen >> 14)) + (sourceLen >> 25)) + 13;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "sourceLen",
                        "type": "uLong",
                        "definition": [
                            "uLong sourceLen"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "uncompress",
            "header": "extern int uncompress(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen)",
            "params": [
                "Bytef *dest",
                "uLongf *destLen",
                "const Bytef *source",
                "uLong sourceLen"
            ],
            "definition": "int uncompress(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen)\n{\n  return uncompress2(dest, destLen, source, &sourceLen);\n}\n\n",
            "calle": [
                "uncompress2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dest",
                        "type": "Bytef *",
                        "definition": [
                            "Bytef *dest"
                        ]
                    },
                    {
                        "path": null,
                        "name": "destLen",
                        "type": "uLongf *",
                        "definition": [
                            "uLongf *destLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "source",
                        "type": "const Bytef *",
                        "definition": [
                            "const Bytef *source"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sourceLen",
                        "type": "uLong",
                        "definition": [
                            "uLong sourceLen"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "uncompress2",
            "header": "extern int uncompress2(Bytef *dest, uLongf *destLen, const Bytef *source, uLong *sourceLen)",
            "params": [
                "Bytef *dest",
                "uLongf *destLen",
                "const Bytef *source",
                "uLong *sourceLen"
            ],
            "definition": "int uncompress2(Bytef *dest, uLongf *destLen, const Bytef *source, uLong *sourceLen)\n{\n  unsigned int dest_idx = 0;\n  z_stream stream;\n  int err;\n  const uInt max = (uInt) (-1);\n  uLong len;\n  uLong left;\n  Byte buf[1];\n  len = *sourceLen;\n  if (*destLen)\n  {\n    left = *destLen;\n    *destLen = 0;\n  }\n  else\n  {\n    left = 1;\n    dest_idx = buf;\n  }\n  stream.next_in = (const Bytef *) source;\n  stream.avail_in = 0;\n  stream.zalloc = (alloc_func) 0;\n  stream.zfree = (free_func) 0;\n  stream.opaque = (voidpf) 0;\n  err = inflateInit_(&stream, \"1.3-optipng\", (int) (sizeof(z_stream)));\n  if (err != 0)\n  {\n    return err;\n  }\n  stream.next_out = &dest[dest_idx];\n  stream.avail_out = 0;\n  do\n  {\n    if (stream.avail_out == 0)\n    {\n      stream.avail_out = (left > ((uLong) max)) ? (max) : ((uInt) left);\n      left -= stream.avail_out;\n    }\n    if (stream.avail_in == 0)\n    {\n      stream.avail_in = (len > ((uLong) max)) ? (max) : ((uInt) len);\n      len -= stream.avail_in;\n    }\n    err = inflate(&stream, 0);\n  }\n  while (err == 0);\n  *sourceLen -= len + stream.avail_in;\n  if ((&dest[dest_idx]) != buf)\n  {\n    *destLen = stream.total_out;\n  }\n  else\n    if (stream.total_out && (err == (-5)))\n  {\n    left = 1;\n  }\n  inflateEnd(&stream);\n  return (err == 1) ? (0) : ((err == 2) ? (-3) : (((err == (-5)) && (left + stream.avail_out)) ? (-3) : (err)));\n}\n\n",
            "calle": [
                "inflate",
                "inflateEnd",
                "inflateInit_"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dest",
                        "type": "Bytef *",
                        "definition": [
                            "Bytef *dest"
                        ]
                    },
                    {
                        "path": null,
                        "name": "destLen",
                        "type": "uLongf *",
                        "definition": [
                            "uLongf *destLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "source",
                        "type": "const Bytef *",
                        "definition": [
                            "const Bytef *source"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sourceLen",
                        "type": "uLong *",
                        "definition": [
                            "uLong *sourceLen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dest_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "z_stream",
                        "definition": [
                            "z_stream stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "const uInt",
                        "definition": [
                            "const uInt max = (uInt) (-1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "uLong",
                        "definition": [
                            "uLong len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left",
                        "type": "uLong",
                        "definition": [
                            "uLong left"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "Byte [1]",
                        "definition": [
                            "Byte buf[1]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gzclose",
            "header": "extern int gzclose(gzFile file)",
            "params": [
                "gzFile file"
            ],
            "definition": "int gzclose(gzFile file)\n{\n  return gzclose_r(file);\n}\n\n",
            "calle": [
                "gzclose_r"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "file",
                        "type": "gzFile",
                        "definition": [
                            "gzFile file"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gzdopen",
            "header": "extern gzFile gzdopen(int fd, const char *mode)",
            "params": [
                "int fd",
                "const char *mode"
            ],
            "definition": "gzFile gzdopen(int fd, const char *mode)\n{\n  char *path;\n  unsigned int path_idx = 0;\n  gzFile gz;\n  if ((fd == (-1)) || ((path_idx = (char *) malloc(7 + (3 * (sizeof(int))))) == 0))\n  {\n    return 0;\n  }\n  (void) snprintf(path, 7 + (3 * (sizeof(int))), \"<fd:%d>\", fd);\n  gz = gz_open(path, fd, mode);\n  free(path);\n  return gz;\n}\n\n",
            "calle": [
                "free",
                "gz_open",
                "malloc",
                "snprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fd",
                        "type": "int",
                        "definition": [
                            "int fd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mode",
                        "type": "const char *",
                        "definition": [
                            "const char *mode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "char *",
                        "definition": [
                            "char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int path_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gz",
                        "type": "gzFile",
                        "definition": [
                            "gzFile gz"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gzbuffer",
            "header": "extern int gzbuffer(gzFile file, unsigned size)",
            "params": [
                "gzFile file",
                "unsigned size"
            ],
            "definition": "int gzbuffer(gzFile file, unsigned size)\n{\n  gz_statep state;\n  if (file == 0)\n  {\n    return -1;\n  }\n  state = (gz_statep) file;\n  if ((state->mode != 7247) && (state->mode != 31153))\n  {\n    return -1;\n  }\n  if (state->size != 0)\n  {\n    return -1;\n  }\n  if ((size << 1) < size)\n  {\n    return -1;\n  }\n  if (size < 8)\n  {\n    size = 8;\n  }\n  state->want = size;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "file",
                        "type": "gzFile",
                        "definition": [
                            "gzFile file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "unsigned",
                        "definition": [
                            "unsigned size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gzrewind",
            "header": "extern int gzrewind(gzFile file)",
            "params": [
                "gzFile file"
            ],
            "definition": "int gzrewind(gzFile file)\n{\n  gz_statep state;\n  if (file == 0)\n  {\n    return -1;\n  }\n  state = (gz_statep) file;\n  if ((state->mode != 7247) || ((state->err != 0) && (state->err != (-5))))\n  {\n    return -1;\n  }\n  if (lseek(state->fd, state->start, 0) == (-1))\n  {\n    return -1;\n  }\n  gz_reset(state);\n  return 0;\n}\n\n",
            "calle": [
                "gz_reset",
                "lseek"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "file",
                        "type": "gzFile",
                        "definition": [
                            "gzFile file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gzeof",
            "header": "extern int gzeof(gzFile file)",
            "params": [
                "gzFile file"
            ],
            "definition": "int gzeof(gzFile file)\n{\n  gz_statep state;\n  if (file == 0)\n  {\n    return 0;\n  }\n  state = (gz_statep) file;\n  if ((state->mode != 7247) && (state->mode != 31153))\n  {\n    return 0;\n  }\n  return (state->mode == 7247) ? (state->past) : (0);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "file",
                        "type": "gzFile",
                        "definition": [
                            "gzFile file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gzerror",
            "header": "extern const char *gzerror(gzFile file, int *errnum)",
            "params": [
                "gzFile file",
                "int *errnum"
            ],
            "definition": "const char *gzerror(gzFile file, int *errnum)\n{\n  gz_statep state;\n  if (file == 0)\n  {\n    return 0;\n  }\n  state = (gz_statep) file;\n  if ((state->mode != 7247) && (state->mode != 31153))\n  {\n    return 0;\n  }\n  if (errnum != 0)\n  {\n    *errnum = state->err;\n  }\n  return (state->err == (-4)) ? (\"out of memory\") : ((state->msg == 0) ? (\"\") : (state->msg));\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "file",
                        "type": "gzFile",
                        "definition": [
                            "gzFile file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "errnum",
                        "type": "int *",
                        "definition": [
                            "int *errnum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gzclearerr",
            "header": "extern void gzclearerr(gzFile file)",
            "params": [
                "gzFile file"
            ],
            "definition": "void gzclearerr(gzFile file)\n{\n  gz_statep state;\n  if (file == 0)\n  {\n    return;\n  }\n  state = (gz_statep) file;\n  if ((state->mode != 7247) && (state->mode != 31153))\n  {\n    return;\n  }\n  if (state->mode == 7247)\n  {\n    state->eof = 0;\n    state->past = 0;\n  }\n  gz_error(state, 0, 0);\n}\n\n",
            "calle": [
                "gz_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "file",
                        "type": "gzFile",
                        "definition": [
                            "gzFile file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gzopen",
            "header": "extern gzFile gzopen(const char *, const char *)",
            "params": [
                "const char *path",
                "const char *mode"
            ],
            "definition": "gzFile gzopen(const char *path, const char *mode)\n{\n  return gz_open(path, -1, mode);\n}\n\n",
            "calle": [
                "gz_open"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mode",
                        "type": "const char *",
                        "definition": [
                            "const char *mode"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gzseek",
            "header": "extern off_t gzseek(gzFile, off_t, int)",
            "params": [
                "gzFile file",
                "off_t offset",
                "int whence"
            ],
            "definition": "off_t gzseek(gzFile file, off_t offset, int whence)\n{\n  off_t ret;\n  ret = gzseek64(file, (off_t) offset, whence);\n  return (ret == ((off_t) ret)) ? ((off_t) ret) : (-1);\n}\n\n",
            "calle": [
                "gzseek64"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "file",
                        "type": "gzFile",
                        "definition": [
                            "gzFile file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offset",
                        "type": "off_t",
                        "definition": [
                            "off_t offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "whence",
                        "type": "int",
                        "definition": [
                            "int whence"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "off_t",
                        "definition": [
                            "off_t ret"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gztell",
            "header": "extern off_t gztell(gzFile)",
            "params": [
                "gzFile file"
            ],
            "definition": "off_t gztell(gzFile file)\n{\n  off_t ret;\n  ret = gztell64(file);\n  return (ret == ((off_t) ret)) ? ((off_t) ret) : (-1);\n}\n\n",
            "calle": [
                "gztell64"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "file",
                        "type": "gzFile",
                        "definition": [
                            "gzFile file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "off_t",
                        "definition": [
                            "off_t ret"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gzoffset",
            "header": "extern off_t gzoffset(gzFile)",
            "params": [
                "gzFile file"
            ],
            "definition": "off_t gzoffset(gzFile file)\n{\n  off_t ret;\n  ret = gzoffset64(file);\n  return (ret == ((off_t) ret)) ? ((off_t) ret) : (-1);\n}\n\n",
            "calle": [
                "gzoffset64"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "file",
                        "type": "gzFile",
                        "definition": [
                            "gzFile file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "off_t",
                        "definition": [
                            "off_t ret"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gzopen64",
            "header": "extern gzFile gzopen64(const char *, const char *)",
            "params": [
                "const char *path",
                "const char *mode"
            ],
            "definition": "gzFile gzopen64(const char *path, const char *mode)\n{\n  return gz_open(path, -1, mode);\n}\n\n",
            "calle": [
                "gz_open"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mode",
                        "type": "const char *",
                        "definition": [
                            "const char *mode"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gzseek64",
            "header": "extern off_t gzseek64(gzFile, off_t, int)",
            "params": [
                "gzFile file",
                "off_t offset",
                "int whence"
            ],
            "definition": "off_t gzseek64(gzFile file, off_t offset, int whence)\n{\n  unsigned n;\n  off_t ret;\n  gz_statep state;\n  if (file == 0)\n  {\n    return -1;\n  }\n  state = (gz_statep) file;\n  if ((state->mode != 7247) && (state->mode != 31153))\n  {\n    return -1;\n  }\n  if ((state->err != 0) && (state->err != (-5)))\n  {\n    return -1;\n  }\n  if ((whence != 0) && (whence != 1))\n  {\n    return -1;\n  }\n  if (whence == 0)\n  {\n    offset -= state->x.pos;\n  }\n  else\n    if (state->seek)\n  {\n    offset += state->skip;\n  }\n  state->seek = 0;\n  if (((state->mode == 7247) && (state->how == 1)) && ((state->x.pos + offset) >= 0))\n  {\n    helper_gzseek64_1(&ret, &state, offset);\n  }\n  if (offset < 0)\n  {\n    if (state->mode != 7247)\n    {\n      return -1;\n    }\n    offset += state->x.pos;\n    if (offset < 0)\n    {\n      return -1;\n    }\n    if (gzrewind(file) == (-1))\n    {\n      return -1;\n    }\n  }\n  if (state->mode == 7247)\n  {\n    n = ((((sizeof(int)) == (sizeof(off_t))) && (state->x.have > 2147483647)) || (((off_t) state->x.have) > offset)) ? ((unsigned) offset) : (state->x.have);\n    state->x.have -= n;\n    state->x.next += n;\n    state->x.pos += n;\n    offset -= n;\n  }\n  if (offset)\n  {\n    state->seek = 1;\n    state->skip = offset;\n  }\n  return state->x.pos + offset;\n}\n\n",
            "calle": [
                "gzrewind",
                "helper_gzseek64_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "file",
                        "type": "gzFile",
                        "definition": [
                            "gzFile file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offset",
                        "type": "off_t",
                        "definition": [
                            "off_t offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "whence",
                        "type": "int",
                        "definition": [
                            "int whence"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "unsigned",
                        "definition": [
                            "unsigned n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "off_t",
                        "definition": [
                            "off_t ret"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gztell64",
            "header": "extern off_t gztell64(gzFile)",
            "params": [
                "gzFile file"
            ],
            "definition": "off_t gztell64(gzFile file)\n{\n  gz_statep state;\n  if (file == 0)\n  {\n    return -1;\n  }\n  state = (gz_statep) file;\n  if ((state->mode != 7247) && (state->mode != 31153))\n  {\n    return -1;\n  }\n  return state->x.pos + ((state->seek) ? (state->skip) : (0));\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "file",
                        "type": "gzFile",
                        "definition": [
                            "gzFile file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gzoffset64",
            "header": "extern off_t gzoffset64(gzFile)",
            "params": [
                "gzFile file"
            ],
            "definition": "off_t gzoffset64(gzFile file)\n{\n  off_t offset;\n  gz_statep state;\n  if (file == 0)\n  {\n    return -1;\n  }\n  state = (gz_statep) file;\n  if ((state->mode != 7247) && (state->mode != 31153))\n  {\n    return -1;\n  }\n  offset = lseek(state->fd, 0, 1);\n  if (offset == (-1))\n  {\n    return -1;\n  }\n  if (state->mode == 7247)\n  {\n    offset -= state->strm.avail_in;\n  }\n  return offset;\n}\n\n",
            "calle": [
                "lseek"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "file",
                        "type": "gzFile",
                        "definition": [
                            "gzFile file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offset",
                        "type": "off_t",
                        "definition": [
                            "off_t offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gz_error",
            "header": "void gz_error(gz_statep, int, const char *)",
            "params": [
                "gz_statep state",
                "int err",
                "const char *msg"
            ],
            "definition": "void gz_error(gz_statep state, int err, const char *msg)\n{\n  if (state->msg != 0)\n  {\n    if (state->err != (-4))\n    {\n      free(state->msg);\n    }\n    state->msg = 0;\n  }\n  if ((err != 0) && (err != (-5)))\n  {\n    state->x.have = 0;\n  }\n  state->err = err;\n  if (msg == 0)\n  {\n    return;\n  }\n  if (err == (-4))\n  {\n    return;\n  }\n  if ((state->msg = (char *) malloc((strlen(state->path) + strlen(msg)) + 3)) == 0)\n  {\n    state->err = -4;\n    return;\n  }\n  (void) snprintf(state->msg, (strlen(state->path) + strlen(msg)) + 3, \"%s%s%s\", state->path, \": \", msg);\n}\n\n",
            "calle": [
                "free",
                "malloc",
                "snprintf",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg",
                        "type": "const char *",
                        "definition": [
                            "const char *msg"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gz_reset",
            "header": "",
            "params": [
                "gz_statep state"
            ],
            "definition": "static void gz_reset(gz_statep state)\n{\n  state->x.have = 0;\n  if (state->mode == 7247)\n  {\n    state->eof = 0;\n    state->past = 0;\n    state->how = 0;\n  }\n  else\n    state->reset = 0;\n  state->seek = 0;\n  gz_error(state, 0, 0);\n  state->x.pos = 0;\n  state->strm.avail_in = 0;\n}\n\n",
            "calle": [
                "gz_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gz_open",
            "header": "",
            "params": [
                "const void *path",
                "int fd",
                "const char *mode"
            ],
            "definition": "static gzFile gz_open(const void *path, int fd, const char *mode)\n{\n  unsigned int mode_idx = 0;\n  gz_statep state;\n  z_size_t len;\n  int oflag;\n  if (path == 0)\n  {\n    return 0;\n  }\n  state = (gz_statep) malloc(sizeof(gz_state));\n  if (state == 0)\n  {\n    return 0;\n  }\n  state->size = 0;\n  state->want = 8192;\n  state->msg = 0;\n  state->mode = 0;\n  state->level = -1;\n  state->strategy = 0;\n  state->direct = 0;\n  while (mode[mode_idx])\n  {\n    helper_gz_open_1(&mode_idx, &state, mode);\n  }\n\n  if (state->mode == 0)\n  {\n    free(state);\n    return 0;\n  }\n  if (state->mode == 7247)\n  {\n    if (state->direct)\n    {\n      free(state);\n      return 0;\n    }\n    state->direct = 1;\n  }\n  len = strlen((const char *) path);\n  state->path = (char *) malloc(len + 1);\n  if (state->path == 0)\n  {\n    free(state);\n    return 0;\n  }\n  (void) snprintf(state->path, len + 1, \"%s\", (const char *) path);\n  oflag = (state->mode == 7247) ? (O_RDONLY) : ((O_WRONLY | O_CREAT) | ((state->mode == 31153) ? (O_TRUNC) : (O_APPEND)));\n  state->fd = (fd > (-1)) ? (fd) : (open((const char *) path, oflag, 0666));\n  if (state->fd == (-1))\n  {\n    free(state->path);\n    free(state);\n    return 0;\n  }\n  if (state->mode == 1)\n  {\n    lseek(state->fd, 0, 2);\n    state->mode = 31153;\n  }\n  if (state->mode == 7247)\n  {\n    state->start = lseek(state->fd, 0, 1);\n    if (state->start == (-1))\n    {\n      state->start = 0;\n    }\n  }\n  gz_reset(state);\n  return (gzFile) state;\n}\n\n",
            "calle": [
                "free",
                "gz_reset",
                "helper_gz_open_1",
                "lseek",
                "malloc",
                "open",
                "snprintf",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "path",
                        "type": "const void *",
                        "definition": [
                            "const void *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fd",
                        "type": "int",
                        "definition": [
                            "int fd"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mode",
                        "type": "const char *",
                        "definition": [
                            "const char *mode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mode_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int mode_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "z_size_t",
                        "definition": [
                            "z_size_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oflag",
                        "type": "int",
                        "definition": [
                            "int oflag"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_gz_open_1",
            "header": "",
            "params": [
                "unsigned int * const mode_idx_ref",
                "gz_statep * const state_ref",
                "const char * const mode"
            ],
            "definition": "gzFile helper_gz_open_1(unsigned int * const mode_idx_ref, gz_statep * const state_ref, const char * const mode)\n{\n  unsigned int mode_idx = *mode_idx_ref;\n  gz_statep state = *state_ref;\n  if ((mode[mode_idx] >= '0') && (mode[mode_idx] <= '9'))\n  {\n    state->level = mode[mode_idx] - '0';\n  }\n  else\n    switch (mode[mode_idx])\n  {\n    case 'r':\n    {\n      state->mode = 7247;\n      break;\n    }\n\n    case '+':\n    {\n      free(state);\n      return 0;\n    }\n\n    case 'b':\n    {\n      break;\n    }\n\n    case 'f':\n    {\n      state->strategy = 1;\n      break;\n    }\n\n    case 'h':\n    {\n      state->strategy = 2;\n      break;\n    }\n\n    case 'R':\n    {\n      state->strategy = 3;\n      break;\n    }\n\n    case 'F':\n    {\n      state->strategy = 4;\n      break;\n    }\n\n    case 'T':\n    {\n      state->direct = 1;\n      break;\n    }\n\n    default:\n    {\n      ;\n    }\n\n  }\n\n  mode_idx += 1;\n  *mode_idx_ref = mode_idx;\n  *state_ref = state;\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "mode_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const mode_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_ref",
                        "type": "gz_statep * const",
                        "definition": [
                            "gz_statep * const state_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mode",
                        "type": "const char * const",
                        "definition": [
                            "const char * const mode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mode_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int mode_idx = *mode_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state = *state_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_gzseek64_1",
            "header": "",
            "params": [
                "off_t * const ret_ref",
                "gz_statep * const state_ref",
                "off_t offset"
            ],
            "definition": "off_t helper_gzseek64_1(off_t * const ret_ref, gz_statep * const state_ref, off_t offset)\n{\n  off_t ret = *ret_ref;\n  gz_statep state = *state_ref;\n  ret = lseek(state->fd, offset - ((off_t) state->x.have), 1);\n  if (ret == (-1))\n  {\n    return -1;\n  }\n  state->x.have = 0;\n  state->eof = 0;\n  state->past = 0;\n  state->seek = 0;\n  gz_error(state, 0, 0);\n  state->strm.avail_in = 0;\n  state->x.pos += offset;\n  return state->x.pos;\n  *ret_ref = ret;\n  *state_ref = state;\n}\n\n",
            "calle": [
                "gz_error",
                "lseek"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "off_t * const",
                        "definition": [
                            "off_t * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_ref",
                        "type": "gz_statep * const",
                        "definition": [
                            "gz_statep * const state_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offset",
                        "type": "off_t",
                        "definition": [
                            "off_t offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "off_t",
                        "definition": [
                            "off_t ret = *ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state = *state_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gzread",
            "header": "extern int gzread(gzFile file, voidp buf, unsigned len)",
            "params": [
                "gzFile file",
                "voidp buf",
                "unsigned len"
            ],
            "definition": "int gzread(gzFile file, voidp buf, unsigned len)\n{\n  gz_statep state;\n  if (file == 0)\n  {\n    return -1;\n  }\n  state = (gz_statep) file;\n  if ((state->mode != 7247) || ((state->err != 0) && (state->err != (-5))))\n  {\n    return -1;\n  }\n  if (((int) len) < 0)\n  {\n    gz_error(state, -2, \"request does not fit in an int\");\n    return -1;\n  }\n  len = (unsigned) gz_read(state, buf, len);\n  if (((len == 0) && (state->err != 0)) && (state->err != (-5)))\n  {\n    return -1;\n  }\n  return (int) len;\n}\n\n",
            "calle": [
                "gz_error",
                "gz_read"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "file",
                        "type": "gzFile",
                        "definition": [
                            "gzFile file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "voidp",
                        "definition": [
                            "voidp buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned",
                        "definition": [
                            "unsigned len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gzfread",
            "header": "extern z_size_t gzfread(voidp buf, z_size_t size, z_size_t nitems, gzFile file)",
            "params": [
                "voidp buf",
                "z_size_t size",
                "z_size_t nitems",
                "gzFile file"
            ],
            "definition": "z_size_t gzfread(voidp buf, z_size_t size, z_size_t nitems, gzFile file)\n{\n  z_size_t len;\n  gz_statep state;\n  if (file == 0)\n  {\n    return 0;\n  }\n  state = (gz_statep) file;\n  if ((state->mode != 7247) || ((state->err != 0) && (state->err != (-5))))\n  {\n    return 0;\n  }\n  len = nitems * size;\n  if (size && ((len / size) != nitems))\n  {\n    gz_error(state, -2, \"request does not fit in a size_t\");\n    return 0;\n  }\n  return (len) ? (gz_read(state, buf, len) / size) : (0);\n}\n\n",
            "calle": [
                "gz_error",
                "gz_read"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buf",
                        "type": "voidp",
                        "definition": [
                            "voidp buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "z_size_t",
                        "definition": [
                            "z_size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nitems",
                        "type": "z_size_t",
                        "definition": [
                            "z_size_t nitems"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "gzFile",
                        "definition": [
                            "gzFile file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "z_size_t",
                        "definition": [
                            "z_size_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gzgets",
            "header": "extern char *gzgets(gzFile file, char *buf, int len)",
            "params": [
                "gzFile file",
                "char *buf",
                "int len"
            ],
            "definition": "char *gzgets(gzFile file, char *buf, int len)\n{\n  unsigned int buf_idx = 0;\n  unsigned left;\n  unsigned n;\n  char *str;\n  unsigned int str_idx = 0;\n  unsigned char *eol;\n  unsigned int eol_idx = 0;\n  gz_statep state;\n  if (((file == 0) || ((&buf[buf_idx]) == 0)) || (len < 1))\n  {\n    return 0;\n  }\n  state = (gz_statep) file;\n  if ((state->mode != 7247) || ((state->err != 0) && (state->err != (-5))))\n  {\n    return 0;\n  }\n  if (state->seek)\n  {\n    state->seek = 0;\n    if (gz_skip(state, state->skip) == (-1))\n    {\n      return 0;\n    }\n  }\n  str_idx = &buf[buf_idx];\n  left = ((unsigned) len) - 1;\n  if (left)\n  {\n    helper_gzgets_1(&buf_idx, &left, &n, &eol_idx, &state, buf, eol);\n  }\n  if ((&buf[buf_idx]) == (&str[str_idx]))\n  {\n    return 0;\n  }\n  buf[0 + buf_idx] = 0;\n  return str;\n}\n\n",
            "calle": [
                "gz_skip",
                "helper_gzgets_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "file",
                        "type": "gzFile",
                        "definition": [
                            "gzFile file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char *",
                        "definition": [
                            "char *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int buf_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left",
                        "type": "unsigned",
                        "definition": [
                            "unsigned left"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "unsigned",
                        "definition": [
                            "unsigned n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "char *",
                        "definition": [
                            "char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "eol",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *eol"
                        ]
                    },
                    {
                        "path": null,
                        "name": "eol_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int eol_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gzgetc",
            "header": "extern int gzgetc(gzFile file)",
            "params": [
                "gzFile file"
            ],
            "definition": "int gzgetc(gzFile file)\n{\n  unsigned char buf[1];\n  gz_statep state;\n  if (file == 0)\n  {\n    return -1;\n  }\n  state = (gz_statep) file;\n  if ((state->mode != 7247) || ((state->err != 0) && (state->err != (-5))))\n  {\n    return -1;\n  }\n  if (state->x.have)\n  {\n    state->x.have -= 1;\n    state->x.pos += 1;\n    return *(state->x.next++);\n  }\n  return (gz_read(state, buf, 1) < 1) ? (-1) : (buf[0]);\n}\n\n",
            "calle": [
                "gz_read"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "file",
                        "type": "gzFile",
                        "definition": [
                            "gzFile file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "unsigned char [1]",
                        "definition": [
                            "unsigned char buf[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gzungetc",
            "header": "extern int gzungetc(int c, gzFile file)",
            "params": [
                "int c",
                "gzFile file"
            ],
            "definition": "int gzungetc(int c, gzFile file)\n{\n  gz_statep state;\n  if (file == 0)\n  {\n    return -1;\n  }\n  state = (gz_statep) file;\n  if (((state->mode == 7247) && (state->how == 0)) && (state->x.have == 0))\n  {\n    (void) gz_look(state);\n  }\n  if ((state->mode != 7247) || ((state->err != 0) && (state->err != (-5))))\n  {\n    return -1;\n  }\n  if (state->seek)\n  {\n    state->seek = 0;\n    if (gz_skip(state, state->skip) == (-1))\n    {\n      return -1;\n    }\n  }\n  if (c < 0)\n  {\n    return -1;\n  }\n  if (state->x.have == 0)\n  {\n    state->x.have = 1;\n    state->x.next = (state->out + (state->size << 1)) - 1;\n    state->x.next[0] = (unsigned char) c;\n    state->x.pos -= 1;\n    state->past = 0;\n    return c;\n  }\n  if (state->x.have == (state->size << 1))\n  {\n    gz_error(state, -3, \"out of room to push characters\");\n    return -1;\n  }\n  if (state->x.next == state->out)\n  {\n    unsigned char *src = state->out + state->x.have;\n    unsigned int src_idx = 0;\n    unsigned char *dest = state->out + (state->size << 1);\n    unsigned int dest_idx = 0;\n    while ((&src[src_idx]) > state->out)\n    {\n      src_idx -= 1;\n      dest_idx -= 1;\n      dest[dest_idx] = src[src_idx];\n    }\n\n    state->x.next = &dest[dest_idx];\n  }\n  state->x.have += 1;\n  state->x.next -= 1;\n  state->x.next[0] = (unsigned char) c;\n  state->x.pos -= 1;\n  state->past = 0;\n  return c;\n}\n\n",
            "calle": [
                "gz_error",
                "gz_look",
                "gz_skip"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "gzFile",
                        "definition": [
                            "gzFile file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *src = state->out + state->x.have"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *dest = state->out + (state->size << 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dest_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gzdirect",
            "header": "extern int gzdirect(gzFile file)",
            "params": [
                "gzFile file"
            ],
            "definition": "int gzdirect(gzFile file)\n{\n  gz_statep state;\n  if (file == 0)\n  {\n    return 0;\n  }\n  state = (gz_statep) file;\n  if (((state->mode == 7247) && (state->how == 0)) && (state->x.have == 0))\n  {\n    (void) gz_look(state);\n  }\n  return state->direct;\n}\n\n",
            "calle": [
                "gz_look"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "file",
                        "type": "gzFile",
                        "definition": [
                            "gzFile file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gzclose_r",
            "header": "extern int gzclose_r(gzFile file)",
            "params": [
                "gzFile file"
            ],
            "definition": "int gzclose_r(gzFile file)\n{\n  int ret;\n  int err;\n  gz_statep state;\n  if (file == 0)\n  {\n    return -2;\n  }\n  state = (gz_statep) file;\n  if (state->mode != 7247)\n  {\n    return -2;\n  }\n  if (state->size)\n  {\n    inflateEnd(&state->strm);\n    free(state->out);\n    free(state->in);\n  }\n  err = (state->err == (-5)) ? (-5) : (0);\n  gz_error(state, 0, 0);\n  free(state->path);\n  ret = close(state->fd);\n  free(state);\n  return (ret) ? (-1) : (err);\n}\n\n",
            "calle": [
                "close",
                "free",
                "gz_error",
                "inflateEnd"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "file",
                        "type": "gzFile",
                        "definition": [
                            "gzFile file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gzgetc_",
            "header": "extern int gzgetc_(gzFile file)",
            "params": [
                "gzFile file"
            ],
            "definition": "int gzgetc_(gzFile file)\n{\n  return gzgetc(file);\n}\n\n",
            "calle": [
                "gzgetc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "file",
                        "type": "gzFile",
                        "definition": [
                            "gzFile file"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gz_load",
            "header": "",
            "params": [
                "gz_statep state",
                "unsigned char *buf",
                "unsigned len",
                "unsigned *have"
            ],
            "definition": "static int gz_load(gz_statep state, unsigned char *buf, unsigned len, unsigned *have)\n{\n  int ret;\n  unsigned get;\n  unsigned max = (((unsigned) (-1)) >> 2) + 1;\n  *have = 0;\n  do\n  {\n    get = len - (*have);\n    if (get > max)\n    {\n      get = max;\n    }\n    ret = read(state->fd, buf + (*have), get);\n    if (ret <= 0)\n    {\n      break;\n    }\n    *have += (unsigned) ret;\n  }\n  while ((*have) < len);\n  if (ret < 0)\n  {\n    gz_error(state, -1, strerror(errno));\n    return -1;\n  }\n  if (ret == 0)\n  {\n    state->eof = 1;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "gz_error",
                "read",
                "strerror"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned",
                        "definition": [
                            "unsigned len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned *",
                        "definition": [
                            "unsigned *have"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret"
                        ]
                    },
                    {
                        "path": null,
                        "name": "get",
                        "type": "unsigned",
                        "definition": [
                            "unsigned get"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "unsigned",
                        "definition": [
                            "unsigned max = (((unsigned) (-1)) >> 2) + 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gz_avail",
            "header": "",
            "params": [
                "gz_statep state"
            ],
            "definition": "static int gz_avail(gz_statep state)\n{\n  unsigned got;\n  z_streamp strm = &state->strm;\n  if ((state->err != 0) && (state->err != (-5)))\n  {\n    return -1;\n  }\n  if (state->eof == 0)\n  {\n    if (strm->avail_in)\n    {\n      unsigned char *p = state->in;\n      unsigned int p_idx = 0;\n      const unsigned char *q = strm->next_in;\n      unsigned int q_idx = 0;\n      unsigned n = strm->avail_in;\n      do\n      {\n        p[p_idx] = q[q_idx];\n        q_idx += 1;\n        p_idx += 1;\n      }\n      while (--n);\n    }\n    if (gz_load(state, state->in + strm->avail_in, state->size - strm->avail_in, &got) == (-1))\n    {\n      return -1;\n    }\n    strm->avail_in += got;\n    strm->next_in = state->in;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "gz_load"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "got",
                        "type": "unsigned",
                        "definition": [
                            "unsigned got"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = &state->strm"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *p = state->in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int p_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "q",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *q = strm->next_in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "q_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int q_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "unsigned",
                        "definition": [
                            "unsigned n = strm->avail_in"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gz_look",
            "header": "",
            "params": [
                "gz_statep state"
            ],
            "definition": "static int gz_look(gz_statep state)\n{\n  z_streamp strm = &state->strm;\n  if (state->size == 0)\n  {\n    helper_gz_look_1(&state);\n  }\n  if (strm->avail_in < 2)\n  {\n    if (gz_avail(state) == (-1))\n    {\n      return -1;\n    }\n    if (strm->avail_in == 0)\n    {\n      return 0;\n    }\n  }\n  if (((strm->avail_in > 1) && (strm->next_in[0] == 31)) && (strm->next_in[1] == 139))\n  {\n    inflateReset(strm);\n    state->how = 2;\n    state->direct = 0;\n    return 0;\n  }\n  if (state->direct == 0)\n  {\n    strm->avail_in = 0;\n    state->eof = 1;\n    state->x.have = 0;\n    return 0;\n  }\n  state->x.next = state->out;\n  memcpy(state->x.next, strm->next_in, strm->avail_in);\n  state->x.have = strm->avail_in;\n  strm->avail_in = 0;\n  state->how = 1;\n  state->direct = 1;\n  return 0;\n}\n\n",
            "calle": [
                "gz_avail",
                "helper_gz_look_1",
                "inflateReset",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = &state->strm"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gz_decomp",
            "header": "",
            "params": [
                "gz_statep state"
            ],
            "definition": "static int gz_decomp(gz_statep state)\n{\n  int ret = 0;\n  unsigned had;\n  z_streamp strm = &state->strm;\n  had = strm->avail_out;\n  do\n  {\n    if ((strm->avail_in == 0) && (gz_avail(state) == (-1)))\n    {\n      return -1;\n    }\n    if (strm->avail_in == 0)\n    {\n      gz_error(state, -5, \"unexpected end of file\");\n      break;\n    }\n    ret = inflate(strm, 0);\n    if ((ret == (-2)) || (ret == 2))\n    {\n      gz_error(state, -2, \"internal error: inflate stream corrupt\");\n      return -1;\n    }\n    if (ret == (-4))\n    {\n      gz_error(state, -4, \"out of memory\");\n      return -1;\n    }\n    if (ret == (-3))\n    {\n      gz_error(state, -3, (strm->msg == 0) ? (\"compressed data error\") : (strm->msg));\n      return -1;\n    }\n  }\n  while (strm->avail_out && (ret != 1));\n  state->x.have = had - strm->avail_out;\n  state->x.next = strm->next_out - state->x.have;\n  if (ret == 1)\n  {\n    state->how = 0;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "gz_avail",
                "gz_error",
                "inflate"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "had",
                        "type": "unsigned",
                        "definition": [
                            "unsigned had"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = &state->strm"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gz_fetch",
            "header": "",
            "params": [
                "gz_statep state"
            ],
            "definition": "static int gz_fetch(gz_statep state)\n{\n  z_streamp strm = &state->strm;\n  do\n  {\n    switch (state->how)\n    {\n      case 0:\n      {\n        if (gz_look(state) == (-1))\n        {\n          return -1;\n        }\n        if (state->how == 0)\n        {\n          return 0;\n        }\n        break;\n      }\n\n      case 1:\n      {\n        if (gz_load(state, state->out, state->size << 1, &state->x.have) == (-1))\n        {\n          return -1;\n        }\n        state->x.next = state->out;\n        return 0;\n      }\n\n      case 2:\n      {\n        strm->avail_out = state->size << 1;\n        strm->next_out = state->out;\n        if (gz_decomp(state) == (-1))\n        {\n          return -1;\n        }\n      }\n\n    }\n\n  }\n  while ((state->x.have == 0) && ((!state->eof) || strm->avail_in));\n  return 0;\n}\n\n",
            "calle": [
                "gz_decomp",
                "gz_load",
                "gz_look"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = &state->strm"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gz_skip",
            "header": "",
            "params": [
                "gz_statep state",
                "off_t len"
            ],
            "definition": "static int gz_skip(gz_statep state, off_t len)\n{\n  unsigned n;\n  while (len)\n  {\n    if (state->x.have)\n    {\n      n = ((((sizeof(int)) == (sizeof(off_t))) && (state->x.have > 2147483647)) || (((off_t) state->x.have) > len)) ? ((unsigned) len) : (state->x.have);\n      state->x.have -= n;\n      state->x.next += n;\n      state->x.pos += n;\n      len -= n;\n    }\n    else\n      if (state->eof && (state->strm.avail_in == 0))\n    {\n      break;\n    }\n    else\n    {\n      if (gz_fetch(state) == (-1))\n      {\n        return -1;\n      }\n    }\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "gz_fetch"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "off_t",
                        "definition": [
                            "off_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "unsigned",
                        "definition": [
                            "unsigned n"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gz_read",
            "header": "",
            "params": [
                "gz_statep state",
                "voidp buf",
                "z_size_t len"
            ],
            "definition": "static z_size_t gz_read(gz_statep state, voidp buf, z_size_t len)\n{\n  z_size_t got;\n  unsigned n;\n  if (len == 0)\n  {\n    return 0;\n  }\n  if (state->seek)\n  {\n    state->seek = 0;\n    if (gz_skip(state, state->skip) == (-1))\n    {\n      return 0;\n    }\n  }\n  got = 0;\n  do\n  {\n    helper_gz_read_1(&state, &buf, &len, &got, &n);\n  }\n  while (len);\n  return got;\n}\n\n",
            "calle": [
                "gz_skip",
                "helper_gz_read_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "voidp",
                        "definition": [
                            "voidp buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "z_size_t",
                        "definition": [
                            "z_size_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "got",
                        "type": "z_size_t",
                        "definition": [
                            "z_size_t got"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "unsigned",
                        "definition": [
                            "unsigned n"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_gz_look_1",
            "header": "",
            "params": [
                "gz_statep * const state_ref"
            ],
            "definition": "int helper_gz_look_1(gz_statep * const state_ref)\n{\n  gz_statep state = *state_ref;\n  state->in = (unsigned char *) malloc(state->want);\n  state->out = (unsigned char *) malloc(state->want << 1);\n  if ((state->in == 0) || (state->out == 0))\n  {\n    free(state->out);\n    free(state->in);\n    gz_error(state, -4, \"out of memory\");\n    return -1;\n  }\n  state->size = state->want;\n  state->strm.zalloc = 0;\n  state->strm.zfree = 0;\n  state->strm.opaque = 0;\n  state->strm.avail_in = 0;\n  state->strm.next_in = 0;\n  if (inflateInit2_(&state->strm, 15 + 16, \"1.3-optipng\", (int) (sizeof(z_stream))) != 0)\n  {\n    free(state->out);\n    free(state->in);\n    state->size = 0;\n    gz_error(state, -4, \"out of memory\");\n    return -1;\n  }\n  *state_ref = state;\n}\n\n",
            "calle": [
                "free",
                "gz_error",
                "inflateInit2_",
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "state_ref",
                        "type": "gz_statep * const",
                        "definition": [
                            "gz_statep * const state_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state = *state_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_gz_read_1",
            "header": "",
            "params": [
                "gz_statep * const state_ref",
                "voidp * const buf_ref",
                "z_size_t * const len_ref",
                "z_size_t * const got_ref",
                "unsigned * const n_ref"
            ],
            "definition": "z_size_t helper_gz_read_1(gz_statep * const state_ref, voidp * const buf_ref, z_size_t * const len_ref, z_size_t * const got_ref, unsigned * const n_ref)\n{\n  gz_statep state = *state_ref;\n  voidp buf = *buf_ref;\n  z_size_t len = *len_ref;\n  z_size_t got = *got_ref;\n  unsigned n = *n_ref;\n  n = (unsigned) (-1);\n  if (n > len)\n  {\n    n = (unsigned) len;\n  }\n  if (state->x.have)\n  {\n    if (state->x.have < n)\n    {\n      n = state->x.have;\n    }\n    memcpy(buf, state->x.next, n);\n    state->x.next += n;\n    state->x.have -= n;\n  }\n  else\n    if (state->eof && (state->strm.avail_in == 0))\n  {\n    state->past = 1;\n    break;\n  }\n  else\n    if ((state->how == 0) || (n < (state->size << 1)))\n  {\n    if (gz_fetch(state) == (-1))\n    {\n      return 0;\n    }\n    continue;\n  }\n  else\n    if (state->how == 1)\n  {\n    if (gz_load(state, (unsigned char *) buf, n, &n) == (-1))\n    {\n      return 0;\n    }\n  }\n  else\n  {\n    state->strm.avail_out = n;\n    state->strm.next_out = (unsigned char *) buf;\n    if (gz_decomp(state) == (-1))\n    {\n      return 0;\n    }\n    n = state->x.have;\n    state->x.have = 0;\n  }\n  len -= n;\n  buf = ((char *) buf) + n;\n  got += n;\n  state->x.pos += n;\n  *state_ref = state;\n  *buf_ref = buf;\n  *len_ref = len;\n  *got_ref = got;\n  *n_ref = n;\n}\n\n",
            "calle": [
                "gz_decomp",
                "gz_fetch",
                "gz_load",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "state_ref",
                        "type": "gz_statep * const",
                        "definition": [
                            "gz_statep * const state_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_ref",
                        "type": "voidp * const",
                        "definition": [
                            "voidp * const buf_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "z_size_t * const",
                        "definition": [
                            "z_size_t * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "got_ref",
                        "type": "z_size_t * const",
                        "definition": [
                            "z_size_t * const got_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state = *state_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "voidp",
                        "definition": [
                            "voidp buf = *buf_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "z_size_t",
                        "definition": [
                            "z_size_t len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "got",
                        "type": "z_size_t",
                        "definition": [
                            "z_size_t got = *got_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "unsigned",
                        "definition": [
                            "unsigned n = *n_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_gzgets_1",
            "header": "",
            "params": [
                "unsigned int * const buf_idx_ref",
                "unsigned * const left_ref",
                "unsigned * const n_ref",
                "unsigned int * const eol_idx_ref",
                "gz_statep * const state_ref",
                "char * const buf",
                "unsigned char * const eol"
            ],
            "definition": "char *helper_gzgets_1(unsigned int * const buf_idx_ref, unsigned * const left_ref, unsigned * const n_ref, unsigned int * const eol_idx_ref, gz_statep * const state_ref, char * const buf, unsigned char * const eol)\n{\n  unsigned int buf_idx = *buf_idx_ref;\n  unsigned left = *left_ref;\n  unsigned n = *n_ref;\n  unsigned int eol_idx = *eol_idx_ref;\n  gz_statep state = *state_ref;\n  do\n  {\n    if ((state->x.have == 0) && (gz_fetch(state) == (-1)))\n    {\n      return 0;\n    }\n    if (state->x.have == 0)\n    {\n      state->past = 1;\n      break;\n    }\n    n = (state->x.have > left) ? (left) : (state->x.have);\n    eol_idx = (unsigned char *) memchr(state->x.next, '\\n', n);\n    if ((&eol[eol_idx]) != 0)\n    {\n      n = ((unsigned) ((&eol[eol_idx]) - state->x.next)) + 1;\n    }\n    memcpy(buf, state->x.next, n);\n    state->x.have -= n;\n    state->x.next += n;\n    state->x.pos += n;\n    left -= n;\n    buf_idx += n;\n  }\n  while (left && ((&eol[eol_idx]) == 0));\n  *buf_idx_ref = buf_idx;\n  *left_ref = left;\n  *n_ref = n;\n  *eol_idx_ref = eol_idx;\n  *state_ref = state;\n}\n\n",
            "calle": [
                "gz_fetch",
                "memchr",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buf_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const buf_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const left_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "eol_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const eol_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_ref",
                        "type": "gz_statep * const",
                        "definition": [
                            "gz_statep * const state_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char * const",
                        "definition": [
                            "char * const buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "eol",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const eol"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int buf_idx = *buf_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left",
                        "type": "unsigned",
                        "definition": [
                            "unsigned left = *left_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "unsigned",
                        "definition": [
                            "unsigned n = *n_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "eol_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int eol_idx = *eol_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state = *state_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gzsetparams",
            "header": "extern int gzsetparams(gzFile file, int level, int strategy)",
            "params": [
                "gzFile file",
                "int level",
                "int strategy"
            ],
            "definition": "int gzsetparams(gzFile file, int level, int strategy)\n{\n  gz_statep state;\n  z_streamp strm;\n  if (file == 0)\n  {\n    return -2;\n  }\n  state = (gz_statep) file;\n  strm = &state->strm;\n  if (((state->mode != 31153) || (state->err != 0)) || state->direct)\n  {\n    return -2;\n  }\n  if ((level == state->level) && (strategy == state->strategy))\n  {\n    return 0;\n  }\n  if (state->seek)\n  {\n    state->seek = 0;\n    if (gz_zero(state, state->skip) == (-1))\n    {\n      return state->err;\n    }\n  }\n  if (state->size)\n  {\n    if (strm->avail_in && (gz_comp(state, 5) == (-1)))\n    {\n      return state->err;\n    }\n    deflateParams(strm, level, strategy);\n  }\n  state->level = level;\n  state->strategy = strategy;\n  return 0;\n}\n\n",
            "calle": [
                "deflateParams",
                "gz_comp",
                "gz_zero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "file",
                        "type": "gzFile",
                        "definition": [
                            "gzFile file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "int",
                        "definition": [
                            "int level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strategy",
                        "type": "int",
                        "definition": [
                            "int strategy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gzwrite",
            "header": "extern int gzwrite(gzFile file, voidpc buf, unsigned len)",
            "params": [
                "gzFile file",
                "voidpc buf",
                "unsigned len"
            ],
            "definition": "int gzwrite(gzFile file, voidpc buf, unsigned len)\n{\n  gz_statep state;\n  if (file == 0)\n  {\n    return 0;\n  }\n  state = (gz_statep) file;\n  if ((state->mode != 31153) || (state->err != 0))\n  {\n    return 0;\n  }\n  if (((int) len) < 0)\n  {\n    gz_error(state, -3, \"requested length does not fit in int\");\n    return 0;\n  }\n  return (int) gz_write(state, buf, len);\n}\n\n",
            "calle": [
                "gz_error",
                "gz_write"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "file",
                        "type": "gzFile",
                        "definition": [
                            "gzFile file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "voidpc",
                        "definition": [
                            "voidpc buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned",
                        "definition": [
                            "unsigned len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gzfwrite",
            "header": "extern z_size_t gzfwrite(voidpc buf, z_size_t size, z_size_t nitems, gzFile file)",
            "params": [
                "voidpc buf",
                "z_size_t size",
                "z_size_t nitems",
                "gzFile file"
            ],
            "definition": "z_size_t gzfwrite(voidpc buf, z_size_t size, z_size_t nitems, gzFile file)\n{\n  z_size_t len;\n  gz_statep state;\n  if (file == 0)\n  {\n    return 0;\n  }\n  state = (gz_statep) file;\n  if ((state->mode != 31153) || (state->err != 0))\n  {\n    return 0;\n  }\n  len = nitems * size;\n  if (size && ((len / size) != nitems))\n  {\n    gz_error(state, -2, \"request does not fit in a size_t\");\n    return 0;\n  }\n  return (len) ? (gz_write(state, buf, len) / size) : (0);\n}\n\n",
            "calle": [
                "gz_error",
                "gz_write"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buf",
                        "type": "voidpc",
                        "definition": [
                            "voidpc buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "z_size_t",
                        "definition": [
                            "z_size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nitems",
                        "type": "z_size_t",
                        "definition": [
                            "z_size_t nitems"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "gzFile",
                        "definition": [
                            "gzFile file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "z_size_t",
                        "definition": [
                            "z_size_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gzprintf",
            "header": "extern int gzprintf(gzFile file, const char *format, ...)",
            "params": [
                "gzFile file",
                "const char *format",
                "..."
            ],
            "definition": "int gzprintf(gzFile file, const char *format, ...)\n{\n  va_list va;\n  int ret;\n  __builtin_va_start(va);\n  ret = gzvprintf(file, format, va);\n  ;\n  return ret;\n}\n\n",
            "calle": [
                "__builtin_va_start",
                "gzvprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "file",
                        "type": "gzFile",
                        "definition": [
                            "gzFile file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "format",
                        "type": "const char *",
                        "definition": [
                            "const char *format"
                        ]
                    },
                    {
                        "path": null,
                        "name": "va",
                        "type": "va_list",
                        "definition": [
                            "va_list va"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gzputs",
            "header": "extern int gzputs(gzFile file, const char *s)",
            "params": [
                "gzFile file",
                "const char *s"
            ],
            "definition": "int gzputs(gzFile file, const char *s)\n{\n  z_size_t len;\n  z_size_t put;\n  gz_statep state;\n  if (file == 0)\n  {\n    return -1;\n  }\n  state = (gz_statep) file;\n  if ((state->mode != 31153) || (state->err != 0))\n  {\n    return -1;\n  }\n  len = strlen(s);\n  if ((((int) len) < 0) || (((unsigned) len) != len))\n  {\n    gz_error(state, -2, \"string length does not fit in int\");\n    return -1;\n  }\n  put = gz_write(state, s, len);\n  return (put < len) ? (-1) : ((int) len);\n}\n\n",
            "calle": [
                "gz_error",
                "gz_write",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "file",
                        "type": "gzFile",
                        "definition": [
                            "gzFile file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "const char *",
                        "definition": [
                            "const char *s"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "z_size_t",
                        "definition": [
                            "z_size_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put",
                        "type": "z_size_t",
                        "definition": [
                            "z_size_t put"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gzputc",
            "header": "extern int gzputc(gzFile file, int c)",
            "params": [
                "gzFile file",
                "int c"
            ],
            "definition": "int gzputc(gzFile file, int c)\n{\n  unsigned have;\n  unsigned char buf[1];\n  gz_statep state;\n  z_streamp strm;\n  if (file == 0)\n  {\n    return -1;\n  }\n  state = (gz_statep) file;\n  strm = &state->strm;\n  if ((state->mode != 31153) || (state->err != 0))\n  {\n    return -1;\n  }\n  if (state->seek)\n  {\n    state->seek = 0;\n    if (gz_zero(state, state->skip) == (-1))\n    {\n      return -1;\n    }\n  }\n  if (state->size)\n  {\n    if (strm->avail_in == 0)\n    {\n      strm->next_in = state->in;\n    }\n    have = (unsigned) ((strm->next_in + strm->avail_in) - state->in);\n    if (have < state->size)\n    {\n      state->in[have] = (unsigned char) c;\n      strm->avail_in += 1;\n      state->x.pos += 1;\n      return c & 0xff;\n    }\n  }\n  buf[0] = (unsigned char) c;\n  if (gz_write(state, buf, 1) != 1)\n  {\n    return -1;\n  }\n  return c & 0xff;\n}\n\n",
            "calle": [
                "gz_write",
                "gz_zero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "file",
                        "type": "gzFile",
                        "definition": [
                            "gzFile file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "unsigned char [1]",
                        "definition": [
                            "unsigned char buf[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gzflush",
            "header": "extern int gzflush(gzFile file, int flush)",
            "params": [
                "gzFile file",
                "int flush"
            ],
            "definition": "int gzflush(gzFile file, int flush)\n{\n  gz_statep state;\n  if (file == 0)\n  {\n    return -2;\n  }\n  state = (gz_statep) file;\n  if ((state->mode != 31153) || (state->err != 0))\n  {\n    return -2;\n  }\n  if ((flush < 0) || (flush > 4))\n  {\n    return -2;\n  }\n  if (state->seek)\n  {\n    state->seek = 0;\n    if (gz_zero(state, state->skip) == (-1))\n    {\n      return state->err;\n    }\n  }\n  (void) gz_comp(state, flush);\n  return state->err;\n}\n\n",
            "calle": [
                "gz_comp",
                "gz_zero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "file",
                        "type": "gzFile",
                        "definition": [
                            "gzFile file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flush",
                        "type": "int",
                        "definition": [
                            "int flush"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gzclose_w",
            "header": "extern int gzclose_w(gzFile file)",
            "params": [
                "gzFile file"
            ],
            "definition": "int gzclose_w(gzFile file)\n{\n  int ret = 0;\n  gz_statep state;\n  if (file == 0)\n  {\n    return -2;\n  }\n  state = (gz_statep) file;\n  if (state->mode != 31153)\n  {\n    return -2;\n  }\n  if (state->seek)\n  {\n    state->seek = 0;\n    if (gz_zero(state, state->skip) == (-1))\n    {\n      ret = state->err;\n    }\n  }\n  if (gz_comp(state, 4) == (-1))\n  {\n    ret = state->err;\n  }\n  if (state->size)\n  {\n    if (!state->direct)\n    {\n      (void) deflateEnd(&state->strm);\n      free(state->out);\n    }\n    free(state->in);\n  }\n  gz_error(state, 0, 0);\n  free(state->path);\n  if (close(state->fd) == (-1))\n  {\n    ret = -1;\n  }\n  free(state);\n  return ret;\n}\n\n",
            "calle": [
                "close",
                "deflateEnd",
                "free",
                "gz_comp",
                "gz_error",
                "gz_zero"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "file",
                        "type": "gzFile",
                        "definition": [
                            "gzFile file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gzvprintf",
            "header": "extern int gzvprintf(gzFile file, const char *format, va_list va)",
            "params": [
                "gzFile file",
                "const char *format",
                "va_list va"
            ],
            "definition": "int gzvprintf(gzFile file, const char *format, va_list va)\n{\n  int len;\n  unsigned left;\n  char *next;\n  unsigned int next_idx = 0;\n  gz_statep state;\n  z_streamp strm;\n  if (file == 0)\n  {\n    return -2;\n  }\n  state = (gz_statep) file;\n  strm = &state->strm;\n  if ((state->mode != 31153) || (state->err != 0))\n  {\n    return -2;\n  }\n  if ((state->size == 0) && (gz_init(state) == (-1)))\n  {\n    return state->err;\n  }\n  if (state->seek)\n  {\n    state->seek = 0;\n    if (gz_zero(state, state->skip) == (-1))\n    {\n      return state->err;\n    }\n  }\n  if (strm->avail_in == 0)\n  {\n    strm->next_in = state->in;\n  }\n  next_idx = (char *) ((state->in + (strm->next_in - state->in)) + strm->avail_in);\n  next[(state->size - 1) + next_idx] = 0;\n  len = vsnprintf(next, state->size, format, va);\n  if (((len == 0) || (((unsigned) len) >= state->size)) || (next[(state->size - 1) + next_idx] != 0))\n  {\n    return 0;\n  }\n  strm->avail_in += (unsigned) len;\n  state->x.pos += len;\n  if (strm->avail_in >= state->size)\n  {\n    left = strm->avail_in - state->size;\n    strm->avail_in = state->size;\n    if (gz_comp(state, 0) == (-1))\n    {\n      return state->err;\n    }\n    memmove(state->in, state->in + state->size, left);\n    strm->next_in = state->in;\n    strm->avail_in = left;\n  }\n  return len;\n}\n\n",
            "calle": [
                "gz_comp",
                "gz_init",
                "gz_zero",
                "memmove",
                "vsnprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "file",
                        "type": "gzFile",
                        "definition": [
                            "gzFile file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "format",
                        "type": "const char *",
                        "definition": [
                            "const char *format"
                        ]
                    },
                    {
                        "path": null,
                        "name": "va",
                        "type": "va_list",
                        "definition": [
                            "va_list va"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left",
                        "type": "unsigned",
                        "definition": [
                            "unsigned left"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "char *",
                        "definition": [
                            "char *next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gz_init",
            "header": "",
            "params": [
                "gz_statep state"
            ],
            "definition": "static int gz_init(gz_statep state)\n{\n  int ret;\n  z_streamp strm = &state->strm;\n  state->in = (unsigned char *) malloc(state->want << 1);\n  if (state->in == 0)\n  {\n    gz_error(state, -4, \"out of memory\");\n    return -1;\n  }\n  if (!state->direct)\n  {\n    state->out = (unsigned char *) malloc(state->want);\n    if (state->out == 0)\n    {\n      free(state->in);\n      gz_error(state, -4, \"out of memory\");\n      return -1;\n    }\n    strm->zalloc = 0;\n    strm->zfree = 0;\n    strm->opaque = 0;\n    ret = deflateInit2_(strm, state->level, 8, 15 + 16, 8, state->strategy, \"1.3-optipng\", (int) (sizeof(z_stream)));\n    if (ret != 0)\n    {\n      free(state->out);\n      free(state->in);\n      gz_error(state, -4, \"out of memory\");\n      return -1;\n    }\n    strm->next_in = 0;\n  }\n  state->size = state->want;\n  if (!state->direct)\n  {\n    strm->avail_out = state->size;\n    strm->next_out = state->out;\n    state->x.next = strm->next_out;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "deflateInit2_",
                "free",
                "gz_error",
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = &state->strm"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gz_comp",
            "header": "",
            "params": [
                "gz_statep state",
                "int flush"
            ],
            "definition": "static int gz_comp(gz_statep state, int flush)\n{\n  int ret;\n  int writ;\n  unsigned have;\n  unsigned put;\n  unsigned max = (((unsigned) (-1)) >> 2) + 1;\n  z_streamp strm = &state->strm;\n  if ((state->size == 0) && (gz_init(state) == (-1)))\n  {\n    return -1;\n  }\n  if (state->direct)\n  {\n    while (strm->avail_in)\n    {\n      put = (strm->avail_in > max) ? (max) : (strm->avail_in);\n      writ = write(state->fd, strm->next_in, put);\n      if (writ < 0)\n      {\n        gz_error(state, -1, strerror(errno));\n        return -1;\n      }\n      strm->avail_in -= (unsigned) writ;\n      strm->next_in += writ;\n    }\n\n    return 0;\n  }\n  if (state->reset)\n  {\n    if (strm->avail_in == 0)\n    {\n      return 0;\n    }\n    deflateReset(strm);\n    state->reset = 0;\n  }\n  ret = 0;\n  do\n  {\n    helper_gz_comp_1(&state, &ret, &writ, &have, &put, &strm, flush, max);\n  }\n  while (have);\n  if (flush == 4)\n  {\n    state->reset = 1;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "deflateReset",
                "gz_error",
                "gz_init",
                "helper_gz_comp_1",
                "strerror",
                "write"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flush",
                        "type": "int",
                        "definition": [
                            "int flush"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret"
                        ]
                    },
                    {
                        "path": null,
                        "name": "writ",
                        "type": "int",
                        "definition": [
                            "int writ"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put",
                        "type": "unsigned",
                        "definition": [
                            "unsigned put"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "unsigned",
                        "definition": [
                            "unsigned max = (((unsigned) (-1)) >> 2) + 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = &state->strm"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gz_zero",
            "header": "",
            "params": [
                "gz_statep state",
                "off_t len"
            ],
            "definition": "static int gz_zero(gz_statep state, off_t len)\n{\n  int first;\n  unsigned n;\n  z_streamp strm = &state->strm;\n  if (strm->avail_in && (gz_comp(state, 0) == (-1)))\n  {\n    return -1;\n  }\n  first = 1;\n  while (len)\n  {\n    n = ((((sizeof(int)) == (sizeof(off_t))) && (state->size > 2147483647)) || (((off_t) state->size) > len)) ? ((unsigned) len) : (state->size);\n    if (first)\n    {\n      memset(state->in, 0, n);\n      first = 0;\n    }\n    strm->avail_in = n;\n    strm->next_in = state->in;\n    state->x.pos += n;\n    if (gz_comp(state, 0) == (-1))\n    {\n      return -1;\n    }\n    len -= n;\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "gz_comp",
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "off_t",
                        "definition": [
                            "off_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "first",
                        "type": "int",
                        "definition": [
                            "int first"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "unsigned",
                        "definition": [
                            "unsigned n"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = &state->strm"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gz_write",
            "header": "",
            "params": [
                "gz_statep state",
                "voidpc buf",
                "z_size_t len"
            ],
            "definition": "static z_size_t gz_write(gz_statep state, voidpc buf, z_size_t len)\n{\n  z_size_t put = len;\n  if (len == 0)\n  {\n    return 0;\n  }\n  if ((state->size == 0) && (gz_init(state) == (-1)))\n  {\n    return 0;\n  }\n  if (state->seek)\n  {\n    state->seek = 0;\n    if (gz_zero(state, state->skip) == (-1))\n    {\n      return 0;\n    }\n  }\n  if (len < state->size)\n  {\n    helper_gz_write_2(&state, &buf, &len);\n  }\n  else\n  {\n    helper_gz_write_1(&state, &len, buf);\n  }\n  return put;\n}\n\n",
            "calle": [
                "gz_init",
                "gz_zero",
                "helper_gz_write_1",
                "helper_gz_write_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "voidpc",
                        "definition": [
                            "voidpc buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "z_size_t",
                        "definition": [
                            "z_size_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put",
                        "type": "z_size_t",
                        "definition": [
                            "z_size_t put = len"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_gz_comp_1",
            "header": "",
            "params": [
                "gz_statep * const state_ref",
                "int * const ret_ref",
                "int * const writ_ref",
                "unsigned * const have_ref",
                "unsigned * const put_ref",
                "z_streamp * const strm_ref",
                "int flush",
                "unsigned max"
            ],
            "definition": "int helper_gz_comp_1(gz_statep * const state_ref, int * const ret_ref, int * const writ_ref, unsigned * const have_ref, unsigned * const put_ref, z_streamp * const strm_ref, int flush, unsigned max)\n{\n  gz_statep state = *state_ref;\n  int ret = *ret_ref;\n  int writ = *writ_ref;\n  unsigned have = *have_ref;\n  unsigned put = *put_ref;\n  z_streamp strm = *strm_ref;\n  if ((strm->avail_out == 0) || ((flush != 0) && ((flush != 4) || (ret == 1))))\n  {\n    while (strm->next_out > state->x.next)\n    {\n      put = ((strm->next_out - state->x.next) > ((int) max)) ? (max) : ((unsigned) (strm->next_out - state->x.next));\n      writ = write(state->fd, state->x.next, put);\n      if (writ < 0)\n      {\n        gz_error(state, -1, strerror(errno));\n        return -1;\n      }\n      state->x.next += writ;\n    }\n\n    if (strm->avail_out == 0)\n    {\n      strm->avail_out = state->size;\n      strm->next_out = state->out;\n      state->x.next = state->out;\n    }\n  }\n  have = strm->avail_out;\n  ret = deflate(strm, flush);\n  if (ret == (-2))\n  {\n    gz_error(state, -2, \"internal error: deflate stream corrupt\");\n    return -1;\n  }\n  have -= strm->avail_out;\n  *state_ref = state;\n  *ret_ref = ret;\n  *writ_ref = writ;\n  *have_ref = have;\n  *put_ref = put;\n  *strm_ref = strm;\n}\n\n",
            "calle": [
                "deflate",
                "gz_error",
                "strerror",
                "write"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "state_ref",
                        "type": "gz_statep * const",
                        "definition": [
                            "gz_statep * const state_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "writ_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const writ_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put_ref",
                        "type": "unsigned * const",
                        "definition": [
                            "unsigned * const put_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm_ref",
                        "type": "z_streamp * const",
                        "definition": [
                            "z_streamp * const strm_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flush",
                        "type": "int",
                        "definition": [
                            "int flush"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max",
                        "type": "unsigned",
                        "definition": [
                            "unsigned max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state = *state_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = *ret_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "writ",
                        "type": "int",
                        "definition": [
                            "int writ = *writ_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have = *have_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "put",
                        "type": "unsigned",
                        "definition": [
                            "unsigned put = *put_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strm",
                        "type": "z_streamp",
                        "definition": [
                            "z_streamp strm = *strm_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_gz_write_1",
            "header": "",
            "params": [
                "gz_statep * const state_ref",
                "z_size_t * const len_ref",
                "voidpc buf"
            ],
            "definition": "z_size_t helper_gz_write_1(gz_statep * const state_ref, z_size_t * const len_ref, voidpc buf)\n{\n  gz_statep state = *state_ref;\n  z_size_t len = *len_ref;\n  if (state->strm.avail_in && (gz_comp(state, 0) == (-1)))\n  {\n    return 0;\n  }\n  state->strm.next_in = (Bytef *) buf;\n  do\n  {\n    unsigned n = (unsigned) (-1);\n    if (n > len)\n    {\n      n = (unsigned) len;\n    }\n    state->strm.avail_in = n;\n    state->x.pos += n;\n    if (gz_comp(state, 0) == (-1))\n    {\n      return 0;\n    }\n    len -= n;\n  }\n  while (len);\n  *state_ref = state;\n  *len_ref = len;\n}\n\n",
            "calle": [
                "gz_comp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "state_ref",
                        "type": "gz_statep * const",
                        "definition": [
                            "gz_statep * const state_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "z_size_t * const",
                        "definition": [
                            "z_size_t * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "voidpc",
                        "definition": [
                            "voidpc buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state = *state_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "z_size_t",
                        "definition": [
                            "z_size_t len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "unsigned",
                        "definition": [
                            "unsigned n = (unsigned) (-1)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_gz_write_2",
            "header": "",
            "params": [
                "gz_statep * const state_ref",
                "voidpc * const buf_ref",
                "z_size_t * const len_ref"
            ],
            "definition": "z_size_t helper_gz_write_2(gz_statep * const state_ref, voidpc * const buf_ref, z_size_t * const len_ref)\n{\n  gz_statep state = *state_ref;\n  voidpc buf = *buf_ref;\n  z_size_t len = *len_ref;\n  do\n  {\n    unsigned have;\n    unsigned copy;\n    if (state->strm.avail_in == 0)\n    {\n      state->strm.next_in = state->in;\n    }\n    have = (unsigned) ((state->strm.next_in + state->strm.avail_in) - state->in);\n    copy = state->size - have;\n    if (copy > len)\n    {\n      copy = (unsigned) len;\n    }\n    memcpy(state->in + have, buf, copy);\n    state->strm.avail_in += copy;\n    state->x.pos += copy;\n    buf = ((const char *) buf) + copy;\n    len -= copy;\n    if (len && (gz_comp(state, 0) == (-1)))\n    {\n      return 0;\n    }\n  }\n  while (len);\n  *state_ref = state;\n  *buf_ref = buf;\n  *len_ref = len;\n}\n\n",
            "calle": [
                "gz_comp",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "state_ref",
                        "type": "gz_statep * const",
                        "definition": [
                            "gz_statep * const state_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_ref",
                        "type": "voidpc * const",
                        "definition": [
                            "voidpc * const buf_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "z_size_t * const",
                        "definition": [
                            "z_size_t * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "gz_statep",
                        "definition": [
                            "gz_statep state = *state_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "voidpc",
                        "definition": [
                            "voidpc buf = *buf_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "z_size_t",
                        "definition": [
                            "z_size_t len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "have",
                        "type": "unsigned",
                        "definition": [
                            "unsigned have"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copy",
                        "type": "unsigned",
                        "definition": [
                            "unsigned copy"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "error",
            "header": "",
            "params": [
                "const char *msg"
            ],
            "definition": "void error(const char *msg)\n{\n  fprintf(stderr, \"%s: %s\\n\", prog, msg);\n  exit(1);\n}\n\n",
            "calle": [
                "exit",
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "msg",
                        "type": "const char *",
                        "definition": [
                            "const char *msg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prog",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gz_compress",
            "header": "",
            "params": [
                "FILE *in",
                "gzFile out"
            ],
            "definition": "void gz_compress(FILE *in, gzFile out)\n{\n  char buf[16384];\n  int len;\n  int err;\n  for (;;)\n  {\n    len = (int) fread(buf, 1, sizeof(buf), in);\n    if (ferror(in))\n    {\n      perror(\"fread\");\n      exit(1);\n    }\n    if (len == 0)\n    {\n      break;\n    }\n    if (gzwrite(out, buf, (unsigned) len) != len)\n    {\n      error(gzerror(out, &err));\n    }\n  }\n\n  fclose(in);\n  if (gzclose(out) != 0)\n  {\n    error(\"failed gzclose\");\n  }\n}\n\n",
            "calle": [
                "error",
                "exit",
                "fclose",
                "ferror",
                "fread",
                "gzclose",
                "gzerror",
                "gzwrite",
                "perror"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "in",
                        "type": "FILE *",
                        "definition": [
                            "FILE *in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "gzFile",
                        "definition": [
                            "gzFile out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char [16384]",
                        "definition": [
                            "char buf[16384]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "gz_uncompress",
            "header": "",
            "params": [
                "gzFile in",
                "FILE *out"
            ],
            "definition": "void gz_uncompress(gzFile in, FILE *out)\n{\n  char buf[16384];\n  int len;\n  int err;\n  for (;;)\n  {\n    len = gzread(in, buf, sizeof(buf));\n    if (len < 0)\n    {\n      error(gzerror(in, &err));\n    }\n    if (len == 0)\n    {\n      break;\n    }\n    if (((int) fwrite(buf, 1, (unsigned) len, out)) != len)\n    {\n      error(\"failed fwrite\");\n    }\n  }\n\n  if (fclose(out))\n  {\n    error(\"failed fclose\");\n  }\n  if (gzclose(in) != 0)\n  {\n    error(\"failed gzclose\");\n  }\n}\n\n",
            "calle": [
                "error",
                "fclose",
                "fwrite",
                "gzclose",
                "gzerror",
                "gzread"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "in",
                        "type": "gzFile",
                        "definition": [
                            "gzFile in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "FILE *",
                        "definition": [
                            "FILE *out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char [16384]",
                        "definition": [
                            "char buf[16384]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "int",
                        "definition": [
                            "int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err",
                        "type": "int",
                        "definition": [
                            "int err"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "file_compress",
            "header": "",
            "params": [
                "char *file",
                "char *mode"
            ],
            "definition": "void file_compress(char *file, char *mode)\n{\n  char outfile[1024];\n  FILE *in;\n  unsigned int in_idx = 0;\n  gzFile out;\n  if ((strlen(file) + strlen(\".gz\")) >= (sizeof(outfile)))\n  {\n    fprintf(stderr, \"%s: filename too long\\n\", prog);\n    exit(1);\n  }\n  snprintf(outfile, sizeof(outfile), \"%s%s\", file, \".gz\");\n  in_idx = fopen(file, \"rb\");\n  if ((&in[in_idx]) == 0)\n  {\n    perror(file);\n    exit(1);\n  }\n  out = gzopen(outfile, mode);\n  if (out == 0)\n  {\n    fprintf(stderr, \"%s: can't gzopen %s\\n\", prog, outfile);\n    exit(1);\n  }\n  gz_compress(in, out);\n  unlink(file);\n}\n\n",
            "calle": [
                "exit",
                "fopen",
                "fprintf",
                "gz_compress",
                "gzopen",
                "perror",
                "snprintf",
                "strlen",
                "unlink"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "file",
                        "type": "char *",
                        "definition": [
                            "char *file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mode",
                        "type": "char *",
                        "definition": [
                            "char *mode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outfile",
                        "type": "char [1024]",
                        "definition": [
                            "char outfile[1024]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "FILE *",
                        "definition": [
                            "FILE *in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int in_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "gzFile",
                        "definition": [
                            "gzFile out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prog",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "file_uncompress",
            "header": "",
            "params": [
                "char *file"
            ],
            "definition": "void file_uncompress(char *file)\n{\n  char buf[1024];\n  char *infile;\n  unsigned int infile_idx = 0;\n  char *outfile;\n  unsigned int outfile_idx = 0;\n  FILE *out;\n  unsigned int out_idx = 0;\n  gzFile in;\n  z_size_t len = strlen(file);\n  if ((len + strlen(\".gz\")) >= (sizeof(buf)))\n  {\n    fprintf(stderr, \"%s: filename too long\\n\", prog);\n    exit(1);\n  }\n  snprintf(buf, sizeof(buf), \"%s\", file);\n  if ((len > ((sizeof(\".gz\")) - 1)) && (strcmp((file + len) - ((sizeof(\".gz\")) - 1), \".gz\") == 0))\n  {\n    infile_idx = file;\n    outfile_idx = buf;\n    outfile[(len - 3) + outfile_idx] = '\\0';\n  }\n  else\n  {\n    outfile_idx = file;\n    infile_idx = buf;\n    snprintf(buf + len, (sizeof(buf)) - len, \"%s\", \".gz\");\n  }\n  in = gzopen(infile, \"rb\");\n  if (in == 0)\n  {\n    fprintf(stderr, \"%s: can't gzopen %s\\n\", prog, infile);\n    exit(1);\n  }\n  out_idx = fopen(outfile, \"wb\");\n  if ((&out[out_idx]) == 0)\n  {\n    perror(file);\n    exit(1);\n  }\n  gz_uncompress(in, out);\n  unlink(infile);\n}\n\n",
            "calle": [
                "exit",
                "fopen",
                "fprintf",
                "gz_uncompress",
                "gzopen",
                "perror",
                "snprintf",
                "strcmp",
                "strlen",
                "unlink"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "file",
                        "type": "char *",
                        "definition": [
                            "char *file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "char [1024]",
                        "definition": [
                            "char buf[1024]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "infile",
                        "type": "char *",
                        "definition": [
                            "char *infile"
                        ]
                    },
                    {
                        "path": null,
                        "name": "infile_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int infile_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outfile",
                        "type": "char *",
                        "definition": [
                            "char *outfile"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outfile_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int outfile_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "FILE *",
                        "definition": [
                            "FILE *out"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int out_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "gzFile",
                        "definition": [
                            "gzFile in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "z_size_t",
                        "definition": [
                            "z_size_t len = strlen(file)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prog",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#minigzip",
            "header": "",
            "params": [
                "int argc",
                "char *argv[]"
            ],
            "definition": "int main(int argc, char *argv[])\n{\n  int copyout = 0;\n  int uncompr = 0;\n  gzFile file;\n  char *bname;\n  unsigned int bname_idx = 0;\n  char outmode[20];\n  snprintf(outmode, sizeof(outmode), \"%s\", \"wb6 \");\n  prog = argv[0];\n  bname_idx = strrchr(argv[0], '/');\n  if (bname)\n  {\n    bname_idx += 1;\n  }\n  else\n    bname_idx = argv[0];\n  argc--, argv++;\n  argv += 1;\n  argc -= 1;\n  if (!strcmp(bname, \"gunzip\"))\n  {\n    uncompr = 1;\n  }\n  else\n    if (!strcmp(bname, \"zcat\"))\n  {\n    copyout = (uncompr = 1);\n  }\n  while (argc > 0)\n  {\n    if (strcmp(*argv, \"-c\") == 0)\n    {\n      copyout = 1;\n    }\n    else\n      if (strcmp(*argv, \"-d\") == 0)\n    {\n      uncompr = 1;\n    }\n    else\n      if (strcmp(*argv, \"-f\") == 0)\n    {\n      outmode[3] = 'f';\n    }\n    else\n      if (strcmp(*argv, \"-h\") == 0)\n    {\n      outmode[3] = 'h';\n    }\n    else\n      if (strcmp(*argv, \"-r\") == 0)\n    {\n      outmode[3] = 'R';\n    }\n    else\n      if (((((*argv)[0] == '-') && ((*argv)[1] >= '1')) && ((*argv)[1] <= '9')) && ((*argv)[2] == 0))\n    {\n      outmode[2] = (*argv)[1];\n    }\n    else\n      break;\n    argc--, argv++;\n    argv += 1;\n    argc -= 1;\n  }\n\n  if (outmode[3] == ' ')\n  {\n    outmode[3] = 0;\n  }\n  if (argc == 0)\n  {\n    ;\n    ;\n    if (uncompr)\n    {\n      file = gzdopen(fileno(stdin), \"rb\");\n      if (file == 0)\n      {\n        error(\"can't gzdopen stdin\");\n      }\n      gz_uncompress(file, stdout);\n    }\n    else\n    {\n      file = gzdopen(fileno(stdout), outmode);\n      if (file == 0)\n      {\n        error(\"can't gzdopen stdout\");\n      }\n      gz_compress(stdin, file);\n    }\n  }\n  else\n  {\n    if (copyout)\n    {\n      ;\n    }\n    do\n    {\n      if (uncompr)\n      {\n        if (copyout)\n        {\n          file = gzopen(*argv, \"rb\");\n          if (file == 0)\n          {\n            fprintf(stderr, \"%s: can't gzopen %s\\n\", prog, *argv);\n          }\n          else\n            gz_uncompress(file, stdout);\n        }\n        else\n        {\n          file_uncompress(*argv);\n        }\n      }\n      else\n      {\n        if (copyout)\n        {\n          FILE *in = fopen(*argv, \"rb\");\n          if (in == 0)\n          {\n            perror(*argv);\n          }\n          else\n          {\n            file = gzdopen(fileno(stdout), outmode);\n            if (file == 0)\n            {\n              error(\"can't gzdopen stdout\");\n            }\n            gz_compress(in, file);\n          }\n        }\n        else\n        {\n          file_compress(*argv, outmode);\n        }\n      }\n    }\n    while (argv++, --argc);\n  }\n  return 0;\n}\n\n",
            "calle": [
                "error",
                "file_compress",
                "file_uncompress",
                "fileno",
                "fopen",
                "fprintf",
                "gz_compress",
                "gz_uncompress",
                "gzdopen",
                "gzopen",
                "perror",
                "snprintf",
                "strcmp",
                "strrchr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char *[]",
                        "definition": [
                            "char *argv[]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copyout",
                        "type": "int",
                        "definition": [
                            "int copyout = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uncompr",
                        "type": "int",
                        "definition": [
                            "int uncompr = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file",
                        "type": "gzFile",
                        "definition": [
                            "gzFile file"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bname",
                        "type": "char *",
                        "definition": [
                            "char *bname"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bname_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bname_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outmode",
                        "type": "char [20]",
                        "definition": [
                            "char outmode[20]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "FILE *",
                        "definition": [
                            "FILE *in = fopen(*argv, \"rb\")"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prog",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_access_version_number",
            "header": "extern png_uint_32 png_access_version_number(void)",
            "params": [
                "void"
            ],
            "definition": "png_uint_32 png_access_version_number(void)\n{\n  return (png_uint_32) 10640;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_set_sig_bytes",
            "header": "extern void png_set_sig_bytes(png_structrp png_ptr, int num_bytes)",
            "params": [
                "png_structrp png_ptr",
                "int num_bytes"
            ],
            "definition": "void png_set_sig_bytes(png_structrp png_ptr, int num_bytes)\n{\n  unsigned int nb = (unsigned int) num_bytes;\n  (void) 0;\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  if (num_bytes < 0)\n  {\n    nb = 0;\n  }\n  if (nb > 8)\n  {\n    png_error(png_ptr, \"Too many bytes for PNG signature\");\n  }\n  png_ptr->sig_bytes = (png_byte) nb;\n}\n\n",
            "calle": [
                "png_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_bytes",
                        "type": "int",
                        "definition": [
                            "int num_bytes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nb",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int nb = (unsigned int) num_bytes"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_sig_cmp",
            "header": "extern int png_sig_cmp(png_const_bytep sig, size_t start, size_t num_to_check)",
            "params": [
                "png_const_bytep sig",
                "size_t start",
                "size_t num_to_check"
            ],
            "definition": "int png_sig_cmp(png_const_bytep sig, size_t start, size_t num_to_check)\n{\n  png_byte png_signature[8] = {137, 80, 78, 71, 13, 10, 26, 10};\n  if (num_to_check > 8)\n  {\n    num_to_check = 8;\n  }\n  else\n    if (num_to_check < 1)\n  {\n    return -1;\n  }\n  if (start > 7)\n  {\n    return -1;\n  }\n  if ((start + num_to_check) > 8)\n  {\n    num_to_check = 8 - start;\n  }\n  return (int) memcmp(&sig[start], &png_signature[start], num_to_check);\n}\n\n",
            "calle": [
                "memcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "sig",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep sig"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "size_t",
                        "definition": [
                            "size_t start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_to_check",
                        "type": "size_t",
                        "definition": [
                            "size_t num_to_check"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_signature",
                        "type": "png_byte [8]",
                        "definition": [
                            "png_byte png_signature[8] = {137, 80, 78, 71, 13, 10, 26, 10}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_reset_zstream",
            "header": "extern int png_reset_zstream(png_structrp png_ptr)",
            "params": [
                "png_structrp png_ptr"
            ],
            "definition": "int png_reset_zstream(png_structrp png_ptr)\n{\n  if (png_ptr == 0)\n  {\n    return -2;\n  }\n  return inflateReset(&png_ptr->zstream);\n}\n\n",
            "calle": [
                "inflateReset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_create_info_struct",
            "header": "extern png_infop png_create_info_struct(png_const_structrp png_ptr)",
            "params": [
                "png_const_structrp png_ptr"
            ],
            "definition": "png_infop png_create_info_struct(png_const_structrp png_ptr)\n{\n  png_inforp info_ptr;\n  (void) 0;\n  if (png_ptr == 0)\n  {\n    return 0;\n  }\n  info_ptr = png_malloc_base(png_ptr, sizeof(*info_ptr));\n  if (info_ptr != 0)\n  {\n    memset(info_ptr, 0, sizeof(*info_ptr));\n  }\n  return info_ptr;\n}\n\n",
            "calle": [
                "memset",
                "png_malloc_base"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_info_init_3",
            "header": "extern void png_info_init_3(png_infopp info_ptr, size_t png_info_struct_size)",
            "params": [
                "png_infopp ptr_ptr",
                "size_t png_info_struct_size"
            ],
            "definition": "void png_info_init_3(png_infopp ptr_ptr, size_t png_info_struct_size)\n{\n  png_inforp info_ptr = *ptr_ptr;\n  (void) 0;\n  if (info_ptr == 0)\n  {\n    return;\n  }\n  if ((sizeof(png_info)) > png_info_struct_size)\n  {\n    *ptr_ptr = 0;\n    free(info_ptr);\n    info_ptr = png_malloc_base(0, sizeof(*info_ptr));\n    if (info_ptr == 0)\n    {\n      return;\n    }\n    *ptr_ptr = info_ptr;\n  }\n  memset(info_ptr, 0, sizeof(*info_ptr));\n}\n\n",
            "calle": [
                "free",
                "memset",
                "png_malloc_base"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr_ptr",
                        "type": "png_infopp",
                        "definition": [
                            "png_infopp ptr_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_info_struct_size",
                        "type": "size_t",
                        "definition": [
                            "size_t png_info_struct_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr = *ptr_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_destroy_info_struct",
            "header": "extern void png_destroy_info_struct(png_const_structrp png_ptr, png_infopp info_ptr_ptr)",
            "params": [
                "png_const_structrp png_ptr",
                "png_infopp info_ptr_ptr"
            ],
            "definition": "void png_destroy_info_struct(png_const_structrp png_ptr, png_infopp info_ptr_ptr)\n{\n  png_inforp info_ptr = 0;\n  (void) 0;\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  if (info_ptr_ptr != 0)\n  {\n    info_ptr = *info_ptr_ptr;\n  }\n  if (info_ptr != 0)\n  {\n    *info_ptr_ptr = 0;\n    png_free_data(png_ptr, info_ptr, 0xffffU, -1);\n    memset(info_ptr, 0, sizeof(*info_ptr));\n    png_free(png_ptr, info_ptr);\n  }\n}\n\n",
            "calle": [
                "memset",
                "png_free",
                "png_free_data"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr_ptr",
                        "type": "png_infopp",
                        "definition": [
                            "png_infopp info_ptr_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_init_io",
            "header": "extern void png_init_io(png_structrp png_ptr, png_FILE_p fp)",
            "params": [
                "png_structrp png_ptr",
                "png_FILE_p fp"
            ],
            "definition": "void png_init_io(png_structrp png_ptr, png_FILE_p fp)\n{\n  (void) 0;\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  png_ptr->io_ptr = (png_voidp) fp;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fp",
                        "type": "png_FILE_p",
                        "definition": [
                            "png_FILE_p fp"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_io_ptr",
            "header": "extern png_voidp png_get_io_ptr(png_const_structrp png_ptr)",
            "params": [
                "png_const_structrp png_ptr"
            ],
            "definition": "png_voidp png_get_io_ptr(png_const_structrp png_ptr)\n{\n  if (png_ptr == 0)\n  {\n    return 0;\n  }\n  return png_ptr->io_ptr;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_free_data",
            "header": "extern void png_free_data(png_const_structrp png_ptr, png_inforp info_ptr, png_uint_32 free_me, int num)",
            "params": [
                "png_const_structrp png_ptr",
                "png_inforp info_ptr",
                "png_uint_32 mask",
                "int num"
            ],
            "definition": "void png_free_data(png_const_structrp png_ptr, png_inforp info_ptr, png_uint_32 mask, int num)\n{\n  (void) 0;\n  if ((png_ptr == 0) || (info_ptr == 0))\n  {\n    return;\n  }\n  if (((mask & 0x2000U) & info_ptr->free_me) != 0)\n  {\n    info_ptr->valid &= ~0x0010U;\n    png_free(png_ptr, info_ptr->trans_alpha);\n    info_ptr->trans_alpha = 0;\n    info_ptr->num_trans = 0;\n  }\n  if ((info_ptr->unknown_chunks != 0) && (((mask & 0x0200U) & info_ptr->free_me) != 0))\n  {\n    if (num != (-1))\n    {\n      png_free(png_ptr, info_ptr->unknown_chunks[num].data);\n      info_ptr->unknown_chunks[num].data = 0;\n    }\n    else\n    {\n      int i;\n      for (i = 0; i < info_ptr->unknown_chunks_num; i += 1)\n      {\n        png_free(png_ptr, info_ptr->unknown_chunks[i].data);\n      }\n\n      png_free(png_ptr, info_ptr->unknown_chunks);\n      info_ptr->unknown_chunks = 0;\n      info_ptr->unknown_chunks_num = 0;\n    }\n  }\n  if (((mask & 0x0008U) & info_ptr->free_me) != 0)\n  {\n    png_free(png_ptr, info_ptr->hist);\n    info_ptr->hist = 0;\n    info_ptr->valid &= ~0x0040U;\n  }\n  if (((mask & 0x1000U) & info_ptr->free_me) != 0)\n  {\n    png_free(png_ptr, info_ptr->palette);\n    info_ptr->palette = 0;\n    info_ptr->valid &= ~0x0008U;\n    info_ptr->num_palette = 0;\n  }\n  if (((mask & 0x0040U) & info_ptr->free_me) != 0)\n  {\n    if (info_ptr->row_pointers != 0)\n    {\n      png_uint_32 row;\n      for (row = 0; row < info_ptr->height; row += 1)\n      {\n        png_free(png_ptr, info_ptr->row_pointers[row]);\n      }\n\n      png_free(png_ptr, info_ptr->row_pointers);\n      info_ptr->row_pointers = 0;\n    }\n    info_ptr->valid &= ~0x8000U;\n  }\n  if (num != (-1))\n  {\n    mask &= ~0x4220U;\n  }\n  info_ptr->free_me &= ~mask;\n}\n\n",
            "calle": [
                "png_free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 mask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num",
                        "type": "int",
                        "definition": [
                            "int num"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 row"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_data_freer",
            "header": "extern void png_data_freer(png_const_structrp png_ptr, png_inforp info_ptr, int freer, png_uint_32 mask)",
            "params": [
                "png_const_structrp png_ptr",
                "png_inforp info_ptr",
                "int freer",
                "png_uint_32 mask"
            ],
            "definition": "void png_data_freer(png_const_structrp png_ptr, png_inforp info_ptr, int freer, png_uint_32 mask)\n{\n  (void) 0;\n  if ((png_ptr == 0) || (info_ptr == 0))\n  {\n    return;\n  }\n  if (freer == 1)\n  {\n    info_ptr->free_me |= mask;\n  }\n  else\n    if (freer == 2)\n  {\n    info_ptr->free_me &= ~mask;\n  }\n  else\n    png_error(png_ptr, \"Unknown freer parameter in png_data_freer\");\n}\n\n",
            "calle": [
                "png_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "freer",
                        "type": "int",
                        "definition": [
                            "int freer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 mask"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_handle_as_unknown",
            "header": "extern int png_handle_as_unknown(png_const_structrp png_ptr, png_const_bytep chunk_name)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_bytep chunk_name"
            ],
            "definition": "int png_handle_as_unknown(png_const_structrp png_ptr, png_const_bytep chunk_name)\n{\n  png_const_bytep p;\n  png_const_bytep p_end;\n  if (((png_ptr == 0) || (chunk_name == 0)) || (png_ptr->num_chunk_list == 0))\n  {\n    return 0;\n  }\n  p_end = png_ptr->chunk_list;\n  p = p_end + (png_ptr->num_chunk_list * 5);\n  do\n  {\n    p -= 5;\n    if (memcmp(chunk_name, p, 4) == 0)\n    {\n      return p[4];\n    }\n  }\n  while (p > p_end);\n  return 0;\n}\n\n",
            "calle": [
                "memcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chunk_name",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep chunk_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p_end",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep p_end"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_copyright",
            "header": "extern png_const_charp png_get_copyright(png_const_structrp png_ptr)",
            "params": [
                "png_const_structrp png_ptr"
            ],
            "definition": "png_const_charp png_get_copyright(png_const_structrp png_ptr)\n{\n  (void) png_ptr;\n  return \"\\nlibpng version 1.6.40\\nCopyright (c) 2018-2023 Cosmin Truta\\nCopyright (c) 1998-2002,2004,2006-2018 Glenn Randers-Pehrson\\nCopyright (c) 1996-1997 Andreas Dilger\\nCopyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.\\n\";\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_header_ver",
            "header": "extern png_const_charp png_get_header_ver(png_const_structrp png_ptr)",
            "params": [
                "png_const_structrp png_ptr"
            ],
            "definition": "png_const_charp png_get_header_ver(png_const_structrp png_ptr)\n{\n  (void) png_ptr;\n  return \"1.6.40\";\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_header_version",
            "header": "extern png_const_charp png_get_header_version(png_const_structrp png_ptr)",
            "params": [
                "png_const_structrp png_ptr"
            ],
            "definition": "png_const_charp png_get_header_version(png_const_structrp png_ptr)\n{\n  (void) png_ptr;\n  return \" libpng version 1.6.40 - June 21, 2023\\n\\n\";\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_libpng_ver",
            "header": "extern png_const_charp png_get_libpng_ver(png_const_structrp png_ptr)",
            "params": [
                "png_const_structrp png_ptr"
            ],
            "definition": "png_const_charp png_get_libpng_ver(png_const_structrp png_ptr)\n{\n  return png_get_header_ver(png_ptr);\n}\n\n",
            "calle": [
                "png_get_header_ver"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_save_int_32",
            "header": "extern void png_save_int_32(png_bytep buf, png_int_32 i)",
            "params": [
                "png_bytep buf",
                "png_int_32 i"
            ],
            "definition": "void png_save_int_32(png_bytep buf, png_int_32 i)\n{\n  png_save_uint_32(buf, (png_uint_32) i);\n}\n\n",
            "calle": [
                "png_save_uint_32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buf",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "png_int_32",
                        "definition": [
                            "png_int_32 i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_zstream_error",
            "header": "extern void png_zstream_error(png_structrp png_ptr, int ret)",
            "params": [
                "png_structrp png_ptr",
                "int ret"
            ],
            "definition": "void png_zstream_error(png_structrp png_ptr, int ret)\n{\n  if (png_ptr->zstream.msg == 0)\n  {\n    switch (ret)\n    {\n      default:\n\n      case 0:\n      {\n        png_ptr->zstream.msg = \"unexpected zlib return code\";\n        break;\n      }\n\n      case 1:\n      {\n        png_ptr->zstream.msg = \"unexpected end of LZ stream\";\n        break;\n      }\n\n      case 2:\n      {\n        png_ptr->zstream.msg = \"missing LZ dictionary\";\n        break;\n      }\n\n      case -1:\n      {\n        png_ptr->zstream.msg = \"zlib IO error\";\n        break;\n      }\n\n      case -2:\n      {\n        png_ptr->zstream.msg = \"bad parameters to zlib\";\n        break;\n      }\n\n      case -3:\n      {\n        png_ptr->zstream.msg = \"damaged LZ stream\";\n        break;\n      }\n\n      case -4:\n      {\n        png_ptr->zstream.msg = \"insufficient memory\";\n        break;\n      }\n\n      case -5:\n      {\n        png_ptr->zstream.msg = \"truncated\";\n        break;\n      }\n\n      case -6:\n      {\n        png_ptr->zstream.msg = \"unsupported zlib version\";\n        break;\n      }\n\n      case -7:\n      {\n        png_ptr->zstream.msg = \"unexpected zlib return\";\n        break;\n      }\n\n    }\n\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_user_version_check",
            "header": "extern int png_user_version_check(png_structrp png_ptr, png_const_charp user_png_ver)",
            "params": [
                "png_structrp png_ptr",
                "png_const_charp user_png_ver"
            ],
            "definition": "int png_user_version_check(png_structrp png_ptr, png_const_charp user_png_ver)\n{\n  if (user_png_ver != 0)\n  {\n    int i = -1;\n    int found_dots = 0;\n    do\n    {\n      i += 1;\n      if (user_png_ver[i] != \"1.6.40\"[i])\n      {\n        png_ptr->flags |= 0x20000U;\n      }\n      if (user_png_ver[i] == '.')\n      {\n        found_dots += 1;\n      }\n    }\n    while (((found_dots < 2) && (user_png_ver[i] != 0)) && (\"1.6.40\"[i] != 0));\n  }\n  else\n    png_ptr->flags |= 0x20000U;\n  if ((png_ptr->flags & 0x20000U) != 0)\n  {\n    size_t pos = 0;\n    char m[128];\n    pos = png_safecat(m, sizeof(m), pos, \"Application built with libpng-\");\n    pos = png_safecat(m, sizeof(m), pos, user_png_ver);\n    pos = png_safecat(m, sizeof(m), pos, \" but running with \");\n    pos = png_safecat(m, sizeof(m), pos, \"1.6.40\");\n    (void) pos;\n    png_warning(png_ptr, m);\n    return 0;\n  }\n  return 1;\n}\n\n",
            "calle": [
                "png_safecat",
                "png_warning"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "user_png_ver",
                        "type": "png_const_charp",
                        "definition": [
                            "png_const_charp user_png_ver"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = -1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "found_dots",
                        "type": "int",
                        "definition": [
                            "int found_dots = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m",
                        "type": "char [128]",
                        "definition": [
                            "char m[128]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_create_png_struct",
            "header": "extern png_structp png_create_png_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr, png_malloc_ptr malloc_fn, png_free_ptr free_fn)",
            "params": [
                "png_const_charp user_png_ver",
                "png_voidp error_ptr",
                "png_error_ptr error_fn",
                "png_error_ptr warn_fn",
                "png_voidp mem_ptr",
                "png_malloc_ptr malloc_fn",
                "png_free_ptr free_fn"
            ],
            "definition": "png_structp png_create_png_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr, png_malloc_ptr malloc_fn, png_free_ptr free_fn)\n{\n  png_struct create_struct;\n  memset(&create_struct, 0, sizeof(create_struct));\n  create_struct.user_width_max = 1000000;\n  create_struct.user_height_max = 1000000;\n  create_struct.user_chunk_cache_max = 1000;\n  create_struct.user_chunk_malloc_max = 8000000;\n  (void) mem_ptr;\n  (void) malloc_fn;\n  (void) free_fn;\n  png_set_error_fn(&create_struct, error_ptr, error_fn, warn_fn);\n  {\n    if (png_user_version_check(&create_struct, user_png_ver) != 0)\n    {\n      png_structrp png_ptr = png_malloc_warn(&create_struct, sizeof(*png_ptr));\n      if (png_ptr != 0)\n      {\n        create_struct.zstream.zalloc = png_zalloc;\n        create_struct.zstream.zfree = png_zfree;\n        create_struct.zstream.opaque = png_ptr;\n        *png_ptr = create_struct;\n        return png_ptr;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "calle": [
                "memset",
                "png_malloc_warn",
                "png_set_error_fn",
                "png_user_version_check",
                "png_zalloc",
                "png_zfree"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "user_png_ver",
                        "type": "png_const_charp",
                        "definition": [
                            "png_const_charp user_png_ver"
                        ]
                    },
                    {
                        "path": null,
                        "name": "error_ptr",
                        "type": "png_voidp",
                        "definition": [
                            "png_voidp error_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "error_fn",
                        "type": "png_error_ptr",
                        "definition": [
                            "png_error_ptr error_fn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "warn_fn",
                        "type": "png_error_ptr",
                        "definition": [
                            "png_error_ptr warn_fn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mem_ptr",
                        "type": "png_voidp",
                        "definition": [
                            "png_voidp mem_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "malloc_fn",
                        "type": "png_malloc_ptr",
                        "definition": [
                            "png_malloc_ptr malloc_fn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "free_fn",
                        "type": "png_free_ptr",
                        "definition": [
                            "png_free_ptr free_fn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "create_struct",
                        "type": "png_struct",
                        "definition": [
                            "png_struct create_struct"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr = png_malloc_warn(&create_struct, sizeof(*png_ptr))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_zalloc",
            "header": "extern voidpf png_zalloc(voidpf png_ptr, uInt items, uInt size)",
            "params": [
                "voidpf png_ptr",
                "uInt items",
                "uInt size"
            ],
            "definition": "voidpf png_zalloc(voidpf png_ptr, uInt items, uInt size)\n{\n  png_alloc_size_t num_bytes = size;\n  if (png_ptr == 0)\n  {\n    return 0;\n  }\n  if (items >= ((~((png_alloc_size_t) 0)) / size))\n  {\n    png_warning(png_ptr, \"Potential overflow in png_zalloc()\");\n    return 0;\n  }\n  num_bytes *= items;\n  return png_malloc_warn(png_ptr, num_bytes);\n}\n\n",
            "calle": [
                "png_malloc_warn",
                "png_warning"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "voidpf",
                        "definition": [
                            "voidpf png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "items",
                        "type": "uInt",
                        "definition": [
                            "uInt items"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "uInt",
                        "definition": [
                            "uInt size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_bytes",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t num_bytes = size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_zfree",
            "header": "extern void png_zfree(voidpf png_ptr, voidpf ptr)",
            "params": [
                "voidpf png_ptr",
                "voidpf ptr"
            ],
            "definition": "void png_zfree(voidpf png_ptr, voidpf ptr)\n{\n  png_free(png_ptr, ptr);\n}\n\n",
            "calle": [
                "png_free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "voidpf",
                        "definition": [
                            "voidpf png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "voidpf",
                        "definition": [
                            "voidpf ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_reset_crc",
            "header": "extern void png_reset_crc(png_structrp png_ptr)",
            "params": [
                "png_structrp png_ptr"
            ],
            "definition": "void png_reset_crc(png_structrp png_ptr)\n{\n  png_ptr->crc = (png_uint_32) crc32(0, 0, 0);\n}\n\n",
            "calle": [
                "crc32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_calculate_crc",
            "header": "extern void png_calculate_crc(png_structrp png_ptr, png_const_bytep ptr, size_t length)",
            "params": [
                "png_structrp png_ptr",
                "png_const_bytep ptr",
                "size_t length"
            ],
            "definition": "void png_calculate_crc(png_structrp png_ptr, png_const_bytep ptr, size_t length)\n{\n  int need_crc = 1;\n  if ((1 & (png_ptr->chunk_name >> 29)) != 0)\n  {\n    if ((png_ptr->flags & (0x0100U | 0x0200U)) == (0x0100U | 0x0200U))\n    {\n      need_crc = 0;\n    }\n  }\n  else\n  {\n    if ((png_ptr->flags & 0x0800U) != 0)\n    {\n      need_crc = 0;\n    }\n  }\n  if ((need_crc != 0) && (length > 0))\n  {\n    uLong crc = png_ptr->crc;\n    do\n    {\n      uInt safe_length = (uInt) length;\n      if (safe_length == 0)\n      {\n        safe_length = (uInt) (-1);\n      }\n      crc = crc32(crc, ptr, safe_length);\n      ptr += safe_length;\n      length -= safe_length;\n    }\n    while (length > 0);\n    png_ptr->crc = (png_uint_32) crc;\n  }\n}\n\n",
            "calle": [
                "crc32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "need_crc",
                        "type": "int",
                        "definition": [
                            "int need_crc = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc",
                        "type": "uLong",
                        "definition": [
                            "uLong crc = png_ptr->crc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "safe_length",
                        "type": "uInt",
                        "definition": [
                            "uInt safe_length = (uInt) length"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_chunk_unknown_handling",
            "header": "extern int png_chunk_unknown_handling(png_const_structrp png_ptr, png_uint_32 chunk_name)",
            "params": [
                "png_const_structrp png_ptr",
                "png_uint_32 chunk_name"
            ],
            "definition": "int png_chunk_unknown_handling(png_const_structrp png_ptr, png_uint_32 chunk_name)\n{\n  png_byte chunk_string[5];\n  (void) (((void) ((((char *) chunk_string)[0] = (char) ((chunk_name >> 24) & 0xff), ((char *) chunk_string)[1] = (char) ((chunk_name >> 16) & 0xff), ((char *) chunk_string)[2] = (char) ((chunk_name >> 8) & 0xff), ((char *) chunk_string)[3] = (char) (chunk_name & 0xff))), ((char *) chunk_string)[4] = 0));\n  return png_handle_as_unknown(png_ptr, chunk_string);\n}\n\n",
            "calle": [
                "png_handle_as_unknown"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chunk_name",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 chunk_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chunk_string",
                        "type": "png_byte [5]",
                        "definition": [
                            "png_byte chunk_string[5]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_check_IHDR",
            "header": "extern void png_check_IHDR(png_const_structrp png_ptr, png_uint_32 width, png_uint_32 height, int bit_depth, int color_type, int interlace_type, int compression_type, int filter_type)",
            "params": [
                "png_const_structrp png_ptr",
                "png_uint_32 width",
                "png_uint_32 height",
                "int bit_depth",
                "int color_type",
                "int interlace_type",
                "int compression_type",
                "int filter_type"
            ],
            "definition": "void png_check_IHDR(png_const_structrp png_ptr, png_uint_32 width, png_uint_32 height, int bit_depth, int color_type, int interlace_type, int compression_type, int filter_type)\n{\n  int error = 0;\n  if (width == 0)\n  {\n    png_warning(png_ptr, \"Image width is zero in IHDR\");\n    error = 1;\n  }\n  if (width > ((png_uint_32) 0x7fffffffL))\n  {\n    png_warning(png_ptr, \"Invalid image width in IHDR\");\n    error = 1;\n  }\n  if (png_gt((width + 7) & (~7U), (((((size_t) (-1)) - 48) - 1) / 8) - 1))\n  {\n    png_warning(png_ptr, \"Image width is too large for this architecture\");\n    error = 1;\n  }\n  if (width > png_ptr->user_width_max)\n  {\n    png_warning(png_ptr, \"Image width exceeds user limit in IHDR\");\n    error = 1;\n  }\n  if (height == 0)\n  {\n    png_warning(png_ptr, \"Image height is zero in IHDR\");\n    error = 1;\n  }\n  if (height > ((png_uint_32) 0x7fffffffL))\n  {\n    png_warning(png_ptr, \"Invalid image height in IHDR\");\n    error = 1;\n  }\n  if (height > png_ptr->user_height_max)\n  {\n    png_warning(png_ptr, \"Image height exceeds user limit in IHDR\");\n    error = 1;\n  }\n  if (((((bit_depth != 1) && (bit_depth != 2)) && (bit_depth != 4)) && (bit_depth != 8)) && (bit_depth != 16))\n  {\n    png_warning(png_ptr, \"Invalid bit depth in IHDR\");\n    error = 1;\n  }\n  if ((((color_type < 0) || (color_type == 1)) || (color_type == 5)) || (color_type > 6))\n  {\n    png_warning(png_ptr, \"Invalid color type in IHDR\");\n    error = 1;\n  }\n  if (((color_type == (2 | 1)) && (bit_depth > 8)) || ((((color_type == 2) || (color_type == 4)) || (color_type == (2 | 4))) && (bit_depth < 8)))\n  {\n    png_warning(png_ptr, \"Invalid color type/bit depth combination in IHDR\");\n    error = 1;\n  }\n  if (interlace_type >= 2)\n  {\n    png_warning(png_ptr, \"Unknown interlace method in IHDR\");\n    error = 1;\n  }\n  if (compression_type != 0)\n  {\n    png_warning(png_ptr, \"Unknown compression method in IHDR\");\n    error = 1;\n  }\n  if (filter_type != 0)\n  {\n    png_warning(png_ptr, \"Unknown filter method in IHDR\");\n    error = 1;\n  }\n  if (error == 1)\n  {\n    png_error(png_ptr, \"Invalid IHDR data\");\n  }\n}\n\n",
            "calle": [
                "png_error",
                "png_gt",
                "png_warning"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bit_depth",
                        "type": "int",
                        "definition": [
                            "int bit_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color_type",
                        "type": "int",
                        "definition": [
                            "int color_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "interlace_type",
                        "type": "int",
                        "definition": [
                            "int interlace_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compression_type",
                        "type": "int",
                        "definition": [
                            "int compression_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filter_type",
                        "type": "int",
                        "definition": [
                            "int filter_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "error",
                        "type": "int",
                        "definition": [
                            "int error = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_gt",
            "header": "",
            "params": [
                "size_t a",
                "size_t b"
            ],
            "definition": "static int png_gt(size_t a, size_t b)\n{\n  return a > b;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "a",
                        "type": "size_t",
                        "definition": [
                            "size_t a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "size_t",
                        "definition": [
                            "size_t b"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_longjmp",
            "header": "extern void png_longjmp(png_const_structrp png_ptr, int val)",
            "params": [
                "png_const_structrp png_ptr",
                "int val"
            ],
            "definition": "void png_longjmp(png_const_structrp png_ptr, int val)\n{\n  (void) png_ptr;\n  (void) val;\n  abort();\n}\n\n",
            "calle": [
                "abort"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int",
                        "definition": [
                            "int val"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_set_error_fn",
            "header": "extern void png_set_error_fn(png_structrp png_ptr, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warning_fn)",
            "params": [
                "png_structrp png_ptr",
                "png_voidp error_ptr",
                "png_error_ptr error_fn",
                "png_error_ptr warning_fn"
            ],
            "definition": "void png_set_error_fn(png_structrp png_ptr, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warning_fn)\n{\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  png_ptr->error_ptr = error_ptr;\n  png_ptr->error_fn = error_fn;\n  png_ptr->warning_fn = warning_fn;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "error_ptr",
                        "type": "png_voidp",
                        "definition": [
                            "png_voidp error_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "error_fn",
                        "type": "png_error_ptr",
                        "definition": [
                            "png_error_ptr error_fn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "warning_fn",
                        "type": "png_error_ptr",
                        "definition": [
                            "png_error_ptr warning_fn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_error_ptr",
            "header": "extern png_voidp png_get_error_ptr(png_const_structrp png_ptr)",
            "params": [
                "png_const_structrp png_ptr"
            ],
            "definition": "png_voidp png_get_error_ptr(png_const_structrp png_ptr)\n{\n  if (png_ptr == 0)\n  {\n    return 0;\n  }\n  return (png_voidp) png_ptr->error_ptr;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_error",
            "header": "extern void png_error(png_const_structrp png_ptr, png_const_charp error_message)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_charp error_message"
            ],
            "definition": "void png_error(png_const_structrp png_ptr, png_const_charp error_message)\n{\n  if ((png_ptr != 0) && (png_ptr->error_fn != 0))\n  {\n    (*png_ptr->error_fn)((png_structrp) ((void *) ((const void *) png_ptr)), error_message);\n  }\n  png_default_error(png_ptr, error_message);\n}\n\n",
            "calle": [
                "*png_ptr->error_fn",
                "png_default_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "error_message",
                        "type": "png_const_charp",
                        "definition": [
                            "png_const_charp error_message"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_chunk_error",
            "header": "extern void png_chunk_error(png_const_structrp png_ptr, png_const_charp error_message)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_charp error_message"
            ],
            "definition": "void png_chunk_error(png_const_structrp png_ptr, png_const_charp error_message)\n{\n  char msg[18 + 196];\n  if (png_ptr == 0)\n  {\n    png_error(png_ptr, error_message);\n  }\n  else\n  {\n    png_format_buffer(png_ptr, msg, error_message);\n    png_error(png_ptr, msg);\n  }\n}\n\n",
            "calle": [
                "png_error",
                "png_format_buffer"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "error_message",
                        "type": "png_const_charp",
                        "definition": [
                            "png_const_charp error_message"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg",
                        "type": "char [18 + 196]",
                        "definition": [
                            "char msg[18 + 196]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_warning",
            "header": "extern void png_warning(png_const_structrp png_ptr, png_const_charp warning_message)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_charp warning_message"
            ],
            "definition": "void png_warning(png_const_structrp png_ptr, png_const_charp warning_message)\n{\n  int offset = 0;\n  if (png_ptr != 0)\n  {\n    {\n      if ((*warning_message) == 0x23)\n      {\n        for (offset = 1; offset < 15; offset += 1)\n        {\n          if (warning_message[offset] == ' ')\n          {\n            break;\n          }\n        }\n\n      }\n    }\n  }\n  if ((png_ptr != 0) && (png_ptr->warning_fn != 0))\n  {\n    (*png_ptr->warning_fn)((png_structrp) ((void *) ((const void *) png_ptr)), warning_message + offset);\n  }\n  else\n    png_default_warning(png_ptr, warning_message + offset);\n}\n\n",
            "calle": [
                "*png_ptr->warning_fn",
                "png_default_warning"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "warning_message",
                        "type": "png_const_charp",
                        "definition": [
                            "png_const_charp warning_message"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offset",
                        "type": "int",
                        "definition": [
                            "int offset = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_chunk_warning",
            "header": "extern void png_chunk_warning(png_const_structrp png_ptr, png_const_charp warning_message)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_charp warning_message"
            ],
            "definition": "void png_chunk_warning(png_const_structrp png_ptr, png_const_charp warning_message)\n{\n  char msg[18 + 196];\n  if (png_ptr == 0)\n  {\n    png_warning(png_ptr, warning_message);\n  }\n  else\n  {\n    png_format_buffer(png_ptr, msg, warning_message);\n    png_warning(png_ptr, msg);\n  }\n}\n\n",
            "calle": [
                "png_format_buffer",
                "png_warning"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "warning_message",
                        "type": "png_const_charp",
                        "definition": [
                            "png_const_charp warning_message"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg",
                        "type": "char [18 + 196]",
                        "definition": [
                            "char msg[18 + 196]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_benign_error",
            "header": "extern void png_benign_error(png_const_structrp png_ptr, png_const_charp warning_message)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_charp error_message"
            ],
            "definition": "void png_benign_error(png_const_structrp png_ptr, png_const_charp error_message)\n{\n  if ((png_ptr->flags & 0x100000U) != 0)\n  {\n    if (((png_ptr->mode & 0x8000U) != 0) && (png_ptr->chunk_name != 0))\n    {\n      png_chunk_warning(png_ptr, error_message);\n    }\n    else\n      png_warning(png_ptr, error_message);\n  }\n  else\n  {\n    if (((png_ptr->mode & 0x8000U) != 0) && (png_ptr->chunk_name != 0))\n    {\n      png_chunk_error(png_ptr, error_message);\n    }\n    else\n      png_error(png_ptr, error_message);\n  }\n}\n\n",
            "calle": [
                "png_chunk_error",
                "png_chunk_warning",
                "png_error",
                "png_warning"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "error_message",
                        "type": "png_const_charp",
                        "definition": [
                            "png_const_charp error_message"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_chunk_benign_error",
            "header": "extern void png_chunk_benign_error(png_const_structrp png_ptr, png_const_charp warning_message)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_charp error_message"
            ],
            "definition": "void png_chunk_benign_error(png_const_structrp png_ptr, png_const_charp error_message)\n{\n  if ((png_ptr->flags & 0x100000U) != 0)\n  {\n    png_chunk_warning(png_ptr, error_message);\n  }\n  else\n    png_chunk_error(png_ptr, error_message);\n}\n\n",
            "calle": [
                "png_chunk_error",
                "png_chunk_warning"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "error_message",
                        "type": "png_const_charp",
                        "definition": [
                            "png_const_charp error_message"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_safecat",
            "header": "extern size_t png_safecat(png_charp buffer, size_t bufsize, size_t pos, png_const_charp string)",
            "params": [
                "png_charp buffer",
                "size_t bufsize",
                "size_t pos",
                "png_const_charp string"
            ],
            "definition": "size_t png_safecat(png_charp buffer, size_t bufsize, size_t pos, png_const_charp string)\n{\n  if ((buffer != 0) && (pos < bufsize))\n  {\n    if (string != 0)\n    {\n      while (((*string) != '\\0') && (pos < (bufsize - 1)))\n      {\n        buffer[pos] = *string;\n        string += 1;\n        pos += 1;\n      }\n\n    }\n    buffer[pos] = '\\0';\n  }\n  return pos;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "png_charp",
                        "definition": [
                            "png_charp buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bufsize",
                        "type": "size_t",
                        "definition": [
                            "size_t bufsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "string",
                        "type": "png_const_charp",
                        "definition": [
                            "png_const_charp string"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_format_number",
            "header": "extern png_charp png_format_number(png_const_charp start, png_charp end, int format, png_alloc_size_t number)",
            "params": [
                "png_const_charp start",
                "png_charp end",
                "int format",
                "png_alloc_size_t number"
            ],
            "definition": "png_charp png_format_number(png_const_charp start, png_charp end, int format, png_alloc_size_t number)\n{\n  int count = 0;\n  int mincount = 1;\n  int output = 0;\n  end -= 1;\n  *end = '\\0';\n  while ((end > start) && ((number != 0) || (count < mincount)))\n  {\n    helper_png_format_number_1(&end, &number, &count, &mincount, &output, start, format);\n  }\n\n  return end;\n}\n\n",
            "calle": [
                "helper_png_format_number_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "start",
                        "type": "png_const_charp",
                        "definition": [
                            "png_const_charp start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "png_charp",
                        "definition": [
                            "png_charp end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "format",
                        "type": "int",
                        "definition": [
                            "int format"
                        ]
                    },
                    {
                        "path": null,
                        "name": "number",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t number"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mincount",
                        "type": "int",
                        "definition": [
                            "int mincount = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "int",
                        "definition": [
                            "int output = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_warning_parameter",
            "header": "extern void png_warning_parameter(png_warning_parameters p, int number, png_const_charp string)",
            "params": [
                "png_warning_parameters p",
                "int number",
                "png_const_charp string"
            ],
            "definition": "void png_warning_parameter(png_warning_parameters p, int number, png_const_charp string)\n{\n  if ((number > 0) && (number <= 8))\n  {\n    (void) png_safecat(p[number - 1], sizeof(p[number - 1]), 0, string);\n  }\n}\n\n",
            "calle": [
                "png_safecat"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p",
                        "type": "png_warning_parameters",
                        "definition": [
                            "png_warning_parameters p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "number",
                        "type": "int",
                        "definition": [
                            "int number"
                        ]
                    },
                    {
                        "path": null,
                        "name": "string",
                        "type": "png_const_charp",
                        "definition": [
                            "png_const_charp string"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_warning_parameter_unsigned",
            "header": "extern void png_warning_parameter_unsigned(png_warning_parameters p, int number, int format, png_alloc_size_t value)",
            "params": [
                "png_warning_parameters p",
                "int number",
                "int format",
                "png_alloc_size_t value"
            ],
            "definition": "void png_warning_parameter_unsigned(png_warning_parameters p, int number, int format, png_alloc_size_t value)\n{\n  char buffer[24];\n  png_warning_parameter(p, number, png_format_number(buffer, buffer + (sizeof(buffer)), format, value));\n}\n\n",
            "calle": [
                "png_format_number",
                "png_warning_parameter"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p",
                        "type": "png_warning_parameters",
                        "definition": [
                            "png_warning_parameters p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "number",
                        "type": "int",
                        "definition": [
                            "int number"
                        ]
                    },
                    {
                        "path": null,
                        "name": "format",
                        "type": "int",
                        "definition": [
                            "int format"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "char [24]",
                        "definition": [
                            "char buffer[24]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_warning_parameter_signed",
            "header": "extern void png_warning_parameter_signed(png_warning_parameters p, int number, int format, png_int_32 value)",
            "params": [
                "png_warning_parameters p",
                "int number",
                "int format",
                "png_int_32 value"
            ],
            "definition": "void png_warning_parameter_signed(png_warning_parameters p, int number, int format, png_int_32 value)\n{\n  png_alloc_size_t u;\n  png_charp str;\n  char buffer[24];\n  u = (png_alloc_size_t) value;\n  if (value < 0)\n  {\n    u = (~u) + 1;\n  }\n  str = png_format_number(buffer, buffer + (sizeof(buffer)), format, u);\n  if ((value < 0) && (str > buffer))\n  {\n    str -= 1;\n    *str = '-';\n  }\n  png_warning_parameter(p, number, str);\n}\n\n",
            "calle": [
                "png_format_number",
                "png_warning_parameter"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "p",
                        "type": "png_warning_parameters",
                        "definition": [
                            "png_warning_parameters p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "number",
                        "type": "int",
                        "definition": [
                            "int number"
                        ]
                    },
                    {
                        "path": null,
                        "name": "format",
                        "type": "int",
                        "definition": [
                            "int format"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "png_int_32",
                        "definition": [
                            "png_int_32 value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "u",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t u"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "png_charp",
                        "definition": [
                            "png_charp str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "char [24]",
                        "definition": [
                            "char buffer[24]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_formatted_warning",
            "header": "extern void png_formatted_warning(png_const_structrp png_ptr, png_warning_parameters p, png_const_charp message)",
            "params": [
                "png_const_structrp png_ptr",
                "png_warning_parameters p",
                "png_const_charp message"
            ],
            "definition": "void png_formatted_warning(png_const_structrp png_ptr, png_warning_parameters p, png_const_charp message)\n{\n  size_t i = 0;\n  char msg[192];\n  while ((i < ((sizeof(msg)) - 1)) && ((*message) != '\\0'))\n  {\n    if (((p != 0) && ((*message) == '@')) && (message[1] != '\\0'))\n    {\n      message += 1;\n      int parameter_char = *message;\n      static const char valid_parameters[] = \"123456789\";\n      int parameter = 0;\n      while ((valid_parameters[parameter] != parameter_char) && (valid_parameters[parameter] != '\\0'))\n      {\n        parameter += 1;\n      }\n\n      if (parameter < 8)\n      {\n        png_const_charp parm = p[parameter];\n        png_const_charp pend = p[parameter] + (sizeof(p[parameter]));\n        while (((i < ((sizeof(msg)) - 1)) && ((*parm) != '\\0')) && (parm < pend))\n        {\n          msg[i] = *parm;\n          parm += 1;\n          i += 1;\n        }\n\n        message += 1;\n        continue;\n      }\n    }\n    msg[i] = *message;\n    message += 1;\n    i += 1;\n  }\n\n  msg[i] = '\\0';\n  png_warning(png_ptr, msg);\n}\n\n",
            "calle": [
                "png_warning"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "png_warning_parameters",
                        "definition": [
                            "png_warning_parameters p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "message",
                        "type": "png_const_charp",
                        "definition": [
                            "png_const_charp message"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg",
                        "type": "char [192]",
                        "definition": [
                            "char msg[192]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "parameter_char",
                        "type": "int",
                        "definition": [
                            "int parameter_char = *message"
                        ]
                    },
                    {
                        "path": null,
                        "name": "valid_parameters",
                        "type": "const char []",
                        "definition": [
                            "static const char valid_parameters[] = \"123456789\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "parameter",
                        "type": "int",
                        "definition": [
                            "int parameter = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "parm",
                        "type": "png_const_charp",
                        "definition": [
                            "png_const_charp parm = p[parameter]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pend",
                        "type": "png_const_charp",
                        "definition": [
                            "png_const_charp pend = p[parameter] + (sizeof(p[parameter]))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_app_warning",
            "header": "extern void png_app_warning(png_const_structrp png_ptr, png_const_charp message)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_charp error_message"
            ],
            "definition": "void png_app_warning(png_const_structrp png_ptr, png_const_charp error_message)\n{\n  if ((png_ptr->flags & 0x200000U) != 0)\n  {\n    png_warning(png_ptr, error_message);\n  }\n  else\n    png_error(png_ptr, error_message);\n}\n\n",
            "calle": [
                "png_error",
                "png_warning"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "error_message",
                        "type": "png_const_charp",
                        "definition": [
                            "png_const_charp error_message"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_app_error",
            "header": "extern void png_app_error(png_const_structrp png_ptr, png_const_charp message)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_charp error_message"
            ],
            "definition": "void png_app_error(png_const_structrp png_ptr, png_const_charp error_message)\n{\n  if ((png_ptr->flags & 0x400000U) != 0)\n  {\n    png_warning(png_ptr, error_message);\n  }\n  else\n    png_error(png_ptr, error_message);\n}\n\n",
            "calle": [
                "png_error",
                "png_warning"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "error_message",
                        "type": "png_const_charp",
                        "definition": [
                            "png_const_charp error_message"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_chunk_report",
            "header": "extern void png_chunk_report(png_const_structrp png_ptr, png_const_charp message, int error)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_charp message",
                "int error"
            ],
            "definition": "void png_chunk_report(png_const_structrp png_ptr, png_const_charp message, int error)\n{\n  if ((png_ptr->mode & 0x8000U) != 0)\n  {\n    if (error < 2)\n    {\n      png_chunk_warning(png_ptr, message);\n    }\n    else\n      png_chunk_benign_error(png_ptr, message);\n  }\n  else\n    if ((png_ptr->mode & 0x8000U) == 0)\n  {\n    if (error < 1)\n    {\n      png_app_warning(png_ptr, message);\n    }\n    else\n      png_app_error(png_ptr, message);\n  }\n}\n\n",
            "calle": [
                "png_app_error",
                "png_app_warning",
                "png_chunk_benign_error",
                "png_chunk_warning"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "message",
                        "type": "png_const_charp",
                        "definition": [
                            "png_const_charp message"
                        ]
                    },
                    {
                        "path": null,
                        "name": "error",
                        "type": "int",
                        "definition": [
                            "int error"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_default_error",
            "header": "static void png_default_error(png_const_structrp png_ptr, png_const_charp error_message)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_charp error_message"
            ],
            "definition": "static void png_default_error(png_const_structrp png_ptr, png_const_charp error_message)\n{\n  {\n    fprintf(stderr, \"libpng error: %s\", (error_message) ? (error_message) : (\"undefined\"));\n    fprintf(stderr, \"\\n\");\n  }\n  png_longjmp(png_ptr, 1);\n}\n\n",
            "calle": [
                "fprintf",
                "png_longjmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "error_message",
                        "type": "png_const_charp",
                        "definition": [
                            "png_const_charp error_message"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_default_warning",
            "header": "static void png_default_warning(png_const_structrp png_ptr, png_const_charp warning_message)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_charp warning_message"
            ],
            "definition": "static void png_default_warning(png_const_structrp png_ptr, png_const_charp warning_message)\n{\n  {\n    fprintf(stderr, \"libpng warning: %s\", warning_message);\n    fprintf(stderr, \"\\n\");\n  }\n  (void) png_ptr;\n}\n\n",
            "calle": [
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "warning_message",
                        "type": "png_const_charp",
                        "definition": [
                            "png_const_charp warning_message"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_format_buffer",
            "header": "",
            "params": [
                "png_const_structrp png_ptr",
                "png_charp buffer",
                "png_const_charp error_message"
            ],
            "definition": "static void png_format_buffer(png_const_structrp png_ptr, png_charp buffer, png_const_charp error_message)\n{\n  png_uint_32 chunk_name = png_ptr->chunk_name;\n  int iout = 0;\n  int ishift = 24;\n  while (ishift >= 0)\n  {\n    int c = ((int) (chunk_name >> ishift)) & 0xff;\n    ishift -= 8;\n    if ((((c < 65) || (c > 122)) || ((c > 90) && (c < 97))) != 0)\n    {\n      buffer[iout] = 0x5b;\n      iout += 1;\n      buffer[iout] = png_digit[(c & 0xf0) >> 4];\n      iout += 1;\n      buffer[iout] = png_digit[c & 0x0f];\n      iout += 1;\n      buffer[iout] = 0x5d;\n      iout += 1;\n    }\n    else\n    {\n      buffer[iout] = (char) c;\n      iout += 1;\n    }\n  }\n\n  if (error_message == 0)\n  {\n    buffer[iout] = '\\0';\n  }\n  else\n  {\n    int iin = 0;\n    buffer[iout] = ':';\n    iout += 1;\n    buffer[iout] = ' ';\n    iout += 1;\n    while ((iin < (196 - 1)) && (error_message[iin] != '\\0'))\n    {\n      buffer[iout] = error_message[iin];\n      iin += 1;\n      iout += 1;\n    }\n\n    buffer[iout] = '\\0';\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "png_charp",
                        "definition": [
                            "png_charp buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "error_message",
                        "type": "png_const_charp",
                        "definition": [
                            "png_const_charp error_message"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chunk_name",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 chunk_name = png_ptr->chunk_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "iout",
                        "type": "int",
                        "definition": [
                            "int iout = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ishift",
                        "type": "int",
                        "definition": [
                            "int ishift = 24"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c = ((int) (chunk_name >> ishift)) & 0xff"
                        ]
                    },
                    {
                        "path": null,
                        "name": "iin",
                        "type": "int",
                        "definition": [
                            "int iin = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_digit",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_png_format_number_1",
            "header": "",
            "params": [
                "png_charp * const end_ref",
                "png_alloc_size_t * const number_ref",
                "int * const count_ref",
                "int * const mincount_ref",
                "int * const output_ref",
                "png_const_charp start",
                "int format"
            ],
            "definition": "void helper_png_format_number_1(png_charp * const end_ref, png_alloc_size_t * const number_ref, int * const count_ref, int * const mincount_ref, int * const output_ref, png_const_charp start, int format)\n{\n  png_charp end = *end_ref;\n  png_alloc_size_t number = *number_ref;\n  int count = *count_ref;\n  int mincount = *mincount_ref;\n  int output = *output_ref;\n  static const char digits[] = \"0123456789ABCDEF\";\n  switch (format)\n  {\n    case 5:\n    {\n      mincount = 5;\n      if ((output != 0) || ((number % 10) != 0))\n      {\n        end -= 1;\n        *end = digits[number % 10];\n        output = 1;\n      }\n      number /= 10;\n      break;\n    }\n\n    case 2:\n    {\n      mincount = 2;\n    }\n\n    case 1:\n    {\n      end -= 1;\n      *end = digits[number % 10];\n      number /= 10;\n      break;\n    }\n\n    case 4:\n    {\n      mincount = 2;\n    }\n\n    case 3:\n    {\n      end -= 1;\n      *end = digits[number & 0xf];\n      number >>= 4;\n      break;\n    }\n\n    default:\n    {\n      number = 0;\n      break;\n    }\n\n  }\n\n  count += 1;\n  if (((format == 5) && (count == 5)) && (end > start))\n  {\n    if (output != 0)\n    {\n      end -= 1;\n      *end = '.';\n    }\n    else\n      if (number == 0)\n    {\n      end -= 1;\n      *end = '0';\n    }\n  }\n  *end_ref = end;\n  *number_ref = number;\n  *count_ref = count;\n  *mincount_ref = mincount;\n  *output_ref = output;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "end_ref",
                        "type": "png_charp * const",
                        "definition": [
                            "png_charp * const end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "number_ref",
                        "type": "png_alloc_size_t * const",
                        "definition": [
                            "png_alloc_size_t * const number_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const count_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mincount_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const mincount_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const output_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "png_const_charp",
                        "definition": [
                            "png_const_charp start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "format",
                        "type": "int",
                        "definition": [
                            "int format"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "png_charp",
                        "definition": [
                            "png_charp end = *end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "number",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t number = *number_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count = *count_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mincount",
                        "type": "int",
                        "definition": [
                            "int mincount = *mincount_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "int",
                        "definition": [
                            "int output = *output_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "digits",
                        "type": "const char []",
                        "definition": [
                            "static const char digits[] = \"0123456789ABCDEF\""
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_compression_buffer_size",
            "header": "extern size_t png_get_compression_buffer_size(png_const_structrp png_ptr)",
            "params": [
                "png_const_structrp png_ptr"
            ],
            "definition": "size_t png_get_compression_buffer_size(png_const_structrp png_ptr)\n{\n  if (png_ptr == 0)\n  {\n    return 0;\n  }\n  if ((png_ptr->mode & 0x8000U) != 0)\n  {\n    return png_ptr->IDAT_read_size;\n  }\n  else\n    return png_ptr->zbuffer_size;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_valid",
            "header": "extern png_uint_32 png_get_valid(png_const_structrp png_ptr, png_const_inforp info_ptr, png_uint_32 flag)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_inforp info_ptr",
                "png_uint_32 flag"
            ],
            "definition": "png_uint_32 png_get_valid(png_const_structrp png_ptr, png_const_inforp info_ptr, png_uint_32 flag)\n{\n  if ((png_ptr != 0) && (info_ptr != 0))\n  {\n    if ((flag == 0x0010U) && (png_ptr->num_trans == 0))\n    {\n      return 0;\n    }\n    return info_ptr->valid & flag;\n  }\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_const_inforp",
                        "definition": [
                            "png_const_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flag",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 flag"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_rowbytes",
            "header": "extern size_t png_get_rowbytes(png_const_structrp png_ptr, png_const_inforp info_ptr)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_inforp info_ptr"
            ],
            "definition": "size_t png_get_rowbytes(png_const_structrp png_ptr, png_const_inforp info_ptr)\n{\n  if ((png_ptr != 0) && (info_ptr != 0))\n  {\n    return info_ptr->rowbytes;\n  }\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_const_inforp",
                        "definition": [
                            "png_const_inforp info_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_rows",
            "header": "extern png_bytepp png_get_rows(png_const_structrp png_ptr, png_const_inforp info_ptr)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_inforp info_ptr"
            ],
            "definition": "png_bytepp png_get_rows(png_const_structrp png_ptr, png_const_inforp info_ptr)\n{\n  if ((png_ptr != 0) && (info_ptr != 0))\n  {\n    return info_ptr->row_pointers;\n  }\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_const_inforp",
                        "definition": [
                            "png_const_inforp info_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_channels",
            "header": "extern png_byte png_get_channels(png_const_structrp png_ptr, png_const_inforp info_ptr)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_inforp info_ptr"
            ],
            "definition": "png_byte png_get_channels(png_const_structrp png_ptr, png_const_inforp info_ptr)\n{\n  if ((png_ptr != 0) && (info_ptr != 0))\n  {\n    return info_ptr->channels;\n  }\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_const_inforp",
                        "definition": [
                            "png_const_inforp info_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_image_width",
            "header": "extern png_uint_32 png_get_image_width(png_const_structrp png_ptr, png_const_inforp info_ptr)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_inforp info_ptr"
            ],
            "definition": "png_uint_32 png_get_image_width(png_const_structrp png_ptr, png_const_inforp info_ptr)\n{\n  if ((png_ptr != 0) && (info_ptr != 0))\n  {\n    return info_ptr->width;\n  }\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_const_inforp",
                        "definition": [
                            "png_const_inforp info_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_image_height",
            "header": "extern png_uint_32 png_get_image_height(png_const_structrp png_ptr, png_const_inforp info_ptr)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_inforp info_ptr"
            ],
            "definition": "png_uint_32 png_get_image_height(png_const_structrp png_ptr, png_const_inforp info_ptr)\n{\n  if ((png_ptr != 0) && (info_ptr != 0))\n  {\n    return info_ptr->height;\n  }\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_const_inforp",
                        "definition": [
                            "png_const_inforp info_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_bit_depth",
            "header": "extern png_byte png_get_bit_depth(png_const_structrp png_ptr, png_const_inforp info_ptr)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_inforp info_ptr"
            ],
            "definition": "png_byte png_get_bit_depth(png_const_structrp png_ptr, png_const_inforp info_ptr)\n{\n  if ((png_ptr != 0) && (info_ptr != 0))\n  {\n    return info_ptr->bit_depth;\n  }\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_const_inforp",
                        "definition": [
                            "png_const_inforp info_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_color_type",
            "header": "extern png_byte png_get_color_type(png_const_structrp png_ptr, png_const_inforp info_ptr)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_inforp info_ptr"
            ],
            "definition": "png_byte png_get_color_type(png_const_structrp png_ptr, png_const_inforp info_ptr)\n{\n  if ((png_ptr != 0) && (info_ptr != 0))\n  {\n    return info_ptr->color_type;\n  }\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_const_inforp",
                        "definition": [
                            "png_const_inforp info_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_filter_type",
            "header": "extern png_byte png_get_filter_type(png_const_structrp png_ptr, png_const_inforp info_ptr)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_inforp info_ptr"
            ],
            "definition": "png_byte png_get_filter_type(png_const_structrp png_ptr, png_const_inforp info_ptr)\n{\n  if ((png_ptr != 0) && (info_ptr != 0))\n  {\n    return info_ptr->filter_type;\n  }\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_const_inforp",
                        "definition": [
                            "png_const_inforp info_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_interlace_type",
            "header": "extern png_byte png_get_interlace_type(png_const_structrp png_ptr, png_const_inforp info_ptr)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_inforp info_ptr"
            ],
            "definition": "png_byte png_get_interlace_type(png_const_structrp png_ptr, png_const_inforp info_ptr)\n{\n  if ((png_ptr != 0) && (info_ptr != 0))\n  {\n    return info_ptr->interlace_type;\n  }\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_const_inforp",
                        "definition": [
                            "png_const_inforp info_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_compression_type",
            "header": "extern png_byte png_get_compression_type(png_const_structrp png_ptr, png_const_inforp info_ptr)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_inforp info_ptr"
            ],
            "definition": "png_byte png_get_compression_type(png_const_structrp png_ptr, png_const_inforp info_ptr)\n{\n  if ((png_ptr != 0) && (info_ptr != 0))\n  {\n    return info_ptr->compression_type;\n  }\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_const_inforp",
                        "definition": [
                            "png_const_inforp info_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_pixels_per_meter",
            "header": "extern png_uint_32 png_get_pixels_per_meter(png_const_structrp png_ptr, png_const_inforp info_ptr)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_inforp info_ptr"
            ],
            "definition": "png_uint_32 png_get_pixels_per_meter(png_const_structrp png_ptr, png_const_inforp info_ptr)\n{\n  (void) png_ptr;\n  (void) info_ptr;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_const_inforp",
                        "definition": [
                            "png_const_inforp info_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_x_pixels_per_meter",
            "header": "extern png_uint_32 png_get_x_pixels_per_meter(png_const_structrp png_ptr, png_const_inforp info_ptr)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_inforp info_ptr"
            ],
            "definition": "png_uint_32 png_get_x_pixels_per_meter(png_const_structrp png_ptr, png_const_inforp info_ptr)\n{\n  (void) png_ptr;\n  (void) info_ptr;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_const_inforp",
                        "definition": [
                            "png_const_inforp info_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_y_pixels_per_meter",
            "header": "extern png_uint_32 png_get_y_pixels_per_meter(png_const_structrp png_ptr, png_const_inforp info_ptr)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_inforp info_ptr"
            ],
            "definition": "png_uint_32 png_get_y_pixels_per_meter(png_const_structrp png_ptr, png_const_inforp info_ptr)\n{\n  (void) png_ptr;\n  (void) info_ptr;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_const_inforp",
                        "definition": [
                            "png_const_inforp info_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_pixel_aspect_ratio_fixed",
            "header": "extern png_fixed_point png_get_pixel_aspect_ratio_fixed(png_const_structrp png_ptr, png_const_inforp info_ptr)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_inforp info_ptr"
            ],
            "definition": "png_fixed_point png_get_pixel_aspect_ratio_fixed(png_const_structrp png_ptr, png_const_inforp info_ptr)\n{\n  (void) png_ptr;\n  (void) info_ptr;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_const_inforp",
                        "definition": [
                            "png_const_inforp info_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_x_offset_pixels",
            "header": "extern png_int_32 png_get_x_offset_pixels(png_const_structrp png_ptr, png_const_inforp info_ptr)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_inforp info_ptr"
            ],
            "definition": "png_int_32 png_get_x_offset_pixels(png_const_structrp png_ptr, png_const_inforp info_ptr)\n{\n  (void) png_ptr;\n  (void) info_ptr;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_const_inforp",
                        "definition": [
                            "png_const_inforp info_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_y_offset_pixels",
            "header": "extern png_int_32 png_get_y_offset_pixels(png_const_structrp png_ptr, png_const_inforp info_ptr)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_inforp info_ptr"
            ],
            "definition": "png_int_32 png_get_y_offset_pixels(png_const_structrp png_ptr, png_const_inforp info_ptr)\n{\n  (void) png_ptr;\n  (void) info_ptr;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_const_inforp",
                        "definition": [
                            "png_const_inforp info_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_x_offset_microns",
            "header": "extern png_int_32 png_get_x_offset_microns(png_const_structrp png_ptr, png_const_inforp info_ptr)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_inforp info_ptr"
            ],
            "definition": "png_int_32 png_get_x_offset_microns(png_const_structrp png_ptr, png_const_inforp info_ptr)\n{\n  (void) png_ptr;\n  (void) info_ptr;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_const_inforp",
                        "definition": [
                            "png_const_inforp info_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_y_offset_microns",
            "header": "extern png_int_32 png_get_y_offset_microns(png_const_structrp png_ptr, png_const_inforp info_ptr)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_inforp info_ptr"
            ],
            "definition": "png_int_32 png_get_y_offset_microns(png_const_structrp png_ptr, png_const_inforp info_ptr)\n{\n  (void) png_ptr;\n  (void) info_ptr;\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_const_inforp",
                        "definition": [
                            "png_const_inforp info_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_signature",
            "header": "extern png_const_bytep png_get_signature(png_const_structrp png_ptr, png_const_inforp info_ptr)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_inforp info_ptr"
            ],
            "definition": "png_const_bytep png_get_signature(png_const_structrp png_ptr, png_const_inforp info_ptr)\n{\n  if ((png_ptr != 0) && (info_ptr != 0))\n  {\n    return info_ptr->signature;\n  }\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_const_inforp",
                        "definition": [
                            "png_const_inforp info_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_bKGD",
            "header": "extern png_uint_32 png_get_bKGD(png_const_structrp png_ptr, png_inforp info_ptr, png_color_16p *background)",
            "params": [
                "png_const_structrp png_ptr",
                "png_inforp info_ptr",
                "png_color_16p *background"
            ],
            "definition": "png_uint_32 png_get_bKGD(png_const_structrp png_ptr, png_inforp info_ptr, png_color_16p *background)\n{\n  if ((((png_ptr != 0) && (info_ptr != 0)) && ((info_ptr->valid & 0x0020U) != 0)) && (background != 0))\n  {\n    (void) 0;\n    *background = &info_ptr->background;\n    return 0x0020U;\n  }\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "background",
                        "type": "png_color_16p *",
                        "definition": [
                            "png_color_16p *background"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_hIST",
            "header": "extern png_uint_32 png_get_hIST(png_const_structrp png_ptr, png_inforp info_ptr, png_uint_16p *hist)",
            "params": [
                "png_const_structrp png_ptr",
                "png_inforp info_ptr",
                "png_uint_16p *hist"
            ],
            "definition": "png_uint_32 png_get_hIST(png_const_structrp png_ptr, png_inforp info_ptr, png_uint_16p *hist)\n{\n  (void) 0;\n  if ((((png_ptr != 0) && (info_ptr != 0)) && ((info_ptr->valid & 0x0040U) != 0)) && (hist != 0))\n  {\n    *hist = info_ptr->hist;\n    return 0x0040U;\n  }\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hist",
                        "type": "png_uint_16p *",
                        "definition": [
                            "png_uint_16p *hist"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_IHDR",
            "header": "extern png_uint_32 png_get_IHDR(png_const_structrp png_ptr, png_const_inforp info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_method, int *compression_method, int *filter_method)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_inforp info_ptr",
                "png_uint_32 *width",
                "png_uint_32 *height",
                "int *bit_depth",
                "int *color_type",
                "int *interlace_type",
                "int *compression_type",
                "int *filter_type"
            ],
            "definition": "png_uint_32 png_get_IHDR(png_const_structrp png_ptr, png_const_inforp info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_type, int *compression_type, int *filter_type)\n{\n  (void) 0;\n  if ((png_ptr == 0) || (info_ptr == 0))\n  {\n    return 0;\n  }\n  if (width != 0)\n  {\n    *width = info_ptr->width;\n  }\n  if (height != 0)\n  {\n    *height = info_ptr->height;\n  }\n  if (bit_depth != 0)\n  {\n    *bit_depth = info_ptr->bit_depth;\n  }\n  if (color_type != 0)\n  {\n    *color_type = info_ptr->color_type;\n  }\n  if (compression_type != 0)\n  {\n    *compression_type = info_ptr->compression_type;\n  }\n  if (filter_type != 0)\n  {\n    *filter_type = info_ptr->filter_type;\n  }\n  if (interlace_type != 0)\n  {\n    *interlace_type = info_ptr->interlace_type;\n  }\n  png_check_IHDR(png_ptr, info_ptr->width, info_ptr->height, info_ptr->bit_depth, info_ptr->color_type, info_ptr->interlace_type, info_ptr->compression_type, info_ptr->filter_type);\n  return 1;\n}\n\n",
            "calle": [
                "png_check_IHDR"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_const_inforp",
                        "definition": [
                            "png_const_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32 *",
                        "definition": [
                            "png_uint_32 *width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "png_uint_32 *",
                        "definition": [
                            "png_uint_32 *height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bit_depth",
                        "type": "int *",
                        "definition": [
                            "int *bit_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color_type",
                        "type": "int *",
                        "definition": [
                            "int *color_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "interlace_type",
                        "type": "int *",
                        "definition": [
                            "int *interlace_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compression_type",
                        "type": "int *",
                        "definition": [
                            "int *compression_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filter_type",
                        "type": "int *",
                        "definition": [
                            "int *filter_type"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_PLTE",
            "header": "extern png_uint_32 png_get_PLTE(png_const_structrp png_ptr, png_inforp info_ptr, png_colorp *palette, int *num_palette)",
            "params": [
                "png_const_structrp png_ptr",
                "png_inforp info_ptr",
                "png_colorp *palette",
                "int *num_palette"
            ],
            "definition": "png_uint_32 png_get_PLTE(png_const_structrp png_ptr, png_inforp info_ptr, png_colorp *palette, int *num_palette)\n{\n  (void) 0;\n  if ((((png_ptr != 0) && (info_ptr != 0)) && ((info_ptr->valid & 0x0008U) != 0)) && (palette != 0))\n  {\n    *palette = info_ptr->palette;\n    *num_palette = info_ptr->num_palette;\n    (void) 0;\n    return 0x0008U;\n  }\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "palette",
                        "type": "png_colorp *",
                        "definition": [
                            "png_colorp *palette"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_palette",
                        "type": "int *",
                        "definition": [
                            "int *num_palette"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_sBIT",
            "header": "extern png_uint_32 png_get_sBIT(png_const_structrp png_ptr, png_inforp info_ptr, png_color_8p *sig_bit)",
            "params": [
                "png_const_structrp png_ptr",
                "png_inforp info_ptr",
                "png_color_8p *sig_bit"
            ],
            "definition": "png_uint_32 png_get_sBIT(png_const_structrp png_ptr, png_inforp info_ptr, png_color_8p *sig_bit)\n{\n  (void) 0;\n  if ((((png_ptr != 0) && (info_ptr != 0)) && ((info_ptr->valid & 0x0002U) != 0)) && (sig_bit != 0))\n  {\n    *sig_bit = &info_ptr->sig_bit;\n    return 0x0002U;\n  }\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sig_bit",
                        "type": "png_color_8p *",
                        "definition": [
                            "png_color_8p *sig_bit"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_tRNS",
            "header": "extern png_uint_32 png_get_tRNS(png_const_structrp png_ptr, png_inforp info_ptr, png_bytep *trans_alpha, int *num_trans, png_color_16p *trans_color)",
            "params": [
                "png_const_structrp png_ptr",
                "png_inforp info_ptr",
                "png_bytep *trans_alpha",
                "int *num_trans",
                "png_color_16p *trans_color"
            ],
            "definition": "png_uint_32 png_get_tRNS(png_const_structrp png_ptr, png_inforp info_ptr, png_bytep *trans_alpha, int *num_trans, png_color_16p *trans_color)\n{\n  png_uint_32 retval = 0;\n  if (((png_ptr != 0) && (info_ptr != 0)) && ((info_ptr->valid & 0x0010U) != 0))\n  {\n    (void) 0;\n    if (info_ptr->color_type == (2 | 1))\n    {\n      if (trans_alpha != 0)\n      {\n        *trans_alpha = info_ptr->trans_alpha;\n        retval |= 0x0010U;\n      }\n      if (trans_color != 0)\n      {\n        *trans_color = &info_ptr->trans_color;\n      }\n    }\n    else\n    {\n      if (trans_color != 0)\n      {\n        *trans_color = &info_ptr->trans_color;\n        retval |= 0x0010U;\n      }\n      if (trans_alpha != 0)\n      {\n        *trans_alpha = 0;\n      }\n    }\n    if (num_trans != 0)\n    {\n      *num_trans = info_ptr->num_trans;\n      retval |= 0x0010U;\n    }\n  }\n  return retval;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_alpha",
                        "type": "png_bytep *",
                        "definition": [
                            "png_bytep *trans_alpha"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_trans",
                        "type": "int *",
                        "definition": [
                            "int *num_trans"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_color",
                        "type": "png_color_16p *",
                        "definition": [
                            "png_color_16p *trans_color"
                        ]
                    },
                    {
                        "path": null,
                        "name": "retval",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 retval = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_unknown_chunks",
            "header": "extern int png_get_unknown_chunks(png_const_structrp png_ptr, png_inforp info_ptr, png_unknown_chunkpp entries)",
            "params": [
                "png_const_structrp png_ptr",
                "png_inforp info_ptr",
                "png_unknown_chunkpp unknowns"
            ],
            "definition": "int png_get_unknown_chunks(png_const_structrp png_ptr, png_inforp info_ptr, png_unknown_chunkpp unknowns)\n{\n  if (((png_ptr != 0) && (info_ptr != 0)) && (unknowns != 0))\n  {\n    *unknowns = info_ptr->unknown_chunks;\n    return info_ptr->unknown_chunks_num;\n  }\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unknowns",
                        "type": "png_unknown_chunkpp",
                        "definition": [
                            "png_unknown_chunkpp unknowns"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_user_width_max",
            "header": "extern png_uint_32 png_get_user_width_max(png_const_structrp png_ptr)",
            "params": [
                "png_const_structrp png_ptr"
            ],
            "definition": "png_uint_32 png_get_user_width_max(png_const_structrp png_ptr)\n{\n  return (png_ptr) ? (png_ptr->user_width_max) : (0);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_user_height_max",
            "header": "extern png_uint_32 png_get_user_height_max(png_const_structrp png_ptr)",
            "params": [
                "png_const_structrp png_ptr"
            ],
            "definition": "png_uint_32 png_get_user_height_max(png_const_structrp png_ptr)\n{\n  return (png_ptr) ? (png_ptr->user_height_max) : (0);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_chunk_cache_max",
            "header": "extern png_uint_32 png_get_chunk_cache_max(png_const_structrp png_ptr)",
            "params": [
                "png_const_structrp png_ptr"
            ],
            "definition": "png_uint_32 png_get_chunk_cache_max(png_const_structrp png_ptr)\n{\n  return (png_ptr) ? (png_ptr->user_chunk_cache_max) : (0);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_chunk_malloc_max",
            "header": "extern png_alloc_size_t png_get_chunk_malloc_max(png_const_structrp png_ptr)",
            "params": [
                "png_const_structrp png_ptr"
            ],
            "definition": "png_alloc_size_t png_get_chunk_malloc_max(png_const_structrp png_ptr)\n{\n  return (png_ptr) ? (png_ptr->user_chunk_malloc_max) : (0);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_io_state",
            "header": "extern png_uint_32 png_get_io_state(png_const_structrp png_ptr)",
            "params": [
                "png_const_structrp png_ptr"
            ],
            "definition": "png_uint_32 png_get_io_state(png_const_structrp png_ptr)\n{\n  return png_ptr->io_state;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_io_chunk_type",
            "header": "extern png_uint_32 png_get_io_chunk_type(png_const_structrp png_ptr)",
            "params": [
                "png_const_structrp png_ptr"
            ],
            "definition": "png_uint_32 png_get_io_chunk_type(png_const_structrp png_ptr)\n{\n  return png_ptr->chunk_name;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_palette_max",
            "header": "extern int png_get_palette_max(png_const_structp png_ptr, png_const_infop info_ptr)",
            "params": [
                "png_const_structp png_ptr",
                "png_const_infop info_ptr"
            ],
            "definition": "int png_get_palette_max(png_const_structp png_ptr, png_const_infop info_ptr)\n{\n  if ((png_ptr != 0) && (info_ptr != 0))\n  {\n    return png_ptr->num_palette_max;\n  }\n  return -1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structp",
                        "definition": [
                            "png_const_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_const_infop",
                        "definition": [
                            "png_const_infop info_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_malloc",
            "header": "extern png_voidp png_malloc(png_const_structrp png_ptr, png_alloc_size_t size)",
            "params": [
                "png_const_structrp png_ptr",
                "png_alloc_size_t size"
            ],
            "definition": "png_voidp png_malloc(png_const_structrp png_ptr, png_alloc_size_t size)\n{\n  png_voidp ret;\n  if (png_ptr == 0)\n  {\n    return 0;\n  }\n  ret = png_malloc_base(png_ptr, size);\n  if (ret == 0)\n  {\n    png_error(png_ptr, \"Out of memory\");\n  }\n  return ret;\n}\n\n",
            "calle": [
                "png_error",
                "png_malloc_base"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "png_voidp",
                        "definition": [
                            "png_voidp ret"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_calloc",
            "header": "extern png_voidp png_calloc(png_const_structrp png_ptr, png_alloc_size_t size)",
            "params": [
                "png_const_structrp png_ptr",
                "png_alloc_size_t size"
            ],
            "definition": "png_voidp png_calloc(png_const_structrp png_ptr, png_alloc_size_t size)\n{\n  png_voidp ret;\n  ret = png_malloc(png_ptr, size);\n  if (ret != 0)\n  {\n    memset(ret, 0, size);\n  }\n  return ret;\n}\n\n",
            "calle": [
                "memset",
                "png_malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "png_voidp",
                        "definition": [
                            "png_voidp ret"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_malloc_warn",
            "header": "extern png_voidp png_malloc_warn(png_const_structrp png_ptr, png_alloc_size_t size)",
            "params": [
                "png_const_structrp png_ptr",
                "png_alloc_size_t size"
            ],
            "definition": "png_voidp png_malloc_warn(png_const_structrp png_ptr, png_alloc_size_t size)\n{\n  if (png_ptr != 0)\n  {\n    png_voidp ret = png_malloc_base(png_ptr, size);\n    if (ret != 0)\n    {\n      return ret;\n    }\n    png_warning(png_ptr, \"Out of memory\");\n  }\n  return 0;\n}\n\n",
            "calle": [
                "png_malloc_base",
                "png_warning"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "png_voidp",
                        "definition": [
                            "png_voidp ret = png_malloc_base(png_ptr, size)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_free",
            "header": "extern void png_free(png_const_structrp png_ptr, png_voidp ptr)",
            "params": [
                "png_const_structrp png_ptr",
                "png_voidp ptr"
            ],
            "definition": "void png_free(png_const_structrp png_ptr, png_voidp ptr)\n{\n  if ((png_ptr == 0) || (ptr == 0))\n  {\n    return;\n  }\n  free(ptr);\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "png_voidp",
                        "definition": [
                            "png_voidp ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_malloc_base",
            "header": "extern png_voidp png_malloc_base(png_const_structrp png_ptr, png_alloc_size_t size)",
            "params": [
                "png_const_structrp png_ptr",
                "png_alloc_size_t size"
            ],
            "definition": "png_voidp png_malloc_base(png_const_structrp png_ptr, png_alloc_size_t size)\n{\n  (void) png_ptr;\n  if ((size > 0) && (size <= ((size_t) (-1))))\n  {\n    return malloc((size_t) size);\n  }\n  else\n    return 0;\n}\n\n",
            "calle": [
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_malloc_array",
            "header": "extern png_voidp png_malloc_array(png_const_structrp png_ptr, int nelements, size_t element_size)",
            "params": [
                "png_const_structrp png_ptr",
                "int nelements",
                "size_t element_size"
            ],
            "definition": "png_voidp png_malloc_array(png_const_structrp png_ptr, int nelements, size_t element_size)\n{\n  if ((nelements <= 0) || (element_size == 0))\n  {\n    png_error(png_ptr, \"internal error: array alloc\");\n  }\n  return png_malloc_array_checked(png_ptr, nelements, element_size);\n}\n\n",
            "calle": [
                "png_error",
                "png_malloc_array_checked"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nelements",
                        "type": "int",
                        "definition": [
                            "int nelements"
                        ]
                    },
                    {
                        "path": null,
                        "name": "element_size",
                        "type": "size_t",
                        "definition": [
                            "size_t element_size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_realloc_array",
            "header": "extern png_voidp png_realloc_array(png_const_structrp png_ptr, png_const_voidp array, int old_elements, int add_elements, size_t element_size)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_voidp old_array",
                "int old_elements",
                "int add_elements",
                "size_t element_size"
            ],
            "definition": "png_voidp png_realloc_array(png_const_structrp png_ptr, png_const_voidp old_array, int old_elements, int add_elements, size_t element_size)\n{\n  if ((((add_elements <= 0) || (element_size == 0)) || (old_elements < 0)) || ((old_array == 0) && (old_elements > 0)))\n  {\n    png_error(png_ptr, \"internal error: array realloc\");\n  }\n  if (add_elements <= (2147483647 - old_elements))\n  {\n    png_voidp new_array = png_malloc_array_checked(png_ptr, old_elements + add_elements, element_size);\n    if (new_array != 0)\n    {\n      if (old_elements > 0)\n      {\n        memcpy(new_array, old_array, element_size * ((unsigned) old_elements));\n      }\n      memset(((char *) new_array) + (element_size * ((unsigned) old_elements)), 0, element_size * ((unsigned) add_elements));\n      return new_array;\n    }\n  }\n  return 0;\n}\n\n",
            "calle": [
                "memcpy",
                "memset",
                "png_error",
                "png_malloc_array_checked"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "old_array",
                        "type": "png_const_voidp",
                        "definition": [
                            "png_const_voidp old_array"
                        ]
                    },
                    {
                        "path": null,
                        "name": "old_elements",
                        "type": "int",
                        "definition": [
                            "int old_elements"
                        ]
                    },
                    {
                        "path": null,
                        "name": "add_elements",
                        "type": "int",
                        "definition": [
                            "int add_elements"
                        ]
                    },
                    {
                        "path": null,
                        "name": "element_size",
                        "type": "size_t",
                        "definition": [
                            "size_t element_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_array",
                        "type": "png_voidp",
                        "definition": [
                            "png_voidp new_array = png_malloc_array_checked(png_ptr, old_elements + add_elements, element_size)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_destroy_png_struct",
            "header": "extern void png_destroy_png_struct(png_structrp png_ptr)",
            "params": [
                "png_structrp png_ptr"
            ],
            "definition": "void png_destroy_png_struct(png_structrp png_ptr)\n{\n  if (png_ptr != 0)\n  {\n    png_struct dummy_struct = *png_ptr;\n    memset(png_ptr, 0, sizeof(*png_ptr));\n    png_free(&dummy_struct, png_ptr);\n  }\n}\n\n",
            "calle": [
                "memset",
                "png_free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dummy_struct",
                        "type": "png_struct",
                        "definition": [
                            "png_struct dummy_struct = *png_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_malloc_array_checked",
            "header": "",
            "params": [
                "png_const_structrp png_ptr",
                "int nelements",
                "size_t element_size"
            ],
            "definition": "static png_voidp png_malloc_array_checked(png_const_structrp png_ptr, int nelements, size_t element_size)\n{\n  png_alloc_size_t req = (png_alloc_size_t) nelements;\n  if (req <= (((size_t) (-1)) / element_size))\n  {\n    return png_malloc_base(png_ptr, req * element_size);\n  }\n  return 0;\n}\n\n",
            "calle": [
                "png_malloc_base"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nelements",
                        "type": "int",
                        "definition": [
                            "int nelements"
                        ]
                    },
                    {
                        "path": null,
                        "name": "element_size",
                        "type": "size_t",
                        "definition": [
                            "size_t element_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "req",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t req = (png_alloc_size_t) nelements"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_create_read_struct",
            "header": "extern png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)",
            "params": [
                "png_const_charp user_png_ver",
                "png_voidp error_ptr",
                "png_error_ptr error_fn",
                "png_error_ptr warn_fn"
            ],
            "definition": "png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)\n{\n  png_structp png_ptr = png_create_png_struct(user_png_ver, error_ptr, error_fn, warn_fn, 0, 0, 0);\n  if (png_ptr != 0)\n  {\n    png_ptr->mode = 0x8000U;\n    png_ptr->IDAT_read_size = 8192;\n    png_ptr->flags |= 0x100000U;\n    png_ptr->flags |= 0x200000U;\n    png_set_read_fn(png_ptr, 0, 0);\n  }\n  return png_ptr;\n}\n\n",
            "calle": [
                "png_create_png_struct",
                "png_set_read_fn"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "user_png_ver",
                        "type": "png_const_charp",
                        "definition": [
                            "png_const_charp user_png_ver"
                        ]
                    },
                    {
                        "path": null,
                        "name": "error_ptr",
                        "type": "png_voidp",
                        "definition": [
                            "png_voidp error_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "error_fn",
                        "type": "png_error_ptr",
                        "definition": [
                            "png_error_ptr error_fn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "warn_fn",
                        "type": "png_error_ptr",
                        "definition": [
                            "png_error_ptr warn_fn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr = png_create_png_struct(user_png_ver, error_ptr, error_fn, warn_fn, 0, 0, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_read_info",
            "header": "extern void png_read_info(png_structrp png_ptr, png_inforp info_ptr)",
            "params": [
                "png_structrp png_ptr",
                "png_inforp info_ptr"
            ],
            "definition": "void png_read_info(png_structrp png_ptr, png_inforp info_ptr)\n{\n  int keep;\n  (void) 0;\n  if ((png_ptr == 0) || (info_ptr == 0))\n  {\n    return;\n  }\n  png_read_sig(png_ptr, info_ptr);\n  for (;;)\n  {\n    helper_png_read_info_1(&png_ptr, &keep, info_ptr);\n  }\n\n}\n\n",
            "calle": [
                "helper_png_read_info_1",
                "png_read_sig"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "keep",
                        "type": "int",
                        "definition": [
                            "int keep"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_start_read_image",
            "header": "extern void png_start_read_image(png_structrp png_ptr)",
            "params": [
                "png_structrp png_ptr"
            ],
            "definition": "void png_start_read_image(png_structrp png_ptr)\n{\n  (void) 0;\n  if (png_ptr != 0)\n  {\n    if ((png_ptr->flags & 0x0040U) == 0)\n    {\n      png_read_start_row(png_ptr);\n    }\n    else\n      png_app_error(png_ptr, \"png_start_read_image/png_read_update_info: duplicate call\");\n  }\n}\n\n",
            "calle": [
                "png_app_error",
                "png_read_start_row"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_read_update_info",
            "header": "extern void png_read_update_info(png_structrp png_ptr, png_inforp info_ptr)",
            "params": [
                "png_structrp png_ptr",
                "png_inforp info_ptr"
            ],
            "definition": "void png_read_update_info(png_structrp png_ptr, png_inforp info_ptr)\n{\n  (void) 0;\n  if (png_ptr != 0)\n  {\n    if ((png_ptr->flags & 0x0040U) == 0)\n    {\n      png_read_start_row(png_ptr);\n      png_read_transform_info(png_ptr, info_ptr);\n    }\n    else\n      png_app_error(png_ptr, \"png_read_update_info/png_start_read_image: duplicate call\");\n  }\n}\n\n",
            "calle": [
                "png_app_error",
                "png_read_start_row",
                "png_read_transform_info"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_read_rows",
            "header": "extern void png_read_rows(png_structrp png_ptr, png_bytepp row, png_bytepp display_row, png_uint_32 num_rows)",
            "params": [
                "png_structrp png_ptr",
                "png_bytepp row",
                "png_bytepp display_row",
                "png_uint_32 num_rows"
            ],
            "definition": "void png_read_rows(png_structrp png_ptr, png_bytepp row, png_bytepp display_row, png_uint_32 num_rows)\n{\n  png_uint_32 i;\n  png_bytepp rp;\n  png_bytepp dp;\n  (void) 0;\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  rp = row;\n  dp = display_row;\n  if ((rp != 0) && (dp != 0))\n  {\n    for (i = 0; i < num_rows; i += 1)\n    {\n      png_bytep rptr = *rp;\n      rp += 1;\n      png_bytep dptr = *dp;\n      dp += 1;\n      png_read_row(png_ptr, rptr, dptr);\n    }\n\n  }\n  else\n    if (rp != 0)\n  {\n    for (i = 0; i < num_rows; i += 1)\n    {\n      png_bytep rptr = *rp;\n      png_read_row(png_ptr, rptr, 0);\n      rp += 1;\n    }\n\n  }\n  else\n    if (dp != 0)\n  {\n    for (i = 0; i < num_rows; i += 1)\n    {\n      png_bytep dptr = *dp;\n      png_read_row(png_ptr, 0, dptr);\n      dp += 1;\n    }\n\n  }\n}\n\n",
            "calle": [
                "png_read_row"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "display_row",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp display_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_rows",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 num_rows"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rp",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp rp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp dp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep rptr = *rp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dptr = *dp"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_read_row",
            "header": "extern void png_read_row(png_structrp png_ptr, png_bytep row, png_bytep display_row)",
            "params": [
                "png_structrp png_ptr",
                "png_bytep row",
                "png_bytep dsp_row"
            ],
            "definition": "void png_read_row(png_structrp png_ptr, png_bytep row, png_bytep dsp_row)\n{\n  png_row_info row_info;\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  (void) 0;\n  if ((png_ptr->flags & 0x0040U) == 0)\n  {\n    png_read_start_row(png_ptr);\n  }\n  row_info.width = png_ptr->iwidth;\n  row_info.color_type = png_ptr->color_type;\n  row_info.bit_depth = png_ptr->bit_depth;\n  row_info.channels = png_ptr->channels;\n  row_info.pixel_depth = png_ptr->pixel_depth;\n  row_info.rowbytes = (row_info.pixel_depth >= 8) ? (((size_t) row_info.width) * (((size_t) row_info.pixel_depth) >> 3)) : (((((size_t) row_info.width) * ((size_t) row_info.pixel_depth)) + 7) >> 3);\n  if ((png_ptr->row_number == 0) && (png_ptr->pass == 0))\n  {\n  }\n  if ((png_ptr->interlaced != 0) && ((png_ptr->transformations & 0x0002U) != 0))\n  {\n    helper_png_read_row_1(png_ptr, dsp_row);\n  }\n  if ((png_ptr->mode & 0x04U) == 0)\n  {\n    png_error(png_ptr, \"Invalid attempt to read row data\");\n  }\n  png_ptr->row_buf[0] = 255;\n  png_read_IDAT_data(png_ptr, png_ptr->row_buf, row_info.rowbytes + 1);\n  if (png_ptr->row_buf[0] > 0)\n  {\n    if (png_ptr->row_buf[0] < 5)\n    {\n      png_read_filter_row(png_ptr, &row_info, png_ptr->row_buf + 1, png_ptr->prev_row + 1, png_ptr->row_buf[0]);\n    }\n    else\n      png_error(png_ptr, \"bad adaptive filter value\");\n  }\n  memcpy(png_ptr->prev_row, png_ptr->row_buf, row_info.rowbytes + 1);\n  if (png_ptr->transformations)\n  {\n    png_do_read_transformations(png_ptr, &row_info);\n  }\n  if (png_ptr->transformed_pixel_depth == 0)\n  {\n    png_ptr->transformed_pixel_depth = row_info.pixel_depth;\n    if (row_info.pixel_depth > png_ptr->maximum_pixel_depth)\n    {\n      png_error(png_ptr, \"sequential row overflow\");\n    }\n  }\n  else\n    if (png_ptr->transformed_pixel_depth != row_info.pixel_depth)\n  {\n    png_error(png_ptr, \"internal sequential row size calculation error\");\n  }\n  if ((png_ptr->interlaced != 0) && ((png_ptr->transformations & 0x0002U) != 0))\n  {\n    if (png_ptr->pass < 6)\n    {\n      png_do_read_interlace(&row_info, png_ptr->row_buf + 1, png_ptr->pass, png_ptr->transformations);\n    }\n    if (dsp_row != 0)\n    {\n      png_combine_row(png_ptr, dsp_row, 1);\n    }\n    if (row != 0)\n    {\n      png_combine_row(png_ptr, row, 0);\n    }\n  }\n  else\n  {\n    if (row != 0)\n    {\n      png_combine_row(png_ptr, row, -1);\n    }\n    if (dsp_row != 0)\n    {\n      png_combine_row(png_ptr, dsp_row, -1);\n    }\n  }\n  png_read_finish_row(png_ptr);\n  if (png_ptr->read_row_fn != 0)\n  {\n    (*png_ptr->read_row_fn)(png_ptr, png_ptr->row_number, png_ptr->pass);\n  }\n}\n\n",
            "calle": [
                "*png_ptr->read_row_fn",
                "helper_png_read_row_1",
                "memcpy",
                "png_combine_row",
                "png_do_read_interlace",
                "png_do_read_transformations",
                "png_error",
                "png_read_IDAT_data",
                "png_read_filter_row",
                "png_read_finish_row",
                "png_read_start_row"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dsp_row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dsp_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_info",
                        "type": "png_row_info",
                        "definition": [
                            "png_row_info row_info"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_read_image",
            "header": "extern void png_read_image(png_structrp png_ptr, png_bytepp image)",
            "params": [
                "png_structrp png_ptr",
                "png_bytepp image"
            ],
            "definition": "void png_read_image(png_structrp png_ptr, png_bytepp image)\n{\n  png_uint_32 i;\n  png_uint_32 image_height;\n  int pass;\n  int j;\n  png_bytepp rp;\n  (void) 0;\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  if ((png_ptr->flags & 0x0040U) == 0)\n  {\n    pass = png_set_interlace_handling(png_ptr);\n    png_start_read_image(png_ptr);\n  }\n  else\n  {\n    if ((png_ptr->interlaced != 0) && ((png_ptr->transformations & 0x0002U) == 0))\n    {\n      png_warning(png_ptr, \"Interlace handling should be turned on when using png_read_image\");\n      png_ptr->num_rows = png_ptr->height;\n    }\n    pass = png_set_interlace_handling(png_ptr);\n  }\n  image_height = png_ptr->height;\n  for (j = 0; j < pass; j += 1)\n  {\n    rp = image;\n    for (i = 0; i < image_height; i += 1)\n    {\n      png_read_row(png_ptr, *rp, 0);\n      rp += 1;\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "png_read_row",
                "png_set_interlace_handling",
                "png_start_read_image",
                "png_warning"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "image",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp image"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "image_height",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 image_height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pass",
                        "type": "int",
                        "definition": [
                            "int pass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rp",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp rp"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_read_end",
            "header": "extern void png_read_end(png_structrp png_ptr, png_inforp info_ptr)",
            "params": [
                "png_structrp png_ptr",
                "png_inforp info_ptr"
            ],
            "definition": "void png_read_end(png_structrp png_ptr, png_inforp info_ptr)\n{\n  int keep;\n  (void) 0;\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  if (png_chunk_unknown_handling(png_ptr, (((((png_uint_32) 73) << 24) | (((png_uint_32) 68) << 16)) | (((png_uint_32) 65) << 8)) | (((png_uint_32) 84) << 0)) == 0)\n  {\n    png_read_finish_IDAT(png_ptr);\n  }\n  if ((png_ptr->color_type == (2 | 1)) && (png_ptr->num_palette_max > png_ptr->num_palette))\n  {\n    png_benign_error(png_ptr, \"Read palette index exceeding num_palette\");\n  }\n  do\n  {\n    helper_png_read_end_1(&png_ptr, &keep, info_ptr);\n  }\n  while ((png_ptr->mode & 0x10U) == 0);\n}\n\n",
            "calle": [
                "helper_png_read_end_1",
                "png_benign_error",
                "png_chunk_unknown_handling",
                "png_read_finish_IDAT"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "keep",
                        "type": "int",
                        "definition": [
                            "int keep"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_destroy_read_struct",
            "header": "extern void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)",
            "params": [
                "png_structpp png_ptr_ptr",
                "png_infopp info_ptr_ptr",
                "png_infopp end_info_ptr_ptr"
            ],
            "definition": "void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr)\n{\n  png_structrp png_ptr = 0;\n  (void) 0;\n  if (png_ptr_ptr != 0)\n  {\n    png_ptr = *png_ptr_ptr;\n  }\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  png_destroy_info_struct(png_ptr, end_info_ptr_ptr);\n  png_destroy_info_struct(png_ptr, info_ptr_ptr);\n  *png_ptr_ptr = 0;\n  png_read_destroy(png_ptr);\n  png_destroy_png_struct(png_ptr);\n}\n\n",
            "calle": [
                "png_destroy_info_struct",
                "png_destroy_png_struct",
                "png_read_destroy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr_ptr",
                        "type": "png_structpp",
                        "definition": [
                            "png_structpp png_ptr_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr_ptr",
                        "type": "png_infopp",
                        "definition": [
                            "png_infopp info_ptr_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end_info_ptr_ptr",
                        "type": "png_infopp",
                        "definition": [
                            "png_infopp end_info_ptr_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_set_read_status_fn",
            "header": "extern void png_set_read_status_fn(png_structrp png_ptr, png_read_status_ptr read_row_fn)",
            "params": [
                "png_structrp png_ptr",
                "png_read_status_ptr read_row_fn"
            ],
            "definition": "void png_set_read_status_fn(png_structrp png_ptr, png_read_status_ptr read_row_fn)\n{\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  png_ptr->read_row_fn = read_row_fn;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "read_row_fn",
                        "type": "png_read_status_ptr",
                        "definition": [
                            "png_read_status_ptr read_row_fn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_read_png",
            "header": "extern void png_read_png(png_structrp png_ptr, png_inforp info_ptr, int transforms, png_voidp params)",
            "params": [
                "png_structrp png_ptr",
                "png_inforp info_ptr",
                "int transforms",
                "voidp params"
            ],
            "definition": "void png_read_png(png_structrp png_ptr, png_inforp info_ptr, int transforms, voidp params)\n{\n  if ((png_ptr == 0) || (info_ptr == 0))\n  {\n    return;\n  }\n  png_read_info(png_ptr, info_ptr);\n  if (info_ptr->height > (((png_uint_32) (-1)) / (sizeof(png_bytep))))\n  {\n    png_error(png_ptr, \"Image is too high to process with png_read_png()\");\n  }\n  if ((transforms & 0x8000) != 0)\n  {\n    png_app_error(png_ptr, \"PNG_TRANSFORM_SCALE_16 not supported\");\n  }\n  if ((transforms & 0x0001) != 0)\n  {\n    png_app_error(png_ptr, \"PNG_TRANSFORM_STRIP_16 not supported\");\n  }\n  if ((transforms & 0x0002) != 0)\n  {\n    png_app_error(png_ptr, \"PNG_TRANSFORM_STRIP_ALPHA not supported\");\n  }\n  if ((transforms & 0x0004) != 0)\n  {\n    png_app_error(png_ptr, \"PNG_TRANSFORM_PACKING not supported\");\n  }\n  if ((transforms & 0x0008) != 0)\n  {\n    png_app_error(png_ptr, \"PNG_TRANSFORM_PACKSWAP not supported\");\n  }\n  if ((transforms & 0x0010) != 0)\n  {\n    png_app_error(png_ptr, \"PNG_TRANSFORM_EXPAND not supported\");\n  }\n  if ((transforms & 0x0020) != 0)\n  {\n    png_app_error(png_ptr, \"PNG_TRANSFORM_INVERT_MONO not supported\");\n  }\n  if ((transforms & 0x0040) != 0)\n  {\n    png_app_error(png_ptr, \"PNG_TRANSFORM_SHIFT not supported\");\n  }\n  if ((transforms & 0x0080) != 0)\n  {\n    png_app_error(png_ptr, \"PNG_TRANSFORM_BGR not supported\");\n  }\n  if ((transforms & 0x0100) != 0)\n  {\n    png_app_error(png_ptr, \"PNG_TRANSFORM_SWAP_ALPHA not supported\");\n  }\n  if ((transforms & 0x0200) != 0)\n  {\n    png_app_error(png_ptr, \"PNG_TRANSFORM_SWAP_ENDIAN not supported\");\n  }\n  if ((transforms & 0x0400) != 0)\n  {\n    png_app_error(png_ptr, \"PNG_TRANSFORM_INVERT_ALPHA not supported\");\n  }\n  if ((transforms & 0x2000) != 0)\n  {\n    png_app_error(png_ptr, \"PNG_TRANSFORM_GRAY_TO_RGB not supported\");\n  }\n  if ((transforms & 0x4000) != 0)\n  {\n    png_app_error(png_ptr, \"PNG_TRANSFORM_EXPAND_16 not supported\");\n  }\n  (void) png_set_interlace_handling(png_ptr);\n  png_read_update_info(png_ptr, info_ptr);\n  png_free_data(png_ptr, info_ptr, 0x0040U, 0);\n  if (info_ptr->row_pointers == 0)\n  {\n    png_uint_32 iptr;\n    info_ptr->row_pointers = png_malloc(png_ptr, info_ptr->height * (sizeof(png_bytep)));\n    for (iptr = 0; iptr < info_ptr->height; iptr += 1)\n    {\n      info_ptr->row_pointers[iptr] = 0;\n    }\n\n    info_ptr->free_me |= 0x0040U;\n    for (iptr = 0; iptr < info_ptr->height; iptr += 1)\n    {\n      info_ptr->row_pointers[iptr] = png_malloc(png_ptr, info_ptr->rowbytes);\n    }\n\n  }\n  png_read_image(png_ptr, info_ptr->row_pointers);\n  info_ptr->valid |= 0x8000U;\n  png_read_end(png_ptr, info_ptr);\n  (void) params;\n}\n\n",
            "calle": [
                "png_app_error",
                "png_error",
                "png_free_data",
                "png_malloc",
                "png_read_end",
                "png_read_image",
                "png_read_info",
                "png_read_update_info",
                "png_set_interlace_handling"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "transforms",
                        "type": "int",
                        "definition": [
                            "int transforms"
                        ]
                    },
                    {
                        "path": null,
                        "name": "params",
                        "type": "voidp",
                        "definition": [
                            "voidp params"
                        ]
                    },
                    {
                        "path": null,
                        "name": "iptr",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 iptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_read_destroy",
            "header": "",
            "params": [
                "png_structrp png_ptr"
            ],
            "definition": "static void png_read_destroy(png_structrp png_ptr)\n{\n  (void) 0;\n  png_free(png_ptr, png_ptr->big_row_buf);\n  png_ptr->big_row_buf = 0;\n  png_free(png_ptr, png_ptr->big_prev_row);\n  png_ptr->big_prev_row = 0;\n  png_free(png_ptr, png_ptr->read_buffer);\n  png_ptr->read_buffer = 0;\n  if ((png_ptr->free_me & 0x1000U) != 0)\n  {\n    png_zfree(png_ptr, png_ptr->palette);\n    png_ptr->palette = 0;\n  }\n  png_ptr->free_me &= ~0x1000U;\n  if ((png_ptr->free_me & 0x2000U) != 0)\n  {\n    png_free(png_ptr, png_ptr->trans_alpha);\n    png_ptr->trans_alpha = 0;\n  }\n  png_ptr->free_me &= ~0x2000U;\n  inflateEnd(&png_ptr->zstream);\n  png_free(png_ptr, png_ptr->unknown_chunk.data);\n  png_ptr->unknown_chunk.data = 0;\n  png_free(png_ptr, png_ptr->chunk_list);\n  png_ptr->chunk_list = 0;\n}\n\n",
            "calle": [
                "inflateEnd",
                "png_free",
                "png_zfree"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_png_read_info_1",
            "header": "",
            "params": [
                "png_structrp * const png_ptr_ref",
                "int * const keep_ref",
                "png_inforp info_ptr"
            ],
            "definition": "void helper_png_read_info_1(png_structrp * const png_ptr_ref, int * const keep_ref, png_inforp info_ptr)\n{\n  png_structrp png_ptr = *png_ptr_ref;\n  int keep = *keep_ref;\n  png_uint_32 length = png_read_chunk_header(png_ptr);\n  png_uint_32 chunk_name = png_ptr->chunk_name;\n  if (chunk_name == ((((((png_uint_32) 73) << 24) | (((png_uint_32) 68) << 16)) | (((png_uint_32) 65) << 8)) | (((png_uint_32) 84) << 0)))\n  {\n    if ((png_ptr->mode & 0x01) == 0)\n    {\n      png_chunk_error(png_ptr, \"Missing IHDR before IDAT\");\n    }\n    else\n      if ((png_ptr->color_type == (2 | 1)) && ((png_ptr->mode & 0x02) == 0))\n    {\n      png_chunk_error(png_ptr, \"Missing PLTE before IDAT\");\n    }\n    else\n      if ((png_ptr->mode & 0x08) != 0)\n    {\n      png_chunk_benign_error(png_ptr, \"Too many IDATs found\");\n    }\n    png_ptr->mode |= 0x04U;\n  }\n  else\n    if ((png_ptr->mode & 0x04U) != 0)\n  {\n    png_ptr->mode |= 0x2000U;\n    png_ptr->mode |= 0x08;\n  }\n  if (chunk_name == ((((((png_uint_32) 73) << 24) | (((png_uint_32) 72) << 16)) | (((png_uint_32) 68) << 8)) | (((png_uint_32) 82) << 0)))\n  {\n    png_handle_IHDR(png_ptr, info_ptr, length);\n  }\n  else\n    if (chunk_name == ((((((png_uint_32) 73) << 24) | (((png_uint_32) 69) << 16)) | (((png_uint_32) 78) << 8)) | (((png_uint_32) 68) << 0)))\n  {\n    png_handle_IEND(png_ptr, info_ptr, length);\n  }\n  else\n    if ((keep = png_chunk_unknown_handling(png_ptr, chunk_name)) != 0)\n  {\n    png_handle_unknown(png_ptr, info_ptr, length, keep);\n    if (chunk_name == ((((((png_uint_32) 80) << 24) | (((png_uint_32) 76) << 16)) | (((png_uint_32) 84) << 8)) | (((png_uint_32) 69) << 0)))\n    {\n      png_ptr->mode |= 0x02;\n    }\n    else\n      if (chunk_name == ((((((png_uint_32) 73) << 24) | (((png_uint_32) 68) << 16)) | (((png_uint_32) 65) << 8)) | (((png_uint_32) 84) << 0)))\n    {\n      png_ptr->idat_size = 0;\n      break;\n    }\n  }\n  else\n    if (chunk_name == ((((((png_uint_32) 80) << 24) | (((png_uint_32) 76) << 16)) | (((png_uint_32) 84) << 8)) | (((png_uint_32) 69) << 0)))\n  {\n    png_handle_PLTE(png_ptr, info_ptr, length);\n  }\n  else\n    if (chunk_name == ((((((png_uint_32) 73) << 24) | (((png_uint_32) 68) << 16)) | (((png_uint_32) 65) << 8)) | (((png_uint_32) 84) << 0)))\n  {\n    png_ptr->idat_size = length;\n    break;\n  }\n  else\n    if (chunk_name == ((((((png_uint_32) 98) << 24) | (((png_uint_32) 75) << 16)) | (((png_uint_32) 71) << 8)) | (((png_uint_32) 68) << 0)))\n  {\n    png_handle_bKGD(png_ptr, info_ptr, length);\n  }\n  else\n    if (chunk_name == ((((((png_uint_32) 104) << 24) | (((png_uint_32) 73) << 16)) | (((png_uint_32) 83) << 8)) | (((png_uint_32) 84) << 0)))\n  {\n    png_handle_hIST(png_ptr, info_ptr, length);\n  }\n  else\n    if (chunk_name == ((((((png_uint_32) 115) << 24) | (((png_uint_32) 66) << 16)) | (((png_uint_32) 73) << 8)) | (((png_uint_32) 84) << 0)))\n  {\n    png_handle_sBIT(png_ptr, info_ptr, length);\n  }\n  else\n    if (chunk_name == ((((((png_uint_32) 116) << 24) | (((png_uint_32) 82) << 16)) | (((png_uint_32) 78) << 8)) | (((png_uint_32) 83) << 0)))\n  {\n    png_handle_tRNS(png_ptr, info_ptr, length);\n  }\n  else\n    png_handle_unknown(png_ptr, info_ptr, length, 0);\n  *png_ptr_ref = png_ptr;\n  *keep_ref = keep;\n}\n\n",
            "calle": [
                "png_chunk_benign_error",
                "png_chunk_error",
                "png_chunk_unknown_handling",
                "png_handle_IEND",
                "png_handle_IHDR",
                "png_handle_PLTE",
                "png_handle_bKGD",
                "png_handle_hIST",
                "png_handle_sBIT",
                "png_handle_tRNS",
                "png_handle_unknown",
                "png_read_chunk_header"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr_ref",
                        "type": "png_structrp * const",
                        "definition": [
                            "png_structrp * const png_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "keep_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const keep_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr = *png_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "keep",
                        "type": "int",
                        "definition": [
                            "int keep = *keep_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 length = png_read_chunk_header(png_ptr)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chunk_name",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 chunk_name = png_ptr->chunk_name"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_png_read_row_1",
            "header": "",
            "params": [
                "png_structrp png_ptr",
                "png_bytep dsp_row"
            ],
            "definition": "void helper_png_read_row_1(png_structrp png_ptr, png_bytep dsp_row)\n{\n  switch (png_ptr->pass)\n  {\n    case 0:\n    {\n      if (png_ptr->row_number & 0x07)\n      {\n        if (dsp_row != 0)\n        {\n          png_combine_row(png_ptr, dsp_row, 1);\n        }\n        png_read_finish_row(png_ptr);\n        return;\n      }\n      break;\n    }\n\n    case 1:\n    {\n      if ((png_ptr->row_number & 0x07) || (png_ptr->width < 5))\n      {\n        if (dsp_row != 0)\n        {\n          png_combine_row(png_ptr, dsp_row, 1);\n        }\n        png_read_finish_row(png_ptr);\n        return;\n      }\n      break;\n    }\n\n    case 2:\n    {\n      if ((png_ptr->row_number & 0x07) != 4)\n      {\n        if ((dsp_row != 0) && (png_ptr->row_number & 4))\n        {\n          png_combine_row(png_ptr, dsp_row, 1);\n        }\n        png_read_finish_row(png_ptr);\n        return;\n      }\n      break;\n    }\n\n    case 3:\n    {\n      if ((png_ptr->row_number & 3) || (png_ptr->width < 3))\n      {\n        if (dsp_row != 0)\n        {\n          png_combine_row(png_ptr, dsp_row, 1);\n        }\n        png_read_finish_row(png_ptr);\n        return;\n      }\n      break;\n    }\n\n    case 4:\n    {\n      if ((png_ptr->row_number & 3) != 2)\n      {\n        if ((dsp_row != 0) && (png_ptr->row_number & 2))\n        {\n          png_combine_row(png_ptr, dsp_row, 1);\n        }\n        png_read_finish_row(png_ptr);\n        return;\n      }\n      break;\n    }\n\n    case 5:\n    {\n      if ((png_ptr->row_number & 1) || (png_ptr->width < 2))\n      {\n        if (dsp_row != 0)\n        {\n          png_combine_row(png_ptr, dsp_row, 1);\n        }\n        png_read_finish_row(png_ptr);\n        return;\n      }\n      break;\n    }\n\n    default:\n\n    case 6:\n    {\n      if ((png_ptr->row_number & 1) == 0)\n      {\n        png_read_finish_row(png_ptr);\n        return;\n      }\n      break;\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "png_combine_row",
                "png_read_finish_row"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dsp_row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dsp_row"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_png_read_end_1",
            "header": "",
            "params": [
                "png_structrp * const png_ptr_ref",
                "int * const keep_ref",
                "png_inforp info_ptr"
            ],
            "definition": "void helper_png_read_end_1(png_structrp * const png_ptr_ref, int * const keep_ref, png_inforp info_ptr)\n{\n  png_structrp png_ptr = *png_ptr_ref;\n  int keep = *keep_ref;\n  png_uint_32 length = png_read_chunk_header(png_ptr);\n  png_uint_32 chunk_name = png_ptr->chunk_name;\n  if (chunk_name != ((((((png_uint_32) 73) << 24) | (((png_uint_32) 68) << 16)) | (((png_uint_32) 65) << 8)) | (((png_uint_32) 84) << 0)))\n  {\n    png_ptr->mode |= 0x2000U;\n  }\n  if (chunk_name == ((((((png_uint_32) 73) << 24) | (((png_uint_32) 69) << 16)) | (((png_uint_32) 78) << 8)) | (((png_uint_32) 68) << 0)))\n  {\n    png_handle_IEND(png_ptr, info_ptr, length);\n  }\n  else\n    if (chunk_name == ((((((png_uint_32) 73) << 24) | (((png_uint_32) 72) << 16)) | (((png_uint_32) 68) << 8)) | (((png_uint_32) 82) << 0)))\n  {\n    png_handle_IHDR(png_ptr, info_ptr, length);\n  }\n  else\n    if (info_ptr == 0)\n  {\n    png_crc_finish(png_ptr, length);\n  }\n  else\n    if ((keep = png_chunk_unknown_handling(png_ptr, chunk_name)) != 0)\n  {\n    if (chunk_name == ((((((png_uint_32) 73) << 24) | (((png_uint_32) 68) << 16)) | (((png_uint_32) 65) << 8)) | (((png_uint_32) 84) << 0)))\n    {\n      if (((length > 0) && (!(png_ptr->flags & 0x0008U))) || ((png_ptr->mode & 0x2000U) != 0))\n      {\n        png_benign_error(png_ptr, \".Too many IDATs found\");\n      }\n    }\n    png_handle_unknown(png_ptr, info_ptr, length, keep);\n    if (chunk_name == ((((((png_uint_32) 80) << 24) | (((png_uint_32) 76) << 16)) | (((png_uint_32) 84) << 8)) | (((png_uint_32) 69) << 0)))\n    {\n      png_ptr->mode |= 0x02;\n    }\n  }\n  else\n    if (chunk_name == ((((((png_uint_32) 73) << 24) | (((png_uint_32) 68) << 16)) | (((png_uint_32) 65) << 8)) | (((png_uint_32) 84) << 0)))\n  {\n    if (((length > 0) && (!(png_ptr->flags & 0x0008U))) || ((png_ptr->mode & 0x2000U) != 0))\n    {\n      png_benign_error(png_ptr, \"..Too many IDATs found\");\n    }\n    png_crc_finish(png_ptr, length);\n  }\n  else\n    if (chunk_name == ((((((png_uint_32) 80) << 24) | (((png_uint_32) 76) << 16)) | (((png_uint_32) 84) << 8)) | (((png_uint_32) 69) << 0)))\n  {\n    png_handle_PLTE(png_ptr, info_ptr, length);\n  }\n  else\n    if (chunk_name == ((((((png_uint_32) 98) << 24) | (((png_uint_32) 75) << 16)) | (((png_uint_32) 71) << 8)) | (((png_uint_32) 68) << 0)))\n  {\n    png_handle_bKGD(png_ptr, info_ptr, length);\n  }\n  else\n    if (chunk_name == ((((((png_uint_32) 104) << 24) | (((png_uint_32) 73) << 16)) | (((png_uint_32) 83) << 8)) | (((png_uint_32) 84) << 0)))\n  {\n    png_handle_hIST(png_ptr, info_ptr, length);\n  }\n  else\n    if (chunk_name == ((((((png_uint_32) 115) << 24) | (((png_uint_32) 66) << 16)) | (((png_uint_32) 73) << 8)) | (((png_uint_32) 84) << 0)))\n  {\n    png_handle_sBIT(png_ptr, info_ptr, length);\n  }\n  else\n    if (chunk_name == ((((((png_uint_32) 116) << 24) | (((png_uint_32) 82) << 16)) | (((png_uint_32) 78) << 8)) | (((png_uint_32) 83) << 0)))\n  {\n    png_handle_tRNS(png_ptr, info_ptr, length);\n  }\n  else\n    png_handle_unknown(png_ptr, info_ptr, length, 0);\n  *png_ptr_ref = png_ptr;\n  *keep_ref = keep;\n}\n\n",
            "calle": [
                "png_benign_error",
                "png_chunk_unknown_handling",
                "png_crc_finish",
                "png_handle_IEND",
                "png_handle_IHDR",
                "png_handle_PLTE",
                "png_handle_bKGD",
                "png_handle_hIST",
                "png_handle_sBIT",
                "png_handle_tRNS",
                "png_handle_unknown",
                "png_read_chunk_header"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr_ref",
                        "type": "png_structrp * const",
                        "definition": [
                            "png_structrp * const png_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "keep_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const keep_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr = *png_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "keep",
                        "type": "int",
                        "definition": [
                            "int keep = *keep_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 length = png_read_chunk_header(png_ptr)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chunk_name",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 chunk_name = png_ptr->chunk_name"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_set_read_fn",
            "header": "extern void png_set_read_fn(png_structrp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn)",
            "params": [
                "png_structrp png_ptr",
                "png_voidp io_ptr",
                "png_rw_ptr read_data_fn"
            ],
            "definition": "void png_set_read_fn(png_structrp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn)\n{\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  png_ptr->io_ptr = io_ptr;\n  if (read_data_fn != 0)\n  {\n    png_ptr->read_data_fn = read_data_fn;\n  }\n  else\n    png_ptr->read_data_fn = png_default_read_data;\n  if (png_ptr->write_data_fn != 0)\n  {\n    png_ptr->write_data_fn = 0;\n    png_warning(png_ptr, \"Can't set both read_data_fn and write_data_fn in the same structure\");\n  }\n  png_ptr->output_flush_fn = 0;\n}\n\n",
            "calle": [
                "png_default_read_data",
                "png_warning"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "io_ptr",
                        "type": "png_voidp",
                        "definition": [
                            "png_voidp io_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "read_data_fn",
                        "type": "png_rw_ptr",
                        "definition": [
                            "png_rw_ptr read_data_fn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_default_read_data",
            "header": "extern void png_default_read_data(png_structp png_ptr, png_bytep data, size_t length)",
            "params": [
                "png_structp png_ptr",
                "png_bytep data",
                "size_t length"
            ],
            "definition": "void png_default_read_data(png_structp png_ptr, png_bytep data, size_t length)\n{\n  size_t check;\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  check = fread(data, 1, length, png_ptr->io_ptr);\n  if (check != length)\n  {\n    png_error(png_ptr, \"Read Error\");\n  }\n}\n\n",
            "calle": [
                "fread",
                "png_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "check",
                        "type": "size_t",
                        "definition": [
                            "size_t check"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_read_data",
            "header": "extern void png_read_data(png_structrp png_ptr, png_bytep data, size_t length)",
            "params": [
                "png_structrp png_ptr",
                "png_bytep data",
                "size_t length"
            ],
            "definition": "void png_read_data(png_structrp png_ptr, png_bytep data, size_t length)\n{\n  (void) 0;\n  if (png_ptr->read_data_fn != 0)\n  {\n    (*png_ptr->read_data_fn)(png_ptr, data, length);\n  }\n  else\n    png_error(png_ptr, \"Call to NULL read function\");\n}\n\n",
            "calle": [
                "*png_ptr->read_data_fn",
                "png_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_set_crc_action",
            "header": "extern void png_set_crc_action(png_structrp png_ptr, int crit_action, int ancil_action)",
            "params": [
                "png_structrp png_ptr",
                "int crit_action",
                "int ancil_action"
            ],
            "definition": "void png_set_crc_action(png_structrp png_ptr, int crit_action, int ancil_action)\n{\n  (void) 0;\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  switch (crit_action)\n  {\n    case 5:\n    {\n      break;\n    }\n\n    case 3:\n    {\n      png_ptr->flags &= ~(0x0400U | 0x0800U);\n      png_ptr->flags |= 0x0400U;\n      break;\n    }\n\n    case 4:\n    {\n      png_ptr->flags &= ~(0x0400U | 0x0800U);\n      png_ptr->flags |= 0x0400U | 0x0800U;\n      break;\n    }\n\n    case 2:\n    {\n      png_warning(png_ptr, \"Can't discard critical data on CRC error\");\n    }\n\n    case 1:\n\n    case 0:\n\n    default:\n    {\n      png_ptr->flags &= ~(0x0400U | 0x0800U);\n      break;\n    }\n\n  }\n\n  switch (ancil_action)\n  {\n    case 5:\n    {\n      break;\n    }\n\n    case 3:\n    {\n      png_ptr->flags &= ~(0x0100U | 0x0200U);\n      png_ptr->flags |= 0x0100U;\n      break;\n    }\n\n    case 4:\n    {\n      png_ptr->flags &= ~(0x0100U | 0x0200U);\n      png_ptr->flags |= 0x0100U | 0x0200U;\n      break;\n    }\n\n    case 1:\n    {\n      png_ptr->flags &= ~(0x0100U | 0x0200U);\n      png_ptr->flags |= 0x0200U;\n      break;\n    }\n\n    case 2:\n\n    case 0:\n\n    default:\n    {\n      png_ptr->flags &= ~(0x0100U | 0x0200U);\n      break;\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "png_warning"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crit_action",
                        "type": "int",
                        "definition": [
                            "int crit_action"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ancil_action",
                        "type": "int",
                        "definition": [
                            "int ancil_action"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_read_transform_info",
            "header": "extern void png_read_transform_info(png_structrp png_ptr, png_inforp info_ptr)",
            "params": [
                "png_structrp png_ptr",
                "png_inforp info_ptr"
            ],
            "definition": "void png_read_transform_info(png_structrp png_ptr, png_inforp info_ptr)\n{\n  (void) 0;\n  if (info_ptr->bit_depth == 16)\n  {\n  }\n  if (info_ptr->color_type == (2 | 1))\n  {\n    info_ptr->channels = 1;\n  }\n  else\n    if ((info_ptr->color_type & 2) != 0)\n  {\n    info_ptr->channels = 3;\n  }\n  else\n    info_ptr->channels = 1;\n  if ((info_ptr->color_type & 4) != 0)\n  {\n    info_ptr->channels += 1;\n  }\n  info_ptr->pixel_depth = (png_byte) (info_ptr->channels * info_ptr->bit_depth);\n  info_ptr->rowbytes = (info_ptr->pixel_depth >= 8) ? (((size_t) info_ptr->width) * (((size_t) info_ptr->pixel_depth) >> 3)) : (((((size_t) info_ptr->width) * ((size_t) info_ptr->pixel_depth)) + 7) >> 3);\n  png_ptr->info_rowbytes = info_ptr->rowbytes;\n  if (png_ptr != 0)\n  {\n    return;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_do_read_transformations",
            "header": "extern void png_do_read_transformations(png_structrp png_ptr, png_row_infop row_info)",
            "params": [
                "png_structrp png_ptr",
                "png_row_infop row_info"
            ],
            "definition": "void png_do_read_transformations(png_structrp png_ptr, png_row_infop row_info)\n{\n  (void) 0;\n  if (png_ptr->row_buf == 0)\n  {\n    png_error(png_ptr, \"NULL row buffer\");\n  }\n  if (((png_ptr->flags & 0x4000U) != 0) && ((png_ptr->flags & 0x0040U) == 0))\n  {\n    png_error(png_ptr, \"Uninitialized row\");\n  }\n  if ((row_info->color_type == (2 | 1)) && (png_ptr->num_palette_max >= 0))\n  {\n    png_do_check_palette_indexes(png_ptr, row_info);\n  }\n}\n\n",
            "calle": [
                "png_do_check_palette_indexes",
                "png_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_info",
                        "type": "png_row_infop",
                        "definition": [
                            "png_row_infop row_info"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_init_read_transformations",
            "header": "extern void png_init_read_transformations(png_structrp png_ptr)",
            "params": [
                "png_structrp png_ptr"
            ],
            "definition": "void png_init_read_transformations(png_structrp png_ptr)\n{\n  (void) 0;\n  if (png_ptr->color_type == (2 | 1))\n  {\n    png_init_palette_transformations(png_ptr);\n  }\n  else\n    png_init_rgb_transformations(png_ptr);\n}\n\n",
            "calle": [
                "png_init_palette_transformations",
                "png_init_rgb_transformations"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_rtran_ok",
            "header": "",
            "params": [
                "png_structrp png_ptr",
                "int need_IHDR"
            ],
            "definition": "static int png_rtran_ok(png_structrp png_ptr, int need_IHDR)\n{\n  if (png_ptr != 0)\n  {\n    if ((png_ptr->flags & 0x0040U) != 0)\n    {\n      png_app_error(png_ptr, \"invalid after png_start_read_image or png_read_update_info\");\n    }\n    else\n      if (need_IHDR && ((png_ptr->mode & 0x01) == 0))\n    {\n      png_app_error(png_ptr, \"invalid before the PNG header has been read\");\n    }\n    else\n    {\n      png_ptr->flags |= 0x4000U;\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "calle": [
                "png_app_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "need_IHDR",
                        "type": "int",
                        "definition": [
                            "int need_IHDR"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_init_palette_transformations",
            "header": "",
            "params": [
                "png_structrp png_ptr"
            ],
            "definition": "static void png_init_palette_transformations(png_structrp png_ptr)\n{\n  int input_has_alpha = 0;\n  int input_has_transparency = 0;\n  if (png_ptr->num_trans > 0)\n  {\n    int i;\n    for (i = 0; i < png_ptr->num_trans; i += 1)\n    {\n      if (png_ptr->trans_alpha[i] == 255)\n      {\n        continue;\n      }\n      else\n        if (png_ptr->trans_alpha[i] == 0)\n      {\n        input_has_transparency = 1;\n      }\n      else\n      {\n        input_has_transparency = 1;\n        input_has_alpha = 1;\n        break;\n      }\n    }\n\n  }\n  if (input_has_alpha == 0)\n  {\n    png_ptr->transformations &= ~0x800000U;\n    png_ptr->flags &= ~0x2000U;\n    if (input_has_transparency == 0)\n    {\n      png_ptr->transformations &= ~(0x0080U | 0x0100U);\n    }\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_has_alpha",
                        "type": "int",
                        "definition": [
                            "int input_has_alpha = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_has_transparency",
                        "type": "int",
                        "definition": [
                            "int input_has_transparency = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_init_rgb_transformations",
            "header": "",
            "params": [
                "png_structrp png_ptr"
            ],
            "definition": "static void png_init_rgb_transformations(png_structrp png_ptr)\n{\n  int input_has_alpha = (png_ptr->color_type & 4) != 0;\n  int input_has_transparency = png_ptr->num_trans > 0;\n  if (input_has_alpha == 0)\n  {\n    if (input_has_transparency == 0)\n    {\n      png_ptr->transformations &= ~(0x0080U | 0x0100U);\n    }\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_has_alpha",
                        "type": "int",
                        "definition": [
                            "int input_has_alpha = (png_ptr->color_type & 4) != 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_has_transparency",
                        "type": "int",
                        "definition": [
                            "int input_has_transparency = png_ptr->num_trans > 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_uint_32",
            "header": "extern png_uint_32 png_get_uint_32(png_const_bytep buf)",
            "params": [
                "png_const_bytep buf"
            ],
            "definition": "png_uint_32 png_get_uint_32(png_const_bytep buf)\n{\n  png_uint_32 uval = (((((png_uint_32) (*buf)) << 24) + (((png_uint_32) (*(buf + 1))) << 16)) + (((png_uint_32) (*(buf + 2))) << 8)) + ((png_uint_32) (*(buf + 3)));\n  return uval;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buf",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uval",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 uval = (((((png_uint_32) (*buf)) << 24) + (((png_uint_32) (*(buf + 1))) << 16)) + (((png_uint_32) (*(buf + 2))) << 8)) + ((png_uint_32) (*(buf + 3)))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_uint_16",
            "header": "extern png_uint_16 png_get_uint_16(png_const_bytep buf)",
            "params": [
                "png_const_bytep buf"
            ],
            "definition": "png_uint_16 png_get_uint_16(png_const_bytep buf)\n{\n  unsigned int val = (((unsigned int) (*buf)) << 8) + ((unsigned int) (*(buf + 1)));\n  return (png_uint_16) val;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buf",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int val = (((unsigned int) (*buf)) << 8) + ((unsigned int) (*(buf + 1)))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_int_32",
            "header": "extern png_int_32 png_get_int_32(png_const_bytep buf)",
            "params": [
                "png_const_bytep buf"
            ],
            "definition": "png_int_32 png_get_int_32(png_const_bytep buf)\n{\n  png_uint_32 uval = (((((png_uint_32) (*buf)) << 24) + (((png_uint_32) (*(buf + 1))) << 16)) + (((png_uint_32) (*(buf + 2))) << 8)) + ((png_uint_32) (*(buf + 3)));\n  if ((uval & 0x80000000) == 0)\n  {\n    return (png_int_32) uval;\n  }\n  uval = (uval ^ 0xffffffff) + 1;\n  if ((uval & 0x80000000) == 0)\n  {\n    return -((png_int_32) uval);\n  }\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buf",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uval",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 uval = (((((png_uint_32) (*buf)) << 24) + (((png_uint_32) (*(buf + 1))) << 16)) + (((png_uint_32) (*(buf + 2))) << 8)) + ((png_uint_32) (*(buf + 3)))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_get_uint_31",
            "header": "extern png_uint_32 png_get_uint_31(png_const_structrp png_ptr, png_const_bytep buf)",
            "params": [
                "png_const_structrp png_ptr",
                "png_const_bytep buf"
            ],
            "definition": "png_uint_32 png_get_uint_31(png_const_structrp png_ptr, png_const_bytep buf)\n{\n  png_uint_32 uval = (((((png_uint_32) (*buf)) << 24) + (((png_uint_32) (*(buf + 1))) << 16)) + (((png_uint_32) (*(buf + 2))) << 8)) + ((png_uint_32) (*(buf + 3)));\n  if (uval > ((png_uint_32) 0x7fffffffL))\n  {\n    png_error(png_ptr, \"PNG unsigned integer out of range\");\n  }\n  return uval;\n}\n\n",
            "calle": [
                "png_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "uval",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 uval = (((((png_uint_32) (*buf)) << 24) + (((png_uint_32) (*(buf + 1))) << 16)) + (((png_uint_32) (*(buf + 2))) << 8)) + ((png_uint_32) (*(buf + 3)))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_read_sig",
            "header": "extern void png_read_sig(png_structrp png_ptr, png_inforp info_ptr)",
            "params": [
                "png_structrp png_ptr",
                "png_inforp info_ptr"
            ],
            "definition": "void png_read_sig(png_structrp png_ptr, png_inforp info_ptr)\n{\n  size_t num_checked;\n  size_t num_to_check;\n  if (png_ptr->sig_bytes >= 8)\n  {\n    return;\n  }\n  num_checked = png_ptr->sig_bytes;\n  num_to_check = 8 - num_checked;\n  png_ptr->io_state = 0x0001 | 0x0010;\n  png_read_data(png_ptr, &info_ptr->signature[num_checked], num_to_check);\n  png_ptr->sig_bytes = 8;\n  if (png_sig_cmp(info_ptr->signature, num_checked, num_to_check) != 0)\n  {\n    if ((num_checked < 4) && png_sig_cmp(info_ptr->signature, num_checked, num_to_check - 4))\n    {\n      png_error(png_ptr, \"Not a PNG file\");\n    }\n    else\n      png_error(png_ptr, \"PNG file corrupted by ASCII conversion\");\n  }\n  if (num_checked < 3)\n  {\n    png_ptr->mode |= 0x1000U;\n  }\n}\n\n",
            "calle": [
                "png_error",
                "png_read_data",
                "png_sig_cmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_checked",
                        "type": "size_t",
                        "definition": [
                            "size_t num_checked"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_to_check",
                        "type": "size_t",
                        "definition": [
                            "size_t num_to_check"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_read_chunk_header",
            "header": "extern png_uint_32 png_read_chunk_header(png_structrp png_ptr)",
            "params": [
                "png_structrp png_ptr"
            ],
            "definition": "png_uint_32 png_read_chunk_header(png_structrp png_ptr)\n{\n  png_byte buf[8];\n  png_uint_32 length;\n  png_ptr->io_state = 0x0001 | 0x0020;\n  png_read_data(png_ptr, buf, 8);\n  length = png_get_uint_31(png_ptr, buf);\n  png_ptr->chunk_name = (((((png_uint_32) (0xff & (buf + 4)[0])) << 24) | (((png_uint_32) (0xff & (buf + 4)[1])) << 16)) | (((png_uint_32) (0xff & (buf + 4)[2])) << 8)) | (((png_uint_32) (0xff & (buf + 4)[3])) << 0);\n  (void) 0;\n  png_reset_crc(png_ptr);\n  png_calculate_crc(png_ptr, buf + 4, 4);\n  png_check_chunk_name(png_ptr, png_ptr->chunk_name);\n  png_check_chunk_length(png_ptr, length);\n  png_ptr->io_state = 0x0001 | 0x0040;\n  return length;\n}\n\n",
            "calle": [
                "png_calculate_crc",
                "png_check_chunk_length",
                "png_check_chunk_name",
                "png_get_uint_31",
                "png_read_data",
                "png_reset_crc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "png_byte [8]",
                        "definition": [
                            "png_byte buf[8]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 length"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_crc_read",
            "header": "extern void png_crc_read(png_structrp png_ptr, png_bytep buf, png_uint_32 length)",
            "params": [
                "png_structrp png_ptr",
                "png_bytep buf",
                "png_uint_32 length"
            ],
            "definition": "void png_crc_read(png_structrp png_ptr, png_bytep buf, png_uint_32 length)\n{\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  png_read_data(png_ptr, buf, length);\n  png_calculate_crc(png_ptr, buf, length);\n}\n\n",
            "calle": [
                "png_calculate_crc",
                "png_read_data"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 length"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_crc_finish",
            "header": "extern int png_crc_finish(png_structrp png_ptr, png_uint_32 skip)",
            "params": [
                "png_structrp png_ptr",
                "png_uint_32 skip"
            ],
            "definition": "int png_crc_finish(png_structrp png_ptr, png_uint_32 skip)\n{\n  while (skip > 0)\n  {\n    png_uint_32 len;\n    png_byte tmpbuf[1024];\n    len = sizeof(tmpbuf);\n    if (len > skip)\n    {\n      len = skip;\n    }\n    skip -= len;\n    png_crc_read(png_ptr, tmpbuf, len);\n  }\n\n  if (png_crc_error(png_ptr) != 0)\n  {\n    if (((1 & (png_ptr->chunk_name >> 29)) != 0) ? ((png_ptr->flags & 0x0200U) == 0) : ((png_ptr->flags & 0x0400U) != 0))\n    {\n      png_chunk_warning(png_ptr, \"CRC error\");\n    }\n    else\n      png_chunk_error(png_ptr, \"CRC error\");\n    return 1;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "png_chunk_error",
                "png_chunk_warning",
                "png_crc_error",
                "png_crc_read"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "skip",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 skip"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmpbuf",
                        "type": "png_byte [1024]",
                        "definition": [
                            "png_byte tmpbuf[1024]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_crc_error",
            "header": "extern int png_crc_error(png_structrp png_ptr)",
            "params": [
                "png_structrp png_ptr"
            ],
            "definition": "int png_crc_error(png_structrp png_ptr)\n{\n  png_byte crc_bytes[4];\n  png_uint_32 crc;\n  int need_crc = 1;\n  if ((1 & (png_ptr->chunk_name >> 29)) != 0)\n  {\n    if ((png_ptr->flags & (0x0100U | 0x0200U)) == (0x0100U | 0x0200U))\n    {\n      need_crc = 0;\n    }\n  }\n  else\n  {\n    if ((png_ptr->flags & 0x0800U) != 0)\n    {\n      need_crc = 0;\n    }\n  }\n  png_ptr->io_state = 0x0001 | 0x0080;\n  png_read_data(png_ptr, crc_bytes, 4);\n  if (need_crc != 0)\n  {\n    crc = (((((png_uint_32) (*crc_bytes)) << 24) + (((png_uint_32) (*(crc_bytes + 1))) << 16)) + (((png_uint_32) (*(crc_bytes + 2))) << 8)) + ((png_uint_32) (*(crc_bytes + 3)));\n    return (int) (crc != png_ptr->crc);\n  }\n  else\n    return 0;\n}\n\n",
            "calle": [
                "png_read_data"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc_bytes",
                        "type": "png_byte [4]",
                        "definition": [
                            "png_byte crc_bytes[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crc",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 crc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "need_crc",
                        "type": "int",
                        "definition": [
                            "int need_crc = 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_combine_row",
            "header": "extern void png_combine_row(png_const_structrp png_ptr, png_bytep row, int display)",
            "params": [
                "png_const_structrp png_ptr",
                "png_bytep dp",
                "int display"
            ],
            "definition": "void png_combine_row(png_const_structrp png_ptr, png_bytep dp, int display)\n{\n  unsigned int pixel_depth = png_ptr->transformed_pixel_depth;\n  png_const_bytep sp = png_ptr->row_buf + 1;\n  png_alloc_size_t row_width = png_ptr->width;\n  unsigned int pass = png_ptr->pass;\n  png_bytep end_ptr = 0;\n  png_byte end_byte = 0;\n  unsigned int end_mask;\n  (void) 0;\n  if (pixel_depth == 0)\n  {\n    png_error(png_ptr, \"internal row logic error\");\n  }\n  if ((png_ptr->info_rowbytes != 0) && (png_ptr->info_rowbytes != ((pixel_depth >= 8) ? (((size_t) row_width) * (((size_t) pixel_depth) >> 3)) : (((((size_t) row_width) * ((size_t) pixel_depth)) + 7) >> 3))))\n  {\n    png_error(png_ptr, \"internal row size calculation error\");\n  }\n  if (row_width == 0)\n  {\n    png_error(png_ptr, \"internal row width error\");\n  }\n  end_mask = (pixel_depth * row_width) & 7;\n  if (end_mask != 0)\n  {\n    end_ptr = (dp + ((pixel_depth >= 8) ? (((size_t) row_width) * (((size_t) pixel_depth) >> 3)) : (((((size_t) row_width) * ((size_t) pixel_depth)) + 7) >> 3))) - 1;\n    end_byte = *end_ptr;\n    end_mask = 0xff >> end_mask;\n  }\n  if ((((png_ptr->interlaced != 0) && ((png_ptr->transformations & 0x0002U) != 0)) && (pass < 6)) && ((display == 0) || ((display == 1) && ((pass & 1) != 0))))\n  {\n    helper_png_combine_row_1(&dp, &pixel_depth, &sp, &row_width, png_ptr, display, pass);\n  }\n  else\n    memcpy(dp, sp, (pixel_depth >= 8) ? (((size_t) row_width) * (((size_t) pixel_depth) >> 3)) : (((((size_t) row_width) * ((size_t) pixel_depth)) + 7) >> 3));\n  if (end_ptr != 0)\n  {\n    *end_ptr = (png_byte) ((end_byte & end_mask) | ((*end_ptr) & (~end_mask)));\n  }\n}\n\n",
            "calle": [
                "helper_png_combine_row_1",
                "memcpy",
                "png_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "display",
                        "type": "int",
                        "definition": [
                            "int display"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pixel_depth",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pixel_depth = png_ptr->transformed_pixel_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep sp = png_ptr->row_buf + 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_width",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t row_width = png_ptr->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pass",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pass = png_ptr->pass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end_ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep end_ptr = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end_byte",
                        "type": "png_byte",
                        "definition": [
                            "png_byte end_byte = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end_mask",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int end_mask"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_do_read_interlace",
            "header": "extern void png_do_read_interlace(png_row_infop row_info, png_bytep row, int pass, png_uint_32 transformations)",
            "params": [
                "png_row_infop row_info",
                "png_bytep row",
                "int pass",
                "png_uint_32 transformations"
            ],
            "definition": "void png_do_read_interlace(png_row_infop row_info, png_bytep row, int pass, png_uint_32 transformations)\n{\n  static const unsigned int png_pass_inc[7] = {8, 8, 4, 4, 2, 2, 1};\n  (void) 0;\n  if ((row != 0) && (row_info != 0))\n  {\n    helper_png_do_read_interlace_1(&row_info, row, pass, png_pass_inc);\n  }\n  (void) transformations;\n}\n\n",
            "calle": [
                "helper_png_do_read_interlace_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "row_info",
                        "type": "png_row_infop",
                        "definition": [
                            "png_row_infop row_info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pass",
                        "type": "int",
                        "definition": [
                            "int pass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "transformations",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 transformations"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_inc",
                        "type": "const unsigned int [7]",
                        "definition": [
                            "static const unsigned int png_pass_inc[7] = {8, 8, 4, 4, 2, 2, 1}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_read_filter_row",
            "header": "extern void png_read_filter_row(png_structrp pp, png_row_infop row_info, png_bytep row, png_const_bytep prev_row, int filter)",
            "params": [
                "png_structrp pp",
                "png_row_infop row_info",
                "png_bytep row",
                "png_const_bytep prev_row",
                "int filter"
            ],
            "definition": "void png_read_filter_row(png_structrp pp, png_row_infop row_info, png_bytep row, png_const_bytep prev_row, int filter)\n{\n  if ((filter > 0) && (filter < 5))\n  {\n    if (pp->read_filter[0] == 0)\n    {\n      png_init_filter_functions(pp);\n    }\n    pp->read_filter[filter - 1](row_info, row, prev_row);\n  }\n}\n\n",
            "calle": [
                "png_init_filter_functions",
                "pp->read_filter[filter - 1]"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pp",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp pp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_info",
                        "type": "png_row_infop",
                        "definition": [
                            "png_row_infop row_info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_row",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep prev_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filter",
                        "type": "int",
                        "definition": [
                            "int filter"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_read_IDAT_data",
            "header": "extern void png_read_IDAT_data(png_structrp png_ptr, png_bytep output, png_alloc_size_t avail_out)",
            "params": [
                "png_structrp png_ptr",
                "png_bytep output",
                "png_alloc_size_t avail_out"
            ],
            "definition": "void png_read_IDAT_data(png_structrp png_ptr, png_bytep output, png_alloc_size_t avail_out)\n{\n  png_ptr->zstream.next_out = output;\n  png_ptr->zstream.avail_out = 0;\n  if (output == 0)\n  {\n    avail_out = 0;\n  }\n  do\n  {\n    helper_png_read_IDAT_data_1(&png_ptr, &avail_out, output);\n  }\n  while (avail_out > 0);\n  if (avail_out > 0)\n  {\n    if (output != 0)\n    {\n      png_error(png_ptr, \"Not enough image data\");\n    }\n    else\n      png_chunk_benign_error(png_ptr, \"Too much image data\");\n  }\n}\n\n",
            "calle": [
                "helper_png_read_IDAT_data_1",
                "png_chunk_benign_error",
                "png_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avail_out",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t avail_out"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_read_finish_IDAT",
            "header": "extern void png_read_finish_IDAT(png_structrp png_ptr)",
            "params": [
                "png_structrp png_ptr"
            ],
            "definition": "void png_read_finish_IDAT(png_structrp png_ptr)\n{\n  if ((png_ptr->flags & 0x0008U) == 0)\n  {\n    png_read_IDAT_data(png_ptr, 0, 0);\n    png_ptr->zstream.next_out = 0;\n    if ((png_ptr->flags & 0x0008U) == 0)\n    {\n      png_ptr->mode |= 0x08;\n      png_ptr->flags |= 0x0008U;\n    }\n  }\n  if (png_ptr->zowner == ((((((png_uint_32) 73) << 24) | (((png_uint_32) 68) << 16)) | (((png_uint_32) 65) << 8)) | (((png_uint_32) 84) << 0)))\n  {\n    png_ptr->zstream.next_in = 0;\n    png_ptr->zstream.avail_in = 0;\n    png_ptr->zowner = 0;\n    (void) png_crc_finish(png_ptr, png_ptr->idat_size);\n  }\n}\n\n",
            "calle": [
                "png_crc_finish",
                "png_read_IDAT_data"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_read_finish_row",
            "header": "extern void png_read_finish_row(png_structrp png_ptr)",
            "params": [
                "png_structrp png_ptr"
            ],
            "definition": "void png_read_finish_row(png_structrp png_ptr)\n{\n  static const png_byte png_pass_start[7] = {0, 4, 0, 2, 0, 1, 0};\n  static const png_byte png_pass_inc[7] = {8, 8, 4, 4, 2, 2, 1};\n  static const png_byte png_pass_ystart[7] = {0, 0, 4, 0, 2, 0, 1};\n  static const png_byte png_pass_yinc[7] = {8, 8, 8, 4, 4, 2, 2};\n  (void) 0;\n  png_ptr->row_number += 1;\n  if (png_ptr->row_number < png_ptr->num_rows)\n  {\n    return;\n  }\n  if (png_ptr->interlaced != 0)\n  {\n    png_ptr->row_number = 0;\n    memset(png_ptr->prev_row, 0, png_ptr->rowbytes + 1);\n    do\n    {\n      png_ptr->pass += 1;\n      if (png_ptr->pass >= 7)\n      {\n        break;\n      }\n      png_ptr->iwidth = (((png_ptr->width + png_pass_inc[png_ptr->pass]) - 1) - png_pass_start[png_ptr->pass]) / png_pass_inc[png_ptr->pass];\n      if ((png_ptr->transformations & 0x0002U) == 0)\n      {\n        png_ptr->num_rows = (((png_ptr->height + png_pass_yinc[png_ptr->pass]) - 1) - png_pass_ystart[png_ptr->pass]) / png_pass_yinc[png_ptr->pass];\n      }\n      else\n        break;\n    }\n    while ((png_ptr->num_rows == 0) || (png_ptr->iwidth == 0));\n    if (png_ptr->pass < 7)\n    {\n      return;\n    }\n  }\n  png_read_finish_IDAT(png_ptr);\n}\n\n",
            "calle": [
                "memset",
                "png_read_finish_IDAT"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_start",
                        "type": "const png_byte [7]",
                        "definition": [
                            "static const png_byte png_pass_start[7] = {0, 4, 0, 2, 0, 1, 0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_inc",
                        "type": "const png_byte [7]",
                        "definition": [
                            "static const png_byte png_pass_inc[7] = {8, 8, 4, 4, 2, 2, 1}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_ystart",
                        "type": "const png_byte [7]",
                        "definition": [
                            "static const png_byte png_pass_ystart[7] = {0, 0, 4, 0, 2, 0, 1}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_yinc",
                        "type": "const png_byte [7]",
                        "definition": [
                            "static const png_byte png_pass_yinc[7] = {8, 8, 8, 4, 4, 2, 2}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_read_start_row",
            "header": "extern void png_read_start_row(png_structrp png_ptr)",
            "params": [
                "png_structrp png_ptr"
            ],
            "definition": "void png_read_start_row(png_structrp png_ptr)\n{\n  static const png_byte png_pass_start[7] = {0, 4, 0, 2, 0, 1, 0};\n  static const png_byte png_pass_inc[7] = {8, 8, 4, 4, 2, 2, 1};\n  static const png_byte png_pass_ystart[7] = {0, 0, 4, 0, 2, 0, 1};\n  static const png_byte png_pass_yinc[7] = {8, 8, 8, 4, 4, 2, 2};\n  unsigned int max_pixel_depth;\n  size_t row_bytes;\n  (void) 0;\n  png_init_read_transformations(png_ptr);\n  if (png_ptr->interlaced != 0)\n  {\n    if ((png_ptr->transformations & 0x0002U) == 0)\n    {\n      png_ptr->num_rows = (((png_ptr->height + png_pass_yinc[0]) - 1) - png_pass_ystart[0]) / png_pass_yinc[0];\n    }\n    else\n      png_ptr->num_rows = png_ptr->height;\n    png_ptr->iwidth = (((png_ptr->width + png_pass_inc[png_ptr->pass]) - 1) - png_pass_start[png_ptr->pass]) / png_pass_inc[png_ptr->pass];\n  }\n  else\n  {\n    png_ptr->num_rows = png_ptr->height;\n    png_ptr->iwidth = png_ptr->width;\n  }\n  max_pixel_depth = (unsigned int) png_ptr->pixel_depth;\n  png_ptr->maximum_pixel_depth = (png_byte) max_pixel_depth;\n  png_ptr->transformed_pixel_depth = 0;\n  row_bytes = (png_ptr->width + 7) & (~((png_uint_32) 7));\n  row_bytes = (((max_pixel_depth >= 8) ? (((size_t) row_bytes) * (((size_t) max_pixel_depth) >> 3)) : (((((size_t) row_bytes) * ((size_t) max_pixel_depth)) + 7) >> 3)) + 1) + ((max_pixel_depth + 7) >> 3U);\n  if ((row_bytes + 48) > png_ptr->old_big_row_buf_size)\n  {\n    helper_png_read_start_row_1(&png_ptr, row_bytes);\n  }\n  if (png_ptr->rowbytes > (((size_t) (-1)) - 1))\n  {\n    png_error(png_ptr, \"Row has too many bytes to allocate in memory\");\n  }\n  memset(png_ptr->prev_row, 0, png_ptr->rowbytes + 1);\n  (void) 0;\n  (void) 0;\n  (void) 0;\n  (void) 0;\n  (void) 0;\n  (void) 0;\n  if (png_ptr->read_buffer != 0)\n  {\n    png_bytep buffer = png_ptr->read_buffer;\n    png_ptr->read_buffer_size = 0;\n    png_ptr->read_buffer = 0;\n    png_free(png_ptr, buffer);\n  }\n  if (png_inflate_claim(png_ptr, (((((png_uint_32) 73) << 24) | (((png_uint_32) 68) << 16)) | (((png_uint_32) 65) << 8)) | (((png_uint_32) 84) << 0)) != 0)\n  {\n    png_error(png_ptr, png_ptr->zstream.msg);\n  }\n  png_ptr->flags |= 0x0040U;\n}\n\n",
            "calle": [
                "helper_png_read_start_row_1",
                "memset",
                "png_error",
                "png_free",
                "png_inflate_claim",
                "png_init_read_transformations"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_start",
                        "type": "const png_byte [7]",
                        "definition": [
                            "static const png_byte png_pass_start[7] = {0, 4, 0, 2, 0, 1, 0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_inc",
                        "type": "const png_byte [7]",
                        "definition": [
                            "static const png_byte png_pass_inc[7] = {8, 8, 4, 4, 2, 2, 1}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_ystart",
                        "type": "const png_byte [7]",
                        "definition": [
                            "static const png_byte png_pass_ystart[7] = {0, 0, 4, 0, 2, 0, 1}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_yinc",
                        "type": "const png_byte [7]",
                        "definition": [
                            "static const png_byte png_pass_yinc[7] = {8, 8, 8, 4, 4, 2, 2}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_pixel_depth",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int max_pixel_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_bytes",
                        "type": "size_t",
                        "definition": [
                            "size_t row_bytes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep buffer = png_ptr->read_buffer"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_zlib_inflate",
            "header": "extern int png_zlib_inflate(png_structrp png_ptr, int flush)",
            "params": [
                "png_structrp png_ptr",
                "int flush"
            ],
            "definition": "int png_zlib_inflate(png_structrp png_ptr, int flush)\n{\n  if (png_ptr->zstream_start && (png_ptr->zstream.avail_in > 0))\n  {\n    if (((*png_ptr->zstream.next_in) >> 4) > 7)\n    {\n      png_ptr->zstream.msg = \"invalid window size (libpng)\";\n      return -3;\n    }\n    png_ptr->zstream_start = 0;\n  }\n  return inflate(&png_ptr->zstream, flush);\n}\n\n",
            "calle": [
                "inflate"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flush",
                        "type": "int",
                        "definition": [
                            "int flush"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_handle_IHDR",
            "header": "extern void png_handle_IHDR(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)",
            "params": [
                "png_structrp png_ptr",
                "png_inforp info_ptr",
                "png_uint_32 length"
            ],
            "definition": "void png_handle_IHDR(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)\n{\n  png_byte buf[13];\n  png_uint_32 width;\n  png_uint_32 height;\n  int bit_depth;\n  int color_type;\n  int compression_type;\n  int filter_type;\n  int interlace_type;\n  (void) 0;\n  if ((png_ptr->mode & 0x01) != 0)\n  {\n    png_chunk_error(png_ptr, \"out of place\");\n  }\n  if (length != 13)\n  {\n    png_chunk_error(png_ptr, \"invalid\");\n  }\n  png_ptr->mode |= 0x01;\n  png_crc_read(png_ptr, buf, 13);\n  png_crc_finish(png_ptr, 0);\n  width = png_get_uint_31(png_ptr, buf);\n  height = png_get_uint_31(png_ptr, buf + 4);\n  bit_depth = buf[8];\n  color_type = buf[9];\n  compression_type = buf[10];\n  filter_type = buf[11];\n  interlace_type = buf[12];\n  png_ptr->width = width;\n  png_ptr->height = height;\n  png_ptr->bit_depth = (png_byte) bit_depth;\n  png_ptr->interlaced = (png_byte) interlace_type;\n  png_ptr->color_type = (png_byte) color_type;\n  png_ptr->compression_type = (png_byte) compression_type;\n  switch (png_ptr->color_type)\n  {\n    default:\n\n    case 0:\n\n    case 2 | 1:\n    {\n      png_ptr->channels = 1;\n      break;\n    }\n\n    case 2:\n    {\n      png_ptr->channels = 3;\n      break;\n    }\n\n    case 4:\n    {\n      png_ptr->channels = 2;\n      break;\n    }\n\n    case 2 | 4:\n    {\n      png_ptr->channels = 4;\n      break;\n    }\n\n  }\n\n  png_ptr->pixel_depth = (png_byte) (png_ptr->bit_depth * png_ptr->channels);\n  png_ptr->rowbytes = (png_ptr->pixel_depth >= 8) ? (((size_t) png_ptr->width) * (((size_t) png_ptr->pixel_depth) >> 3)) : (((((size_t) png_ptr->width) * ((size_t) png_ptr->pixel_depth)) + 7) >> 3);\n  (void) 0;\n  (void) 0;\n  (void) 0;\n  png_set_IHDR(png_ptr, info_ptr, width, height, bit_depth, color_type, interlace_type, compression_type, filter_type);\n}\n\n",
            "calle": [
                "png_chunk_error",
                "png_crc_finish",
                "png_crc_read",
                "png_get_uint_31",
                "png_set_IHDR"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "png_byte [13]",
                        "definition": [
                            "png_byte buf[13]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bit_depth",
                        "type": "int",
                        "definition": [
                            "int bit_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color_type",
                        "type": "int",
                        "definition": [
                            "int color_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compression_type",
                        "type": "int",
                        "definition": [
                            "int compression_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filter_type",
                        "type": "int",
                        "definition": [
                            "int filter_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "interlace_type",
                        "type": "int",
                        "definition": [
                            "int interlace_type"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_handle_PLTE",
            "header": "extern void png_handle_PLTE(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)",
            "params": [
                "png_structrp png_ptr",
                "png_inforp info_ptr",
                "png_uint_32 length"
            ],
            "definition": "void png_handle_PLTE(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)\n{\n  png_color palette[256];\n  int max_palette_length;\n  int num;\n  int i;\n  png_colorp pal_ptr;\n  (void) 0;\n  if ((png_ptr->mode & 0x01) == 0)\n  {\n    png_chunk_error(png_ptr, \"missing IHDR\");\n  }\n  else\n    if ((png_ptr->mode & 0x02) != 0)\n  {\n    png_chunk_error(png_ptr, \"duplicate\");\n  }\n  else\n    if ((png_ptr->mode & 0x04U) != 0)\n  {\n    png_crc_finish(png_ptr, length);\n    png_chunk_benign_error(png_ptr, \"out of place\");\n    return;\n  }\n  png_ptr->mode |= 0x02;\n  if ((png_ptr->color_type & 2) == 0)\n  {\n    png_crc_finish(png_ptr, length);\n    png_chunk_benign_error(png_ptr, \"ignored in grayscale PNG\");\n    return;\n  }\n  if ((length > (3 * 256)) || (length % 3))\n  {\n    png_crc_finish(png_ptr, length);\n    if (png_ptr->color_type != (2 | 1))\n    {\n      png_chunk_benign_error(png_ptr, \"invalid\");\n    }\n    else\n      png_chunk_error(png_ptr, \"invalid\");\n    return;\n  }\n  num = ((int) length) / 3;\n  if (png_ptr->color_type == (2 | 1))\n  {\n    max_palette_length = 1 << png_ptr->bit_depth;\n  }\n  else\n    max_palette_length = 256;\n  if (num > max_palette_length)\n  {\n    num = max_palette_length;\n  }\n  for (i = 0, pal_ptr = palette; i < num; i += 1, pal_ptr += 1)\n  {\n    png_byte buf[3];\n    png_crc_read(png_ptr, buf, 3);\n    pal_ptr->red = buf[0];\n    pal_ptr->green = buf[1];\n    pal_ptr->blue = buf[2];\n  }\n\n  {\n    png_crc_finish(png_ptr, (png_uint_32) (length - (((unsigned int) num) * 3)));\n  }\n  png_set_PLTE(png_ptr, info_ptr, palette, num);\n  if ((png_ptr->num_trans > 0) || ((info_ptr != 0) && ((info_ptr->valid & 0x0010U) != 0)))\n  {\n    png_ptr->num_trans = 0;\n    if (info_ptr != 0)\n    {\n      info_ptr->num_trans = 0;\n    }\n    png_chunk_benign_error(png_ptr, \"tRNS must be after\");\n  }\n  if ((info_ptr != 0) && ((info_ptr->valid & 0x0040U) != 0))\n  {\n    png_chunk_benign_error(png_ptr, \"hIST must be after\");\n  }\n  if ((info_ptr != 0) && ((info_ptr->valid & 0x0020U) != 0))\n  {\n    png_chunk_benign_error(png_ptr, \"bKGD must be after\");\n  }\n}\n\n",
            "calle": [
                "png_chunk_benign_error",
                "png_chunk_error",
                "png_crc_finish",
                "png_crc_read",
                "png_set_PLTE"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "palette",
                        "type": "png_color [256]",
                        "definition": [
                            "png_color palette[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_palette_length",
                        "type": "int",
                        "definition": [
                            "int max_palette_length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num",
                        "type": "int",
                        "definition": [
                            "int num"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pal_ptr",
                        "type": "png_colorp",
                        "definition": [
                            "png_colorp pal_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "png_byte [3]",
                        "definition": [
                            "png_byte buf[3]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_handle_IEND",
            "header": "extern void png_handle_IEND(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)",
            "params": [
                "png_structrp png_ptr",
                "png_inforp info_ptr",
                "png_uint_32 length"
            ],
            "definition": "void png_handle_IEND(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)\n{\n  (void) 0;\n  if (((png_ptr->mode & 0x01) == 0) || ((png_ptr->mode & 0x04U) == 0))\n  {\n    png_chunk_error(png_ptr, \"out of place\");\n  }\n  png_ptr->mode |= 0x08 | 0x10U;\n  png_crc_finish(png_ptr, length);\n  if (length != 0)\n  {\n    png_chunk_benign_error(png_ptr, \"invalid\");\n  }\n  (void) info_ptr;\n}\n\n",
            "calle": [
                "png_chunk_benign_error",
                "png_chunk_error",
                "png_crc_finish"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 length"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_handle_bKGD",
            "header": "extern void png_handle_bKGD(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)",
            "params": [
                "png_structrp png_ptr",
                "png_inforp info_ptr",
                "png_uint_32 length"
            ],
            "definition": "void png_handle_bKGD(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)\n{\n  unsigned int truelen;\n  png_byte buf[6];\n  png_color_16 background;\n  (void) 0;\n  if ((png_ptr->mode & 0x01) == 0)\n  {\n    png_chunk_error(png_ptr, \"missing IHDR\");\n  }\n  else\n    if (((png_ptr->mode & 0x04U) != 0) || ((png_ptr->color_type == (2 | 1)) && ((png_ptr->mode & 0x02) == 0)))\n  {\n    png_crc_finish(png_ptr, length);\n    png_chunk_benign_error(png_ptr, \"out of place\");\n    return;\n  }\n  else\n    if ((info_ptr != 0) && ((info_ptr->valid & 0x0020U) != 0))\n  {\n    png_crc_finish(png_ptr, length);\n    png_chunk_benign_error(png_ptr, \"duplicate\");\n    return;\n  }\n  if (png_ptr->color_type == (2 | 1))\n  {\n    truelen = 1;\n  }\n  else\n    if ((png_ptr->color_type & 2) != 0)\n  {\n    truelen = 6;\n  }\n  else\n    truelen = 2;\n  if (length != truelen)\n  {\n    png_crc_finish(png_ptr, length);\n    png_chunk_benign_error(png_ptr, \"invalid\");\n    return;\n  }\n  png_crc_read(png_ptr, buf, truelen);\n  if (png_crc_finish(png_ptr, 0) != 0)\n  {\n    return;\n  }\n  if (png_ptr->color_type == (2 | 1))\n  {\n    background.index = buf[0];\n    if ((info_ptr != 0) && (info_ptr->num_palette != 0))\n    {\n      if (buf[0] >= info_ptr->num_palette)\n      {\n        png_chunk_benign_error(png_ptr, \"invalid index\");\n        return;\n      }\n      background.red = (png_uint_16) png_ptr->palette[buf[0]].red;\n      background.green = (png_uint_16) png_ptr->palette[buf[0]].green;\n      background.blue = (png_uint_16) png_ptr->palette[buf[0]].blue;\n    }\n    else\n      background.red = (background.green = (background.blue = 0));\n    background.gray = 0;\n  }\n  else\n    if ((png_ptr->color_type & 2) == 0)\n  {\n    if (png_ptr->bit_depth <= 8)\n    {\n      if ((buf[0] != 0) || (buf[1] >= ((unsigned int) (1 << png_ptr->bit_depth))))\n      {\n        png_chunk_benign_error(png_ptr, \"invalid gray level\");\n        return;\n      }\n    }\n    background.index = 0;\n    background.red = (background.green = (background.blue = (background.gray = (png_uint_16) ((((unsigned int) (*buf)) << 8) + ((unsigned int) (*(buf + 1)))))));\n  }\n  else\n  {\n    if (png_ptr->bit_depth <= 8)\n    {\n      if (((buf[0] != 0) || (buf[2] != 0)) || (buf[4] != 0))\n      {\n        png_chunk_benign_error(png_ptr, \"invalid color\");\n        return;\n      }\n    }\n    background.index = 0;\n    background.red = (png_uint_16) ((((unsigned int) (*buf)) << 8) + ((unsigned int) (*(buf + 1))));\n    background.green = (png_uint_16) ((((unsigned int) (*(buf + 2))) << 8) + ((unsigned int) (*((buf + 2) + 1))));\n    background.blue = (png_uint_16) ((((unsigned int) (*(buf + 4))) << 8) + ((unsigned int) (*((buf + 4) + 1))));\n    background.gray = 0;\n  }\n  png_set_bKGD(png_ptr, info_ptr, &background);\n}\n\n",
            "calle": [
                "png_chunk_benign_error",
                "png_chunk_error",
                "png_crc_finish",
                "png_crc_read",
                "png_set_bKGD"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "truelen",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int truelen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "png_byte [6]",
                        "definition": [
                            "png_byte buf[6]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "background",
                        "type": "png_color_16",
                        "definition": [
                            "png_color_16 background"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_handle_hIST",
            "header": "extern void png_handle_hIST(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)",
            "params": [
                "png_structrp png_ptr",
                "png_inforp info_ptr",
                "png_uint_32 length"
            ],
            "definition": "void png_handle_hIST(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)\n{\n  unsigned int num;\n  unsigned int i;\n  png_uint_16 readbuf[256];\n  (void) 0;\n  if ((png_ptr->mode & 0x01) == 0)\n  {\n    png_chunk_error(png_ptr, \"missing IHDR\");\n  }\n  else\n    if (((png_ptr->mode & 0x04U) != 0) || ((png_ptr->mode & 0x02) == 0))\n  {\n    png_crc_finish(png_ptr, length);\n    png_chunk_benign_error(png_ptr, \"out of place\");\n    return;\n  }\n  else\n    if ((info_ptr != 0) && ((info_ptr->valid & 0x0040U) != 0))\n  {\n    png_crc_finish(png_ptr, length);\n    png_chunk_benign_error(png_ptr, \"duplicate\");\n    return;\n  }\n  num = length / 2;\n  if (((length != (num * 2)) || (num != ((unsigned int) png_ptr->num_palette))) || (num > ((unsigned int) 256)))\n  {\n    png_crc_finish(png_ptr, length);\n    png_chunk_benign_error(png_ptr, \"invalid\");\n    return;\n  }\n  for (i = 0; i < num; i += 1)\n  {\n    png_byte buf[2];\n    png_crc_read(png_ptr, buf, 2);\n    readbuf[i] = (png_uint_16) ((((unsigned int) (*buf)) << 8) + ((unsigned int) (*(buf + 1))));\n  }\n\n  if (png_crc_finish(png_ptr, 0) != 0)\n  {\n    return;\n  }\n  png_set_hIST(png_ptr, info_ptr, readbuf);\n}\n\n",
            "calle": [
                "png_chunk_benign_error",
                "png_chunk_error",
                "png_crc_finish",
                "png_crc_read",
                "png_set_hIST"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int num"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "readbuf",
                        "type": "png_uint_16 [256]",
                        "definition": [
                            "png_uint_16 readbuf[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "png_byte [2]",
                        "definition": [
                            "png_byte buf[2]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_handle_sBIT",
            "header": "extern void png_handle_sBIT(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)",
            "params": [
                "png_structrp png_ptr",
                "png_inforp info_ptr",
                "png_uint_32 length"
            ],
            "definition": "void png_handle_sBIT(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)\n{\n  unsigned int truelen;\n  unsigned int i;\n  png_byte sample_depth;\n  png_byte buf[4];\n  (void) 0;\n  if ((png_ptr->mode & 0x01) == 0)\n  {\n    png_chunk_error(png_ptr, \"missing IHDR\");\n  }\n  else\n    if ((png_ptr->mode & (0x04U | 0x02)) != 0)\n  {\n    png_crc_finish(png_ptr, length);\n    png_chunk_benign_error(png_ptr, \"out of place\");\n    return;\n  }\n  if ((info_ptr != 0) && ((info_ptr->valid & 0x0002U) != 0))\n  {\n    png_crc_finish(png_ptr, length);\n    png_chunk_benign_error(png_ptr, \"duplicate\");\n    return;\n  }\n  if (png_ptr->color_type == (2 | 1))\n  {\n    truelen = 3;\n    sample_depth = 8;\n  }\n  else\n  {\n    truelen = png_ptr->channels;\n    sample_depth = png_ptr->bit_depth;\n  }\n  if ((length != truelen) || (length > 4))\n  {\n    png_chunk_benign_error(png_ptr, \"invalid\");\n    png_crc_finish(png_ptr, length);\n    return;\n  }\n  buf[0] = (buf[1] = (buf[2] = (buf[3] = sample_depth)));\n  png_crc_read(png_ptr, buf, truelen);\n  if (png_crc_finish(png_ptr, 0) != 0)\n  {\n    return;\n  }\n  for (i = 0; i < truelen; i += 1)\n  {\n    if ((buf[i] == 0) || (buf[i] > sample_depth))\n    {\n      png_chunk_benign_error(png_ptr, \"invalid\");\n      return;\n    }\n  }\n\n  if ((png_ptr->color_type & 2) != 0)\n  {\n    png_ptr->sig_bit.red = buf[0];\n    png_ptr->sig_bit.green = buf[1];\n    png_ptr->sig_bit.blue = buf[2];\n    png_ptr->sig_bit.alpha = buf[3];\n  }\n  else\n  {\n    png_ptr->sig_bit.gray = buf[0];\n    png_ptr->sig_bit.red = buf[0];\n    png_ptr->sig_bit.green = buf[0];\n    png_ptr->sig_bit.blue = buf[0];\n    png_ptr->sig_bit.alpha = buf[1];\n  }\n  png_set_sBIT(png_ptr, info_ptr, &png_ptr->sig_bit);\n}\n\n",
            "calle": [
                "png_chunk_benign_error",
                "png_chunk_error",
                "png_crc_finish",
                "png_crc_read",
                "png_set_sBIT"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "truelen",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int truelen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_depth",
                        "type": "png_byte",
                        "definition": [
                            "png_byte sample_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "png_byte [4]",
                        "definition": [
                            "png_byte buf[4]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_handle_tRNS",
            "header": "extern void png_handle_tRNS(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)",
            "params": [
                "png_structrp png_ptr",
                "png_inforp info_ptr",
                "png_uint_32 length"
            ],
            "definition": "void png_handle_tRNS(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length)\n{\n  png_byte readbuf[256];\n  (void) 0;\n  if ((png_ptr->mode & 0x01) == 0)\n  {\n    png_chunk_error(png_ptr, \"missing IHDR\");\n  }\n  else\n    if ((png_ptr->mode & 0x04U) != 0)\n  {\n    png_crc_finish(png_ptr, length);\n    png_chunk_benign_error(png_ptr, \"out of place\");\n    return;\n  }\n  else\n    if ((info_ptr != 0) && ((info_ptr->valid & 0x0010U) != 0))\n  {\n    png_crc_finish(png_ptr, length);\n    png_chunk_benign_error(png_ptr, \"duplicate\");\n    return;\n  }\n  if (png_ptr->color_type == 0)\n  {\n    png_byte buf[2];\n    if (length != 2)\n    {\n      png_crc_finish(png_ptr, length);\n      png_chunk_benign_error(png_ptr, \"invalid\");\n      return;\n    }\n    png_crc_read(png_ptr, buf, 2);\n    png_ptr->num_trans = 1;\n    png_ptr->trans_color.gray = (png_uint_16) ((((unsigned int) (*buf)) << 8) + ((unsigned int) (*(buf + 1))));\n  }\n  else\n    if (png_ptr->color_type == 2)\n  {\n    png_byte buf[6];\n    if (length != 6)\n    {\n      png_crc_finish(png_ptr, length);\n      png_chunk_benign_error(png_ptr, \"invalid\");\n      return;\n    }\n    png_crc_read(png_ptr, buf, length);\n    png_ptr->num_trans = 1;\n    png_ptr->trans_color.red = (png_uint_16) ((((unsigned int) (*buf)) << 8) + ((unsigned int) (*(buf + 1))));\n    png_ptr->trans_color.green = (png_uint_16) ((((unsigned int) (*(buf + 2))) << 8) + ((unsigned int) (*((buf + 2) + 1))));\n    png_ptr->trans_color.blue = (png_uint_16) ((((unsigned int) (*(buf + 4))) << 8) + ((unsigned int) (*((buf + 4) + 1))));\n  }\n  else\n    if (png_ptr->color_type == (2 | 1))\n  {\n    if ((png_ptr->mode & 0x02) == 0)\n    {\n      png_crc_finish(png_ptr, length);\n      png_chunk_benign_error(png_ptr, \"out of place\");\n      return;\n    }\n    if (((length > ((unsigned int) png_ptr->num_palette)) || (length > ((unsigned int) 256))) || (length == 0))\n    {\n      png_crc_finish(png_ptr, length);\n      png_chunk_benign_error(png_ptr, \"invalid\");\n      return;\n    }\n    png_crc_read(png_ptr, readbuf, length);\n    png_ptr->num_trans = (png_uint_16) length;\n  }\n  else\n  {\n    png_crc_finish(png_ptr, length);\n    png_chunk_benign_error(png_ptr, \"invalid with alpha channel\");\n    return;\n  }\n  if (png_crc_finish(png_ptr, 0) != 0)\n  {\n    png_ptr->num_trans = 0;\n    return;\n  }\n  png_set_tRNS(png_ptr, info_ptr, readbuf, png_ptr->num_trans, &png_ptr->trans_color);\n}\n\n",
            "calle": [
                "png_chunk_benign_error",
                "png_chunk_error",
                "png_crc_finish",
                "png_crc_read",
                "png_set_tRNS"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "readbuf",
                        "type": "png_byte [256]",
                        "definition": [
                            "png_byte readbuf[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "png_byte [2]",
                        "definition": [
                            "png_byte buf[2]",
                            "png_byte buf[6]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_check_chunk_name",
            "header": "extern void png_check_chunk_name(png_const_structrp png_ptr, png_uint_32 chunk_name)",
            "params": [
                "png_const_structrp png_ptr",
                "png_uint_32 chunk_name"
            ],
            "definition": "void png_check_chunk_name(png_const_structrp png_ptr, png_uint_32 chunk_name)\n{\n  int i;\n  png_uint_32 cn = chunk_name;\n  (void) 0;\n  for (i = 1; i <= 4; i += 1)\n  {\n    int c = cn & 0xff;\n    if (((c < 65) || (c > 122)) || ((c > 90) && (c < 97)))\n    {\n      png_chunk_error(png_ptr, \"invalid chunk type\");\n    }\n    cn >>= 8;\n  }\n\n}\n\n",
            "calle": [
                "png_chunk_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chunk_name",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 chunk_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cn",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 cn = chunk_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c = cn & 0xff"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_check_chunk_length",
            "header": "extern void png_check_chunk_length(png_const_structrp png_ptr, png_uint_32 chunk_length)",
            "params": [
                "png_const_structrp png_ptr",
                "png_uint_32 length"
            ],
            "definition": "void png_check_chunk_length(png_const_structrp png_ptr, png_uint_32 length)\n{\n  png_alloc_size_t limit = (png_uint_32) 0x7fffffffL;\n  if ((png_ptr->user_chunk_malloc_max > 0) && (png_ptr->user_chunk_malloc_max < limit))\n  {\n    limit = png_ptr->user_chunk_malloc_max;\n  }\n  if (png_ptr->chunk_name == ((((((png_uint_32) 73) << 24) | (((png_uint_32) 68) << 16)) | (((png_uint_32) 65) << 8)) | (((png_uint_32) 84) << 0)))\n  {\n    png_alloc_size_t idat_limit = (png_uint_32) 0x7fffffffL;\n    size_t row_factor = (((((size_t) png_ptr->width) * ((size_t) png_ptr->channels)) * ((png_ptr->bit_depth > 8) ? (2) : (1))) + 1) + ((png_ptr->interlaced) ? (6) : (0));\n    if (png_ptr->height > (((png_uint_32) (-1)) / row_factor))\n    {\n      idat_limit = (png_uint_32) 0x7fffffffL;\n    }\n    else\n      idat_limit = png_ptr->height * row_factor;\n    row_factor = (row_factor > 32566) ? (32566) : (row_factor);\n    idat_limit += 6 + (5 * ((idat_limit / row_factor) + 1));\n    idat_limit = (idat_limit < ((png_uint_32) 0x7fffffffL)) ? (idat_limit) : ((png_uint_32) 0x7fffffffL);\n    limit = (limit < idat_limit) ? (idat_limit) : (limit);\n  }\n  if (length > limit)\n  {\n    (void) 0;\n    png_benign_error(png_ptr, \"chunk data is too large\");\n  }\n}\n\n",
            "calle": [
                "png_benign_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "limit",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t limit = (png_uint_32) 0x7fffffffL"
                        ]
                    },
                    {
                        "path": null,
                        "name": "idat_limit",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t idat_limit = (png_uint_32) 0x7fffffffL"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_factor",
                        "type": "size_t",
                        "definition": [
                            "size_t row_factor = (((((size_t) png_ptr->width) * ((size_t) png_ptr->channels)) * ((png_ptr->bit_depth > 8) ? (2) : (1))) + 1) + ((png_ptr->interlaced) ? (6) : (0))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_handle_unknown",
            "header": "extern void png_handle_unknown(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length, int keep)",
            "params": [
                "png_structrp png_ptr",
                "png_inforp info_ptr",
                "png_uint_32 length",
                "int keep"
            ],
            "definition": "void png_handle_unknown(png_structrp png_ptr, png_inforp info_ptr, png_uint_32 length, int keep)\n{\n  int handled = 0;\n  (void) 0;\n  {\n    if (keep == 0)\n    {\n      keep = png_ptr->unknown_default;\n    }\n    if ((keep == 3) || ((keep == 2) && (1 & (png_ptr->chunk_name >> 29))))\n    {\n      if (png_cache_unknown_chunk(png_ptr, length) == 0)\n      {\n        keep = 1;\n      }\n    }\n    else\n      png_crc_finish(png_ptr, length);\n  }\n  if ((keep == 3) || ((keep == 2) && (1 & (png_ptr->chunk_name >> 29))))\n  {\n    switch (png_ptr->user_chunk_cache_max)\n    {\n      case 2:\n      {\n        png_ptr->user_chunk_cache_max = 1;\n        png_chunk_benign_error(png_ptr, \"no space in chunk cache\");\n      }\n\n      case 1:\n      {\n        break;\n      }\n\n      default:\n      {\n        png_ptr->user_chunk_cache_max -= 1;\n      }\n\n      case 0:\n      {\n        png_set_unknown_chunks(png_ptr, info_ptr, &png_ptr->unknown_chunk, 1);\n        handled = 1;\n        break;\n      }\n\n    }\n\n  }\n  if (png_ptr->unknown_chunk.data != 0)\n  {\n    png_free(png_ptr, png_ptr->unknown_chunk.data);\n  }\n  png_ptr->unknown_chunk.data = 0;\n  if ((handled == 0) && (!(1 & (png_ptr->chunk_name >> 29))))\n  {\n    png_chunk_error(png_ptr, \"unhandled critical chunk\");\n  }\n}\n\n",
            "calle": [
                "png_cache_unknown_chunk",
                "png_chunk_benign_error",
                "png_chunk_error",
                "png_crc_finish",
                "png_free",
                "png_set_unknown_chunks"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "keep",
                        "type": "int",
                        "definition": [
                            "int keep"
                        ]
                    },
                    {
                        "path": null,
                        "name": "handled",
                        "type": "int",
                        "definition": [
                            "int handled = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_read_buffer",
            "header": "",
            "params": [
                "png_structrp png_ptr",
                "png_alloc_size_t new_size",
                "int warn"
            ],
            "definition": "static png_bytep png_read_buffer(png_structrp png_ptr, png_alloc_size_t new_size, int warn)\n{\n  png_bytep buffer = png_ptr->read_buffer;\n  if ((buffer != 0) && (new_size > png_ptr->read_buffer_size))\n  {\n    png_ptr->read_buffer = 0;\n    png_ptr->read_buffer_size = 0;\n    png_free(png_ptr, buffer);\n    buffer = 0;\n  }\n  if (buffer == 0)\n  {\n    buffer = png_malloc_base(png_ptr, new_size);\n    if (buffer != 0)\n    {\n      memset(buffer, 0, new_size);\n      png_ptr->read_buffer = buffer;\n      png_ptr->read_buffer_size = new_size;\n    }\n    else\n      if (warn < 2)\n    {\n      if (warn != 0)\n      {\n        png_chunk_warning(png_ptr, \"insufficient memory to read chunk\");\n      }\n      else\n        png_chunk_error(png_ptr, \"insufficient memory to read chunk\");\n    }\n  }\n  return buffer;\n}\n\n",
            "calle": [
                "memset",
                "png_chunk_error",
                "png_chunk_warning",
                "png_free",
                "png_malloc_base"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_size",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t new_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "warn",
                        "type": "int",
                        "definition": [
                            "int warn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep buffer = png_ptr->read_buffer"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_inflate_claim",
            "header": "",
            "params": [
                "png_structrp png_ptr",
                "png_uint_32 owner"
            ],
            "definition": "static int png_inflate_claim(png_structrp png_ptr, png_uint_32 owner)\n{\n  if (png_ptr->zowner != 0)\n  {\n    char msg[64];\n    (void) ((((char *) msg)[0] = (char) ((png_ptr->zowner >> 24) & 0xff), ((char *) msg)[1] = (char) ((png_ptr->zowner >> 16) & 0xff), ((char *) msg)[2] = (char) ((png_ptr->zowner >> 8) & 0xff), ((char *) msg)[3] = (char) (png_ptr->zowner & 0xff)));\n    (void) png_safecat(msg, sizeof(msg), 4, \" using zstream\");\n    png_chunk_warning(png_ptr, msg);\n    png_ptr->zowner = 0;\n  }\n  {\n    int ret;\n    int window_bits = 0;\n    png_ptr->zstream.next_in = 0;\n    png_ptr->zstream.avail_in = 0;\n    png_ptr->zstream.next_out = 0;\n    png_ptr->zstream.avail_out = 0;\n    if ((png_ptr->flags & 0x0002U) != 0)\n    {\n      ret = inflateReset2(&png_ptr->zstream, window_bits);\n    }\n    else\n    {\n      ret = inflateInit2_(&png_ptr->zstream, window_bits, \"1.3-optipng\", (int) (sizeof(z_stream)));\n      if (ret == 0)\n      {\n        png_ptr->flags |= 0x0002U;\n      }\n    }\n    if (ret == 0)\n    {\n      png_ptr->zowner = owner;\n    }\n    else\n      png_zstream_error(png_ptr, ret);\n    return ret;\n  }\n}\n\n",
            "calle": [
                "inflateInit2_",
                "inflateReset2",
                "png_chunk_warning",
                "png_safecat",
                "png_zstream_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "owner",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 owner"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg",
                        "type": "char [64]",
                        "definition": [
                            "char msg[64]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret"
                        ]
                    },
                    {
                        "path": null,
                        "name": "window_bits",
                        "type": "int",
                        "definition": [
                            "int window_bits = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_cache_unknown_chunk",
            "header": "",
            "params": [
                "png_structrp png_ptr",
                "png_uint_32 length"
            ],
            "definition": "static int png_cache_unknown_chunk(png_structrp png_ptr, png_uint_32 length)\n{\n  png_alloc_size_t limit = (size_t) (-1);\n  if (png_ptr->unknown_chunk.data != 0)\n  {\n    png_free(png_ptr, png_ptr->unknown_chunk.data);\n    png_ptr->unknown_chunk.data = 0;\n  }\n  if ((png_ptr->user_chunk_malloc_max > 0) && (png_ptr->user_chunk_malloc_max < limit))\n  {\n    limit = png_ptr->user_chunk_malloc_max;\n  }\n  if (length <= limit)\n  {\n    (void) (((void) ((((char *) png_ptr->unknown_chunk.name)[0] = (char) ((png_ptr->chunk_name >> 24) & 0xff), ((char *) png_ptr->unknown_chunk.name)[1] = (char) ((png_ptr->chunk_name >> 16) & 0xff), ((char *) png_ptr->unknown_chunk.name)[2] = (char) ((png_ptr->chunk_name >> 8) & 0xff), ((char *) png_ptr->unknown_chunk.name)[3] = (char) (png_ptr->chunk_name & 0xff))), ((char *) png_ptr->unknown_chunk.name)[4] = 0));\n    png_ptr->unknown_chunk.size = (size_t) length;\n    png_ptr->unknown_chunk.location = (png_byte) png_ptr->mode;\n    if (length == 0)\n    {\n      png_ptr->unknown_chunk.data = 0;\n    }\n    else\n    {\n      png_ptr->unknown_chunk.data = png_malloc_warn(png_ptr, length);\n    }\n  }\n  if ((png_ptr->unknown_chunk.data == 0) && (length > 0))\n  {\n    png_crc_finish(png_ptr, length);\n    png_chunk_benign_error(png_ptr, \"unknown chunk exceeds memory limits\");\n    return 0;\n  }\n  else\n  {\n    if (length > 0)\n    {\n      png_crc_read(png_ptr, png_ptr->unknown_chunk.data, length);\n    }\n    png_crc_finish(png_ptr, 0);\n    return 1;\n  }\n}\n\n",
            "calle": [
                "png_chunk_benign_error",
                "png_crc_finish",
                "png_crc_read",
                "png_free",
                "png_malloc_warn"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "limit",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t limit = (size_t) (-1)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_read_filter_row_sub",
            "header": "",
            "params": [
                "png_row_infop row_info",
                "png_bytep row",
                "png_const_bytep prev_row"
            ],
            "definition": "static void png_read_filter_row_sub(png_row_infop row_info, png_bytep row, png_const_bytep prev_row)\n{\n  size_t i;\n  size_t istop = row_info->rowbytes;\n  unsigned int bpp = (row_info->pixel_depth + 7) >> 3;\n  png_bytep rp = row + bpp;\n  (void) prev_row;\n  for (i = bpp; i < istop; i += 1)\n  {\n    *rp = (png_byte) ((((int) (*rp)) + ((int) (*(rp - bpp)))) & 0xff);\n    rp += 1;\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "row_info",
                        "type": "png_row_infop",
                        "definition": [
                            "png_row_infop row_info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_row",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep prev_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "istop",
                        "type": "size_t",
                        "definition": [
                            "size_t istop = row_info->rowbytes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bpp",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bpp = (row_info->pixel_depth + 7) >> 3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep rp = row + bpp"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_read_filter_row_up",
            "header": "",
            "params": [
                "png_row_infop row_info",
                "png_bytep row",
                "png_const_bytep prev_row"
            ],
            "definition": "static void png_read_filter_row_up(png_row_infop row_info, png_bytep row, png_const_bytep prev_row)\n{\n  size_t i;\n  size_t istop = row_info->rowbytes;\n  png_bytep rp = row;\n  png_const_bytep pp = prev_row;\n  for (i = 0; i < istop; i += 1)\n  {\n    *rp = (png_byte) ((((int) (*rp)) + ((int) (*pp))) & 0xff);\n    pp += 1;\n    rp += 1;\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "row_info",
                        "type": "png_row_infop",
                        "definition": [
                            "png_row_infop row_info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_row",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep prev_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "istop",
                        "type": "size_t",
                        "definition": [
                            "size_t istop = row_info->rowbytes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep rp = row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pp",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep pp = prev_row"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_read_filter_row_avg",
            "header": "",
            "params": [
                "png_row_infop row_info",
                "png_bytep row",
                "png_const_bytep prev_row"
            ],
            "definition": "static void png_read_filter_row_avg(png_row_infop row_info, png_bytep row, png_const_bytep prev_row)\n{\n  size_t i;\n  png_bytep rp = row;\n  png_const_bytep pp = prev_row;\n  unsigned int bpp = (row_info->pixel_depth + 7) >> 3;\n  size_t istop = row_info->rowbytes - bpp;\n  for (i = 0; i < bpp; i += 1)\n  {\n    *rp = (png_byte) ((((int) (*rp)) + (((int) (*pp)) / 2)) & 0xff);\n    pp += 1;\n    rp += 1;\n  }\n\n  for (i = 0; i < istop; i += 1)\n  {\n    *rp = (png_byte) ((((int) (*rp)) + (((int) ((*pp) + (*(rp - bpp)))) / 2)) & 0xff);\n    pp += 1;\n    rp += 1;\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "row_info",
                        "type": "png_row_infop",
                        "definition": [
                            "png_row_infop row_info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_row",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep prev_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep rp = row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pp",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep pp = prev_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bpp",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bpp = (row_info->pixel_depth + 7) >> 3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "istop",
                        "type": "size_t",
                        "definition": [
                            "size_t istop = row_info->rowbytes - bpp"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_read_filter_row_paeth_1byte_pixel",
            "header": "",
            "params": [
                "png_row_infop row_info",
                "png_bytep row",
                "png_const_bytep prev_row"
            ],
            "definition": "static void png_read_filter_row_paeth_1byte_pixel(png_row_infop row_info, png_bytep row, png_const_bytep prev_row)\n{\n  png_bytep rp_end = row + row_info->rowbytes;\n  int a;\n  int c;\n  c = *prev_row;\n  prev_row += 1;\n  a = (*row) + c;\n  *row = (png_byte) a;\n  row += 1;\n  while (row < rp_end)\n  {\n    helper_png_read_filter_row_paeth_1byte_pixel_1(&row, &prev_row, &a, &c);\n  }\n\n}\n\n",
            "calle": [
                "helper_png_read_filter_row_paeth_1byte_pixel_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "row_info",
                        "type": "png_row_infop",
                        "definition": [
                            "png_row_infop row_info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_row",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep prev_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rp_end",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep rp_end = row + row_info->rowbytes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "int",
                        "definition": [
                            "int a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_read_filter_row_paeth_multibyte_pixel",
            "header": "",
            "params": [
                "png_row_infop row_info",
                "png_bytep row",
                "png_const_bytep prev_row"
            ],
            "definition": "static void png_read_filter_row_paeth_multibyte_pixel(png_row_infop row_info, png_bytep row, png_const_bytep prev_row)\n{\n  unsigned int bpp = (row_info->pixel_depth + 7) >> 3;\n  png_bytep rp_end = row + bpp;\n  while (row < rp_end)\n  {\n    int a = (*row) + (*prev_row);\n    prev_row += 1;\n    *row = (png_byte) a;\n    row += 1;\n  }\n\n  rp_end = rp_end + (row_info->rowbytes - bpp);\n  while (row < rp_end)\n  {\n    helper_png_read_filter_row_paeth_multibyte_pixel_1(&row, &prev_row, bpp);\n  }\n\n}\n\n",
            "calle": [
                "helper_png_read_filter_row_paeth_multibyte_pixel_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "row_info",
                        "type": "png_row_infop",
                        "definition": [
                            "png_row_infop row_info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_row",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep prev_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bpp",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bpp = (row_info->pixel_depth + 7) >> 3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rp_end",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep rp_end = row + bpp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "int",
                        "definition": [
                            "int a = (*row) + (*prev_row)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_init_filter_functions",
            "header": "",
            "params": [
                "png_structrp pp"
            ],
            "definition": "static void png_init_filter_functions(png_structrp pp)\n{\n  unsigned int bpp = (pp->pixel_depth + 7) >> 3;\n  pp->read_filter[1 - 1] = png_read_filter_row_sub;\n  pp->read_filter[2 - 1] = png_read_filter_row_up;\n  pp->read_filter[3 - 1] = png_read_filter_row_avg;\n  if (bpp == 1)\n  {\n    pp->read_filter[4 - 1] = png_read_filter_row_paeth_1byte_pixel;\n  }\n  else\n    pp->read_filter[4 - 1] = png_read_filter_row_paeth_multibyte_pixel;\n}\n\n",
            "calle": [
                "png_read_filter_row_avg",
                "png_read_filter_row_paeth_1byte_pixel",
                "png_read_filter_row_paeth_multibyte_pixel",
                "png_read_filter_row_sub",
                "png_read_filter_row_up"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pp",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp pp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bpp",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bpp = (pp->pixel_depth + 7) >> 3"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_png_combine_row_1",
            "header": "",
            "params": [
                "png_bytep * const dp_ref",
                "unsigned int * const pixel_depth_ref",
                "png_const_bytep * const sp_ref",
                "png_alloc_size_t * const row_width_ref",
                "png_const_structrp png_ptr",
                "int display",
                "unsigned int pass"
            ],
            "definition": "void helper_png_combine_row_1(png_bytep * const dp_ref, unsigned int * const pixel_depth_ref, png_const_bytep * const sp_ref, png_alloc_size_t * const row_width_ref, png_const_structrp png_ptr, int display, unsigned int pass)\n{\n  png_bytep dp = *dp_ref;\n  unsigned int pixel_depth = *pixel_depth_ref;\n  png_const_bytep sp = *sp_ref;\n  png_alloc_size_t row_width = *row_width_ref;\n  if (row_width <= (((1 & pass) << (3 - ((pass + 1) >> 1))) & 7))\n  {\n    return;\n  }\n  if (pixel_depth < 8)\n  {\n    helper_helper_png_combine_row_1_1(&dp, &sp, &row_width, display, pass, pixel_depth);\n  }\n  else\n  {\n    helper_helper_png_combine_row_1_2(&dp, &pixel_depth, &sp, &row_width, png_ptr, display, pass);\n  }\n  *dp_ref = dp;\n  *pixel_depth_ref = pixel_depth;\n  *sp_ref = sp;\n  *row_width_ref = row_width;\n}\n\n",
            "calle": [
                "helper_helper_png_combine_row_1_1",
                "helper_helper_png_combine_row_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dp_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const dp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pixel_depth_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const pixel_depth_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp_ref",
                        "type": "png_const_bytep * const",
                        "definition": [
                            "png_const_bytep * const sp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_width_ref",
                        "type": "png_alloc_size_t * const",
                        "definition": [
                            "png_alloc_size_t * const row_width_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "display",
                        "type": "int",
                        "definition": [
                            "int display"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pass",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dp = *dp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pixel_depth",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pixel_depth = *pixel_depth_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep sp = *sp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_width",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t row_width = *row_width_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_png_do_read_interlace_1",
            "header": "",
            "params": [
                "png_row_infop * const row_info_ref",
                "png_bytep row",
                "int pass",
                "static const unsigned int png_pass_inc[7]"
            ],
            "definition": "void helper_png_do_read_interlace_1(png_row_infop * const row_info_ref, png_bytep row, int pass, static const unsigned int png_pass_inc[7])\n{\n  png_row_infop row_info = *row_info_ref;\n  png_uint_32 final_width;\n  final_width = row_info->width * png_pass_inc[pass];\n  switch (row_info->pixel_depth)\n  {\n    case 1:\n    {\n      helper_helper_png_do_read_interlace_1_3(row, pass, png_pass_inc, row_info, final_width);\n    }\n\n    case 2:\n    {\n      helper_helper_png_do_read_interlace_1_4(row, pass, png_pass_inc, row_info, final_width);\n    }\n\n    case 4:\n    {\n      helper_helper_png_do_read_interlace_1_2(row, pass, png_pass_inc, row_info, final_width);\n    }\n\n    default:\n    {\n      helper_helper_png_do_read_interlace_1_1(row, pass, png_pass_inc, row_info, final_width);\n    }\n\n  }\n\n  row_info->width = final_width;\n  row_info->rowbytes = (row_info->pixel_depth >= 8) ? (((size_t) final_width) * (((size_t) row_info->pixel_depth) >> 3)) : (((((size_t) final_width) * ((size_t) row_info->pixel_depth)) + 7) >> 3);\n  *row_info_ref = row_info;\n}\n\n",
            "calle": [
                "helper_helper_png_do_read_interlace_1_1",
                "helper_helper_png_do_read_interlace_1_2",
                "helper_helper_png_do_read_interlace_1_3",
                "helper_helper_png_do_read_interlace_1_4"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "row_info_ref",
                        "type": "png_row_infop * const",
                        "definition": [
                            "png_row_infop * const row_info_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pass",
                        "type": "int",
                        "definition": [
                            "int pass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_inc",
                        "type": "const unsigned int [7]",
                        "definition": [
                            "static const unsigned int png_pass_inc[7]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_info",
                        "type": "png_row_infop",
                        "definition": [
                            "png_row_infop row_info = *row_info_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "final_width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 final_width"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_png_read_filter_row_paeth_1byte_pixel_1",
            "header": "",
            "params": [
                "png_bytep * const row_ref",
                "png_const_bytep * const prev_row_ref",
                "int * const a_ref",
                "int * const c_ref"
            ],
            "definition": "void helper_png_read_filter_row_paeth_1byte_pixel_1(png_bytep * const row_ref, png_const_bytep * const prev_row_ref, int * const a_ref, int * const c_ref)\n{\n  png_bytep row = *row_ref;\n  png_const_bytep prev_row = *prev_row_ref;\n  int a = *a_ref;\n  int c = *c_ref;\n  int b;\n  int pa;\n  int pb;\n  int pc;\n  int p;\n  a &= 0xff;\n  b = *prev_row;\n  prev_row += 1;\n  p = b - c;\n  pc = a - c;\n  pa = (p < 0) ? (-p) : (p);\n  pb = (pc < 0) ? (-pc) : (pc);\n  pc = ((p + pc) < 0) ? (-(p + pc)) : (p + pc);\n  if (pb < pa)\n  {\n    pa = pb;\n    a = b;\n  }\n  if (pc < pa)\n  {\n    a = c;\n  }\n  c = b;\n  a += *row;\n  *row = (png_byte) a;\n  row += 1;\n  *row_ref = row;\n  *prev_row_ref = prev_row;\n  *a_ref = a;\n  *c_ref = c;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "row_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const row_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_row_ref",
                        "type": "png_const_bytep * const",
                        "definition": [
                            "png_const_bytep * const prev_row_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep row = *row_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_row",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep prev_row = *prev_row_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "int",
                        "definition": [
                            "int a = *a_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c = *c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "int",
                        "definition": [
                            "int b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pa",
                        "type": "int",
                        "definition": [
                            "int pa"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pb",
                        "type": "int",
                        "definition": [
                            "int pb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pc",
                        "type": "int",
                        "definition": [
                            "int pc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "int",
                        "definition": [
                            "int p"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_png_read_filter_row_paeth_multibyte_pixel_1",
            "header": "",
            "params": [
                "png_bytep * const row_ref",
                "png_const_bytep * const prev_row_ref",
                "unsigned int bpp"
            ],
            "definition": "void helper_png_read_filter_row_paeth_multibyte_pixel_1(png_bytep * const row_ref, png_const_bytep * const prev_row_ref, unsigned int bpp)\n{\n  png_bytep row = *row_ref;\n  png_const_bytep prev_row = *prev_row_ref;\n  int a;\n  int b;\n  int c;\n  int pa;\n  int pb;\n  int pc;\n  int p;\n  c = *(prev_row - bpp);\n  a = *(row - bpp);\n  b = *prev_row;\n  prev_row += 1;\n  p = b - c;\n  pc = a - c;\n  pa = (p < 0) ? (-p) : (p);\n  pb = (pc < 0) ? (-pc) : (pc);\n  pc = ((p + pc) < 0) ? (-(p + pc)) : (p + pc);\n  if (pb < pa)\n  {\n    pa = pb;\n    a = b;\n  }\n  if (pc < pa)\n  {\n    a = c;\n  }\n  a += *row;\n  *row = (png_byte) a;\n  row += 1;\n  *row_ref = row;\n  *prev_row_ref = prev_row;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "row_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const row_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_row_ref",
                        "type": "png_const_bytep * const",
                        "definition": [
                            "png_const_bytep * const prev_row_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bpp",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bpp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep row = *row_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_row",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep prev_row = *prev_row_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "int",
                        "definition": [
                            "int a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "int",
                        "definition": [
                            "int b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pa",
                        "type": "int",
                        "definition": [
                            "int pa"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pb",
                        "type": "int",
                        "definition": [
                            "int pb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pc",
                        "type": "int",
                        "definition": [
                            "int pc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "int",
                        "definition": [
                            "int p"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_png_read_IDAT_data_1",
            "header": "",
            "params": [
                "png_structrp * const png_ptr_ref",
                "png_alloc_size_t * const avail_out_ref",
                "png_bytep output"
            ],
            "definition": "void helper_png_read_IDAT_data_1(png_structrp * const png_ptr_ref, png_alloc_size_t * const avail_out_ref, png_bytep output)\n{\n  png_structrp png_ptr = *png_ptr_ref;\n  png_alloc_size_t avail_out = *avail_out_ref;\n  int ret;\n  png_byte tmpbuf[1024];\n  if (png_ptr->zstream.avail_in == 0)\n  {\n    helper_helper_png_read_IDAT_data_1_1(&png_ptr);\n  }\n  if (output != 0)\n  {\n    uInt out = (uInt) (-1);\n    if (out > avail_out)\n    {\n      out = (uInt) avail_out;\n    }\n    avail_out -= out;\n    png_ptr->zstream.avail_out = out;\n  }\n  else\n  {\n    png_ptr->zstream.next_out = tmpbuf;\n    png_ptr->zstream.avail_out = sizeof(tmpbuf);\n  }\n  ret = png_zlib_inflate(png_ptr, 0);\n  if (output != 0)\n  {\n    avail_out += png_ptr->zstream.avail_out;\n  }\n  else\n    avail_out += (sizeof(tmpbuf)) - png_ptr->zstream.avail_out;\n  png_ptr->zstream.avail_out = 0;\n  if (ret == 1)\n  {\n    png_ptr->zstream.next_out = 0;\n    png_ptr->mode |= 0x08;\n    png_ptr->flags |= 0x0008U;\n    if ((png_ptr->zstream.avail_in > 0) || (png_ptr->idat_size > 0))\n    {\n      png_chunk_benign_error(png_ptr, \"Extra compressed data\");\n    }\n    break;\n  }\n  if (ret != 0)\n  {\n    png_zstream_error(png_ptr, ret);\n    if (output != 0)\n    {\n      png_chunk_error(png_ptr, png_ptr->zstream.msg);\n    }\n    else\n    {\n      png_chunk_benign_error(png_ptr, png_ptr->zstream.msg);\n      return;\n    }\n  }\n  *png_ptr_ref = png_ptr;\n  *avail_out_ref = avail_out;\n}\n\n",
            "calle": [
                "helper_helper_png_read_IDAT_data_1_1",
                "png_chunk_benign_error",
                "png_chunk_error",
                "png_zlib_inflate",
                "png_zstream_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr_ref",
                        "type": "png_structrp * const",
                        "definition": [
                            "png_structrp * const png_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avail_out_ref",
                        "type": "png_alloc_size_t * const",
                        "definition": [
                            "png_alloc_size_t * const avail_out_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr = *png_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avail_out",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t avail_out = *avail_out_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmpbuf",
                        "type": "png_byte [1024]",
                        "definition": [
                            "png_byte tmpbuf[1024]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "uInt",
                        "definition": [
                            "uInt out = (uInt) (-1)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_png_read_start_row_1",
            "header": "",
            "params": [
                "png_structrp * const png_ptr_ref",
                "size_t row_bytes"
            ],
            "definition": "void helper_png_read_start_row_1(png_structrp * const png_ptr_ref, size_t row_bytes)\n{\n  png_structrp png_ptr = *png_ptr_ref;\n  png_free(png_ptr, png_ptr->big_row_buf);\n  png_free(png_ptr, png_ptr->big_prev_row);\n  if (png_ptr->interlaced != 0)\n  {\n    png_ptr->big_row_buf = (png_bytep) png_calloc(png_ptr, row_bytes + 48);\n  }\n  else\n    png_ptr->big_row_buf = (png_bytep) png_malloc(png_ptr, row_bytes + 48);\n  png_ptr->big_prev_row = (png_bytep) png_malloc(png_ptr, row_bytes + 48);\n  {\n    png_bytep temp = png_ptr->big_row_buf + 32;\n    size_t extra = ((size_t) temp) & 0x0f;\n    png_ptr->row_buf = (temp - extra) - 1;\n    temp = png_ptr->big_prev_row + 32;\n    extra = ((size_t) temp) & 0x0f;\n    png_ptr->prev_row = (temp - extra) - 1;\n  }\n  png_ptr->old_big_row_buf_size = row_bytes + 48;\n  *png_ptr_ref = png_ptr;\n}\n\n",
            "calle": [
                "png_calloc",
                "png_free",
                "png_malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr_ref",
                        "type": "png_structrp * const",
                        "definition": [
                            "png_structrp * const png_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_bytes",
                        "type": "size_t",
                        "definition": [
                            "size_t row_bytes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr = *png_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "temp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep temp = png_ptr->big_row_buf + 32"
                        ]
                    },
                    {
                        "path": null,
                        "name": "extra",
                        "type": "size_t",
                        "definition": [
                            "size_t extra = ((size_t) temp) & 0x0f"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_png_combine_row_1_1",
            "header": "",
            "params": [
                "png_bytep * const dp_ref",
                "png_const_bytep * const sp_ref",
                "png_alloc_size_t * const row_width_ref",
                "int display",
                "unsigned int pass",
                "unsigned int pixel_depth"
            ],
            "definition": "void helper_helper_png_combine_row_1_1(png_bytep * const dp_ref, png_const_bytep * const sp_ref, png_alloc_size_t * const row_width_ref, int display, unsigned int pass, unsigned int pixel_depth)\n{\n  png_bytep dp = *dp_ref;\n  png_const_bytep sp = *sp_ref;\n  png_alloc_size_t row_width = *row_width_ref;\n  static const png_uint_32 row_mask[2][3][6] = {{{(((((((((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1))), (((((((((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1))), (((((((((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1))), (((((((((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1))), (((((((((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1))), (((((((((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1)))}, {(((((((((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1))), (((((((((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1))), (((((((((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1))), (((((((((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1))), (((((((((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1))), (((((((((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1)))}, {(((((((((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1))), (((((((((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1))), (((((((((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1))), (((((((((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1))), (((((((((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1))), (((((((((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1)))}}, {{(((((((((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1))), (((((((((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1))), (((((((((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1))), (((((((((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1))), (((((((((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1))), (((((((((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1)))}, {(((((((((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1))), (((((((((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1))), (((((((((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1))), (((((((((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1))), (((((((((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1))), (((((((((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1)))}, {(((((((((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1))), (((((((((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1))), (((((((((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1))), (((((((((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1))), (((((((((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1))), (((((((((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1)))}}};\n  static const png_uint_32 display_mask[2][3][3] = {{{(((((((((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1))), (((((((((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1))), (((((((((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1)))}, {(((((((((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1))), (((((((((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1))), (((((((((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1)))}, {(((((((((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1))), (((((((((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1))), (((((((((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1)))}}, {{(((((((((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1))), (((((((((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1))), (((((((((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1)))}, {(((((((((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1))), (((((((((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1))), (((((((((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1)))}, {(((((((((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1))), (((((((((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1))), (((((((((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1)))}}};\n  png_uint_32 pixels_per_byte = 8 / pixel_depth;\n  png_uint_32 mask;\n  mask = (display) ? (display_mask[1][(pixel_depth == 1) ? (0) : ((pixel_depth == 2) ? (1) : (2))][pass >> 1]) : (row_mask[1][(pixel_depth == 1) ? (0) : ((pixel_depth == 2) ? (1) : (2))][pass]);\n  for (;;)\n  {\n    png_uint_32 m;\n    m = mask;\n    mask = (m >> 8) | (m << 24);\n    m &= 0xff;\n    if (m != 0)\n    {\n      if (m != 0xff)\n      {\n        *dp = (png_byte) (((*dp) & (~m)) | ((*sp) & m));\n      }\n      else\n        *dp = *sp;\n    }\n    if (row_width <= pixels_per_byte)\n    {\n      break;\n    }\n    row_width -= pixels_per_byte;\n    dp += 1;\n    sp += 1;\n  }\n\n  *dp_ref = dp;\n  *sp_ref = sp;\n  *row_width_ref = row_width;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dp_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const dp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp_ref",
                        "type": "png_const_bytep * const",
                        "definition": [
                            "png_const_bytep * const sp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_width_ref",
                        "type": "png_alloc_size_t * const",
                        "definition": [
                            "png_alloc_size_t * const row_width_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "display",
                        "type": "int",
                        "definition": [
                            "int display"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pass",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pixel_depth",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pixel_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dp = *dp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep sp = *sp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_width",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t row_width = *row_width_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_mask",
                        "type": "const png_uint_32 [2][3][6]",
                        "definition": [
                            "static const png_uint_32 row_mask[2][3][6] = {{{(((((((((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1))), (((((((((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1))), (((((((((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1))), (((((((((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1))), (((((((((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1))), (((((((((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1)))}, {(((((((((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1))), (((((((((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1))), (((((((((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1))), (((((((((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1))), (((((((((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1))), (((((((((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1)))}, {(((((((((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1))), (((((((((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1))), (((((((((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1))), (((((((((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1))), (((((((((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1))), (((((((((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1)))}}, {{(((((((((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1))), (((((((((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1))), (((((((((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1))), (((((((((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1))), (((((((((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1))), (((((((((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1)))}, {(((((((((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1))), (((((((((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1))), (((((((((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1))), (((((((((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1))), (((((((((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1))), (((((((((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1)))}, {(((((((((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((0 < 4) ? (0x80088822 >> ((((3 - 0) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 0) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1))), (((((((((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0x80088822 >> ((((3 - 1) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 1) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1))), (((((((((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((2 < 4) ? (0x80088822 >> ((((3 - 2) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 2) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1))), (((((((((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0x80088822 >> ((((3 - 3) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 3) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1))), (((((((((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((4 < 4) ? (0x80088822 >> ((((3 - 4) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 4) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1))), (((((((((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 0)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 1)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 2)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 3)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 4)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 5)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 6)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0x80088822 >> ((((3 - 5) * 8) + (7 - 7)) & 0x1f)) : (0xaa55ff00 >> ((((7 - 5) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1)))}}}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "display_mask",
                        "type": "const png_uint_32 [2][3][3]",
                        "definition": [
                            "static const png_uint_32 display_mask[2][3][3] = {{{(((((((((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1))), (((((((((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1))), (((((((((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((0) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1)))}, {(((((((((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1))), (((((((((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1))), (((((((((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((0) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1)))}, {(((((((((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1))), (((((((((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1))), (((((((((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((0) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1)))}}, {{(((((((((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1))), (((((((((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1))), (((((((((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((0 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0)) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((1 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((2 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((3 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((4 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((5 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((6 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (1 & 0x1f)) - 1) << (((7 * 1) ^ ((1) ? (8 - 1) : (0))) & 0x1f)) : (0))) * ((1 == 1) ? (0x01010101) : ((1 == 2) ? (0x00010001) : (1)))}, {(((((((((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1))), (((((((((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1))), (((((((((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((0 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0)) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((1 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((2 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((3 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((4 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((5 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((6 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (2 & 0x1f)) - 1) << (((7 * 2) ^ ((1) ? (8 - 2) : (0))) & 0x1f)) : (0))) * ((2 == 1) ? (0x01010101) : ((2 == 2) ? (0x00010001) : (1)))}, {(((((((((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((1 < 4) ? (0xff0fff33 >> ((((3 - 1) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 1) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1))), (((((((((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((3 < 4) ? (0xff0fff33 >> ((((3 - 3) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 3) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1))), (((((((((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 0)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 0)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((0 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0)) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 1)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 1)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((1 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 2)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 2)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((2 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 3)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 3)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((3 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 4)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 4)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((4 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 5)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 5)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((5 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 6)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 6)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((6 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) + ((((5 < 4) ? (0xff0fff33 >> ((((3 - 5) * 8) + (7 - 7)) & 0x1f)) : (0xff55ff00 >> ((((7 - 5) * 8) + (7 - 7)) & 0x1f))) & 1) ? (((1U << (4 & 0x1f)) - 1) << (((7 * 4) ^ ((1) ? (8 - 4) : (0))) & 0x1f)) : (0))) * ((4 == 1) ? (0x01010101) : ((4 == 2) ? (0x00010001) : (1)))}}}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pixels_per_byte",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 pixels_per_byte = 8 / pixel_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 mask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 m"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_png_combine_row_1_2",
            "header": "",
            "params": [
                "png_bytep * const dp_ref",
                "unsigned int * const pixel_depth_ref",
                "png_const_bytep * const sp_ref",
                "png_alloc_size_t * const row_width_ref",
                "png_const_structrp png_ptr",
                "int display",
                "unsigned int pass"
            ],
            "definition": "void helper_helper_png_combine_row_1_2(png_bytep * const dp_ref, unsigned int * const pixel_depth_ref, png_const_bytep * const sp_ref, png_alloc_size_t * const row_width_ref, png_const_structrp png_ptr, int display, unsigned int pass)\n{\n  png_bytep dp = *dp_ref;\n  unsigned int pixel_depth = *pixel_depth_ref;\n  png_const_bytep sp = *sp_ref;\n  png_alloc_size_t row_width = *row_width_ref;\n  unsigned int bytes_to_copy;\n  unsigned int bytes_to_jump;\n  if (pixel_depth & 7)\n  {\n    png_error(png_ptr, \"invalid user transform pixel depth\");\n  }\n  pixel_depth >>= 3;\n  row_width *= pixel_depth;\n  {\n    unsigned int offset = (((1 & pass) << (3 - ((pass + 1) >> 1))) & 7) * pixel_depth;\n    row_width -= offset;\n    dp += offset;\n    sp += offset;\n  }\n  if (display != 0)\n  {\n    bytes_to_copy = (1 << ((6 - pass) >> 1)) * pixel_depth;\n    if (bytes_to_copy > row_width)\n    {\n      bytes_to_copy = (unsigned int) row_width;\n    }\n  }\n  else\n    bytes_to_copy = pixel_depth;\n  bytes_to_jump = (1 << ((7 - pass) >> 1)) * pixel_depth;\n  switch (bytes_to_copy)\n  {\n    case 1:\n    {\n      for (;;)\n      {\n        *dp = *sp;\n        if (row_width <= bytes_to_jump)\n        {\n          return;\n        }\n        dp += bytes_to_jump;\n        sp += bytes_to_jump;\n        row_width -= bytes_to_jump;\n      }\n\n    }\n\n    case 2:\n    {\n      do\n      {\n        dp[0] = sp[0];\n        dp[1] = sp[1];\n        if (row_width <= bytes_to_jump)\n        {\n          return;\n        }\n        sp += bytes_to_jump;\n        dp += bytes_to_jump;\n        row_width -= bytes_to_jump;\n      }\n      while (row_width > 1);\n      *dp = *sp;\n      return;\n    }\n\n    case 3:\n    {\n      for (;;)\n      {\n        dp[0] = sp[0];\n        dp[1] = sp[1];\n        dp[2] = sp[2];\n        if (row_width <= bytes_to_jump)\n        {\n          return;\n        }\n        sp += bytes_to_jump;\n        dp += bytes_to_jump;\n        row_width -= bytes_to_jump;\n      }\n\n    }\n\n    default:\n    {\n      helper_helper_helper_png_combine_row_1_2_1(&dp, &sp, &row_width, &bytes_to_copy, bytes_to_jump);\n    }\n\n  }\n\n  *dp_ref = dp;\n  *pixel_depth_ref = pixel_depth;\n  *sp_ref = sp;\n  *row_width_ref = row_width;\n}\n\n",
            "calle": [
                "helper_helper_helper_png_combine_row_1_2_1",
                "png_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dp_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const dp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pixel_depth_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const pixel_depth_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp_ref",
                        "type": "png_const_bytep * const",
                        "definition": [
                            "png_const_bytep * const sp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_width_ref",
                        "type": "png_alloc_size_t * const",
                        "definition": [
                            "png_alloc_size_t * const row_width_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "display",
                        "type": "int",
                        "definition": [
                            "int display"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pass",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dp = *dp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pixel_depth",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pixel_depth = *pixel_depth_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep sp = *sp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_width",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t row_width = *row_width_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bytes_to_copy",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bytes_to_copy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bytes_to_jump",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bytes_to_jump"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offset",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int offset = (((1 & pass) << (3 - ((pass + 1) >> 1))) & 7) * pixel_depth"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_png_do_read_interlace_1_1",
            "header": "",
            "params": [
                "png_bytep row",
                "int pass",
                "static const unsigned int png_pass_inc[7]",
                "png_row_infop row_info",
                "png_uint_32 final_width"
            ],
            "definition": "void helper_helper_png_do_read_interlace_1_1(png_bytep row, int pass, static const unsigned int png_pass_inc[7], png_row_infop row_info, png_uint_32 final_width)\n{\n  size_t pixel_bytes = row_info->pixel_depth >> 3;\n  png_bytep sp = row + (((size_t) (row_info->width - 1)) * pixel_bytes);\n  png_bytep dp = row + (((size_t) (final_width - 1)) * pixel_bytes);\n  int jstop = (int) png_pass_inc[pass];\n  png_uint_32 i;\n  for (i = 0; i < row_info->width; i += 1)\n  {\n    png_byte v[8];\n    int j;\n    memcpy(v, sp, pixel_bytes);\n    for (j = 0; j < jstop; j += 1)\n    {\n      memcpy(dp, v, pixel_bytes);\n      dp -= pixel_bytes;\n    }\n\n    sp -= pixel_bytes;\n  }\n\n  break;\n}\n\n",
            "calle": [
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pass",
                        "type": "int",
                        "definition": [
                            "int pass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_inc",
                        "type": "const unsigned int [7]",
                        "definition": [
                            "static const unsigned int png_pass_inc[7]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_info",
                        "type": "png_row_infop",
                        "definition": [
                            "png_row_infop row_info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "final_width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 final_width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pixel_bytes",
                        "type": "size_t",
                        "definition": [
                            "size_t pixel_bytes = row_info->pixel_depth >> 3"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep sp = row + (((size_t) (row_info->width - 1)) * pixel_bytes)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dp = row + (((size_t) (final_width - 1)) * pixel_bytes)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jstop",
                        "type": "int",
                        "definition": [
                            "int jstop = (int) png_pass_inc[pass]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "png_byte [8]",
                        "definition": [
                            "png_byte v[8]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_png_do_read_interlace_1_2",
            "header": "",
            "params": [
                "png_bytep row",
                "int pass",
                "static const unsigned int png_pass_inc[7]",
                "png_row_infop row_info",
                "png_uint_32 final_width"
            ],
            "definition": "void helper_helper_png_do_read_interlace_1_2(png_bytep row, int pass, static const unsigned int png_pass_inc[7], png_row_infop row_info, png_uint_32 final_width)\n{\n  png_bytep sp = row + ((size_t) ((row_info->width - 1) >> 1));\n  png_bytep dp = row + ((size_t) ((final_width - 1) >> 1));\n  unsigned int sshift;\n  unsigned int dshift;\n  unsigned int s_start;\n  unsigned int s_end;\n  int s_inc;\n  png_uint_32 i;\n  int jstop = (int) png_pass_inc[pass];\n  {\n    sshift = (1 - ((row_info->width + 1) & 0x01)) << 2;\n    dshift = (1 - ((final_width + 1) & 0x01)) << 2;\n    s_start = 0;\n    s_end = 4;\n    s_inc = 4;\n  }\n  for (i = 0; i < row_info->width; i += 1)\n  {\n    png_byte v = (png_byte) (((*sp) >> sshift) & 0x0f);\n    int j;\n    for (j = 0; j < jstop; j += 1)\n    {\n      unsigned int tmp = (*dp) & (0xf0f >> (4 - dshift));\n      tmp |= (unsigned int) (v << dshift);\n      *dp = (png_byte) (tmp & 0xff);\n      if (dshift == s_end)\n      {\n        dshift = s_start;\n        dp -= 1;\n      }\n      else\n        dshift = (unsigned int) (((int) dshift) + s_inc);\n    }\n\n    if (sshift == s_end)\n    {\n      sshift = s_start;\n      sp -= 1;\n    }\n    else\n      sshift = (unsigned int) (((int) sshift) + s_inc);\n  }\n\n  break;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pass",
                        "type": "int",
                        "definition": [
                            "int pass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_inc",
                        "type": "const unsigned int [7]",
                        "definition": [
                            "static const unsigned int png_pass_inc[7]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_info",
                        "type": "png_row_infop",
                        "definition": [
                            "png_row_infop row_info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "final_width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 final_width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep sp = row + ((size_t) ((row_info->width - 1) >> 1))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dp = row + ((size_t) ((final_width - 1) >> 1))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sshift",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sshift"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dshift",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dshift"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_start",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int s_start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_end",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int s_end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_inc",
                        "type": "int",
                        "definition": [
                            "int s_inc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jstop",
                        "type": "int",
                        "definition": [
                            "int jstop = (int) png_pass_inc[pass]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "png_byte",
                        "definition": [
                            "png_byte v = (png_byte) (((*sp) >> sshift) & 0x0f)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int tmp = (*dp) & (0xf0f >> (4 - dshift))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_png_do_read_interlace_1_3",
            "header": "",
            "params": [
                "png_bytep row",
                "int pass",
                "static const unsigned int png_pass_inc[7]",
                "png_row_infop row_info",
                "png_uint_32 final_width"
            ],
            "definition": "void helper_helper_png_do_read_interlace_1_3(png_bytep row, int pass, static const unsigned int png_pass_inc[7], png_row_infop row_info, png_uint_32 final_width)\n{\n  png_bytep sp = row + ((size_t) ((row_info->width - 1) >> 3));\n  png_bytep dp = row + ((size_t) ((final_width - 1) >> 3));\n  unsigned int sshift;\n  unsigned int dshift;\n  unsigned int s_start;\n  unsigned int s_end;\n  int s_inc;\n  int jstop = (int) png_pass_inc[pass];\n  png_byte v;\n  png_uint_32 i;\n  int j;\n  {\n    sshift = 7 - ((row_info->width + 7) & 0x07);\n    dshift = 7 - ((final_width + 7) & 0x07);\n    s_start = 0;\n    s_end = 7;\n    s_inc = 1;\n  }\n  for (i = 0; i < row_info->width; i += 1)\n  {\n    v = (png_byte) (((*sp) >> sshift) & 0x01);\n    for (j = 0; j < jstop; j += 1)\n    {\n      unsigned int tmp = (*dp) & (0x7f7f >> (7 - dshift));\n      tmp |= (unsigned int) (v << dshift);\n      *dp = (png_byte) (tmp & 0xff);\n      if (dshift == s_end)\n      {\n        dshift = s_start;\n        dp -= 1;\n      }\n      else\n        dshift = (unsigned int) (((int) dshift) + s_inc);\n    }\n\n    if (sshift == s_end)\n    {\n      sshift = s_start;\n      sp -= 1;\n    }\n    else\n      sshift = (unsigned int) (((int) sshift) + s_inc);\n  }\n\n  break;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pass",
                        "type": "int",
                        "definition": [
                            "int pass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_inc",
                        "type": "const unsigned int [7]",
                        "definition": [
                            "static const unsigned int png_pass_inc[7]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_info",
                        "type": "png_row_infop",
                        "definition": [
                            "png_row_infop row_info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "final_width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 final_width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep sp = row + ((size_t) ((row_info->width - 1) >> 3))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dp = row + ((size_t) ((final_width - 1) >> 3))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sshift",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sshift"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dshift",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dshift"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_start",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int s_start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_end",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int s_end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_inc",
                        "type": "int",
                        "definition": [
                            "int s_inc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jstop",
                        "type": "int",
                        "definition": [
                            "int jstop = (int) png_pass_inc[pass]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "png_byte",
                        "definition": [
                            "png_byte v"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int tmp = (*dp) & (0x7f7f >> (7 - dshift))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_png_do_read_interlace_1_4",
            "header": "",
            "params": [
                "png_bytep row",
                "int pass",
                "static const unsigned int png_pass_inc[7]",
                "png_row_infop row_info",
                "png_uint_32 final_width"
            ],
            "definition": "void helper_helper_png_do_read_interlace_1_4(png_bytep row, int pass, static const unsigned int png_pass_inc[7], png_row_infop row_info, png_uint_32 final_width)\n{\n  png_bytep sp = row + ((png_uint_32) ((row_info->width - 1) >> 2));\n  png_bytep dp = row + ((png_uint_32) ((final_width - 1) >> 2));\n  unsigned int sshift;\n  unsigned int dshift;\n  unsigned int s_start;\n  unsigned int s_end;\n  int s_inc;\n  int jstop = (int) png_pass_inc[pass];\n  png_uint_32 i;\n  {\n    sshift = (3 - ((row_info->width + 3) & 0x03)) << 1;\n    dshift = (3 - ((final_width + 3) & 0x03)) << 1;\n    s_start = 0;\n    s_end = 6;\n    s_inc = 2;\n  }\n  for (i = 0; i < row_info->width; i += 1)\n  {\n    png_byte v;\n    int j;\n    v = (png_byte) (((*sp) >> sshift) & 0x03);\n    for (j = 0; j < jstop; j += 1)\n    {\n      unsigned int tmp = (*dp) & (0x3f3f >> (6 - dshift));\n      tmp |= (unsigned int) (v << dshift);\n      *dp = (png_byte) (tmp & 0xff);\n      if (dshift == s_end)\n      {\n        dshift = s_start;\n        dp -= 1;\n      }\n      else\n        dshift = (unsigned int) (((int) dshift) + s_inc);\n    }\n\n    if (sshift == s_end)\n    {\n      sshift = s_start;\n      sp -= 1;\n    }\n    else\n      sshift = (unsigned int) (((int) sshift) + s_inc);\n  }\n\n  break;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pass",
                        "type": "int",
                        "definition": [
                            "int pass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_inc",
                        "type": "const unsigned int [7]",
                        "definition": [
                            "static const unsigned int png_pass_inc[7]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_info",
                        "type": "png_row_infop",
                        "definition": [
                            "png_row_infop row_info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "final_width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 final_width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep sp = row + ((png_uint_32) ((row_info->width - 1) >> 2))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dp = row + ((png_uint_32) ((final_width - 1) >> 2))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sshift",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sshift"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dshift",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dshift"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_start",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int s_start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_end",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int s_end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_inc",
                        "type": "int",
                        "definition": [
                            "int s_inc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jstop",
                        "type": "int",
                        "definition": [
                            "int jstop = (int) png_pass_inc[pass]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "png_byte",
                        "definition": [
                            "png_byte v"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int tmp = (*dp) & (0x3f3f >> (6 - dshift))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_png_read_IDAT_data_1_1",
            "header": "",
            "params": [
                "png_structrp * const png_ptr_ref"
            ],
            "definition": "void helper_helper_png_read_IDAT_data_1_1(png_structrp * const png_ptr_ref)\n{\n  png_structrp png_ptr = *png_ptr_ref;\n  uInt avail_in;\n  png_bytep buffer;\n  while (png_ptr->idat_size == 0)\n  {\n    png_crc_finish(png_ptr, 0);\n    png_ptr->idat_size = png_read_chunk_header(png_ptr);\n    if (png_ptr->chunk_name != ((((((png_uint_32) 73) << 24) | (((png_uint_32) 68) << 16)) | (((png_uint_32) 65) << 8)) | (((png_uint_32) 84) << 0)))\n    {\n      png_error(png_ptr, \"Not enough image data\");\n    }\n  }\n\n  avail_in = png_ptr->IDAT_read_size;\n  if (avail_in > png_ptr->idat_size)\n  {\n    avail_in = (uInt) png_ptr->idat_size;\n  }\n  buffer = png_read_buffer(png_ptr, avail_in, 0);\n  png_crc_read(png_ptr, buffer, avail_in);\n  png_ptr->idat_size -= avail_in;\n  png_ptr->zstream.next_in = buffer;\n  png_ptr->zstream.avail_in = avail_in;\n  *png_ptr_ref = png_ptr;\n}\n\n",
            "calle": [
                "png_crc_finish",
                "png_crc_read",
                "png_error",
                "png_read_buffer",
                "png_read_chunk_header"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr_ref",
                        "type": "png_structrp * const",
                        "definition": [
                            "png_structrp * const png_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr = *png_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avail_in",
                        "type": "uInt",
                        "definition": [
                            "uInt avail_in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep buffer"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_png_combine_row_1_2_1",
            "header": "",
            "params": [
                "png_bytep * const dp_ref",
                "png_const_bytep * const sp_ref",
                "png_alloc_size_t * const row_width_ref",
                "unsigned int * const bytes_to_copy_ref",
                "unsigned int bytes_to_jump"
            ],
            "definition": "void helper_helper_helper_png_combine_row_1_2_1(png_bytep * const dp_ref, png_const_bytep * const sp_ref, png_alloc_size_t * const row_width_ref, unsigned int * const bytes_to_copy_ref, unsigned int bytes_to_jump)\n{\n  png_bytep dp = *dp_ref;\n  png_const_bytep sp = *sp_ref;\n  png_alloc_size_t row_width = *row_width_ref;\n  unsigned int bytes_to_copy = *bytes_to_copy_ref;\n  if (((((bytes_to_copy < 16) && ((((png_uint_16) ((size_t) ((const void *) dp))) & ((png_uint_16) ((sizeof(png_uint_16)) - 1))) == 0)) && ((((png_uint_16) ((size_t) ((const void *) sp))) & ((png_uint_16) ((sizeof(png_uint_16)) - 1))) == 0)) && ((bytes_to_copy % (sizeof(png_uint_16))) == 0)) && ((bytes_to_jump % (sizeof(png_uint_16))) == 0))\n  {\n    helper_helper_helper_helper_png_combine_row_1_2_1_1(&dp, &sp, &row_width, bytes_to_jump, bytes_to_copy);\n  }\n  for (;;)\n  {\n    memcpy(dp, sp, bytes_to_copy);\n    if (row_width <= bytes_to_jump)\n    {\n      return;\n    }\n    sp += bytes_to_jump;\n    dp += bytes_to_jump;\n    row_width -= bytes_to_jump;\n    if (bytes_to_copy > row_width)\n    {\n      bytes_to_copy = (unsigned int) row_width;\n    }\n  }\n\n  *dp_ref = dp;\n  *sp_ref = sp;\n  *row_width_ref = row_width;\n  *bytes_to_copy_ref = bytes_to_copy;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_png_combine_row_1_2_1_1",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dp_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const dp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp_ref",
                        "type": "png_const_bytep * const",
                        "definition": [
                            "png_const_bytep * const sp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_width_ref",
                        "type": "png_alloc_size_t * const",
                        "definition": [
                            "png_alloc_size_t * const row_width_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bytes_to_copy_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const bytes_to_copy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bytes_to_jump",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bytes_to_jump"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dp = *dp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep sp = *sp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_width",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t row_width = *row_width_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bytes_to_copy",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bytes_to_copy = *bytes_to_copy_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_png_combine_row_1_2_1_1",
            "header": "",
            "params": [
                "png_bytep * const dp_ref",
                "png_const_bytep * const sp_ref",
                "png_alloc_size_t * const row_width_ref",
                "unsigned int bytes_to_jump",
                "unsigned int bytes_to_copy"
            ],
            "definition": "void helper_helper_helper_helper_png_combine_row_1_2_1_1(png_bytep * const dp_ref, png_const_bytep * const sp_ref, png_alloc_size_t * const row_width_ref, unsigned int bytes_to_jump, unsigned int bytes_to_copy)\n{\n  png_bytep dp = *dp_ref;\n  png_const_bytep sp = *sp_ref;\n  png_alloc_size_t row_width = *row_width_ref;\n  if (((((((png_uint_32) ((size_t) ((const void *) dp))) & ((png_uint_32) ((sizeof(png_uint_32)) - 1))) == 0) && ((((png_uint_32) ((size_t) ((const void *) sp))) & ((png_uint_32) ((sizeof(png_uint_32)) - 1))) == 0)) && ((bytes_to_copy % (sizeof(png_uint_32))) == 0)) && ((bytes_to_jump % (sizeof(png_uint_32))) == 0))\n  {\n    png_uint_32p dp32 = (void *) dp;\n    png_const_uint_32p sp32 = (const void *) sp;\n    size_t skip = (bytes_to_jump - bytes_to_copy) / (sizeof(png_uint_32));\n    do\n    {\n      size_t c = bytes_to_copy;\n      do\n      {\n        *dp32 = *sp32;\n        sp32 += 1;\n        dp32 += 1;\n        c -= sizeof(png_uint_32);\n      }\n      while (c > 0);\n      if (row_width <= bytes_to_jump)\n      {\n        return;\n      }\n      dp32 += skip;\n      sp32 += skip;\n      row_width -= bytes_to_jump;\n    }\n    while (bytes_to_copy <= row_width);\n    dp = (png_bytep) dp32;\n    sp = (png_const_bytep) sp32;\n    do\n    {\n      *dp = *sp;\n      sp += 1;\n      dp += 1;\n    }\n    while ((--row_width) > 0);\n    return;\n  }\n  else\n  {\n    png_uint_16p dp16 = (void *) dp;\n    png_const_uint_16p sp16 = (const void *) sp;\n    size_t skip = (bytes_to_jump - bytes_to_copy) / (sizeof(png_uint_16));\n    do\n    {\n      size_t c = bytes_to_copy;\n      do\n      {\n        *dp16 = *sp16;\n        sp16 += 1;\n        dp16 += 1;\n        c -= sizeof(png_uint_16);\n      }\n      while (c > 0);\n      if (row_width <= bytes_to_jump)\n      {\n        return;\n      }\n      dp16 += skip;\n      sp16 += skip;\n      row_width -= bytes_to_jump;\n    }\n    while (bytes_to_copy <= row_width);\n    dp = (png_bytep) dp16;\n    sp = (png_const_bytep) sp16;\n    do\n    {\n      *dp = *sp;\n      sp += 1;\n      dp += 1;\n    }\n    while ((--row_width) > 0);\n    return;\n  }\n  *dp_ref = dp;\n  *sp_ref = sp;\n  *row_width_ref = row_width;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dp_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const dp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp_ref",
                        "type": "png_const_bytep * const",
                        "definition": [
                            "png_const_bytep * const sp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_width_ref",
                        "type": "png_alloc_size_t * const",
                        "definition": [
                            "png_alloc_size_t * const row_width_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bytes_to_jump",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bytes_to_jump"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bytes_to_copy",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bytes_to_copy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dp = *dp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep sp = *sp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_width",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t row_width = *row_width_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp32",
                        "type": "png_uint_32p",
                        "definition": [
                            "png_uint_32p dp32 = (void *) dp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp32",
                        "type": "png_const_uint_32p",
                        "definition": [
                            "png_const_uint_32p sp32 = (const void *) sp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "skip",
                        "type": "size_t",
                        "definition": [
                            "size_t skip = (bytes_to_jump - bytes_to_copy) / (sizeof(png_uint_16))",
                            "size_t skip = (bytes_to_jump - bytes_to_copy) / (sizeof(png_uint_32))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "size_t",
                        "definition": [
                            "size_t c = bytes_to_copy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp16",
                        "type": "png_uint_16p",
                        "definition": [
                            "png_uint_16p dp16 = (void *) dp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp16",
                        "type": "png_const_uint_16p",
                        "definition": [
                            "png_const_uint_16p sp16 = (const void *) sp"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_set_compression_buffer_size",
            "header": "extern void png_set_compression_buffer_size(png_structrp png_ptr, size_t size)",
            "params": [
                "png_structrp png_ptr",
                "size_t size"
            ],
            "definition": "void png_set_compression_buffer_size(png_structrp png_ptr, size_t size)\n{\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  if ((size == 0) || (size > ((png_uint_32) 0x7fffffffL)))\n  {\n    png_error(png_ptr, \"invalid compression buffer size\");\n  }\n  if ((png_ptr->mode & 0x8000U) != 0)\n  {\n    png_ptr->IDAT_read_size = (png_uint_32) size;\n    return;\n  }\n  if ((png_ptr->mode & 0x8000U) == 0)\n  {\n    if (png_ptr->zowner != 0)\n    {\n      png_warning(png_ptr, \"Compression buffer size cannot be changed because it is in use\");\n      return;\n    }\n    if (size > ((uInt) (-1)))\n    {\n      png_warning(png_ptr, \"Compression buffer size limited to system maximum\");\n      size = (uInt) (-1);\n    }\n    if (size < 6)\n    {\n      png_warning(png_ptr, \"Compression buffer size cannot be reduced below 6\");\n      return;\n    }\n    if (png_ptr->zbuffer_size != size)\n    {\n      png_free_buffer_list(png_ptr, &png_ptr->zbuffer_list);\n      png_ptr->zbuffer_size = (uInt) size;\n    }\n  }\n}\n\n",
            "calle": [
                "png_error",
                "png_free_buffer_list",
                "png_warning"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_set_benign_errors",
            "header": "extern void png_set_benign_errors(png_structrp png_ptr, int allowed)",
            "params": [
                "png_structrp png_ptr",
                "int allowed"
            ],
            "definition": "void png_set_benign_errors(png_structrp png_ptr, int allowed)\n{\n  (void) 0;\n  if (allowed != 0)\n  {\n    png_ptr->flags |= (0x100000U | 0x200000U) | 0x400000U;\n  }\n  else\n    png_ptr->flags &= ~((0x100000U | 0x200000U) | 0x400000U);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "allowed",
                        "type": "int",
                        "definition": [
                            "int allowed"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_set_rows",
            "header": "extern void png_set_rows(png_const_structrp png_ptr, png_inforp info_ptr, png_bytepp row_pointers)",
            "params": [
                "png_const_structrp png_ptr",
                "png_inforp info_ptr",
                "png_bytepp row_pointers"
            ],
            "definition": "void png_set_rows(png_const_structrp png_ptr, png_inforp info_ptr, png_bytepp row_pointers)\n{\n  (void) 0;\n  if ((png_ptr == 0) || (info_ptr == 0))\n  {\n    return;\n  }\n  if ((info_ptr->row_pointers != 0) && (info_ptr->row_pointers != row_pointers))\n  {\n    png_free_data(png_ptr, info_ptr, 0x0040U, 0);\n  }\n  info_ptr->row_pointers = row_pointers;\n  if (row_pointers != 0)\n  {\n    info_ptr->valid |= 0x8000U;\n  }\n}\n\n",
            "calle": [
                "png_free_data"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_pointers",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp row_pointers"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_set_bKGD",
            "header": "extern void png_set_bKGD(png_const_structrp png_ptr, png_inforp info_ptr, png_const_color_16p background)",
            "params": [
                "png_const_structrp png_ptr",
                "png_inforp info_ptr",
                "png_const_color_16p background"
            ],
            "definition": "void png_set_bKGD(png_const_structrp png_ptr, png_inforp info_ptr, png_const_color_16p background)\n{\n  (void) 0;\n  if (((png_ptr == 0) || (info_ptr == 0)) || (background == 0))\n  {\n    return;\n  }\n  info_ptr->background = *background;\n  info_ptr->valid |= 0x0020U;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "background",
                        "type": "png_const_color_16p",
                        "definition": [
                            "png_const_color_16p background"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_set_hIST",
            "header": "extern void png_set_hIST(png_const_structrp png_ptr, png_inforp info_ptr, png_const_uint_16p hist)",
            "params": [
                "png_const_structrp png_ptr",
                "png_inforp info_ptr",
                "png_const_uint_16p hist"
            ],
            "definition": "void png_set_hIST(png_const_structrp png_ptr, png_inforp info_ptr, png_const_uint_16p hist)\n{\n  int i;\n  (void) 0;\n  if ((png_ptr == 0) || (info_ptr == 0))\n  {\n    return;\n  }\n  if ((info_ptr->num_palette == 0) || (info_ptr->num_palette > 256))\n  {\n    png_warning(png_ptr, \"Invalid palette size, hIST allocation skipped\");\n    return;\n  }\n  png_free_data(png_ptr, info_ptr, 0x0008U, 0);\n  info_ptr->hist = png_malloc_warn(png_ptr, 256 * (sizeof(png_uint_16)));\n  if (info_ptr->hist == 0)\n  {\n    png_warning(png_ptr, \"Insufficient memory for hIST chunk data\");\n    return;\n  }\n  for (i = 0; i < info_ptr->num_palette; i += 1)\n  {\n    info_ptr->hist[i] = hist[i];\n  }\n\n  info_ptr->free_me |= 0x0008U;\n  info_ptr->valid |= 0x0040U;\n}\n\n",
            "calle": [
                "png_free_data",
                "png_malloc_warn",
                "png_warning"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hist",
                        "type": "png_const_uint_16p",
                        "definition": [
                            "png_const_uint_16p hist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_set_IHDR",
            "header": "extern void png_set_IHDR(png_const_structrp png_ptr, png_inforp info_ptr, png_uint_32 width, png_uint_32 height, int bit_depth, int color_type, int interlace_method, int compression_method, int filter_method)",
            "params": [
                "png_const_structrp png_ptr",
                "png_inforp info_ptr",
                "png_uint_32 width",
                "png_uint_32 height",
                "int bit_depth",
                "int color_type",
                "int interlace_type",
                "int compression_type",
                "int filter_type"
            ],
            "definition": "void png_set_IHDR(png_const_structrp png_ptr, png_inforp info_ptr, png_uint_32 width, png_uint_32 height, int bit_depth, int color_type, int interlace_type, int compression_type, int filter_type)\n{\n  (void) 0;\n  if ((png_ptr == 0) || (info_ptr == 0))\n  {\n    return;\n  }\n  info_ptr->width = width;\n  info_ptr->height = height;\n  info_ptr->bit_depth = (png_byte) bit_depth;\n  info_ptr->color_type = (png_byte) color_type;\n  info_ptr->compression_type = (png_byte) compression_type;\n  info_ptr->filter_type = (png_byte) filter_type;\n  info_ptr->interlace_type = (png_byte) interlace_type;\n  png_check_IHDR(png_ptr, info_ptr->width, info_ptr->height, info_ptr->bit_depth, info_ptr->color_type, info_ptr->interlace_type, info_ptr->compression_type, info_ptr->filter_type);\n  if (info_ptr->color_type == (2 | 1))\n  {\n    info_ptr->channels = 1;\n  }\n  else\n    if ((info_ptr->color_type & 2) != 0)\n  {\n    info_ptr->channels = 3;\n  }\n  else\n    info_ptr->channels = 1;\n  if ((info_ptr->color_type & 4) != 0)\n  {\n    info_ptr->channels += 1;\n  }\n  info_ptr->pixel_depth = (png_byte) (info_ptr->channels * info_ptr->bit_depth);\n  info_ptr->rowbytes = (info_ptr->pixel_depth >= 8) ? (((size_t) width) * (((size_t) info_ptr->pixel_depth) >> 3)) : (((((size_t) width) * ((size_t) info_ptr->pixel_depth)) + 7) >> 3);\n}\n\n",
            "calle": [
                "png_check_IHDR"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bit_depth",
                        "type": "int",
                        "definition": [
                            "int bit_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color_type",
                        "type": "int",
                        "definition": [
                            "int color_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "interlace_type",
                        "type": "int",
                        "definition": [
                            "int interlace_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compression_type",
                        "type": "int",
                        "definition": [
                            "int compression_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filter_type",
                        "type": "int",
                        "definition": [
                            "int filter_type"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_set_PLTE",
            "header": "extern void png_set_PLTE(png_structrp png_ptr, png_inforp info_ptr, png_const_colorp palette, int num_palette)",
            "params": [
                "png_structrp png_ptr",
                "png_inforp info_ptr",
                "png_const_colorp palette",
                "int num_palette"
            ],
            "definition": "void png_set_PLTE(png_structrp png_ptr, png_inforp info_ptr, png_const_colorp palette, int num_palette)\n{\n  png_uint_32 max_palette_length;\n  (void) 0;\n  if ((png_ptr == 0) || (info_ptr == 0))\n  {\n    return;\n  }\n  max_palette_length = (info_ptr->color_type == (2 | 1)) ? (1 << info_ptr->bit_depth) : (256);\n  if ((num_palette < 0) || (num_palette > ((int) max_palette_length)))\n  {\n    if (info_ptr->color_type == (2 | 1))\n    {\n      png_error(png_ptr, \"Invalid palette length\");\n    }\n    else\n    {\n      png_warning(png_ptr, \"Invalid palette length\");\n      return;\n    }\n  }\n  if (((num_palette > 0) && (palette == 0)) || (num_palette == 0))\n  {\n    png_error(png_ptr, \"Invalid palette\");\n  }\n  png_free_data(png_ptr, info_ptr, 0x1000U, 0);\n  png_ptr->palette = png_calloc(png_ptr, 256 * (sizeof(png_color)));\n  if (num_palette > 0)\n  {\n    memcpy(png_ptr->palette, palette, ((unsigned int) num_palette) * (sizeof(png_color)));\n  }\n  info_ptr->palette = png_ptr->palette;\n  info_ptr->num_palette = (png_ptr->num_palette = (png_uint_16) num_palette);\n  info_ptr->free_me |= 0x1000U;\n  info_ptr->valid |= 0x0008U;\n}\n\n",
            "calle": [
                "memcpy",
                "png_calloc",
                "png_error",
                "png_free_data",
                "png_warning"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "palette",
                        "type": "png_const_colorp",
                        "definition": [
                            "png_const_colorp palette"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_palette",
                        "type": "int",
                        "definition": [
                            "int num_palette"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_palette_length",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 max_palette_length"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_set_sBIT",
            "header": "extern void png_set_sBIT(png_const_structrp png_ptr, png_inforp info_ptr, png_const_color_8p sig_bit)",
            "params": [
                "png_const_structrp png_ptr",
                "png_inforp info_ptr",
                "png_const_color_8p sig_bit"
            ],
            "definition": "void png_set_sBIT(png_const_structrp png_ptr, png_inforp info_ptr, png_const_color_8p sig_bit)\n{\n  (void) 0;\n  if (((png_ptr == 0) || (info_ptr == 0)) || (sig_bit == 0))\n  {\n    return;\n  }\n  info_ptr->sig_bit = *sig_bit;\n  info_ptr->valid |= 0x0002U;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sig_bit",
                        "type": "png_const_color_8p",
                        "definition": [
                            "png_const_color_8p sig_bit"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_set_tRNS",
            "header": "extern void png_set_tRNS(png_structrp png_ptr, png_inforp info_ptr, png_const_bytep trans_alpha, int num_trans, png_const_color_16p trans_color)",
            "params": [
                "png_structrp png_ptr",
                "png_inforp info_ptr",
                "png_const_bytep trans_alpha",
                "int num_trans",
                "png_const_color_16p trans_color"
            ],
            "definition": "void png_set_tRNS(png_structrp png_ptr, png_inforp info_ptr, png_const_bytep trans_alpha, int num_trans, png_const_color_16p trans_color)\n{\n  (void) 0;\n  if ((png_ptr == 0) || (info_ptr == 0))\n  {\n    return;\n  }\n  if (trans_alpha != 0)\n  {\n    png_free_data(png_ptr, info_ptr, 0x2000U, 0);\n    if ((num_trans > 0) && (num_trans <= 256))\n    {\n      info_ptr->trans_alpha = png_malloc(png_ptr, 256);\n      memcpy(info_ptr->trans_alpha, trans_alpha, (size_t) num_trans);\n      info_ptr->free_me |= 0x2000U;\n      info_ptr->valid |= 0x0010U;\n    }\n    png_ptr->trans_alpha = info_ptr->trans_alpha;\n  }\n  if (trans_color != 0)\n  {\n    if (info_ptr->bit_depth < 16)\n    {\n      int sample_max = (1 << info_ptr->bit_depth) - 1;\n      if (((info_ptr->color_type == 0) && (trans_color->gray > sample_max)) || ((info_ptr->color_type == 2) && (((trans_color->red > sample_max) || (trans_color->green > sample_max)) || (trans_color->blue > sample_max))))\n      {\n        png_warning(png_ptr, \"tRNS chunk has out-of-range samples for bit_depth\");\n      }\n    }\n    info_ptr->trans_color = *trans_color;\n    if (num_trans == 0)\n    {\n      num_trans = 1;\n    }\n  }\n  info_ptr->num_trans = (png_uint_16) num_trans;\n  if (num_trans != 0)\n  {\n    info_ptr->free_me |= 0x2000U;\n    info_ptr->valid |= 0x0010U;\n  }\n}\n\n",
            "calle": [
                "memcpy",
                "png_free_data",
                "png_malloc",
                "png_warning"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_alpha",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep trans_alpha"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_trans",
                        "type": "int",
                        "definition": [
                            "int num_trans"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_color",
                        "type": "png_const_color_16p",
                        "definition": [
                            "png_const_color_16p trans_color"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_max",
                        "type": "int",
                        "definition": [
                            "int sample_max = (1 << info_ptr->bit_depth) - 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_set_keep_unknown_chunks",
            "header": "extern void png_set_keep_unknown_chunks(png_structrp png_ptr, int keep, png_const_bytep chunk_list, int num_chunks)",
            "params": [
                "png_structrp png_ptr",
                "int keep",
                "png_const_bytep chunk_list",
                "int num_chunks_in"
            ],
            "definition": "void png_set_keep_unknown_chunks(png_structrp png_ptr, int keep, png_const_bytep chunk_list, int num_chunks_in)\n{\n  png_bytep new_list;\n  unsigned int num_chunks;\n  unsigned int old_num_chunks;\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  if ((keep < 0) || (keep >= 4))\n  {\n    png_app_error(png_ptr, \"png_set_keep_unknown_chunks: invalid keep\");\n    return;\n  }\n  if (num_chunks_in <= 0)\n  {\n    png_ptr->unknown_default = keep;\n    if (num_chunks_in == 0)\n    {\n      return;\n    }\n  }\n  if (num_chunks_in < 0)\n  {\n    static const png_byte chunks_to_ignore[] = {98, 75, 71, 68, '\\0', 99, 72, 82, 77, '\\0', 101, 88, 73, 102, '\\0', 103, 65, 77, 65, '\\0', 104, 73, 83, 84, '\\0', 105, 67, 67, 80, '\\0', 105, 84, 88, 116, '\\0', 111, 70, 70, 115, '\\0', 112, 67, 65, 76, '\\0', 112, 72, 89, 115, '\\0', 115, 66, 73, 84, '\\0', 115, 67, 65, 76, '\\0', 115, 80, 76, 84, '\\0', 115, 84, 69, 82, '\\0', 115, 82, 71, 66, '\\0', 116, 69, 88, 116, '\\0', 116, 73, 77, 69, '\\0', 122, 84, 88, 116, '\\0'};\n    chunk_list = chunks_to_ignore;\n    num_chunks = ((unsigned int) (sizeof(chunks_to_ignore))) / 5U;\n  }\n  else\n  {\n    if (chunk_list == 0)\n    {\n      png_app_error(png_ptr, \"png_set_keep_unknown_chunks: no chunk list\");\n      return;\n    }\n    num_chunks = (unsigned int) num_chunks_in;\n  }\n  old_num_chunks = png_ptr->num_chunk_list;\n  if (png_ptr->chunk_list == 0)\n  {\n    old_num_chunks = 0;\n  }\n  if ((num_chunks + old_num_chunks) > (4294967295U / 5))\n  {\n    png_app_error(png_ptr, \"png_set_keep_unknown_chunks: too many chunks\");\n    return;\n  }\n  if (keep != 0)\n  {\n    new_list = png_malloc(png_ptr, 5 * (num_chunks + old_num_chunks));\n    if (old_num_chunks > 0)\n    {\n      memcpy(new_list, png_ptr->chunk_list, 5 * old_num_chunks);\n    }\n  }\n  else\n    if (old_num_chunks > 0)\n  {\n    new_list = png_ptr->chunk_list;\n  }\n  else\n    new_list = 0;\n  if (new_list != 0)\n  {\n    helper_png_set_keep_unknown_chunks_1(&new_list, &num_chunks, &old_num_chunks, png_ptr, keep, chunk_list);\n  }\n  else\n    num_chunks = 0;\n  png_ptr->num_chunk_list = num_chunks;\n  if (png_ptr->chunk_list != new_list)\n  {\n    if (png_ptr->chunk_list != 0)\n    {\n      png_free(png_ptr, png_ptr->chunk_list);\n    }\n    png_ptr->chunk_list = new_list;\n  }\n}\n\n",
            "calle": [
                "helper_png_set_keep_unknown_chunks_1",
                "memcpy",
                "png_app_error",
                "png_free",
                "png_malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "keep",
                        "type": "int",
                        "definition": [
                            "int keep"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chunk_list",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep chunk_list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_chunks_in",
                        "type": "int",
                        "definition": [
                            "int num_chunks_in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_list",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep new_list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_chunks",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int num_chunks"
                        ]
                    },
                    {
                        "path": null,
                        "name": "old_num_chunks",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int old_num_chunks"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chunks_to_ignore",
                        "type": "const png_byte []",
                        "definition": [
                            "static const png_byte chunks_to_ignore[] = {98, 75, 71, 68, '\\0', 99, 72, 82, 77, '\\0', 101, 88, 73, 102, '\\0', 103, 65, 77, 65, '\\0', 104, 73, 83, 84, '\\0', 105, 67, 67, 80, '\\0', 105, 84, 88, 116, '\\0', 111, 70, 70, 115, '\\0', 112, 67, 65, 76, '\\0', 112, 72, 89, 115, '\\0', 115, 66, 73, 84, '\\0', 115, 67, 65, 76, '\\0', 115, 80, 76, 84, '\\0', 115, 84, 69, 82, '\\0', 115, 82, 71, 66, '\\0', 116, 69, 88, 116, '\\0', 116, 73, 77, 69, '\\0', 122, 84, 88, 116, '\\0'}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_set_unknown_chunks",
            "header": "extern void png_set_unknown_chunks(png_const_structrp png_ptr, png_inforp info_ptr, png_const_unknown_chunkp unknowns, int num_unknowns)",
            "params": [
                "png_const_structrp png_ptr",
                "png_inforp info_ptr",
                "png_const_unknown_chunkp unknowns",
                "int num_unknowns"
            ],
            "definition": "void png_set_unknown_chunks(png_const_structrp png_ptr, png_inforp info_ptr, png_const_unknown_chunkp unknowns, int num_unknowns)\n{\n  png_unknown_chunkp np;\n  if ((((png_ptr == 0) || (info_ptr == 0)) || (num_unknowns <= 0)) || (unknowns == 0))\n  {\n    return;\n  }\n  np = png_realloc_array(png_ptr, info_ptr->unknown_chunks, info_ptr->unknown_chunks_num, num_unknowns, sizeof(*np));\n  if (np == 0)\n  {\n    png_chunk_report(png_ptr, \"too many unknown chunks\", 1);\n    return;\n  }\n  png_free(png_ptr, info_ptr->unknown_chunks);\n  info_ptr->unknown_chunks = np;\n  info_ptr->free_me |= 0x0200U;\n  np += info_ptr->unknown_chunks_num;\n  for (; num_unknowns > 0; num_unknowns -= 1, unknowns += 1)\n  {\n    memcpy(np->name, unknowns->name, sizeof(np->name));\n    np->name[(sizeof(np->name)) - 1] = '\\0';\n    np->location = check_location(png_ptr, unknowns->location);\n    if (unknowns->size == 0)\n    {\n      np->data = 0;\n      np->size = 0;\n    }\n    else\n    {\n      np->data = png_malloc_base(png_ptr, unknowns->size);\n      if (np->data == 0)\n      {\n        png_chunk_report(png_ptr, \"unknown chunk: out of memory\", 1);\n        continue;\n      }\n      memcpy(np->data, unknowns->data, unknowns->size);\n      np->size = unknowns->size;\n    }\n    np += 1;\n    info_ptr->unknown_chunks_num += 1;\n  }\n\n}\n\n",
            "calle": [
                "check_location",
                "memcpy",
                "png_chunk_report",
                "png_free",
                "png_malloc_base",
                "png_realloc_array"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unknowns",
                        "type": "png_const_unknown_chunkp",
                        "definition": [
                            "png_const_unknown_chunkp unknowns"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_unknowns",
                        "type": "int",
                        "definition": [
                            "int num_unknowns"
                        ]
                    },
                    {
                        "path": null,
                        "name": "np",
                        "type": "png_unknown_chunkp",
                        "definition": [
                            "png_unknown_chunkp np"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_set_unknown_chunk_location",
            "header": "extern void png_set_unknown_chunk_location(png_const_structrp png_ptr, png_inforp info_ptr, int chunk, int location)",
            "params": [
                "png_const_structrp png_ptr",
                "png_inforp info_ptr",
                "int chunk",
                "int location"
            ],
            "definition": "void png_set_unknown_chunk_location(png_const_structrp png_ptr, png_inforp info_ptr, int chunk, int location)\n{\n  if ((((png_ptr != 0) && (info_ptr != 0)) && (chunk >= 0)) && (chunk < info_ptr->unknown_chunks_num))\n  {\n    if ((location & ((0x01 | 0x02) | 0x08)) == 0)\n    {\n      png_app_error(png_ptr, \"invalid unknown chunk location\");\n      if ((((unsigned int) location) & 0x04U) != 0)\n      {\n        location = 0x08;\n      }\n      else\n        location = 0x01;\n    }\n    info_ptr->unknown_chunks[chunk].location = check_location(png_ptr, location);\n  }\n}\n\n",
            "calle": [
                "check_location",
                "png_app_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chunk",
                        "type": "int",
                        "definition": [
                            "int chunk"
                        ]
                    },
                    {
                        "path": null,
                        "name": "location",
                        "type": "int",
                        "definition": [
                            "int location"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_set_invalid",
            "header": "extern void png_set_invalid(png_const_structrp png_ptr, png_inforp info_ptr, int mask)",
            "params": [
                "png_const_structrp png_ptr",
                "png_inforp info_ptr",
                "int mask"
            ],
            "definition": "void png_set_invalid(png_const_structrp png_ptr, png_inforp info_ptr, int mask)\n{\n  if ((png_ptr != 0) && (info_ptr != 0))\n  {\n    info_ptr->valid &= (unsigned int) (~mask);\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask",
                        "type": "int",
                        "definition": [
                            "int mask"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_set_user_limits",
            "header": "extern void png_set_user_limits(png_structrp png_ptr, png_uint_32 user_width_max, png_uint_32 user_height_max)",
            "params": [
                "png_structrp png_ptr",
                "png_uint_32 user_width_max",
                "png_uint_32 user_height_max"
            ],
            "definition": "void png_set_user_limits(png_structrp png_ptr, png_uint_32 user_width_max, png_uint_32 user_height_max)\n{\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  png_ptr->user_width_max = user_width_max;\n  png_ptr->user_height_max = user_height_max;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "user_width_max",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 user_width_max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "user_height_max",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 user_height_max"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_set_chunk_cache_max",
            "header": "extern void png_set_chunk_cache_max(png_structrp png_ptr, png_uint_32 user_chunk_cache_max)",
            "params": [
                "png_structrp png_ptr",
                "png_uint_32 user_chunk_cache_max"
            ],
            "definition": "void png_set_chunk_cache_max(png_structrp png_ptr, png_uint_32 user_chunk_cache_max)\n{\n  if (png_ptr != 0)\n  {\n    png_ptr->user_chunk_cache_max = user_chunk_cache_max;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "user_chunk_cache_max",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 user_chunk_cache_max"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_set_chunk_malloc_max",
            "header": "extern void png_set_chunk_malloc_max(png_structrp png_ptr, png_alloc_size_t user_chunk_cache_max)",
            "params": [
                "png_structrp png_ptr",
                "png_alloc_size_t user_chunk_malloc_max"
            ],
            "definition": "void png_set_chunk_malloc_max(png_structrp png_ptr, png_alloc_size_t user_chunk_malloc_max)\n{\n  if (png_ptr != 0)\n  {\n    png_ptr->user_chunk_malloc_max = user_chunk_malloc_max;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "user_chunk_malloc_max",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t user_chunk_malloc_max"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_set_check_for_invalid_index",
            "header": "extern void png_set_check_for_invalid_index(png_structrp png_ptr, int allowed)",
            "params": [
                "png_structrp png_ptr",
                "int allowed"
            ],
            "definition": "void png_set_check_for_invalid_index(png_structrp png_ptr, int allowed)\n{\n  (void) 0;\n  if (allowed > 0)\n  {\n    png_ptr->num_palette_max = 0;\n  }\n  else\n    png_ptr->num_palette_max = -1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "allowed",
                        "type": "int",
                        "definition": [
                            "int allowed"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "check_location",
            "header": "",
            "params": [
                "png_const_structrp png_ptr",
                "int location"
            ],
            "definition": "static png_byte check_location(png_const_structrp png_ptr, int location)\n{\n  location &= (0x01 | 0x02) | 0x08;\n  if ((location == 0) && ((png_ptr->mode & 0x8000U) == 0))\n  {\n    png_app_warning(png_ptr, \"png_set_unknown_chunks now expects a valid location\");\n    location = (png_byte) (png_ptr->mode & ((0x01 | 0x02) | 0x08));\n  }\n  if (location == 0)\n  {\n    png_error(png_ptr, \"invalid location in png_set_unknown_chunks\");\n  }\n  while (location != (location & (-location)))\n  {\n    location &= ~(location & (-location));\n  }\n\n  return (png_byte) location;\n}\n\n",
            "calle": [
                "png_app_warning",
                "png_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_const_structrp",
                        "definition": [
                            "png_const_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "location",
                        "type": "int",
                        "definition": [
                            "int location"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "add_one_chunk",
            "header": "",
            "params": [
                "png_bytep list",
                "unsigned int count",
                "png_const_bytep add",
                "int keep"
            ],
            "definition": "static unsigned int add_one_chunk(png_bytep list, unsigned int count, png_const_bytep add, int keep)\n{\n  unsigned int i;\n  for (i = 0; i < count; i += 1, list += 5)\n  {\n    if (memcmp(list, add, 4) == 0)\n    {\n      list[4] = (png_byte) keep;\n      return count;\n    }\n  }\n\n  if (keep != 0)\n  {\n    count += 1;\n    memcpy(list, add, 4);\n    list[4] = (png_byte) keep;\n  }\n  return count;\n}\n\n",
            "calle": [
                "memcmp",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "list",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "add",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep add"
                        ]
                    },
                    {
                        "path": null,
                        "name": "keep",
                        "type": "int",
                        "definition": [
                            "int keep"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_png_set_keep_unknown_chunks_1",
            "header": "",
            "params": [
                "png_bytep * const new_list_ref",
                "unsigned int * const num_chunks_ref",
                "unsigned int * const old_num_chunks_ref",
                "png_structrp png_ptr",
                "int keep",
                "png_const_bytep chunk_list"
            ],
            "definition": "void helper_png_set_keep_unknown_chunks_1(png_bytep * const new_list_ref, unsigned int * const num_chunks_ref, unsigned int * const old_num_chunks_ref, png_structrp png_ptr, int keep, png_const_bytep chunk_list)\n{\n  png_bytep new_list = *new_list_ref;\n  unsigned int num_chunks = *num_chunks_ref;\n  unsigned int old_num_chunks = *old_num_chunks_ref;\n  png_const_bytep inlist;\n  png_bytep outlist;\n  unsigned int i;\n  for (i = 0; i < num_chunks; i += 1)\n  {\n    old_num_chunks = add_one_chunk(new_list, old_num_chunks, chunk_list + (5 * i), keep);\n  }\n\n  num_chunks = 0;\n  for (i = 0, inlist = (outlist = new_list); i < old_num_chunks; i += 1, inlist += 5)\n  {\n    if (inlist[4])\n    {\n      if (outlist != inlist)\n      {\n        memcpy(outlist, inlist, 5);\n      }\n      outlist += 5;\n      num_chunks += 1;\n    }\n  }\n\n  if (num_chunks == 0)\n  {\n    if (png_ptr->chunk_list != new_list)\n    {\n      png_free(png_ptr, new_list);\n    }\n    new_list = 0;\n  }\n  *new_list_ref = new_list;\n  *num_chunks_ref = num_chunks;\n  *old_num_chunks_ref = old_num_chunks;\n}\n\n",
            "calle": [
                "add_one_chunk",
                "memcpy",
                "png_free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "new_list_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const new_list_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_chunks_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const num_chunks_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "old_num_chunks_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const old_num_chunks_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "keep",
                        "type": "int",
                        "definition": [
                            "int keep"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chunk_list",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep chunk_list"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_list",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep new_list = *new_list_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_chunks",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int num_chunks = *num_chunks_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "old_num_chunks",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int old_num_chunks = *old_num_chunks_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inlist",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep inlist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outlist",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep outlist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_set_interlace_handling",
            "header": "extern int png_set_interlace_handling(png_structrp png_ptr)",
            "params": [
                "png_structrp png_ptr"
            ],
            "definition": "int png_set_interlace_handling(png_structrp png_ptr)\n{\n  (void) 0;\n  if ((png_ptr != 0) && (png_ptr->interlaced != 0))\n  {\n    png_ptr->transformations |= 0x0002U;\n    return 7;\n  }\n  return 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_do_check_palette_indexes",
            "header": "extern void png_do_check_palette_indexes(png_structrp png_ptr, png_row_infop row_info)",
            "params": [
                "png_structrp png_ptr",
                "png_row_infop row_info"
            ],
            "definition": "void png_do_check_palette_indexes(png_structrp png_ptr, png_row_infop row_info)\n{\n  if ((png_ptr->num_palette < (1 << row_info->bit_depth)) && (png_ptr->num_palette > 0))\n  {\n    helper_png_do_check_palette_indexes_1(&png_ptr, row_info);\n  }\n}\n\n",
            "calle": [
                "helper_png_do_check_palette_indexes_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_info",
                        "type": "png_row_infop",
                        "definition": [
                            "png_row_infop row_info"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_png_do_check_palette_indexes_1",
            "header": "",
            "params": [
                "png_structrp * const png_ptr_ref",
                "png_row_infop row_info"
            ],
            "definition": "void helper_png_do_check_palette_indexes_1(png_structrp * const png_ptr_ref, png_row_infop row_info)\n{\n  png_structrp png_ptr = *png_ptr_ref;\n  int padding = (8 - ((row_info->pixel_depth * (row_info->width % ((png_uint_32) 8))) % 8)) % 8;\n  png_bytep rp = (png_ptr->row_buf + row_info->rowbytes) - 1;\n  switch (row_info->bit_depth)\n  {\n    case 1:\n    {\n      for (; rp > png_ptr->row_buf; rp -= 1)\n      {\n        if (((*rp) >> padding) != 0)\n        {\n          png_ptr->num_palette_max = 1;\n        }\n        padding = 0;\n      }\n\n      break;\n    }\n\n    case 2:\n    {\n      helper_helper_png_do_check_palette_indexes_1_1(&png_ptr, &padding, &rp);\n    }\n\n    case 4:\n    {\n      for (; rp > png_ptr->row_buf; rp -= 1)\n      {\n        int i = ((*rp) >> padding) & 0x0f;\n        if (i > png_ptr->num_palette_max)\n        {\n          png_ptr->num_palette_max = i;\n        }\n        i = (((*rp) >> padding) >> 4) & 0x0f;\n        if (i > png_ptr->num_palette_max)\n        {\n          png_ptr->num_palette_max = i;\n        }\n        padding = 0;\n      }\n\n      break;\n    }\n\n    case 8:\n    {\n      for (; rp > png_ptr->row_buf; rp -= 1)\n      {\n        if ((*rp) > png_ptr->num_palette_max)\n        {\n          png_ptr->num_palette_max = (int) (*rp);\n        }\n      }\n\n      break;\n    }\n\n    default:\n    {\n      break;\n    }\n\n  }\n\n  *png_ptr_ref = png_ptr;\n}\n\n",
            "calle": [
                "helper_helper_png_do_check_palette_indexes_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr_ref",
                        "type": "png_structrp * const",
                        "definition": [
                            "png_structrp * const png_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_info",
                        "type": "png_row_infop",
                        "definition": [
                            "png_row_infop row_info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr = *png_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "padding",
                        "type": "int",
                        "definition": [
                            "int padding = (8 - ((row_info->pixel_depth * (row_info->width % ((png_uint_32) 8))) % 8)) % 8"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep rp = (png_ptr->row_buf + row_info->rowbytes) - 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = ((*rp) >> padding) & 0x0f"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_png_do_check_palette_indexes_1_1",
            "header": "",
            "params": [
                "png_structrp * const png_ptr_ref",
                "int * const padding_ref",
                "png_bytep * const rp_ref"
            ],
            "definition": "void helper_helper_png_do_check_palette_indexes_1_1(png_structrp * const png_ptr_ref, int * const padding_ref, png_bytep * const rp_ref)\n{\n  png_structrp png_ptr = *png_ptr_ref;\n  int padding = *padding_ref;\n  png_bytep rp = *rp_ref;\n  for (; rp > png_ptr->row_buf; rp -= 1)\n  {\n    int i = ((*rp) >> padding) & 0x03;\n    if (i > png_ptr->num_palette_max)\n    {\n      png_ptr->num_palette_max = i;\n    }\n    i = (((*rp) >> padding) >> 2) & 0x03;\n    if (i > png_ptr->num_palette_max)\n    {\n      png_ptr->num_palette_max = i;\n    }\n    i = (((*rp) >> padding) >> 4) & 0x03;\n    if (i > png_ptr->num_palette_max)\n    {\n      png_ptr->num_palette_max = i;\n    }\n    i = (((*rp) >> padding) >> 6) & 0x03;\n    if (i > png_ptr->num_palette_max)\n    {\n      png_ptr->num_palette_max = i;\n    }\n    padding = 0;\n  }\n\n  break;\n  *png_ptr_ref = png_ptr;\n  *padding_ref = padding;\n  *rp_ref = rp;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr_ref",
                        "type": "png_structrp * const",
                        "definition": [
                            "png_structrp * const png_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "padding_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const padding_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rp_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const rp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr = *png_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "padding",
                        "type": "int",
                        "definition": [
                            "int padding = *padding_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep rp = *rp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = ((*rp) >> padding) & 0x03"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_set_write_fn",
            "header": "extern void png_set_write_fn(png_structrp png_ptr, png_voidp io_ptr, png_rw_ptr write_data_fn, png_flush_ptr output_flush_fn)",
            "params": [
                "png_structrp png_ptr",
                "png_voidp io_ptr",
                "png_rw_ptr write_data_fn",
                "png_flush_ptr output_flush_fn"
            ],
            "definition": "void png_set_write_fn(png_structrp png_ptr, png_voidp io_ptr, png_rw_ptr write_data_fn, png_flush_ptr output_flush_fn)\n{\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  png_ptr->io_ptr = io_ptr;\n  if (write_data_fn != 0)\n  {\n    png_ptr->write_data_fn = write_data_fn;\n  }\n  else\n    png_ptr->write_data_fn = png_default_write_data;\n  if (output_flush_fn != 0)\n  {\n    png_ptr->output_flush_fn = output_flush_fn;\n  }\n  else\n    png_ptr->output_flush_fn = png_default_flush;\n  if (png_ptr->read_data_fn != 0)\n  {\n    png_ptr->read_data_fn = 0;\n    png_warning(png_ptr, \"Can't set both read_data_fn and write_data_fn in the same structure\");\n  }\n}\n\n",
            "calle": [
                "png_default_flush",
                "png_default_write_data",
                "png_warning"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "io_ptr",
                        "type": "png_voidp",
                        "definition": [
                            "png_voidp io_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "write_data_fn",
                        "type": "png_rw_ptr",
                        "definition": [
                            "png_rw_ptr write_data_fn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_flush_fn",
                        "type": "png_flush_ptr",
                        "definition": [
                            "png_flush_ptr output_flush_fn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_default_write_data",
            "header": "extern void png_default_write_data(png_structp png_ptr, png_bytep data, size_t length)",
            "params": [
                "png_structp png_ptr",
                "png_bytep data",
                "size_t length"
            ],
            "definition": "void png_default_write_data(png_structp png_ptr, png_bytep data, size_t length)\n{\n  size_t check;\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  check = fwrite(data, 1, length, (png_FILE_p) png_ptr->io_ptr);\n  if (check != length)\n  {\n    png_error(png_ptr, \"Write Error\");\n  }\n}\n\n",
            "calle": [
                "fwrite",
                "png_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "check",
                        "type": "size_t",
                        "definition": [
                            "size_t check"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_default_flush",
            "header": "extern void png_default_flush(png_structp png_ptr)",
            "params": [
                "png_structp png_ptr"
            ],
            "definition": "void png_default_flush(png_structp png_ptr)\n{\n  png_FILE_p io_ptr;\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  io_ptr = png_ptr->io_ptr;\n  fflush(io_ptr);\n}\n\n",
            "calle": [
                "fflush"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "io_ptr",
                        "type": "png_FILE_p",
                        "definition": [
                            "png_FILE_p io_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_write_data",
            "header": "extern void png_write_data(png_structrp png_ptr, png_const_bytep data, size_t length)",
            "params": [
                "png_structrp png_ptr",
                "png_const_bytep data",
                "size_t length"
            ],
            "definition": "void png_write_data(png_structrp png_ptr, png_const_bytep data, size_t length)\n{\n  if (png_ptr->write_data_fn != 0)\n  {\n    (*png_ptr->write_data_fn)(png_ptr, (png_bytep) ((void *) ((const void *) data)), length);\n  }\n  else\n    png_error(png_ptr, \"Call to NULL write function\");\n}\n\n",
            "calle": [
                "*png_ptr->write_data_fn",
                "png_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_flush",
            "header": "extern void png_flush(png_structrp png_ptr)",
            "params": [
                "png_structrp png_ptr"
            ],
            "definition": "void png_flush(png_structrp png_ptr)\n{\n  if (png_ptr->output_flush_fn != 0)\n  {\n    (*png_ptr->output_flush_fn)(png_ptr);\n  }\n}\n\n",
            "calle": [
                "*png_ptr->output_flush_fn"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_create_write_struct",
            "header": "extern png_structp png_create_write_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)",
            "params": [
                "png_const_charp user_png_ver",
                "png_voidp error_ptr",
                "png_error_ptr error_fn",
                "png_error_ptr warn_fn"
            ],
            "definition": "png_structp png_create_write_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn)\n{\n  png_structrp png_ptr = png_create_png_struct(user_png_ver, error_ptr, error_fn, warn_fn, 0, 0, 0);\n  if (png_ptr != 0)\n  {\n    png_ptr->zbuffer_size = 8192;\n    png_ptr->zlib_strategy = 1;\n    png_ptr->zlib_level = -1;\n    png_ptr->zlib_mem_level = 8;\n    png_ptr->zlib_window_bits = 15;\n    png_ptr->zlib_method = 8;\n    png_ptr->flags |= 0x200000U;\n    png_set_write_fn(png_ptr, 0, 0, 0);\n  }\n  return png_ptr;\n}\n\n",
            "calle": [
                "png_create_png_struct",
                "png_set_write_fn"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "user_png_ver",
                        "type": "png_const_charp",
                        "definition": [
                            "png_const_charp user_png_ver"
                        ]
                    },
                    {
                        "path": null,
                        "name": "error_ptr",
                        "type": "png_voidp",
                        "definition": [
                            "png_voidp error_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "error_fn",
                        "type": "png_error_ptr",
                        "definition": [
                            "png_error_ptr error_fn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "warn_fn",
                        "type": "png_error_ptr",
                        "definition": [
                            "png_error_ptr warn_fn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr = png_create_png_struct(user_png_ver, error_ptr, error_fn, warn_fn, 0, 0, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_write_info_before_PLTE",
            "header": "extern void png_write_info_before_PLTE(png_structrp png_ptr, png_const_inforp info_ptr)",
            "params": [
                "png_structrp png_ptr",
                "png_const_inforp info_ptr"
            ],
            "definition": "void png_write_info_before_PLTE(png_structrp png_ptr, png_const_inforp info_ptr)\n{\n  (void) 0;\n  if ((png_ptr == 0) || (info_ptr == 0))\n  {\n    return;\n  }\n  if ((png_ptr->mode & 0x400U) == 0)\n  {\n    png_write_sig(png_ptr);\n    png_write_IHDR(png_ptr, info_ptr->width, info_ptr->height, info_ptr->bit_depth, info_ptr->color_type, info_ptr->compression_type, info_ptr->filter_type, info_ptr->interlace_type);\n    if ((info_ptr->valid & 0x0002U) != 0)\n    {\n      png_write_sBIT(png_ptr, &info_ptr->sig_bit, info_ptr->color_type);\n    }\n    write_unknown_chunks(png_ptr, info_ptr, 0x01);\n    png_ptr->mode |= 0x400U;\n  }\n}\n\n",
            "calle": [
                "png_write_IHDR",
                "png_write_sBIT",
                "png_write_sig",
                "write_unknown_chunks"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_const_inforp",
                        "definition": [
                            "png_const_inforp info_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_write_info",
            "header": "extern void png_write_info(png_structrp png_ptr, png_const_inforp info_ptr)",
            "params": [
                "png_structrp png_ptr",
                "png_const_inforp info_ptr"
            ],
            "definition": "void png_write_info(png_structrp png_ptr, png_const_inforp info_ptr)\n{\n  (void) 0;\n  if ((png_ptr == 0) || (info_ptr == 0))\n  {\n    return;\n  }\n  png_write_info_before_PLTE(png_ptr, info_ptr);\n  if ((info_ptr->valid & 0x0008U) != 0)\n  {\n    png_write_PLTE(png_ptr, info_ptr->palette, (png_uint_32) info_ptr->num_palette);\n  }\n  else\n    if (info_ptr->color_type == (2 | 1))\n  {\n    png_error(png_ptr, \"Valid palette required for paletted images\");\n  }\n  if ((info_ptr->valid & 0x0010U) != 0)\n  {\n    png_write_tRNS(png_ptr, info_ptr->trans_alpha, &info_ptr->trans_color, info_ptr->num_trans, info_ptr->color_type);\n  }\n  if ((info_ptr->valid & 0x0020U) != 0)\n  {\n    png_write_bKGD(png_ptr, &info_ptr->background, info_ptr->color_type);\n  }\n  if ((info_ptr->valid & 0x0040U) != 0)\n  {\n    png_write_hIST(png_ptr, info_ptr->hist, info_ptr->num_palette);\n  }\n  write_unknown_chunks(png_ptr, info_ptr, 0x02);\n}\n\n",
            "calle": [
                "png_error",
                "png_write_PLTE",
                "png_write_bKGD",
                "png_write_hIST",
                "png_write_info_before_PLTE",
                "png_write_tRNS",
                "write_unknown_chunks"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_const_inforp",
                        "definition": [
                            "png_const_inforp info_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_set_flush",
            "header": "extern void png_set_flush(png_structrp png_ptr, int nrows)",
            "params": [
                "png_structrp png_ptr",
                "int nrows"
            ],
            "definition": "void png_set_flush(png_structrp png_ptr, int nrows)\n{\n  (void) 0;\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  png_ptr->flush_dist = (nrows < 0) ? (0) : ((png_uint_32) nrows);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nrows",
                        "type": "int",
                        "definition": [
                            "int nrows"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_write_flush",
            "header": "extern void png_write_flush(png_structrp png_ptr)",
            "params": [
                "png_structrp png_ptr"
            ],
            "definition": "void png_write_flush(png_structrp png_ptr)\n{\n  (void) 0;\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  if (png_ptr->row_number >= png_ptr->num_rows)\n  {\n    return;\n  }\n  png_compress_IDAT(png_ptr, 0, 0, 2);\n  png_ptr->flush_rows = 0;\n  png_flush(png_ptr);\n}\n\n",
            "calle": [
                "png_compress_IDAT",
                "png_flush"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_write_row",
            "header": "extern void png_write_row(png_structrp png_ptr, png_const_bytep row)",
            "params": [
                "png_structrp png_ptr",
                "png_const_bytep row"
            ],
            "definition": "void png_write_row(png_structrp png_ptr, png_const_bytep row)\n{\n  png_row_info row_info;\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  (void) 0;\n  if ((png_ptr->row_number == 0) && (png_ptr->pass == 0))\n  {\n    if ((png_ptr->mode & 0x400U) == 0)\n    {\n      png_error(png_ptr, \"png_write_info was never called before png_write_row\");\n    }\n    png_write_start_row(png_ptr);\n  }\n  if ((png_ptr->interlaced != 0) && ((png_ptr->transformations & 0x0002U) != 0))\n  {\n    helper_png_write_row_1(png_ptr);\n  }\n  row_info.color_type = png_ptr->color_type;\n  row_info.width = png_ptr->usr_width;\n  row_info.channels = png_ptr->usr_channels;\n  row_info.bit_depth = png_ptr->usr_bit_depth;\n  row_info.pixel_depth = (png_byte) (row_info.bit_depth * row_info.channels);\n  row_info.rowbytes = (row_info.pixel_depth >= 8) ? (((size_t) row_info.width) * (((size_t) row_info.pixel_depth) >> 3)) : (((((size_t) row_info.width) * ((size_t) row_info.pixel_depth)) + 7) >> 3);\n  (void) 0;\n  (void) 0;\n  (void) 0;\n  (void) 0;\n  (void) 0;\n  (void) 0;\n  memcpy(png_ptr->row_buf + 1, row, row_info.rowbytes);\n  if ((png_ptr->interlaced && (png_ptr->pass < 6)) && ((png_ptr->transformations & 0x0002U) != 0))\n  {\n    png_do_write_interlace(&row_info, png_ptr->row_buf + 1, png_ptr->pass);\n    if (row_info.width == 0)\n    {\n      png_write_finish_row(png_ptr);\n      return;\n    }\n  }\n  if ((row_info.pixel_depth != png_ptr->pixel_depth) || (row_info.pixel_depth != png_ptr->transformed_pixel_depth))\n  {\n    png_error(png_ptr, \"internal write transform logic error\");\n  }\n  if ((row_info.color_type == (2 | 1)) && (png_ptr->num_palette_max >= 0))\n  {\n    png_do_check_palette_indexes(png_ptr, &row_info);\n  }\n  png_write_find_filter(png_ptr, &row_info);\n  if (png_ptr->write_row_fn != 0)\n  {\n    (*png_ptr->write_row_fn)(png_ptr, png_ptr->row_number, png_ptr->pass);\n  }\n}\n\n",
            "calle": [
                "*png_ptr->write_row_fn",
                "helper_png_write_row_1",
                "memcpy",
                "png_do_check_palette_indexes",
                "png_do_write_interlace",
                "png_error",
                "png_write_find_filter",
                "png_write_finish_row",
                "png_write_start_row"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_info",
                        "type": "png_row_info",
                        "definition": [
                            "png_row_info row_info"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_write_rows",
            "header": "extern void png_write_rows(png_structrp png_ptr, png_bytepp row, png_uint_32 num_rows)",
            "params": [
                "png_structrp png_ptr",
                "png_bytepp row",
                "png_uint_32 num_rows"
            ],
            "definition": "void png_write_rows(png_structrp png_ptr, png_bytepp row, png_uint_32 num_rows)\n{\n  png_uint_32 i;\n  png_bytepp rp;\n  (void) 0;\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  for (i = 0, rp = row; i < num_rows; i += 1, rp += 1)\n  {\n    png_write_row(png_ptr, *rp);\n  }\n\n}\n\n",
            "calle": [
                "png_write_row"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_rows",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 num_rows"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rp",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp rp"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_write_image",
            "header": "extern void png_write_image(png_structrp png_ptr, png_bytepp image)",
            "params": [
                "png_structrp png_ptr",
                "png_bytepp image"
            ],
            "definition": "void png_write_image(png_structrp png_ptr, png_bytepp image)\n{\n  png_uint_32 i;\n  int pass;\n  int num_pass;\n  png_bytepp rp;\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  (void) 0;\n  num_pass = png_set_interlace_handling(png_ptr);\n  for (pass = 0; pass < num_pass; pass += 1)\n  {\n    for (i = 0, rp = image; i < png_ptr->height; i += 1, rp += 1)\n    {\n      png_write_row(png_ptr, *rp);\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "png_set_interlace_handling",
                "png_write_row"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "image",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp image"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pass",
                        "type": "int",
                        "definition": [
                            "int pass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_pass",
                        "type": "int",
                        "definition": [
                            "int num_pass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rp",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp rp"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_write_end",
            "header": "extern void png_write_end(png_structrp png_ptr, png_inforp info_ptr)",
            "params": [
                "png_structrp png_ptr",
                "png_inforp info_ptr"
            ],
            "definition": "void png_write_end(png_structrp png_ptr, png_inforp info_ptr)\n{\n  (void) 0;\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  if ((png_ptr->mode & 0x04U) == 0)\n  {\n    png_error(png_ptr, \"No IDATs written into file\");\n  }\n  if (png_ptr->num_palette_max > png_ptr->num_palette)\n  {\n    png_benign_error(png_ptr, \"Wrote palette index exceeding num_palette\");\n  }\n  if (info_ptr != 0)\n  {\n    write_unknown_chunks(png_ptr, info_ptr, 0x08);\n  }\n  png_ptr->mode |= 0x08;\n  png_write_IEND(png_ptr);\n}\n\n",
            "calle": [
                "png_benign_error",
                "png_error",
                "png_write_IEND",
                "write_unknown_chunks"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_destroy_write_struct",
            "header": "extern void png_destroy_write_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr)",
            "params": [
                "png_structpp png_ptr_ptr",
                "png_infopp info_ptr_ptr"
            ],
            "definition": "void png_destroy_write_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr)\n{\n  (void) 0;\n  if (png_ptr_ptr != 0)\n  {\n    png_structrp png_ptr = *png_ptr_ptr;\n    if (png_ptr != 0)\n    {\n      png_destroy_info_struct(png_ptr, info_ptr_ptr);\n      *png_ptr_ptr = 0;\n      png_write_destroy(png_ptr);\n      png_destroy_png_struct(png_ptr);\n    }\n  }\n}\n\n",
            "calle": [
                "png_destroy_info_struct",
                "png_destroy_png_struct",
                "png_write_destroy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr_ptr",
                        "type": "png_structpp",
                        "definition": [
                            "png_structpp png_ptr_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr_ptr",
                        "type": "png_infopp",
                        "definition": [
                            "png_infopp info_ptr_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr = *png_ptr_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_set_filter",
            "header": "extern void png_set_filter(png_structrp png_ptr, int method, int filters)",
            "params": [
                "png_structrp png_ptr",
                "int method",
                "int filters"
            ],
            "definition": "void png_set_filter(png_structrp png_ptr, int method, int filters)\n{\n  (void) 0;\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  if (method == 0)\n  {\n    helper_png_set_filter_1(&png_ptr, &filters);\n  }\n  else\n    png_error(png_ptr, \"Unknown custom filter method\");\n}\n\n",
            "calle": [
                "helper_png_set_filter_1",
                "png_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "method",
                        "type": "int",
                        "definition": [
                            "int method"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filters",
                        "type": "int",
                        "definition": [
                            "int filters"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_set_compression_level",
            "header": "extern void png_set_compression_level(png_structrp png_ptr, int level)",
            "params": [
                "png_structrp png_ptr",
                "int level"
            ],
            "definition": "void png_set_compression_level(png_structrp png_ptr, int level)\n{\n  (void) 0;\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  png_ptr->zlib_level = level;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "int",
                        "definition": [
                            "int level"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_set_compression_mem_level",
            "header": "extern void png_set_compression_mem_level(png_structrp png_ptr, int mem_level)",
            "params": [
                "png_structrp png_ptr",
                "int mem_level"
            ],
            "definition": "void png_set_compression_mem_level(png_structrp png_ptr, int mem_level)\n{\n  (void) 0;\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  png_ptr->zlib_mem_level = mem_level;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mem_level",
                        "type": "int",
                        "definition": [
                            "int mem_level"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_set_compression_strategy",
            "header": "extern void png_set_compression_strategy(png_structrp png_ptr, int strategy)",
            "params": [
                "png_structrp png_ptr",
                "int strategy"
            ],
            "definition": "void png_set_compression_strategy(png_structrp png_ptr, int strategy)\n{\n  (void) 0;\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  png_ptr->flags |= 0x0001U;\n  png_ptr->zlib_strategy = strategy;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strategy",
                        "type": "int",
                        "definition": [
                            "int strategy"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_set_compression_window_bits",
            "header": "extern void png_set_compression_window_bits(png_structrp png_ptr, int window_bits)",
            "params": [
                "png_structrp png_ptr",
                "int window_bits"
            ],
            "definition": "void png_set_compression_window_bits(png_structrp png_ptr, int window_bits)\n{\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  if (window_bits > 15)\n  {\n    png_warning(png_ptr, \"Only compression windows <= 32k supported by PNG\");\n    window_bits = 15;\n  }\n  else\n    if (window_bits < 8)\n  {\n    png_warning(png_ptr, \"Only compression windows >= 256 supported by PNG\");\n    window_bits = 8;\n  }\n  png_ptr->zlib_window_bits = window_bits;\n}\n\n",
            "calle": [
                "png_warning"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "window_bits",
                        "type": "int",
                        "definition": [
                            "int window_bits"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_set_compression_method",
            "header": "extern void png_set_compression_method(png_structrp png_ptr, int method)",
            "params": [
                "png_structrp png_ptr",
                "int method"
            ],
            "definition": "void png_set_compression_method(png_structrp png_ptr, int method)\n{\n  (void) 0;\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  if (method != 8)\n  {\n    png_warning(png_ptr, \"Only compression method 8 is supported by PNG\");\n  }\n  png_ptr->zlib_method = method;\n}\n\n",
            "calle": [
                "png_warning"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "method",
                        "type": "int",
                        "definition": [
                            "int method"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_set_write_status_fn",
            "header": "extern void png_set_write_status_fn(png_structrp png_ptr, png_write_status_ptr write_row_fn)",
            "params": [
                "png_structrp png_ptr",
                "png_write_status_ptr write_row_fn"
            ],
            "definition": "void png_set_write_status_fn(png_structrp png_ptr, png_write_status_ptr write_row_fn)\n{\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  png_ptr->write_row_fn = write_row_fn;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "write_row_fn",
                        "type": "png_write_status_ptr",
                        "definition": [
                            "png_write_status_ptr write_row_fn"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_write_png",
            "header": "extern void png_write_png(png_structrp png_ptr, png_inforp info_ptr, int transforms, png_voidp params)",
            "params": [
                "png_structrp png_ptr",
                "png_inforp info_ptr",
                "int transforms",
                "voidp params"
            ],
            "definition": "void png_write_png(png_structrp png_ptr, png_inforp info_ptr, int transforms, voidp params)\n{\n  if ((png_ptr == 0) || (info_ptr == 0))\n  {\n    return;\n  }\n  if ((info_ptr->valid & 0x8000U) == 0)\n  {\n    png_app_error(png_ptr, \"no rows for png_write_image to write\");\n    return;\n  }\n  png_write_info(png_ptr, info_ptr);\n  if ((transforms & 0x0020) != 0)\n  {\n    png_app_error(png_ptr, \"PNG_TRANSFORM_INVERT_MONO not supported\");\n  }\n  if ((transforms & 0x0040) != 0)\n  {\n    png_app_error(png_ptr, \"PNG_TRANSFORM_SHIFT not supported\");\n  }\n  if ((transforms & 0x0004) != 0)\n  {\n    png_app_error(png_ptr, \"PNG_TRANSFORM_PACKING not supported\");\n  }\n  if ((transforms & 0x0100) != 0)\n  {\n    png_app_error(png_ptr, \"PNG_TRANSFORM_SWAP_ALPHA not supported\");\n  }\n  if ((transforms & (0x1000 | 0x0800)) != 0)\n  {\n    png_app_error(png_ptr, \"PNG_TRANSFORM_STRIP_FILLER not supported\");\n  }\n  if ((transforms & 0x0080) != 0)\n  {\n    png_app_error(png_ptr, \"PNG_TRANSFORM_BGR not supported\");\n  }\n  if ((transforms & 0x0200) != 0)\n  {\n    png_app_error(png_ptr, \"PNG_TRANSFORM_SWAP_ENDIAN not supported\");\n  }\n  if ((transforms & 0x0008) != 0)\n  {\n    png_app_error(png_ptr, \"PNG_TRANSFORM_PACKSWAP not supported\");\n  }\n  if ((transforms & 0x0400) != 0)\n  {\n    png_app_error(png_ptr, \"PNG_TRANSFORM_INVERT_ALPHA not supported\");\n  }\n  png_write_image(png_ptr, info_ptr->row_pointers);\n  png_write_end(png_ptr, info_ptr);\n  (void) params;\n}\n\n",
            "calle": [
                "png_app_error",
                "png_write_end",
                "png_write_image",
                "png_write_info"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_inforp",
                        "definition": [
                            "png_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "transforms",
                        "type": "int",
                        "definition": [
                            "int transforms"
                        ]
                    },
                    {
                        "path": null,
                        "name": "params",
                        "type": "voidp",
                        "definition": [
                            "voidp params"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "write_unknown_chunks",
            "header": "",
            "params": [
                "png_structrp png_ptr",
                "png_const_inforp info_ptr",
                "unsigned int where"
            ],
            "definition": "static void write_unknown_chunks(png_structrp png_ptr, png_const_inforp info_ptr, unsigned int where)\n{\n  if (info_ptr->unknown_chunks_num != 0)\n  {\n    png_const_unknown_chunkp up;\n    (void) 0;\n    for (up = info_ptr->unknown_chunks; up < (info_ptr->unknown_chunks + info_ptr->unknown_chunks_num); up += 1)\n    {\n      if ((up->location & where) != 0)\n      {\n        int keep = png_handle_as_unknown(png_ptr, up->name);\n        if ((keep != 1) && (((up->name[3] & 0x20) || (keep == 3)) || ((keep == 0) && (png_ptr->unknown_default == 3))))\n        {\n          if (up->size == 0)\n          {\n            png_warning(png_ptr, \"Writing zero-length unknown chunk\");\n          }\n          png_write_chunk(png_ptr, up->name, up->data, up->size);\n        }\n      }\n    }\n\n  }\n}\n\n",
            "calle": [
                "png_handle_as_unknown",
                "png_warning",
                "png_write_chunk"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_const_inforp",
                        "definition": [
                            "png_const_inforp info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "where",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int where"
                        ]
                    },
                    {
                        "path": null,
                        "name": "up",
                        "type": "png_const_unknown_chunkp",
                        "definition": [
                            "png_const_unknown_chunkp up"
                        ]
                    },
                    {
                        "path": null,
                        "name": "keep",
                        "type": "int",
                        "definition": [
                            "int keep = png_handle_as_unknown(png_ptr, up->name)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_write_destroy",
            "header": "",
            "params": [
                "png_structrp png_ptr"
            ],
            "definition": "static void png_write_destroy(png_structrp png_ptr)\n{\n  (void) 0;\n  if ((png_ptr->flags & 0x0002U) != 0)\n  {\n    deflateEnd(&png_ptr->zstream);\n  }\n  png_free_buffer_list(png_ptr, &png_ptr->zbuffer_list);\n  png_free(png_ptr, png_ptr->row_buf);\n  png_ptr->row_buf = 0;\n  png_free(png_ptr, png_ptr->prev_row);\n  png_free(png_ptr, png_ptr->try_row);\n  png_free(png_ptr, png_ptr->tst_row);\n  png_ptr->prev_row = 0;\n  png_ptr->try_row = 0;\n  png_ptr->tst_row = 0;\n  png_free(png_ptr, png_ptr->chunk_list);\n  png_ptr->chunk_list = 0;\n}\n\n",
            "calle": [
                "deflateEnd",
                "png_free",
                "png_free_buffer_list"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_png_write_row_1",
            "header": "",
            "params": [
                "png_structrp png_ptr"
            ],
            "definition": "void helper_png_write_row_1(png_structrp png_ptr)\n{\n  switch (png_ptr->pass)\n  {\n    case 0:\n    {\n      if ((png_ptr->row_number & 0x07) != 0)\n      {\n        png_write_finish_row(png_ptr);\n        return;\n      }\n      break;\n    }\n\n    case 1:\n    {\n      if (((png_ptr->row_number & 0x07) != 0) || (png_ptr->width < 5))\n      {\n        png_write_finish_row(png_ptr);\n        return;\n      }\n      break;\n    }\n\n    case 2:\n    {\n      if ((png_ptr->row_number & 0x07) != 4)\n      {\n        png_write_finish_row(png_ptr);\n        return;\n      }\n      break;\n    }\n\n    case 3:\n    {\n      if (((png_ptr->row_number & 0x03) != 0) || (png_ptr->width < 3))\n      {\n        png_write_finish_row(png_ptr);\n        return;\n      }\n      break;\n    }\n\n    case 4:\n    {\n      if ((png_ptr->row_number & 0x03) != 2)\n      {\n        png_write_finish_row(png_ptr);\n        return;\n      }\n      break;\n    }\n\n    case 5:\n    {\n      if (((png_ptr->row_number & 0x01) != 0) || (png_ptr->width < 2))\n      {\n        png_write_finish_row(png_ptr);\n        return;\n      }\n      break;\n    }\n\n    case 6:\n    {\n      if ((png_ptr->row_number & 0x01) == 0)\n      {\n        png_write_finish_row(png_ptr);\n        return;\n      }\n      break;\n    }\n\n    default:\n    {\n      break;\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "png_write_finish_row"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_png_set_filter_1",
            "header": "",
            "params": [
                "png_structrp * const png_ptr_ref",
                "int * const filters_ref"
            ],
            "definition": "void helper_png_set_filter_1(png_structrp * const png_ptr_ref, int * const filters_ref)\n{\n  png_structrp png_ptr = *png_ptr_ref;\n  int filters = *filters_ref;\n  switch (filters & (((((0x08 | 0x10) | 0x20) | 0x40) | 0x80) | 0x07))\n  {\n    case 5:\n\n    case 6:\n\n    case 7:\n    {\n      png_app_error(png_ptr, \"Unknown row filter for method 0\");\n    }\n\n    case 0:\n    {\n      png_ptr->do_filter = 0x08;\n      break;\n    }\n\n    case 1:\n    {\n      png_ptr->do_filter = 0x10;\n      break;\n    }\n\n    case 2:\n    {\n      png_ptr->do_filter = 0x20;\n      break;\n    }\n\n    case 3:\n    {\n      png_ptr->do_filter = 0x40;\n      break;\n    }\n\n    case 4:\n    {\n      png_ptr->do_filter = 0x80;\n      break;\n    }\n\n    default:\n    {\n      png_ptr->do_filter = (png_byte) filters;\n      break;\n    }\n\n  }\n\n  if (png_ptr->row_buf != 0)\n  {\n    helper_helper_png_set_filter_1_1(&png_ptr, &filters);\n  }\n  png_ptr->do_filter = (png_byte) filters;\n  *png_ptr_ref = png_ptr;\n  *filters_ref = filters;\n}\n\n",
            "calle": [
                "helper_helper_png_set_filter_1_1",
                "png_app_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr_ref",
                        "type": "png_structrp * const",
                        "definition": [
                            "png_structrp * const png_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filters_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const filters_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr = *png_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filters",
                        "type": "int",
                        "definition": [
                            "int filters = *filters_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_png_set_filter_1_1",
            "header": "",
            "params": [
                "png_structrp * const png_ptr_ref",
                "int * const filters_ref"
            ],
            "definition": "void helper_helper_png_set_filter_1_1(png_structrp * const png_ptr_ref, int * const filters_ref)\n{\n  png_structrp png_ptr = *png_ptr_ref;\n  int filters = *filters_ref;\n  int num_filters;\n  png_alloc_size_t buf_size;\n  if (png_ptr->height == 1)\n  {\n    filters &= ~((0x20 | 0x40) | 0x80);\n  }\n  if (png_ptr->width == 1)\n  {\n    filters &= ~((0x10 | 0x40) | 0x80);\n  }\n  if (((filters & ((0x20 | 0x40) | 0x80)) != 0) && (png_ptr->prev_row == 0))\n  {\n    png_app_warning(png_ptr, \"png_set_filter: UP/AVG/PAETH cannot be added after start\");\n    filters &= ~((0x20 | 0x40) | 0x80);\n  }\n  num_filters = 0;\n  if (filters & 0x10)\n  {\n    num_filters += 1;\n  }\n  if (filters & 0x20)\n  {\n    num_filters += 1;\n  }\n  if (filters & 0x40)\n  {\n    num_filters += 1;\n  }\n  if (filters & 0x80)\n  {\n    num_filters += 1;\n  }\n  buf_size = (((png_ptr->usr_channels * png_ptr->usr_bit_depth) >= 8) ? (((size_t) png_ptr->width) * (((size_t) (png_ptr->usr_channels * png_ptr->usr_bit_depth)) >> 3)) : (((((size_t) png_ptr->width) * ((size_t) (png_ptr->usr_channels * png_ptr->usr_bit_depth))) + 7) >> 3)) + 1;\n  if (png_ptr->try_row == 0)\n  {\n    png_ptr->try_row = png_malloc(png_ptr, buf_size);\n  }\n  if (num_filters > 1)\n  {\n    if (png_ptr->tst_row == 0)\n    {\n      png_ptr->tst_row = png_malloc(png_ptr, buf_size);\n    }\n  }\n  *png_ptr_ref = png_ptr;\n  *filters_ref = filters;\n}\n\n",
            "calle": [
                "png_app_warning",
                "png_malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr_ref",
                        "type": "png_structrp * const",
                        "definition": [
                            "png_structrp * const png_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filters_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const filters_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr = *png_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filters",
                        "type": "int",
                        "definition": [
                            "int filters = *filters_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_filters",
                        "type": "int",
                        "definition": [
                            "int num_filters"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_size",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t buf_size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_write_sig",
            "header": "extern void png_write_sig(png_structrp png_ptr)",
            "params": [
                "png_structrp png_ptr"
            ],
            "definition": "void png_write_sig(png_structrp png_ptr)\n{\n  png_byte png_signature[8] = {137, 80, 78, 71, 13, 10, 26, 10};\n  png_ptr->io_state = 0x0002 | 0x0010;\n  png_write_data(png_ptr, &png_signature[png_ptr->sig_bytes], (size_t) (8 - png_ptr->sig_bytes));\n  if (png_ptr->sig_bytes < 3)\n  {\n    png_ptr->mode |= 0x1000U;\n  }\n}\n\n",
            "calle": [
                "png_write_data"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_signature",
                        "type": "png_byte [8]",
                        "definition": [
                            "png_byte png_signature[8] = {137, 80, 78, 71, 13, 10, 26, 10}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_write_chunk",
            "header": "extern void png_write_chunk(png_structrp png_ptr, png_const_bytep chunk_name, png_const_bytep data, size_t length)",
            "params": [
                "png_structrp png_ptr",
                "png_const_bytep chunk_string",
                "png_const_bytep data",
                "size_t length"
            ],
            "definition": "void png_write_chunk(png_structrp png_ptr, png_const_bytep chunk_string, png_const_bytep data, size_t length)\n{\n  png_write_complete_chunk(png_ptr, (((((png_uint_32) (0xff & chunk_string[0])) << 24) | (((png_uint_32) (0xff & chunk_string[1])) << 16)) | (((png_uint_32) (0xff & chunk_string[2])) << 8)) | (((png_uint_32) (0xff & chunk_string[3])) << 0), data, length);\n}\n\n",
            "calle": [
                "png_write_complete_chunk"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chunk_string",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep chunk_string"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_write_chunk_start",
            "header": "extern void png_write_chunk_start(png_structrp png_ptr, png_const_bytep chunk_name, png_uint_32 length)",
            "params": [
                "png_structrp png_ptr",
                "png_const_bytep chunk_string",
                "png_uint_32 length"
            ],
            "definition": "void png_write_chunk_start(png_structrp png_ptr, png_const_bytep chunk_string, png_uint_32 length)\n{\n  png_write_chunk_header(png_ptr, (((((png_uint_32) (0xff & chunk_string[0])) << 24) | (((png_uint_32) (0xff & chunk_string[1])) << 16)) | (((png_uint_32) (0xff & chunk_string[2])) << 8)) | (((png_uint_32) (0xff & chunk_string[3])) << 0), length);\n}\n\n",
            "calle": [
                "png_write_chunk_header"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chunk_string",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep chunk_string"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 length"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_write_chunk_data",
            "header": "extern void png_write_chunk_data(png_structrp png_ptr, png_const_bytep data, size_t length)",
            "params": [
                "png_structrp png_ptr",
                "png_const_bytep data",
                "size_t length"
            ],
            "definition": "void png_write_chunk_data(png_structrp png_ptr, png_const_bytep data, size_t length)\n{\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  if ((data != 0) && (length > 0))\n  {\n    png_write_data(png_ptr, data, length);\n    png_calculate_crc(png_ptr, data, length);\n  }\n}\n\n",
            "calle": [
                "png_calculate_crc",
                "png_write_data"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_write_chunk_end",
            "header": "extern void png_write_chunk_end(png_structrp png_ptr)",
            "params": [
                "png_structrp png_ptr"
            ],
            "definition": "void png_write_chunk_end(png_structrp png_ptr)\n{\n  png_byte buf[4];\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  png_ptr->io_state = 0x0002 | 0x0080;\n  png_save_uint_32(buf, png_ptr->crc);\n  png_write_data(png_ptr, buf, 4);\n}\n\n",
            "calle": [
                "png_save_uint_32",
                "png_write_data"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "png_byte [4]",
                        "definition": [
                            "png_byte buf[4]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_save_uint_32",
            "header": "extern void png_save_uint_32(png_bytep buf, png_uint_32 i)",
            "params": [
                "png_bytep buf",
                "png_uint_32 i"
            ],
            "definition": "void png_save_uint_32(png_bytep buf, png_uint_32 i)\n{\n  buf[0] = (png_byte) ((i >> 24) & 0xffU);\n  buf[1] = (png_byte) ((i >> 16) & 0xffU);\n  buf[2] = (png_byte) ((i >> 8) & 0xffU);\n  buf[3] = (png_byte) (i & 0xffU);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buf",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_save_uint_16",
            "header": "extern void png_save_uint_16(png_bytep buf, unsigned int i)",
            "params": [
                "png_bytep buf",
                "unsigned int i"
            ],
            "definition": "void png_save_uint_16(png_bytep buf, unsigned int i)\n{\n  buf[0] = (png_byte) ((i >> 8) & 0xffU);\n  buf[1] = (png_byte) (i & 0xffU);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buf",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_free_buffer_list",
            "header": "extern void png_free_buffer_list(png_structrp png_ptr, png_compression_bufferp *list)",
            "params": [
                "png_structrp png_ptr",
                "png_compression_bufferp *listp"
            ],
            "definition": "void png_free_buffer_list(png_structrp png_ptr, png_compression_bufferp *listp)\n{\n  png_compression_bufferp list = *listp;\n  if (list != 0)\n  {\n    *listp = 0;\n    do\n    {\n      png_compression_bufferp next = list->next;\n      png_free(png_ptr, list);\n      list = next;\n    }\n    while (list != 0);\n  }\n}\n\n",
            "calle": [
                "png_free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "listp",
                        "type": "png_compression_bufferp *",
                        "definition": [
                            "png_compression_bufferp *listp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list",
                        "type": "png_compression_bufferp",
                        "definition": [
                            "png_compression_bufferp list = *listp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next",
                        "type": "png_compression_bufferp",
                        "definition": [
                            "png_compression_bufferp next = list->next"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_write_IHDR",
            "header": "extern void png_write_IHDR(png_structrp png_ptr, png_uint_32 width, png_uint_32 height, int bit_depth, int color_type, int compression_method, int filter_method, int interlace_method)",
            "params": [
                "png_structrp png_ptr",
                "png_uint_32 width",
                "png_uint_32 height",
                "int bit_depth",
                "int color_type",
                "int compression_type",
                "int filter_type",
                "int interlace_type"
            ],
            "definition": "void png_write_IHDR(png_structrp png_ptr, png_uint_32 width, png_uint_32 height, int bit_depth, int color_type, int compression_type, int filter_type, int interlace_type)\n{\n  png_byte buf[13];\n  int is_invalid_depth;\n  (void) 0;\n  switch (color_type)\n  {\n    case 0:\n    {\n      switch (bit_depth)\n      {\n        case 1:\n\n        case 2:\n\n        case 4:\n\n        case 8:\n\n        case 16:\n        {\n          png_ptr->channels = 1;\n          break;\n        }\n\n        default:\n        {\n          png_error(png_ptr, \"Invalid bit depth for grayscale image\");\n        }\n\n      }\n\n      break;\n    }\n\n    case 2:\n    {\n      is_invalid_depth = bit_depth != 8;\n      is_invalid_depth = is_invalid_depth && (bit_depth != 16);\n      if (is_invalid_depth)\n      {\n        png_error(png_ptr, \"Invalid bit depth for RGB image\");\n      }\n      png_ptr->channels = 3;\n      break;\n    }\n\n    case 2 | 1:\n    {\n      switch (bit_depth)\n      {\n        case 1:\n\n        case 2:\n\n        case 4:\n\n        case 8:\n        {\n          png_ptr->channels = 1;\n          break;\n        }\n\n        default:\n        {\n          png_error(png_ptr, \"Invalid bit depth for paletted image\");\n        }\n\n      }\n\n      break;\n    }\n\n    case 4:\n    {\n      is_invalid_depth = bit_depth != 8;\n      is_invalid_depth = is_invalid_depth && (bit_depth != 16);\n      if (is_invalid_depth)\n      {\n        png_error(png_ptr, \"Invalid bit depth for grayscale+alpha image\");\n      }\n      png_ptr->channels = 2;\n      break;\n    }\n\n    case 2 | 4:\n    {\n      is_invalid_depth = bit_depth != 8;\n      is_invalid_depth = is_invalid_depth && (bit_depth != 16);\n      if (is_invalid_depth)\n      {\n        png_error(png_ptr, \"Invalid bit depth for RGBA image\");\n      }\n      png_ptr->channels = 4;\n      break;\n    }\n\n    default:\n    {\n      png_error(png_ptr, \"Invalid image color type specified\");\n    }\n\n  }\n\n  if (compression_type != 0)\n  {\n    png_warning(png_ptr, \"Invalid compression type specified\");\n    compression_type = 0;\n  }\n  if (filter_type != 0)\n  {\n    png_warning(png_ptr, \"Invalid filter type specified\");\n    filter_type = 0;\n  }\n  if ((interlace_type != 0) && (interlace_type != 1))\n  {\n    png_warning(png_ptr, \"Invalid interlace type specified\");\n    interlace_type = 1;\n  }\n  png_ptr->bit_depth = (png_byte) bit_depth;\n  png_ptr->color_type = (png_byte) color_type;\n  png_ptr->interlaced = (png_byte) interlace_type;\n  png_ptr->compression_type = (png_byte) compression_type;\n  png_ptr->width = width;\n  png_ptr->height = height;\n  png_ptr->pixel_depth = (png_byte) (bit_depth * png_ptr->channels);\n  png_ptr->rowbytes = (png_ptr->pixel_depth >= 8) ? (((size_t) width) * (((size_t) png_ptr->pixel_depth) >> 3)) : (((((size_t) width) * ((size_t) png_ptr->pixel_depth)) + 7) >> 3);\n  png_ptr->usr_width = png_ptr->width;\n  png_ptr->usr_bit_depth = png_ptr->bit_depth;\n  png_ptr->usr_channels = png_ptr->channels;\n  png_save_uint_32(buf, width);\n  png_save_uint_32(buf + 4, height);\n  buf[8] = (png_byte) bit_depth;\n  buf[9] = (png_byte) color_type;\n  buf[10] = (png_byte) compression_type;\n  buf[11] = (png_byte) filter_type;\n  buf[12] = (png_byte) interlace_type;\n  png_write_complete_chunk(png_ptr, (((((png_uint_32) 73) << 24) | (((png_uint_32) 72) << 16)) | (((png_uint_32) 68) << 8)) | (((png_uint_32) 82) << 0), buf, 13);\n  if (png_ptr->do_filter == 0x00)\n  {\n    if ((png_ptr->color_type == (2 | 1)) || (png_ptr->bit_depth < 8))\n    {\n      png_ptr->do_filter = 0x08;\n    }\n    else\n      png_ptr->do_filter = (((0x08 | 0x10) | 0x20) | 0x40) | 0x80;\n  }\n  png_ptr->mode = 0x01;\n}\n\n",
            "calle": [
                "png_error",
                "png_save_uint_32",
                "png_warning",
                "png_write_complete_chunk"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bit_depth",
                        "type": "int",
                        "definition": [
                            "int bit_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color_type",
                        "type": "int",
                        "definition": [
                            "int color_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compression_type",
                        "type": "int",
                        "definition": [
                            "int compression_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filter_type",
                        "type": "int",
                        "definition": [
                            "int filter_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "interlace_type",
                        "type": "int",
                        "definition": [
                            "int interlace_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "png_byte [13]",
                        "definition": [
                            "png_byte buf[13]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_invalid_depth",
                        "type": "int",
                        "definition": [
                            "int is_invalid_depth"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_write_PLTE",
            "header": "extern void png_write_PLTE(png_structrp png_ptr, png_const_colorp palette, png_uint_32 num_pal)",
            "params": [
                "png_structrp png_ptr",
                "png_const_colorp palette",
                "png_uint_32 num_pal"
            ],
            "definition": "void png_write_PLTE(png_structrp png_ptr, png_const_colorp palette, png_uint_32 num_pal)\n{\n  png_uint_32 max_palette_length;\n  png_uint_32 i;\n  png_const_colorp pal_ptr;\n  png_byte buf[3];\n  (void) 0;\n  max_palette_length = (png_ptr->color_type == (2 | 1)) ? (1 << png_ptr->bit_depth) : (256);\n  if ((num_pal == 0) || (num_pal > max_palette_length))\n  {\n    if (png_ptr->color_type == (2 | 1))\n    {\n      png_error(png_ptr, \"Invalid number of colors in palette\");\n    }\n    else\n    {\n      png_warning(png_ptr, \"Invalid number of colors in palette\");\n      return;\n    }\n  }\n  if ((png_ptr->color_type & 2) == 0)\n  {\n    png_warning(png_ptr, \"Ignoring request to write a PLTE chunk in grayscale PNG\");\n    return;\n  }\n  png_ptr->num_palette = (png_uint_16) num_pal;\n  (void) 0;\n  png_write_chunk_header(png_ptr, (((((png_uint_32) 80) << 24) | (((png_uint_32) 76) << 16)) | (((png_uint_32) 84) << 8)) | (((png_uint_32) 69) << 0), (png_uint_32) (num_pal * 3));\n  for (i = 0, pal_ptr = palette; i < num_pal; i += 1, pal_ptr += 1)\n  {\n    buf[0] = pal_ptr->red;\n    buf[1] = pal_ptr->green;\n    buf[2] = pal_ptr->blue;\n    png_write_chunk_data(png_ptr, buf, 3);\n  }\n\n  png_write_chunk_end(png_ptr);\n  png_ptr->mode |= 0x02;\n}\n\n",
            "calle": [
                "png_error",
                "png_warning",
                "png_write_chunk_data",
                "png_write_chunk_end",
                "png_write_chunk_header"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "palette",
                        "type": "png_const_colorp",
                        "definition": [
                            "png_const_colorp palette"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_pal",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 num_pal"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_palette_length",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 max_palette_length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pal_ptr",
                        "type": "png_const_colorp",
                        "definition": [
                            "png_const_colorp pal_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "png_byte [3]",
                        "definition": [
                            "png_byte buf[3]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_compress_IDAT",
            "header": "extern void png_compress_IDAT(png_structrp png_ptr, png_const_bytep row_data, png_alloc_size_t row_data_length, int flush)",
            "params": [
                "png_structrp png_ptr",
                "png_const_bytep input",
                "png_alloc_size_t input_len",
                "int flush"
            ],
            "definition": "void png_compress_IDAT(png_structrp png_ptr, png_const_bytep input, png_alloc_size_t input_len, int flush)\n{\n  if (png_ptr->zowner != ((((((png_uint_32) 73) << 24) | (((png_uint_32) 68) << 16)) | (((png_uint_32) 65) << 8)) | (((png_uint_32) 84) << 0)))\n  {\n    if (png_ptr->zbuffer_list == 0)\n    {\n      png_ptr->zbuffer_list = png_malloc(png_ptr, offsetof(png_compression_buffer, output) + png_ptr->zbuffer_size);\n      png_ptr->zbuffer_list->next = 0;\n    }\n    else\n      png_free_buffer_list(png_ptr, &png_ptr->zbuffer_list->next);\n    if (png_deflate_claim(png_ptr, (((((png_uint_32) 73) << 24) | (((png_uint_32) 68) << 16)) | (((png_uint_32) 65) << 8)) | (((png_uint_32) 84) << 0), png_image_size(png_ptr)) != 0)\n    {\n      png_error(png_ptr, png_ptr->zstream.msg);\n    }\n    png_ptr->zstream.next_out = png_ptr->zbuffer_list->output;\n    png_ptr->zstream.avail_out = png_ptr->zbuffer_size;\n  }\n  png_ptr->zstream.next_in = input;\n  png_ptr->zstream.avail_in = 0;\n  for (;;)\n  {\n    helper_png_compress_IDAT_1(&png_ptr, &input_len, flush);\n  }\n\n}\n\n",
            "calle": [
                "helper_png_compress_IDAT_1",
                "offsetof",
                "png_deflate_claim",
                "png_error",
                "png_free_buffer_list",
                "png_image_size",
                "png_malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep input"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_len",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t input_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flush",
                        "type": "int",
                        "definition": [
                            "int flush"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_write_IEND",
            "header": "extern void png_write_IEND(png_structrp png_ptr)",
            "params": [
                "png_structrp png_ptr"
            ],
            "definition": "void png_write_IEND(png_structrp png_ptr)\n{\n  (void) 0;\n  png_write_complete_chunk(png_ptr, (((((png_uint_32) 73) << 24) | (((png_uint_32) 69) << 16)) | (((png_uint_32) 78) << 8)) | (((png_uint_32) 68) << 0), 0, 0);\n  png_ptr->mode |= 0x10U;\n}\n\n",
            "calle": [
                "png_write_complete_chunk"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_write_sBIT",
            "header": "extern void png_write_sBIT(png_structrp png_ptr, png_const_color_8p sbit, int color_type)",
            "params": [
                "png_structrp png_ptr",
                "png_const_color_8p sbit",
                "int color_type"
            ],
            "definition": "void png_write_sBIT(png_structrp png_ptr, png_const_color_8p sbit, int color_type)\n{\n  png_byte buf[4];\n  size_t size;\n  (void) 0;\n  if ((color_type & 2) != 0)\n  {\n    png_byte maxbits;\n    maxbits = (png_byte) ((color_type == (2 | 1)) ? (8) : (png_ptr->usr_bit_depth));\n    if ((((((sbit->red == 0) || (sbit->red > maxbits)) || (sbit->green == 0)) || (sbit->green > maxbits)) || (sbit->blue == 0)) || (sbit->blue > maxbits))\n    {\n      png_warning(png_ptr, \"Invalid sBIT depth specified\");\n      return;\n    }\n    buf[0] = sbit->red;\n    buf[1] = sbit->green;\n    buf[2] = sbit->blue;\n    size = 3;\n  }\n  else\n  {\n    if ((sbit->gray == 0) || (sbit->gray > png_ptr->usr_bit_depth))\n    {\n      png_warning(png_ptr, \"Invalid sBIT depth specified\");\n      return;\n    }\n    buf[0] = sbit->gray;\n    size = 1;\n  }\n  if ((color_type & 4) != 0)\n  {\n    if ((sbit->alpha == 0) || (sbit->alpha > png_ptr->usr_bit_depth))\n    {\n      png_warning(png_ptr, \"Invalid sBIT depth specified\");\n      return;\n    }\n    buf[size] = sbit->alpha;\n    size += 1;\n  }\n  png_write_complete_chunk(png_ptr, (((((png_uint_32) 115) << 24) | (((png_uint_32) 66) << 16)) | (((png_uint_32) 73) << 8)) | (((png_uint_32) 84) << 0), buf, size);\n}\n\n",
            "calle": [
                "png_warning",
                "png_write_complete_chunk"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sbit",
                        "type": "png_const_color_8p",
                        "definition": [
                            "png_const_color_8p sbit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color_type",
                        "type": "int",
                        "definition": [
                            "int color_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "png_byte [4]",
                        "definition": [
                            "png_byte buf[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxbits",
                        "type": "png_byte",
                        "definition": [
                            "png_byte maxbits"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_write_tRNS",
            "header": "extern void png_write_tRNS(png_structrp png_ptr, png_const_bytep trans, png_const_color_16p values, int number, int color_type)",
            "params": [
                "png_structrp png_ptr",
                "png_const_bytep trans_alpha",
                "png_const_color_16p tran",
                "int num_trans",
                "int color_type"
            ],
            "definition": "void png_write_tRNS(png_structrp png_ptr, png_const_bytep trans_alpha, png_const_color_16p tran, int num_trans, int color_type)\n{\n  png_byte buf[6];\n  (void) 0;\n  if (color_type == (2 | 1))\n  {\n    if ((num_trans <= 0) || (num_trans > ((int) png_ptr->num_palette)))\n    {\n      png_app_warning(png_ptr, \"Invalid number of transparent colors specified\");\n      return;\n    }\n    png_write_complete_chunk(png_ptr, (((((png_uint_32) 116) << 24) | (((png_uint_32) 82) << 16)) | (((png_uint_32) 78) << 8)) | (((png_uint_32) 83) << 0), trans_alpha, (size_t) num_trans);\n  }\n  else\n    if (color_type == 0)\n  {\n    if (tran->gray >= (1 << png_ptr->bit_depth))\n    {\n      png_app_warning(png_ptr, \"Ignoring attempt to write tRNS chunk out-of-range for bit_depth\");\n      return;\n    }\n    png_save_uint_16(buf, tran->gray);\n    png_write_complete_chunk(png_ptr, (((((png_uint_32) 116) << 24) | (((png_uint_32) 82) << 16)) | (((png_uint_32) 78) << 8)) | (((png_uint_32) 83) << 0), buf, 2);\n  }\n  else\n    if (color_type == 2)\n  {\n    png_save_uint_16(buf, tran->red);\n    png_save_uint_16(buf + 2, tran->green);\n    png_save_uint_16(buf + 4, tran->blue);\n    if ((png_ptr->bit_depth == 8) && (((buf[0] | buf[2]) | buf[4]) != 0))\n    {\n      png_app_warning(png_ptr, \"Ignoring attempt to write 16-bit tRNS chunk when bit_depth is 8\");\n      return;\n    }\n    png_write_complete_chunk(png_ptr, (((((png_uint_32) 116) << 24) | (((png_uint_32) 82) << 16)) | (((png_uint_32) 78) << 8)) | (((png_uint_32) 83) << 0), buf, 6);\n  }\n  else\n  {\n    png_app_warning(png_ptr, \"Can't write tRNS with an alpha channel\");\n  }\n}\n\n",
            "calle": [
                "png_app_warning",
                "png_save_uint_16",
                "png_write_complete_chunk"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_alpha",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep trans_alpha"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tran",
                        "type": "png_const_color_16p",
                        "definition": [
                            "png_const_color_16p tran"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_trans",
                        "type": "int",
                        "definition": [
                            "int num_trans"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color_type",
                        "type": "int",
                        "definition": [
                            "int color_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "png_byte [6]",
                        "definition": [
                            "png_byte buf[6]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_write_bKGD",
            "header": "extern void png_write_bKGD(png_structrp png_ptr, png_const_color_16p values, int color_type)",
            "params": [
                "png_structrp png_ptr",
                "png_const_color_16p back",
                "int color_type"
            ],
            "definition": "void png_write_bKGD(png_structrp png_ptr, png_const_color_16p back, int color_type)\n{\n  png_byte buf[6];\n  (void) 0;\n  if (color_type == (2 | 1))\n  {\n    if (back->index >= png_ptr->num_palette)\n    {\n      png_warning(png_ptr, \"Invalid background palette index\");\n      return;\n    }\n    buf[0] = back->index;\n    png_write_complete_chunk(png_ptr, (((((png_uint_32) 98) << 24) | (((png_uint_32) 75) << 16)) | (((png_uint_32) 71) << 8)) | (((png_uint_32) 68) << 0), buf, 1);\n  }\n  else\n    if ((color_type & 2) != 0)\n  {\n    png_save_uint_16(buf, back->red);\n    png_save_uint_16(buf + 2, back->green);\n    png_save_uint_16(buf + 4, back->blue);\n    if ((png_ptr->bit_depth == 8) && (((buf[0] | buf[2]) | buf[4]) != 0))\n    {\n      png_warning(png_ptr, \"Ignoring attempt to write 16-bit bKGD chunk when bit_depth is 8\");\n      return;\n    }\n    png_write_complete_chunk(png_ptr, (((((png_uint_32) 98) << 24) | (((png_uint_32) 75) << 16)) | (((png_uint_32) 71) << 8)) | (((png_uint_32) 68) << 0), buf, 6);\n  }\n  else\n  {\n    if (back->gray >= (1 << png_ptr->bit_depth))\n    {\n      png_warning(png_ptr, \"Ignoring attempt to write bKGD chunk out-of-range for bit_depth\");\n      return;\n    }\n    png_save_uint_16(buf, back->gray);\n    png_write_complete_chunk(png_ptr, (((((png_uint_32) 98) << 24) | (((png_uint_32) 75) << 16)) | (((png_uint_32) 71) << 8)) | (((png_uint_32) 68) << 0), buf, 2);\n  }\n}\n\n",
            "calle": [
                "png_save_uint_16",
                "png_warning",
                "png_write_complete_chunk"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "back",
                        "type": "png_const_color_16p",
                        "definition": [
                            "png_const_color_16p back"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color_type",
                        "type": "int",
                        "definition": [
                            "int color_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "png_byte [6]",
                        "definition": [
                            "png_byte buf[6]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_write_hIST",
            "header": "extern void png_write_hIST(png_structrp png_ptr, png_const_uint_16p hist, int num_hist)",
            "params": [
                "png_structrp png_ptr",
                "png_const_uint_16p hist",
                "int num_hist"
            ],
            "definition": "void png_write_hIST(png_structrp png_ptr, png_const_uint_16p hist, int num_hist)\n{\n  int i;\n  png_byte buf[3];\n  (void) 0;\n  if (num_hist > ((int) png_ptr->num_palette))\n  {\n    (void) 0;\n    png_warning(png_ptr, \"Invalid number of histogram entries specified\");\n    return;\n  }\n  png_write_chunk_header(png_ptr, (((((png_uint_32) 104) << 24) | (((png_uint_32) 73) << 16)) | (((png_uint_32) 83) << 8)) | (((png_uint_32) 84) << 0), (png_uint_32) (num_hist * 2));\n  for (i = 0; i < num_hist; i += 1)\n  {\n    png_save_uint_16(buf, hist[i]);\n    png_write_chunk_data(png_ptr, buf, 2);\n  }\n\n  png_write_chunk_end(png_ptr);\n}\n\n",
            "calle": [
                "png_save_uint_16",
                "png_warning",
                "png_write_chunk_data",
                "png_write_chunk_end",
                "png_write_chunk_header"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hist",
                        "type": "png_const_uint_16p",
                        "definition": [
                            "png_const_uint_16p hist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_hist",
                        "type": "int",
                        "definition": [
                            "int num_hist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "png_byte [3]",
                        "definition": [
                            "png_byte buf[3]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_write_finish_row",
            "header": "extern void png_write_finish_row(png_structrp png_ptr)",
            "params": [
                "png_structrp png_ptr"
            ],
            "definition": "void png_write_finish_row(png_structrp png_ptr)\n{\n  static const png_byte png_pass_start[7] = {0, 4, 0, 2, 0, 1, 0};\n  static const png_byte png_pass_inc[7] = {8, 8, 4, 4, 2, 2, 1};\n  static const png_byte png_pass_ystart[7] = {0, 0, 4, 0, 2, 0, 1};\n  static const png_byte png_pass_yinc[7] = {8, 8, 8, 4, 4, 2, 2};\n  (void) 0;\n  png_ptr->row_number += 1;\n  if (png_ptr->row_number < png_ptr->num_rows)\n  {\n    return;\n  }\n  if (png_ptr->interlaced != 0)\n  {\n    png_ptr->row_number = 0;\n    if ((png_ptr->transformations & 0x0002U) != 0)\n    {\n      png_ptr->pass += 1;\n    }\n    else\n    {\n      do\n      {\n        png_ptr->pass += 1;\n        if (png_ptr->pass >= 7)\n        {\n          break;\n        }\n        png_ptr->usr_width = (((png_ptr->width + png_pass_inc[png_ptr->pass]) - 1) - png_pass_start[png_ptr->pass]) / png_pass_inc[png_ptr->pass];\n        png_ptr->num_rows = (((png_ptr->height + png_pass_yinc[png_ptr->pass]) - 1) - png_pass_ystart[png_ptr->pass]) / png_pass_yinc[png_ptr->pass];\n        if ((png_ptr->transformations & 0x0002U) != 0)\n        {\n          break;\n        }\n      }\n      while ((png_ptr->usr_width == 0) || (png_ptr->num_rows == 0));\n    }\n    if (png_ptr->pass < 7)\n    {\n      if (png_ptr->prev_row != 0)\n      {\n        memset(png_ptr->prev_row, 0, (((png_ptr->usr_channels * png_ptr->usr_bit_depth) >= 8) ? (((size_t) png_ptr->width) * (((size_t) (png_ptr->usr_channels * png_ptr->usr_bit_depth)) >> 3)) : (((((size_t) png_ptr->width) * ((size_t) (png_ptr->usr_channels * png_ptr->usr_bit_depth))) + 7) >> 3)) + 1);\n      }\n      return;\n    }\n  }\n  png_compress_IDAT(png_ptr, 0, 0, 4);\n}\n\n",
            "calle": [
                "memset",
                "png_compress_IDAT"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_start",
                        "type": "const png_byte [7]",
                        "definition": [
                            "static const png_byte png_pass_start[7] = {0, 4, 0, 2, 0, 1, 0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_inc",
                        "type": "const png_byte [7]",
                        "definition": [
                            "static const png_byte png_pass_inc[7] = {8, 8, 4, 4, 2, 2, 1}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_ystart",
                        "type": "const png_byte [7]",
                        "definition": [
                            "static const png_byte png_pass_ystart[7] = {0, 0, 4, 0, 2, 0, 1}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_yinc",
                        "type": "const png_byte [7]",
                        "definition": [
                            "static const png_byte png_pass_yinc[7] = {8, 8, 8, 4, 4, 2, 2}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_write_start_row",
            "header": "extern void png_write_start_row(png_structrp png_ptr)",
            "params": [
                "png_structrp png_ptr"
            ],
            "definition": "void png_write_start_row(png_structrp png_ptr)\n{\n  static const png_byte png_pass_start[7] = {0, 4, 0, 2, 0, 1, 0};\n  static const png_byte png_pass_inc[7] = {8, 8, 4, 4, 2, 2, 1};\n  static const png_byte png_pass_ystart[7] = {0, 0, 4, 0, 2, 0, 1};\n  static const png_byte png_pass_yinc[7] = {8, 8, 8, 4, 4, 2, 2};\n  png_alloc_size_t buf_size;\n  int usr_pixel_depth;\n  png_byte filters;\n  (void) 0;\n  usr_pixel_depth = png_ptr->usr_channels * png_ptr->usr_bit_depth;\n  buf_size = ((usr_pixel_depth >= 8) ? (((size_t) png_ptr->width) * (((size_t) usr_pixel_depth) >> 3)) : (((((size_t) png_ptr->width) * ((size_t) usr_pixel_depth)) + 7) >> 3)) + 1;\n  png_ptr->transformed_pixel_depth = png_ptr->pixel_depth;\n  png_ptr->maximum_pixel_depth = (png_byte) usr_pixel_depth;\n  png_ptr->row_buf = png_malloc(png_ptr, buf_size);\n  png_ptr->row_buf[0] = 0;\n  filters = png_ptr->do_filter;\n  if (png_ptr->height == 1)\n  {\n    filters &= 0xff & (~((0x20 | 0x40) | 0x80));\n  }\n  if (png_ptr->width == 1)\n  {\n    filters &= 0xff & (~((0x10 | 0x40) | 0x80));\n  }\n  if (filters == 0)\n  {\n    filters = 0x08;\n  }\n  png_ptr->do_filter = filters;\n  if (((filters & (((0x10 | 0x20) | 0x40) | 0x80)) != 0) && (png_ptr->try_row == 0))\n  {\n    helper_png_write_start_row_1(&png_ptr, buf_size, filters);\n  }\n  if ((filters & ((0x40 | 0x20) | 0x80)) != 0)\n  {\n    png_ptr->prev_row = png_calloc(png_ptr, buf_size);\n  }\n  if (png_ptr->interlaced != 0)\n  {\n    if ((png_ptr->transformations & 0x0002U) == 0)\n    {\n      png_ptr->num_rows = (((png_ptr->height + png_pass_yinc[0]) - 1) - png_pass_ystart[0]) / png_pass_yinc[0];\n      png_ptr->usr_width = (((png_ptr->width + png_pass_inc[0]) - 1) - png_pass_start[0]) / png_pass_inc[0];\n    }\n    else\n    {\n      png_ptr->num_rows = png_ptr->height;\n      png_ptr->usr_width = png_ptr->width;\n    }\n  }\n  else\n  {\n    png_ptr->num_rows = png_ptr->height;\n    png_ptr->usr_width = png_ptr->width;\n  }\n}\n\n",
            "calle": [
                "helper_png_write_start_row_1",
                "png_calloc",
                "png_malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_start",
                        "type": "const png_byte [7]",
                        "definition": [
                            "static const png_byte png_pass_start[7] = {0, 4, 0, 2, 0, 1, 0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_inc",
                        "type": "const png_byte [7]",
                        "definition": [
                            "static const png_byte png_pass_inc[7] = {8, 8, 4, 4, 2, 2, 1}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_ystart",
                        "type": "const png_byte [7]",
                        "definition": [
                            "static const png_byte png_pass_ystart[7] = {0, 0, 4, 0, 2, 0, 1}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_yinc",
                        "type": "const png_byte [7]",
                        "definition": [
                            "static const png_byte png_pass_yinc[7] = {8, 8, 8, 4, 4, 2, 2}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_size",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t buf_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "usr_pixel_depth",
                        "type": "int",
                        "definition": [
                            "int usr_pixel_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filters",
                        "type": "png_byte",
                        "definition": [
                            "png_byte filters"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_do_write_interlace",
            "header": "extern void png_do_write_interlace(png_row_infop row_info, png_bytep row, int pass)",
            "params": [
                "png_row_infop row_info",
                "png_bytep row",
                "int pass"
            ],
            "definition": "void png_do_write_interlace(png_row_infop row_info, png_bytep row, int pass)\n{\n  static const png_byte png_pass_start[7] = {0, 4, 0, 2, 0, 1, 0};\n  static const png_byte png_pass_inc[7] = {8, 8, 4, 4, 2, 2, 1};\n  (void) 0;\n  if (pass < 6)\n  {\n    helper_png_do_write_interlace_1(&row_info, row, pass, png_pass_start, png_pass_inc);\n  }\n}\n\n",
            "calle": [
                "helper_png_do_write_interlace_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "row_info",
                        "type": "png_row_infop",
                        "definition": [
                            "png_row_infop row_info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pass",
                        "type": "int",
                        "definition": [
                            "int pass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_start",
                        "type": "const png_byte [7]",
                        "definition": [
                            "static const png_byte png_pass_start[7] = {0, 4, 0, 2, 0, 1, 0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_inc",
                        "type": "const png_byte [7]",
                        "definition": [
                            "static const png_byte png_pass_inc[7] = {8, 8, 4, 4, 2, 2, 1}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_write_find_filter",
            "header": "extern void png_write_find_filter(png_structrp png_ptr, png_row_infop row_info)",
            "params": [
                "png_structrp png_ptr",
                "png_row_infop row_info"
            ],
            "definition": "void png_write_find_filter(png_structrp png_ptr, png_row_infop row_info)\n{\n  unsigned int filter_to_do = png_ptr->do_filter;\n  png_bytep row_buf;\n  png_bytep best_row;\n  png_uint_32 bpp;\n  size_t mins;\n  size_t row_bytes = row_info->rowbytes;\n  (void) 0;\n  bpp = (row_info->pixel_depth + 7) >> 3;\n  row_buf = png_ptr->row_buf;\n  mins = ((size_t) (-1)) - 256;\n  best_row = png_ptr->row_buf;\n  if ((((size_t) (-1)) / 128) <= row_bytes)\n  {\n    filter_to_do &= 0U - filter_to_do;\n  }\n  else\n    if (((filter_to_do & 0x08) != 0) && (filter_to_do != 0x08))\n  {\n    png_bytep rp;\n    size_t sum = 0;\n    size_t i;\n    unsigned int v;\n    {\n      for (i = 0, rp = row_buf + 1; i < row_bytes; i += 1, rp += 1)\n      {\n        v = *rp;\n        sum += (v < 128) ? (v) : (256 - v);\n      }\n\n    }\n    mins = sum;\n  }\n  if (filter_to_do == 0x10)\n  {\n    png_setup_sub_row_only(png_ptr, bpp, row_bytes);\n    best_row = png_ptr->try_row;\n  }\n  else\n    if ((filter_to_do & 0x10) != 0)\n  {\n    size_t sum;\n    size_t lmins = mins;\n    sum = png_setup_sub_row(png_ptr, bpp, row_bytes, lmins);\n    if (sum < mins)\n    {\n      mins = sum;\n      best_row = png_ptr->try_row;\n      if (png_ptr->tst_row != 0)\n      {\n        png_ptr->try_row = png_ptr->tst_row;\n        png_ptr->tst_row = best_row;\n      }\n    }\n  }\n  if (filter_to_do == 0x20)\n  {\n    png_setup_up_row_only(png_ptr, row_bytes);\n    best_row = png_ptr->try_row;\n  }\n  else\n    if ((filter_to_do & 0x20) != 0)\n  {\n    size_t sum;\n    size_t lmins = mins;\n    sum = png_setup_up_row(png_ptr, row_bytes, lmins);\n    if (sum < mins)\n    {\n      mins = sum;\n      best_row = png_ptr->try_row;\n      if (png_ptr->tst_row != 0)\n      {\n        png_ptr->try_row = png_ptr->tst_row;\n        png_ptr->tst_row = best_row;\n      }\n    }\n  }\n  if (filter_to_do == 0x40)\n  {\n    png_setup_avg_row_only(png_ptr, bpp, row_bytes);\n    best_row = png_ptr->try_row;\n  }\n  else\n    if ((filter_to_do & 0x40) != 0)\n  {\n    size_t sum;\n    size_t lmins = mins;\n    sum = png_setup_avg_row(png_ptr, bpp, row_bytes, lmins);\n    if (sum < mins)\n    {\n      mins = sum;\n      best_row = png_ptr->try_row;\n      if (png_ptr->tst_row != 0)\n      {\n        png_ptr->try_row = png_ptr->tst_row;\n        png_ptr->tst_row = best_row;\n      }\n    }\n  }\n  if (filter_to_do == 0x80)\n  {\n    png_setup_paeth_row_only(png_ptr, bpp, row_bytes);\n    best_row = png_ptr->try_row;\n  }\n  else\n    if ((filter_to_do & 0x80) != 0)\n  {\n    size_t sum;\n    size_t lmins = mins;\n    sum = png_setup_paeth_row(png_ptr, bpp, row_bytes, lmins);\n    if (sum < mins)\n    {\n      best_row = png_ptr->try_row;\n      if (png_ptr->tst_row != 0)\n      {\n        png_ptr->try_row = png_ptr->tst_row;\n        png_ptr->tst_row = best_row;\n      }\n    }\n  }\n  png_write_filtered_row(png_ptr, best_row, row_info->rowbytes + 1);\n}\n\n",
            "calle": [
                "png_setup_avg_row",
                "png_setup_avg_row_only",
                "png_setup_paeth_row",
                "png_setup_paeth_row_only",
                "png_setup_sub_row",
                "png_setup_sub_row_only",
                "png_setup_up_row",
                "png_setup_up_row_only",
                "png_write_filtered_row"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_info",
                        "type": "png_row_infop",
                        "definition": [
                            "png_row_infop row_info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filter_to_do",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int filter_to_do = png_ptr->do_filter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_buf",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep row_buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "best_row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep best_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bpp",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 bpp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mins",
                        "type": "size_t",
                        "definition": [
                            "size_t mins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_bytes",
                        "type": "size_t",
                        "definition": [
                            "size_t row_bytes = row_info->rowbytes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep rp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "size_t",
                        "definition": [
                            "size_t sum",
                            "size_t sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int v"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lmins",
                        "type": "size_t",
                        "definition": [
                            "size_t lmins = mins"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_write_chunk_header",
            "header": "",
            "params": [
                "png_structrp png_ptr",
                "png_uint_32 chunk_name",
                "png_uint_32 length"
            ],
            "definition": "static void png_write_chunk_header(png_structrp png_ptr, png_uint_32 chunk_name, png_uint_32 length)\n{\n  png_byte buf[8];\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  png_ptr->io_state = 0x0002 | 0x0020;\n  png_save_uint_32(buf, length);\n  png_save_uint_32(buf + 4, chunk_name);\n  png_write_data(png_ptr, buf, 8);\n  png_ptr->chunk_name = chunk_name;\n  png_reset_crc(png_ptr);\n  png_calculate_crc(png_ptr, buf + 4, 4);\n  png_ptr->io_state = 0x0002 | 0x0040;\n}\n\n",
            "calle": [
                "png_calculate_crc",
                "png_reset_crc",
                "png_save_uint_32",
                "png_write_data"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chunk_name",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 chunk_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "png_byte [8]",
                        "definition": [
                            "png_byte buf[8]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_write_complete_chunk",
            "header": "",
            "params": [
                "png_structrp png_ptr",
                "png_uint_32 chunk_name",
                "png_const_bytep data",
                "size_t length"
            ],
            "definition": "static void png_write_complete_chunk(png_structrp png_ptr, png_uint_32 chunk_name, png_const_bytep data, size_t length)\n{\n  if (png_ptr == 0)\n  {\n    return;\n  }\n  if (length > ((png_uint_32) 0x7fffffffL))\n  {\n    png_error(png_ptr, \"length exceeds PNG maximum\");\n  }\n  png_write_chunk_header(png_ptr, chunk_name, (png_uint_32) length);\n  png_write_chunk_data(png_ptr, data, length);\n  png_write_chunk_end(png_ptr);\n}\n\n",
            "calle": [
                "png_error",
                "png_write_chunk_data",
                "png_write_chunk_end",
                "png_write_chunk_header"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chunk_name",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 chunk_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "png_const_bytep",
                        "definition": [
                            "png_const_bytep data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_image_size",
            "header": "",
            "params": [
                "png_structrp png_ptr"
            ],
            "definition": "static png_alloc_size_t png_image_size(png_structrp png_ptr)\n{\n  png_uint_32 h = png_ptr->height;\n  if ((png_ptr->rowbytes < 32768) && (h < 32768))\n  {\n    if (png_ptr->interlaced != 0)\n    {\n      png_uint_32 w = png_ptr->width;\n      unsigned int pd = png_ptr->pixel_depth;\n      png_alloc_size_t cb_base;\n      int pass;\n      for (cb_base = 0, pass = 0; pass <= 6; pass += 1)\n      {\n        png_uint_32 pw = (w + (((1 << ((pass > 1) ? ((7 - pass) >> 1) : (3))) - 1) - (((1 & pass) << (3 - ((pass + 1) >> 1))) & 7))) >> ((pass > 1) ? ((7 - pass) >> 1) : (3));\n        if (pw > 0)\n        {\n          cb_base += (((pd >= 8) ? (((size_t) pw) * (((size_t) pd) >> 3)) : (((((size_t) pw) * ((size_t) pd)) + 7) >> 3)) + 1) * ((h + (((1 << ((pass > 2) ? ((8 - pass) >> 1) : (3))) - 1) - (((1 & (~pass)) << (3 - (pass >> 1))) & 7))) >> ((pass > 2) ? ((8 - pass) >> 1) : (3)));\n        }\n      }\n\n      return cb_base;\n    }\n    else\n      return (png_ptr->rowbytes + 1) * h;\n  }\n  else\n    return 0xffffffffU;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "h",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 h = png_ptr->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 w = png_ptr->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pd",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pd = png_ptr->pixel_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb_base",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t cb_base"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pass",
                        "type": "int",
                        "definition": [
                            "int pass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pw",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 pw = (w + (((1 << ((pass > 1) ? ((7 - pass) >> 1) : (3))) - 1) - (((1 & pass) << (3 - ((pass + 1) >> 1))) & 7))) >> ((pass > 1) ? ((7 - pass) >> 1) : (3))"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "optimize_cmf",
            "header": "",
            "params": [
                "png_bytep data",
                "png_alloc_size_t data_size"
            ],
            "definition": "static void optimize_cmf(png_bytep data, png_alloc_size_t data_size)\n{\n  if (data_size <= 16384)\n  {\n    unsigned int z_cmf = data[0];\n    if (((z_cmf & 0x0f) == 8) && ((z_cmf & 0xf0) <= 0x70))\n    {\n      unsigned int z_cinfo;\n      unsigned int half_z_window_size;\n      z_cinfo = z_cmf >> 4;\n      half_z_window_size = 1U << (z_cinfo + 7);\n      if (data_size <= half_z_window_size)\n      {\n        unsigned int tmp;\n        do\n        {\n          half_z_window_size >>= 1;\n          z_cinfo -= 1;\n        }\n        while ((z_cinfo > 0) && (data_size <= half_z_window_size));\n        z_cmf = (z_cmf & 0x0f) | (z_cinfo << 4);\n        data[0] = (png_byte) z_cmf;\n        tmp = data[1] & 0xe0;\n        tmp += 0x1f - (((z_cmf << 8) + tmp) % 0x1f);\n        data[1] = (png_byte) tmp;\n      }\n    }\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_size",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t data_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z_cmf",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int z_cmf = data[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z_cinfo",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int z_cinfo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "half_z_window_size",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int half_z_window_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int tmp"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_deflate_claim",
            "header": "",
            "params": [
                "png_structrp png_ptr",
                "png_uint_32 owner",
                "png_alloc_size_t data_size"
            ],
            "definition": "static int png_deflate_claim(png_structrp png_ptr, png_uint_32 owner, png_alloc_size_t data_size)\n{\n  if (png_ptr->zowner != 0)\n  {\n    helper_png_deflate_claim_1(&png_ptr, owner);\n  }\n  {\n    helper_png_deflate_claim_2(&png_ptr, owner, data_size);\n  }\n}\n\n",
            "calle": [
                "helper_png_deflate_claim_1",
                "helper_png_deflate_claim_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "owner",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 owner"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_size",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t data_size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_write_filtered_row",
            "header": "static void png_write_filtered_row(png_structrp png_ptr, png_bytep filtered_row, size_t row_bytes)",
            "params": [
                "png_structrp png_ptr",
                "png_bytep filtered_row",
                "size_t full_row_length"
            ],
            "definition": "static void png_write_filtered_row(png_structrp png_ptr, png_bytep filtered_row, size_t full_row_length)\n{\n  (void) 0;\n  (void) 0;\n  png_compress_IDAT(png_ptr, filtered_row, full_row_length, 0);\n  if (png_ptr->prev_row != 0)\n  {\n    png_bytep tptr;\n    tptr = png_ptr->prev_row;\n    png_ptr->prev_row = png_ptr->row_buf;\n    png_ptr->row_buf = tptr;\n  }\n  png_write_finish_row(png_ptr);\n  png_ptr->flush_rows += 1;\n  if ((png_ptr->flush_dist > 0) && (png_ptr->flush_rows >= png_ptr->flush_dist))\n  {\n    png_write_flush(png_ptr);\n  }\n}\n\n",
            "calle": [
                "png_compress_IDAT",
                "png_write_finish_row",
                "png_write_flush"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filtered_row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep filtered_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "full_row_length",
                        "type": "size_t",
                        "definition": [
                            "size_t full_row_length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep tptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_setup_sub_row",
            "header": "",
            "params": [
                "png_structrp png_ptr",
                "png_uint_32 bpp",
                "size_t row_bytes",
                "size_t lmins"
            ],
            "definition": "static size_t png_setup_sub_row(png_structrp png_ptr, png_uint_32 bpp, size_t row_bytes, size_t lmins)\n{\n  png_bytep rp;\n  png_bytep dp;\n  png_bytep lp;\n  size_t i;\n  size_t sum = 0;\n  unsigned int v;\n  png_ptr->try_row[0] = 1;\n  for (i = 0, rp = png_ptr->row_buf + 1, dp = png_ptr->try_row + 1; i < bpp; i += 1, rp += 1, dp += 1)\n  {\n    v = (*dp = *rp);\n    sum += (v < 128) ? (v) : (256 - v);\n  }\n\n  for (lp = png_ptr->row_buf + 1; i < row_bytes; i += 1, rp += 1, lp += 1, dp += 1)\n  {\n    v = (*dp = (png_byte) ((((int) (*rp)) - ((int) (*lp))) & 0xff));\n    sum += (v < 128) ? (v) : (256 - v);\n    if (sum > lmins)\n    {\n      break;\n    }\n  }\n\n  return sum;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bpp",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 bpp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_bytes",
                        "type": "size_t",
                        "definition": [
                            "size_t row_bytes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lmins",
                        "type": "size_t",
                        "definition": [
                            "size_t lmins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep rp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep lp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "size_t",
                        "definition": [
                            "size_t sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_setup_sub_row_only",
            "header": "",
            "params": [
                "png_structrp png_ptr",
                "png_uint_32 bpp",
                "size_t row_bytes"
            ],
            "definition": "static void png_setup_sub_row_only(png_structrp png_ptr, png_uint_32 bpp, size_t row_bytes)\n{\n  png_bytep rp;\n  png_bytep dp;\n  png_bytep lp;\n  size_t i;\n  png_ptr->try_row[0] = 1;\n  for (i = 0, rp = png_ptr->row_buf + 1, dp = png_ptr->try_row + 1; i < bpp; i += 1, rp += 1, dp += 1)\n  {\n    *dp = *rp;\n  }\n\n  for (lp = png_ptr->row_buf + 1; i < row_bytes; i += 1, rp += 1, lp += 1, dp += 1)\n  {\n    *dp = (png_byte) ((((int) (*rp)) - ((int) (*lp))) & 0xff);\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bpp",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 bpp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_bytes",
                        "type": "size_t",
                        "definition": [
                            "size_t row_bytes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep rp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep lp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_setup_up_row",
            "header": "",
            "params": [
                "png_structrp png_ptr",
                "size_t row_bytes",
                "size_t lmins"
            ],
            "definition": "static size_t png_setup_up_row(png_structrp png_ptr, size_t row_bytes, size_t lmins)\n{\n  png_bytep rp;\n  png_bytep dp;\n  png_bytep pp;\n  size_t i;\n  size_t sum = 0;\n  unsigned int v;\n  png_ptr->try_row[0] = 2;\n  for (i = 0, rp = png_ptr->row_buf + 1, dp = png_ptr->try_row + 1, pp = png_ptr->prev_row + 1; i < row_bytes; i += 1, rp += 1, pp += 1, dp += 1)\n  {\n    v = (*dp = (png_byte) ((((int) (*rp)) - ((int) (*pp))) & 0xff));\n    sum += (v < 128) ? (v) : (256 - v);\n    if (sum > lmins)\n    {\n      break;\n    }\n  }\n\n  return sum;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_bytes",
                        "type": "size_t",
                        "definition": [
                            "size_t row_bytes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lmins",
                        "type": "size_t",
                        "definition": [
                            "size_t lmins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep rp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep pp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "size_t",
                        "definition": [
                            "size_t sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_setup_up_row_only",
            "header": "",
            "params": [
                "png_structrp png_ptr",
                "size_t row_bytes"
            ],
            "definition": "static void png_setup_up_row_only(png_structrp png_ptr, size_t row_bytes)\n{\n  png_bytep rp;\n  png_bytep dp;\n  png_bytep pp;\n  size_t i;\n  png_ptr->try_row[0] = 2;\n  for (i = 0, rp = png_ptr->row_buf + 1, dp = png_ptr->try_row + 1, pp = png_ptr->prev_row + 1; i < row_bytes; i += 1, rp += 1, pp += 1, dp += 1)\n  {\n    *dp = (png_byte) ((((int) (*rp)) - ((int) (*pp))) & 0xff);\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_bytes",
                        "type": "size_t",
                        "definition": [
                            "size_t row_bytes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep rp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep pp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_setup_avg_row",
            "header": "",
            "params": [
                "png_structrp png_ptr",
                "png_uint_32 bpp",
                "size_t row_bytes",
                "size_t lmins"
            ],
            "definition": "static size_t png_setup_avg_row(png_structrp png_ptr, png_uint_32 bpp, size_t row_bytes, size_t lmins)\n{\n  png_bytep rp;\n  png_bytep dp;\n  png_bytep pp;\n  png_bytep lp;\n  png_uint_32 i;\n  size_t sum = 0;\n  unsigned int v;\n  png_ptr->try_row[0] = 3;\n  for (i = 0, rp = png_ptr->row_buf + 1, dp = png_ptr->try_row + 1, pp = png_ptr->prev_row + 1; i < bpp; i += 1)\n  {\n    v = (*dp = (png_byte) ((((int) (*rp)) - (((int) (*pp)) / 2)) & 0xff));\n    pp += 1;\n    rp += 1;\n    dp += 1;\n    sum += (v < 128) ? (v) : (256 - v);\n  }\n\n  for (lp = png_ptr->row_buf + 1; i < row_bytes; i += 1)\n  {\n    v = (*dp = (png_byte) ((((int) (*rp)) - ((((int) (*pp)) + ((int) (*lp))) / 2)) & 0xff));\n    lp += 1;\n    pp += 1;\n    rp += 1;\n    dp += 1;\n    sum += (v < 128) ? (v) : (256 - v);\n    if (sum > lmins)\n    {\n      break;\n    }\n  }\n\n  return sum;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bpp",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 bpp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_bytes",
                        "type": "size_t",
                        "definition": [
                            "size_t row_bytes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lmins",
                        "type": "size_t",
                        "definition": [
                            "size_t lmins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep rp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep pp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep lp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "size_t",
                        "definition": [
                            "size_t sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_setup_avg_row_only",
            "header": "",
            "params": [
                "png_structrp png_ptr",
                "png_uint_32 bpp",
                "size_t row_bytes"
            ],
            "definition": "static void png_setup_avg_row_only(png_structrp png_ptr, png_uint_32 bpp, size_t row_bytes)\n{\n  png_bytep rp;\n  png_bytep dp;\n  png_bytep pp;\n  png_bytep lp;\n  png_uint_32 i;\n  png_ptr->try_row[0] = 3;\n  for (i = 0, rp = png_ptr->row_buf + 1, dp = png_ptr->try_row + 1, pp = png_ptr->prev_row + 1; i < bpp; i += 1)\n  {\n    *dp = (png_byte) ((((int) (*rp)) - (((int) (*pp)) / 2)) & 0xff);\n    pp += 1;\n    rp += 1;\n    dp += 1;\n  }\n\n  for (lp = png_ptr->row_buf + 1; i < row_bytes; i += 1)\n  {\n    *dp = (png_byte) ((((int) (*rp)) - ((((int) (*pp)) + ((int) (*lp))) / 2)) & 0xff);\n    lp += 1;\n    pp += 1;\n    rp += 1;\n    dp += 1;\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bpp",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 bpp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_bytes",
                        "type": "size_t",
                        "definition": [
                            "size_t row_bytes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep rp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep pp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep lp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_setup_paeth_row",
            "header": "",
            "params": [
                "png_structrp png_ptr",
                "png_uint_32 bpp",
                "size_t row_bytes",
                "size_t lmins"
            ],
            "definition": "static size_t png_setup_paeth_row(png_structrp png_ptr, png_uint_32 bpp, size_t row_bytes, size_t lmins)\n{\n  png_bytep rp;\n  png_bytep dp;\n  png_bytep pp;\n  png_bytep cp;\n  png_bytep lp;\n  size_t i;\n  size_t sum = 0;\n  unsigned int v;\n  png_ptr->try_row[0] = 4;\n  for (i = 0, rp = png_ptr->row_buf + 1, dp = png_ptr->try_row + 1, pp = png_ptr->prev_row + 1; i < bpp; i += 1)\n  {\n    v = (*dp = (png_byte) ((((int) (*rp)) - ((int) (*pp))) & 0xff));\n    pp += 1;\n    rp += 1;\n    dp += 1;\n    sum += (v < 128) ? (v) : (256 - v);\n  }\n\n  for (lp = png_ptr->row_buf + 1, cp = png_ptr->prev_row + 1; i < row_bytes; i += 1)\n  {\n    helper_png_setup_paeth_row_1(&rp, &dp, &pp, &cp, &lp, &sum, &v, lmins);\n  }\n\n  return sum;\n}\n\n",
            "calle": [
                "helper_png_setup_paeth_row_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bpp",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 bpp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_bytes",
                        "type": "size_t",
                        "definition": [
                            "size_t row_bytes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lmins",
                        "type": "size_t",
                        "definition": [
                            "size_t lmins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep rp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep pp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep cp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep lp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "size_t",
                        "definition": [
                            "size_t sum = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int v"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "png_setup_paeth_row_only",
            "header": "",
            "params": [
                "png_structrp png_ptr",
                "png_uint_32 bpp",
                "size_t row_bytes"
            ],
            "definition": "static void png_setup_paeth_row_only(png_structrp png_ptr, png_uint_32 bpp, size_t row_bytes)\n{\n  png_bytep rp;\n  png_bytep dp;\n  png_bytep pp;\n  png_bytep cp;\n  png_bytep lp;\n  size_t i;\n  png_ptr->try_row[0] = 4;\n  for (i = 0, rp = png_ptr->row_buf + 1, dp = png_ptr->try_row + 1, pp = png_ptr->prev_row + 1; i < bpp; i += 1)\n  {\n    *dp = (png_byte) ((((int) (*rp)) - ((int) (*pp))) & 0xff);\n    pp += 1;\n    rp += 1;\n    dp += 1;\n  }\n\n  for (lp = png_ptr->row_buf + 1, cp = png_ptr->prev_row + 1; i < row_bytes; i += 1)\n  {\n    helper_png_setup_paeth_row_only_1(&rp, &dp, &pp, &cp, &lp);\n  }\n\n}\n\n",
            "calle": [
                "helper_png_setup_paeth_row_only_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bpp",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 bpp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_bytes",
                        "type": "size_t",
                        "definition": [
                            "size_t row_bytes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep rp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep pp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep cp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep lp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_png_deflate_claim_1",
            "header": "",
            "params": [
                "png_structrp * const png_ptr_ref",
                "png_uint_32 owner"
            ],
            "definition": "int helper_png_deflate_claim_1(png_structrp * const png_ptr_ref, png_uint_32 owner)\n{\n  png_structrp png_ptr = *png_ptr_ref;\n  char msg[64];\n  (void) ((((char *) msg)[0] = (char) ((owner >> 24) & 0xff), ((char *) msg)[1] = (char) ((owner >> 16) & 0xff), ((char *) msg)[2] = (char) ((owner >> 8) & 0xff), ((char *) msg)[3] = (char) (owner & 0xff)));\n  msg[4] = ':';\n  msg[5] = ' ';\n  (void) ((((char *) (msg + 6))[0] = (char) ((png_ptr->zowner >> 24) & 0xff), ((char *) (msg + 6))[1] = (char) ((png_ptr->zowner >> 16) & 0xff), ((char *) (msg + 6))[2] = (char) ((png_ptr->zowner >> 8) & 0xff), ((char *) (msg + 6))[3] = (char) (png_ptr->zowner & 0xff)));\n  (void) png_safecat(msg, sizeof(msg), 10, \" using zstream\");\n  png_warning(png_ptr, msg);\n  if (png_ptr->zowner == ((((((png_uint_32) 73) << 24) | (((png_uint_32) 68) << 16)) | (((png_uint_32) 65) << 8)) | (((png_uint_32) 84) << 0)))\n  {\n    png_ptr->zstream.msg = \"in use by IDAT\";\n    return -2;\n  }\n  png_ptr->zowner = 0;\n  *png_ptr_ref = png_ptr;\n}\n\n",
            "calle": [
                "png_safecat",
                "png_warning"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr_ref",
                        "type": "png_structrp * const",
                        "definition": [
                            "png_structrp * const png_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "owner",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 owner"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr = *png_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg",
                        "type": "char [64]",
                        "definition": [
                            "char msg[64]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_png_deflate_claim_2",
            "header": "",
            "params": [
                "png_structrp * const png_ptr_ref",
                "png_uint_32 owner",
                "png_alloc_size_t data_size"
            ],
            "definition": "int helper_png_deflate_claim_2(png_structrp * const png_ptr_ref, png_uint_32 owner, png_alloc_size_t data_size)\n{\n  png_structrp png_ptr = *png_ptr_ref;\n  int level = png_ptr->zlib_level;\n  int method = png_ptr->zlib_method;\n  int windowBits = png_ptr->zlib_window_bits;\n  int memLevel = png_ptr->zlib_mem_level;\n  int strategy;\n  int ret;\n  if (owner == ((((((png_uint_32) 73) << 24) | (((png_uint_32) 68) << 16)) | (((png_uint_32) 65) << 8)) | (((png_uint_32) 84) << 0)))\n  {\n    if ((png_ptr->flags & 0x0001U) != 0)\n    {\n      strategy = png_ptr->zlib_strategy;\n    }\n    else\n      if (png_ptr->do_filter != 0x08)\n    {\n      strategy = 1;\n    }\n    else\n      strategy = 0;\n  }\n  else\n  {\n    strategy = 0;\n  }\n  if (data_size <= 16384)\n  {\n    unsigned int half_window_size = 1U << (windowBits - 1);\n    while ((data_size + 262) <= half_window_size)\n    {\n      half_window_size >>= 1;\n      windowBits -= 1;\n    }\n\n  }\n  if (((png_ptr->flags & 0x0002U) != 0) && (((((png_ptr->zlib_set_level != level) || (png_ptr->zlib_set_method != method)) || (png_ptr->zlib_set_window_bits != windowBits)) || (png_ptr->zlib_set_mem_level != memLevel)) || (png_ptr->zlib_set_strategy != strategy)))\n  {\n    if (deflateEnd(&png_ptr->zstream) != 0)\n    {\n      png_warning(png_ptr, \"deflateEnd failed (ignored)\");\n    }\n    png_ptr->flags &= ~0x0002U;\n  }\n  png_ptr->zstream.next_in = 0;\n  png_ptr->zstream.avail_in = 0;\n  png_ptr->zstream.next_out = 0;\n  png_ptr->zstream.avail_out = 0;\n  if ((png_ptr->flags & 0x0002U) != 0)\n  {\n    ret = deflateReset(&png_ptr->zstream);\n  }\n  else\n  {\n    ret = deflateInit2_(&png_ptr->zstream, level, method, windowBits, memLevel, strategy, \"1.3-optipng\", (int) (sizeof(z_stream)));\n    if (ret == 0)\n    {\n      png_ptr->flags |= 0x0002U;\n    }\n  }\n  if (ret == 0)\n  {\n    png_ptr->zowner = owner;\n  }\n  else\n    png_zstream_error(png_ptr, ret);\n  return ret;\n  *png_ptr_ref = png_ptr;\n}\n\n",
            "calle": [
                "deflateEnd",
                "deflateInit2_",
                "deflateReset",
                "png_warning",
                "png_zstream_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr_ref",
                        "type": "png_structrp * const",
                        "definition": [
                            "png_structrp * const png_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "owner",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 owner"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data_size",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t data_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr = *png_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "int",
                        "definition": [
                            "int level = png_ptr->zlib_level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "method",
                        "type": "int",
                        "definition": [
                            "int method = png_ptr->zlib_method"
                        ]
                    },
                    {
                        "path": null,
                        "name": "windowBits",
                        "type": "int",
                        "definition": [
                            "int windowBits = png_ptr->zlib_window_bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "memLevel",
                        "type": "int",
                        "definition": [
                            "int memLevel = png_ptr->zlib_mem_level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strategy",
                        "type": "int",
                        "definition": [
                            "int strategy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret"
                        ]
                    },
                    {
                        "path": null,
                        "name": "half_window_size",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int half_window_size = 1U << (windowBits - 1)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_png_compress_IDAT_1",
            "header": "",
            "params": [
                "png_structrp * const png_ptr_ref",
                "png_alloc_size_t * const input_len_ref",
                "int flush"
            ],
            "definition": "void helper_png_compress_IDAT_1(png_structrp * const png_ptr_ref, png_alloc_size_t * const input_len_ref, int flush)\n{\n  png_structrp png_ptr = *png_ptr_ref;\n  png_alloc_size_t input_len = *input_len_ref;\n  int ret;\n  uInt avail = (uInt) (-1);\n  if (avail > input_len)\n  {\n    avail = (uInt) input_len;\n  }\n  png_ptr->zstream.avail_in = avail;\n  input_len -= avail;\n  ret = deflate(&png_ptr->zstream, (input_len > 0) ? (0) : (flush));\n  input_len += png_ptr->zstream.avail_in;\n  png_ptr->zstream.avail_in = 0;\n  if (png_ptr->zstream.avail_out == 0)\n  {\n    helper_helper_png_compress_IDAT_1_1(&png_ptr, flush, ret);\n  }\n  if (ret == 0)\n  {\n    if (input_len == 0)\n    {\n      if (flush == 4)\n      {\n        png_error(png_ptr, \"Z_OK on Z_FINISH with output space\");\n      }\n      return;\n    }\n  }\n  else\n    if ((ret == 1) && (flush == 4))\n  {\n    helper_helper_png_compress_IDAT_1_2(&png_ptr);\n  }\n  else\n  {\n    png_zstream_error(png_ptr, ret);\n    png_error(png_ptr, png_ptr->zstream.msg);\n  }\n  *png_ptr_ref = png_ptr;\n  *input_len_ref = input_len;\n}\n\n",
            "calle": [
                "deflate",
                "helper_helper_png_compress_IDAT_1_1",
                "helper_helper_png_compress_IDAT_1_2",
                "png_error",
                "png_zstream_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr_ref",
                        "type": "png_structrp * const",
                        "definition": [
                            "png_structrp * const png_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_len_ref",
                        "type": "png_alloc_size_t * const",
                        "definition": [
                            "png_alloc_size_t * const input_len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flush",
                        "type": "int",
                        "definition": [
                            "int flush"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr = *png_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_len",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t input_len = *input_len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret"
                        ]
                    },
                    {
                        "path": null,
                        "name": "avail",
                        "type": "uInt",
                        "definition": [
                            "uInt avail = (uInt) (-1)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_png_write_start_row_1",
            "header": "",
            "params": [
                "png_structrp * const png_ptr_ref",
                "png_alloc_size_t buf_size",
                "png_byte filters"
            ],
            "definition": "void helper_png_write_start_row_1(png_structrp * const png_ptr_ref, png_alloc_size_t buf_size, png_byte filters)\n{\n  png_structrp png_ptr = *png_ptr_ref;\n  int num_filters = 0;\n  png_ptr->try_row = png_malloc(png_ptr, buf_size);\n  if (filters & 0x10)\n  {\n    num_filters += 1;\n  }\n  if (filters & 0x20)\n  {\n    num_filters += 1;\n  }\n  if (filters & 0x40)\n  {\n    num_filters += 1;\n  }\n  if (filters & 0x80)\n  {\n    num_filters += 1;\n  }\n  if (num_filters > 1)\n  {\n    png_ptr->tst_row = png_malloc(png_ptr, buf_size);\n  }\n  *png_ptr_ref = png_ptr;\n}\n\n",
            "calle": [
                "png_malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr_ref",
                        "type": "png_structrp * const",
                        "definition": [
                            "png_structrp * const png_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_size",
                        "type": "png_alloc_size_t",
                        "definition": [
                            "png_alloc_size_t buf_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filters",
                        "type": "png_byte",
                        "definition": [
                            "png_byte filters"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr = *png_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_filters",
                        "type": "int",
                        "definition": [
                            "int num_filters = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_png_do_write_interlace_1",
            "header": "",
            "params": [
                "png_row_infop * const row_info_ref",
                "png_bytep row",
                "int pass",
                "static const png_byte png_pass_start[7]",
                "static const png_byte png_pass_inc[7]"
            ],
            "definition": "void helper_png_do_write_interlace_1(png_row_infop * const row_info_ref, png_bytep row, int pass, static const png_byte png_pass_start[7], static const png_byte png_pass_inc[7])\n{\n  png_row_infop row_info = *row_info_ref;\n  switch (row_info->pixel_depth)\n  {\n    case 1:\n    {\n      helper_helper_png_do_write_interlace_1_4(row, pass, png_pass_start, png_pass_inc, row_info);\n    }\n\n    case 2:\n    {\n      helper_helper_png_do_write_interlace_1_2(row, pass, png_pass_start, png_pass_inc, row_info);\n    }\n\n    case 4:\n    {\n      helper_helper_png_do_write_interlace_1_3(row, pass, png_pass_start, png_pass_inc, row_info);\n    }\n\n    default:\n    {\n      helper_helper_png_do_write_interlace_1_1(row, pass, png_pass_start, png_pass_inc, row_info);\n    }\n\n  }\n\n  row_info->width = (((row_info->width + png_pass_inc[pass]) - 1) - png_pass_start[pass]) / png_pass_inc[pass];\n  row_info->rowbytes = (row_info->pixel_depth >= 8) ? (((size_t) row_info->width) * (((size_t) row_info->pixel_depth) >> 3)) : (((((size_t) row_info->width) * ((size_t) row_info->pixel_depth)) + 7) >> 3);\n  *row_info_ref = row_info;\n}\n\n",
            "calle": [
                "helper_helper_png_do_write_interlace_1_1",
                "helper_helper_png_do_write_interlace_1_2",
                "helper_helper_png_do_write_interlace_1_3",
                "helper_helper_png_do_write_interlace_1_4"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "row_info_ref",
                        "type": "png_row_infop * const",
                        "definition": [
                            "png_row_infop * const row_info_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pass",
                        "type": "int",
                        "definition": [
                            "int pass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_start",
                        "type": "const png_byte [7]",
                        "definition": [
                            "static const png_byte png_pass_start[7]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_inc",
                        "type": "const png_byte [7]",
                        "definition": [
                            "static const png_byte png_pass_inc[7]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_info",
                        "type": "png_row_infop",
                        "definition": [
                            "png_row_infop row_info = *row_info_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_png_setup_paeth_row_1",
            "header": "",
            "params": [
                "png_bytep * const rp_ref",
                "png_bytep * const dp_ref",
                "png_bytep * const pp_ref",
                "png_bytep * const cp_ref",
                "png_bytep * const lp_ref",
                "size_t * const sum_ref",
                "unsigned int * const v_ref",
                "size_t lmins"
            ],
            "definition": "void helper_png_setup_paeth_row_1(png_bytep * const rp_ref, png_bytep * const dp_ref, png_bytep * const pp_ref, png_bytep * const cp_ref, png_bytep * const lp_ref, size_t * const sum_ref, unsigned int * const v_ref, size_t lmins)\n{\n  png_bytep rp = *rp_ref;\n  png_bytep dp = *dp_ref;\n  png_bytep pp = *pp_ref;\n  png_bytep cp = *cp_ref;\n  png_bytep lp = *lp_ref;\n  size_t sum = *sum_ref;\n  unsigned int v = *v_ref;\n  int a;\n  int b;\n  int c;\n  int pa;\n  int pb;\n  int pc;\n  int p;\n  b = *pp;\n  pp += 1;\n  c = *cp;\n  cp += 1;\n  a = *lp;\n  lp += 1;\n  p = b - c;\n  pc = a - c;\n  pa = (p < 0) ? (-p) : (p);\n  pb = (pc < 0) ? (-pc) : (pc);\n  pc = ((p + pc) < 0) ? (-(p + pc)) : (p + pc);\n  p = ((pa <= pb) && (pa <= pc)) ? (a) : ((pb <= pc) ? (b) : (c));\n  v = (*dp = (png_byte) ((((int) (*rp)) - p) & 0xff));\n  rp += 1;\n  dp += 1;\n  sum += (v < 128) ? (v) : (256 - v);\n  if (sum > lmins)\n  {\n    break;\n  }\n  *rp_ref = rp;\n  *dp_ref = dp;\n  *pp_ref = pp;\n  *cp_ref = cp;\n  *lp_ref = lp;\n  *sum_ref = sum;\n  *v_ref = v;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "rp_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const rp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const dp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pp_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const pp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cp_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const cp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lp_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const lp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const v_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lmins",
                        "type": "size_t",
                        "definition": [
                            "size_t lmins"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep rp = *rp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dp = *dp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep pp = *pp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep cp = *cp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep lp = *lp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sum",
                        "type": "size_t",
                        "definition": [
                            "size_t sum = *sum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int v = *v_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "int",
                        "definition": [
                            "int a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "int",
                        "definition": [
                            "int b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pa",
                        "type": "int",
                        "definition": [
                            "int pa"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pb",
                        "type": "int",
                        "definition": [
                            "int pb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pc",
                        "type": "int",
                        "definition": [
                            "int pc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "int",
                        "definition": [
                            "int p"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_png_setup_paeth_row_only_1",
            "header": "",
            "params": [
                "png_bytep * const rp_ref",
                "png_bytep * const dp_ref",
                "png_bytep * const pp_ref",
                "png_bytep * const cp_ref",
                "png_bytep * const lp_ref"
            ],
            "definition": "void helper_png_setup_paeth_row_only_1(png_bytep * const rp_ref, png_bytep * const dp_ref, png_bytep * const pp_ref, png_bytep * const cp_ref, png_bytep * const lp_ref)\n{\n  png_bytep rp = *rp_ref;\n  png_bytep dp = *dp_ref;\n  png_bytep pp = *pp_ref;\n  png_bytep cp = *cp_ref;\n  png_bytep lp = *lp_ref;\n  int a;\n  int b;\n  int c;\n  int pa;\n  int pb;\n  int pc;\n  int p;\n  b = *pp;\n  pp += 1;\n  c = *cp;\n  cp += 1;\n  a = *lp;\n  lp += 1;\n  p = b - c;\n  pc = a - c;\n  pa = (p < 0) ? (-p) : (p);\n  pb = (pc < 0) ? (-pc) : (pc);\n  pc = ((p + pc) < 0) ? (-(p + pc)) : (p + pc);\n  p = ((pa <= pb) && (pa <= pc)) ? (a) : ((pb <= pc) ? (b) : (c));\n  *dp = (png_byte) ((((int) (*rp)) - p) & 0xff);\n  rp += 1;\n  dp += 1;\n  *rp_ref = rp;\n  *dp_ref = dp;\n  *pp_ref = pp;\n  *cp_ref = cp;\n  *lp_ref = lp;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "rp_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const rp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const dp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pp_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const pp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cp_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const cp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lp_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const lp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep rp = *rp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dp = *dp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep pp = *pp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep cp = *cp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep lp = *lp_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "a",
                        "type": "int",
                        "definition": [
                            "int a"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "int",
                        "definition": [
                            "int b"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pa",
                        "type": "int",
                        "definition": [
                            "int pa"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pb",
                        "type": "int",
                        "definition": [
                            "int pb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pc",
                        "type": "int",
                        "definition": [
                            "int pc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "p",
                        "type": "int",
                        "definition": [
                            "int p"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_png_compress_IDAT_1_1",
            "header": "",
            "params": [
                "png_structrp * const png_ptr_ref",
                "int flush",
                "int ret"
            ],
            "definition": "void helper_helper_png_compress_IDAT_1_1(png_structrp * const png_ptr_ref, int flush, int ret)\n{\n  png_structrp png_ptr = *png_ptr_ref;\n  png_bytep data = png_ptr->zbuffer_list->output;\n  uInt size = png_ptr->zbuffer_size;\n  if (((png_ptr->mode & 0x04U) == 0) && (png_ptr->compression_type == 0))\n  {\n    optimize_cmf(data, png_image_size(png_ptr));\n  }\n  if (size > 0)\n  {\n    png_write_complete_chunk(png_ptr, (((((png_uint_32) 73) << 24) | (((png_uint_32) 68) << 16)) | (((png_uint_32) 65) << 8)) | (((png_uint_32) 84) << 0), data, size);\n  }\n  png_ptr->mode |= 0x04U;\n  png_ptr->zstream.next_out = data;\n  png_ptr->zstream.avail_out = size;\n  if ((ret == 0) && (flush != 0))\n  {\n    continue;\n  }\n  *png_ptr_ref = png_ptr;\n}\n\n",
            "calle": [
                "optimize_cmf",
                "png_image_size",
                "png_write_complete_chunk"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr_ref",
                        "type": "png_structrp * const",
                        "definition": [
                            "png_structrp * const png_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flush",
                        "type": "int",
                        "definition": [
                            "int flush"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr = *png_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep data = png_ptr->zbuffer_list->output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "uInt",
                        "definition": [
                            "uInt size = png_ptr->zbuffer_size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_png_compress_IDAT_1_2",
            "header": "",
            "params": [
                "png_structrp * const png_ptr_ref"
            ],
            "definition": "void helper_helper_png_compress_IDAT_1_2(png_structrp * const png_ptr_ref)\n{\n  png_structrp png_ptr = *png_ptr_ref;\n  png_bytep data = png_ptr->zbuffer_list->output;\n  uInt size = png_ptr->zbuffer_size - png_ptr->zstream.avail_out;\n  if (((png_ptr->mode & 0x04U) == 0) && (png_ptr->compression_type == 0))\n  {\n    optimize_cmf(data, png_image_size(png_ptr));\n  }\n  if (size > 0)\n  {\n    png_write_complete_chunk(png_ptr, (((((png_uint_32) 73) << 24) | (((png_uint_32) 68) << 16)) | (((png_uint_32) 65) << 8)) | (((png_uint_32) 84) << 0), data, size);\n  }\n  png_ptr->zstream.avail_out = 0;\n  png_ptr->zstream.next_out = 0;\n  png_ptr->mode |= 0x04U | 0x08;\n  png_ptr->zowner = 0;\n  return;\n  *png_ptr_ref = png_ptr;\n}\n\n",
            "calle": [
                "optimize_cmf",
                "png_image_size",
                "png_write_complete_chunk"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr_ref",
                        "type": "png_structrp * const",
                        "definition": [
                            "png_structrp * const png_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structrp",
                        "definition": [
                            "png_structrp png_ptr = *png_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep data = png_ptr->zbuffer_list->output"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "uInt",
                        "definition": [
                            "uInt size = png_ptr->zbuffer_size - png_ptr->zstream.avail_out"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_png_do_write_interlace_1_1",
            "header": "",
            "params": [
                "png_bytep row",
                "int pass",
                "static const png_byte png_pass_start[7]",
                "static const png_byte png_pass_inc[7]",
                "png_row_infop row_info"
            ],
            "definition": "void helper_helper_png_do_write_interlace_1_1(png_bytep row, int pass, static const png_byte png_pass_start[7], static const png_byte png_pass_inc[7], png_row_infop row_info)\n{\n  png_bytep sp;\n  png_bytep dp;\n  png_uint_32 i;\n  png_uint_32 row_width = row_info->width;\n  size_t pixel_bytes;\n  dp = row;\n  pixel_bytes = row_info->pixel_depth >> 3;\n  for (i = png_pass_start[pass]; i < row_width; i += png_pass_inc[pass])\n  {\n    sp = row + (((size_t) i) * pixel_bytes);\n    if (dp != sp)\n    {\n      memcpy(dp, sp, pixel_bytes);\n    }\n    dp += pixel_bytes;\n  }\n\n  break;\n}\n\n",
            "calle": [
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pass",
                        "type": "int",
                        "definition": [
                            "int pass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_start",
                        "type": "const png_byte [7]",
                        "definition": [
                            "static const png_byte png_pass_start[7]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_inc",
                        "type": "const png_byte [7]",
                        "definition": [
                            "static const png_byte png_pass_inc[7]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_info",
                        "type": "png_row_infop",
                        "definition": [
                            "png_row_infop row_info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep sp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 row_width = row_info->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pixel_bytes",
                        "type": "size_t",
                        "definition": [
                            "size_t pixel_bytes"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_png_do_write_interlace_1_2",
            "header": "",
            "params": [
                "png_bytep row",
                "int pass",
                "static const png_byte png_pass_start[7]",
                "static const png_byte png_pass_inc[7]",
                "png_row_infop row_info"
            ],
            "definition": "void helper_helper_png_do_write_interlace_1_2(png_bytep row, int pass, static const png_byte png_pass_start[7], static const png_byte png_pass_inc[7], png_row_infop row_info)\n{\n  png_bytep sp;\n  png_bytep dp;\n  unsigned int shift;\n  int d;\n  int value;\n  png_uint_32 i;\n  png_uint_32 row_width = row_info->width;\n  dp = row;\n  shift = 6;\n  d = 0;\n  for (i = png_pass_start[pass]; i < row_width; i += png_pass_inc[pass])\n  {\n    sp = row + ((size_t) (i >> 2));\n    value = ((*sp) >> ((3 - ((int) (i & 0x03))) << 1)) & 0x03;\n    d |= value << shift;\n    if (shift == 0)\n    {\n      shift = 6;\n      *dp = (png_byte) d;\n      dp += 1;\n      d = 0;\n    }\n    else\n      shift -= 2;\n  }\n\n  if (shift != 6)\n  {\n    *dp = (png_byte) d;\n  }\n  break;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pass",
                        "type": "int",
                        "definition": [
                            "int pass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_start",
                        "type": "const png_byte [7]",
                        "definition": [
                            "static const png_byte png_pass_start[7]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_inc",
                        "type": "const png_byte [7]",
                        "definition": [
                            "static const png_byte png_pass_inc[7]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_info",
                        "type": "png_row_infop",
                        "definition": [
                            "png_row_infop row_info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep sp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "shift",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int shift"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "int",
                        "definition": [
                            "int d"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "int",
                        "definition": [
                            "int value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 row_width = row_info->width"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_png_do_write_interlace_1_3",
            "header": "",
            "params": [
                "png_bytep row",
                "int pass",
                "static const png_byte png_pass_start[7]",
                "static const png_byte png_pass_inc[7]",
                "png_row_infop row_info"
            ],
            "definition": "void helper_helper_png_do_write_interlace_1_3(png_bytep row, int pass, static const png_byte png_pass_start[7], static const png_byte png_pass_inc[7], png_row_infop row_info)\n{\n  png_bytep sp;\n  png_bytep dp;\n  unsigned int shift;\n  int d;\n  int value;\n  png_uint_32 i;\n  png_uint_32 row_width = row_info->width;\n  dp = row;\n  shift = 4;\n  d = 0;\n  for (i = png_pass_start[pass]; i < row_width; i += png_pass_inc[pass])\n  {\n    sp = row + ((size_t) (i >> 1));\n    value = ((*sp) >> ((1 - ((int) (i & 0x01))) << 2)) & 0x0f;\n    d |= value << shift;\n    if (shift == 0)\n    {\n      shift = 4;\n      *dp = (png_byte) d;\n      dp += 1;\n      d = 0;\n    }\n    else\n      shift -= 4;\n  }\n\n  if (shift != 4)\n  {\n    *dp = (png_byte) d;\n  }\n  break;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pass",
                        "type": "int",
                        "definition": [
                            "int pass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_start",
                        "type": "const png_byte [7]",
                        "definition": [
                            "static const png_byte png_pass_start[7]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_inc",
                        "type": "const png_byte [7]",
                        "definition": [
                            "static const png_byte png_pass_inc[7]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_info",
                        "type": "png_row_infop",
                        "definition": [
                            "png_row_infop row_info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep sp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "shift",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int shift"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "int",
                        "definition": [
                            "int d"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "int",
                        "definition": [
                            "int value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 row_width = row_info->width"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_png_do_write_interlace_1_4",
            "header": "",
            "params": [
                "png_bytep row",
                "int pass",
                "static const png_byte png_pass_start[7]",
                "static const png_byte png_pass_inc[7]",
                "png_row_infop row_info"
            ],
            "definition": "void helper_helper_png_do_write_interlace_1_4(png_bytep row, int pass, static const png_byte png_pass_start[7], static const png_byte png_pass_inc[7], png_row_infop row_info)\n{\n  png_bytep sp;\n  png_bytep dp;\n  unsigned int shift;\n  int d;\n  int value;\n  png_uint_32 i;\n  png_uint_32 row_width = row_info->width;\n  dp = row;\n  d = 0;\n  shift = 7;\n  for (i = png_pass_start[pass]; i < row_width; i += png_pass_inc[pass])\n  {\n    sp = row + ((size_t) (i >> 3));\n    value = ((int) ((*sp) >> (7 - ((int) (i & 0x07))))) & 0x01;\n    d |= value << shift;\n    if (shift == 0)\n    {\n      shift = 7;\n      *dp = (png_byte) d;\n      dp += 1;\n      d = 0;\n    }\n    else\n      shift--;\n    shift -= 1;\n  }\n\n  if (shift != 7)\n  {\n    *dp = (png_byte) d;\n  }\n  break;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pass",
                        "type": "int",
                        "definition": [
                            "int pass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_start",
                        "type": "const png_byte [7]",
                        "definition": [
                            "static const png_byte png_pass_start[7]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_pass_inc",
                        "type": "const png_byte [7]",
                        "definition": [
                            "static const png_byte png_pass_inc[7]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_info",
                        "type": "png_row_infop",
                        "definition": [
                            "png_row_infop row_info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep sp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dp",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "shift",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int shift"
                        ]
                    },
                    {
                        "path": null,
                        "name": "d",
                        "type": "int",
                        "definition": [
                            "int d"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "int",
                        "definition": [
                            "int value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 row_width = row_info->width"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#pngtest",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "int main(void)\n{\n  fprintf(stdout, \" test ignored because libpng was not built with read support\\n\");\n  return (10640 < 10600) ? (0) : (77);\n}\n\n",
            "calle": [
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_validate_image",
            "header": "int opng_validate_image(png_structp png_ptr, png_infop info_ptr)",
            "params": [
                "png_structp png_ptr",
                "png_infop info_ptr"
            ],
            "definition": "int opng_validate_image(png_structp png_ptr, png_infop info_ptr)\n{\n  (void) 0;\n  if (png_get_bit_depth(png_ptr, info_ptr) == 0)\n  {\n    return 0;\n  }\n  if (png_get_color_type(png_ptr, info_ptr) & 1)\n  {\n    if (!png_get_valid(png_ptr, info_ptr, 0x0008U))\n    {\n      return 0;\n    }\n  }\n  if (!png_get_valid(png_ptr, info_ptr, 0x8000U))\n  {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "calle": [
                "png_get_bit_depth",
                "png_get_color_type",
                "png_get_valid"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_infop",
                        "definition": [
                            "png_infop info_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_reduce_image",
            "header": "png_uint_32 opng_reduce_image(png_structp png_ptr, png_infop info_ptr, png_uint_32 reductions)",
            "params": [
                "png_structp png_ptr",
                "png_infop info_ptr",
                "png_uint_32 reductions"
            ],
            "definition": "png_uint_32 opng_reduce_image(png_structp png_ptr, png_infop info_ptr, png_uint_32 reductions)\n{\n  png_uint_32 result;\n  int color_type;\n  (void) 0;\n  if (!opng_validate_image(png_ptr, info_ptr))\n  {\n    png_warning(png_ptr, \"Image reduction requires the presence of all critical information\");\n    return 0x0000;\n  }\n  color_type = png_get_color_type(png_ptr, info_ptr);\n  result = opng_reduce_bits(png_ptr, info_ptr, reductions);\n  if ((color_type == (2 | 1)) && (reductions & ((0x0080 | 0x0200) | 0x0002)))\n  {\n    result |= opng_reduce_palette(png_ptr, info_ptr, reductions);\n  }\n  if ((((color_type & (~4)) == 0) && (reductions & 0x0040)) || (((color_type & (~4)) == 2) && (reductions & 0x0010)))\n  {\n    if (!(result & 0x0080))\n    {\n      result |= opng_reduce_to_palette(png_ptr, info_ptr, reductions);\n    }\n  }\n  return result;\n}\n\n",
            "calle": [
                "opng_reduce_bits",
                "opng_reduce_palette",
                "opng_reduce_to_palette",
                "opng_validate_image",
                "png_get_color_type",
                "png_warning"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_infop",
                        "definition": [
                            "png_infop info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reductions",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 reductions"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color_type",
                        "type": "int",
                        "definition": [
                            "int color_type"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_insert_palette_entry",
            "header": "",
            "params": [
                "png_colorp palette",
                "int *num_palette",
                "png_bytep trans_alpha",
                "int *num_trans",
                "int max_tuples",
                "unsigned int red",
                "unsigned int green",
                "unsigned int blue",
                "unsigned int alpha",
                "int *index"
            ],
            "definition": "static int opng_insert_palette_entry(png_colorp palette, int *num_palette, png_bytep trans_alpha, int *num_trans, int max_tuples, unsigned int red, unsigned int green, unsigned int blue, unsigned int alpha, int *index)\n{\n  int low;\n  int high;\n  int mid;\n  int cmp;\n  int i;\n  assert(((*num_palette) >= 0) && ((*num_palette) <= max_tuples));\n  assert(((*num_trans) >= 0) && ((*num_trans) <= (*num_palette)));\n  if (alpha < 255)\n  {\n    low = 0;\n    high = (*num_trans) - 1;\n    while (low <= high)\n    {\n      mid = (low + high) / 2;\n      cmp = (((int) alpha) != ((int) trans_alpha[mid])) ? (((int) alpha) - ((int) trans_alpha[mid])) : ((((int) red) != palette[mid].red) ? (((int) red) - ((int) palette[mid].red)) : ((((int) green) != ((int) palette[mid].green)) ? (((int) green) - ((int) palette[mid].green)) : (((int) blue) - ((int) palette[mid].blue))));\n      if (cmp < 0)\n      {\n        high = mid - 1;\n      }\n      else\n        if (cmp > 0)\n      {\n        low = mid + 1;\n      }\n      else\n      {\n        *index = mid;\n        return 0;\n      }\n    }\n\n  }\n  else\n  {\n    low = *num_trans;\n    high = (*num_palette) - 1;\n    while (low <= high)\n    {\n      mid = (low + high) / 2;\n      cmp = (((int) red) != ((int) palette[mid].red)) ? (((int) red) - ((int) palette[mid].red)) : ((((int) green) != ((int) palette[mid].green)) ? (((int) green) - ((int) palette[mid].green)) : (((int) blue) - ((int) palette[mid].blue)));\n      if (cmp < 0)\n      {\n        high = mid - 1;\n      }\n      else\n        if (cmp > 0)\n      {\n        low = mid + 1;\n      }\n      else\n      {\n        *index = mid;\n        return 0;\n      }\n    }\n\n  }\n  if (alpha > 255)\n  {\n    for (i = 0; i < (*num_trans); i += 1)\n    {\n      cmp = (((int) red) != ((int) palette[i].red)) ? (((int) red) - ((int) palette[i].red)) : ((((int) green) != ((int) palette[i].green)) ? (((int) green) - ((int) palette[i].green)) : (((int) blue) - ((int) palette[i].blue)));\n      if (cmp == 0)\n      {\n        *index = i;\n        return 0;\n      }\n    }\n\n  }\n  if ((*num_palette) >= max_tuples)\n  {\n    *num_palette = (*num_trans = (*index = -1));\n    return -1;\n  }\n  assert((low >= 0) && (low <= (*num_palette)));\n  for (i = *num_palette; i > low; i -= 1)\n  {\n    palette[i] = palette[i - 1];\n  }\n\n  palette[low].red = (png_byte) red;\n  palette[low].green = (png_byte) green;\n  palette[low].blue = (png_byte) blue;\n  *num_palette += 1;\n  if (alpha < 255)\n  {\n    assert(low <= (*num_trans));\n    for (i = *num_trans; i > low; i -= 1)\n    {\n      trans_alpha[i] = trans_alpha[i - 1];\n    }\n\n    trans_alpha[low] = (png_byte) alpha;\n    *num_trans += 1;\n  }\n  *index = low;\n  return 1;\n}\n\n",
            "calle": [
                "assert"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "palette",
                        "type": "png_colorp",
                        "definition": [
                            "png_colorp palette"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_palette",
                        "type": "int *",
                        "definition": [
                            "int *num_palette"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_alpha",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep trans_alpha"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_trans",
                        "type": "int *",
                        "definition": [
                            "int *num_trans"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_tuples",
                        "type": "int",
                        "definition": [
                            "int max_tuples"
                        ]
                    },
                    {
                        "path": null,
                        "name": "red",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int red"
                        ]
                    },
                    {
                        "path": null,
                        "name": "green",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int green"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blue",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int blue"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alpha",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int alpha"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "int *",
                        "definition": [
                            "int *index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "low",
                        "type": "int",
                        "definition": [
                            "int low"
                        ]
                    },
                    {
                        "path": null,
                        "name": "high",
                        "type": "int",
                        "definition": [
                            "int high"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mid",
                        "type": "int",
                        "definition": [
                            "int mid"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cmp",
                        "type": "int",
                        "definition": [
                            "int cmp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_realloc_PLTE",
            "header": "",
            "params": [
                "png_structp png_ptr",
                "png_infop info_ptr",
                "int num_palette"
            ],
            "definition": "static void opng_realloc_PLTE(png_structp png_ptr, png_infop info_ptr, int num_palette)\n{\n  png_color buffer[256];\n  png_colorp palette;\n  int src_num_palette;\n  png_bytep buffer_ptr;\n  png_bytep trans_alpha;\n  int num_trans;\n  png_color_16p background;\n  (void) 0;\n  assert(num_palette > 0);\n  src_num_palette = 0;\n  png_get_PLTE(png_ptr, info_ptr, &palette, &src_num_palette);\n  if (num_palette == src_num_palette)\n  {\n    return;\n  }\n  memcpy(buffer, palette, num_palette * (sizeof(png_color)));\n  if (num_palette > src_num_palette)\n  {\n    memset(buffer + src_num_palette, 0, (num_palette - src_num_palette) * (sizeof(png_color)));\n  }\n  png_set_PLTE(png_ptr, info_ptr, buffer, num_palette);\n  if (num_palette < src_num_palette)\n  {\n    if (png_get_tRNS(png_ptr, info_ptr, &trans_alpha, &num_trans, 0) && (num_trans > num_palette))\n    {\n      buffer_ptr = (png_bytep) ((png_voidp) buffer);\n      png_warning(png_ptr, \"Too many alpha values in tRNS\");\n      num_trans = num_palette;\n      memcpy(buffer_ptr, trans_alpha, (size_t) num_trans);\n      png_set_tRNS(png_ptr, info_ptr, buffer_ptr, num_trans, 0);\n    }\n    if (png_get_bKGD(png_ptr, info_ptr, &background) && (background->index >= num_palette))\n    {\n      png_warning(png_ptr, \"Invalid color index in bKGD\");\n      png_set_invalid(png_ptr, info_ptr, 0x0020U);\n    }\n  }\n}\n\n",
            "calle": [
                "assert",
                "memcpy",
                "memset",
                "png_get_PLTE",
                "png_get_bKGD",
                "png_get_tRNS",
                "png_set_PLTE",
                "png_set_invalid",
                "png_set_tRNS",
                "png_warning"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_infop",
                        "definition": [
                            "png_infop info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_palette",
                        "type": "int",
                        "definition": [
                            "int num_palette"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "png_color [256]",
                        "definition": [
                            "png_color buffer[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "palette",
                        "type": "png_colorp",
                        "definition": [
                            "png_colorp palette"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_num_palette",
                        "type": "int",
                        "definition": [
                            "int src_num_palette"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer_ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep buffer_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_alpha",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep trans_alpha"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_trans",
                        "type": "int",
                        "definition": [
                            "int num_trans"
                        ]
                    },
                    {
                        "path": null,
                        "name": "background",
                        "type": "png_color_16p",
                        "definition": [
                            "png_color_16p background"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_realloc_tRNS",
            "header": "",
            "params": [
                "png_structp png_ptr",
                "png_infop info_ptr",
                "int num_trans"
            ],
            "definition": "static void opng_realloc_tRNS(png_structp png_ptr, png_infop info_ptr, int num_trans)\n{\n  png_byte buffer[256];\n  png_bytep trans_alpha;\n  int src_num_trans;\n  (void) 0;\n  assert(num_trans > 0);\n  src_num_trans = 0;\n  png_get_tRNS(png_ptr, info_ptr, &trans_alpha, &src_num_trans, 0);\n  if (num_trans == src_num_trans)\n  {\n    return;\n  }\n  memcpy(buffer, trans_alpha, (size_t) num_trans);\n  if (num_trans > src_num_trans)\n  {\n    memset(buffer + src_num_trans, 0, num_trans - src_num_trans);\n  }\n  png_set_tRNS(png_ptr, info_ptr, buffer, num_trans, 0);\n}\n\n",
            "calle": [
                "assert",
                "memcpy",
                "memset",
                "png_get_tRNS",
                "png_set_tRNS"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_infop",
                        "definition": [
                            "png_infop info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_trans",
                        "type": "int",
                        "definition": [
                            "int num_trans"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "png_byte [256]",
                        "definition": [
                            "png_byte buffer[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_alpha",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep trans_alpha"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_num_trans",
                        "type": "int",
                        "definition": [
                            "int src_num_trans"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_get_alpha_row",
            "header": "",
            "params": [
                "png_row_infop row_info_ptr",
                "png_color_16p trans_color",
                "png_bytep row",
                "png_bytep alpha_row"
            ],
            "definition": "static void opng_get_alpha_row(png_row_infop row_info_ptr, png_color_16p trans_color, png_bytep row, png_bytep alpha_row)\n{\n  png_bytep sample_ptr;\n  png_uint_32 width;\n  int color_type;\n  int bit_depth;\n  int channels;\n  png_byte trans_red;\n  png_byte trans_green;\n  png_byte trans_blue;\n  png_byte trans_gray;\n  png_uint_32 i;\n  width = row_info_ptr->width;\n  color_type = row_info_ptr->color_type;\n  bit_depth = row_info_ptr->bit_depth;\n  channels = row_info_ptr->channels;\n  assert(!(color_type & 1));\n  assert(bit_depth == 8);\n  if (!(color_type & 4))\n  {\n    helper_opng_get_alpha_row_1(&alpha_row, &sample_ptr, &trans_red, &trans_green, &trans_blue, &trans_gray, &i, trans_color, row, width, color_type, channels);\n  }\n  assert(channels > 1);\n  sample_ptr = row + (channels - 1);\n  for (i = 0; i < width; i += 1, sample_ptr += channels, alpha_row += 1)\n  {\n    *alpha_row = *sample_ptr;\n  }\n\n}\n\n",
            "calle": [
                "assert",
                "helper_opng_get_alpha_row_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "row_info_ptr",
                        "type": "png_row_infop",
                        "definition": [
                            "png_row_infop row_info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_color",
                        "type": "png_color_16p",
                        "definition": [
                            "png_color_16p trans_color"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alpha_row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep alpha_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep sample_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color_type",
                        "type": "int",
                        "definition": [
                            "int color_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bit_depth",
                        "type": "int",
                        "definition": [
                            "int bit_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "channels",
                        "type": "int",
                        "definition": [
                            "int channels"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_red",
                        "type": "png_byte",
                        "definition": [
                            "png_byte trans_red"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_green",
                        "type": "png_byte",
                        "definition": [
                            "png_byte trans_green"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_blue",
                        "type": "png_byte",
                        "definition": [
                            "png_byte trans_blue"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_gray",
                        "type": "png_byte",
                        "definition": [
                            "png_byte trans_gray"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_analyze_bits",
            "header": "",
            "params": [
                "png_structp png_ptr",
                "png_infop info_ptr",
                "png_uint_32 reductions"
            ],
            "definition": "static png_uint_32 opng_analyze_bits(png_structp png_ptr, png_infop info_ptr, png_uint_32 reductions)\n{\n  png_bytepp row_ptr;\n  png_bytep component_ptr;\n  png_uint_32 height;\n  png_uint_32 width;\n  int bit_depth;\n  int color_type;\n  int byte_depth;\n  int channels;\n  int sample_size;\n  int offset_alpha;\n  png_color_16p background;\n  png_uint_32 i;\n  png_uint_32 j;\n  (void) 0;\n  png_get_IHDR(png_ptr, info_ptr, &width, &height, &bit_depth, &color_type, 0, 0, 0);\n  if (bit_depth < 8)\n  {\n    return 0x0000;\n  }\n  if (color_type & 1)\n  {\n    return 0x0000;\n  }\n  byte_depth = bit_depth / 8;\n  channels = png_get_channels(png_ptr, info_ptr);\n  sample_size = channels * byte_depth;\n  offset_alpha = (channels - 1) * byte_depth;\n  reductions &= (0x0001 | 0x0004) | 0x0008;\n  if (bit_depth <= 8)\n  {\n    reductions &= ~0x0001;\n  }\n  if (!(color_type & 2))\n  {\n    reductions &= ~0x0004;\n  }\n  if (!(color_type & 4))\n  {\n    reductions &= ~0x0008;\n  }\n  if (png_get_bKGD(png_ptr, info_ptr, &background))\n  {\n    if (reductions & 0x0001)\n    {\n      if (((((background->red % 257) != 0) || ((background->green % 257) != 0)) || ((background->blue % 257) != 0)) || ((background->gray % 257) != 0))\n      {\n        reductions &= ~0x0001;\n      }\n    }\n    if (reductions & 0x0004)\n    {\n      if ((background->red != background->green) || (background->red != background->blue))\n      {\n        reductions &= ~0x0004;\n      }\n    }\n  }\n  row_ptr = png_get_rows(png_ptr, info_ptr);\n  for (i = 0; i < height; i += 1, row_ptr += 1)\n  {\n    helper_opng_analyze_bits_1(&reductions, &component_ptr, &j, row_ptr, width, bit_depth, channels, sample_size, offset_alpha);\n  }\n\n  return reductions;\n}\n\n",
            "calle": [
                "helper_opng_analyze_bits_1",
                "png_get_IHDR",
                "png_get_bKGD",
                "png_get_channels",
                "png_get_rows"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_infop",
                        "definition": [
                            "png_infop info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reductions",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 reductions"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_ptr",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp row_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "component_ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep component_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bit_depth",
                        "type": "int",
                        "definition": [
                            "int bit_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color_type",
                        "type": "int",
                        "definition": [
                            "int color_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "byte_depth",
                        "type": "int",
                        "definition": [
                            "int byte_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "channels",
                        "type": "int",
                        "definition": [
                            "int channels"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_size",
                        "type": "int",
                        "definition": [
                            "int sample_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offset_alpha",
                        "type": "int",
                        "definition": [
                            "int offset_alpha"
                        ]
                    },
                    {
                        "path": null,
                        "name": "background",
                        "type": "png_color_16p",
                        "definition": [
                            "png_color_16p background"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 j"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_reduce_bits",
            "header": "",
            "params": [
                "png_structp png_ptr",
                "png_infop info_ptr",
                "png_uint_32 reductions"
            ],
            "definition": "static png_uint_32 opng_reduce_bits(png_structp png_ptr, png_infop info_ptr, png_uint_32 reductions)\n{\n  png_bytepp row_ptr;\n  png_bytep src_ptr;\n  png_bytep dest_ptr;\n  png_uint_32 width;\n  png_uint_32 height;\n  int interlace_type;\n  int compression_type;\n  int filter_type;\n  int src_bit_depth;\n  int dest_bit_depth;\n  int src_byte_depth;\n  int dest_byte_depth;\n  int src_color_type;\n  int dest_color_type;\n  int src_channels;\n  int dest_channels;\n  int src_sample_size;\n  int dest_sample_size;\n  int tran_tbl[8];\n  png_color_16p trans_color;\n  png_color_16p background;\n  png_color_8p sig_bits;\n  png_uint_32 i;\n  png_uint_32 j;\n  int k;\n  (void) 0;\n  reductions = opng_analyze_bits(png_ptr, info_ptr, reductions);\n  if (reductions == 0x0000)\n  {\n    return 0x0000;\n  }\n  png_get_IHDR(png_ptr, info_ptr, &width, &height, &src_bit_depth, &src_color_type, &interlace_type, &compression_type, &filter_type);\n  assert(src_bit_depth >= 8);\n  if (reductions & 0x0001)\n  {\n    assert(src_bit_depth == 16);\n    dest_bit_depth = 8;\n  }\n  else\n    dest_bit_depth = src_bit_depth;\n  src_byte_depth = src_bit_depth / 8;\n  dest_byte_depth = dest_bit_depth / 8;\n  dest_color_type = src_color_type;\n  if (reductions & 0x0004)\n  {\n    assert(src_color_type & 2);\n    dest_color_type &= ~2;\n  }\n  if (reductions & 0x0008)\n  {\n    assert(src_color_type & 4);\n    dest_color_type &= ~4;\n  }\n  src_channels = png_get_channels(png_ptr, info_ptr);\n  dest_channels = ((dest_color_type & 2) ? (3) : (1)) + ((dest_color_type & 4) ? (1) : (0));\n  src_sample_size = src_channels * src_byte_depth;\n  dest_sample_size = dest_channels * dest_byte_depth;\n  for (k = 0; k < (4 * dest_byte_depth); k += 1)\n  {\n    tran_tbl[k] = (k * src_bit_depth) / dest_bit_depth;\n  }\n\n  if ((reductions & 0x0004) && (dest_color_type & 4))\n  {\n    tran_tbl[dest_byte_depth] = tran_tbl[3 * dest_byte_depth];\n    if (dest_byte_depth == 2)\n    {\n      tran_tbl[dest_byte_depth + 1] = tran_tbl[(3 * dest_byte_depth) + 1];\n    }\n  }\n  assert(src_sample_size > dest_sample_size);\n  row_ptr = png_get_rows(png_ptr, info_ptr);\n  for (i = 0; i < height; i += 1, row_ptr += 1)\n  {\n    src_ptr = (dest_ptr = *row_ptr);\n    for (j = 0; j < width; j += 1)\n    {\n      for (k = 0; k < dest_sample_size; k += 1)\n      {\n        dest_ptr[k] = src_ptr[tran_tbl[k]];\n      }\n\n      src_ptr += src_sample_size;\n      dest_ptr += dest_sample_size;\n    }\n\n  }\n\n  if (png_get_tRNS(png_ptr, info_ptr, 0, 0, &trans_color))\n  {\n    helper_opng_reduce_bits_1(&trans_color, png_ptr, info_ptr, reductions);\n  }\n  if (png_get_bKGD(png_ptr, info_ptr, &background))\n  {\n    if (reductions & 0x0001)\n    {\n      background->red &= 255;\n      background->green &= 255;\n      background->blue &= 255;\n      background->gray &= 255;\n    }\n    if (reductions & 0x0004)\n    {\n      background->gray = background->red;\n    }\n  }\n  if (png_get_sBIT(png_ptr, info_ptr, &sig_bits))\n  {\n    helper_opng_reduce_bits_2(&sig_bits, reductions);\n  }\n  png_set_IHDR(png_ptr, info_ptr, width, height, dest_bit_depth, dest_color_type, interlace_type, compression_type, filter_type);\n  return reductions;\n}\n\n",
            "calle": [
                "assert",
                "helper_opng_reduce_bits_1",
                "helper_opng_reduce_bits_2",
                "opng_analyze_bits",
                "png_get_IHDR",
                "png_get_bKGD",
                "png_get_channels",
                "png_get_rows",
                "png_get_sBIT",
                "png_get_tRNS",
                "png_set_IHDR"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_infop",
                        "definition": [
                            "png_infop info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reductions",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 reductions"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_ptr",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp row_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep src_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dest_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "interlace_type",
                        "type": "int",
                        "definition": [
                            "int interlace_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compression_type",
                        "type": "int",
                        "definition": [
                            "int compression_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filter_type",
                        "type": "int",
                        "definition": [
                            "int filter_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_bit_depth",
                        "type": "int",
                        "definition": [
                            "int src_bit_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_bit_depth",
                        "type": "int",
                        "definition": [
                            "int dest_bit_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_byte_depth",
                        "type": "int",
                        "definition": [
                            "int src_byte_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_byte_depth",
                        "type": "int",
                        "definition": [
                            "int dest_byte_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_color_type",
                        "type": "int",
                        "definition": [
                            "int src_color_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_color_type",
                        "type": "int",
                        "definition": [
                            "int dest_color_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_channels",
                        "type": "int",
                        "definition": [
                            "int src_channels"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_channels",
                        "type": "int",
                        "definition": [
                            "int dest_channels"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_sample_size",
                        "type": "int",
                        "definition": [
                            "int src_sample_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_sample_size",
                        "type": "int",
                        "definition": [
                            "int dest_sample_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tran_tbl",
                        "type": "int [8]",
                        "definition": [
                            "int tran_tbl[8]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_color",
                        "type": "png_color_16p",
                        "definition": [
                            "png_color_16p trans_color"
                        ]
                    },
                    {
                        "path": null,
                        "name": "background",
                        "type": "png_color_16p",
                        "definition": [
                            "png_color_16p background"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sig_bits",
                        "type": "png_color_8p",
                        "definition": [
                            "png_color_8p sig_bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "int",
                        "definition": [
                            "int k"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_reduce_palette_bits",
            "header": "",
            "params": [
                "png_structp png_ptr",
                "png_infop info_ptr",
                "png_uint_32 reductions"
            ],
            "definition": "static png_uint_32 opng_reduce_palette_bits(png_structp png_ptr, png_infop info_ptr, png_uint_32 reductions)\n{\n  png_uint_32 result;\n  png_bytepp row_ptr;\n  png_bytep src_sample_ptr;\n  png_bytep dest_sample_ptr;\n  png_uint_32 width;\n  png_uint_32 height;\n  int color_type;\n  int interlace_type;\n  int compression_type;\n  int filter_type;\n  int src_bit_depth;\n  int dest_bit_depth;\n  unsigned int src_mask_init;\n  unsigned int src_mask;\n  unsigned int src_shift;\n  unsigned int dest_shift;\n  unsigned int sample;\n  unsigned int dest_buf;\n  png_colorp palette;\n  int num_palette;\n  png_uint_32 i;\n  png_uint_32 j;\n  (void) 0;\n  if (!(reductions & 0x0002))\n  {\n    return 0x0000;\n  }\n  png_get_IHDR(png_ptr, info_ptr, &width, &height, &src_bit_depth, &color_type, &interlace_type, &compression_type, &filter_type);\n  if (color_type != (2 | 1))\n  {\n    return 0x0000;\n  }\n  if (!png_get_PLTE(png_ptr, info_ptr, &palette, &num_palette))\n  {\n    num_palette = 0;\n  }\n  result = 0x0000;\n  if (num_palette > (1 << src_bit_depth))\n  {\n    png_warning(png_ptr, \"Too many colors in PLTE\");\n    num_palette = 1 << src_bit_depth;\n    opng_realloc_PLTE(png_ptr, info_ptr, num_palette);\n    png_get_PLTE(png_ptr, info_ptr, &palette, &num_palette);\n    assert(num_palette == (1 << src_bit_depth));\n    result |= 0x2000;\n  }\n  if (num_palette > 16)\n  {\n    return result;\n  }\n  else\n    if (num_palette > 4)\n  {\n    dest_bit_depth = 4;\n  }\n  else\n    if (num_palette > 2)\n  {\n    dest_bit_depth = 2;\n  }\n  else\n  {\n    assert(num_palette > 0);\n    dest_bit_depth = 1;\n  }\n  if (src_bit_depth <= dest_bit_depth)\n  {\n    assert(src_bit_depth == dest_bit_depth);\n    return result;\n  }\n  row_ptr = png_get_rows(png_ptr, info_ptr);\n  if (src_bit_depth == 8)\n  {\n    helper_opng_reduce_palette_bits_1(&row_ptr, &src_sample_ptr, &dest_sample_ptr, &dest_shift, &dest_buf, &i, &j, width, height, dest_bit_depth);\n  }\n  else\n  {\n    helper_opng_reduce_palette_bits_2(&row_ptr, &src_sample_ptr, &dest_sample_ptr, &src_mask_init, &src_mask, &src_shift, &dest_shift, &sample, &dest_buf, &i, &j, width, height, src_bit_depth, dest_bit_depth);\n  }\n  png_set_IHDR(png_ptr, info_ptr, width, height, dest_bit_depth, color_type, interlace_type, compression_type, filter_type);\n  result |= 0x0002;\n  return result;\n}\n\n",
            "calle": [
                "assert",
                "helper_opng_reduce_palette_bits_1",
                "helper_opng_reduce_palette_bits_2",
                "opng_realloc_PLTE",
                "png_get_IHDR",
                "png_get_PLTE",
                "png_get_rows",
                "png_set_IHDR",
                "png_warning"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_infop",
                        "definition": [
                            "png_infop info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reductions",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 reductions"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_ptr",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp row_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_sample_ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep src_sample_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_sample_ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dest_sample_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color_type",
                        "type": "int",
                        "definition": [
                            "int color_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "interlace_type",
                        "type": "int",
                        "definition": [
                            "int interlace_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compression_type",
                        "type": "int",
                        "definition": [
                            "int compression_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filter_type",
                        "type": "int",
                        "definition": [
                            "int filter_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_bit_depth",
                        "type": "int",
                        "definition": [
                            "int src_bit_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_bit_depth",
                        "type": "int",
                        "definition": [
                            "int dest_bit_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_mask_init",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_mask_init"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_mask",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_mask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_shift",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_shift"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_shift",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dest_shift"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sample"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_buf",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dest_buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "palette",
                        "type": "png_colorp",
                        "definition": [
                            "png_colorp palette"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_palette",
                        "type": "int",
                        "definition": [
                            "int num_palette"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 j"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_reduce_to_palette",
            "header": "",
            "params": [
                "png_structp png_ptr",
                "png_infop info_ptr",
                "png_uint_32 reductions"
            ],
            "definition": "static png_uint_32 opng_reduce_to_palette(png_structp png_ptr, png_infop info_ptr, png_uint_32 reductions)\n{\n  png_uint_32 result;\n  png_row_info row_info;\n  png_bytepp row_ptr;\n  png_bytep sample_ptr;\n  png_bytep alpha_row;\n  png_uint_32 height;\n  png_uint_32 width;\n  int color_type;\n  int interlace_type;\n  int compression_type;\n  int filter_type;\n  int src_bit_depth;\n  int dest_bit_depth;\n  int channels;\n  png_color palette[256];\n  png_byte trans_alpha[256];\n  png_color_16p trans_color;\n  int num_palette;\n  int num_trans;\n  int index;\n  unsigned int gray;\n  unsigned int red;\n  unsigned int green;\n  unsigned int blue;\n  unsigned int alpha;\n  unsigned int prev_gray;\n  unsigned int prev_red;\n  unsigned int prev_green;\n  unsigned int prev_blue;\n  unsigned int prev_alpha;\n  png_color_16p background;\n  png_uint_32 i;\n  png_uint_32 j;\n  (void) 0;\n  png_get_IHDR(png_ptr, info_ptr, &width, &height, &src_bit_depth, &color_type, &interlace_type, &compression_type, &filter_type);\n  if (src_bit_depth != 8)\n  {\n    return 0x0000;\n  }\n  assert(!(color_type & 1));\n  row_ptr = png_get_rows(png_ptr, info_ptr);\n  channels = png_get_channels(png_ptr, info_ptr);\n  alpha_row = (png_bytep) png_malloc(png_ptr, width);\n  row_info.width = width;\n  row_info.rowbytes = 0;\n  row_info.color_type = (png_byte) color_type;\n  row_info.bit_depth = (png_byte) src_bit_depth;\n  row_info.channels = (png_byte) channels;\n  row_info.pixel_depth = 0;\n  num_palette = (num_trans = 0);\n  trans_color = 0;\n  png_get_tRNS(png_ptr, info_ptr, 0, 0, &trans_color);\n  prev_gray = (prev_red = (prev_green = (prev_blue = (prev_alpha = (unsigned int) (-1)))));\n  for (i = 0; i < height; i += 1, row_ptr += 1)\n  {\n    helper_opng_reduce_to_palette_1(&sample_ptr, &gray, &red, &green, &blue, &alpha, &prev_gray, &prev_red, &prev_green, &prev_blue, &prev_alpha, &i, &j, row_info, row_ptr, alpha_row, height, width, color_type, channels, palette, trans_alpha, trans_color, num_palette, num_trans, index);\n  }\n\n  if ((num_palette >= 0) && png_get_bKGD(png_ptr, info_ptr, &background))\n  {\n    if (color_type & 2)\n    {\n      red = background->red;\n      green = background->green;\n      blue = background->blue;\n    }\n    else\n      red = (green = (blue = background->gray));\n    if (((red > 255) || (green > 255)) || (blue > 255))\n    {\n      png_warning(png_ptr, \"Invalid colors in bKGD\");\n      png_set_invalid(png_ptr, info_ptr, 0x0020U);\n    }\n    else\n    {\n      opng_insert_palette_entry(palette, &num_palette, trans_alpha, &num_trans, 256, red, green, blue, (unsigned int) (-1), &index);\n      if (index >= 0)\n      {\n        background->index = (png_byte) index;\n      }\n    }\n  }\n  if (num_palette >= 0)\n  {\n    assert((num_palette > 0) && (num_palette <= 256));\n    assert((num_trans >= 0) && (num_trans <= num_palette));\n    if (num_palette <= 2)\n    {\n      dest_bit_depth = 1;\n    }\n    else\n      if (num_palette <= 4)\n    {\n      dest_bit_depth = 2;\n    }\n    else\n      if (num_palette <= 16)\n    {\n      dest_bit_depth = 4;\n    }\n    else\n      dest_bit_depth = 8;\n    if (((channels * 8) == dest_bit_depth) || (((((((3 * num_palette) + num_trans) * 8) / ((channels * 8) - dest_bit_depth)) / width) / height) >= 1))\n    {\n      num_palette = -1;\n    }\n  }\n  if (num_palette < 0)\n  {\n    png_free(png_ptr, alpha_row);\n    return 0x0000;\n  }\n  row_ptr = png_get_rows(png_ptr, info_ptr);\n  index = -1;\n  prev_red = (prev_green = (prev_blue = (prev_alpha = (unsigned int) (-1))));\n  for (i = 0; i < height; i += 1, row_ptr += 1)\n  {\n    helper_opng_reduce_to_palette_2(&row_ptr, &sample_ptr, &index, &gray, &red, &green, &blue, &alpha, &prev_gray, &prev_red, &prev_green, &prev_blue, &prev_alpha, &j, row_info, alpha_row, width, color_type, channels, palette, trans_alpha, trans_color, num_palette, num_trans);\n  }\n\n  png_set_IHDR(png_ptr, info_ptr, width, height, 8, 2 | 1, interlace_type, compression_type, filter_type);\n  png_set_PLTE(png_ptr, info_ptr, palette, num_palette);\n  if (num_trans > 0)\n  {\n    png_set_tRNS(png_ptr, info_ptr, trans_alpha, num_trans, 0);\n  }\n  png_free(png_ptr, alpha_row);\n  result = 0x0010;\n  if (reductions & 0x0002)\n  {\n    result |= opng_reduce_palette_bits(png_ptr, info_ptr, reductions);\n  }\n  return result;\n}\n\n",
            "calle": [
                "assert",
                "helper_opng_reduce_to_palette_1",
                "helper_opng_reduce_to_palette_2",
                "opng_insert_palette_entry",
                "opng_reduce_palette_bits",
                "png_free",
                "png_get_IHDR",
                "png_get_bKGD",
                "png_get_channels",
                "png_get_rows",
                "png_get_tRNS",
                "png_malloc",
                "png_set_IHDR",
                "png_set_PLTE",
                "png_set_invalid",
                "png_set_tRNS",
                "png_warning"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_infop",
                        "definition": [
                            "png_infop info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reductions",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 reductions"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_info",
                        "type": "png_row_info",
                        "definition": [
                            "png_row_info row_info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_ptr",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp row_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep sample_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alpha_row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep alpha_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color_type",
                        "type": "int",
                        "definition": [
                            "int color_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "interlace_type",
                        "type": "int",
                        "definition": [
                            "int interlace_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compression_type",
                        "type": "int",
                        "definition": [
                            "int compression_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filter_type",
                        "type": "int",
                        "definition": [
                            "int filter_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_bit_depth",
                        "type": "int",
                        "definition": [
                            "int src_bit_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_bit_depth",
                        "type": "int",
                        "definition": [
                            "int dest_bit_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "channels",
                        "type": "int",
                        "definition": [
                            "int channels"
                        ]
                    },
                    {
                        "path": null,
                        "name": "palette",
                        "type": "png_color [256]",
                        "definition": [
                            "png_color palette[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_alpha",
                        "type": "png_byte [256]",
                        "definition": [
                            "png_byte trans_alpha[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_color",
                        "type": "png_color_16p",
                        "definition": [
                            "png_color_16p trans_color"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_palette",
                        "type": "int",
                        "definition": [
                            "int num_palette"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_trans",
                        "type": "int",
                        "definition": [
                            "int num_trans"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "int",
                        "definition": [
                            "int index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gray",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gray"
                        ]
                    },
                    {
                        "path": null,
                        "name": "red",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int red"
                        ]
                    },
                    {
                        "path": null,
                        "name": "green",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int green"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blue",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int blue"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alpha",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int alpha"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_gray",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int prev_gray"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_red",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int prev_red"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_green",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int prev_green"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_blue",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int prev_blue"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_alpha",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int prev_alpha"
                        ]
                    },
                    {
                        "path": null,
                        "name": "background",
                        "type": "png_color_16p",
                        "definition": [
                            "png_color_16p background"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 j"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_analyze_sample_usage",
            "header": "",
            "params": [
                "png_structp png_ptr",
                "png_infop info_ptr",
                "png_bytep usage_map"
            ],
            "definition": "static void opng_analyze_sample_usage(png_structp png_ptr, png_infop info_ptr, png_bytep usage_map)\n{\n  png_bytepp row_ptr;\n  png_bytep sample_ptr;\n  png_uint_32 width;\n  png_uint_32 height;\n  int bit_depth;\n  int init_shift;\n  int init_mask;\n  int shift;\n  int mask;\n  png_color_16p background;\n  png_uint_32 i;\n  png_uint_32 j;\n  (void) 0;\n  height = png_get_image_height(png_ptr, info_ptr);\n  width = png_get_image_width(png_ptr, info_ptr);\n  bit_depth = png_get_bit_depth(png_ptr, info_ptr);\n  row_ptr = png_get_rows(png_ptr, info_ptr);\n  memset(usage_map, 0, 256);\n  if (bit_depth == 8)\n  {\n    for (i = 0; i < height; i += 1, row_ptr += 1)\n    {\n      for (j = 0, sample_ptr = *row_ptr; j < width; j += 1, sample_ptr += 1)\n      {\n        usage_map[*sample_ptr] = 1;\n      }\n\n    }\n\n  }\n  else\n  {\n    helper_opng_analyze_sample_usage_1(&usage_map, &row_ptr, &sample_ptr, &init_shift, &init_mask, &shift, &mask, &i, &j, width, height, bit_depth);\n  }\n  if (png_get_bKGD(png_ptr, info_ptr, &background))\n  {\n    usage_map[background->index] = 1;\n  }\n}\n\n",
            "calle": [
                "helper_opng_analyze_sample_usage_1",
                "memset",
                "png_get_bKGD",
                "png_get_bit_depth",
                "png_get_image_height",
                "png_get_image_width",
                "png_get_rows"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_infop",
                        "definition": [
                            "png_infop info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "usage_map",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep usage_map"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_ptr",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp row_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep sample_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bit_depth",
                        "type": "int",
                        "definition": [
                            "int bit_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "init_shift",
                        "type": "int",
                        "definition": [
                            "int init_shift"
                        ]
                    },
                    {
                        "path": null,
                        "name": "init_mask",
                        "type": "int",
                        "definition": [
                            "int init_mask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "shift",
                        "type": "int",
                        "definition": [
                            "int shift"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask",
                        "type": "int",
                        "definition": [
                            "int mask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "background",
                        "type": "png_color_16p",
                        "definition": [
                            "png_color_16p background"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 j"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_reduce_palette",
            "header": "",
            "params": [
                "png_structp png_ptr",
                "png_infop info_ptr",
                "png_uint_32 reductions"
            ],
            "definition": "static png_uint_32 opng_reduce_palette(png_structp png_ptr, png_infop info_ptr, png_uint_32 reductions)\n{\n  png_uint_32 result;\n  png_colorp palette;\n  png_bytep trans_alpha;\n  png_bytepp row_ptr;\n  png_uint_32 width;\n  png_uint_32 height;\n  int bit_depth;\n  int color_type;\n  int interlace_type;\n  int compression_type;\n  int filter_type;\n  int num_palette;\n  int num_trans;\n  int last_color_index;\n  int last_trans_index;\n  png_byte crt_trans_value;\n  png_byte last_trans_value;\n  png_byte is_used[256];\n  png_color_16 gray_trans;\n  int is_gray;\n  png_color_16p background;\n  png_uint_16p hist;\n  png_color_8p sig_bits;\n  png_uint_32 i;\n  png_uint_32 j;\n  int k;\n  (void) 0;\n  result = 0x0000;\n  png_get_IHDR(png_ptr, info_ptr, &width, &height, &bit_depth, &color_type, &interlace_type, &compression_type, &filter_type);\n  row_ptr = png_get_rows(png_ptr, info_ptr);\n  if (!png_get_PLTE(png_ptr, info_ptr, &palette, &num_palette))\n  {\n    palette = 0;\n    num_palette = 0;\n  }\n  if (!png_get_tRNS(png_ptr, info_ptr, &trans_alpha, &num_trans, 0))\n  {\n    trans_alpha = 0;\n    num_trans = 0;\n  }\n  else\n    assert((trans_alpha != 0) && (num_trans > 0));\n  opng_analyze_sample_usage(png_ptr, info_ptr, is_used);\n  is_gray = (reductions & 0x0080) && (bit_depth == 8);\n  last_color_index = (last_trans_index = -1);\n  for (k = 0; k < 256; k += 1)\n  {\n    if (!is_used[k])\n    {\n      continue;\n    }\n    last_color_index = k;\n    if ((k < num_trans) && (trans_alpha[k] < 255))\n    {\n      last_trans_index = k;\n    }\n    if (is_gray)\n    {\n      if ((palette[k].red != palette[k].green) || (palette[k].red != palette[k].blue))\n      {\n        is_gray = 0;\n      }\n    }\n  }\n\n  assert(last_color_index >= 0);\n  assert(last_color_index >= last_trans_index);\n  if (last_color_index >= num_palette)\n  {\n    png_warning(png_ptr, \"Too few colors in PLTE\");\n    opng_realloc_PLTE(png_ptr, info_ptr, last_color_index + 1);\n    png_get_PLTE(png_ptr, info_ptr, &palette, &num_palette);\n    assert(num_palette == (last_color_index + 1));\n    result |= 0x2000;\n  }\n  if (num_trans > num_palette)\n  {\n    png_warning(png_ptr, \"Too many alpha values in tRNS\");\n    result |= 0x2000;\n  }\n  if (is_gray && (last_trans_index >= 0))\n  {\n    helper_opng_reduce_palette_1(&crt_trans_value, &last_trans_value, &gray_trans, &is_gray, &k, palette, trans_alpha, last_color_index, last_trans_index, is_used);\n  }\n  if ((num_trans > 0) && (last_trans_index < 0))\n  {\n    num_trans = 0;\n    png_free_data(png_ptr, info_ptr, 0x2000U, -1);\n    png_set_invalid(png_ptr, info_ptr, 0x0010U);\n    result |= 0x0200;\n  }\n  if (reductions & 0x0200)\n  {\n    if (num_palette != (last_color_index + 1))\n    {\n      opng_realloc_PLTE(png_ptr, info_ptr, last_color_index + 1);\n      png_get_PLTE(png_ptr, info_ptr, &palette, &num_palette);\n      assert(num_palette == (last_color_index + 1));\n      result |= 0x0200;\n    }\n    if ((num_trans > 0) && (num_trans != (last_trans_index + 1)))\n    {\n      opng_realloc_tRNS(png_ptr, info_ptr, last_trans_index + 1);\n      png_get_tRNS(png_ptr, info_ptr, &trans_alpha, &num_trans, 0);\n      assert(num_trans == (last_trans_index + 1));\n      result |= 0x0200;\n    }\n  }\n  if (reductions & 0x0002)\n  {\n    result |= opng_reduce_palette_bits(png_ptr, info_ptr, reductions);\n    bit_depth = png_get_bit_depth(png_ptr, info_ptr);\n  }\n  if ((bit_depth < 8) || (!is_gray))\n  {\n    return result;\n  }\n  for (i = 0; i < height; i += 1)\n  {\n    for (j = 0; j < width; j += 1)\n    {\n      row_ptr[i][j] = palette[row_ptr[i][j]].red;\n    }\n\n  }\n\n  if (num_trans > 0)\n  {\n    png_set_tRNS(png_ptr, info_ptr, 0, 0, &gray_trans);\n  }\n  if (png_get_bKGD(png_ptr, info_ptr, &background))\n  {\n    background->gray = palette[background->index].red;\n  }\n  if (png_get_hIST(png_ptr, info_ptr, &hist))\n  {\n    png_free_data(png_ptr, info_ptr, 0x0008U, -1);\n    png_set_invalid(png_ptr, info_ptr, 0x0040U);\n  }\n  if (png_get_sBIT(png_ptr, info_ptr, &sig_bits))\n  {\n    png_byte max_sig_bits = sig_bits->red;\n    if (max_sig_bits < sig_bits->green)\n    {\n      max_sig_bits = sig_bits->green;\n    }\n    if (max_sig_bits < sig_bits->blue)\n    {\n      max_sig_bits = sig_bits->blue;\n    }\n    sig_bits->gray = max_sig_bits;\n  }\n  png_set_IHDR(png_ptr, info_ptr, width, height, bit_depth, 0, interlace_type, compression_type, filter_type);\n  png_free_data(png_ptr, info_ptr, 0x1000U, -1);\n  png_set_invalid(png_ptr, info_ptr, 0x0008U);\n  return 0x0080;\n}\n\n",
            "calle": [
                "assert",
                "helper_opng_reduce_palette_1",
                "opng_analyze_sample_usage",
                "opng_realloc_PLTE",
                "opng_realloc_tRNS",
                "opng_reduce_palette_bits",
                "png_free_data",
                "png_get_IHDR",
                "png_get_PLTE",
                "png_get_bKGD",
                "png_get_bit_depth",
                "png_get_hIST",
                "png_get_rows",
                "png_get_sBIT",
                "png_get_tRNS",
                "png_set_IHDR",
                "png_set_invalid",
                "png_set_tRNS",
                "png_warning"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_infop",
                        "definition": [
                            "png_infop info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reductions",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 reductions"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "palette",
                        "type": "png_colorp",
                        "definition": [
                            "png_colorp palette"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_alpha",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep trans_alpha"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_ptr",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp row_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bit_depth",
                        "type": "int",
                        "definition": [
                            "int bit_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color_type",
                        "type": "int",
                        "definition": [
                            "int color_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "interlace_type",
                        "type": "int",
                        "definition": [
                            "int interlace_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compression_type",
                        "type": "int",
                        "definition": [
                            "int compression_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filter_type",
                        "type": "int",
                        "definition": [
                            "int filter_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_palette",
                        "type": "int",
                        "definition": [
                            "int num_palette"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_trans",
                        "type": "int",
                        "definition": [
                            "int num_trans"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last_color_index",
                        "type": "int",
                        "definition": [
                            "int last_color_index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last_trans_index",
                        "type": "int",
                        "definition": [
                            "int last_trans_index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crt_trans_value",
                        "type": "png_byte",
                        "definition": [
                            "png_byte crt_trans_value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last_trans_value",
                        "type": "png_byte",
                        "definition": [
                            "png_byte last_trans_value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_used",
                        "type": "png_byte [256]",
                        "definition": [
                            "png_byte is_used[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gray_trans",
                        "type": "png_color_16",
                        "definition": [
                            "png_color_16 gray_trans"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_gray",
                        "type": "int",
                        "definition": [
                            "int is_gray"
                        ]
                    },
                    {
                        "path": null,
                        "name": "background",
                        "type": "png_color_16p",
                        "definition": [
                            "png_color_16p background"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hist",
                        "type": "png_uint_16p",
                        "definition": [
                            "png_uint_16p hist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sig_bits",
                        "type": "png_color_8p",
                        "definition": [
                            "png_color_8p sig_bits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "int",
                        "definition": [
                            "int k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_sig_bits",
                        "type": "png_byte",
                        "definition": [
                            "png_byte max_sig_bits = sig_bits->red"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_opng_get_alpha_row_1",
            "header": "",
            "params": [
                "png_bytep * const alpha_row_ref",
                "png_bytep * const sample_ptr_ref",
                "png_byte * const trans_red_ref",
                "png_byte * const trans_green_ref",
                "png_byte * const trans_blue_ref",
                "png_byte * const trans_gray_ref",
                "png_uint_32 * const i_ref",
                "png_color_16p trans_color",
                "png_bytep row",
                "png_uint_32 width",
                "int color_type",
                "int channels"
            ],
            "definition": "void helper_opng_get_alpha_row_1(png_bytep * const alpha_row_ref, png_bytep * const sample_ptr_ref, png_byte * const trans_red_ref, png_byte * const trans_green_ref, png_byte * const trans_blue_ref, png_byte * const trans_gray_ref, png_uint_32 * const i_ref, png_color_16p trans_color, png_bytep row, png_uint_32 width, int color_type, int channels)\n{\n  png_bytep alpha_row = *alpha_row_ref;\n  png_bytep sample_ptr = *sample_ptr_ref;\n  png_byte trans_red = *trans_red_ref;\n  png_byte trans_green = *trans_green_ref;\n  png_byte trans_blue = *trans_blue_ref;\n  png_byte trans_gray = *trans_gray_ref;\n  png_uint_32 i = *i_ref;\n  if (trans_color == 0)\n  {\n    memset(alpha_row, 255, (size_t) width);\n    return;\n  }\n  if (color_type == 2)\n  {\n    assert(channels == 3);\n    trans_red = (png_byte) trans_color->red;\n    trans_green = (png_byte) trans_color->green;\n    trans_blue = (png_byte) trans_color->blue;\n    sample_ptr = row;\n    for (i = 0; i < width; i += 1, sample_ptr += 3)\n    {\n      alpha_row[i] = (png_byte) ((((sample_ptr[0] == trans_red) && (sample_ptr[1] == trans_green)) && (sample_ptr[2] == trans_blue)) ? (0) : (255));\n    }\n\n  }\n  else\n  {\n    assert(color_type == 0);\n    assert(channels == 1);\n    trans_gray = (png_byte) trans_color->gray;\n    for (i = 0; i < width; i += 1)\n    {\n      alpha_row[i] = (png_byte) ((row[i] == trans_gray) ? (0) : (255));\n    }\n\n  }\n  return;\n  *alpha_row_ref = alpha_row;\n  *sample_ptr_ref = sample_ptr;\n  *trans_red_ref = trans_red;\n  *trans_green_ref = trans_green;\n  *trans_blue_ref = trans_blue;\n  *trans_gray_ref = trans_gray;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "assert",
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "alpha_row_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const alpha_row_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_ptr_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const sample_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_red_ref",
                        "type": "png_byte * const",
                        "definition": [
                            "png_byte * const trans_red_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_green_ref",
                        "type": "png_byte * const",
                        "definition": [
                            "png_byte * const trans_green_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_blue_ref",
                        "type": "png_byte * const",
                        "definition": [
                            "png_byte * const trans_blue_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_gray_ref",
                        "type": "png_byte * const",
                        "definition": [
                            "png_byte * const trans_gray_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_color",
                        "type": "png_color_16p",
                        "definition": [
                            "png_color_16p trans_color"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color_type",
                        "type": "int",
                        "definition": [
                            "int color_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "channels",
                        "type": "int",
                        "definition": [
                            "int channels"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alpha_row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep alpha_row = *alpha_row_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep sample_ptr = *sample_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_red",
                        "type": "png_byte",
                        "definition": [
                            "png_byte trans_red = *trans_red_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_green",
                        "type": "png_byte",
                        "definition": [
                            "png_byte trans_green = *trans_green_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_blue",
                        "type": "png_byte",
                        "definition": [
                            "png_byte trans_blue = *trans_blue_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_gray",
                        "type": "png_byte",
                        "definition": [
                            "png_byte trans_gray = *trans_gray_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 i = *i_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_opng_analyze_bits_1",
            "header": "",
            "params": [
                "png_uint_32 * const reductions_ref",
                "png_bytep * const component_ptr_ref",
                "png_uint_32 * const j_ref",
                "png_bytepp row_ptr",
                "png_uint_32 width",
                "int bit_depth",
                "int channels",
                "int sample_size",
                "int offset_alpha"
            ],
            "definition": "png_uint_32 helper_opng_analyze_bits_1(png_uint_32 * const reductions_ref, png_bytep * const component_ptr_ref, png_uint_32 * const j_ref, png_bytepp row_ptr, png_uint_32 width, int bit_depth, int channels, int sample_size, int offset_alpha)\n{\n  png_uint_32 reductions = *reductions_ref;\n  png_bytep component_ptr = *component_ptr_ref;\n  png_uint_32 j = *j_ref;\n  if (reductions == 0x0000)\n  {\n    return 0x0000;\n  }\n  if (reductions & 0x0001)\n  {\n    component_ptr = *row_ptr;\n    for (j = 0; j < (channels * width); j += 1, component_ptr += 2)\n    {\n      if (component_ptr[0] != component_ptr[1])\n      {\n        reductions &= ~0x0001;\n        break;\n      }\n    }\n\n  }\n  if (bit_depth == 8)\n  {\n    helper_helper_opng_analyze_bits_1_1(&reductions, &component_ptr, &j, row_ptr, width, sample_size, offset_alpha);\n  }\n  else\n  {\n    helper_helper_opng_analyze_bits_1_2(&reductions, &component_ptr, &j, row_ptr, width, sample_size, offset_alpha);\n  }\n  *reductions_ref = reductions;\n  *component_ptr_ref = component_ptr;\n  *j_ref = j;\n}\n\n",
            "calle": [
                "helper_helper_opng_analyze_bits_1_1",
                "helper_helper_opng_analyze_bits_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "reductions_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const reductions_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "component_ptr_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const component_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_ptr",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp row_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bit_depth",
                        "type": "int",
                        "definition": [
                            "int bit_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "channels",
                        "type": "int",
                        "definition": [
                            "int channels"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_size",
                        "type": "int",
                        "definition": [
                            "int sample_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offset_alpha",
                        "type": "int",
                        "definition": [
                            "int offset_alpha"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reductions",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 reductions = *reductions_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "component_ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep component_ptr = *component_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_opng_reduce_bits_1",
            "header": "",
            "params": [
                "png_color_16p * const trans_color_ref",
                "png_structp png_ptr",
                "png_infop info_ptr",
                "png_uint_32 reductions"
            ],
            "definition": "void helper_opng_reduce_bits_1(png_color_16p * const trans_color_ref, png_structp png_ptr, png_infop info_ptr, png_uint_32 reductions)\n{\n  png_color_16p trans_color = *trans_color_ref;\n  if (reductions & 0x0001)\n  {\n    if (((((trans_color->red % 257) == 0) && ((trans_color->green % 257) == 0)) && ((trans_color->blue % 257) == 0)) && ((trans_color->gray % 257) == 0))\n    {\n      trans_color->red &= 255;\n      trans_color->green &= 255;\n      trans_color->blue &= 255;\n      trans_color->gray &= 255;\n    }\n    else\n    {\n      png_free_data(png_ptr, info_ptr, 0x2000U, -1);\n      png_set_invalid(png_ptr, info_ptr, 0x0010U);\n    }\n  }\n  if (reductions & 0x0004)\n  {\n    if ((trans_color->red == trans_color->green) || (trans_color->red == trans_color->blue))\n    {\n      trans_color->gray = trans_color->red;\n    }\n    else\n    {\n      png_free_data(png_ptr, info_ptr, 0x2000U, -1);\n      png_set_invalid(png_ptr, info_ptr, 0x0010U);\n    }\n  }\n  *trans_color_ref = trans_color;\n}\n\n",
            "calle": [
                "png_free_data",
                "png_set_invalid"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "trans_color_ref",
                        "type": "png_color_16p * const",
                        "definition": [
                            "png_color_16p * const trans_color_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_infop",
                        "definition": [
                            "png_infop info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reductions",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 reductions"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_color",
                        "type": "png_color_16p",
                        "definition": [
                            "png_color_16p trans_color = *trans_color_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_opng_reduce_bits_2",
            "header": "",
            "params": [
                "png_color_8p * const sig_bits_ref",
                "png_uint_32 reductions"
            ],
            "definition": "void helper_opng_reduce_bits_2(png_color_8p * const sig_bits_ref, png_uint_32 reductions)\n{\n  png_color_8p sig_bits = *sig_bits_ref;\n  if (reductions & 0x0001)\n  {\n    if (sig_bits->red > 8)\n    {\n      sig_bits->red = 8;\n    }\n    if (sig_bits->green > 8)\n    {\n      sig_bits->green = 8;\n    }\n    if (sig_bits->blue > 8)\n    {\n      sig_bits->blue = 8;\n    }\n    if (sig_bits->gray > 8)\n    {\n      sig_bits->gray = 8;\n    }\n    if (sig_bits->alpha > 8)\n    {\n      sig_bits->alpha = 8;\n    }\n  }\n  if (reductions & 0x0004)\n  {\n    png_byte max_sig_bits = sig_bits->red;\n    if (max_sig_bits < sig_bits->green)\n    {\n      max_sig_bits = sig_bits->green;\n    }\n    if (max_sig_bits < sig_bits->blue)\n    {\n      max_sig_bits = sig_bits->blue;\n    }\n    sig_bits->gray = max_sig_bits;\n  }\n  *sig_bits_ref = sig_bits;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "sig_bits_ref",
                        "type": "png_color_8p * const",
                        "definition": [
                            "png_color_8p * const sig_bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reductions",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 reductions"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sig_bits",
                        "type": "png_color_8p",
                        "definition": [
                            "png_color_8p sig_bits = *sig_bits_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_sig_bits",
                        "type": "png_byte",
                        "definition": [
                            "png_byte max_sig_bits = sig_bits->red"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_opng_reduce_palette_bits_1",
            "header": "",
            "params": [
                "png_bytepp * const row_ptr_ref",
                "png_bytep * const src_sample_ptr_ref",
                "png_bytep * const dest_sample_ptr_ref",
                "unsigned int * const dest_shift_ref",
                "unsigned int * const dest_buf_ref",
                "png_uint_32 * const i_ref",
                "png_uint_32 * const j_ref",
                "png_uint_32 width",
                "png_uint_32 height",
                "int dest_bit_depth"
            ],
            "definition": "void helper_opng_reduce_palette_bits_1(png_bytepp * const row_ptr_ref, png_bytep * const src_sample_ptr_ref, png_bytep * const dest_sample_ptr_ref, unsigned int * const dest_shift_ref, unsigned int * const dest_buf_ref, png_uint_32 * const i_ref, png_uint_32 * const j_ref, png_uint_32 width, png_uint_32 height, int dest_bit_depth)\n{\n  png_bytepp row_ptr = *row_ptr_ref;\n  png_bytep src_sample_ptr = *src_sample_ptr_ref;\n  png_bytep dest_sample_ptr = *dest_sample_ptr_ref;\n  unsigned int dest_shift = *dest_shift_ref;\n  unsigned int dest_buf = *dest_buf_ref;\n  png_uint_32 i = *i_ref;\n  png_uint_32 j = *j_ref;\n  for (i = 0; i < height; i += 1, row_ptr += 1)\n  {\n    src_sample_ptr = (dest_sample_ptr = *row_ptr);\n    dest_shift = 8;\n    dest_buf = 0;\n    for (j = 0; j < width; j += 1)\n    {\n      dest_shift -= dest_bit_depth;\n      if (dest_shift > 0)\n      {\n        dest_buf |= (*src_sample_ptr) << dest_shift;\n      }\n      else\n      {\n        *dest_sample_ptr = (png_byte) (dest_buf | (*src_sample_ptr));\n        dest_sample_ptr += 1;\n        dest_shift = 8;\n        dest_buf = 0;\n      }\n      src_sample_ptr += 1;\n    }\n\n    if (dest_shift != 0)\n    {\n      *dest_sample_ptr = (png_byte) dest_buf;\n    }\n  }\n\n  *row_ptr_ref = row_ptr;\n  *src_sample_ptr_ref = src_sample_ptr;\n  *dest_sample_ptr_ref = dest_sample_ptr;\n  *dest_shift_ref = dest_shift;\n  *dest_buf_ref = dest_buf;\n  *i_ref = i;\n  *j_ref = j;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "row_ptr_ref",
                        "type": "png_bytepp * const",
                        "definition": [
                            "png_bytepp * const row_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_sample_ptr_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const src_sample_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_sample_ptr_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const dest_sample_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_shift_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const dest_shift_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_buf_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const dest_buf_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_bit_depth",
                        "type": "int",
                        "definition": [
                            "int dest_bit_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_ptr",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp row_ptr = *row_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_sample_ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep src_sample_ptr = *src_sample_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_sample_ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dest_sample_ptr = *dest_sample_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_shift",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dest_shift = *dest_shift_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_buf",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dest_buf = *dest_buf_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_opng_reduce_palette_bits_2",
            "header": "",
            "params": [
                "png_bytepp * const row_ptr_ref",
                "png_bytep * const src_sample_ptr_ref",
                "png_bytep * const dest_sample_ptr_ref",
                "unsigned int * const src_mask_init_ref",
                "unsigned int * const src_mask_ref",
                "unsigned int * const src_shift_ref",
                "unsigned int * const dest_shift_ref",
                "unsigned int * const sample_ref",
                "unsigned int * const dest_buf_ref",
                "png_uint_32 * const i_ref",
                "png_uint_32 * const j_ref",
                "png_uint_32 width",
                "png_uint_32 height",
                "int src_bit_depth",
                "int dest_bit_depth"
            ],
            "definition": "void helper_opng_reduce_palette_bits_2(png_bytepp * const row_ptr_ref, png_bytep * const src_sample_ptr_ref, png_bytep * const dest_sample_ptr_ref, unsigned int * const src_mask_init_ref, unsigned int * const src_mask_ref, unsigned int * const src_shift_ref, unsigned int * const dest_shift_ref, unsigned int * const sample_ref, unsigned int * const dest_buf_ref, png_uint_32 * const i_ref, png_uint_32 * const j_ref, png_uint_32 width, png_uint_32 height, int src_bit_depth, int dest_bit_depth)\n{\n  png_bytepp row_ptr = *row_ptr_ref;\n  png_bytep src_sample_ptr = *src_sample_ptr_ref;\n  png_bytep dest_sample_ptr = *dest_sample_ptr_ref;\n  unsigned int src_mask_init = *src_mask_init_ref;\n  unsigned int src_mask = *src_mask_ref;\n  unsigned int src_shift = *src_shift_ref;\n  unsigned int dest_shift = *dest_shift_ref;\n  unsigned int sample = *sample_ref;\n  unsigned int dest_buf = *dest_buf_ref;\n  png_uint_32 i = *i_ref;\n  png_uint_32 j = *j_ref;\n  src_mask_init = (1 << (8 + src_bit_depth)) - (1 << 8);\n  for (i = 0; i < height; i += 1, row_ptr += 1)\n  {\n    helper_helper_opng_reduce_palette_bits_2_1(&src_sample_ptr, &dest_sample_ptr, &src_mask, &src_shift, &dest_shift, &sample, &dest_buf, &j, width, src_bit_depth, dest_bit_depth, row_ptr, src_mask_init);\n  }\n\n  *row_ptr_ref = row_ptr;\n  *src_sample_ptr_ref = src_sample_ptr;\n  *dest_sample_ptr_ref = dest_sample_ptr;\n  *src_mask_init_ref = src_mask_init;\n  *src_mask_ref = src_mask;\n  *src_shift_ref = src_shift;\n  *dest_shift_ref = dest_shift;\n  *sample_ref = sample;\n  *dest_buf_ref = dest_buf;\n  *i_ref = i;\n  *j_ref = j;\n}\n\n",
            "calle": [
                "helper_helper_opng_reduce_palette_bits_2_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "row_ptr_ref",
                        "type": "png_bytepp * const",
                        "definition": [
                            "png_bytepp * const row_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_sample_ptr_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const src_sample_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_sample_ptr_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const dest_sample_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_mask_init_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const src_mask_init_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_mask_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const src_mask_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_shift_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const src_shift_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_shift_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const dest_shift_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const sample_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_buf_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const dest_buf_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_bit_depth",
                        "type": "int",
                        "definition": [
                            "int src_bit_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_bit_depth",
                        "type": "int",
                        "definition": [
                            "int dest_bit_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_ptr",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp row_ptr = *row_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_sample_ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep src_sample_ptr = *src_sample_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_sample_ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dest_sample_ptr = *dest_sample_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_mask_init",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_mask_init = *src_mask_init_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_mask",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_mask = *src_mask_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_shift",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_shift = *src_shift_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_shift",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dest_shift = *dest_shift_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sample = *sample_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_buf",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dest_buf = *dest_buf_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_opng_reduce_to_palette_1",
            "header": "",
            "params": [
                "png_bytep * const sample_ptr_ref",
                "unsigned int * const gray_ref",
                "unsigned int * const red_ref",
                "unsigned int * const green_ref",
                "unsigned int * const blue_ref",
                "unsigned int * const alpha_ref",
                "unsigned int * const prev_gray_ref",
                "unsigned int * const prev_red_ref",
                "unsigned int * const prev_green_ref",
                "unsigned int * const prev_blue_ref",
                "unsigned int * const prev_alpha_ref",
                "png_uint_32 * const i_ref",
                "png_uint_32 * const j_ref",
                "png_row_info row_info",
                "png_bytepp row_ptr",
                "png_bytep alpha_row",
                "png_uint_32 height",
                "png_uint_32 width",
                "int color_type",
                "int channels",
                "png_color palette[256]",
                "png_byte trans_alpha[256]",
                "png_color_16p trans_color",
                "int num_palette",
                "int num_trans",
                "int index"
            ],
            "definition": "void helper_opng_reduce_to_palette_1(png_bytep * const sample_ptr_ref, unsigned int * const gray_ref, unsigned int * const red_ref, unsigned int * const green_ref, unsigned int * const blue_ref, unsigned int * const alpha_ref, unsigned int * const prev_gray_ref, unsigned int * const prev_red_ref, unsigned int * const prev_green_ref, unsigned int * const prev_blue_ref, unsigned int * const prev_alpha_ref, png_uint_32 * const i_ref, png_uint_32 * const j_ref, png_row_info row_info, png_bytepp row_ptr, png_bytep alpha_row, png_uint_32 height, png_uint_32 width, int color_type, int channels, png_color palette[256], png_byte trans_alpha[256], png_color_16p trans_color, int num_palette, int num_trans, int index)\n{\n  png_bytep sample_ptr = *sample_ptr_ref;\n  unsigned int gray = *gray_ref;\n  unsigned int red = *red_ref;\n  unsigned int green = *green_ref;\n  unsigned int blue = *blue_ref;\n  unsigned int alpha = *alpha_ref;\n  unsigned int prev_gray = *prev_gray_ref;\n  unsigned int prev_red = *prev_red_ref;\n  unsigned int prev_green = *prev_green_ref;\n  unsigned int prev_blue = *prev_blue_ref;\n  unsigned int prev_alpha = *prev_alpha_ref;\n  png_uint_32 i = *i_ref;\n  png_uint_32 j = *j_ref;\n  sample_ptr = *row_ptr;\n  opng_get_alpha_row(&row_info, trans_color, *row_ptr, alpha_row);\n  if (color_type & 2)\n  {\n    helper_helper_opng_reduce_to_palette_1_1(&sample_ptr, &red, &green, &blue, &alpha, &prev_red, &prev_green, &prev_blue, &prev_alpha, &i, &j, alpha_row, height, width, channels, palette, trans_alpha, num_palette, num_trans, index);\n  }\n  else\n  {\n    for (j = 0; j < width; j += 1, sample_ptr += channels)\n    {\n      gray = sample_ptr[0];\n      alpha = alpha_row[j];\n      if ((gray != prev_gray) || (alpha != prev_alpha))\n      {\n        prev_gray = gray;\n        prev_alpha = alpha;\n        if (opng_insert_palette_entry(palette, &num_palette, trans_alpha, &num_trans, 256, gray, gray, gray, alpha, &index) < 0)\n        {\n          assert(num_palette < 0);\n          i = height;\n          break;\n        }\n      }\n    }\n\n  }\n  *sample_ptr_ref = sample_ptr;\n  *gray_ref = gray;\n  *red_ref = red;\n  *green_ref = green;\n  *blue_ref = blue;\n  *alpha_ref = alpha;\n  *prev_gray_ref = prev_gray;\n  *prev_red_ref = prev_red;\n  *prev_green_ref = prev_green;\n  *prev_blue_ref = prev_blue;\n  *prev_alpha_ref = prev_alpha;\n  *i_ref = i;\n  *j_ref = j;\n}\n\n",
            "calle": [
                "assert",
                "helper_helper_opng_reduce_to_palette_1_1",
                "opng_get_alpha_row",
                "opng_insert_palette_entry"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "sample_ptr_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const sample_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gray_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const gray_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "red_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const red_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "green_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const green_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blue_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const blue_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alpha_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const alpha_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_gray_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const prev_gray_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_red_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const prev_red_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_green_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const prev_green_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_blue_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const prev_blue_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_alpha_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const prev_alpha_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_info",
                        "type": "png_row_info",
                        "definition": [
                            "png_row_info row_info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_ptr",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp row_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alpha_row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep alpha_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color_type",
                        "type": "int",
                        "definition": [
                            "int color_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "channels",
                        "type": "int",
                        "definition": [
                            "int channels"
                        ]
                    },
                    {
                        "path": null,
                        "name": "palette",
                        "type": "png_color [256]",
                        "definition": [
                            "png_color palette[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_alpha",
                        "type": "png_byte [256]",
                        "definition": [
                            "png_byte trans_alpha[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_color",
                        "type": "png_color_16p",
                        "definition": [
                            "png_color_16p trans_color"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_palette",
                        "type": "int",
                        "definition": [
                            "int num_palette"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_trans",
                        "type": "int",
                        "definition": [
                            "int num_trans"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "int",
                        "definition": [
                            "int index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep sample_ptr = *sample_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gray",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gray = *gray_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "red",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int red = *red_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "green",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int green = *green_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blue",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int blue = *blue_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alpha",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int alpha = *alpha_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_gray",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int prev_gray = *prev_gray_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_red",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int prev_red = *prev_red_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_green",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int prev_green = *prev_green_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_blue",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int prev_blue = *prev_blue_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_alpha",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int prev_alpha = *prev_alpha_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_opng_reduce_to_palette_2",
            "header": "",
            "params": [
                "png_bytepp * const row_ptr_ref",
                "png_bytep * const sample_ptr_ref",
                "int * const index_ref",
                "unsigned int * const gray_ref",
                "unsigned int * const red_ref",
                "unsigned int * const green_ref",
                "unsigned int * const blue_ref",
                "unsigned int * const alpha_ref",
                "unsigned int * const prev_gray_ref",
                "unsigned int * const prev_red_ref",
                "unsigned int * const prev_green_ref",
                "unsigned int * const prev_blue_ref",
                "unsigned int * const prev_alpha_ref",
                "png_uint_32 * const j_ref",
                "png_row_info row_info",
                "png_bytep alpha_row",
                "png_uint_32 width",
                "int color_type",
                "int channels",
                "png_color palette[256]",
                "png_byte trans_alpha[256]",
                "png_color_16p trans_color",
                "int num_palette",
                "int num_trans"
            ],
            "definition": "void helper_opng_reduce_to_palette_2(png_bytepp * const row_ptr_ref, png_bytep * const sample_ptr_ref, int * const index_ref, unsigned int * const gray_ref, unsigned int * const red_ref, unsigned int * const green_ref, unsigned int * const blue_ref, unsigned int * const alpha_ref, unsigned int * const prev_gray_ref, unsigned int * const prev_red_ref, unsigned int * const prev_green_ref, unsigned int * const prev_blue_ref, unsigned int * const prev_alpha_ref, png_uint_32 * const j_ref, png_row_info row_info, png_bytep alpha_row, png_uint_32 width, int color_type, int channels, png_color palette[256], png_byte trans_alpha[256], png_color_16p trans_color, int num_palette, int num_trans)\n{\n  png_bytepp row_ptr = *row_ptr_ref;\n  png_bytep sample_ptr = *sample_ptr_ref;\n  int index = *index_ref;\n  unsigned int gray = *gray_ref;\n  unsigned int red = *red_ref;\n  unsigned int green = *green_ref;\n  unsigned int blue = *blue_ref;\n  unsigned int alpha = *alpha_ref;\n  unsigned int prev_gray = *prev_gray_ref;\n  unsigned int prev_red = *prev_red_ref;\n  unsigned int prev_green = *prev_green_ref;\n  unsigned int prev_blue = *prev_blue_ref;\n  unsigned int prev_alpha = *prev_alpha_ref;\n  png_uint_32 j = *j_ref;\n  sample_ptr = *row_ptr;\n  opng_get_alpha_row(&row_info, trans_color, *row_ptr, alpha_row);\n  if (color_type & 2)\n  {\n    helper_helper_opng_reduce_to_palette_2_1(&row_ptr, &sample_ptr, &index, &red, &green, &blue, &alpha, &prev_red, &prev_green, &prev_blue, &prev_alpha, &j, alpha_row, width, channels, palette, trans_alpha, num_palette, num_trans);\n  }\n  else\n  {\n    for (j = 0; j < width; j += 1, sample_ptr += channels)\n    {\n      gray = sample_ptr[0];\n      alpha = alpha_row[j];\n      if ((gray != prev_gray) || (alpha != prev_alpha))\n      {\n        prev_gray = gray;\n        prev_alpha = alpha;\n        if (opng_insert_palette_entry(palette, &num_palette, trans_alpha, &num_trans, 256, gray, gray, gray, alpha, &index) != 0)\n        {\n          index = -1;\n        }\n      }\n      assert(index >= 0);\n      (*row_ptr)[j] = (png_byte) index;\n    }\n\n  }\n  *row_ptr_ref = row_ptr;\n  *sample_ptr_ref = sample_ptr;\n  *index_ref = index;\n  *gray_ref = gray;\n  *red_ref = red;\n  *green_ref = green;\n  *blue_ref = blue;\n  *alpha_ref = alpha;\n  *prev_gray_ref = prev_gray;\n  *prev_red_ref = prev_red;\n  *prev_green_ref = prev_green;\n  *prev_blue_ref = prev_blue;\n  *prev_alpha_ref = prev_alpha;\n  *j_ref = j;\n}\n\n",
            "calle": [
                "assert",
                "helper_helper_opng_reduce_to_palette_2_1",
                "opng_get_alpha_row",
                "opng_insert_palette_entry"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "row_ptr_ref",
                        "type": "png_bytepp * const",
                        "definition": [
                            "png_bytepp * const row_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_ptr_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const sample_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const index_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gray_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const gray_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "red_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const red_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "green_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const green_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blue_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const blue_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alpha_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const alpha_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_gray_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const prev_gray_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_red_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const prev_red_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_green_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const prev_green_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_blue_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const prev_blue_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_alpha_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const prev_alpha_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_info",
                        "type": "png_row_info",
                        "definition": [
                            "png_row_info row_info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alpha_row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep alpha_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color_type",
                        "type": "int",
                        "definition": [
                            "int color_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "channels",
                        "type": "int",
                        "definition": [
                            "int channels"
                        ]
                    },
                    {
                        "path": null,
                        "name": "palette",
                        "type": "png_color [256]",
                        "definition": [
                            "png_color palette[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_alpha",
                        "type": "png_byte [256]",
                        "definition": [
                            "png_byte trans_alpha[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_color",
                        "type": "png_color_16p",
                        "definition": [
                            "png_color_16p trans_color"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_palette",
                        "type": "int",
                        "definition": [
                            "int num_palette"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_trans",
                        "type": "int",
                        "definition": [
                            "int num_trans"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_ptr",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp row_ptr = *row_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep sample_ptr = *sample_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "int",
                        "definition": [
                            "int index = *index_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gray",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int gray = *gray_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "red",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int red = *red_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "green",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int green = *green_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blue",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int blue = *blue_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alpha",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int alpha = *alpha_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_gray",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int prev_gray = *prev_gray_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_red",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int prev_red = *prev_red_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_green",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int prev_green = *prev_green_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_blue",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int prev_blue = *prev_blue_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_alpha",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int prev_alpha = *prev_alpha_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_opng_analyze_sample_usage_1",
            "header": "",
            "params": [
                "png_bytep * const usage_map_ref",
                "png_bytepp * const row_ptr_ref",
                "png_bytep * const sample_ptr_ref",
                "int * const init_shift_ref",
                "int * const init_mask_ref",
                "int * const shift_ref",
                "int * const mask_ref",
                "png_uint_32 * const i_ref",
                "png_uint_32 * const j_ref",
                "png_uint_32 width",
                "png_uint_32 height",
                "int bit_depth"
            ],
            "definition": "void helper_opng_analyze_sample_usage_1(png_bytep * const usage_map_ref, png_bytepp * const row_ptr_ref, png_bytep * const sample_ptr_ref, int * const init_shift_ref, int * const init_mask_ref, int * const shift_ref, int * const mask_ref, png_uint_32 * const i_ref, png_uint_32 * const j_ref, png_uint_32 width, png_uint_32 height, int bit_depth)\n{\n  png_bytep usage_map = *usage_map_ref;\n  png_bytepp row_ptr = *row_ptr_ref;\n  png_bytep sample_ptr = *sample_ptr_ref;\n  int init_shift = *init_shift_ref;\n  int init_mask = *init_mask_ref;\n  int shift = *shift_ref;\n  int mask = *mask_ref;\n  png_uint_32 i = *i_ref;\n  png_uint_32 j = *j_ref;\n  assert(bit_depth < 8);\n  init_shift = 8 - bit_depth;\n  init_mask = (1 << 8) - (1 << init_shift);\n  for (i = 0; i < height; i += 1, row_ptr += 1)\n  {\n    for (j = 0, sample_ptr = *row_ptr; j < width; sample_ptr += 1)\n    {\n      mask = init_mask;\n      shift = init_shift;\n      do\n      {\n        usage_map[((*sample_ptr) & mask) >> shift] = 1;\n        mask >>= bit_depth;\n        shift -= bit_depth;\n        j += 1;\n      }\n      while ((mask > 0) && (j < width));\n    }\n\n  }\n\n  *usage_map_ref = usage_map;\n  *row_ptr_ref = row_ptr;\n  *sample_ptr_ref = sample_ptr;\n  *init_shift_ref = init_shift;\n  *init_mask_ref = init_mask;\n  *shift_ref = shift;\n  *mask_ref = mask;\n  *i_ref = i;\n  *j_ref = j;\n}\n\n",
            "calle": [
                "assert"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "usage_map_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const usage_map_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_ptr_ref",
                        "type": "png_bytepp * const",
                        "definition": [
                            "png_bytepp * const row_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_ptr_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const sample_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "init_shift_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const init_shift_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "init_mask_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const init_mask_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "shift_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const shift_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const mask_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bit_depth",
                        "type": "int",
                        "definition": [
                            "int bit_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "usage_map",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep usage_map = *usage_map_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_ptr",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp row_ptr = *row_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep sample_ptr = *sample_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "init_shift",
                        "type": "int",
                        "definition": [
                            "int init_shift = *init_shift_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "init_mask",
                        "type": "int",
                        "definition": [
                            "int init_mask = *init_mask_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "shift",
                        "type": "int",
                        "definition": [
                            "int shift = *shift_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask",
                        "type": "int",
                        "definition": [
                            "int mask = *mask_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_opng_reduce_palette_1",
            "header": "",
            "params": [
                "png_byte * const crt_trans_value_ref",
                "png_byte * const last_trans_value_ref",
                "png_color_16 * const gray_trans_ref",
                "int * const is_gray_ref",
                "int * const k_ref",
                "png_colorp palette",
                "png_bytep trans_alpha",
                "int last_color_index",
                "int last_trans_index",
                "png_byte is_used[256]"
            ],
            "definition": "void helper_opng_reduce_palette_1(png_byte * const crt_trans_value_ref, png_byte * const last_trans_value_ref, png_color_16 * const gray_trans_ref, int * const is_gray_ref, int * const k_ref, png_colorp palette, png_bytep trans_alpha, int last_color_index, int last_trans_index, png_byte is_used[256])\n{\n  png_byte crt_trans_value = *crt_trans_value_ref;\n  png_byte last_trans_value = *last_trans_value_ref;\n  png_color_16 gray_trans = *gray_trans_ref;\n  int is_gray = *is_gray_ref;\n  int k = *k_ref;\n  gray_trans.gray = palette[last_trans_index].red;\n  last_trans_value = trans_alpha[last_trans_index];\n  for (k = 0; k <= last_color_index; k += 1)\n  {\n    if (!is_used[k])\n    {\n      continue;\n    }\n    if (k <= last_trans_index)\n    {\n      crt_trans_value = trans_alpha[k];\n      if ((crt_trans_value < 255) && (palette[k].red != gray_trans.gray))\n      {\n        is_gray = 0;\n        break;\n      }\n    }\n    else\n      crt_trans_value = 255;\n    if ((palette[k].red == gray_trans.gray) && (crt_trans_value != last_trans_value))\n    {\n      is_gray = 0;\n      break;\n    }\n  }\n\n  *crt_trans_value_ref = crt_trans_value;\n  *last_trans_value_ref = last_trans_value;\n  *gray_trans_ref = gray_trans;\n  *is_gray_ref = is_gray;\n  *k_ref = k;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "crt_trans_value_ref",
                        "type": "png_byte * const",
                        "definition": [
                            "png_byte * const crt_trans_value_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last_trans_value_ref",
                        "type": "png_byte * const",
                        "definition": [
                            "png_byte * const last_trans_value_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gray_trans_ref",
                        "type": "png_color_16 * const",
                        "definition": [
                            "png_color_16 * const gray_trans_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_gray_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const is_gray_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "palette",
                        "type": "png_colorp",
                        "definition": [
                            "png_colorp palette"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_alpha",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep trans_alpha"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last_color_index",
                        "type": "int",
                        "definition": [
                            "int last_color_index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last_trans_index",
                        "type": "int",
                        "definition": [
                            "int last_trans_index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_used",
                        "type": "png_byte [256]",
                        "definition": [
                            "png_byte is_used[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crt_trans_value",
                        "type": "png_byte",
                        "definition": [
                            "png_byte crt_trans_value = *crt_trans_value_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last_trans_value",
                        "type": "png_byte",
                        "definition": [
                            "png_byte last_trans_value = *last_trans_value_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gray_trans",
                        "type": "png_color_16",
                        "definition": [
                            "png_color_16 gray_trans = *gray_trans_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_gray",
                        "type": "int",
                        "definition": [
                            "int is_gray = *is_gray_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "int",
                        "definition": [
                            "int k = *k_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_opng_analyze_bits_1_1",
            "header": "",
            "params": [
                "png_uint_32 * const reductions_ref",
                "png_bytep * const component_ptr_ref",
                "png_uint_32 * const j_ref",
                "png_bytepp row_ptr",
                "png_uint_32 width",
                "int sample_size",
                "int offset_alpha"
            ],
            "definition": "void helper_helper_opng_analyze_bits_1_1(png_uint_32 * const reductions_ref, png_bytep * const component_ptr_ref, png_uint_32 * const j_ref, png_bytepp row_ptr, png_uint_32 width, int sample_size, int offset_alpha)\n{\n  png_uint_32 reductions = *reductions_ref;\n  png_bytep component_ptr = *component_ptr_ref;\n  png_uint_32 j = *j_ref;\n  if (reductions & 0x0004)\n  {\n    component_ptr = *row_ptr;\n    for (j = 0; j < width; j += 1, component_ptr += sample_size)\n    {\n      if ((component_ptr[0] != component_ptr[1]) || (component_ptr[0] != component_ptr[2]))\n      {\n        reductions &= ~0x0004;\n        break;\n      }\n    }\n\n  }\n  if (reductions & 0x0008)\n  {\n    component_ptr = (*row_ptr) + offset_alpha;\n    for (j = 0; j < width; j += 1, component_ptr += sample_size)\n    {\n      if (component_ptr[0] != 255)\n      {\n        reductions &= ~0x0008;\n        break;\n      }\n    }\n\n  }\n  *reductions_ref = reductions;\n  *component_ptr_ref = component_ptr;\n  *j_ref = j;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "reductions_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const reductions_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "component_ptr_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const component_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_ptr",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp row_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_size",
                        "type": "int",
                        "definition": [
                            "int sample_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offset_alpha",
                        "type": "int",
                        "definition": [
                            "int offset_alpha"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reductions",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 reductions = *reductions_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "component_ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep component_ptr = *component_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_opng_analyze_bits_1_2",
            "header": "",
            "params": [
                "png_uint_32 * const reductions_ref",
                "png_bytep * const component_ptr_ref",
                "png_uint_32 * const j_ref",
                "png_bytepp row_ptr",
                "png_uint_32 width",
                "int sample_size",
                "int offset_alpha"
            ],
            "definition": "void helper_helper_opng_analyze_bits_1_2(png_uint_32 * const reductions_ref, png_bytep * const component_ptr_ref, png_uint_32 * const j_ref, png_bytepp row_ptr, png_uint_32 width, int sample_size, int offset_alpha)\n{\n  png_uint_32 reductions = *reductions_ref;\n  png_bytep component_ptr = *component_ptr_ref;\n  png_uint_32 j = *j_ref;\n  if (reductions & 0x0004)\n  {\n    component_ptr = *row_ptr;\n    for (j = 0; j < width; j += 1, component_ptr += sample_size)\n    {\n      if ((((component_ptr[0] != component_ptr[2]) || (component_ptr[0] != component_ptr[4])) || (component_ptr[1] != component_ptr[3])) || (component_ptr[1] != component_ptr[5]))\n      {\n        reductions &= ~0x0004;\n        break;\n      }\n    }\n\n  }\n  if (reductions & 0x0008)\n  {\n    component_ptr = (*row_ptr) + offset_alpha;\n    for (j = 0; j < width; j += 1, component_ptr += sample_size)\n    {\n      if ((component_ptr[0] != 255) || (component_ptr[1] != 255))\n      {\n        reductions &= ~0x0008;\n        break;\n      }\n    }\n\n  }\n  *reductions_ref = reductions;\n  *component_ptr_ref = component_ptr;\n  *j_ref = j;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "reductions_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const reductions_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "component_ptr_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const component_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_ptr",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp row_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_size",
                        "type": "int",
                        "definition": [
                            "int sample_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offset_alpha",
                        "type": "int",
                        "definition": [
                            "int offset_alpha"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reductions",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 reductions = *reductions_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "component_ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep component_ptr = *component_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_opng_reduce_palette_bits_2_1",
            "header": "",
            "params": [
                "png_bytep * const src_sample_ptr_ref",
                "png_bytep * const dest_sample_ptr_ref",
                "unsigned int * const src_mask_ref",
                "unsigned int * const src_shift_ref",
                "unsigned int * const dest_shift_ref",
                "unsigned int * const sample_ref",
                "unsigned int * const dest_buf_ref",
                "png_uint_32 * const j_ref",
                "png_uint_32 width",
                "int src_bit_depth",
                "int dest_bit_depth",
                "png_bytepp row_ptr",
                "unsigned int src_mask_init"
            ],
            "definition": "void helper_helper_opng_reduce_palette_bits_2_1(png_bytep * const src_sample_ptr_ref, png_bytep * const dest_sample_ptr_ref, unsigned int * const src_mask_ref, unsigned int * const src_shift_ref, unsigned int * const dest_shift_ref, unsigned int * const sample_ref, unsigned int * const dest_buf_ref, png_uint_32 * const j_ref, png_uint_32 width, int src_bit_depth, int dest_bit_depth, png_bytepp row_ptr, unsigned int src_mask_init)\n{\n  png_bytep src_sample_ptr = *src_sample_ptr_ref;\n  png_bytep dest_sample_ptr = *dest_sample_ptr_ref;\n  unsigned int src_mask = *src_mask_ref;\n  unsigned int src_shift = *src_shift_ref;\n  unsigned int dest_shift = *dest_shift_ref;\n  unsigned int sample = *sample_ref;\n  unsigned int dest_buf = *dest_buf_ref;\n  png_uint_32 j = *j_ref;\n  src_sample_ptr = (dest_sample_ptr = *row_ptr);\n  src_shift = (dest_shift = 8);\n  src_mask = src_mask_init;\n  dest_buf = 0;\n  for (j = 0; j < width; j += 1)\n  {\n    helper_helper_helper_opng_reduce_palette_bits_2_1_1(&src_sample_ptr, &dest_sample_ptr, &src_mask, &src_shift, &dest_shift, &sample, &dest_buf, src_bit_depth, dest_bit_depth, src_mask_init);\n  }\n\n  if (dest_shift != 0)\n  {\n    *dest_sample_ptr = (png_byte) dest_buf;\n  }\n  *src_sample_ptr_ref = src_sample_ptr;\n  *dest_sample_ptr_ref = dest_sample_ptr;\n  *src_mask_ref = src_mask;\n  *src_shift_ref = src_shift;\n  *dest_shift_ref = dest_shift;\n  *sample_ref = sample;\n  *dest_buf_ref = dest_buf;\n  *j_ref = j;\n}\n\n",
            "calle": [
                "helper_helper_helper_opng_reduce_palette_bits_2_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "src_sample_ptr_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const src_sample_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_sample_ptr_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const dest_sample_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_mask_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const src_mask_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_shift_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const src_shift_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_shift_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const dest_shift_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const sample_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_buf_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const dest_buf_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_bit_depth",
                        "type": "int",
                        "definition": [
                            "int src_bit_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_bit_depth",
                        "type": "int",
                        "definition": [
                            "int dest_bit_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_ptr",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp row_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_mask_init",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_mask_init"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_sample_ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep src_sample_ptr = *src_sample_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_sample_ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dest_sample_ptr = *dest_sample_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_mask",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_mask = *src_mask_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_shift",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_shift = *src_shift_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_shift",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dest_shift = *dest_shift_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sample = *sample_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_buf",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dest_buf = *dest_buf_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_opng_reduce_to_palette_1_1",
            "header": "",
            "params": [
                "png_bytep * const sample_ptr_ref",
                "unsigned int * const red_ref",
                "unsigned int * const green_ref",
                "unsigned int * const blue_ref",
                "unsigned int * const alpha_ref",
                "unsigned int * const prev_red_ref",
                "unsigned int * const prev_green_ref",
                "unsigned int * const prev_blue_ref",
                "unsigned int * const prev_alpha_ref",
                "png_uint_32 * const i_ref",
                "png_uint_32 * const j_ref",
                "png_bytep alpha_row",
                "png_uint_32 height",
                "png_uint_32 width",
                "int channels",
                "png_color palette[256]",
                "png_byte trans_alpha[256]",
                "int num_palette",
                "int num_trans",
                "int index"
            ],
            "definition": "void helper_helper_opng_reduce_to_palette_1_1(png_bytep * const sample_ptr_ref, unsigned int * const red_ref, unsigned int * const green_ref, unsigned int * const blue_ref, unsigned int * const alpha_ref, unsigned int * const prev_red_ref, unsigned int * const prev_green_ref, unsigned int * const prev_blue_ref, unsigned int * const prev_alpha_ref, png_uint_32 * const i_ref, png_uint_32 * const j_ref, png_bytep alpha_row, png_uint_32 height, png_uint_32 width, int channels, png_color palette[256], png_byte trans_alpha[256], int num_palette, int num_trans, int index)\n{\n  png_bytep sample_ptr = *sample_ptr_ref;\n  unsigned int red = *red_ref;\n  unsigned int green = *green_ref;\n  unsigned int blue = *blue_ref;\n  unsigned int alpha = *alpha_ref;\n  unsigned int prev_red = *prev_red_ref;\n  unsigned int prev_green = *prev_green_ref;\n  unsigned int prev_blue = *prev_blue_ref;\n  unsigned int prev_alpha = *prev_alpha_ref;\n  png_uint_32 i = *i_ref;\n  png_uint_32 j = *j_ref;\n  for (j = 0; j < width; j += 1, sample_ptr += channels)\n  {\n    helper_helper_helper_opng_reduce_to_palette_1_1_1(&red, &green, &blue, &alpha, &prev_red, &prev_green, &prev_blue, &prev_alpha, &i, alpha_row, height, palette, trans_alpha, num_palette, num_trans, index, sample_ptr, j);\n  }\n\n  *sample_ptr_ref = sample_ptr;\n  *red_ref = red;\n  *green_ref = green;\n  *blue_ref = blue;\n  *alpha_ref = alpha;\n  *prev_red_ref = prev_red;\n  *prev_green_ref = prev_green;\n  *prev_blue_ref = prev_blue;\n  *prev_alpha_ref = prev_alpha;\n  *i_ref = i;\n  *j_ref = j;\n}\n\n",
            "calle": [
                "helper_helper_helper_opng_reduce_to_palette_1_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "sample_ptr_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const sample_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "red_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const red_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "green_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const green_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blue_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const blue_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alpha_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const alpha_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_red_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const prev_red_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_green_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const prev_green_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_blue_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const prev_blue_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_alpha_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const prev_alpha_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alpha_row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep alpha_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "channels",
                        "type": "int",
                        "definition": [
                            "int channels"
                        ]
                    },
                    {
                        "path": null,
                        "name": "palette",
                        "type": "png_color [256]",
                        "definition": [
                            "png_color palette[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_alpha",
                        "type": "png_byte [256]",
                        "definition": [
                            "png_byte trans_alpha[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_palette",
                        "type": "int",
                        "definition": [
                            "int num_palette"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_trans",
                        "type": "int",
                        "definition": [
                            "int num_trans"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "int",
                        "definition": [
                            "int index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep sample_ptr = *sample_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "red",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int red = *red_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "green",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int green = *green_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blue",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int blue = *blue_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alpha",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int alpha = *alpha_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_red",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int prev_red = *prev_red_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_green",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int prev_green = *prev_green_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_blue",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int prev_blue = *prev_blue_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_alpha",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int prev_alpha = *prev_alpha_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_opng_reduce_to_palette_2_1",
            "header": "",
            "params": [
                "png_bytepp * const row_ptr_ref",
                "png_bytep * const sample_ptr_ref",
                "int * const index_ref",
                "unsigned int * const red_ref",
                "unsigned int * const green_ref",
                "unsigned int * const blue_ref",
                "unsigned int * const alpha_ref",
                "unsigned int * const prev_red_ref",
                "unsigned int * const prev_green_ref",
                "unsigned int * const prev_blue_ref",
                "unsigned int * const prev_alpha_ref",
                "png_uint_32 * const j_ref",
                "png_bytep alpha_row",
                "png_uint_32 width",
                "int channels",
                "png_color palette[256]",
                "png_byte trans_alpha[256]",
                "int num_palette",
                "int num_trans"
            ],
            "definition": "void helper_helper_opng_reduce_to_palette_2_1(png_bytepp * const row_ptr_ref, png_bytep * const sample_ptr_ref, int * const index_ref, unsigned int * const red_ref, unsigned int * const green_ref, unsigned int * const blue_ref, unsigned int * const alpha_ref, unsigned int * const prev_red_ref, unsigned int * const prev_green_ref, unsigned int * const prev_blue_ref, unsigned int * const prev_alpha_ref, png_uint_32 * const j_ref, png_bytep alpha_row, png_uint_32 width, int channels, png_color palette[256], png_byte trans_alpha[256], int num_palette, int num_trans)\n{\n  png_bytepp row_ptr = *row_ptr_ref;\n  png_bytep sample_ptr = *sample_ptr_ref;\n  int index = *index_ref;\n  unsigned int red = *red_ref;\n  unsigned int green = *green_ref;\n  unsigned int blue = *blue_ref;\n  unsigned int alpha = *alpha_ref;\n  unsigned int prev_red = *prev_red_ref;\n  unsigned int prev_green = *prev_green_ref;\n  unsigned int prev_blue = *prev_blue_ref;\n  unsigned int prev_alpha = *prev_alpha_ref;\n  png_uint_32 j = *j_ref;\n  for (j = 0; j < width; j += 1, sample_ptr += channels)\n  {\n    helper_helper_helper_opng_reduce_to_palette_2_1_1(&row_ptr, &index, &red, &green, &blue, &alpha, &prev_red, &prev_green, &prev_blue, &prev_alpha, &j, alpha_row, palette, trans_alpha, num_palette, num_trans, sample_ptr);\n  }\n\n  *row_ptr_ref = row_ptr;\n  *sample_ptr_ref = sample_ptr;\n  *index_ref = index;\n  *red_ref = red;\n  *green_ref = green;\n  *blue_ref = blue;\n  *alpha_ref = alpha;\n  *prev_red_ref = prev_red;\n  *prev_green_ref = prev_green;\n  *prev_blue_ref = prev_blue;\n  *prev_alpha_ref = prev_alpha;\n  *j_ref = j;\n}\n\n",
            "calle": [
                "helper_helper_helper_opng_reduce_to_palette_2_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "row_ptr_ref",
                        "type": "png_bytepp * const",
                        "definition": [
                            "png_bytepp * const row_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_ptr_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const sample_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const index_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "red_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const red_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "green_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const green_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blue_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const blue_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alpha_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const alpha_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_red_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const prev_red_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_green_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const prev_green_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_blue_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const prev_blue_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_alpha_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const prev_alpha_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alpha_row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep alpha_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "channels",
                        "type": "int",
                        "definition": [
                            "int channels"
                        ]
                    },
                    {
                        "path": null,
                        "name": "palette",
                        "type": "png_color [256]",
                        "definition": [
                            "png_color palette[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_alpha",
                        "type": "png_byte [256]",
                        "definition": [
                            "png_byte trans_alpha[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_palette",
                        "type": "int",
                        "definition": [
                            "int num_palette"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_trans",
                        "type": "int",
                        "definition": [
                            "int num_trans"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_ptr",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp row_ptr = *row_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep sample_ptr = *sample_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "int",
                        "definition": [
                            "int index = *index_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "red",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int red = *red_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "green",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int green = *green_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blue",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int blue = *blue_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alpha",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int alpha = *alpha_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_red",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int prev_red = *prev_red_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_green",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int prev_green = *prev_green_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_blue",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int prev_blue = *prev_blue_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_alpha",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int prev_alpha = *prev_alpha_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_opng_reduce_palette_bits_2_1_1",
            "header": "",
            "params": [
                "png_bytep * const src_sample_ptr_ref",
                "png_bytep * const dest_sample_ptr_ref",
                "unsigned int * const src_mask_ref",
                "unsigned int * const src_shift_ref",
                "unsigned int * const dest_shift_ref",
                "unsigned int * const sample_ref",
                "unsigned int * const dest_buf_ref",
                "int src_bit_depth",
                "int dest_bit_depth",
                "unsigned int src_mask_init"
            ],
            "definition": "void helper_helper_helper_opng_reduce_palette_bits_2_1_1(png_bytep * const src_sample_ptr_ref, png_bytep * const dest_sample_ptr_ref, unsigned int * const src_mask_ref, unsigned int * const src_shift_ref, unsigned int * const dest_shift_ref, unsigned int * const sample_ref, unsigned int * const dest_buf_ref, int src_bit_depth, int dest_bit_depth, unsigned int src_mask_init)\n{\n  png_bytep src_sample_ptr = *src_sample_ptr_ref;\n  png_bytep dest_sample_ptr = *dest_sample_ptr_ref;\n  unsigned int src_mask = *src_mask_ref;\n  unsigned int src_shift = *src_shift_ref;\n  unsigned int dest_shift = *dest_shift_ref;\n  unsigned int sample = *sample_ref;\n  unsigned int dest_buf = *dest_buf_ref;\n  src_shift -= src_bit_depth;\n  src_mask >>= src_bit_depth;\n  sample = ((*src_sample_ptr) & src_mask) >> src_shift;\n  dest_shift -= dest_bit_depth;\n  if (dest_shift > 0)\n  {\n    dest_buf |= sample << dest_shift;\n  }\n  else\n  {\n    *dest_sample_ptr = (png_byte) (dest_buf | sample);\n    dest_sample_ptr += 1;\n    dest_shift = 8;\n    dest_buf = 0;\n  }\n  if (src_shift == 0)\n  {\n    src_shift = 8;\n    src_mask = src_mask_init;\n    src_sample_ptr += 1;\n  }\n  *src_sample_ptr_ref = src_sample_ptr;\n  *dest_sample_ptr_ref = dest_sample_ptr;\n  *src_mask_ref = src_mask;\n  *src_shift_ref = src_shift;\n  *dest_shift_ref = dest_shift;\n  *sample_ref = sample;\n  *dest_buf_ref = dest_buf;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "src_sample_ptr_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const src_sample_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_sample_ptr_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const dest_sample_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_mask_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const src_mask_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_shift_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const src_shift_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_shift_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const dest_shift_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const sample_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_buf_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const dest_buf_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_bit_depth",
                        "type": "int",
                        "definition": [
                            "int src_bit_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_bit_depth",
                        "type": "int",
                        "definition": [
                            "int dest_bit_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_mask_init",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_mask_init"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_sample_ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep src_sample_ptr = *src_sample_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_sample_ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dest_sample_ptr = *dest_sample_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_mask",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_mask = *src_mask_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_shift",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int src_shift = *src_shift_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_shift",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dest_shift = *dest_shift_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sample = *sample_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_buf",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dest_buf = *dest_buf_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_opng_reduce_to_palette_1_1_1",
            "header": "",
            "params": [
                "unsigned int * const red_ref",
                "unsigned int * const green_ref",
                "unsigned int * const blue_ref",
                "unsigned int * const alpha_ref",
                "unsigned int * const prev_red_ref",
                "unsigned int * const prev_green_ref",
                "unsigned int * const prev_blue_ref",
                "unsigned int * const prev_alpha_ref",
                "png_uint_32 * const i_ref",
                "png_bytep alpha_row",
                "png_uint_32 height",
                "png_color palette[256]",
                "png_byte trans_alpha[256]",
                "int num_palette",
                "int num_trans",
                "int index",
                "png_bytep sample_ptr",
                "png_uint_32 j"
            ],
            "definition": "void helper_helper_helper_opng_reduce_to_palette_1_1_1(unsigned int * const red_ref, unsigned int * const green_ref, unsigned int * const blue_ref, unsigned int * const alpha_ref, unsigned int * const prev_red_ref, unsigned int * const prev_green_ref, unsigned int * const prev_blue_ref, unsigned int * const prev_alpha_ref, png_uint_32 * const i_ref, png_bytep alpha_row, png_uint_32 height, png_color palette[256], png_byte trans_alpha[256], int num_palette, int num_trans, int index, png_bytep sample_ptr, png_uint_32 j)\n{\n  unsigned int red = *red_ref;\n  unsigned int green = *green_ref;\n  unsigned int blue = *blue_ref;\n  unsigned int alpha = *alpha_ref;\n  unsigned int prev_red = *prev_red_ref;\n  unsigned int prev_green = *prev_green_ref;\n  unsigned int prev_blue = *prev_blue_ref;\n  unsigned int prev_alpha = *prev_alpha_ref;\n  png_uint_32 i = *i_ref;\n  red = sample_ptr[0];\n  green = sample_ptr[1];\n  blue = sample_ptr[2];\n  alpha = alpha_row[j];\n  if ((((red != prev_red) || (green != prev_green)) || (blue != prev_blue)) || (alpha != prev_alpha))\n  {\n    prev_red = red;\n    prev_green = green;\n    prev_blue = blue;\n    prev_alpha = alpha;\n    if (opng_insert_palette_entry(palette, &num_palette, trans_alpha, &num_trans, 256, red, green, blue, alpha, &index) < 0)\n    {\n      assert(num_palette < 0);\n      i = height;\n      break;\n    }\n  }\n  *red_ref = red;\n  *green_ref = green;\n  *blue_ref = blue;\n  *alpha_ref = alpha;\n  *prev_red_ref = prev_red;\n  *prev_green_ref = prev_green;\n  *prev_blue_ref = prev_blue;\n  *prev_alpha_ref = prev_alpha;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "assert",
                "opng_insert_palette_entry"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "red_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const red_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "green_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const green_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blue_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const blue_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alpha_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const alpha_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_red_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const prev_red_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_green_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const prev_green_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_blue_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const prev_blue_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_alpha_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const prev_alpha_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alpha_row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep alpha_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "palette",
                        "type": "png_color [256]",
                        "definition": [
                            "png_color palette[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_alpha",
                        "type": "png_byte [256]",
                        "definition": [
                            "png_byte trans_alpha[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_palette",
                        "type": "int",
                        "definition": [
                            "int num_palette"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_trans",
                        "type": "int",
                        "definition": [
                            "int num_trans"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "int",
                        "definition": [
                            "int index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep sample_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "red",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int red = *red_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "green",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int green = *green_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blue",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int blue = *blue_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alpha",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int alpha = *alpha_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_red",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int prev_red = *prev_red_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_green",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int prev_green = *prev_green_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_blue",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int prev_blue = *prev_blue_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_alpha",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int prev_alpha = *prev_alpha_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 i = *i_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_opng_reduce_to_palette_2_1_1",
            "header": "",
            "params": [
                "png_bytepp * const row_ptr_ref",
                "int * const index_ref",
                "unsigned int * const red_ref",
                "unsigned int * const green_ref",
                "unsigned int * const blue_ref",
                "unsigned int * const alpha_ref",
                "unsigned int * const prev_red_ref",
                "unsigned int * const prev_green_ref",
                "unsigned int * const prev_blue_ref",
                "unsigned int * const prev_alpha_ref",
                "png_uint_32 * const j_ref",
                "png_bytep alpha_row",
                "png_color palette[256]",
                "png_byte trans_alpha[256]",
                "int num_palette",
                "int num_trans",
                "png_bytep sample_ptr"
            ],
            "definition": "void helper_helper_helper_opng_reduce_to_palette_2_1_1(png_bytepp * const row_ptr_ref, int * const index_ref, unsigned int * const red_ref, unsigned int * const green_ref, unsigned int * const blue_ref, unsigned int * const alpha_ref, unsigned int * const prev_red_ref, unsigned int * const prev_green_ref, unsigned int * const prev_blue_ref, unsigned int * const prev_alpha_ref, png_uint_32 * const j_ref, png_bytep alpha_row, png_color palette[256], png_byte trans_alpha[256], int num_palette, int num_trans, png_bytep sample_ptr)\n{\n  png_bytepp row_ptr = *row_ptr_ref;\n  int index = *index_ref;\n  unsigned int red = *red_ref;\n  unsigned int green = *green_ref;\n  unsigned int blue = *blue_ref;\n  unsigned int alpha = *alpha_ref;\n  unsigned int prev_red = *prev_red_ref;\n  unsigned int prev_green = *prev_green_ref;\n  unsigned int prev_blue = *prev_blue_ref;\n  unsigned int prev_alpha = *prev_alpha_ref;\n  png_uint_32 j = *j_ref;\n  red = sample_ptr[0];\n  green = sample_ptr[1];\n  blue = sample_ptr[2];\n  alpha = alpha_row[j];\n  if ((((red != prev_red) || (green != prev_green)) || (blue != prev_blue)) || (alpha != prev_alpha))\n  {\n    prev_red = red;\n    prev_green = green;\n    prev_blue = blue;\n    prev_alpha = alpha;\n    if (opng_insert_palette_entry(palette, &num_palette, trans_alpha, &num_trans, 256, red, green, blue, alpha, &index) != 0)\n    {\n      index = -1;\n    }\n  }\n  assert(index >= 0);\n  (*row_ptr)[j] = (png_byte) index;\n  *row_ptr_ref = row_ptr;\n  *index_ref = index;\n  *red_ref = red;\n  *green_ref = green;\n  *blue_ref = blue;\n  *alpha_ref = alpha;\n  *prev_red_ref = prev_red;\n  *prev_green_ref = prev_green;\n  *prev_blue_ref = prev_blue;\n  *prev_alpha_ref = prev_alpha;\n  *j_ref = j;\n}\n\n",
            "calle": [
                "assert",
                "opng_insert_palette_entry"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "row_ptr_ref",
                        "type": "png_bytepp * const",
                        "definition": [
                            "png_bytepp * const row_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const index_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "red_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const red_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "green_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const green_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blue_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const blue_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alpha_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const alpha_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_red_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const prev_red_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_green_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const prev_green_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_blue_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const prev_blue_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_alpha_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const prev_alpha_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alpha_row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep alpha_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "palette",
                        "type": "png_color [256]",
                        "definition": [
                            "png_color palette[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans_alpha",
                        "type": "png_byte [256]",
                        "definition": [
                            "png_byte trans_alpha[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_palette",
                        "type": "int",
                        "definition": [
                            "int num_palette"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_trans",
                        "type": "int",
                        "definition": [
                            "int num_trans"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep sample_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_ptr",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp row_ptr = *row_ptr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "index",
                        "type": "int",
                        "definition": [
                            "int index = *index_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "red",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int red = *red_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "green",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int green = *green_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blue",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int blue = *blue_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "alpha",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int alpha = *alpha_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_red",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int prev_red = *prev_red_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_green",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int prev_green = *prev_green_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_blue",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int prev_blue = *prev_blue_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prev_alpha",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int prev_alpha = *prev_alpha_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "GIFReadScreen",
            "header": "void GIFReadScreen(struct GIFScreen *screen, FILE *stream)",
            "params": [
                "struct GIFScreen *screen",
                "FILE *stream"
            ],
            "definition": "void GIFReadScreen(struct GIFScreen *screen, FILE *stream)\n{\n  unsigned char buffer[7];\n  (void) 0;\n  ReadBytes(buffer, 6, stream);\n  if (memcmp(buffer, \"GIF\", 3) != 0)\n  {\n    GIFError(\"Not a GIF file\");\n  }\n  if ((memcmp(buffer + 3, \"87a\", 3) != 0) && (memcmp(buffer + 3, \"89a\", 3) != 0))\n  {\n    GIFWarning(\"Invalid GIF version number, not \\\"87a\\\" or \\\"89a\\\"\");\n  }\n  (void) 0;\n  ReadBytes(buffer, 7, stream);\n  screen->Width = (buffer + 0)[0] + ((buffer + 0)[1] << 8);\n  screen->Height = (buffer + 2)[0] + ((buffer + 2)[1] << 8);\n  screen->GlobalColorFlag = (buffer[4] & 0x80) ? (1) : (0);\n  screen->ColorResolution = ((buffer[4] & 0x70) >> 3) + 1;\n  screen->SortFlag = (buffer[4] & 0x08) ? (1) : (0);\n  screen->GlobalNumColors = 2 << (buffer[4] & 0x07);\n  screen->Background = buffer[5];\n  screen->PixelAspectRatio = buffer[6];\n  if (screen->GlobalColorFlag)\n  {\n    (void) 0;\n    ReadBytes(screen->GlobalColorTable, 3 * screen->GlobalNumColors, stream);\n  }\n  (void) 0;\n  if ((screen->Width == 0) || (screen->Height == 0))\n  {\n    GIFError(\"Invalid dimensions in GIF image\");\n  }\n  if (screen->Background > 0)\n  {\n    if ((screen->GlobalColorFlag && (screen->Background >= screen->GlobalNumColors)) || (!screen->GlobalColorFlag))\n    {\n      screen->Background = 0;\n    }\n  }\n}\n\n",
            "calle": [
                "GIFError",
                "GIFWarning",
                "ReadBytes",
                "memcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct GIFScreen",
                        "type": "struct GIFScreen *",
                        "definition": [
                            "struct GIFScreen *screen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "unsigned char [7]",
                        "definition": [
                            "unsigned char buffer[7]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "GIFError",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "GIFWarning",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "GIFInitImage",
            "header": "void GIFInitImage(struct GIFImage *image, struct GIFScreen *screen, unsigned char **rows)",
            "params": [
                "struct GIFImage *image",
                "struct GIFScreen *screen",
                "unsigned char **rows"
            ],
            "definition": "void GIFInitImage(struct GIFImage *image, struct GIFScreen *screen, unsigned char **rows)\n{\n  image->Screen = screen;\n  image->Rows = rows;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct GIFImage",
                        "type": "struct GIFImage *",
                        "definition": [
                            "struct GIFImage *image"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct GIFScreen",
                        "type": "struct GIFScreen *",
                        "definition": [
                            "struct GIFScreen *screen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rows",
                        "type": "unsigned char **",
                        "definition": [
                            "unsigned char **rows"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "GIFDestroyImage",
            "header": "void GIFDestroyImage(struct GIFImage *image)",
            "params": [
                "struct GIFImage *image"
            ],
            "definition": "void GIFDestroyImage(struct GIFImage *image)\n{\n  (void) image;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct GIFImage",
                        "type": "struct GIFImage *",
                        "definition": [
                            "struct GIFImage *image"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "GIFReadNextBlock",
            "header": "int GIFReadNextBlock(struct GIFImage *image, struct GIFExtension *ext, FILE *stream)",
            "params": [
                "struct GIFImage *image",
                "struct GIFExtension *ext",
                "FILE *stream"
            ],
            "definition": "int GIFReadNextBlock(struct GIFImage *image, struct GIFExtension *ext, FILE *stream)\n{\n  int ch;\n  int foundBogus;\n  foundBogus = 0;\n  for (;;)\n  {\n    ch = GetByte(stream);\n    switch (ch)\n    {\n      case 0x2c:\n      {\n        GIFReadNextImage(image, stream);\n        return ch;\n      }\n\n      case 0x21:\n      {\n        GIFReadNextExtension(ext, stream);\n        return ch;\n      }\n\n      case 0x3b:\n      {\n        return ch;\n      }\n\n      default:\n      {\n        if (!foundBogus)\n        {\n          GIFWarning(\"Bogus data in GIF file\");\n        }\n        foundBogus = 1;\n      }\n\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "GIFReadNextExtension",
                "GIFReadNextImage",
                "GIFWarning",
                "GetByte"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct GIFImage",
                        "type": "struct GIFImage *",
                        "definition": [
                            "struct GIFImage *image"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct GIFExtension",
                        "type": "struct GIFExtension *",
                        "definition": [
                            "struct GIFExtension *ext"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "int",
                        "definition": [
                            "int ch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "foundBogus",
                        "type": "int",
                        "definition": [
                            "int foundBogus"
                        ]
                    },
                    {
                        "path": null,
                        "name": "GIFWarning",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "GIFGetColorTable",
            "header": "void GIFGetColorTable(unsigned char **colors, unsigned int *numColors, struct GIFImage *image)",
            "params": [
                "unsigned char **colors",
                "unsigned int *numColors",
                "struct GIFImage *image"
            ],
            "definition": "void GIFGetColorTable(unsigned char **colors, unsigned int *numColors, struct GIFImage *image)\n{\n  struct GIFScreen *screen;\n  unsigned int screen_idx = 0;\n  if (image->LocalColorFlag)\n  {\n    (void) 0;\n    *colors = image->LocalColorTable;\n    *numColors = image->LocalNumColors;\n    return;\n  }\n  screen_idx = image->Screen;\n  if (screen->GlobalColorFlag)\n  {\n    (void) 0;\n    *colors = screen->GlobalColorTable;\n    *numColors = screen->GlobalNumColors;\n    return;\n  }\n  (void) 0;\n  *colors = DefaultColorTable;\n  *numColors = (sizeof(DefaultColorTable)) / 3;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "colors",
                        "type": "unsigned char **",
                        "definition": [
                            "unsigned char **colors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "numColors",
                        "type": "unsigned int *",
                        "definition": [
                            "unsigned int *numColors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct GIFImage",
                        "type": "struct GIFImage *",
                        "definition": [
                            "struct GIFImage *image"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct GIFScreen",
                        "type": "struct GIFScreen *",
                        "definition": [
                            "struct GIFScreen *screen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "screen_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int screen_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "DefaultColorTable",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "GIFInitExtension",
            "header": "void GIFInitExtension(struct GIFExtension *ext, struct GIFScreen *screen, unsigned int initBufferSize)",
            "params": [
                "struct GIFExtension *ext",
                "struct GIFScreen *screen",
                "unsigned int initBufferSize"
            ],
            "definition": "void GIFInitExtension(struct GIFExtension *ext, struct GIFScreen *screen, unsigned int initBufferSize)\n{\n  unsigned char *newBuffer;\n  unsigned int newBuffer_idx = 0;\n  ext->Screen = screen;\n  if (initBufferSize > 0)\n  {\n    newBuffer_idx = (unsigned char *) malloc(initBufferSize);\n    if ((&newBuffer[newBuffer_idx]) == 0)\n    {\n      ErrorAlloc();\n    }\n    ext->Buffer = &newBuffer[newBuffer_idx];\n    ext->BufferSize = initBufferSize;\n  }\n  else\n  {\n    ext->Buffer = 0;\n    ext->BufferSize = 0;\n  }\n}\n\n",
            "calle": [
                "ErrorAlloc",
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct GIFExtension",
                        "type": "struct GIFExtension *",
                        "definition": [
                            "struct GIFExtension *ext"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct GIFScreen",
                        "type": "struct GIFScreen *",
                        "definition": [
                            "struct GIFScreen *screen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "initBufferSize",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int initBufferSize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "newBuffer",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *newBuffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "newBuffer_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int newBuffer_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "GIFDestroyExtension",
            "header": "void GIFDestroyExtension(struct GIFExtension *ext)",
            "params": [
                "struct GIFExtension *ext"
            ],
            "definition": "void GIFDestroyExtension(struct GIFExtension *ext)\n{\n  free(ext->Buffer);\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct GIFExtension",
                        "type": "struct GIFExtension *",
                        "definition": [
                            "struct GIFExtension *ext"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "GIFGetGraphicCtl",
            "header": "void GIFGetGraphicCtl(struct GIFGraphicCtlExt *graphicExt, struct GIFExtension *ext)",
            "params": [
                "struct GIFGraphicCtlExt *graphicExt",
                "struct GIFExtension *ext"
            ],
            "definition": "void GIFGetGraphicCtl(struct GIFGraphicCtlExt *graphicExt, struct GIFExtension *ext)\n{\n  unsigned char *buffer;\n  unsigned int buffer_idx = 0;\n  (void) 0;\n  if (ext->Label != 0xf9)\n  {\n    GIFWarning(\"Not a graphic control extension in GIF file\");\n    return;\n  }\n  if (ext->BufferSize < 4)\n  {\n    GIFWarning(\"Broken graphic control extension in GIF file\");\n    return;\n  }\n  buffer_idx = ext->Buffer;\n  graphicExt->DisposalMethod = (buffer[0 + buffer_idx] >> 2) & 0x07;\n  graphicExt->InputFlag = (buffer[0 + buffer_idx] >> 1) & 0x01;\n  graphicExt->TransparentFlag = buffer[0 + buffer_idx] & 0x01;\n  graphicExt->DelayTime = ((&buffer[buffer_idx]) + 1)[0] + (((&buffer[buffer_idx]) + 1)[1] << 8);\n  graphicExt->Transparent = buffer[3 + buffer_idx];\n}\n\n",
            "calle": [
                "GIFWarning"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct GIFGraphicCtlExt",
                        "type": "struct GIFGraphicCtlExt *",
                        "definition": [
                            "struct GIFGraphicCtlExt *graphicExt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct GIFExtension",
                        "type": "struct GIFExtension *",
                        "definition": [
                            "struct GIFExtension *ext"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int buffer_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "GIFWarning",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "GIFReadNextImage",
            "header": "static void GIFReadNextImage(struct GIFImage *image, FILE *stream)",
            "params": [
                "struct GIFImage *image",
                "FILE *stream"
            ],
            "definition": "static void GIFReadNextImage(struct GIFImage *image, FILE *stream)\n{\n  struct GIFScreen *screen;\n  unsigned int screen_idx = 0;\n  unsigned char buffer[9];\n  (void) 0;\n  ReadBytes(buffer, 9, stream);\n  if (image == 0)\n  {\n    GIFSkipDataBlocks(stream);\n    return;\n  }\n  image->LeftPos = (buffer + 0)[0] + ((buffer + 0)[1] << 8);\n  image->TopPos = (buffer + 2)[0] + ((buffer + 2)[1] << 8);\n  image->Width = (buffer + 4)[0] + ((buffer + 4)[1] << 8);\n  image->Height = (buffer + 6)[0] + ((buffer + 6)[1] << 8);\n  image->LocalColorFlag = (buffer[8] & 0x80) ? (1) : (0);\n  image->InterlaceFlag = (buffer[8] & 0x40) ? (1) : (0);\n  image->SortFlag = (buffer[8] & 0x20) ? (1) : (0);\n  image->LocalNumColors = (image->LocalColorFlag) ? (2 << (buffer[8] & 0x07)) : (0);\n  if (image->LocalColorFlag)\n  {\n    (void) 0;\n    ReadBytes(image->LocalColorTable, 3 * image->LocalNumColors, stream);\n  }\n  (void) 0;\n  screen_idx = image->Screen;\n  if ((((image->Width == 0) || (image->Height == 0)) || ((image->LeftPos + image->Width) > screen->Width)) || ((image->TopPos + image->Height) > screen->Height))\n  {\n    GIFError(\"Invalid dimensions in GIF image\");\n  }\n  GIFReadImageData(image, stream);\n}\n\n",
            "calle": [
                "GIFError",
                "GIFReadImageData",
                "GIFSkipDataBlocks",
                "ReadBytes"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct GIFImage",
                        "type": "struct GIFImage *",
                        "definition": [
                            "struct GIFImage *image"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct GIFScreen",
                        "type": "struct GIFScreen *",
                        "definition": [
                            "struct GIFScreen *screen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "screen_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int screen_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "unsigned char [9]",
                        "definition": [
                            "unsigned char buffer[9]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "GIFError",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "GIFReadImageData",
            "header": "static void GIFReadImageData(struct GIFImage *image, FILE *stream)",
            "params": [
                "struct GIFImage *image",
                "FILE *stream"
            ],
            "definition": "static void GIFReadImageData(struct GIFImage *image, FILE *stream)\n{\n  int minCodeSize;\n  unsigned char **rows;\n  unsigned int rows_idx = 0;\n  unsigned int width;\n  unsigned int height;\n  unsigned int interlaced;\n  unsigned char *colors;\n  unsigned int numColors;\n  unsigned int xpos;\n  unsigned int ypos;\n  int pass;\n  int val;\n  (void) 0;\n  minCodeSize = GetByte(stream);\n  if (minCodeSize >= 12)\n  {\n    GIFError(\"Invalid LZW code size\");\n  }\n  if (LZWDecodeByte(1, minCodeSize, stream) < 0)\n  {\n    GIFError(\"Error decoding GIF image\");\n  }\n  rows_idx = image->Rows;\n  if ((&rows[rows_idx]) == 0)\n  {\n    GIFSkipDataBlocks(stream);\n    return;\n  }\n  width = image->Width;\n  height = image->Height;\n  interlaced = image->InterlaceFlag;\n  GIFGetColorTable(&colors, &numColors, image);\n  xpos = (ypos = 0);\n  pass = 0;\n  while ((val = LZWDecodeByte(0, minCodeSize, stream)) >= 0)\n  {\n    helper_GIFReadImageData_1(&rows_idx, &xpos, &ypos, &val, rows, width, height, interlaced, numColors, pass);\n  }\n\n  fini:\n  while (LZWDecodeByte(0, minCodeSize, stream) >= 0)\n  {\n  }\n\n\n}\n\n",
            "calle": [
                "GIFError",
                "GIFGetColorTable",
                "GIFSkipDataBlocks",
                "GetByte",
                "LZWDecodeByte",
                "helper_GIFReadImageData_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct GIFImage",
                        "type": "struct GIFImage *",
                        "definition": [
                            "struct GIFImage *image"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minCodeSize",
                        "type": "int",
                        "definition": [
                            "int minCodeSize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rows",
                        "type": "unsigned char **",
                        "definition": [
                            "unsigned char **rows"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rows_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int rows_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "interlaced",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int interlaced"
                        ]
                    },
                    {
                        "path": null,
                        "name": "colors",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *colors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "numColors",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int numColors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xpos",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int xpos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ypos",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ypos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pass",
                        "type": "int",
                        "definition": [
                            "int pass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int",
                        "definition": [
                            "int val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "GIFError",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "GIFReadDataBlock",
            "header": "static int GIFReadDataBlock(unsigned char *buffer, FILE *stream)",
            "params": [
                "unsigned char *buffer",
                "FILE *stream"
            ],
            "definition": "static int GIFReadDataBlock(unsigned char *buffer, FILE *stream)\n{\n  int count;\n  count = GetByte(stream);\n  DataBlockSize = count;\n  if (count > 0)\n  {\n    ReadBytes(buffer, count, stream);\n  }\n  return count;\n}\n\n",
            "calle": [
                "GetByte",
                "ReadBytes"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "DataBlockSize",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "GIFSkipDataBlocks",
            "header": "static void GIFSkipDataBlocks(FILE *stream)",
            "params": [
                "FILE *stream"
            ],
            "definition": "static void GIFSkipDataBlocks(FILE *stream)\n{\n  int count;\n  unsigned char buffer[256];\n  for (;;)\n  {\n    count = GetByte(stream);\n    if (count > 0)\n    {\n      ReadBytes(buffer, count, stream);\n    }\n    else\n      return;\n  }\n\n}\n\n",
            "calle": [
                "GetByte",
                "ReadBytes"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "unsigned char [256]",
                        "definition": [
                            "unsigned char buffer[256]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "LZWGetCode",
            "header": "static int LZWGetCode(int code_size, int init_flag, FILE *stream)",
            "params": [
                "int code_size",
                "int init_flag",
                "FILE *stream"
            ],
            "definition": "static int LZWGetCode(int code_size, int init_flag, FILE *stream)\n{\n  static unsigned char buffer[280];\n  static int curbit;\n  static int lastbit;\n  static int done;\n  static int last_byte;\n  int count;\n  int i;\n  int j;\n  int ret;\n  if (init_flag)\n  {\n    curbit = 0;\n    lastbit = 0;\n    last_byte = 2;\n    done = 0;\n    return 0;\n  }\n  if ((curbit + code_size) >= lastbit)\n  {\n    helper_LZWGetCode_1(&curbit, &lastbit, &done, &last_byte, &count, stream, buffer);\n  }\n  if (code_size && ((((size_t) ((curbit + code_size) - 1)) / 8) >= (sizeof(buffer))))\n  {\n    GIFError(\"Malformed GIF (CVE-2023-43907)\");\n  }\n  ret = 0;\n  for (i = curbit, j = 0; j < code_size; i += 1, j += 1)\n  {\n    ret |= ((buffer[i / 8] & (1 << (i % 8))) != 0) << j;\n  }\n\n  curbit += code_size;\n  return ret;\n}\n\n",
            "calle": [
                "GIFError",
                "helper_LZWGetCode_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "code_size",
                        "type": "int",
                        "definition": [
                            "int code_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "init_flag",
                        "type": "int",
                        "definition": [
                            "int init_flag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "unsigned char [280]",
                        "definition": [
                            "static unsigned char buffer[280]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curbit",
                        "type": "int",
                        "definition": [
                            "static int curbit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lastbit",
                        "type": "int",
                        "definition": [
                            "static int lastbit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "done",
                        "type": "int",
                        "definition": [
                            "static int done"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last_byte",
                        "type": "int",
                        "definition": [
                            "static int last_byte"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret"
                        ]
                    },
                    {
                        "path": null,
                        "name": "GIFError",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "LZWDecodeByte",
            "header": "static int LZWDecodeByte(int init_flag, int input_code_size, FILE *stream)",
            "params": [
                "int init_flag",
                "int input_code_size",
                "FILE *stream"
            ],
            "definition": "static int LZWDecodeByte(int init_flag, int input_code_size, FILE *stream)\n{\n  static int fresh = 0;\n  static int code_size;\n  static int set_code_size;\n  static int max_code;\n  static int max_code_size;\n  static int firstcode;\n  static int oldcode;\n  static int clear_code;\n  static int end_code;\n  static int table[2][((1 << 12) - 1) + 1];\n  static int stack[(((1 << 12) - 1) + 1) * 2];\n  static int *sp;\n  unsigned int sp_idx = 0;\n  int code;\n  int incode;\n  int i;\n  if (init_flag)\n  {\n    helper_LZWDecodeByte_1(&fresh, &code_size, &set_code_size, &max_code, &max_code_size, &clear_code, &end_code, &sp_idx, &i, input_code_size, stream, table, stack);\n  }\n  else\n    if (fresh)\n  {\n    fresh = 0;\n    do\n    {\n      firstcode = (oldcode = LZWGetCode(code_size, 0, stream));\n    }\n    while (firstcode == clear_code);\n    return firstcode;\n  }\n  if ((&sp[sp_idx]) > stack)\n  {\n    sp_idx -= 1;\n    return sp[sp_idx];\n  }\n  while ((code = LZWGetCode(code_size, 0, stream)) >= 0)\n  {\n    helper_LZWDecodeByte_2(&code_size, &max_code, &max_code_size, &firstcode, &oldcode, &sp_idx, &code, &incode, &i, stream, set_code_size, clear_code, end_code, table, stack, sp);\n  }\n\n  return code;\n}\n\n",
            "calle": [
                "LZWGetCode",
                "helper_LZWDecodeByte_1",
                "helper_LZWDecodeByte_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "init_flag",
                        "type": "int",
                        "definition": [
                            "int init_flag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_code_size",
                        "type": "int",
                        "definition": [
                            "int input_code_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fresh",
                        "type": "int",
                        "definition": [
                            "static int fresh = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code_size",
                        "type": "int",
                        "definition": [
                            "static int code_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "set_code_size",
                        "type": "int",
                        "definition": [
                            "static int set_code_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_code",
                        "type": "int",
                        "definition": [
                            "static int max_code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_code_size",
                        "type": "int",
                        "definition": [
                            "static int max_code_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "firstcode",
                        "type": "int",
                        "definition": [
                            "static int firstcode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oldcode",
                        "type": "int",
                        "definition": [
                            "static int oldcode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "clear_code",
                        "type": "int",
                        "definition": [
                            "static int clear_code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end_code",
                        "type": "int",
                        "definition": [
                            "static int end_code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "table",
                        "type": "int [2][((1 << 12) - 1) + 1]",
                        "definition": [
                            "static int table[2][((1 << 12) - 1) + 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stack",
                        "type": "int [(((1 << 12) - 1) + 1) * 2]",
                        "definition": [
                            "static int stack[(((1 << 12) - 1) + 1) * 2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp",
                        "type": "int *",
                        "definition": [
                            "static int *sp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sp_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code",
                        "type": "int",
                        "definition": [
                            "int code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "incode",
                        "type": "int",
                        "definition": [
                            "int incode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "GIFReadNextExtension",
            "header": "static void GIFReadNextExtension(struct GIFExtension *ext, FILE *stream)",
            "params": [
                "struct GIFExtension *ext",
                "FILE *stream"
            ],
            "definition": "static void GIFReadNextExtension(struct GIFExtension *ext, FILE *stream)\n{\n  unsigned char *newBuffer;\n  unsigned int newBuffer_idx = 0;\n  unsigned int newBufferSize;\n  unsigned int offset;\n  unsigned int len;\n  int count;\n  int label;\n  label = GetByte(stream);\n  (void) 0;\n  if (ext == 0)\n  {\n    GIFSkipDataBlocks(stream);\n    return;\n  }\n  ext->Label = (unsigned char) label;\n  offset = 0;\n  len = ext->BufferSize;\n  for (;;)\n  {\n    if (len < 255)\n    {\n      newBufferSize = ext->BufferSize + 1024;\n      newBuffer_idx = (unsigned char *) realloc(ext->Buffer, newBufferSize);\n      if ((&newBuffer[newBuffer_idx]) == 0)\n      {\n        ErrorAlloc();\n      }\n      ext->BufferSize = newBufferSize;\n      ext->Buffer = &newBuffer[newBuffer_idx];\n      len += 1024;\n    }\n    count = GIFReadDataBlock(ext->Buffer + offset, stream);\n    if (count == 0)\n    {\n      break;\n    }\n    offset += count;\n    len -= count;\n  }\n\n}\n\n",
            "calle": [
                "ErrorAlloc",
                "GIFReadDataBlock",
                "GIFSkipDataBlocks",
                "GetByte",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct GIFExtension",
                        "type": "struct GIFExtension *",
                        "definition": [
                            "struct GIFExtension *ext"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "newBuffer",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *newBuffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "newBuffer_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int newBuffer_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "newBufferSize",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int newBufferSize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offset",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "label",
                        "type": "int",
                        "definition": [
                            "int label"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "GetByte",
            "header": "static int GetByte(FILE *stream)",
            "params": [
                "FILE *stream"
            ],
            "definition": "static int GetByte(FILE *stream)\n{\n  int ch;\n  if ((ch = getc(stream)) == EOF)\n  {\n    ErrorRead(stream);\n  }\n  return ch;\n}\n\n",
            "calle": [
                "ErrorRead",
                "getc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "int",
                        "definition": [
                            "int ch"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ReadBytes",
            "header": "static void ReadBytes(unsigned char *buffer, unsigned int count, FILE *stream)",
            "params": [
                "unsigned char *buffer",
                "unsigned int count",
                "FILE *stream"
            ],
            "definition": "static void ReadBytes(unsigned char *buffer, unsigned int count, FILE *stream)\n{\n  if (fread(buffer, count, 1, stream) != 1)\n  {\n    ErrorRead(stream);\n  }\n}\n\n",
            "calle": [
                "ErrorRead",
                "fread"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ErrorAlloc",
            "header": "static void ErrorAlloc(void)",
            "params": [
                "void"
            ],
            "definition": "static void ErrorAlloc(void)\n{\n  GIFError(\"Out of memory in GIF decoder\");\n}\n\n",
            "calle": [
                "GIFError"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "GIFError",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "ErrorRead",
            "header": "static void ErrorRead(FILE *stream)",
            "params": [
                "FILE *stream"
            ],
            "definition": "static void ErrorRead(FILE *stream)\n{\n  if (ferror(stream))\n  {\n    GIFError(\"Error reading GIF file\");\n  }\n  else\n    GIFError(\"Unexpected end of GIF file\");\n}\n\n",
            "calle": [
                "GIFError",
                "ferror"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "GIFError",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "DefaultError",
            "header": "static void DefaultError(const char *message)",
            "params": [
                "const char *message"
            ],
            "definition": "static void DefaultError(const char *message)\n{\n  fprintf(stderr, \"%s\\n\", message);\n  exit(1);\n}\n\n",
            "calle": [
                "exit",
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "message",
                        "type": "const char *",
                        "definition": [
                            "const char *message"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "DefaultWarning",
            "header": "static void DefaultWarning(const char *message)",
            "params": [
                "const char *message"
            ],
            "definition": "static void DefaultWarning(const char *message)\n{\n  fprintf(stderr, \"%s\\n\", message);\n}\n\n",
            "calle": [
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "message",
                        "type": "const char *",
                        "definition": [
                            "const char *message"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_GIFReadImageData_1",
            "header": "",
            "params": [
                "unsigned int * const rows_idx_ref",
                "unsigned int * const xpos_ref",
                "unsigned int * const ypos_ref",
                "int * const val_ref",
                "unsigned char ** const rows",
                "unsigned int width",
                "unsigned int height",
                "unsigned int interlaced",
                "unsigned int numColors",
                "int pass"
            ],
            "definition": "void helper_GIFReadImageData_1(unsigned int * const rows_idx_ref, unsigned int * const xpos_ref, unsigned int * const ypos_ref, int * const val_ref, unsigned char ** const rows, unsigned int width, unsigned int height, unsigned int interlaced, unsigned int numColors, int pass)\n{\n  unsigned int rows_idx = *rows_idx_ref;\n  unsigned int xpos = *xpos_ref;\n  unsigned int ypos = *ypos_ref;\n  int val = *val_ref;\n  if (((unsigned int) val) >= numColors)\n  {\n    GIFWarning(\"Pixel value out of range in GIF image\");\n    val = numColors - 1;\n  }\n  rows[ypos + rows_idx][xpos] = (unsigned char) val;\n  if ((++xpos) == width)\n  {\n    helper_helper_GIFReadImageData_1_1(&xpos, &ypos, height, interlaced, pass);\n  }\n  if (ypos >= height)\n  {\n    break;\n  }\n  *rows_idx_ref = rows_idx;\n  *xpos_ref = xpos;\n  *ypos_ref = ypos;\n  *val_ref = val;\n}\n\n",
            "calle": [
                "GIFWarning",
                "helper_helper_GIFReadImageData_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "rows_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const rows_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xpos_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const xpos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ypos_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const ypos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rows",
                        "type": "unsigned char ** const",
                        "definition": [
                            "unsigned char ** const rows"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "interlaced",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int interlaced"
                        ]
                    },
                    {
                        "path": null,
                        "name": "numColors",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int numColors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pass",
                        "type": "int",
                        "definition": [
                            "int pass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rows_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int rows_idx = *rows_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xpos",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int xpos = *xpos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ypos",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ypos = *ypos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int",
                        "definition": [
                            "int val = *val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "GIFWarning",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_LZWGetCode_1",
            "header": "",
            "params": [
                "static int * const curbit_ref",
                "static int * const lastbit_ref",
                "static int * const done_ref",
                "static int * const last_byte_ref",
                "int * const count_ref",
                "FILE * const stream",
                "static unsigned char buffer[280]"
            ],
            "definition": "int helper_LZWGetCode_1(static int * const curbit_ref, static int * const lastbit_ref, static int * const done_ref, static int * const last_byte_ref, int * const count_ref, FILE * const stream, static unsigned char buffer[280])\n{\n  static int curbit = *curbit_ref;\n  static int lastbit = *lastbit_ref;\n  static int done = *done_ref;\n  static int last_byte = *last_byte_ref;\n  int count = *count_ref;\n  if (done)\n  {\n    if (curbit >= lastbit)\n    {\n      GIFError(\"Ran off the end of input bits in LZW decoding\");\n    }\n    return -1;\n  }\n  buffer[0] = buffer[last_byte - 2];\n  buffer[1] = buffer[last_byte - 1];\n  if ((count = GIFReadDataBlock(&buffer[2], stream)) == 0)\n  {\n    done = 1;\n  }\n  last_byte = 2 + count;\n  curbit = (curbit - lastbit) + 16;\n  lastbit = (2 + count) * 8;\n  *curbit_ref = curbit;\n  *lastbit_ref = lastbit;\n  *done_ref = done;\n  *last_byte_ref = last_byte;\n  *count_ref = count;\n}\n\n",
            "calle": [
                "GIFError",
                "GIFReadDataBlock"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "curbit_ref",
                        "type": "int * const",
                        "definition": [
                            "static int * const curbit_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lastbit_ref",
                        "type": "int * const",
                        "definition": [
                            "static int * const lastbit_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "done_ref",
                        "type": "int * const",
                        "definition": [
                            "static int * const done_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last_byte_ref",
                        "type": "int * const",
                        "definition": [
                            "static int * const last_byte_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const count_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "unsigned char [280]",
                        "definition": [
                            "static unsigned char buffer[280]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curbit",
                        "type": "int",
                        "definition": [
                            "static int curbit = *curbit_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lastbit",
                        "type": "int",
                        "definition": [
                            "static int lastbit = *lastbit_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "done",
                        "type": "int",
                        "definition": [
                            "static int done = *done_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last_byte",
                        "type": "int",
                        "definition": [
                            "static int last_byte = *last_byte_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count = *count_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "GIFError",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_LZWDecodeByte_1",
            "header": "",
            "params": [
                "static int * const fresh_ref",
                "static int * const code_size_ref",
                "static int * const set_code_size_ref",
                "static int * const max_code_ref",
                "static int * const max_code_size_ref",
                "static int * const clear_code_ref",
                "static int * const end_code_ref",
                "unsigned int * const sp_idx_ref",
                "int * const i_ref",
                "int input_code_size",
                "FILE * const stream",
                "static int table[2][((1 << 12) - 1) + 1]",
                "static int stack[(((1 << 12) - 1) + 1) * 2]"
            ],
            "definition": "int helper_LZWDecodeByte_1(static int * const fresh_ref, static int * const code_size_ref, static int * const set_code_size_ref, static int * const max_code_ref, static int * const max_code_size_ref, static int * const clear_code_ref, static int * const end_code_ref, unsigned int * const sp_idx_ref, int * const i_ref, int input_code_size, FILE * const stream, static int table[2][((1 << 12) - 1) + 1], static int stack[(((1 << 12) - 1) + 1) * 2])\n{\n  static int fresh = *fresh_ref;\n  static int code_size = *code_size_ref;\n  static int set_code_size = *set_code_size_ref;\n  static int max_code = *max_code_ref;\n  static int max_code_size = *max_code_size_ref;\n  static int clear_code = *clear_code_ref;\n  static int end_code = *end_code_ref;\n  unsigned int sp_idx = *sp_idx_ref;\n  int i = *i_ref;\n  fresh = 1;\n  set_code_size = input_code_size;\n  code_size = set_code_size + 1;\n  clear_code = 1 << set_code_size;\n  end_code = clear_code + 1;\n  max_code_size = 2 * clear_code;\n  max_code = clear_code + 2;\n  LZWGetCode(0, 1, stream);\n  for (i = 0; i < clear_code; i += 1)\n  {\n    table[0][i] = 0;\n    table[1][i] = i;\n  }\n\n  for (; i <= ((1 << 12) - 1); i += 1)\n  {\n    table[0][i] = 0;\n    table[1][i] = 0;\n  }\n\n  sp_idx = stack;\n  return 0;\n  *fresh_ref = fresh;\n  *code_size_ref = code_size;\n  *set_code_size_ref = set_code_size;\n  *max_code_ref = max_code;\n  *max_code_size_ref = max_code_size;\n  *clear_code_ref = clear_code;\n  *end_code_ref = end_code;\n  *sp_idx_ref = sp_idx;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "LZWGetCode"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fresh_ref",
                        "type": "int * const",
                        "definition": [
                            "static int * const fresh_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code_size_ref",
                        "type": "int * const",
                        "definition": [
                            "static int * const code_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "set_code_size_ref",
                        "type": "int * const",
                        "definition": [
                            "static int * const set_code_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_code_ref",
                        "type": "int * const",
                        "definition": [
                            "static int * const max_code_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_code_size_ref",
                        "type": "int * const",
                        "definition": [
                            "static int * const max_code_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "clear_code_ref",
                        "type": "int * const",
                        "definition": [
                            "static int * const clear_code_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end_code_ref",
                        "type": "int * const",
                        "definition": [
                            "static int * const end_code_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const sp_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "input_code_size",
                        "type": "int",
                        "definition": [
                            "int input_code_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "table",
                        "type": "int [2][((1 << 12) - 1) + 1]",
                        "definition": [
                            "static int table[2][((1 << 12) - 1) + 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stack",
                        "type": "int [(((1 << 12) - 1) + 1) * 2]",
                        "definition": [
                            "static int stack[(((1 << 12) - 1) + 1) * 2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fresh",
                        "type": "int",
                        "definition": [
                            "static int fresh = *fresh_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code_size",
                        "type": "int",
                        "definition": [
                            "static int code_size = *code_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "set_code_size",
                        "type": "int",
                        "definition": [
                            "static int set_code_size = *set_code_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_code",
                        "type": "int",
                        "definition": [
                            "static int max_code = *max_code_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_code_size",
                        "type": "int",
                        "definition": [
                            "static int max_code_size = *max_code_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "clear_code",
                        "type": "int",
                        "definition": [
                            "static int clear_code = *clear_code_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end_code",
                        "type": "int",
                        "definition": [
                            "static int end_code = *end_code_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sp_idx = *sp_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_LZWDecodeByte_2",
            "header": "",
            "params": [
                "static int * const code_size_ref",
                "static int * const max_code_ref",
                "static int * const max_code_size_ref",
                "static int * const firstcode_ref",
                "static int * const oldcode_ref",
                "unsigned int * const sp_idx_ref",
                "int * const code_ref",
                "int * const incode_ref",
                "int * const i_ref",
                "FILE * const stream",
                "static int set_code_size",
                "static int clear_code",
                "static int end_code",
                "static int table[2][((1 << 12) - 1) + 1]",
                "static int stack[(((1 << 12) - 1) + 1) * 2]",
                "static int * const sp"
            ],
            "definition": "int helper_LZWDecodeByte_2(static int * const code_size_ref, static int * const max_code_ref, static int * const max_code_size_ref, static int * const firstcode_ref, static int * const oldcode_ref, unsigned int * const sp_idx_ref, int * const code_ref, int * const incode_ref, int * const i_ref, FILE * const stream, static int set_code_size, static int clear_code, static int end_code, static int table[2][((1 << 12) - 1) + 1], static int stack[(((1 << 12) - 1) + 1) * 2], static int * const sp)\n{\n  static int code_size = *code_size_ref;\n  static int max_code = *max_code_ref;\n  static int max_code_size = *max_code_size_ref;\n  static int firstcode = *firstcode_ref;\n  static int oldcode = *oldcode_ref;\n  unsigned int sp_idx = *sp_idx_ref;\n  int code = *code_ref;\n  int incode = *incode_ref;\n  int i = *i_ref;\n  if (code == clear_code)\n  {\n    helper_helper_LZWDecodeByte_2_1(&code_size, &max_code, &max_code_size, &firstcode, &sp_idx, &i, stream, set_code_size, clear_code, table, stack, oldcode);\n  }\n  else\n    if (code == end_code)\n  {\n    int count;\n    unsigned char buffer[260];\n    if (DataBlockSize == 0)\n    {\n      return -2;\n    }\n    while ((count = GIFReadDataBlock(buffer, stream)) > 0)\n    {\n    }\n\n    (void) count;\n    return -2;\n  }\n  incode = code;\n  if (code >= max_code)\n  {\n    sp[sp_idx] = firstcode;\n    sp_idx += 1;\n    code = oldcode;\n  }\n  while (code >= clear_code)\n  {\n    sp[sp_idx] = table[1][code];\n    sp_idx += 1;\n    if ((code == table[0][code]) || (((size_t) ((&sp[sp_idx]) - stack)) >= ((sizeof(stack)) / (sizeof(stack[0])))))\n    {\n      GIFError(\"Circular dependency found in LZW table\");\n    }\n    code = table[0][code];\n  }\n\n  sp[sp_idx] = (firstcode = table[1][code]);\n  sp_idx += 1;\n  if ((code = max_code) <= ((1 << 12) - 1))\n  {\n    table[0][code] = oldcode;\n    table[1][code] = firstcode;\n    max_code += 1;\n    if ((max_code >= max_code_size) && (max_code_size <= ((1 << 12) - 1)))\n    {\n      max_code_size *= 2;\n      code_size += 1;\n    }\n  }\n  oldcode = incode;\n  if ((&sp[sp_idx]) > stack)\n  {\n    sp_idx -= 1;\n    return sp[sp_idx];\n  }\n  *code_size_ref = code_size;\n  *max_code_ref = max_code;\n  *max_code_size_ref = max_code_size;\n  *firstcode_ref = firstcode;\n  *oldcode_ref = oldcode;\n  *sp_idx_ref = sp_idx;\n  *code_ref = code;\n  *incode_ref = incode;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "GIFError",
                "GIFReadDataBlock",
                "helper_helper_LZWDecodeByte_2_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "code_size_ref",
                        "type": "int * const",
                        "definition": [
                            "static int * const code_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_code_ref",
                        "type": "int * const",
                        "definition": [
                            "static int * const max_code_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_code_size_ref",
                        "type": "int * const",
                        "definition": [
                            "static int * const max_code_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "firstcode_ref",
                        "type": "int * const",
                        "definition": [
                            "static int * const firstcode_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oldcode_ref",
                        "type": "int * const",
                        "definition": [
                            "static int * const oldcode_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const sp_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const code_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "incode_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const incode_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "set_code_size",
                        "type": "int",
                        "definition": [
                            "static int set_code_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "clear_code",
                        "type": "int",
                        "definition": [
                            "static int clear_code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end_code",
                        "type": "int",
                        "definition": [
                            "static int end_code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "table",
                        "type": "int [2][((1 << 12) - 1) + 1]",
                        "definition": [
                            "static int table[2][((1 << 12) - 1) + 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stack",
                        "type": "int [(((1 << 12) - 1) + 1) * 2]",
                        "definition": [
                            "static int stack[(((1 << 12) - 1) + 1) * 2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp",
                        "type": "int * const",
                        "definition": [
                            "static int * const sp"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code_size",
                        "type": "int",
                        "definition": [
                            "static int code_size = *code_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_code",
                        "type": "int",
                        "definition": [
                            "static int max_code = *max_code_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_code_size",
                        "type": "int",
                        "definition": [
                            "static int max_code_size = *max_code_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "firstcode",
                        "type": "int",
                        "definition": [
                            "static int firstcode = *firstcode_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oldcode",
                        "type": "int",
                        "definition": [
                            "static int oldcode = *oldcode_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sp_idx = *sp_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code",
                        "type": "int",
                        "definition": [
                            "int code = *code_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "incode",
                        "type": "int",
                        "definition": [
                            "int incode = *incode_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "int",
                        "definition": [
                            "int count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "unsigned char [260]",
                        "definition": [
                            "unsigned char buffer[260]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "DataBlockSize",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "GIFError",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_GIFReadImageData_1_1",
            "header": "",
            "params": [
                "unsigned int * const xpos_ref",
                "unsigned int * const ypos_ref",
                "unsigned int height",
                "unsigned int interlaced",
                "int pass"
            ],
            "definition": "void helper_helper_GIFReadImageData_1_1(unsigned int * const xpos_ref, unsigned int * const ypos_ref, unsigned int height, unsigned int interlaced, int pass)\n{\n  unsigned int xpos = *xpos_ref;\n  unsigned int ypos = *ypos_ref;\n  xpos = 0;\n  ypos += 1;\n  if (interlaced)\n  {\n    switch (pass)\n    {\n      case 0:\n\n      case 1:\n      {\n        ypos += 8;\n        break;\n      }\n\n      case 2:\n      {\n        ypos += 4;\n        break;\n      }\n\n      case 3:\n      {\n        ypos += 2;\n        break;\n      }\n\n    }\n\n    if (ypos >= height)\n    {\n      switch (++pass)\n      {\n        case 1:\n        {\n          ypos = 4;\n          break;\n        }\n\n        case 2:\n        {\n          ypos = 2;\n          break;\n        }\n\n        case 3:\n        {\n          ypos = 1;\n          break;\n        }\n\n        default:\n        {\n          goto fini;\n        }\n\n      }\n\n    }\n  }\n  else\n    ++ypos;\n  *xpos_ref = xpos;\n  *ypos_ref = ypos;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "xpos_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const xpos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ypos_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const ypos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "interlaced",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int interlaced"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pass",
                        "type": "int",
                        "definition": [
                            "int pass"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xpos",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int xpos = *xpos_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ypos",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ypos = *ypos_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_LZWDecodeByte_2_1",
            "header": "",
            "params": [
                "static int * const code_size_ref",
                "static int * const max_code_ref",
                "static int * const max_code_size_ref",
                "static int * const firstcode_ref",
                "unsigned int * const sp_idx_ref",
                "int * const i_ref",
                "FILE * const stream",
                "static int set_code_size",
                "static int clear_code",
                "static int table[2][((1 << 12) - 1) + 1]",
                "static int stack[(((1 << 12) - 1) + 1) * 2]",
                "static int oldcode"
            ],
            "definition": "int helper_helper_LZWDecodeByte_2_1(static int * const code_size_ref, static int * const max_code_ref, static int * const max_code_size_ref, static int * const firstcode_ref, unsigned int * const sp_idx_ref, int * const i_ref, FILE * const stream, static int set_code_size, static int clear_code, static int table[2][((1 << 12) - 1) + 1], static int stack[(((1 << 12) - 1) + 1) * 2], static int oldcode)\n{\n  static int code_size = *code_size_ref;\n  static int max_code = *max_code_ref;\n  static int max_code_size = *max_code_size_ref;\n  static int firstcode = *firstcode_ref;\n  unsigned int sp_idx = *sp_idx_ref;\n  int i = *i_ref;\n  for (i = 0; i < clear_code; i += 1)\n  {\n    table[0][i] = 0;\n    table[1][i] = i;\n  }\n\n  for (; i <= ((1 << 12) - 1); i += 1)\n  {\n    table[0][i] = 0;\n    table[1][i] = 0;\n  }\n\n  code_size = set_code_size + 1;\n  max_code_size = 2 * clear_code;\n  max_code = clear_code + 2;\n  sp_idx = stack;\n  firstcode = (oldcode = LZWGetCode(code_size, 0, stream));\n  return firstcode;\n  *code_size_ref = code_size;\n  *max_code_ref = max_code;\n  *max_code_size_ref = max_code_size;\n  *firstcode_ref = firstcode;\n  *sp_idx_ref = sp_idx;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "LZWGetCode"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "code_size_ref",
                        "type": "int * const",
                        "definition": [
                            "static int * const code_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_code_ref",
                        "type": "int * const",
                        "definition": [
                            "static int * const max_code_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_code_size_ref",
                        "type": "int * const",
                        "definition": [
                            "static int * const max_code_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "firstcode_ref",
                        "type": "int * const",
                        "definition": [
                            "static int * const firstcode_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const sp_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "set_code_size",
                        "type": "int",
                        "definition": [
                            "static int set_code_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "clear_code",
                        "type": "int",
                        "definition": [
                            "static int clear_code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "table",
                        "type": "int [2][((1 << 12) - 1) + 1]",
                        "definition": [
                            "static int table[2][((1 << 12) - 1) + 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stack",
                        "type": "int [(((1 << 12) - 1) + 1) * 2]",
                        "definition": [
                            "static int stack[(((1 << 12) - 1) + 1) * 2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "oldcode",
                        "type": "int",
                        "definition": [
                            "static int oldcode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "code_size",
                        "type": "int",
                        "definition": [
                            "static int code_size = *code_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_code",
                        "type": "int",
                        "definition": [
                            "static int max_code = *max_code_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_code_size",
                        "type": "int",
                        "definition": [
                            "static int max_code_size = *max_code_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "firstcode",
                        "type": "int",
                        "definition": [
                            "static int firstcode = *firstcode_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sp_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sp_idx = *sp_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pnm_fget_header",
            "header": "int pnm_fget_header(pnm_struct *pnm_ptr, FILE *stream)",
            "params": [
                "pnm_struct *pnm_ptr",
                "FILE *stream"
            ],
            "definition": "int pnm_fget_header(pnm_struct *pnm_ptr, FILE *stream)\n{\n  unsigned int format;\n  int ch;\n  memset(pnm_ptr, 0, sizeof(pnm_struct));\n  ch = getc(stream);\n  if (ch == EOF)\n  {\n    return -1;\n  }\n  if (ch != 'P')\n  {\n    return -1;\n  }\n  ch = getc(stream);\n  if ((ch < '1') || (ch > '9'))\n  {\n    return -1;\n  }\n  format = (unsigned int) (ch - '0');\n  ch = pnm_fget_char(stream);\n  if (!((((ch == ' ') || (ch == '\\t')) || (ch == '\\n')) || (ch == '\\r')))\n  {\n    return -1;\n  }\n  pnm_ptr->format = format;\n  if ((format >= PNM_P1) && (format <= PNM_P6))\n  {\n    pnm_ptr->depth = ((format == PNM_P3) || (format == PNM_P6)) ? (3) : (1);\n    if ((pnm_fscan_uint(stream, &pnm_ptr->width) != 1) || (pnm_fscan_uint(stream, &pnm_ptr->height) != 1))\n    {\n      return -1;\n    }\n    if ((format == PNM_P1) || (format == PNM_P4))\n    {\n      pnm_ptr->maxval = 1;\n    }\n    else\n    {\n      if (pnm_fscan_uint(stream, &pnm_ptr->maxval) != 1)\n      {\n        return -1;\n      }\n    }\n    return (pnm_is_valid(pnm_ptr)) ? (1) : (0);\n  }\n  else\n    return -1;\n}\n\n",
            "calle": [
                "getc",
                "memset",
                "pnm_fget_char",
                "pnm_fscan_uint",
                "pnm_is_valid"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pnm_ptr",
                        "type": "pnm_struct *",
                        "definition": [
                            "pnm_struct *pnm_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "format",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int format"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "int",
                        "definition": [
                            "int ch"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pnm_fget_values",
            "header": "int pnm_fget_values(const pnm_struct *pnm_ptr, unsigned int *sample_values, unsigned int num_rows, FILE *stream)",
            "params": [
                "const pnm_struct *pnm_ptr",
                "unsigned int *sample_values",
                "unsigned int num_rows",
                "FILE *stream"
            ],
            "definition": "int pnm_fget_values(const pnm_struct *pnm_ptr, unsigned int *sample_values, unsigned int num_rows, FILE *stream)\n{\n  unsigned int format = pnm_ptr->format;\n  unsigned int depth = pnm_ptr->depth;\n  unsigned int width = pnm_ptr->width;\n  unsigned int maxval = pnm_ptr->maxval;\n  size_t row_length = ((size_t) depth) * ((size_t) width);\n  size_t num_samples = num_rows * row_length;\n  int ch;\n  int ch8;\n  int ch16;\n  int ch24;\n  int mask;\n  size_t i;\n  size_t j;\n  switch (format)\n  {\n    case PNM_P1:\n    {\n      for (i = 0; i < num_samples; i += 1)\n      {\n        do\n        {\n          ch = pnm_fget_char(stream);\n        }\n        while ((((ch == ' ') || (ch == '\\t')) || (ch == '\\n')) || (ch == '\\r'));\n        if ((ch != '0') && (ch != '1'))\n        {\n          ungetc(ch, stream);\n          break;\n        }\n        sample_values[i] = (ch == '0') ? (1) : (0);\n      }\n\n      break;\n    }\n\n    case PNM_P2:\n\n    case PNM_P3:\n    {\n      for (i = 0; i < num_samples; i += 1)\n      {\n        if (pnm_fscan_uint(stream, &sample_values[i]) != 1)\n        {\n          break;\n        }\n      }\n\n      break;\n    }\n\n    case PNM_P4:\n    {\n      helper_pnm_fget_values_1(&ch, &mask, &i, &j, sample_values, stream, row_length, num_samples);\n    }\n\n    case PNM_P5:\n\n    case PNM_P6:\n\n    case PNM_P7:\n    {\n      helper_pnm_fget_values_2(&ch, &ch8, &ch16, &ch24, &i, sample_values, stream, maxval, num_samples);\n    }\n\n    default:\n    {\n      errno = EINVAL;\n      return 0;\n    }\n\n  }\n\n  if (i < num_samples)\n  {\n    memset(sample_values + i, 0, (num_samples - i) * (sizeof(unsigned int)));\n    return -1;\n  }\n  return 1;\n}\n\n",
            "calle": [
                "helper_pnm_fget_values_1",
                "helper_pnm_fget_values_2",
                "memset",
                "pnm_fget_char",
                "pnm_fscan_uint",
                "ungetc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pnm_ptr",
                        "type": "const pnm_struct *",
                        "definition": [
                            "const pnm_struct *pnm_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_values",
                        "type": "unsigned int *",
                        "definition": [
                            "unsigned int *sample_values"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_rows",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int num_rows"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "format",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int format = pnm_ptr->format"
                        ]
                    },
                    {
                        "path": null,
                        "name": "depth",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int depth = pnm_ptr->depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int width = pnm_ptr->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxval",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int maxval = pnm_ptr->maxval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_length",
                        "type": "size_t",
                        "definition": [
                            "size_t row_length = ((size_t) depth) * ((size_t) width)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_samples",
                        "type": "size_t",
                        "definition": [
                            "size_t num_samples = num_rows * row_length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "int",
                        "definition": [
                            "int ch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch8",
                        "type": "int",
                        "definition": [
                            "int ch8"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch16",
                        "type": "int",
                        "definition": [
                            "int ch16"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch24",
                        "type": "int",
                        "definition": [
                            "int ch24"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask",
                        "type": "int",
                        "definition": [
                            "int mask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pnm_fget_bytes",
            "header": "int pnm_fget_bytes(const pnm_struct *pnm_ptr, unsigned char *sample_bytes, size_t sample_size, unsigned int num_rows, FILE *stream)",
            "params": [
                "const pnm_struct *pnm_ptr",
                "unsigned char *sample_bytes",
                "size_t sample_size",
                "unsigned int num_rows",
                "FILE *stream"
            ],
            "definition": "int pnm_fget_bytes(const pnm_struct *pnm_ptr, unsigned char *sample_bytes, size_t sample_size, unsigned int num_rows, FILE *stream)\n{\n  unsigned int format = pnm_ptr->format;\n  unsigned int depth = pnm_ptr->depth;\n  unsigned int width = pnm_ptr->width;\n  unsigned int maxval = pnm_ptr->maxval;\n  size_t row_length = ((size_t) depth) * ((size_t) width);\n  size_t num_samples = num_rows * row_length;\n  size_t raw_sample_size;\n  int ch;\n  int mask;\n  size_t i;\n  size_t j;\n  if (maxval <= 0xffU)\n  {\n    raw_sample_size = 1;\n  }\n  else\n    if (maxval <= 0xffffU)\n  {\n    raw_sample_size = 2;\n  }\n  else\n    if (maxval <= 0xffffffU)\n  {\n    raw_sample_size = 3;\n  }\n  else\n    if (maxval <= 0xffffffffU)\n  {\n    raw_sample_size = 4;\n  }\n  else\n    raw_sample_size = !sample_size;\n  if (raw_sample_size != sample_size)\n  {\n    errno = EINVAL;\n    return 0;\n  }\n  switch (format)\n  {\n    case PNM_P4:\n    {\n      helper_pnm_fget_bytes_1(&ch, &mask, &i, &j, sample_bytes, stream, row_length, num_samples);\n    }\n\n    case PNM_P5:\n\n    case PNM_P6:\n\n    case PNM_P7:\n    {\n      i = fread(sample_bytes, sample_size, num_samples, stream);\n      break;\n    }\n\n    default:\n    {\n      errno = EINVAL;\n      return 0;\n    }\n\n  }\n\n  if (i < num_samples)\n  {\n    memset(sample_bytes + i, 0, (sample_size * num_samples) - i);\n    return -1;\n  }\n  return 1;\n}\n\n",
            "calle": [
                "fread",
                "helper_pnm_fget_bytes_1",
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pnm_ptr",
                        "type": "const pnm_struct *",
                        "definition": [
                            "const pnm_struct *pnm_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_bytes",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *sample_bytes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_size",
                        "type": "size_t",
                        "definition": [
                            "size_t sample_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_rows",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int num_rows"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "format",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int format = pnm_ptr->format"
                        ]
                    },
                    {
                        "path": null,
                        "name": "depth",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int depth = pnm_ptr->depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int width = pnm_ptr->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxval",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int maxval = pnm_ptr->maxval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_length",
                        "type": "size_t",
                        "definition": [
                            "size_t row_length = ((size_t) depth) * ((size_t) width)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_samples",
                        "type": "size_t",
                        "definition": [
                            "size_t num_samples = num_rows * row_length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "raw_sample_size",
                        "type": "size_t",
                        "definition": [
                            "size_t raw_sample_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "int",
                        "definition": [
                            "int ch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask",
                        "type": "int",
                        "definition": [
                            "int mask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pnm_fget_char",
            "header": "",
            "params": [
                "FILE *stream"
            ],
            "definition": "static int pnm_fget_char(FILE *stream)\n{\n  int ch = getc(stream);\n  if (ch == '#')\n  {\n    do\n    {\n      ch = getc(stream);\n    }\n    while (((ch != EOF) && (ch != '\\n')) && (ch != '\\r'));\n  }\n  if (ch == '\\r')\n  {\n    ch = getc(stream);\n    if (ch != '\\n')\n    {\n      ungetc(ch, stream);\n      ch = '\\n';\n    }\n  }\n  return ch;\n}\n\n",
            "calle": [
                "getc",
                "ungetc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "int",
                        "definition": [
                            "int ch = getc(stream)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pnm_fscan_uint",
            "header": "",
            "params": [
                "FILE *stream",
                "unsigned int *value"
            ],
            "definition": "static int pnm_fscan_uint(FILE *stream, unsigned int *value)\n{\n  int ch;\n  unsigned int tmp;\n  do\n  {\n    ch = pnm_fget_char(stream);\n  }\n  while ((((ch == ' ') || (ch == '\\t')) || (ch == '\\n')) || (ch == '\\r'));\n  if (ch == EOF)\n  {\n    return EOF;\n  }\n  if (!((ch >= '0') && (ch <= '9')))\n  {\n    ungetc(ch, stream);\n    return 0;\n  }\n  *value = 0;\n  do\n  {\n    tmp = ((*value) * 10) + (ch - '0');\n    if (tmp >= (*value))\n    {\n      *value = tmp;\n    }\n    else\n    {\n      *value = 4294967295U;\n      errno = ERANGE;\n    }\n    ch = getc(stream);\n  }\n  while ((ch >= '0') && (ch <= '9'));\n  if (!((((ch == ' ') || (ch == '\\t')) || (ch == '\\n')) || (ch == '\\r')))\n  {\n    ungetc(ch, stream);\n  }\n  return 1;\n}\n\n",
            "calle": [
                "getc",
                "pnm_fget_char",
                "ungetc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "unsigned int *",
                        "definition": [
                            "unsigned int *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "int",
                        "definition": [
                            "int ch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int tmp"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_pnm_fget_values_1",
            "header": "",
            "params": [
                "int * const ch_ref",
                "int * const mask_ref",
                "size_t * const i_ref",
                "size_t * const j_ref",
                "unsigned int * const sample_values",
                "FILE * const stream",
                "size_t row_length",
                "size_t num_samples"
            ],
            "definition": "void helper_pnm_fget_values_1(int * const ch_ref, int * const mask_ref, size_t * const i_ref, size_t * const j_ref, unsigned int * const sample_values, FILE * const stream, size_t row_length, size_t num_samples)\n{\n  int ch = *ch_ref;\n  int mask = *mask_ref;\n  size_t i = *i_ref;\n  size_t j = *j_ref;\n  for (i = (j = 0); i < num_samples;)\n  {\n    ch = getc(stream);\n    if (ch == EOF)\n    {\n      break;\n    }\n    for (mask = 0x80; mask != 0; mask >>= 1)\n    {\n      sample_values[i] = (ch & mask) ? (0) : (1);\n      i += 1;\n      if ((++j) == row_length)\n      {\n        j = 0;\n        break;\n      }\n    }\n\n  }\n\n  break;\n  *ch_ref = ch;\n  *mask_ref = mask;\n  *i_ref = i;\n  *j_ref = j;\n}\n\n",
            "calle": [
                "getc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ch_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ch_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const mask_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_values",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const sample_values"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_length",
                        "type": "size_t",
                        "definition": [
                            "size_t row_length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_samples",
                        "type": "size_t",
                        "definition": [
                            "size_t num_samples"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "int",
                        "definition": [
                            "int ch = *ch_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask",
                        "type": "int",
                        "definition": [
                            "int mask = *mask_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_pnm_fget_values_2",
            "header": "",
            "params": [
                "int * const ch_ref",
                "int * const ch8_ref",
                "int * const ch16_ref",
                "int * const ch24_ref",
                "size_t * const i_ref",
                "unsigned int * const sample_values",
                "FILE * const stream",
                "unsigned int maxval",
                "size_t num_samples"
            ],
            "definition": "int helper_pnm_fget_values_2(int * const ch_ref, int * const ch8_ref, int * const ch16_ref, int * const ch24_ref, size_t * const i_ref, unsigned int * const sample_values, FILE * const stream, unsigned int maxval, size_t num_samples)\n{\n  int ch = *ch_ref;\n  int ch8 = *ch8_ref;\n  int ch16 = *ch16_ref;\n  int ch24 = *ch24_ref;\n  size_t i = *i_ref;\n  if (maxval <= 0xffU)\n  {\n    for (i = 0; i < num_samples; i += 1)\n    {\n      ch = getc(stream);\n      if (ch == EOF)\n      {\n        break;\n      }\n      sample_values[i] = (unsigned int) ch;\n    }\n\n  }\n  else\n    if (maxval <= 0xffffU)\n  {\n    for (i = 0; i < num_samples; i += 1)\n    {\n      ch8 = getc(stream);\n      ch = getc(stream);\n      if (ch == EOF)\n      {\n        break;\n      }\n      sample_values[i] = (((unsigned int) ch8) << 8) + ((unsigned int) ch);\n    }\n\n  }\n  else\n    if (maxval <= 0xffffffffU)\n  {\n    ch24 = 0;\n    for (i = 0; i < num_samples; i += 1)\n    {\n      if (maxval > 0xffffffU)\n      {\n        ch24 = getc(stream);\n      }\n      ch16 = getc(stream);\n      ch8 = getc(stream);\n      ch = getc(stream);\n      if (ch == EOF)\n      {\n        break;\n      }\n      sample_values[i] = (((((unsigned int) ch24) << 24) + (((unsigned int) ch16) << 16)) + (((unsigned int) ch8) << 8)) + ((unsigned int) ch);\n    }\n\n  }\n  else\n  {\n    errno = EINVAL;\n    return 0;\n  }\n  break;\n  *ch_ref = ch;\n  *ch8_ref = ch8;\n  *ch16_ref = ch16;\n  *ch24_ref = ch24;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "getc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ch_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ch_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch8_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ch8_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch16_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ch16_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch24_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ch24_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_values",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const sample_values"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxval",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int maxval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_samples",
                        "type": "size_t",
                        "definition": [
                            "size_t num_samples"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "int",
                        "definition": [
                            "int ch = *ch_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch8",
                        "type": "int",
                        "definition": [
                            "int ch8 = *ch8_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch16",
                        "type": "int",
                        "definition": [
                            "int ch16 = *ch16_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch24",
                        "type": "int",
                        "definition": [
                            "int ch24 = *ch24_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_pnm_fget_bytes_1",
            "header": "",
            "params": [
                "int * const ch_ref",
                "int * const mask_ref",
                "size_t * const i_ref",
                "size_t * const j_ref",
                "unsigned char * const sample_bytes",
                "FILE * const stream",
                "size_t row_length",
                "size_t num_samples"
            ],
            "definition": "void helper_pnm_fget_bytes_1(int * const ch_ref, int * const mask_ref, size_t * const i_ref, size_t * const j_ref, unsigned char * const sample_bytes, FILE * const stream, size_t row_length, size_t num_samples)\n{\n  int ch = *ch_ref;\n  int mask = *mask_ref;\n  size_t i = *i_ref;\n  size_t j = *j_ref;\n  for (i = (j = 0); i < num_samples;)\n  {\n    ch = getc(stream);\n    if (ch == EOF)\n    {\n      break;\n    }\n    for (mask = 0x80; mask != 0; mask >>= 1)\n    {\n      sample_bytes[i] = (unsigned char) ((ch & mask) ? (0) : (1));\n      i += 1;\n      if ((++j) == row_length)\n      {\n        j = 0;\n        break;\n      }\n    }\n\n  }\n\n  break;\n  *ch_ref = ch;\n  *mask_ref = mask;\n  *i_ref = i;\n  *j_ref = j;\n}\n\n",
            "calle": [
                "getc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ch_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ch_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const mask_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_bytes",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const sample_bytes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_length",
                        "type": "size_t",
                        "definition": [
                            "size_t row_length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_samples",
                        "type": "size_t",
                        "definition": [
                            "size_t num_samples"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "int",
                        "definition": [
                            "int ch = *ch_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask",
                        "type": "int",
                        "definition": [
                            "int mask = *mask_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pnm_fput_header",
            "header": "int pnm_fput_header(const pnm_struct *pnm_ptr, FILE *stream)",
            "params": [
                "const pnm_struct *pnm_ptr",
                "FILE *stream"
            ],
            "definition": "int pnm_fput_header(const pnm_struct *pnm_ptr, FILE *stream)\n{\n  unsigned int format = pnm_ptr->format;\n  unsigned int depth = pnm_ptr->depth;\n  unsigned int width = pnm_ptr->width;\n  unsigned int height = pnm_ptr->height;\n  unsigned int maxval = pnm_ptr->maxval;\n  int result;\n  if (!pnm_is_valid(pnm_ptr))\n  {\n    return 0;\n  }\n  switch (format)\n  {\n    case PNM_P1:\n\n    case PNM_P4:\n    {\n      result = fprintf(stream, \"P%c\\n%u %u\\n\", format + '0', width, height);\n      break;\n    }\n\n    case PNM_P2:\n\n    case PNM_P3:\n\n    case PNM_P5:\n\n    case PNM_P6:\n    {\n      result = fprintf(stream, \"P%c\\n%u %u\\n%u\\n\", format + '0', width, height, maxval);\n      break;\n    }\n\n    case PNM_P7:\n    {\n      result = fprintf(stream, \"P7\\nDEPTH %u\\nWIDTH %u\\nHEIGHT %u\\nMAXVAL %u\\nENDHDR\\n\", depth, width, height, maxval);\n      break;\n    }\n\n    default:\n    {\n      errno = EINVAL;\n      return 0;\n    }\n\n  }\n\n  return (result > 0) ? (1) : (-1);\n}\n\n",
            "calle": [
                "fprintf",
                "pnm_is_valid"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pnm_ptr",
                        "type": "const pnm_struct *",
                        "definition": [
                            "const pnm_struct *pnm_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "format",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int format = pnm_ptr->format"
                        ]
                    },
                    {
                        "path": null,
                        "name": "depth",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int depth = pnm_ptr->depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int width = pnm_ptr->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int height = pnm_ptr->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxval",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int maxval = pnm_ptr->maxval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "int",
                        "definition": [
                            "int result"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pnm_fput_values",
            "header": "int pnm_fput_values(const pnm_struct *pnm_ptr, const unsigned int *sample_values, unsigned int num_rows, FILE *stream)",
            "params": [
                "const pnm_struct *pnm_ptr",
                "const unsigned int *sample_values",
                "unsigned int num_rows",
                "FILE *stream"
            ],
            "definition": "int pnm_fput_values(const pnm_struct *pnm_ptr, const unsigned int *sample_values, unsigned int num_rows, FILE *stream)\n{\n  unsigned int format = pnm_ptr->format;\n  unsigned int depth = pnm_ptr->depth;\n  unsigned int width = pnm_ptr->width;\n  unsigned int maxval = pnm_ptr->maxval;\n  size_t row_length = ((size_t) depth) * ((size_t) width);\n  size_t num_samples = num_rows * row_length;\n  int ch;\n  int mask;\n  size_t i;\n  size_t j;\n  switch (format)\n  {\n    case PNM_P1:\n    {\n      for (i = (j = 0); i < num_samples; i += 1)\n      {\n        if (putc((sample_values[i] != 0) ? ('0') : ('1'), stream) == EOF)\n        {\n          break;\n        }\n        if ((++j) == row_length)\n        {\n          j = 0;\n          if (putc('\\n', stream) == EOF)\n          {\n            break;\n          }\n        }\n      }\n\n      break;\n    }\n\n    case PNM_P2:\n\n    case PNM_P3:\n    {\n      for (i = (j = 0); i < num_samples; i += 1)\n      {\n        if ((++j) == row_length)\n        {\n          j = 0;\n        }\n        if (fprintf(stream, (j == 0) ? (\"%u\\n\") : (\"%u \"), sample_values[i]) <= 0)\n        {\n          break;\n        }\n      }\n\n      break;\n    }\n\n    case PNM_P4:\n    {\n      helper_pnm_fput_values_1(&ch, &mask, &i, &j, sample_values, stream, row_length, num_samples);\n    }\n\n    case PNM_P5:\n\n    case PNM_P6:\n\n    case PNM_P7:\n    {\n      helper_pnm_fput_values_2(&i, sample_values, stream, maxval, num_samples);\n    }\n\n    default:\n    {\n      errno = EINVAL;\n      return 0;\n    }\n\n  }\n\n  return (i == num_samples) ? (1) : (-1);\n}\n\n",
            "calle": [
                "fprintf",
                "helper_pnm_fput_values_1",
                "helper_pnm_fput_values_2",
                "putc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pnm_ptr",
                        "type": "const pnm_struct *",
                        "definition": [
                            "const pnm_struct *pnm_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_values",
                        "type": "const unsigned int *",
                        "definition": [
                            "const unsigned int *sample_values"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_rows",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int num_rows"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "format",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int format = pnm_ptr->format"
                        ]
                    },
                    {
                        "path": null,
                        "name": "depth",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int depth = pnm_ptr->depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int width = pnm_ptr->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxval",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int maxval = pnm_ptr->maxval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_length",
                        "type": "size_t",
                        "definition": [
                            "size_t row_length = ((size_t) depth) * ((size_t) width)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_samples",
                        "type": "size_t",
                        "definition": [
                            "size_t num_samples = num_rows * row_length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "int",
                        "definition": [
                            "int ch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask",
                        "type": "int",
                        "definition": [
                            "int mask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pnm_fput_bytes",
            "header": "int pnm_fput_bytes(const pnm_struct *pnm_ptr, const unsigned char *sample_bytes, size_t sample_size, unsigned int num_rows, FILE *stream)",
            "params": [
                "const pnm_struct *pnm_ptr",
                "const unsigned char *sample_bytes",
                "size_t sample_size",
                "unsigned int num_rows",
                "FILE *stream"
            ],
            "definition": "int pnm_fput_bytes(const pnm_struct *pnm_ptr, const unsigned char *sample_bytes, size_t sample_size, unsigned int num_rows, FILE *stream)\n{\n  unsigned int format = pnm_ptr->format;\n  unsigned int depth = pnm_ptr->depth;\n  unsigned int width = pnm_ptr->width;\n  unsigned int maxval = pnm_ptr->maxval;\n  size_t row_length = ((size_t) depth) * ((size_t) width);\n  size_t num_samples = num_rows * row_length;\n  size_t raw_sample_size;\n  int ch;\n  int mask;\n  size_t i;\n  size_t j;\n  if (maxval <= 0xffU)\n  {\n    raw_sample_size = 1;\n  }\n  else\n    if (maxval <= 0xffffU)\n  {\n    raw_sample_size = 2;\n  }\n  else\n    if (maxval <= 0xffffffU)\n  {\n    raw_sample_size = 3;\n  }\n  else\n    if (maxval <= 0xffffffffU)\n  {\n    raw_sample_size = 4;\n  }\n  else\n    raw_sample_size = !sample_size;\n  if (raw_sample_size != sample_size)\n  {\n    errno = EINVAL;\n    return 0;\n  }\n  switch (format)\n  {\n    case PNM_P4:\n    {\n      helper_pnm_fput_bytes_1(&ch, &mask, &i, &j, sample_bytes, stream, row_length, num_samples);\n    }\n\n    case PNM_P5:\n\n    case PNM_P6:\n\n    case PNM_P7:\n    {\n      i = fwrite(sample_bytes, sample_size, num_samples, stream);\n      break;\n    }\n\n    default:\n    {\n      errno = EINVAL;\n      return 0;\n    }\n\n  }\n\n  return (i == num_samples) ? (1) : (-1);\n}\n\n",
            "calle": [
                "fwrite",
                "helper_pnm_fput_bytes_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pnm_ptr",
                        "type": "const pnm_struct *",
                        "definition": [
                            "const pnm_struct *pnm_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_bytes",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *sample_bytes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_size",
                        "type": "size_t",
                        "definition": [
                            "size_t sample_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_rows",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int num_rows"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "format",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int format = pnm_ptr->format"
                        ]
                    },
                    {
                        "path": null,
                        "name": "depth",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int depth = pnm_ptr->depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int width = pnm_ptr->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxval",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int maxval = pnm_ptr->maxval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_length",
                        "type": "size_t",
                        "definition": [
                            "size_t row_length = ((size_t) depth) * ((size_t) width)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_samples",
                        "type": "size_t",
                        "definition": [
                            "size_t num_samples = num_rows * row_length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "raw_sample_size",
                        "type": "size_t",
                        "definition": [
                            "size_t raw_sample_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "int",
                        "definition": [
                            "int ch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask",
                        "type": "int",
                        "definition": [
                            "int mask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_pnm_fput_values_1",
            "header": "",
            "params": [
                "int * const ch_ref",
                "int * const mask_ref",
                "size_t * const i_ref",
                "size_t * const j_ref",
                "const unsigned int * const sample_values",
                "FILE * const stream",
                "size_t row_length",
                "size_t num_samples"
            ],
            "definition": "void helper_pnm_fput_values_1(int * const ch_ref, int * const mask_ref, size_t * const i_ref, size_t * const j_ref, const unsigned int * const sample_values, FILE * const stream, size_t row_length, size_t num_samples)\n{\n  int ch = *ch_ref;\n  int mask = *mask_ref;\n  size_t i = *i_ref;\n  size_t j = *j_ref;\n  for (i = (j = 0); i < num_samples;)\n  {\n    ch = 0;\n    for (mask = 0x80; mask != 0; mask >>= 1)\n    {\n      if (sample_values[i++] == 0)\n      {\n        ch |= mask;\n      }\n      if ((++j) == row_length)\n      {\n        j = 0;\n        break;\n      }\n    }\n\n    if (putc(ch, stream) == EOF)\n    {\n      break;\n    }\n  }\n\n  break;\n  *ch_ref = ch;\n  *mask_ref = mask;\n  *i_ref = i;\n  *j_ref = j;\n}\n\n",
            "calle": [
                "putc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ch_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ch_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const mask_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_values",
                        "type": "const unsigned int * const",
                        "definition": [
                            "const unsigned int * const sample_values"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_length",
                        "type": "size_t",
                        "definition": [
                            "size_t row_length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_samples",
                        "type": "size_t",
                        "definition": [
                            "size_t num_samples"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "int",
                        "definition": [
                            "int ch = *ch_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask",
                        "type": "int",
                        "definition": [
                            "int mask = *mask_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_pnm_fput_values_2",
            "header": "",
            "params": [
                "size_t * const i_ref",
                "const unsigned int * const sample_values",
                "FILE * const stream",
                "unsigned int maxval",
                "size_t num_samples"
            ],
            "definition": "int helper_pnm_fput_values_2(size_t * const i_ref, const unsigned int * const sample_values, FILE * const stream, unsigned int maxval, size_t num_samples)\n{\n  size_t i = *i_ref;\n  if (maxval <= 0xffU)\n  {\n    for (i = 0; i < num_samples; i += 1)\n    {\n      if (putc(sample_values[i] & 0xff, stream) == EOF)\n      {\n        break;\n      }\n    }\n\n  }\n  else\n    if (maxval <= 0xffffU)\n  {\n    for (i = 0; i < num_samples; i += 1)\n    {\n      if ((putc((sample_values[i] >> 8) & 0xff, stream) == EOF) || (putc(sample_values[i] & 0xff, stream) == EOF))\n      {\n        break;\n      }\n    }\n\n  }\n  else\n    if (maxval <= 0xffffffffU)\n  {\n    for (i = 0; i < num_samples; i += 1)\n    {\n      if (maxval > 0xffffffU)\n      {\n        if (putc((sample_values[i] >> 24) & 0xff, stream) == EOF)\n        {\n          break;\n        }\n      }\n      if (((putc((sample_values[i] >> 16) & 0xff, stream) == EOF) || (putc((sample_values[i] >> 8) & 0xff, stream) == EOF)) || (putc(sample_values[i] & 0xff, stream) == EOF))\n      {\n        break;\n      }\n    }\n\n  }\n  else\n  {\n    errno = EINVAL;\n    return 0;\n  }\n  break;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "putc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_values",
                        "type": "const unsigned int * const",
                        "definition": [
                            "const unsigned int * const sample_values"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxval",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int maxval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_samples",
                        "type": "size_t",
                        "definition": [
                            "size_t num_samples"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_pnm_fput_bytes_1",
            "header": "",
            "params": [
                "int * const ch_ref",
                "int * const mask_ref",
                "size_t * const i_ref",
                "size_t * const j_ref",
                "const unsigned char * const sample_bytes",
                "FILE * const stream",
                "size_t row_length",
                "size_t num_samples"
            ],
            "definition": "void helper_pnm_fput_bytes_1(int * const ch_ref, int * const mask_ref, size_t * const i_ref, size_t * const j_ref, const unsigned char * const sample_bytes, FILE * const stream, size_t row_length, size_t num_samples)\n{\n  int ch = *ch_ref;\n  int mask = *mask_ref;\n  size_t i = *i_ref;\n  size_t j = *j_ref;\n  for (i = (j = 0); i < num_samples;)\n  {\n    ch = 0;\n    for (mask = 0x80; mask != 0; mask >>= 1)\n    {\n      if (sample_bytes[i++] == 0)\n      {\n        ch |= mask;\n      }\n      if ((++j) == row_length)\n      {\n        j = 0;\n        break;\n      }\n    }\n\n    if (putc(ch, stream) == EOF)\n    {\n      break;\n    }\n  }\n\n  break;\n  *ch_ref = ch;\n  *mask_ref = mask;\n  *i_ref = i;\n  *j_ref = j;\n}\n\n",
            "calle": [
                "putc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ch_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ch_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const mask_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_bytes",
                        "type": "const unsigned char * const",
                        "definition": [
                            "const unsigned char * const sample_bytes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_length",
                        "type": "size_t",
                        "definition": [
                            "size_t row_length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_samples",
                        "type": "size_t",
                        "definition": [
                            "size_t num_samples"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "int",
                        "definition": [
                            "int ch = *ch_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask",
                        "type": "int",
                        "definition": [
                            "int mask = *mask_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pnm_is_valid",
            "header": "int pnm_is_valid(const pnm_struct *pnm_ptr)",
            "params": [
                "const pnm_struct *pnm_ptr"
            ],
            "definition": "int pnm_is_valid(const pnm_struct *pnm_ptr)\n{\n  unsigned int format = pnm_ptr->format;\n  unsigned int depth = pnm_ptr->depth;\n  unsigned int width = pnm_ptr->width;\n  unsigned int height = pnm_ptr->height;\n  unsigned int maxval = pnm_ptr->maxval;\n  if ((((depth == 0) || (width == 0)) || (height == 0)) || (maxval == 0))\n  {\n    return 0;\n  }\n  switch (format)\n  {\n    case PNM_P1:\n\n    case PNM_P4:\n    {\n      return ((depth == 1) && (maxval == 1)) ? (1) : (0);\n    }\n\n    case PNM_P2:\n\n    case PNM_P5:\n    {\n      return (depth == 1) ? (1) : (0);\n    }\n\n    case PNM_P3:\n\n    case PNM_P6:\n    {\n      return (depth == 3) ? (1) : (0);\n    }\n\n    case PNM_P7:\n    {\n      return 1;\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pnm_ptr",
                        "type": "const pnm_struct *",
                        "definition": [
                            "const pnm_struct *pnm_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "format",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int format = pnm_ptr->format"
                        ]
                    },
                    {
                        "path": null,
                        "name": "depth",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int depth = pnm_ptr->depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int width = pnm_ptr->width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int height = pnm_ptr->height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxval",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int maxval = pnm_ptr->maxval"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pnm_raw_sample_size",
            "header": "size_t pnm_raw_sample_size(const pnm_struct *pnm_ptr)",
            "params": [
                "const pnm_struct *pnm_ptr"
            ],
            "definition": "size_t pnm_raw_sample_size(const pnm_struct *pnm_ptr)\n{\n  unsigned int maxval = pnm_ptr->maxval;\n  if (maxval == 0)\n  {\n    errno = EINVAL;\n  }\n  if (maxval <= 0xffU)\n  {\n    return 1;\n  }\n  else\n    if (maxval <= 0xffffU)\n  {\n    return 2;\n  }\n  else\n    if (maxval <= 0xffffffU)\n  {\n    return 3;\n  }\n  else\n    if (maxval <= 0xffffffffU)\n  {\n    return 4;\n  }\n  else\n  {\n    errno = EINVAL;\n    return 0;\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pnm_ptr",
                        "type": "const pnm_struct *",
                        "definition": [
                            "const pnm_struct *pnm_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxval",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int maxval = pnm_ptr->maxval"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pnm_mem_size",
            "header": "size_t pnm_mem_size(const pnm_struct *pnm_ptr, size_t sample_size, unsigned int num_rows)",
            "params": [
                "const pnm_struct *pnm_ptr",
                "size_t sample_size",
                "unsigned int num_rows"
            ],
            "definition": "size_t pnm_mem_size(const pnm_struct *pnm_ptr, size_t sample_size, unsigned int num_rows)\n{\n  unsigned int depth = pnm_ptr->depth;\n  unsigned int width = pnm_ptr->width;\n  if (((sample_size == 0) || (depth == 0)) || (width == 0))\n  {\n    errno = EINVAL;\n    return 0;\n  }\n  if (num_rows > (((((size_t) (-1)) / sample_size) / depth) / width))\n  {\n    errno = ERANGE;\n    return 0;\n  }\n  return ((sample_size * depth) * width) * num_rows;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pnm_ptr",
                        "type": "const pnm_struct *",
                        "definition": [
                            "const pnm_struct *pnm_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_size",
                        "type": "size_t",
                        "definition": [
                            "size_t sample_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_rows",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int num_rows"
                        ]
                    },
                    {
                        "path": null,
                        "name": "depth",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int depth = pnm_ptr->depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int width = pnm_ptr->width"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "minitiff_read_info",
            "header": "void minitiff_read_info(struct minitiff_info *info_ptr, FILE *stream)",
            "params": [
                "struct minitiff_info *info_ptr",
                "FILE *stream"
            ],
            "definition": "void minitiff_read_info(struct minitiff_info *info_ptr, FILE *stream)\n{\n  struct minitiff_getter getter;\n  unsigned char buf[12];\n  unsigned char *vbuf = buf + 8;\n  unsigned long ulvals[4];\n  unsigned long ulval;\n  long dir_offset;\n  unsigned int dir_size;\n  unsigned int i;\n  unsigned int tag_id;\n  unsigned int tag_type;\n  size_t count;\n  size_t bits_per_sample_count;\n  unsigned int bits_per_sample_tag_type;\n  unsigned int strip_offsets_tag_type;\n  long bits_per_sample_offset;\n  long strip_offsets_offset;\n  int unknown_metadata_found;\n  if (fread(buf, 8, 1, stream) != 1)\n  {\n    goto err_read;\n  }\n  if (memcmp(buf, minitiff_sig_m, 4) == 0)\n  {\n    info_ptr->byte_order = 'M';\n    getter.get_ushort = get_ushort_m;\n    getter.get_ulong = get_ulong_m;\n  }\n  else\n    if (memcmp(buf, minitiff_sig_i, 4) == 0)\n  {\n    info_ptr->byte_order = 'I';\n    getter.get_ushort = get_ushort_i;\n    getter.get_ulong = get_ulong_i;\n  }\n  else\n    if ((memcmp(buf, minitiff_sig_bigm, 4) == 0) || (memcmp(buf, minitiff_sig_bigi, 4) == 0))\n  {\n    minitiff_error(info_ptr, msg_err_bigtiff);\n    return;\n  }\n  else\n  {\n    minitiff_error(info_ptr, msg_err_notiff);\n    return;\n  }\n  bits_per_sample_count = 0;\n  bits_per_sample_tag_type = (strip_offsets_tag_type = 0);\n  bits_per_sample_offset = (strip_offsets_offset = 0);\n  dir_offset = (long) getter.get_ulong(buf + 4);\n  if ((dir_offset >= 0) && (dir_offset < 8))\n  {\n    goto err_invalid;\n  }\n  seek_to_offset(info_ptr, dir_offset, stream);\n  if (fread(buf, 2, 1, stream) != 1)\n  {\n    goto err_read;\n  }\n  dir_size = getter.get_ushort(buf);\n  unknown_metadata_found = 0;\n  for (i = 0; i < dir_size; i += 1)\n  {\n    helper_minitiff_read_info_2(&ulval, &tag_id, &tag_type, &count, &bits_per_sample_count, &bits_per_sample_tag_type, &strip_offsets_tag_type, &bits_per_sample_offset, &strip_offsets_offset, &unknown_metadata_found, info_ptr, stream, getter, buf, vbuf);\n  }\n\n  if (fread(buf, 4, 1, stream) != 1)\n  {\n    goto err_read;\n  }\n  if (getter.get_ulong(buf) != 0)\n  {\n    minitiff_warning(info_ptr, msg_warn_multiple);\n  }\n  if (bits_per_sample_offset != 0)\n  {\n    helper_minitiff_read_info_1(&count, info_ptr, stream, getter, ulvals, bits_per_sample_count, bits_per_sample_tag_type, bits_per_sample_offset);\n  }\n  if (strip_offsets_offset != 0)\n  {\n    count = info_ptr->strip_offsets_count;\n    if ((count == 0) || (count > info_ptr->height))\n    {\n      goto err_invalid;\n    }\n    if (info_ptr->strip_offsets != 0)\n    {\n      goto err_invalid;\n    }\n    info_ptr->strip_offsets = alloc_ulong_array(info_ptr, count);\n    seek_to_offset(info_ptr, strip_offsets_offset, stream);\n    if (read_ulong_values(&getter, strip_offsets_tag_type, info_ptr->strip_offsets, count, stream) != count)\n    {\n      goto err_read;\n    }\n  }\n  return;\n  err_read:\n  minitiff_error(info_ptr, msg_err_read);\n\n  err_invalid:\n  minitiff_error(info_ptr, msg_err_invalid);\n\n  err_unsupported:\n  minitiff_error(info_ptr, msg_err_unsupported);\n\n}\n\n",
            "calle": [
                "alloc_ulong_array",
                "fread",
                "get_ulong_i",
                "get_ulong_m",
                "get_ushort_i",
                "get_ushort_m",
                "getter.get_ulong",
                "getter.get_ushort",
                "helper_minitiff_read_info_1",
                "helper_minitiff_read_info_2",
                "memcmp",
                "minitiff_error",
                "minitiff_warning",
                "read_ulong_values",
                "seek_to_offset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct minitiff_info",
                        "type": "struct minitiff_info *",
                        "definition": [
                            "struct minitiff_info *info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "getter",
                        "type": "struct minitiff_getter",
                        "definition": [
                            "struct minitiff_getter getter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "unsigned char [12]",
                        "definition": [
                            "unsigned char buf[12]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vbuf",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *vbuf = buf + 8"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ulvals",
                        "type": "unsigned long [4]",
                        "definition": [
                            "unsigned long ulvals[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ulval",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long ulval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir_offset",
                        "type": "long",
                        "definition": [
                            "long dir_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dir_size",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int dir_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag_id",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int tag_id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag_type",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int tag_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "size_t",
                        "definition": [
                            "size_t count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_per_sample_count",
                        "type": "size_t",
                        "definition": [
                            "size_t bits_per_sample_count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_per_sample_tag_type",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bits_per_sample_tag_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strip_offsets_tag_type",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int strip_offsets_tag_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_per_sample_offset",
                        "type": "long",
                        "definition": [
                            "long bits_per_sample_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strip_offsets_offset",
                        "type": "long",
                        "definition": [
                            "long strip_offsets_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unknown_metadata_found",
                        "type": "int",
                        "definition": [
                            "int unknown_metadata_found"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minitiff_sig_m",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "minitiff_sig_i",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "minitiff_sig_bigm",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "minitiff_sig_bigi",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "msg_err_bigtiff",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "msg_err_notiff",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "msg_warn_multiple",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "msg_err_read",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "msg_err_invalid",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "msg_err_unsupported",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "minitiff_read_row",
            "header": "void minitiff_read_row(struct minitiff_info *info_ptr, unsigned char *row_ptr, size_t row_index, FILE *stream)",
            "params": [
                "struct minitiff_info *info_ptr",
                "unsigned char *row_ptr",
                "size_t row_index",
                "FILE *stream"
            ],
            "definition": "void minitiff_read_row(struct minitiff_info *info_ptr, unsigned char *row_ptr, size_t row_index, FILE *stream)\n{\n  size_t row_size;\n  size_t strip_index;\n  unsigned int bytes_per_sample;\n  unsigned int sample_max;\n  long offset;\n  size_t i;\n  bytes_per_sample = (info_ptr->bits_per_sample + 7) / 8;\n  row_size = (info_ptr->width * info_ptr->samples_per_pixel) * bytes_per_sample;\n  strip_index = row_index / info_ptr->rows_per_strip;\n  if (strip_index >= info_ptr->strip_offsets_count)\n  {\n    goto err_invalid;\n  }\n  if (((long) info_ptr->strip_offsets[strip_index]) < 0)\n  {\n    goto err_range;\n  }\n  offset = (long) (info_ptr->strip_offsets[strip_index] + (row_size * (row_index % info_ptr->rows_per_strip)));\n  seek_to_offset(info_ptr, offset, stream);\n  if (fread(row_ptr, row_size, 1, stream) != 1)\n  {\n    goto err_read;\n  }\n  if (info_ptr->photometric == 0)\n  {\n    if (bytes_per_sample > 1)\n    {\n      goto err_unsupported;\n    }\n    sample_max = (1 << info_ptr->bits_per_sample) - 1;\n    for (i = 0; i < row_size; i += 1)\n    {\n      row_ptr[i] = (unsigned char) (sample_max - row_ptr[i]);\n    }\n\n  }\n  return;\n  err_read:\n  minitiff_error(info_ptr, msg_err_read);\n\n  err_invalid:\n  minitiff_error(info_ptr, msg_err_invalid);\n\n  err_range:\n  minitiff_error(info_ptr, msg_err_range);\n\n  err_unsupported:\n  minitiff_error(info_ptr, msg_err_unsupported);\n\n}\n\n",
            "calle": [
                "fread",
                "minitiff_error",
                "seek_to_offset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct minitiff_info",
                        "type": "struct minitiff_info *",
                        "definition": [
                            "struct minitiff_info *info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_ptr",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *row_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_index",
                        "type": "size_t",
                        "definition": [
                            "size_t row_index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_size",
                        "type": "size_t",
                        "definition": [
                            "size_t row_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strip_index",
                        "type": "size_t",
                        "definition": [
                            "size_t strip_index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bytes_per_sample",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bytes_per_sample"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_max",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sample_max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offset",
                        "type": "long",
                        "definition": [
                            "long offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg_err_read",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "msg_err_invalid",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "msg_err_range",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "msg_err_unsupported",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "get_ushort_m",
            "header": "",
            "params": [
                "const unsigned char *buf_ptr"
            ],
            "definition": "static unsigned int get_ushort_m(const unsigned char *buf_ptr)\n{\n  return (((unsigned int) buf_ptr[0]) << 8) + ((unsigned int) buf_ptr[1]);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buf_ptr",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *buf_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "get_ushort_i",
            "header": "",
            "params": [
                "const unsigned char *buf_ptr"
            ],
            "definition": "static unsigned int get_ushort_i(const unsigned char *buf_ptr)\n{\n  return ((unsigned int) buf_ptr[0]) + (((unsigned int) buf_ptr[1]) << 8);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buf_ptr",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *buf_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "get_ulong_m",
            "header": "",
            "params": [
                "const unsigned char *buf_ptr"
            ],
            "definition": "static unsigned long get_ulong_m(const unsigned char *buf_ptr)\n{\n  return (((((unsigned long) buf_ptr[0]) << 24) + (((unsigned long) buf_ptr[1]) << 16)) + (((unsigned long) buf_ptr[2]) << 8)) + ((unsigned long) buf_ptr[3]);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buf_ptr",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *buf_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "get_ulong_i",
            "header": "",
            "params": [
                "const unsigned char *buf_ptr"
            ],
            "definition": "static unsigned long get_ulong_i(const unsigned char *buf_ptr)\n{\n  return ((((unsigned long) buf_ptr[0]) + (((unsigned long) buf_ptr[1]) << 8)) + (((unsigned long) buf_ptr[2]) << 16)) + (((unsigned long) buf_ptr[3]) << 24);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buf_ptr",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *buf_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "get_ulong_value",
            "header": "",
            "params": [
                "const struct minitiff_getter *getter_ptr",
                "int tag_type",
                "const unsigned char *buf_ptr"
            ],
            "definition": "static unsigned long get_ulong_value(const struct minitiff_getter *getter_ptr, int tag_type, const unsigned char *buf_ptr)\n{\n  switch (tag_type)\n  {\n    case MINITIFF_TYPE_BYTE:\n    {\n      return (unsigned long) buf_ptr[0];\n    }\n\n    case MINITIFF_TYPE_SHORT:\n    {\n      return (unsigned long) getter_ptr->get_ushort(buf_ptr);\n    }\n\n    case MINITIFF_TYPE_LONG:\n    {\n      return getter_ptr->get_ulong(buf_ptr);\n    }\n\n    default:\n    {\n      return (unsigned long) (-1L);\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "getter_ptr->get_ulong",
                "getter_ptr->get_ushort"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct minitiff_getter",
                        "type": "const struct minitiff_getter *",
                        "definition": [
                            "const struct minitiff_getter *getter_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag_type",
                        "type": "int",
                        "definition": [
                            "int tag_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_ptr",
                        "type": "const unsigned char *",
                        "definition": [
                            "const unsigned char *buf_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "alloc_ulong_array",
            "header": "",
            "params": [
                "struct minitiff_info *info_ptr",
                "size_t count"
            ],
            "definition": "static unsigned long *alloc_ulong_array(struct minitiff_info *info_ptr, size_t count)\n{\n  unsigned long *result;\n  unsigned int result_idx = 0;\n  if (count > (((size_t) (-1)) / (sizeof(unsigned long))))\n  {\n    minitiff_error(info_ptr, msg_err_range);\n  }\n  result_idx = (unsigned long *) malloc(count * (sizeof(unsigned long)));\n  if ((&result[result_idx]) == 0)\n  {\n    minitiff_error(info_ptr, msg_err_alloc);\n  }\n  return result;\n}\n\n",
            "calle": [
                "malloc",
                "minitiff_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct minitiff_info",
                        "type": "struct minitiff_info *",
                        "definition": [
                            "struct minitiff_info *info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "size_t",
                        "definition": [
                            "size_t count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "unsigned long *",
                        "definition": [
                            "unsigned long *result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int result_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg_err_range",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "msg_err_alloc",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "read_ulong_values",
            "header": "",
            "params": [
                "const struct minitiff_getter *getter_ptr",
                "int tag_type",
                "unsigned long values[]",
                "size_t count",
                "FILE *stream"
            ],
            "definition": "static size_t read_ulong_values(const struct minitiff_getter *getter_ptr, int tag_type, unsigned long values[], size_t count, FILE *stream)\n{\n  unsigned char buf[4];\n  size_t value_size;\n  size_t i;\n  switch (tag_type)\n  {\n    case MINITIFF_TYPE_BYTE:\n    {\n      value_size = 1;\n      break;\n    }\n\n    case MINITIFF_TYPE_SHORT:\n    {\n      value_size = 2;\n      break;\n    }\n\n    case MINITIFF_TYPE_LONG:\n    {\n      value_size = 4;\n      break;\n    }\n\n    default:\n    {\n      return 0;\n    }\n\n  }\n\n  for (i = 0; i < count; i += 1)\n  {\n    if (fread(buf, value_size, 1, stream) != 1)\n    {\n      break;\n    }\n    values[i] = get_ulong_value(getter_ptr, tag_type, buf);\n  }\n\n  return i;\n}\n\n",
            "calle": [
                "fread",
                "get_ulong_value"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct minitiff_getter",
                        "type": "const struct minitiff_getter *",
                        "definition": [
                            "const struct minitiff_getter *getter_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag_type",
                        "type": "int",
                        "definition": [
                            "int tag_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "values",
                        "type": "unsigned long []",
                        "definition": [
                            "unsigned long values[]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "size_t",
                        "definition": [
                            "size_t count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "unsigned char [4]",
                        "definition": [
                            "unsigned char buf[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value_size",
                        "type": "size_t",
                        "definition": [
                            "size_t value_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "seek_to_offset",
            "header": "",
            "params": [
                "struct minitiff_info *info_ptr",
                "long offset",
                "FILE *stream"
            ],
            "definition": "static void seek_to_offset(struct minitiff_info *info_ptr, long offset, FILE *stream)\n{\n  if (offset < 0)\n  {\n    minitiff_error(info_ptr, msg_err_range);\n  }\n  if (ftell(stream) == offset)\n  {\n    return;\n  }\n  if (fseek(stream, offset, 0) != 0)\n  {\n    minitiff_error(info_ptr, msg_err_seek);\n  }\n}\n\n",
            "calle": [
                "fseek",
                "ftell",
                "minitiff_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct minitiff_info",
                        "type": "struct minitiff_info *",
                        "definition": [
                            "struct minitiff_info *info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offset",
                        "type": "long",
                        "definition": [
                            "long offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg_err_range",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "msg_err_seek",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_minitiff_read_info_1",
            "header": "",
            "params": [
                "size_t * const count_ref",
                "struct minitiff_info * const info_ptr",
                "FILE * const stream",
                "struct minitiff_getter getter",
                "unsigned long ulvals[4]",
                "size_t bits_per_sample_count",
                "unsigned int bits_per_sample_tag_type",
                "long bits_per_sample_offset"
            ],
            "definition": "void helper_minitiff_read_info_1(size_t * const count_ref, struct minitiff_info * const info_ptr, FILE * const stream, struct minitiff_getter getter, unsigned long ulvals[4], size_t bits_per_sample_count, unsigned int bits_per_sample_tag_type, long bits_per_sample_offset)\n{\n  size_t count = *count_ref;\n  count = bits_per_sample_count;\n  if (count != info_ptr->samples_per_pixel)\n  {\n    goto err_invalid;\n  }\n  if (count > 4)\n  {\n    goto err_unsupported;\n  }\n  seek_to_offset(info_ptr, bits_per_sample_offset, stream);\n  if (read_ulong_values(&getter, bits_per_sample_tag_type, ulvals, count, stream) != count)\n  {\n    goto err_read;\n  }\n  while ((--count) > 0)\n  {\n    if (ulvals[0] != ulvals[count])\n    {\n      goto err_unsupported;\n    }\n  }\n\n  info_ptr->bits_per_sample = (unsigned int) ulvals[0];\n  *count_ref = count;\n}\n\n",
            "calle": [
                "read_ulong_values",
                "seek_to_offset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "count_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const count_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct minitiff_info",
                        "type": "struct minitiff_info * const",
                        "definition": [
                            "struct minitiff_info * const info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "getter",
                        "type": "struct minitiff_getter",
                        "definition": [
                            "struct minitiff_getter getter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ulvals",
                        "type": "unsigned long [4]",
                        "definition": [
                            "unsigned long ulvals[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_per_sample_count",
                        "type": "size_t",
                        "definition": [
                            "size_t bits_per_sample_count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_per_sample_tag_type",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bits_per_sample_tag_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_per_sample_offset",
                        "type": "long",
                        "definition": [
                            "long bits_per_sample_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "size_t",
                        "definition": [
                            "size_t count = *count_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_minitiff_read_info_2",
            "header": "",
            "params": [
                "unsigned long * const ulval_ref",
                "unsigned int * const tag_id_ref",
                "unsigned int * const tag_type_ref",
                "size_t * const count_ref",
                "size_t * const bits_per_sample_count_ref",
                "unsigned int * const bits_per_sample_tag_type_ref",
                "unsigned int * const strip_offsets_tag_type_ref",
                "long * const bits_per_sample_offset_ref",
                "long * const strip_offsets_offset_ref",
                "int * const unknown_metadata_found_ref",
                "struct minitiff_info * const info_ptr",
                "FILE * const stream",
                "struct minitiff_getter getter",
                "unsigned char buf[12]",
                "unsigned char * const vbuf"
            ],
            "definition": "void helper_minitiff_read_info_2(unsigned long * const ulval_ref, unsigned int * const tag_id_ref, unsigned int * const tag_type_ref, size_t * const count_ref, size_t * const bits_per_sample_count_ref, unsigned int * const bits_per_sample_tag_type_ref, unsigned int * const strip_offsets_tag_type_ref, long * const bits_per_sample_offset_ref, long * const strip_offsets_offset_ref, int * const unknown_metadata_found_ref, struct minitiff_info * const info_ptr, FILE * const stream, struct minitiff_getter getter, unsigned char buf[12], unsigned char * const vbuf)\n{\n  unsigned long ulval = *ulval_ref;\n  unsigned int tag_id = *tag_id_ref;\n  unsigned int tag_type = *tag_type_ref;\n  size_t count = *count_ref;\n  size_t bits_per_sample_count = *bits_per_sample_count_ref;\n  unsigned int bits_per_sample_tag_type = *bits_per_sample_tag_type_ref;\n  unsigned int strip_offsets_tag_type = *strip_offsets_tag_type_ref;\n  long bits_per_sample_offset = *bits_per_sample_offset_ref;\n  long strip_offsets_offset = *strip_offsets_offset_ref;\n  int unknown_metadata_found = *unknown_metadata_found_ref;\n  if (fread(buf, 12, 1, stream) != 1)\n  {\n    goto err_read;\n  }\n  tag_id = getter.get_ushort(buf);\n  tag_type = getter.get_ushort(buf + 2);\n  count = (size_t) getter.get_ulong(buf + 4);\n  if (count == 0)\n  {\n    goto err_unsupported;\n  }\n  switch (tag_id)\n  {\n    case MINITIFF_TAG_SUBFILE_TYPE:\n    {\n      if (count != 1)\n      {\n        goto err_unsupported;\n      }\n      ulval = get_ulong_value(&getter, tag_type, vbuf);\n      if ((ulval != 0) && (ulval != 1))\n      {\n        goto err_unsupported;\n      }\n      break;\n    }\n\n    case MINITIFF_TAG_WIDTH:\n    {\n      if (count != 1)\n      {\n        goto err_unsupported;\n      }\n      ulval = get_ulong_value(&getter, tag_type, vbuf);\n      info_ptr->width = (size_t) ulval;\n      break;\n    }\n\n    case MINITIFF_TAG_HEIGHT:\n    {\n      if (count != 1)\n      {\n        goto err_unsupported;\n      }\n      ulval = get_ulong_value(&getter, tag_type, vbuf);\n      info_ptr->height = (size_t) ulval;\n      break;\n    }\n\n    case MINITIFF_TAG_BITS_PER_SAMPLE:\n    {\n      if (count == 1)\n      {\n        ulval = get_ulong_value(&getter, tag_type, vbuf);\n        info_ptr->bits_per_sample = (unsigned int) ulval;\n      }\n      else\n      {\n        bits_per_sample_count = count;\n        bits_per_sample_tag_type = tag_type;\n        bits_per_sample_offset = (long) getter.get_ulong(vbuf);\n      }\n      break;\n    }\n\n    case MINITIFF_TAG_COMPRESSION:\n    {\n      if (count != 1)\n      {\n        goto err_unsupported;\n      }\n      ulval = get_ulong_value(&getter, tag_type, vbuf);\n      info_ptr->compression = (unsigned int) ulval;\n      break;\n    }\n\n    case MINITIFF_TAG_PHOTOMETRIC:\n    {\n      if (count != 1)\n      {\n        goto err_unsupported;\n      }\n      ulval = get_ulong_value(&getter, tag_type, vbuf);\n      info_ptr->photometric = (unsigned int) ulval;\n      break;\n    }\n\n    case MINITIFF_TAG_STRIP_OFFSETS:\n    {\n      info_ptr->strip_offsets_count = count;\n      if (count == 1)\n      {\n        if (info_ptr->strip_offsets != 0)\n        {\n          goto err_invalid;\n        }\n        info_ptr->strip_offsets = alloc_ulong_array(info_ptr, 1);\n        info_ptr->strip_offsets[0] = get_ulong_value(&getter, tag_type, vbuf);\n      }\n      else\n      {\n        strip_offsets_tag_type = tag_type;\n        strip_offsets_offset = (long) getter.get_ulong(vbuf);\n      }\n      break;\n    }\n\n    case MINITIFF_TAG_ORIENTATION:\n    {\n      if (count != 1)\n      {\n        goto err_unsupported;\n      }\n      ulval = get_ulong_value(&getter, tag_type, vbuf);\n      info_ptr->orientation = (unsigned int) ulval;\n      break;\n    }\n\n    case MINITIFF_TAG_SAMPLES_PER_PIXEL:\n    {\n      if (count != 1)\n      {\n        goto err_unsupported;\n      }\n      ulval = get_ulong_value(&getter, tag_type, vbuf);\n      info_ptr->samples_per_pixel = (unsigned int) ulval;\n      break;\n    }\n\n    case MINITIFF_TAG_ROWS_PER_STRIP:\n    {\n      if (count != 1)\n      {\n        goto err_unsupported;\n      }\n      ulval = get_ulong_value(&getter, tag_type, vbuf);\n      info_ptr->rows_per_strip = (size_t) ulval;\n      break;\n    }\n\n    case MINITIFF_TAG_STRIP_BYTE_COUNTS:\n    {\n      break;\n    }\n\n    case MINITIFF_TAG_PLANAR_CONFIGURATION:\n\n    case MINITIFF_TAG_PREDICTOR:\n    {\n      if ((count != 1) || (get_ulong_value(&getter, tag_type, vbuf) != 1))\n      {\n        goto err_unsupported;\n      }\n      break;\n    }\n\n    case MINITIFF_TAG_XMP:\n\n    case MINITIFF_TAG_IPTC:\n\n    case MINITIFF_TAG_EXIF_IFD:\n\n    case MINITIFF_TAG_ICC_PROFILE:\n\n    case MINITIFF_TAG_GPS_IFD:\n\n    case MINITIFF_TAG_INTEROPERABILITY_IFD:\n\n    case MINITIFF_TAG_PRINT_IM:\n    {\n      if (!unknown_metadata_found)\n      {\n        unknown_metadata_found = 1;\n        minitiff_warning(info_ptr, msg_warn_metadata);\n      }\n      break;\n    }\n\n  }\n\n  *ulval_ref = ulval;\n  *tag_id_ref = tag_id;\n  *tag_type_ref = tag_type;\n  *count_ref = count;\n  *bits_per_sample_count_ref = bits_per_sample_count;\n  *bits_per_sample_tag_type_ref = bits_per_sample_tag_type;\n  *strip_offsets_tag_type_ref = strip_offsets_tag_type;\n  *bits_per_sample_offset_ref = bits_per_sample_offset;\n  *strip_offsets_offset_ref = strip_offsets_offset;\n  *unknown_metadata_found_ref = unknown_metadata_found;\n}\n\n",
            "calle": [
                "alloc_ulong_array",
                "fread",
                "get_ulong_value",
                "getter.get_ulong",
                "getter.get_ushort",
                "minitiff_warning"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ulval_ref",
                        "type": "unsigned long * const",
                        "definition": [
                            "unsigned long * const ulval_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag_id_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const tag_id_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag_type_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const tag_type_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const count_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_per_sample_count_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const bits_per_sample_count_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_per_sample_tag_type_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const bits_per_sample_tag_type_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strip_offsets_tag_type_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const strip_offsets_tag_type_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_per_sample_offset_ref",
                        "type": "long * const",
                        "definition": [
                            "long * const bits_per_sample_offset_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strip_offsets_offset_ref",
                        "type": "long * const",
                        "definition": [
                            "long * const strip_offsets_offset_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unknown_metadata_found_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const unknown_metadata_found_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct minitiff_info",
                        "type": "struct minitiff_info * const",
                        "definition": [
                            "struct minitiff_info * const info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "getter",
                        "type": "struct minitiff_getter",
                        "definition": [
                            "struct minitiff_getter getter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "unsigned char [12]",
                        "definition": [
                            "unsigned char buf[12]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "vbuf",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const vbuf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ulval",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long ulval = *ulval_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag_id",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int tag_id = *tag_id_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag_type",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int tag_type = *tag_type_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "count",
                        "type": "size_t",
                        "definition": [
                            "size_t count = *count_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_per_sample_count",
                        "type": "size_t",
                        "definition": [
                            "size_t bits_per_sample_count = *bits_per_sample_count_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_per_sample_tag_type",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bits_per_sample_tag_type = *bits_per_sample_tag_type_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strip_offsets_tag_type",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int strip_offsets_tag_type = *strip_offsets_tag_type_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bits_per_sample_offset",
                        "type": "long",
                        "definition": [
                            "long bits_per_sample_offset = *bits_per_sample_offset_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strip_offsets_offset",
                        "type": "long",
                        "definition": [
                            "long strip_offsets_offset = *strip_offsets_offset_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unknown_metadata_found",
                        "type": "int",
                        "definition": [
                            "int unknown_metadata_found = *unknown_metadata_found_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg_warn_metadata",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "minitiff_init_info",
            "header": "void minitiff_init_info(struct minitiff_info *info_ptr)",
            "params": [
                "struct minitiff_info *info_ptr"
            ],
            "definition": "void minitiff_init_info(struct minitiff_info *info_ptr)\n{\n  memset(info_ptr, 0, sizeof(*info_ptr));\n  info_ptr->photometric = (unsigned int) (-1);\n}\n\n",
            "calle": [
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct minitiff_info",
                        "type": "struct minitiff_info *",
                        "definition": [
                            "struct minitiff_info *info_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "minitiff_validate_info",
            "header": "void minitiff_validate_info(const struct minitiff_info *info_ptr)",
            "params": [
                "const struct minitiff_info *info_ptr"
            ],
            "definition": "void minitiff_validate_info(const struct minitiff_info *info_ptr)\n{\n  if ((info_ptr->width == 0) || (info_ptr->height == 0))\n  {\n    minitiff_error(info_ptr, \"Invalid image dimensions in TIFF file\");\n  }\n  if ((info_ptr->bits_per_sample == 0) || (info_ptr->samples_per_pixel == 0))\n  {\n    minitiff_error(info_ptr, \"Invalid pixel info in TIFF file\");\n  }\n  if ((info_ptr->strip_offsets == 0) || (info_ptr->rows_per_strip == 0))\n  {\n    minitiff_error(info_ptr, \"Invalid strip info in TIFF file\");\n  }\n  if (info_ptr->compression != MINITIFF_COMPRESSION_NONE)\n  {\n    minitiff_error(info_ptr, \"Unsupported compression method in TIFF file\");\n  }\n  if (info_ptr->photometric >= MINITIFF_PHOTOMETRIC_PALETTE)\n  {\n    minitiff_error(info_ptr, \"Unsupported photometric interpretation in TIFF file\");\n  }\n}\n\n",
            "calle": [
                "minitiff_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct minitiff_info",
                        "type": "const struct minitiff_info *",
                        "definition": [
                            "const struct minitiff_info *info_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "minitiff_destroy_info",
            "header": "void minitiff_destroy_info(struct minitiff_info *info_ptr)",
            "params": [
                "struct minitiff_info *info_ptr"
            ],
            "definition": "void minitiff_destroy_info(struct minitiff_info *info_ptr)\n{\n  if (info_ptr->strip_offsets != 0)\n  {\n    free(info_ptr->strip_offsets);\n  }\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct minitiff_info",
                        "type": "struct minitiff_info *",
                        "definition": [
                            "struct minitiff_info *info_ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "minitiff_error",
            "header": "void minitiff_error(const struct minitiff_info *info_ptr, const char *msg)",
            "params": [
                "const struct minitiff_info *info_ptr",
                "const char *msg"
            ],
            "definition": "void minitiff_error(const struct minitiff_info *info_ptr, const char *msg)\n{\n  if (info_ptr->error_handler != 0)\n  {\n    info_ptr->error_handler(msg);\n  }\n  else\n    default_error_handler(msg);\n  abort();\n}\n\n",
            "calle": [
                "abort",
                "default_error_handler",
                "info_ptr->error_handler"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct minitiff_info",
                        "type": "const struct minitiff_info *",
                        "definition": [
                            "const struct minitiff_info *info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg",
                        "type": "const char *",
                        "definition": [
                            "const char *msg"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "minitiff_warning",
            "header": "void minitiff_warning(const struct minitiff_info *info_ptr, const char *msg)",
            "params": [
                "const struct minitiff_info *info_ptr",
                "const char *msg"
            ],
            "definition": "void minitiff_warning(const struct minitiff_info *info_ptr, const char *msg)\n{\n  if (info_ptr->warning_handler != 0)\n  {\n    info_ptr->warning_handler(msg);\n  }\n  else\n    default_warning_handler(msg);\n}\n\n",
            "calle": [
                "default_warning_handler",
                "info_ptr->warning_handler"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct minitiff_info",
                        "type": "const struct minitiff_info *",
                        "definition": [
                            "const struct minitiff_info *info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg",
                        "type": "const char *",
                        "definition": [
                            "const char *msg"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "default_error_handler",
            "header": "",
            "params": [
                "const char *msg"
            ],
            "definition": "static void default_error_handler(const char *msg)\n{\n  fprintf(stderr, \"minitiff: error: %s\\n\", msg);\n  exit(1);\n}\n\n",
            "calle": [
                "exit",
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "msg",
                        "type": "const char *",
                        "definition": [
                            "const char *msg"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "default_warning_handler",
            "header": "",
            "params": [
                "const char *msg"
            ],
            "definition": "static void default_warning_handler(const char *msg)\n{\n  fprintf(stderr, \"minitiff: warning: %s\\n\", msg);\n}\n\n",
            "calle": [
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "msg",
                        "type": "const char *",
                        "definition": [
                            "const char *msg"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pngx_read_image",
            "header": "int pngx_read_image(png_structp png_ptr, png_infop info_ptr, png_const_charpp fmt_name_ptr, png_const_charpp fmt_long_name_ptr)",
            "params": [
                "png_structp png_ptr",
                "png_infop info_ptr",
                "png_const_charpp fmt_name_ptr",
                "png_const_charpp fmt_long_name_ptr"
            ],
            "definition": "int pngx_read_image(png_structp png_ptr, png_infop info_ptr, png_const_charpp fmt_name_ptr, png_const_charpp fmt_long_name_ptr)\n{\n  png_byte sig[128];\n  size_t num;\n  int (*read_fn)(png_structp, png_infop, FILE *);\n  unsigned int read_fn_idx = 0;\n  FILE *stream;\n  unsigned int stream_idx = 0;\n  fpos_t fpos;\n  int result;\n  stream_idx = (FILE *) png_get_io_ptr(png_ptr);\n  if (fgetpos(stream, &fpos) != 0)\n  {\n    png_error(png_ptr, \"Can't ftell in input file stream\");\n  }\n  num = fread(sig, 1, sizeof(sig), stream);\n  if (fsetpos(stream, &fpos) != 0)\n  {\n    png_error(png_ptr, \"Can't fseek in input file stream\");\n  }\n  if (pngx_sig_is_png(png_ptr, sig, num, fmt_name_ptr, fmt_long_name_ptr) > 0)\n  {\n    png_read_png(png_ptr, info_ptr, 0, 0);\n    if (getc(stream) != EOF)\n    {\n      png_warning(png_ptr, \"Extraneous data found after IEND\");\n      fseek(stream, 0, 2);\n    }\n    return 1;\n  }\n  if (pngx_sig_is_bmp(sig, num, fmt_name_ptr, fmt_long_name_ptr) > 0)\n  {\n    read_fn_idx = pngx_read_bmp;\n  }\n  else\n    if (pngx_sig_is_gif(sig, num, fmt_name_ptr, fmt_long_name_ptr) > 0)\n  {\n    read_fn_idx = pngx_read_gif;\n  }\n  else\n    if (pngx_sig_is_jpeg(sig, num, fmt_name_ptr, fmt_long_name_ptr) > 0)\n  {\n    read_fn_idx = pngx_read_jpeg;\n  }\n  else\n    if (pngx_sig_is_pnm(sig, num, fmt_name_ptr, fmt_long_name_ptr) > 0)\n  {\n    read_fn_idx = pngx_read_pnm;\n  }\n  else\n    if (pngx_sig_is_tiff(sig, num, fmt_name_ptr, fmt_long_name_ptr) > 0)\n  {\n    read_fn_idx = pngx_read_tiff;\n  }\n  else\n    return 0;\n  result = read_fn(png_ptr, info_ptr, stream);\n  if (result <= 0)\n  {\n    if (fsetpos(stream, &fpos) != 0)\n    {\n      png_error(png_ptr, \"Can't fseek in input file stream\");\n    }\n  }\n  return result;\n}\n\n",
            "calle": [
                "fgetpos",
                "fread",
                "fseek",
                "fsetpos",
                "getc",
                "png_error",
                "png_get_io_ptr",
                "png_read_png",
                "png_warning",
                "pngx_read_bmp",
                "pngx_read_gif",
                "pngx_read_jpeg",
                "pngx_read_pnm",
                "pngx_read_tiff",
                "pngx_sig_is_bmp",
                "pngx_sig_is_gif",
                "pngx_sig_is_jpeg",
                "pngx_sig_is_png",
                "pngx_sig_is_pnm",
                "pngx_sig_is_tiff",
                "read_fn"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_infop",
                        "definition": [
                            "png_infop info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmt_name_ptr",
                        "type": "png_const_charpp",
                        "definition": [
                            "png_const_charpp fmt_name_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmt_long_name_ptr",
                        "type": "png_const_charpp",
                        "definition": [
                            "png_const_charpp fmt_long_name_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sig",
                        "type": "png_byte [128]",
                        "definition": [
                            "png_byte sig[128]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num",
                        "type": "size_t",
                        "definition": [
                            "size_t num"
                        ]
                    },
                    {
                        "path": null,
                        "name": "read_fn",
                        "type": "int (*)(png_structp, png_infop, FILE *)",
                        "definition": [
                            "int (*read_fn)(png_structp, png_infop, FILE *)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "read_fn_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int read_fn_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int stream_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fpos",
                        "type": "fpos_t",
                        "definition": [
                            "fpos_t fpos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "int",
                        "definition": [
                            "int result"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pngx_sig_is_png",
            "header": "",
            "params": [
                "png_structp png_ptr",
                "png_bytep sig",
                "size_t sig_size",
                "png_const_charpp fmt_name_ptr",
                "png_const_charpp fmt_long_name_ptr"
            ],
            "definition": "static int pngx_sig_is_png(png_structp png_ptr, png_bytep sig, size_t sig_size, png_const_charpp fmt_name_ptr, png_const_charpp fmt_long_name_ptr)\n{\n  static const char pngx_png_standalone_fmt_name[] = \"PNG\";\n  static const char pngx_png_datastream_fmt_name[] = \"PNG datastream\";\n  static const char pngx_png_standalone_fmt_long_name[] = \"Portable Network Graphics\";\n  static const char pngx_png_datastream_fmt_long_name[] = \"Portable Network Graphics embedded datastream\";\n  static const png_byte png_file_sig[8] = {137, 80, 78, 71, 13, 10, 26, 10};\n  static const png_byte mng_file_sig[8] = {138, 77, 78, 71, 13, 10, 26, 10};\n  static const png_byte png_ihdr_sig[8] = {0, 0, 0, 13, 73, 72, 68, 82};\n  int has_png_sig;\n  if (sig_size <= (25 + 18))\n  {\n    return -1;\n  }\n  has_png_sig = memcmp(sig, png_file_sig, 8) == 0;\n  if (memcmp(sig + ((has_png_sig) ? (8) : (0)), png_ihdr_sig, 8) != 0)\n  {\n    if ((memcmp(sig, png_file_sig, 4) == 0) && ((sig[4] == 10) || (sig[4] == 13)))\n    {\n      png_error(png_ptr, \"PNG file appears to be corrupted by text file conversions\");\n    }\n    else\n      if (memcmp(sig, mng_file_sig, 8) == 0)\n    {\n      png_error(png_ptr, \"MNG decoding is not supported\");\n    }\n    return 0;\n  }\n  if (fmt_name_ptr != 0)\n  {\n    *fmt_name_ptr = (has_png_sig) ? (pngx_png_standalone_fmt_name) : (pngx_png_datastream_fmt_name);\n  }\n  if (fmt_long_name_ptr != 0)\n  {\n    *fmt_long_name_ptr = (has_png_sig) ? (pngx_png_standalone_fmt_long_name) : (pngx_png_datastream_fmt_long_name);\n  }\n  return 1;\n}\n\n",
            "calle": [
                "memcmp",
                "png_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sig",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep sig"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sig_size",
                        "type": "size_t",
                        "definition": [
                            "size_t sig_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmt_name_ptr",
                        "type": "png_const_charpp",
                        "definition": [
                            "png_const_charpp fmt_name_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmt_long_name_ptr",
                        "type": "png_const_charpp",
                        "definition": [
                            "png_const_charpp fmt_long_name_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pngx_png_standalone_fmt_name",
                        "type": "const char []",
                        "definition": [
                            "static const char pngx_png_standalone_fmt_name[] = \"PNG\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "pngx_png_datastream_fmt_name",
                        "type": "const char []",
                        "definition": [
                            "static const char pngx_png_datastream_fmt_name[] = \"PNG datastream\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "pngx_png_standalone_fmt_long_name",
                        "type": "const char []",
                        "definition": [
                            "static const char pngx_png_standalone_fmt_long_name[] = \"Portable Network Graphics\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "pngx_png_datastream_fmt_long_name",
                        "type": "const char []",
                        "definition": [
                            "static const char pngx_png_datastream_fmt_long_name[] = \"Portable Network Graphics embedded datastream\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_file_sig",
                        "type": "const png_byte [8]",
                        "definition": [
                            "static const png_byte png_file_sig[8] = {137, 80, 78, 71, 13, 10, 26, 10}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mng_file_sig",
                        "type": "const png_byte [8]",
                        "definition": [
                            "static const png_byte mng_file_sig[8] = {138, 77, 78, 71, 13, 10, 26, 10}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_ihdr_sig",
                        "type": "const png_byte [8]",
                        "definition": [
                            "static const png_byte png_ihdr_sig[8] = {0, 0, 0, 13, 73, 72, 68, 82}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "has_png_sig",
                        "type": "int",
                        "definition": [
                            "int has_png_sig"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pngx_sig_is_bmp",
            "header": "int pngx_sig_is_bmp(png_bytep sig, size_t sig_size, png_const_charpp fmt_name_ptr, png_const_charpp fmt_long_name_ptr)",
            "params": [
                "png_bytep sig",
                "size_t sig_size",
                "png_const_charpp fmt_name_ptr",
                "png_const_charpp fmt_long_name_ptr"
            ],
            "definition": "int pngx_sig_is_bmp(png_bytep sig, size_t sig_size, png_const_charpp fmt_name_ptr, png_const_charpp fmt_long_name_ptr)\n{\n  static const char bmp_fmt_name[] = \"BMP\";\n  static const char os2bmp_fmt_long_name[] = \"OS/2 Bitmap\";\n  static const char winbmp_fmt_long_name[] = \"Windows Bitmap\";\n  png_uint_32 bihsize;\n  if (sig_size < (14 + 4))\n  {\n    return -1;\n  }\n  if (bmp_get_word(sig) != 0x4d42)\n  {\n    return 0;\n  }\n  bihsize = bmp_get_dword(sig + 14);\n  if ((bihsize > ((png_uint_32) 0x7fffffffL)) || ((bihsize != 12) && (bihsize < 40)))\n  {\n    return 0;\n  }\n  if (fmt_name_ptr != 0)\n  {\n    *fmt_name_ptr = bmp_fmt_name;\n  }\n  if (fmt_long_name_ptr != 0)\n  {\n    if (bihsize == 12)\n    {\n      *fmt_long_name_ptr = os2bmp_fmt_long_name;\n    }\n    else\n      *fmt_long_name_ptr = winbmp_fmt_long_name;\n  }\n  return 1;\n}\n\n",
            "calle": [
                "bmp_get_dword",
                "bmp_get_word"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "sig",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep sig"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sig_size",
                        "type": "size_t",
                        "definition": [
                            "size_t sig_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmt_name_ptr",
                        "type": "png_const_charpp",
                        "definition": [
                            "png_const_charpp fmt_name_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmt_long_name_ptr",
                        "type": "png_const_charpp",
                        "definition": [
                            "png_const_charpp fmt_long_name_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bmp_fmt_name",
                        "type": "const char []",
                        "definition": [
                            "static const char bmp_fmt_name[] = \"BMP\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "os2bmp_fmt_long_name",
                        "type": "const char []",
                        "definition": [
                            "static const char os2bmp_fmt_long_name[] = \"OS/2 Bitmap\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "winbmp_fmt_long_name",
                        "type": "const char []",
                        "definition": [
                            "static const char winbmp_fmt_long_name[] = \"Windows Bitmap\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "bihsize",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 bihsize"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pngx_read_bmp",
            "header": "int pngx_read_bmp(png_structp png_ptr, png_infop info_ptr, FILE *stream)",
            "params": [
                "png_structp png_ptr",
                "png_infop info_ptr",
                "FILE *stream"
            ],
            "definition": "int pngx_read_bmp(png_structp png_ptr, png_infop info_ptr, FILE *stream)\n{\n  png_byte bfh[14 + 124];\n  const png_bytep bih = bfh + 14;\n  png_byte rgbq[4];\n  png_uint_32 offbits;\n  png_uint_32 bihsize;\n  png_uint_32 skip;\n  png_uint_32 width;\n  png_uint_32 height;\n  png_uint_32 rowsize;\n  int topdown;\n  unsigned int pixdepth;\n  png_uint_32 compression;\n  unsigned int palsize;\n  unsigned int palnum;\n  png_uint_32 rgba_mask[4];\n  png_byte rgba_sig[4];\n  png_byte rgba_shift[4];\n  int bit_depth;\n  int color_type;\n  png_color palette[256];\n  png_color_8 sig_bit;\n  png_bytepp row_pointers;\n  png_bytepp begin_row;\n  png_bytepp end_row;\n  unsigned int i;\n  size_t y;\n  for (i = 0;; i += 1)\n  {\n    if (fread(bfh, 14 + 4, 1, stream) != 1)\n    {\n      i += 1;\n    }\n    else\n      if (bmp_get_word(bfh + 0) == 0x4d42)\n    {\n      break;\n    }\n    if (fread(bfh, (128 - 14) - 4, 1, stream) != 1)\n    {\n      i += 1;\n    }\n    if (i > 0)\n    {\n      return 0;\n    }\n  }\n\n  offbits = bmp_get_dword(bfh + 10);\n  bihsize = bmp_get_dword(bfh + 14);\n  if ((((offbits > ((png_uint_32) 0x7fffffffL)) || (bihsize > ((png_uint_32) 0x7fffffffL))) || (offbits < (bihsize + 14))) || ((bihsize != 12) && (bihsize < 40)))\n  {\n    return 0;\n  }\n  if (bihsize > 124)\n  {\n    skip = bihsize - 124;\n    bihsize = 124;\n  }\n  else\n    skip = 0;\n  if (fread(bih + 4, bihsize - 4, 1, stream) != 1)\n  {\n    return 0;\n  }\n  if (skip > 0)\n  {\n    if (fseek(stream, (long) skip, 1) != 0)\n    {\n      return 0;\n    }\n  }\n  skip = (offbits - bihsize) - 14;\n  topdown = 0;\n  if (bihsize < 40)\n  {\n    width = bmp_get_word(bih + 4);\n    height = bmp_get_word(bih + 6);\n    pixdepth = bmp_get_word(bih + 10);\n    compression = 0;\n    palsize = 3;\n  }\n  else\n  {\n    helper_pngx_read_bmp_1(&bihsize, &skip, &width, &height, &topdown, &pixdepth, &compression, &palsize, &i, stream, bih);\n  }\n  memset(rgba_mask, 0, sizeof(rgba_mask));\n  if (pixdepth > 8)\n  {\n    helper_pngx_read_bmp_3(&compression, png_ptr, bih, bihsize, pixdepth, rgba_mask);\n  }\n  switch (compression)\n  {\n    case 0:\n    {\n      if (((pixdepth > 0) && ((32 % pixdepth) != 0)) && (pixdepth != 24))\n      {\n        pixdepth = 0;\n      }\n      break;\n    }\n\n    case 1:\n    {\n      if (pixdepth != 8)\n      {\n        pixdepth = 0;\n      }\n      break;\n    }\n\n    case 2:\n    {\n      if (pixdepth != 4)\n      {\n        pixdepth = 0;\n      }\n      break;\n    }\n\n    case 3:\n    {\n      if ((pixdepth != 16) && (pixdepth != 32))\n      {\n        pixdepth = 0;\n      }\n      break;\n    }\n\n    case 4:\n    {\n      png_error(png_ptr, \"JPEG-compressed BMP files are not supported\");\n      break;\n    }\n\n    case 5:\n    {\n      if (ungetc(getc(stream), stream) == 0)\n      {\n        png_set_sig_bytes(png_ptr, 8);\n      }\n      png_set_read_fn(png_ptr, stream, 0);\n      png_read_png(png_ptr, info_ptr, 0, 0);\n      return 1;\n    }\n\n    default:\n    {\n      png_error(png_ptr, \"Unsupported compression method in BMP file\");\n    }\n\n  }\n\n  if (((width == 0) || (width > ((png_uint_32) 0x7fffffffL))) || (height == 0))\n  {\n    png_error(png_ptr, \"Invalid image dimensions in BMP file\");\n  }\n  if (pixdepth == 0)\n  {\n    png_error(png_ptr, \"Invalid pixel depth in BMP file\");\n  }\n  if (pixdepth <= 8)\n  {\n    palnum = skip / palsize;\n    if (palnum > 256)\n    {\n      palnum = 256;\n    }\n    skip -= palsize * palnum;\n    rowsize = (((width + (32 / pixdepth)) - 1) / (32 / pixdepth)) * 4;\n    bit_depth = pixdepth;\n    color_type = (palnum > 0) ? (2 | 1) : (0);\n  }\n  else\n  {\n    helper_pngx_read_bmp_2(&rowsize, &palnum, &bit_depth, &color_type, width, pixdepth, rgba_mask);\n  }\n  if (rowsize == 0)\n  {\n    png_error(png_ptr, \"Can't handle exceedingly large BMP dimensions\");\n  }\n  png_set_IHDR(png_ptr, info_ptr, width, height, bit_depth, color_type, 0, 0, 0);\n  if (pixdepth > 8)\n  {\n    for (i = 0; i < 4; i += 1)\n    {\n      bmp_process_mask(rgba_mask[i], &rgba_sig[i], &rgba_shift[i]);\n    }\n\n    if (((rgba_sig[0] == 0) || (rgba_sig[1] == 0)) || (rgba_sig[2] == 0))\n    {\n      png_error(png_ptr, \"Invalid color mask in BMP file\");\n    }\n    if ((((rgba_sig[0] != 8) || (rgba_sig[1] != 8)) || (rgba_sig[2] != 8)) || ((rgba_sig[3] != 0) && (rgba_sig[3] != 8)))\n    {\n      sig_bit.red = rgba_sig[0];\n      sig_bit.green = rgba_sig[1];\n      sig_bit.blue = rgba_sig[2];\n      sig_bit.alpha = rgba_sig[3];\n      png_set_sBIT(png_ptr, info_ptr, &sig_bit);\n    }\n  }\n  if (palnum > 0)\n  {\n    for (i = 0; i < palnum; i += 1)\n    {\n      if (fread(rgbq, palsize, 1, stream) != 1)\n      {\n        break;\n      }\n      palette[i].red = rgbq[2];\n      palette[i].green = rgbq[1];\n      palette[i].blue = rgbq[0];\n    }\n\n    png_set_PLTE(png_ptr, info_ptr, palette, i);\n    if (i != palnum)\n    {\n      png_error(png_ptr, \"Error reading color palette in BMP file\");\n    }\n  }\n  row_pointers = pngx_malloc_rows_extended(png_ptr, info_ptr, rowsize, -1);\n  if (topdown)\n  {\n    begin_row = row_pointers;\n    end_row = row_pointers + height;\n  }\n  else\n  {\n    begin_row = (row_pointers + height) - 1;\n    end_row = row_pointers - 1;\n  }\n  if (skip > 0)\n  {\n    fseek(stream, (long) skip, 1);\n  }\n  y = bmp_read_rows(begin_row, end_row, rowsize, compression, stream);\n  if (pixdepth > 8)\n  {\n    bmp_to_png_rows(row_pointers, width, height, pixdepth, rgba_sig, rgba_shift);\n  }\n  if (y != ((size_t) height))\n  {\n    png_error(png_ptr, \"Error reading BMP file\");\n  }\n  return 1;\n}\n\n",
            "calle": [
                "bmp_get_dword",
                "bmp_get_word",
                "bmp_process_mask",
                "bmp_read_rows",
                "bmp_to_png_rows",
                "fread",
                "fseek",
                "getc",
                "helper_pngx_read_bmp_1",
                "helper_pngx_read_bmp_2",
                "helper_pngx_read_bmp_3",
                "memset",
                "png_error",
                "png_read_png",
                "png_set_IHDR",
                "png_set_PLTE",
                "png_set_read_fn",
                "png_set_sBIT",
                "png_set_sig_bytes",
                "pngx_malloc_rows_extended",
                "ungetc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_infop",
                        "definition": [
                            "png_infop info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bfh",
                        "type": "png_byte [14 + 124]",
                        "definition": [
                            "png_byte bfh[14 + 124]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bih",
                        "type": "const png_bytep",
                        "definition": [
                            "const png_bytep bih = bfh + 14"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rgbq",
                        "type": "png_byte [4]",
                        "definition": [
                            "png_byte rgbq[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offbits",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 offbits"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bihsize",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 bihsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "skip",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 skip"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rowsize",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 rowsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "topdown",
                        "type": "int",
                        "definition": [
                            "int topdown"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pixdepth",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pixdepth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compression",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 compression"
                        ]
                    },
                    {
                        "path": null,
                        "name": "palsize",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int palsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "palnum",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int palnum"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rgba_mask",
                        "type": "png_uint_32 [4]",
                        "definition": [
                            "png_uint_32 rgba_mask[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rgba_sig",
                        "type": "png_byte [4]",
                        "definition": [
                            "png_byte rgba_sig[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rgba_shift",
                        "type": "png_byte [4]",
                        "definition": [
                            "png_byte rgba_shift[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bit_depth",
                        "type": "int",
                        "definition": [
                            "int bit_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color_type",
                        "type": "int",
                        "definition": [
                            "int color_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "palette",
                        "type": "png_color [256]",
                        "definition": [
                            "png_color palette[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sig_bit",
                        "type": "png_color_8",
                        "definition": [
                            "png_color_8 sig_bit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_pointers",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp row_pointers"
                        ]
                    },
                    {
                        "path": null,
                        "name": "begin_row",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp begin_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end_row",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp end_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "size_t",
                        "definition": [
                            "size_t y"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bmp_get_word",
            "header": "",
            "params": [
                "png_bytep ptr"
            ],
            "definition": "static unsigned int bmp_get_word(png_bytep ptr)\n{\n  return ((unsigned int) ptr[0]) + (((unsigned int) ptr[1]) << 8);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bmp_get_dword",
            "header": "",
            "params": [
                "png_bytep ptr"
            ],
            "definition": "static png_uint_32 bmp_get_dword(png_bytep ptr)\n{\n  return ((((png_uint_32) ptr[0]) + (((png_uint_32) ptr[1]) << 8)) + (((png_uint_32) ptr[2]) << 16)) + (((png_uint_32) ptr[3]) << 24);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bmp_memset_bytes",
            "header": "",
            "params": [
                "png_bytep ptr",
                "size_t offset",
                "int ch",
                "size_t len"
            ],
            "definition": "static void bmp_memset_bytes(png_bytep ptr, size_t offset, int ch, size_t len)\n{\n  memset(ptr + offset, ch, len);\n}\n\n",
            "calle": [
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offset",
                        "type": "size_t",
                        "definition": [
                            "size_t offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "int",
                        "definition": [
                            "int ch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bmp_memset_halfbytes",
            "header": "",
            "params": [
                "png_bytep ptr",
                "size_t offset",
                "int ch",
                "size_t len"
            ],
            "definition": "static void bmp_memset_halfbytes(png_bytep ptr, size_t offset, int ch, size_t len)\n{\n  if (len == 0)\n  {\n    return;\n  }\n  ptr += offset / 2;\n  if (offset & 1)\n  {\n    *ptr = (png_byte) (((*ptr) & 0xf0) | (ch & 0x0f));\n    ch = ((ch & 0xf0) >> 4) | ((ch & 0x0f) << 4);\n    ptr += 1;\n    len -= 1;\n  }\n  memset(ptr, ch, len / 2);\n  if (len & 1)\n  {\n    ptr[len / 2] = (png_byte) (ch & 0xf0);\n  }\n}\n\n",
            "calle": [
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offset",
                        "type": "size_t",
                        "definition": [
                            "size_t offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "int",
                        "definition": [
                            "int ch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bmp_fread_bytes",
            "header": "",
            "params": [
                "png_bytep ptr",
                "size_t offset",
                "size_t len",
                "FILE *stream"
            ],
            "definition": "static size_t bmp_fread_bytes(png_bytep ptr, size_t offset, size_t len, FILE *stream)\n{\n  size_t result;\n  result = fread(ptr + offset, 1, len, stream);\n  if (len & 1)\n  {\n    getc(stream);\n  }\n  return result;\n}\n\n",
            "calle": [
                "fread",
                "getc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offset",
                        "type": "size_t",
                        "definition": [
                            "size_t offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "size_t",
                        "definition": [
                            "size_t result"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bmp_fread_halfbytes",
            "header": "",
            "params": [
                "png_bytep ptr",
                "size_t offset",
                "size_t len",
                "FILE *stream"
            ],
            "definition": "static size_t bmp_fread_halfbytes(png_bytep ptr, size_t offset, size_t len, FILE *stream)\n{\n  size_t result;\n  int ch;\n  if (len == 0)\n  {\n    return 0;\n  }\n  ptr += offset / 2;\n  if (offset & 1)\n  {\n    for (result = 0; result < (len - 1); result += 2)\n    {\n      ch = getc(stream);\n      if (ch == EOF)\n      {\n        break;\n      }\n      *ptr = (png_byte) (((*ptr) & 0xf0) | ((ch & 0xf0) >> 4));\n      ptr += 1;\n      *ptr = (png_byte) ((ch & 0x0f) << 4);\n    }\n\n  }\n  else\n  {\n    result = fread(ptr, 1, (len + 1) / 2, stream) * 2;\n  }\n  if (len & 2)\n  {\n    getc(stream);\n  }\n  return (result <= len) ? (result) : (len);\n}\n\n",
            "calle": [
                "fread",
                "getc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offset",
                        "type": "size_t",
                        "definition": [
                            "size_t offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "size_t",
                        "definition": [
                            "size_t result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "int",
                        "definition": [
                            "int ch"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bmp_process_mask",
            "header": "",
            "params": [
                "png_uint_32 bmp_mask",
                "png_bytep sig_bit",
                "png_bytep shift_bit"
            ],
            "definition": "static void bmp_process_mask(png_uint_32 bmp_mask, png_bytep sig_bit, png_bytep shift_bit)\n{\n  *sig_bit = (*shift_bit = (png_byte) 0);\n  if (bmp_mask == 0)\n  {\n    return;\n  }\n  while ((bmp_mask & 1) == 0)\n  {\n    bmp_mask >>= 1;\n    *shift_bit += 1;\n  }\n\n  while (bmp_mask != 0)\n  {\n    if (((bmp_mask & 1) == 0) || ((*sig_bit) >= 8))\n    {\n      *sig_bit = (png_byte) 0;\n      return;\n    }\n    bmp_mask >>= 1;\n    *sig_bit += 1;\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bmp_mask",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 bmp_mask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sig_bit",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep sig_bit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "shift_bit",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep shift_bit"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bmp_read_rows",
            "header": "",
            "params": [
                "png_bytepp begin_row",
                "png_bytepp end_row",
                "size_t row_size",
                "unsigned int compression",
                "FILE *stream"
            ],
            "definition": "static size_t bmp_read_rows(png_bytepp begin_row, png_bytepp end_row, size_t row_size, unsigned int compression, FILE *stream)\n{\n  size_t result;\n  png_bytepp crt_row;\n  int inc;\n  size_t crtn;\n  size_t dcrtn;\n  size_t endn;\n  unsigned int len;\n  unsigned int b1;\n  unsigned int b2;\n  int ch;\n  void (*bmp_memset_fn)(png_bytep, size_t, int, size_t);\n  unsigned int bmp_memset_fn_idx = 0;\n  size_t (*bmp_fread_fn)(png_bytep, size_t, size_t, FILE *);\n  unsigned int bmp_fread_fn_idx = 0;\n  if (row_size == 0)\n  {\n    return 0;\n  }\n  inc = (begin_row <= end_row) ? (1) : (-1);\n  crtn = 0;\n  result = 0;\n  if (compression == 2)\n  {\n    endn = row_size * 2;\n    if (endn <= row_size)\n    {\n      return 0;\n    }\n    bmp_memset_fn_idx = bmp_memset_halfbytes;\n    bmp_fread_fn_idx = bmp_fread_halfbytes;\n  }\n  else\n  {\n    endn = row_size;\n    bmp_memset_fn_idx = bmp_memset_bytes;\n    bmp_fread_fn_idx = bmp_fread_bytes;\n  }\n  if ((compression == 0) || (compression == 3))\n  {\n    for (crt_row = begin_row; crt_row != end_row; crt_row += inc)\n    {\n      crtn = bmp_fread_fn(*crt_row, 0, endn, stream);\n      if (crtn != endn)\n      {\n        break;\n      }\n      result += 1;\n    }\n\n  }\n  else\n    if ((compression == 1) || (compression == 2))\n  {\n    helper_bmp_read_rows_1(&result, &crt_row, &crtn, &dcrtn, &endn, &len, &b1, &b2, &ch, begin_row, end_row, row_size, compression, stream, inc);\n  }\n  else\n    return 0;\n  for (; crt_row != end_row; crt_row += inc)\n  {\n    bmp_memset_fn(*crt_row, crtn, 0, endn - crtn);\n    crtn = 0;\n  }\n\n  return result;\n}\n\n",
            "calle": [
                "bmp_fread_bytes",
                "bmp_fread_fn",
                "bmp_fread_halfbytes",
                "bmp_memset_bytes",
                "bmp_memset_fn",
                "bmp_memset_halfbytes",
                "helper_bmp_read_rows_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "begin_row",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp begin_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end_row",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp end_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_size",
                        "type": "size_t",
                        "definition": [
                            "size_t row_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compression",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int compression"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "size_t",
                        "definition": [
                            "size_t result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crt_row",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp crt_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inc",
                        "type": "int",
                        "definition": [
                            "int inc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crtn",
                        "type": "size_t",
                        "definition": [
                            "size_t crtn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dcrtn",
                        "type": "size_t",
                        "definition": [
                            "size_t dcrtn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "endn",
                        "type": "size_t",
                        "definition": [
                            "size_t endn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b1",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int b1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b2",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int b2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "int",
                        "definition": [
                            "int ch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bmp_memset_fn",
                        "type": "void (*)(png_bytep, size_t, int, size_t)",
                        "definition": [
                            "void (*bmp_memset_fn)(png_bytep, size_t, int, size_t)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bmp_memset_fn_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bmp_memset_fn_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bmp_fread_fn",
                        "type": "size_t (*)(png_bytep, size_t, size_t, FILE *)",
                        "definition": [
                            "size_t (*bmp_fread_fn)(png_bytep, size_t, size_t, FILE *)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bmp_fread_fn_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bmp_fread_fn_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bmp_to_png_rows",
            "header": "",
            "params": [
                "png_bytepp row_pointers",
                "png_uint_32 width",
                "png_uint_32 height",
                "unsigned int pixdepth",
                "png_bytep rgba_sig",
                "png_bytep rgba_shift"
            ],
            "definition": "static void bmp_to_png_rows(png_bytepp row_pointers, png_uint_32 width, png_uint_32 height, unsigned int pixdepth, png_bytep rgba_sig, png_bytep rgba_shift)\n{\n  png_bytep src_ptr;\n  png_bytep dest_ptr;\n  unsigned int rgba_mask[4];\n  unsigned int num_samples;\n  unsigned int sample;\n  unsigned int mask;\n  unsigned int wpix;\n  png_uint_32 dwpix;\n  png_uint_32 x;\n  png_uint_32 y;\n  unsigned int i;\n  if (pixdepth == 24)\n  {\n    for (y = 0; y < height; y += 1)\n    {\n      src_ptr = row_pointers[y];\n      for (x = 0; x < width; x += 1, src_ptr += 3)\n      {\n        png_byte tmp = src_ptr[0];\n        src_ptr[0] = src_ptr[2];\n        src_ptr[2] = tmp;\n      }\n\n    }\n\n    return;\n  }\n  num_samples = (rgba_sig[3] != 0) ? (4) : (3);\n  for (i = 0; i < num_samples; i += 1)\n  {\n    rgba_mask[i] = (1U << rgba_sig[i]) - 1;\n  }\n\n  if (pixdepth == 16)\n  {\n    for (y = 0; y < height; y += 1)\n    {\n      src_ptr = row_pointers[y] + ((width - 1) * 2);\n      dest_ptr = row_pointers[y] + ((width - 1) * num_samples);\n      for (x = 0; x < width; x += 1, src_ptr -= 2, dest_ptr -= num_samples)\n      {\n        wpix = ((unsigned int) src_ptr[0]) + (((unsigned int) src_ptr[1]) << 8);\n        for (i = 0; i < num_samples; i += 1)\n        {\n          mask = rgba_mask[i];\n          sample = (wpix >> rgba_shift[i]) & mask;\n          dest_ptr[i] = (png_byte) (((sample * 255) + (mask / 2)) / mask);\n        }\n\n      }\n\n    }\n\n  }\n  else\n    if (pixdepth == 32)\n  {\n    for (y = 0; y < height; y += 1)\n    {\n      src_ptr = (dest_ptr = row_pointers[y]);\n      for (x = 0; x < width; x += 1, src_ptr += 4, dest_ptr += num_samples)\n      {\n        dwpix = ((((png_uint_32) src_ptr[0]) + (((png_uint_32) src_ptr[1]) << 8)) + (((png_uint_32) src_ptr[2]) << 16)) + (((png_uint_32) src_ptr[3]) << 24);\n        for (i = 0; i < num_samples; i += 1)\n        {\n          mask = rgba_mask[i];\n          sample = (dwpix >> rgba_shift[i]) & mask;\n          dest_ptr[i] = (png_byte) (((sample * 255) + (mask / 2)) / mask);\n        }\n\n      }\n\n    }\n\n  }\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "row_pointers",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp row_pointers"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pixdepth",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pixdepth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rgba_sig",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep rgba_sig"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rgba_shift",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep rgba_shift"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src_ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep src_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_ptr",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep dest_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rgba_mask",
                        "type": "unsigned int [4]",
                        "definition": [
                            "unsigned int rgba_mask[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_samples",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int num_samples"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sample"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int mask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wpix",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int wpix"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dwpix",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 dwpix"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "y",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 y"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp",
                        "type": "png_byte",
                        "definition": [
                            "png_byte tmp = src_ptr[0]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_bmp_read_rows_1",
            "header": "",
            "params": [
                "size_t * const result_ref",
                "png_bytepp * const crt_row_ref",
                "size_t * const crtn_ref",
                "size_t * const dcrtn_ref",
                "size_t * const endn_ref",
                "unsigned int * const len_ref",
                "unsigned int * const b1_ref",
                "unsigned int * const b2_ref",
                "int * const ch_ref",
                "png_bytepp begin_row",
                "png_bytepp end_row",
                "size_t row_size",
                "unsigned int compression",
                "FILE * const stream",
                "int inc"
            ],
            "definition": "size_t helper_bmp_read_rows_1(size_t * const result_ref, png_bytepp * const crt_row_ref, size_t * const crtn_ref, size_t * const dcrtn_ref, size_t * const endn_ref, unsigned int * const len_ref, unsigned int * const b1_ref, unsigned int * const b2_ref, int * const ch_ref, png_bytepp begin_row, png_bytepp end_row, size_t row_size, unsigned int compression, FILE * const stream, int inc)\n{\n  size_t result = *result_ref;\n  png_bytepp crt_row = *crt_row_ref;\n  size_t crtn = *crtn_ref;\n  size_t dcrtn = *dcrtn_ref;\n  size_t endn = *endn_ref;\n  unsigned int len = *len_ref;\n  unsigned int b1 = *b1_ref;\n  unsigned int b2 = *b2_ref;\n  int ch = *ch_ref;\n  if (compression == 1)\n  {\n    endn = row_size;\n  }\n  else\n  {\n    endn = row_size * 2;\n    if (endn <= row_size)\n    {\n      return 0;\n    }\n  }\n  for (crt_row = begin_row; crt_row != end_row;)\n  {\n    helper_helper_bmp_read_rows_1_1(&result, &crt_row, &crtn, &dcrtn, &len, &b1, &b2, &ch, begin_row, end_row, stream, inc, endn);\n  }\n\n  *result_ref = result;\n  *crt_row_ref = crt_row;\n  *crtn_ref = crtn;\n  *dcrtn_ref = dcrtn;\n  *endn_ref = endn;\n  *len_ref = len;\n  *b1_ref = b1;\n  *b2_ref = b2;\n  *ch_ref = ch;\n}\n\n",
            "calle": [
                "helper_helper_bmp_read_rows_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "result_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const result_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crt_row_ref",
                        "type": "png_bytepp * const",
                        "definition": [
                            "png_bytepp * const crt_row_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crtn_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const crtn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dcrtn_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const dcrtn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "endn_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const endn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b1_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const b1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b2_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const b2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ch_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "begin_row",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp begin_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end_row",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp end_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_size",
                        "type": "size_t",
                        "definition": [
                            "size_t row_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compression",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int compression"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inc",
                        "type": "int",
                        "definition": [
                            "int inc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "size_t",
                        "definition": [
                            "size_t result = *result_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crt_row",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp crt_row = *crt_row_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crtn",
                        "type": "size_t",
                        "definition": [
                            "size_t crtn = *crtn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dcrtn",
                        "type": "size_t",
                        "definition": [
                            "size_t dcrtn = *dcrtn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "endn",
                        "type": "size_t",
                        "definition": [
                            "size_t endn = *endn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b1",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int b1 = *b1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b2",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int b2 = *b2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "int",
                        "definition": [
                            "int ch = *ch_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_pngx_read_bmp_1",
            "header": "",
            "params": [
                "png_uint_32 * const bihsize_ref",
                "png_uint_32 * const skip_ref",
                "png_uint_32 * const width_ref",
                "png_uint_32 * const height_ref",
                "int * const topdown_ref",
                "unsigned int * const pixdepth_ref",
                "png_uint_32 * const compression_ref",
                "unsigned int * const palsize_ref",
                "unsigned int * const i_ref",
                "FILE * const stream",
                "const png_bytep bih"
            ],
            "definition": "int helper_pngx_read_bmp_1(png_uint_32 * const bihsize_ref, png_uint_32 * const skip_ref, png_uint_32 * const width_ref, png_uint_32 * const height_ref, int * const topdown_ref, unsigned int * const pixdepth_ref, png_uint_32 * const compression_ref, unsigned int * const palsize_ref, unsigned int * const i_ref, FILE * const stream, const png_bytep bih)\n{\n  png_uint_32 bihsize = *bihsize_ref;\n  png_uint_32 skip = *skip_ref;\n  png_uint_32 width = *width_ref;\n  png_uint_32 height = *height_ref;\n  int topdown = *topdown_ref;\n  unsigned int pixdepth = *pixdepth_ref;\n  png_uint_32 compression = *compression_ref;\n  unsigned int palsize = *palsize_ref;\n  unsigned int i = *i_ref;\n  width = bmp_get_dword(bih + 4);\n  height = bmp_get_dword(bih + 8);\n  pixdepth = bmp_get_word(bih + 14);\n  compression = bmp_get_dword(bih + 16);\n  palsize = 4;\n  if (height > ((png_uint_32) 0x7fffffffL))\n  {\n    height = (((png_uint_32) (-1)) - height) + 1;\n    topdown = 1;\n  }\n  if ((bihsize == 40) && (compression == 3))\n  {\n    i = (skip <= 16) ? ((unsigned int) skip) : (16);\n    if (fread(bih + 40, i, 1, stream) != 1)\n    {\n      return 0;\n    }\n    bihsize += i;\n    skip -= i;\n  }\n  *bihsize_ref = bihsize;\n  *skip_ref = skip;\n  *width_ref = width;\n  *height_ref = height;\n  *topdown_ref = topdown;\n  *pixdepth_ref = pixdepth;\n  *compression_ref = compression;\n  *palsize_ref = palsize;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "bmp_get_dword",
                "bmp_get_word",
                "fread"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "bihsize_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const bihsize_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "skip_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const skip_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const width_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const height_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "topdown_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const topdown_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pixdepth_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const pixdepth_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compression_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const compression_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "palsize_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const palsize_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bih",
                        "type": "const png_bytep",
                        "definition": [
                            "const png_bytep bih"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bihsize",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 bihsize = *bihsize_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "skip",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 skip = *skip_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width = *width_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 height = *height_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "topdown",
                        "type": "int",
                        "definition": [
                            "int topdown = *topdown_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pixdepth",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pixdepth = *pixdepth_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compression",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 compression = *compression_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "palsize",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int palsize = *palsize_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int i = *i_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_pngx_read_bmp_2",
            "header": "",
            "params": [
                "png_uint_32 * const rowsize_ref",
                "unsigned int * const palnum_ref",
                "int * const bit_depth_ref",
                "int * const color_type_ref",
                "png_uint_32 width",
                "unsigned int pixdepth",
                "png_uint_32 rgba_mask[4]"
            ],
            "definition": "void helper_pngx_read_bmp_2(png_uint_32 * const rowsize_ref, unsigned int * const palnum_ref, int * const bit_depth_ref, int * const color_type_ref, png_uint_32 width, unsigned int pixdepth, png_uint_32 rgba_mask[4])\n{\n  png_uint_32 rowsize = *rowsize_ref;\n  unsigned int palnum = *palnum_ref;\n  int bit_depth = *bit_depth_ref;\n  int color_type = *color_type_ref;\n  palnum = 0;\n  bit_depth = 8;\n  switch (pixdepth)\n  {\n    case 16:\n    {\n      rowsize = ((width * 2) + 3) & (~3);\n      break;\n    }\n\n    case 24:\n    {\n      rowsize = ((width * 3) + 3) & (~3);\n      break;\n    }\n\n    case 32:\n    {\n      rowsize = width * 4;\n      break;\n    }\n\n    default:\n    {\n      bit_depth = 0;\n      rowsize = 0;\n    }\n\n  }\n\n  if ((rowsize / width) < (pixdepth / 8))\n  {\n    rowsize = 0;\n  }\n  color_type = (rgba_mask[3] != 0) ? (2 | 4) : (2);\n  *rowsize_ref = rowsize;\n  *palnum_ref = palnum;\n  *bit_depth_ref = bit_depth;\n  *color_type_ref = color_type;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "rowsize_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const rowsize_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "palnum_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const palnum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bit_depth_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const bit_depth_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color_type_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const color_type_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pixdepth",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pixdepth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rgba_mask",
                        "type": "png_uint_32 [4]",
                        "definition": [
                            "png_uint_32 rgba_mask[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rowsize",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 rowsize = *rowsize_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "palnum",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int palnum = *palnum_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bit_depth",
                        "type": "int",
                        "definition": [
                            "int bit_depth = *bit_depth_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color_type",
                        "type": "int",
                        "definition": [
                            "int color_type = *color_type_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_pngx_read_bmp_3",
            "header": "",
            "params": [
                "png_uint_32 * const compression_ref",
                "png_structp png_ptr",
                "const png_bytep bih",
                "png_uint_32 bihsize",
                "unsigned int pixdepth",
                "png_uint_32 rgba_mask[4]"
            ],
            "definition": "void helper_pngx_read_bmp_3(png_uint_32 * const compression_ref, png_structp png_ptr, const png_bytep bih, png_uint_32 bihsize, unsigned int pixdepth, png_uint_32 rgba_mask[4])\n{\n  png_uint_32 compression = *compression_ref;\n  if (compression == 0)\n  {\n    if (pixdepth == 16)\n    {\n      compression = 3;\n      rgba_mask[0] = 0x7c00;\n      rgba_mask[1] = 0x03e0;\n      rgba_mask[2] = 0x001f;\n    }\n    else\n    {\n      rgba_mask[0] = (png_uint_32) 0x00ff0000L;\n      rgba_mask[1] = (png_uint_32) 0x0000ff00L;\n      rgba_mask[2] = (png_uint_32) 0x000000ffL;\n    }\n  }\n  else\n    if (compression == 3)\n  {\n    if (bihsize >= (40 + 12))\n    {\n      rgba_mask[0] = bmp_get_dword(bih + 40);\n      rgba_mask[1] = bmp_get_dword(bih + 44);\n      rgba_mask[2] = bmp_get_dword(bih + 48);\n    }\n    else\n      png_error(png_ptr, \"Missing color mask in BMP file\");\n  }\n  if (bihsize >= (40 + 16))\n  {\n    rgba_mask[3] = bmp_get_dword(bih + 52);\n  }\n  *compression_ref = compression;\n}\n\n",
            "calle": [
                "bmp_get_dword",
                "png_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "compression_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const compression_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bih",
                        "type": "const png_bytep",
                        "definition": [
                            "const png_bytep bih"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bihsize",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 bihsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pixdepth",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pixdepth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rgba_mask",
                        "type": "png_uint_32 [4]",
                        "definition": [
                            "png_uint_32 rgba_mask[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compression",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 compression = *compression_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_bmp_read_rows_1_1",
            "header": "",
            "params": [
                "size_t * const result_ref",
                "png_bytepp * const crt_row_ref",
                "size_t * const crtn_ref",
                "size_t * const dcrtn_ref",
                "unsigned int * const len_ref",
                "unsigned int * const b1_ref",
                "unsigned int * const b2_ref",
                "int * const ch_ref",
                "png_bytepp begin_row",
                "png_bytepp end_row",
                "FILE * const stream",
                "int inc",
                "size_t endn"
            ],
            "definition": "void helper_helper_bmp_read_rows_1_1(size_t * const result_ref, png_bytepp * const crt_row_ref, size_t * const crtn_ref, size_t * const dcrtn_ref, unsigned int * const len_ref, unsigned int * const b1_ref, unsigned int * const b2_ref, int * const ch_ref, png_bytepp begin_row, png_bytepp end_row, FILE * const stream, int inc, size_t endn)\n{\n  size_t result = *result_ref;\n  png_bytepp crt_row = *crt_row_ref;\n  size_t crtn = *crtn_ref;\n  size_t dcrtn = *dcrtn_ref;\n  unsigned int len = *len_ref;\n  unsigned int b1 = *b1_ref;\n  unsigned int b2 = *b2_ref;\n  int ch = *ch_ref;\n  ch = getc(stream);\n  b1 = (unsigned int) ch;\n  ch = getc(stream);\n  b2 = (unsigned int) ch;\n  if (ch == EOF)\n  {\n    break;\n  }\n  if (b1 == 0)\n  {\n    helper_helper_helper_bmp_read_rows_1_1_1(&result, &crt_row, &crtn, &dcrtn, &len, &b1, &b2, &ch, begin_row, end_row, stream, inc, endn);\n  }\n  else\n  {\n    len = (b1 <= (endn - crtn)) ? (b1) : ((unsigned int) (endn - crtn));\n    bmp_memset_fn(*crt_row, crtn, (int) b2, len);\n    crtn += len;\n  }\n  *result_ref = result;\n  *crt_row_ref = crt_row;\n  *crtn_ref = crtn;\n  *dcrtn_ref = dcrtn;\n  *len_ref = len;\n  *b1_ref = b1;\n  *b2_ref = b2;\n  *ch_ref = ch;\n}\n\n",
            "calle": [
                "bmp_memset_fn",
                "getc",
                "helper_helper_helper_bmp_read_rows_1_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "result_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const result_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crt_row_ref",
                        "type": "png_bytepp * const",
                        "definition": [
                            "png_bytepp * const crt_row_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crtn_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const crtn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dcrtn_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const dcrtn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b1_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const b1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b2_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const b2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ch_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "begin_row",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp begin_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end_row",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp end_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inc",
                        "type": "int",
                        "definition": [
                            "int inc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "endn",
                        "type": "size_t",
                        "definition": [
                            "size_t endn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "size_t",
                        "definition": [
                            "size_t result = *result_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crt_row",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp crt_row = *crt_row_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crtn",
                        "type": "size_t",
                        "definition": [
                            "size_t crtn = *crtn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dcrtn",
                        "type": "size_t",
                        "definition": [
                            "size_t dcrtn = *dcrtn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b1",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int b1 = *b1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b2",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int b2 = *b2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "int",
                        "definition": [
                            "int ch = *ch_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_bmp_read_rows_1_1_1",
            "header": "",
            "params": [
                "size_t * const result_ref",
                "png_bytepp * const crt_row_ref",
                "size_t * const crtn_ref",
                "size_t * const dcrtn_ref",
                "unsigned int * const len_ref",
                "unsigned int * const b1_ref",
                "unsigned int * const b2_ref",
                "int * const ch_ref",
                "png_bytepp begin_row",
                "png_bytepp end_row",
                "FILE * const stream",
                "int inc",
                "size_t endn"
            ],
            "definition": "void helper_helper_helper_bmp_read_rows_1_1_1(size_t * const result_ref, png_bytepp * const crt_row_ref, size_t * const crtn_ref, size_t * const dcrtn_ref, unsigned int * const len_ref, unsigned int * const b1_ref, unsigned int * const b2_ref, int * const ch_ref, png_bytepp begin_row, png_bytepp end_row, FILE * const stream, int inc, size_t endn)\n{\n  size_t result = *result_ref;\n  png_bytepp crt_row = *crt_row_ref;\n  size_t crtn = *crtn_ref;\n  size_t dcrtn = *dcrtn_ref;\n  unsigned int len = *len_ref;\n  unsigned int b1 = *b1_ref;\n  unsigned int b2 = *b2_ref;\n  int ch = *ch_ref;\n  if (b2 == 0)\n  {\n    helper_helper_helper_helper_bmp_read_rows_1_1_1_1(&result, &crt_row, &crtn, &ch, end_row, stream, inc, endn);\n  }\n  else\n    if (b2 == 1)\n  {\n    bmp_memset_fn(*crt_row, crtn, 0, endn - crtn);\n    crt_row += inc;\n    crtn = 0;\n    result = (begin_row <= end_row) ? (end_row - begin_row) : (begin_row - end_row);\n    break;\n  }\n  else\n    if (b2 == 2)\n  {\n    helper_helper_helper_helper_bmp_read_rows_1_1_1_2(&result, &crt_row, &crtn, &dcrtn, &b1, &b2, &ch, end_row, stream, inc, endn);\n  }\n  else\n  {\n    len = (b2 <= (endn - crtn)) ? (b2) : ((unsigned int) (endn - crtn));\n    if (bmp_fread_fn(*crt_row, crtn, len, stream) != len)\n    {\n      break;\n    }\n    crtn += len;\n  }\n  *result_ref = result;\n  *crt_row_ref = crt_row;\n  *crtn_ref = crtn;\n  *dcrtn_ref = dcrtn;\n  *len_ref = len;\n  *b1_ref = b1;\n  *b2_ref = b2;\n  *ch_ref = ch;\n}\n\n",
            "calle": [
                "bmp_fread_fn",
                "bmp_memset_fn",
                "helper_helper_helper_helper_bmp_read_rows_1_1_1_1",
                "helper_helper_helper_helper_bmp_read_rows_1_1_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "result_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const result_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crt_row_ref",
                        "type": "png_bytepp * const",
                        "definition": [
                            "png_bytepp * const crt_row_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crtn_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const crtn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dcrtn_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const dcrtn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b1_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const b1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b2_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const b2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ch_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "begin_row",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp begin_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end_row",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp end_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inc",
                        "type": "int",
                        "definition": [
                            "int inc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "endn",
                        "type": "size_t",
                        "definition": [
                            "size_t endn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "size_t",
                        "definition": [
                            "size_t result = *result_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crt_row",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp crt_row = *crt_row_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crtn",
                        "type": "size_t",
                        "definition": [
                            "size_t crtn = *crtn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dcrtn",
                        "type": "size_t",
                        "definition": [
                            "size_t dcrtn = *dcrtn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int len = *len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b1",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int b1 = *b1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b2",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int b2 = *b2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "int",
                        "definition": [
                            "int ch = *ch_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_bmp_read_rows_1_1_1_1",
            "header": "",
            "params": [
                "size_t * const result_ref",
                "png_bytepp * const crt_row_ref",
                "size_t * const crtn_ref",
                "int * const ch_ref",
                "png_bytepp end_row",
                "FILE * const stream",
                "int inc",
                "size_t endn"
            ],
            "definition": "void helper_helper_helper_helper_bmp_read_rows_1_1_1_1(size_t * const result_ref, png_bytepp * const crt_row_ref, size_t * const crtn_ref, int * const ch_ref, png_bytepp end_row, FILE * const stream, int inc, size_t endn)\n{\n  size_t result = *result_ref;\n  png_bytepp crt_row = *crt_row_ref;\n  size_t crtn = *crtn_ref;\n  int ch = *ch_ref;\n  bmp_memset_fn(*crt_row, crtn, 0, endn - crtn);\n  crt_row += inc;\n  crtn = 0;\n  result += 1;\n  if (crt_row == end_row)\n  {\n    ch = getc(stream);\n    if ((ch != EOF) && (ch != 0))\n    {\n      ungetc(ch, stream);\n      break;\n    }\n    getc(stream);\n    break;\n  }\n  *result_ref = result;\n  *crt_row_ref = crt_row;\n  *crtn_ref = crtn;\n  *ch_ref = ch;\n}\n\n",
            "calle": [
                "bmp_memset_fn",
                "getc",
                "ungetc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "result_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const result_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crt_row_ref",
                        "type": "png_bytepp * const",
                        "definition": [
                            "png_bytepp * const crt_row_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crtn_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const crtn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ch_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end_row",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp end_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inc",
                        "type": "int",
                        "definition": [
                            "int inc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "endn",
                        "type": "size_t",
                        "definition": [
                            "size_t endn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "size_t",
                        "definition": [
                            "size_t result = *result_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crt_row",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp crt_row = *crt_row_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crtn",
                        "type": "size_t",
                        "definition": [
                            "size_t crtn = *crtn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "int",
                        "definition": [
                            "int ch = *ch_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_bmp_read_rows_1_1_1_2",
            "header": "",
            "params": [
                "size_t * const result_ref",
                "png_bytepp * const crt_row_ref",
                "size_t * const crtn_ref",
                "size_t * const dcrtn_ref",
                "unsigned int * const b1_ref",
                "unsigned int * const b2_ref",
                "int * const ch_ref",
                "png_bytepp end_row",
                "FILE * const stream",
                "int inc",
                "size_t endn"
            ],
            "definition": "void helper_helper_helper_helper_bmp_read_rows_1_1_1_2(size_t * const result_ref, png_bytepp * const crt_row_ref, size_t * const crtn_ref, size_t * const dcrtn_ref, unsigned int * const b1_ref, unsigned int * const b2_ref, int * const ch_ref, png_bytepp end_row, FILE * const stream, int inc, size_t endn)\n{\n  size_t result = *result_ref;\n  png_bytepp crt_row = *crt_row_ref;\n  size_t crtn = *crtn_ref;\n  size_t dcrtn = *dcrtn_ref;\n  unsigned int b1 = *b1_ref;\n  unsigned int b2 = *b2_ref;\n  int ch = *ch_ref;\n  ch = getc(stream);\n  b1 = (unsigned int) ch;\n  ch = getc(stream);\n  b2 = (unsigned int) ch;\n  if (ch == EOF)\n  {\n    break;\n  }\n  dcrtn = (b1 < (endn - crtn)) ? (crtn + b1) : (endn);\n  for (; b2 > 0; b2 -= 1)\n  {\n    bmp_memset_fn(*crt_row, crtn, 0, endn - crtn);\n    crt_row += inc;\n    crtn = 0;\n    result += 1;\n    if (crt_row == end_row)\n    {\n      break;\n    }\n  }\n\n  if (crt_row != end_row)\n  {\n    bmp_memset_fn(*crt_row, crtn, 0, dcrtn - crtn);\n  }\n  *result_ref = result;\n  *crt_row_ref = crt_row;\n  *crtn_ref = crtn;\n  *dcrtn_ref = dcrtn;\n  *b1_ref = b1;\n  *b2_ref = b2;\n  *ch_ref = ch;\n}\n\n",
            "calle": [
                "bmp_memset_fn",
                "getc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "result_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const result_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crt_row_ref",
                        "type": "png_bytepp * const",
                        "definition": [
                            "png_bytepp * const crt_row_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crtn_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const crtn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dcrtn_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const dcrtn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b1_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const b1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b2_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const b2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const ch_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end_row",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp end_row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inc",
                        "type": "int",
                        "definition": [
                            "int inc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "endn",
                        "type": "size_t",
                        "definition": [
                            "size_t endn"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "size_t",
                        "definition": [
                            "size_t result = *result_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crt_row",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp crt_row = *crt_row_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crtn",
                        "type": "size_t",
                        "definition": [
                            "size_t crtn = *crtn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dcrtn",
                        "type": "size_t",
                        "definition": [
                            "size_t dcrtn = *dcrtn_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b1",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int b1 = *b1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b2",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int b2 = *b2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "int",
                        "definition": [
                            "int ch = *ch_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pngx_sig_is_gif",
            "header": "int pngx_sig_is_gif(png_bytep sig, size_t sig_size, png_const_charpp fmt_name_ptr, png_const_charpp fmt_long_name_ptr)",
            "params": [
                "png_bytep sig",
                "size_t sig_size",
                "png_const_charpp fmt_name_ptr",
                "png_const_charpp fmt_long_name_ptr"
            ],
            "definition": "int pngx_sig_is_gif(png_bytep sig, size_t sig_size, png_const_charpp fmt_name_ptr, png_const_charpp fmt_long_name_ptr)\n{\n  if (sig_size < (6 + 7))\n  {\n    return -1;\n  }\n  if ((memcmp(sig, gif_sig_gif87a, 6) != 0) && (memcmp(sig, gif_sig_gif89a, 6) != 0))\n  {\n    return 0;\n  }\n  if (fmt_name_ptr != 0)\n  {\n    *fmt_name_ptr = gif_fmt_name;\n  }\n  if (fmt_long_name_ptr != 0)\n  {\n    *fmt_long_name_ptr = gif_fmt_long_name;\n  }\n  return 1;\n}\n\n",
            "calle": [
                "memcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "sig",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep sig"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sig_size",
                        "type": "size_t",
                        "definition": [
                            "size_t sig_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmt_name_ptr",
                        "type": "png_const_charpp",
                        "definition": [
                            "png_const_charpp fmt_name_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmt_long_name_ptr",
                        "type": "png_const_charpp",
                        "definition": [
                            "png_const_charpp fmt_long_name_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "gif_sig_gif87a",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "gif_sig_gif89a",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "gif_fmt_name",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "gif_fmt_long_name",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pngx_read_gif",
            "header": "int pngx_read_gif(png_structp png_ptr, png_infop info_ptr, FILE *stream)",
            "params": [
                "png_structp png_ptr",
                "png_infop info_ptr",
                "FILE *stream"
            ],
            "definition": "int pngx_read_gif(png_structp png_ptr, png_infop info_ptr, FILE *stream)\n{\n  struct GIFScreen screen;\n  struct GIFImage image;\n  struct GIFExtension ext;\n  struct GIFGraphicCtlExt graphicExt;\n  int blockCode;\n  unsigned char *colorTable;\n  unsigned int numColors;\n  unsigned int transparent;\n  unsigned int numImages;\n  png_uint_32 width;\n  png_uint_32 height;\n  png_bytepp row_pointers;\n  GIFError = pngx_gif_error;\n  GIFWarning = pngx_gif_warning;\n  err_png_ptr = png_ptr;\n  err_gif_image_ptr = 0;\n  err_gif_ext_ptr = 0;\n  GIFReadScreen(&screen, stream);\n  width = screen.Width;\n  height = screen.Height;\n  png_set_IHDR(png_ptr, info_ptr, width, height, 8, 2 | 1, 0, 0, 0);\n  row_pointers = pngx_malloc_rows(png_ptr, info_ptr, (int) screen.Background);\n  GIFInitImage(&image, &screen, row_pointers);\n  err_gif_image_ptr = &image;\n  GIFInitExtension(&ext, &screen, 256);\n  err_gif_ext_ptr = &ext;\n  numImages = 0;\n  transparent = (unsigned int) (-1);\n  for (;;)\n  {\n    helper_pngx_read_gif_1(&image, &blockCode, &transparent, &numImages, png_ptr, info_ptr, stream, ext, graphicExt, colorTable, numColors);\n  }\n\n  if (image.Rows != 0)\n  {\n    png_error(png_ptr, \"No image in GIF file\");\n  }\n  GIFDestroyImage(&image);\n  GIFDestroyExtension(&ext);\n  return numImages;\n}\n\n",
            "calle": [
                "GIFDestroyExtension",
                "GIFDestroyImage",
                "GIFInitExtension",
                "GIFInitImage",
                "GIFReadScreen",
                "helper_pngx_read_gif_1",
                "png_error",
                "png_set_IHDR",
                "pngx_gif_error",
                "pngx_gif_warning",
                "pngx_malloc_rows"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_infop",
                        "definition": [
                            "png_infop info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "screen",
                        "type": "struct GIFScreen",
                        "definition": [
                            "struct GIFScreen screen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "image",
                        "type": "struct GIFImage",
                        "definition": [
                            "struct GIFImage image"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ext",
                        "type": "struct GIFExtension",
                        "definition": [
                            "struct GIFExtension ext"
                        ]
                    },
                    {
                        "path": null,
                        "name": "graphicExt",
                        "type": "struct GIFGraphicCtlExt",
                        "definition": [
                            "struct GIFGraphicCtlExt graphicExt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blockCode",
                        "type": "int",
                        "definition": [
                            "int blockCode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "colorTable",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *colorTable"
                        ]
                    },
                    {
                        "path": null,
                        "name": "numColors",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int numColors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "transparent",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int transparent"
                        ]
                    },
                    {
                        "path": null,
                        "name": "numImages",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int numImages"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_pointers",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp row_pointers"
                        ]
                    },
                    {
                        "path": null,
                        "name": "GIFError",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "GIFWarning",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "err_png_ptr",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pngx_gif_error",
            "header": "",
            "params": [
                "const char *msg"
            ],
            "definition": "static void pngx_gif_error(const char *msg)\n{\n  if (err_gif_image_ptr != 0)\n  {\n    GIFDestroyImage(err_gif_image_ptr);\n  }\n  if (err_gif_ext_ptr != 0)\n  {\n    GIFDestroyExtension(err_gif_ext_ptr);\n  }\n  png_error(err_png_ptr, msg);\n}\n\n",
            "calle": [
                "GIFDestroyExtension",
                "GIFDestroyImage",
                "png_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "msg",
                        "type": "const char *",
                        "definition": [
                            "const char *msg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err_png_ptr",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pngx_gif_warning",
            "header": "",
            "params": [
                "const char *msg"
            ],
            "definition": "static void pngx_gif_warning(const char *msg)\n{\n  png_warning(err_png_ptr, msg);\n}\n\n",
            "calle": [
                "png_warning"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "msg",
                        "type": "const char *",
                        "definition": [
                            "const char *msg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err_png_ptr",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pngx_set_gif_palette",
            "header": "",
            "params": [
                "png_structp png_ptr",
                "png_infop info_ptr",
                "unsigned char *color_table",
                "unsigned int num_colors"
            ],
            "definition": "static void pngx_set_gif_palette(png_structp png_ptr, png_infop info_ptr, unsigned char *color_table, unsigned int num_colors)\n{\n  png_color palette[256];\n  unsigned int i;\n  (void) 0;\n  (void) 0;\n  for (i = 0; i < num_colors; i += 1)\n  {\n    palette[i].red = color_table[3 * i];\n    palette[i].green = color_table[(3 * i) + 1];\n    palette[i].blue = color_table[(3 * i) + 2];\n  }\n\n  png_set_PLTE(png_ptr, info_ptr, palette, (int) num_colors);\n}\n\n",
            "calle": [
                "png_set_PLTE"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_infop",
                        "definition": [
                            "png_infop info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color_table",
                        "type": "unsigned char *",
                        "definition": [
                            "unsigned char *color_table"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_colors",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int num_colors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "palette",
                        "type": "png_color [256]",
                        "definition": [
                            "png_color palette[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pngx_set_gif_transparent",
            "header": "",
            "params": [
                "png_structp png_ptr",
                "png_infop info_ptr",
                "unsigned int transparent"
            ],
            "definition": "static void pngx_set_gif_transparent(png_structp png_ptr, png_infop info_ptr, unsigned int transparent)\n{\n  png_byte trans[256];\n  unsigned int i;\n  (void) 0;\n  for (i = 0; i < transparent; i += 1)\n  {\n    trans[i] = 255;\n  }\n\n  trans[transparent] = 0;\n  png_set_tRNS(png_ptr, info_ptr, trans, ((int) transparent) + 1, 0);\n}\n\n",
            "calle": [
                "png_set_tRNS"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_infop",
                        "definition": [
                            "png_infop info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "transparent",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int transparent"
                        ]
                    },
                    {
                        "path": null,
                        "name": "trans",
                        "type": "png_byte [256]",
                        "definition": [
                            "png_byte trans[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_pngx_read_gif_1",
            "header": "",
            "params": [
                "struct GIFImage * const image_ref",
                "int * const blockCode_ref",
                "unsigned int * const transparent_ref",
                "unsigned int * const numImages_ref",
                "png_structp png_ptr",
                "png_infop info_ptr",
                "FILE * const stream",
                "struct GIFExtension ext",
                "struct GIFGraphicCtlExt graphicExt",
                "unsigned char * const colorTable",
                "unsigned int numColors"
            ],
            "definition": "void helper_pngx_read_gif_1(struct GIFImage * const image_ref, int * const blockCode_ref, unsigned int * const transparent_ref, unsigned int * const numImages_ref, png_structp png_ptr, png_infop info_ptr, FILE * const stream, struct GIFExtension ext, struct GIFGraphicCtlExt graphicExt, unsigned char * const colorTable, unsigned int numColors)\n{\n  struct GIFImage image = *image_ref;\n  int blockCode = *blockCode_ref;\n  unsigned int transparent = *transparent_ref;\n  unsigned int numImages = *numImages_ref;\n  blockCode = GIFReadNextBlock(&image, &ext, stream);\n  if (blockCode == 0x2c)\n  {\n    if (image.Rows != 0)\n    {\n      if (image.InterlaceFlag)\n      {\n        pngx_set_interlace_type(png_ptr, info_ptr, 1);\n      }\n      GIFGetColorTable(&colorTable, &numColors, &image);\n      pngx_set_gif_palette(png_ptr, info_ptr, colorTable, numColors);\n      if (transparent < 256)\n      {\n        pngx_set_gif_transparent(png_ptr, info_ptr, transparent);\n      }\n      image.Rows = 0;\n    }\n    numImages += 1;\n  }\n  else\n    if (blockCode == 0x21)\n  {\n    if (ext.Label == 0xf9)\n    {\n      GIFGetGraphicCtl(&graphicExt, &ext);\n      if ((image.Rows != 0) && graphicExt.TransparentFlag)\n      {\n        if (transparent >= 256)\n        {\n          transparent = graphicExt.Transparent;\n        }\n      }\n    }\n  }\n  else\n    if (blockCode == 0x3b)\n  {\n    break;\n  }\n  *image_ref = image;\n  *blockCode_ref = blockCode;\n  *transparent_ref = transparent;\n  *numImages_ref = numImages;\n}\n\n",
            "calle": [
                "GIFGetColorTable",
                "GIFGetGraphicCtl",
                "GIFReadNextBlock",
                "pngx_set_gif_palette",
                "pngx_set_gif_transparent",
                "pngx_set_interlace_type"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct GIFImage",
                        "type": "struct GIFImage * const",
                        "definition": [
                            "struct GIFImage * const image_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blockCode_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const blockCode_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "transparent_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const transparent_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "numImages_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const numImages_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_infop",
                        "definition": [
                            "png_infop info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ext",
                        "type": "struct GIFExtension",
                        "definition": [
                            "struct GIFExtension ext"
                        ]
                    },
                    {
                        "path": null,
                        "name": "graphicExt",
                        "type": "struct GIFGraphicCtlExt",
                        "definition": [
                            "struct GIFGraphicCtlExt graphicExt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "colorTable",
                        "type": "unsigned char * const",
                        "definition": [
                            "unsigned char * const colorTable"
                        ]
                    },
                    {
                        "path": null,
                        "name": "numColors",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int numColors"
                        ]
                    },
                    {
                        "path": null,
                        "name": "image",
                        "type": "struct GIFImage",
                        "definition": [
                            "struct GIFImage image = *image_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blockCode",
                        "type": "int",
                        "definition": [
                            "int blockCode = *blockCode_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "transparent",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int transparent = *transparent_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "numImages",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int numImages = *numImages_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pngx_sig_is_jpeg",
            "header": "int pngx_sig_is_jpeg(png_bytep sig, size_t sig_size, png_const_charpp fmt_name_ptr, png_const_charpp fmt_long_name_ptr)",
            "params": [
                "png_bytep sig",
                "size_t sig_size",
                "png_const_charpp fmt_name_ptr",
                "png_const_charpp fmt_long_name_ptr"
            ],
            "definition": "int pngx_sig_is_jpeg(png_bytep sig, size_t sig_size, png_const_charpp fmt_name_ptr, png_const_charpp fmt_long_name_ptr)\n{\n  const char *fmt;\n  unsigned int fmt_idx = 0;\n  unsigned int marker;\n  int result;\n  if (sig_size < 12)\n  {\n    return -1;\n  }\n  if (((sig[0] == 0xff) && (sig[1] == 0xd8)) && (sig[2] == 0xff))\n  {\n    marker = 0xff00U | sig[3];\n    if (((marker >= 0xffc0U) && (marker <= 0xffcfU)) || ((marker >= 0xffdaU) && (marker <= 0xfffeU)))\n    {\n      fmt_idx = \"JPEG\";\n      result = 1;\n    }\n    else\n      return 0;\n  }\n  else\n    if ((memcmp(sig, jpeg_sig_jp2, 12) == 0) || (memcmp(sig, jpeg_sig_jpc, 4) == 0))\n  {\n    fmt_idx = \"JPEG-2000\";\n    result = 2;\n  }\n  else\n    if ((memcmp(sig, jpeg_sig_jng, 8) == 0) || (memcmp(sig, jpeg_sig_jng_jhdr, 8) == 0))\n  {\n    fmt_idx = \"JNG\";\n    result = 3;\n  }\n  else\n    return 0;\n  if (fmt_name_ptr != 0)\n  {\n    *fmt_name_ptr = &fmt[fmt_idx];\n  }\n  if (fmt_long_name_ptr != 0)\n  {\n    *fmt_long_name_ptr = &fmt[fmt_idx];\n  }\n  return result;\n}\n\n",
            "calle": [
                "memcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "sig",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep sig"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sig_size",
                        "type": "size_t",
                        "definition": [
                            "size_t sig_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmt_name_ptr",
                        "type": "png_const_charpp",
                        "definition": [
                            "png_const_charpp fmt_name_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmt_long_name_ptr",
                        "type": "png_const_charpp",
                        "definition": [
                            "png_const_charpp fmt_long_name_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmt",
                        "type": "const char *",
                        "definition": [
                            "const char *fmt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmt_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int fmt_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "marker",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int marker"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "int",
                        "definition": [
                            "int result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "jpeg_sig_jp2",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "jpeg_sig_jpc",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "jpeg_sig_jng",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "jpeg_sig_jng_jhdr",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pngx_read_jpeg",
            "header": "int pngx_read_jpeg(png_structp png_ptr, png_infop info_ptr, FILE *stream)",
            "params": [
                "png_structp png_ptr",
                "png_infop info_ptr",
                "FILE *stream"
            ],
            "definition": "int pngx_read_jpeg(png_structp png_ptr, png_infop info_ptr, FILE *stream)\n{\n  png_byte buf[12];\n  int sig_code;\n  if (fread(buf, 12, 1, stream) != 1)\n  {\n    return 0;\n  }\n  sig_code = pngx_sig_is_jpeg(buf, 12, 0, 0);\n  switch (sig_code)\n  {\n    case 1:\n    {\n      png_error(png_ptr, \"JPEG decoding is not supported\");\n      break;\n    }\n\n    case 2:\n    {\n      png_error(png_ptr, \"JPEG-2000 decoding is not supported\");\n      break;\n    }\n\n    case 3:\n    {\n      png_error(png_ptr, \"JNG (JPEG) decoding is not supported\");\n      break;\n    }\n\n  }\n\n  if (info_ptr == 0)\n  {\n    return 0;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "fread",
                "png_error",
                "pngx_sig_is_jpeg"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_infop",
                        "definition": [
                            "png_infop info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "png_byte [12]",
                        "definition": [
                            "png_byte buf[12]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sig_code",
                        "type": "int",
                        "definition": [
                            "int sig_code"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pngx_sig_is_pnm",
            "header": "int pngx_sig_is_pnm(png_bytep sig, size_t sig_size, png_const_charpp fmt_name_ptr, png_const_charpp fmt_long_name_ptr)",
            "params": [
                "png_bytep sig",
                "size_t sig_size",
                "png_const_charpp fmt_name_ptr",
                "png_const_charpp fmt_long_name_ptr"
            ],
            "definition": "int pngx_sig_is_pnm(png_bytep sig, size_t sig_size, png_const_charpp fmt_name_ptr, png_const_charpp fmt_long_name_ptr)\n{\n  static const char *fmt_names[] = {pbm_fmt_name, pgm_fmt_name, ppm_fmt_name, pbm_fmt_name, pgm_fmt_name, ppm_fmt_name, pam_fmt_name};\n  static const char *fmt_long_names[] = {pbm_fmt_long_name, pgm_fmt_long_name, ppm_fmt_long_name, pbm_fmt_long_name, pgm_fmt_long_name, ppm_fmt_long_name, pam_fmt_long_name};\n  if (sig_size < 4)\n  {\n    return -1;\n  }\n  if (((sig[0] != 'P') || (sig[1] < '1')) || (sig[1] > '7'))\n  {\n    return 0;\n  }\n  if (((((sig[2] != ' ') && (sig[2] != '\\t')) && (sig[2] != '\\n')) && (sig[2] != '\\r')) && (sig[2] != '#'))\n  {\n    return 0;\n  }\n  if (fmt_name_ptr != 0)\n  {\n    *fmt_name_ptr = fmt_names[sig[1] - '1'];\n  }\n  if (fmt_long_name_ptr != 0)\n  {\n    *fmt_long_name_ptr = fmt_long_names[sig[1] - '1'];\n  }\n  return 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "sig",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep sig"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sig_size",
                        "type": "size_t",
                        "definition": [
                            "size_t sig_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmt_name_ptr",
                        "type": "png_const_charpp",
                        "definition": [
                            "png_const_charpp fmt_name_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmt_long_name_ptr",
                        "type": "png_const_charpp",
                        "definition": [
                            "png_const_charpp fmt_long_name_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmt_names",
                        "type": "const char *[]",
                        "definition": [
                            "static const char *fmt_names[] = {pbm_fmt_name, pgm_fmt_name, ppm_fmt_name, pbm_fmt_name, pgm_fmt_name, ppm_fmt_name, pam_fmt_name}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmt_long_names",
                        "type": "const char *[]",
                        "definition": [
                            "static const char *fmt_long_names[] = {pbm_fmt_long_name, pgm_fmt_long_name, ppm_fmt_long_name, pbm_fmt_long_name, pgm_fmt_long_name, ppm_fmt_long_name, pam_fmt_long_name}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pbm_fmt_name",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "pgm_fmt_name",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "ppm_fmt_name",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "pam_fmt_name",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "pbm_fmt_long_name",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "pgm_fmt_long_name",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "ppm_fmt_long_name",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "pam_fmt_long_name",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pngx_read_pnm",
            "header": "int pngx_read_pnm(png_structp png_ptr, png_infop info_ptr, FILE *stream)",
            "params": [
                "png_structp png_ptr",
                "png_infop info_ptr",
                "FILE *stream"
            ],
            "definition": "int pngx_read_pnm(png_structp png_ptr, png_infop info_ptr, FILE *stream)\n{\n  pnm_struct pnminfo;\n  unsigned int format;\n  unsigned int depth;\n  unsigned int width;\n  unsigned int height;\n  unsigned int maxval;\n  unsigned int max_width;\n  unsigned int num_samples;\n  unsigned int sample_size;\n  unsigned int *pnmrow;\n  unsigned int pnmrow_idx = 0;\n  size_t row_size;\n  png_bytepp row_pointers;\n  png_color_8 sig_bit;\n  unsigned int i;\n  unsigned int j;\n  int failed;\n  int overflow;\n  if (pnm_fget_header(&pnminfo, stream) != 1)\n  {\n    return 0;\n  }\n  format = pnminfo.format;\n  depth = pnminfo.depth;\n  width = pnminfo.width;\n  height = pnminfo.height;\n  maxval = pnminfo.maxval;\n  if (format > PNM_P6)\n  {\n    png_error(png_ptr, \"Can't handle PNM formats newer than PPM (\\\"P6\\\")\");\n  }\n  max_width = ((sizeof(size_t)) <= (sizeof(unsigned int))) ? ((4294967295U / (sizeof(unsigned int))) / depth) : (4294967295U);\n  if (max_width > 0x7fffffffU)\n  {\n    max_width = 0x7fffffffU;\n  }\n  if (width > max_width)\n  {\n    png_error(png_ptr, \"Can't handle exceedingly large PNM dimensions\");\n  }\n  sample_size = 1;\n  row_size = (num_samples = depth * width);\n  if (maxval > 65535)\n  {\n    png_error(png_ptr, \"Can't handle PNM samples larger than 16 bits\");\n  }\n  else\n    if (maxval > 255)\n  {\n    sample_size = 2;\n    row_size *= 2;\n  }\n  png_set_IHDR(png_ptr, info_ptr, width, height, (maxval <= 255) ? (8) : (16), (depth == 1) ? (0) : (2), 0, 0, 0);\n  for (i = 1, j = 2; (j - 1) < maxval; i += 1, j <<= 1)\n  {\n  }\n\n  if ((j - 1) != maxval)\n  {\n    png_warning(png_ptr, \"Possibly inexact sample conversion from PNM to PNG\");\n  }\n  else\n    if (((i % 8) != 0) && ((depth > 1) || ((8 % i) != 0)))\n  {\n    sig_bit.red = (sig_bit.green = (sig_bit.blue = (sig_bit.gray = (png_byte) i)));\n    sig_bit.alpha = 0;\n    png_set_sBIT(png_ptr, info_ptr, &sig_bit);\n  }\n  row_pointers = pngx_malloc_rows(png_ptr, info_ptr, -1);\n  if ((format >= PNM_P4) && ((maxval == 255) || (maxval == 65535)))\n  {\n    pnmrow_idx = 0;\n  }\n  else\n    pnmrow_idx = (unsigned int *) png_malloc(png_ptr, num_samples * (sizeof(unsigned int)));\n  failed = 0;\n  overflow = 0;\n  if ((&pnmrow[pnmrow_idx]) != 0)\n  {\n    helper_pngx_read_pnm_1(&row_pointers, &i, &j, &failed, &overflow, stream, pnminfo, height, maxval, num_samples, pnmrow, pnmrow_idx);\n  }\n  else\n  {\n    for (i = 0; i < height; i += 1)\n    {\n      if (pnm_fget_bytes(&pnminfo, row_pointers[i], sample_size, 1, stream) <= 0)\n      {\n        failed = 1;\n        break;\n      }\n    }\n\n  }\n  for (; i < height; i += 1)\n  {\n    memset(row_pointers[i], 0, row_size);\n  }\n\n  if ((&pnmrow[pnmrow_idx]) != 0)\n  {\n    png_free(png_ptr, pnmrow);\n  }\n  if (overflow)\n  {\n    png_warning(png_ptr, \"Overflow in PNM samples\");\n  }\n  if (failed)\n  {\n    png_error(png_ptr, \"Error in PNM image file\");\n  }\n  else\n    if (!pnm_fpeek_eof(&pnminfo, stream))\n  {\n    png_warning(png_ptr, \"Extraneous data found after PNM image\");\n  }\n  return 1;\n}\n\n",
            "calle": [
                "helper_pngx_read_pnm_1",
                "memset",
                "png_error",
                "png_free",
                "png_malloc",
                "png_set_IHDR",
                "png_set_sBIT",
                "png_warning",
                "pngx_malloc_rows",
                "pnm_fget_bytes",
                "pnm_fget_header",
                "pnm_fpeek_eof"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_infop",
                        "definition": [
                            "png_infop info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pnminfo",
                        "type": "pnm_struct",
                        "definition": [
                            "pnm_struct pnminfo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "format",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int format"
                        ]
                    },
                    {
                        "path": null,
                        "name": "depth",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxval",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int maxval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_width",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int max_width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_samples",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int num_samples"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_size",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sample_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pnmrow",
                        "type": "unsigned int *",
                        "definition": [
                            "unsigned int *pnmrow"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pnmrow_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pnmrow_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_size",
                        "type": "size_t",
                        "definition": [
                            "size_t row_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_pointers",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp row_pointers"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sig_bit",
                        "type": "png_color_8",
                        "definition": [
                            "png_color_8 sig_bit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "failed",
                        "type": "int",
                        "definition": [
                            "int failed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "overflow",
                        "type": "int",
                        "definition": [
                            "int overflow"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pnm_fpeek_eof",
            "header": "",
            "params": [
                "pnm_struct *pnm_ptr",
                "FILE *stream"
            ],
            "definition": "static int pnm_fpeek_eof(pnm_struct *pnm_ptr, FILE *stream)\n{\n  int ch;\n  if ((pnm_ptr->format >= PNM_P1) && (pnm_ptr->format <= PNM_P3))\n  {\n    do\n    {\n      ch = getc(stream);\n      if (ch == '#')\n      {\n        do\n        {\n          ch = getc(stream);\n        }\n        while (((ch != EOF) && (ch != '\\n')) && (ch != '\\r'));\n      }\n      if (ch == EOF)\n      {\n        return 1;\n      }\n    }\n    while ((((ch == ' ') || (ch == '\\t')) || (ch == '\\n')) || (ch == '\\r'));\n  }\n  else\n  {\n    ch = getc(stream);\n    if (ch == EOF)\n    {\n      return 1;\n    }\n  }\n  ungetc(ch, stream);\n  return 0;\n}\n\n",
            "calle": [
                "getc",
                "ungetc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "pnm_ptr",
                        "type": "pnm_struct *",
                        "definition": [
                            "pnm_struct *pnm_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch",
                        "type": "int",
                        "definition": [
                            "int ch"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_pngx_read_pnm_1",
            "header": "",
            "params": [
                "png_bytepp * const row_pointers_ref",
                "unsigned int * const i_ref",
                "unsigned int * const j_ref",
                "int * const failed_ref",
                "int * const overflow_ref",
                "FILE * const stream",
                "pnm_struct pnminfo",
                "unsigned int height",
                "unsigned int maxval",
                "unsigned int num_samples",
                "unsigned int * const pnmrow",
                "unsigned int pnmrow_idx"
            ],
            "definition": "void helper_pngx_read_pnm_1(png_bytepp * const row_pointers_ref, unsigned int * const i_ref, unsigned int * const j_ref, int * const failed_ref, int * const overflow_ref, FILE * const stream, pnm_struct pnminfo, unsigned int height, unsigned int maxval, unsigned int num_samples, unsigned int * const pnmrow, unsigned int pnmrow_idx)\n{\n  png_bytepp row_pointers = *row_pointers_ref;\n  unsigned int i = *i_ref;\n  unsigned int j = *j_ref;\n  int failed = *failed_ref;\n  int overflow = *overflow_ref;\n  for (i = 0; i < height; i += 1)\n  {\n    helper_helper_pngx_read_pnm_1_1(&row_pointers, &i, &j, &failed, &overflow, stream, pnminfo, maxval, num_samples, pnmrow, pnmrow_idx);\n  }\n\n  *row_pointers_ref = row_pointers;\n  *i_ref = i;\n  *j_ref = j;\n  *failed_ref = failed;\n  *overflow_ref = overflow;\n}\n\n",
            "calle": [
                "helper_helper_pngx_read_pnm_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "row_pointers_ref",
                        "type": "png_bytepp * const",
                        "definition": [
                            "png_bytepp * const row_pointers_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "failed_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const failed_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "overflow_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const overflow_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pnminfo",
                        "type": "pnm_struct",
                        "definition": [
                            "pnm_struct pnminfo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxval",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int maxval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_samples",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int num_samples"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pnmrow",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const pnmrow"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pnmrow_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pnmrow_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_pointers",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp row_pointers = *row_pointers_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "failed",
                        "type": "int",
                        "definition": [
                            "int failed = *failed_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "overflow",
                        "type": "int",
                        "definition": [
                            "int overflow = *overflow_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_pngx_read_pnm_1_1",
            "header": "",
            "params": [
                "png_bytepp * const row_pointers_ref",
                "unsigned int * const i_ref",
                "unsigned int * const j_ref",
                "int * const failed_ref",
                "int * const overflow_ref",
                "FILE * const stream",
                "pnm_struct pnminfo",
                "unsigned int maxval",
                "unsigned int num_samples",
                "unsigned int * const pnmrow",
                "unsigned int pnmrow_idx"
            ],
            "definition": "void helper_helper_pngx_read_pnm_1_1(png_bytepp * const row_pointers_ref, unsigned int * const i_ref, unsigned int * const j_ref, int * const failed_ref, int * const overflow_ref, FILE * const stream, pnm_struct pnminfo, unsigned int maxval, unsigned int num_samples, unsigned int * const pnmrow, unsigned int pnmrow_idx)\n{\n  png_bytepp row_pointers = *row_pointers_ref;\n  unsigned int i = *i_ref;\n  unsigned int j = *j_ref;\n  int failed = *failed_ref;\n  int overflow = *overflow_ref;\n  if (pnm_fget_values(&pnminfo, pnmrow, 1, stream) <= 0)\n  {\n    failed = 1;\n  }\n  if (maxval <= 255)\n  {\n    for (j = 0; j < num_samples; j += 1)\n    {\n      unsigned int val = pnmrow[j + pnmrow_idx];\n      if (val > maxval)\n      {\n        val = 255;\n        overflow = 1;\n      }\n      else\n        if (maxval != 255)\n      {\n        val = ((val * 255) + (maxval / 2)) / maxval;\n      }\n      row_pointers[i][j] = (png_byte) val;\n    }\n\n  }\n  else\n  {\n    for (j = 0; j < num_samples; j += 1)\n    {\n      png_uint_32 val = pnmrow[j + pnmrow_idx];\n      if (val > maxval)\n      {\n        val = 65535;\n        overflow = 1;\n      }\n      else\n        if (maxval != 65535)\n      {\n        val = ((val * 65535) + (maxval / 2)) / maxval;\n      }\n      row_pointers[i][2 * j] = (png_byte) (val >> 8);\n      row_pointers[i][(2 * j) + 1] = (png_byte) (val & 0xff);\n    }\n\n  }\n  if (failed)\n  {\n    break;\n  }\n  *row_pointers_ref = row_pointers;\n  *i_ref = i;\n  *j_ref = j;\n  *failed_ref = failed;\n  *overflow_ref = overflow;\n}\n\n",
            "calle": [
                "pnm_fget_values"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "row_pointers_ref",
                        "type": "png_bytepp * const",
                        "definition": [
                            "png_bytepp * const row_pointers_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "failed_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const failed_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "overflow_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const overflow_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pnminfo",
                        "type": "pnm_struct",
                        "definition": [
                            "pnm_struct pnminfo"
                        ]
                    },
                    {
                        "path": null,
                        "name": "maxval",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int maxval"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_samples",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int num_samples"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pnmrow",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const pnmrow"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pnmrow_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pnmrow_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_pointers",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp row_pointers = *row_pointers_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "failed",
                        "type": "int",
                        "definition": [
                            "int failed = *failed_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "overflow",
                        "type": "int",
                        "definition": [
                            "int overflow = *overflow_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "unsigned int",
                        "definition": [
                            "png_uint_32 val = pnmrow[j + pnmrow_idx]",
                            "unsigned int val = pnmrow[j + pnmrow_idx]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pngx_sig_is_tiff",
            "header": "int pngx_sig_is_tiff(png_bytep sig, size_t sig_size, png_const_charpp fmt_name_ptr, png_const_charpp fmt_long_name_ptr)",
            "params": [
                "png_bytep sig",
                "size_t sig_size",
                "png_const_charpp fmt_name_ptr",
                "png_const_charpp fmt_long_name_ptr"
            ],
            "definition": "int pngx_sig_is_tiff(png_bytep sig, size_t sig_size, png_const_charpp fmt_name_ptr, png_const_charpp fmt_long_name_ptr)\n{\n  if (sig_size < 8)\n  {\n    return -1;\n  }\n  if ((memcmp(sig, minitiff_sig_m, 4) != 0) && (memcmp(sig, minitiff_sig_i, 4) != 0))\n  {\n    return 0;\n  }\n  if (fmt_name_ptr != 0)\n  {\n    *fmt_name_ptr = tiff_fmt_name;\n  }\n  if (fmt_long_name_ptr != 0)\n  {\n    *fmt_long_name_ptr = tiff_fmt_long_name;\n  }\n  return 1;\n}\n\n",
            "calle": [
                "memcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "sig",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep sig"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sig_size",
                        "type": "size_t",
                        "definition": [
                            "size_t sig_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmt_name_ptr",
                        "type": "png_const_charpp",
                        "definition": [
                            "png_const_charpp fmt_name_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmt_long_name_ptr",
                        "type": "png_const_charpp",
                        "definition": [
                            "png_const_charpp fmt_long_name_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "minitiff_sig_m",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "minitiff_sig_i",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "tiff_fmt_name",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "tiff_fmt_long_name",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pngx_read_tiff",
            "header": "int pngx_read_tiff(png_structp png_ptr, png_infop info_ptr, FILE *stream)",
            "params": [
                "png_structp png_ptr",
                "png_infop info_ptr",
                "FILE *stream"
            ],
            "definition": "int pngx_read_tiff(png_structp png_ptr, png_infop info_ptr, FILE *stream)\n{\n  struct minitiff_info tiff_info;\n  unsigned int width;\n  unsigned int height;\n  unsigned int pixel_size;\n  unsigned int sample_depth;\n  unsigned int sample_max;\n  int color_type;\n  int sample_overflow;\n  png_bytepp row_pointers;\n  png_bytep row;\n  unsigned int i;\n  unsigned int j;\n  unsigned int k;\n  err_png_ptr = png_ptr;\n  num_extra_images = 0;\n  minitiff_init_info(&tiff_info);\n  tiff_info.error_handler = pngx_tiff_error;\n  tiff_info.warning_handler = pngx_tiff_warning;\n  minitiff_read_info(&tiff_info, stream);\n  minitiff_validate_info(&tiff_info);\n  width = (unsigned int) tiff_info.width;\n  height = (unsigned int) tiff_info.height;\n  pixel_size = tiff_info.samples_per_pixel;\n  sample_depth = tiff_info.bits_per_sample;\n  switch (pixel_size)\n  {\n    case 1:\n    {\n      color_type = 0;\n      break;\n    }\n\n    case 2:\n    {\n      color_type = 4;\n      break;\n    }\n\n    case 3:\n    {\n      color_type = 2;\n      break;\n    }\n\n    case 4:\n    {\n      color_type = 2 | 4;\n      break;\n    }\n\n    default:\n    {\n      png_error(png_ptr, \"Unsupported TIFF color space\");\n      return 0;\n    }\n\n  }\n\n  if (sample_depth > 16)\n  {\n    png_error(png_ptr, \"Unsupported TIFF sample depth\");\n  }\n  sample_max = (1 << sample_depth) - 1;\n  sample_overflow = 0;\n  png_set_IHDR(png_ptr, info_ptr, width, height, (sample_depth <= 8) ? (8) : (16), color_type, 0, 0, 0);\n  row_pointers = pngx_malloc_rows(png_ptr, info_ptr, 0);\n  if (sample_depth <= 8)\n  {\n    helper_pngx_read_tiff_1(&sample_overflow, &row, &i, &j, stream, tiff_info, width, height, pixel_size, sample_depth, sample_max, row_pointers);\n  }\n  else\n  {\n    helper_pngx_read_tiff_2(&sample_overflow, &row, &i, &j, &k, stream, tiff_info, width, height, pixel_size, sample_depth, sample_max, row_pointers);\n  }\n  if (sample_overflow)\n  {\n    png_warning(png_ptr, \"Overflow in TIFF samples\");\n  }\n  minitiff_destroy_info(&tiff_info);\n  return 1 + num_extra_images;\n}\n\n",
            "calle": [
                "helper_pngx_read_tiff_1",
                "helper_pngx_read_tiff_2",
                "minitiff_destroy_info",
                "minitiff_init_info",
                "minitiff_read_info",
                "minitiff_validate_info",
                "png_error",
                "png_set_IHDR",
                "png_warning",
                "pngx_malloc_rows",
                "pngx_tiff_error",
                "pngx_tiff_warning"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_infop",
                        "definition": [
                            "png_infop info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tiff_info",
                        "type": "struct minitiff_info",
                        "definition": [
                            "struct minitiff_info tiff_info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pixel_size",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pixel_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_depth",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sample_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_max",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sample_max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color_type",
                        "type": "int",
                        "definition": [
                            "int color_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_overflow",
                        "type": "int",
                        "definition": [
                            "int sample_overflow"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_pointers",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp row_pointers"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err_png_ptr",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "num_extra_images",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pngx_tiff_error",
            "header": "",
            "params": [
                "const char *msg"
            ],
            "definition": "static void pngx_tiff_error(const char *msg)\n{\n  png_error(err_png_ptr, msg);\n}\n\n",
            "calle": [
                "png_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "msg",
                        "type": "const char *",
                        "definition": [
                            "const char *msg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err_png_ptr",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pngx_tiff_warning",
            "header": "",
            "params": [
                "const char *msg"
            ],
            "definition": "static void pngx_tiff_warning(const char *msg)\n{\n  if (strstr(msg, \"multi-image\") != 0)\n  {\n    num_extra_images += 1;\n  }\n}\n\n",
            "calle": [
                "strstr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "msg",
                        "type": "const char *",
                        "definition": [
                            "const char *msg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_extra_images",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_pngx_read_tiff_1",
            "header": "",
            "params": [
                "int * const sample_overflow_ref",
                "png_bytep * const row_ref",
                "unsigned int * const i_ref",
                "unsigned int * const j_ref",
                "FILE * const stream",
                "struct minitiff_info tiff_info",
                "unsigned int width",
                "unsigned int height",
                "unsigned int pixel_size",
                "unsigned int sample_depth",
                "unsigned int sample_max",
                "png_bytepp row_pointers"
            ],
            "definition": "void helper_pngx_read_tiff_1(int * const sample_overflow_ref, png_bytep * const row_ref, unsigned int * const i_ref, unsigned int * const j_ref, FILE * const stream, struct minitiff_info tiff_info, unsigned int width, unsigned int height, unsigned int pixel_size, unsigned int sample_depth, unsigned int sample_max, png_bytepp row_pointers)\n{\n  int sample_overflow = *sample_overflow_ref;\n  png_bytep row = *row_ref;\n  unsigned int i = *i_ref;\n  unsigned int j = *j_ref;\n  for (i = 0; i < height; i += 1)\n  {\n    row = row_pointers[i];\n    minitiff_read_row(&tiff_info, row, i, stream);\n    if (sample_depth < 8)\n    {\n      for (j = 0; j < (pixel_size * width); j += 1)\n      {\n        unsigned int b = row[j];\n        if (b > sample_max)\n        {\n          b = sample_max;\n          sample_overflow = 1;\n        }\n        row[j] = (png_byte) (((b * 255) + (sample_max / 2)) / sample_max);\n      }\n\n    }\n    if (tiff_info.photometric == 0)\n    {\n      for (j = 0; j < (pixel_size * width); j += 1)\n      {\n        row[j] = (png_byte) (255 - row[j]);\n      }\n\n    }\n  }\n\n  *sample_overflow_ref = sample_overflow;\n  *row_ref = row;\n  *i_ref = i;\n  *j_ref = j;\n}\n\n",
            "calle": [
                "minitiff_read_row"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "sample_overflow_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const sample_overflow_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const row_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tiff_info",
                        "type": "struct minitiff_info",
                        "definition": [
                            "struct minitiff_info tiff_info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pixel_size",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pixel_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_depth",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sample_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_max",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sample_max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_pointers",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp row_pointers"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_overflow",
                        "type": "int",
                        "definition": [
                            "int sample_overflow = *sample_overflow_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep row = *row_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int b = row[j]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_pngx_read_tiff_2",
            "header": "",
            "params": [
                "int * const sample_overflow_ref",
                "png_bytep * const row_ref",
                "unsigned int * const i_ref",
                "unsigned int * const j_ref",
                "unsigned int * const k_ref",
                "FILE * const stream",
                "struct minitiff_info tiff_info",
                "unsigned int width",
                "unsigned int height",
                "unsigned int pixel_size",
                "unsigned int sample_depth",
                "unsigned int sample_max",
                "png_bytepp row_pointers"
            ],
            "definition": "void helper_pngx_read_tiff_2(int * const sample_overflow_ref, png_bytep * const row_ref, unsigned int * const i_ref, unsigned int * const j_ref, unsigned int * const k_ref, FILE * const stream, struct minitiff_info tiff_info, unsigned int width, unsigned int height, unsigned int pixel_size, unsigned int sample_depth, unsigned int sample_max, png_bytepp row_pointers)\n{\n  int sample_overflow = *sample_overflow_ref;\n  png_bytep row = *row_ref;\n  unsigned int i = *i_ref;\n  unsigned int j = *j_ref;\n  unsigned int k = *k_ref;\n  for (i = 0; i < height; i += 1)\n  {\n    row = row_pointers[i];\n    minitiff_read_row(&tiff_info, row, i, stream);\n    if (tiff_info.byte_order == 'I')\n    {\n      for (j = (k = 0); j < (pixel_size * width); j += 1, k += 2)\n      {\n        png_byte b = row[k];\n        row[k] = row[k + 1];\n        row[k + 1] = b;\n      }\n\n    }\n    if (sample_depth < 16)\n    {\n      for (j = (k = 0); k < (pixel_size * width); j += 1, k += 2)\n      {\n        unsigned int b = (row[k] << 8) + row[k + 1];\n        if (b > sample_max)\n        {\n          b = sample_max;\n          sample_overflow = 1;\n        }\n        b = ((b * 65535U) + (sample_max / 2)) / sample_max;\n        row[k] = (png_byte) (b >> 8);\n        row[k + 1] = (png_byte) (b & 255);\n      }\n\n    }\n  }\n\n  *sample_overflow_ref = sample_overflow;\n  *row_ref = row;\n  *i_ref = i;\n  *j_ref = j;\n  *k_ref = k;\n}\n\n",
            "calle": [
                "minitiff_read_row"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "sample_overflow_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const sample_overflow_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const row_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tiff_info",
                        "type": "struct minitiff_info",
                        "definition": [
                            "struct minitiff_info tiff_info"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pixel_size",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int pixel_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_depth",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sample_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_max",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sample_max"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_pointers",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp row_pointers"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sample_overflow",
                        "type": "int",
                        "definition": [
                            "int sample_overflow = *sample_overflow_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep row = *row_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int k = *k_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "png_byte",
                        "definition": [
                            "png_byte b = row[k]",
                            "unsigned int b = (row[k] << 8) + row[k + 1]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pngx_malloc_rows",
            "header": "png_bytepp pngx_malloc_rows(png_structp png_ptr, png_infop info_ptr, int filler)",
            "params": [
                "png_structp png_ptr",
                "png_infop info_ptr",
                "int filler"
            ],
            "definition": "png_bytepp pngx_malloc_rows(png_structp png_ptr, png_infop info_ptr, int filler)\n{\n  return pngx_malloc_rows_extended(png_ptr, info_ptr, 0, filler);\n}\n\n",
            "calle": [
                "pngx_malloc_rows_extended"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_infop",
                        "definition": [
                            "png_infop info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filler",
                        "type": "int",
                        "definition": [
                            "int filler"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pngx_malloc_rows_extended",
            "header": "png_bytepp pngx_malloc_rows_extended(png_structp png_ptr, png_infop info_ptr, pngx_alloc_size_t min_row_size, int filler)",
            "params": [
                "png_structp png_ptr",
                "png_infop info_ptr",
                "pngx_alloc_size_t min_row_size",
                "int filler"
            ],
            "definition": "png_bytepp pngx_malloc_rows_extended(png_structp png_ptr, png_infop info_ptr, pngx_alloc_size_t min_row_size, int filler)\n{\n  pngx_alloc_size_t row_size;\n  png_bytep row;\n  png_bytepp rows;\n  png_uint_32 height;\n  png_uint_32 i;\n  height = png_get_image_height(png_ptr, info_ptr);\n  if (height == 0)\n  {\n    png_error(png_ptr, \"Missing IHDR\");\n  }\n  row_size = png_get_rowbytes(png_ptr, info_ptr);\n  if ((row_size == 0) || (((pngx_alloc_size_t) height) > (((pngx_alloc_size_t) (-1)) / (sizeof(png_bytep)))))\n  {\n    png_error(png_ptr, \"Can't handle exceedingly large image dimensions\");\n  }\n  if (row_size < min_row_size)\n  {\n    row_size = min_row_size;\n  }\n  png_free_data(png_ptr, info_ptr, 0x0040U, 0);\n  rows = (png_bytepp) png_malloc(png_ptr, (pngx_alloc_size_t) (height * (sizeof(png_bytep))));\n  if (rows == 0)\n  {\n    return 0;\n  }\n  for (i = 0; i < height; i += 1)\n  {\n    row = (png_bytep) png_malloc(png_ptr, row_size);\n    if (row == 0)\n    {\n      while (i > 0)\n      {\n        i -= 1;\n        png_free(png_ptr, rows[i]);\n      }\n\n      png_free(png_ptr, rows);\n      return 0;\n    }\n    if (filler >= 0)\n    {\n      memset(row, filler, row_size);\n    }\n    rows[i] = row;\n  }\n\n  png_set_rows(png_ptr, info_ptr, rows);\n  return rows;\n}\n\n",
            "calle": [
                "memset",
                "png_error",
                "png_free",
                "png_free_data",
                "png_get_image_height",
                "png_get_rowbytes",
                "png_malloc",
                "png_set_rows"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_infop",
                        "definition": [
                            "png_infop info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "min_row_size",
                        "type": "pngx_alloc_size_t",
                        "definition": [
                            "pngx_alloc_size_t min_row_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filler",
                        "type": "int",
                        "definition": [
                            "int filler"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_size",
                        "type": "pngx_alloc_size_t",
                        "definition": [
                            "pngx_alloc_size_t row_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep row"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rows",
                        "type": "png_bytepp",
                        "definition": [
                            "png_bytepp rows"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pngx_set_compression_type",
            "header": "void pngx_set_compression_type(png_structp png_ptr, png_infop info_ptr, int compression_type)",
            "params": [
                "png_structp png_ptr",
                "png_infop info_ptr",
                "int compression_type"
            ],
            "definition": "void pngx_set_compression_type(png_structp png_ptr, png_infop info_ptr, int compression_type)\n{\n  png_uint_32 width;\n  png_uint_32 height;\n  int bit_depth;\n  int color_type;\n  int interlace_type;\n  int filter_type;\n  int old_compression_type;\n  if (!png_get_IHDR(png_ptr, info_ptr, &width, &height, &bit_depth, &color_type, &interlace_type, &old_compression_type, &filter_type))\n  {\n    return;\n  }\n  if (compression_type == old_compression_type)\n  {\n    return;\n  }\n  png_set_IHDR(png_ptr, info_ptr, width, height, bit_depth, color_type, interlace_type, compression_type, filter_type);\n}\n\n",
            "calle": [
                "png_get_IHDR",
                "png_set_IHDR"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_infop",
                        "definition": [
                            "png_infop info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compression_type",
                        "type": "int",
                        "definition": [
                            "int compression_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bit_depth",
                        "type": "int",
                        "definition": [
                            "int bit_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color_type",
                        "type": "int",
                        "definition": [
                            "int color_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "interlace_type",
                        "type": "int",
                        "definition": [
                            "int interlace_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filter_type",
                        "type": "int",
                        "definition": [
                            "int filter_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "old_compression_type",
                        "type": "int",
                        "definition": [
                            "int old_compression_type"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pngx_set_filter_type",
            "header": "void pngx_set_filter_type(png_structp png_ptr, png_infop info_ptr, int filter_type)",
            "params": [
                "png_structp png_ptr",
                "png_infop info_ptr",
                "int filter_type"
            ],
            "definition": "void pngx_set_filter_type(png_structp png_ptr, png_infop info_ptr, int filter_type)\n{\n  png_uint_32 width;\n  png_uint_32 height;\n  int bit_depth;\n  int color_type;\n  int interlace_type;\n  int compression_type;\n  int old_filter_type;\n  if (!png_get_IHDR(png_ptr, info_ptr, &width, &height, &bit_depth, &color_type, &interlace_type, &compression_type, &old_filter_type))\n  {\n    return;\n  }\n  if (filter_type == old_filter_type)\n  {\n    return;\n  }\n  png_set_IHDR(png_ptr, info_ptr, width, height, bit_depth, color_type, interlace_type, compression_type, filter_type);\n}\n\n",
            "calle": [
                "png_get_IHDR",
                "png_set_IHDR"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_infop",
                        "definition": [
                            "png_infop info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filter_type",
                        "type": "int",
                        "definition": [
                            "int filter_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bit_depth",
                        "type": "int",
                        "definition": [
                            "int bit_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color_type",
                        "type": "int",
                        "definition": [
                            "int color_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "interlace_type",
                        "type": "int",
                        "definition": [
                            "int interlace_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compression_type",
                        "type": "int",
                        "definition": [
                            "int compression_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "old_filter_type",
                        "type": "int",
                        "definition": [
                            "int old_filter_type"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "pngx_set_interlace_type",
            "header": "void pngx_set_interlace_type(png_structp png_ptr, png_infop info_ptr, int interlace_type)",
            "params": [
                "png_structp png_ptr",
                "png_infop info_ptr",
                "int interlace_type"
            ],
            "definition": "void pngx_set_interlace_type(png_structp png_ptr, png_infop info_ptr, int interlace_type)\n{\n  png_uint_32 width;\n  png_uint_32 height;\n  int bit_depth;\n  int color_type;\n  int compression_type;\n  int filter_type;\n  int old_interlace_type;\n  if (!png_get_IHDR(png_ptr, info_ptr, &width, &height, &bit_depth, &color_type, &old_interlace_type, &compression_type, &filter_type))\n  {\n    return;\n  }\n  if (interlace_type == old_interlace_type)\n  {\n    return;\n  }\n  png_set_IHDR(png_ptr, info_ptr, width, height, bit_depth, color_type, interlace_type, compression_type, filter_type);\n}\n\n",
            "calle": [
                "png_get_IHDR",
                "png_set_IHDR"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_infop",
                        "definition": [
                            "png_infop info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "interlace_type",
                        "type": "int",
                        "definition": [
                            "int interlace_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "width",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 width"
                        ]
                    },
                    {
                        "path": null,
                        "name": "height",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 height"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bit_depth",
                        "type": "int",
                        "definition": [
                            "int bit_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "color_type",
                        "type": "int",
                        "definition": [
                            "int color_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compression_type",
                        "type": "int",
                        "definition": [
                            "int compression_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filter_type",
                        "type": "int",
                        "definition": [
                            "int filter_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "old_interlace_type",
                        "type": "int",
                        "definition": [
                            "int old_interlace_type"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "panic",
            "header": "",
            "params": [
                "const char *msg"
            ],
            "definition": "static void panic(const char *msg)\n{\n  fprintf(stderr, \"\\n** INTERNAL ERROR: %s\\n\", msg);\n  fprintf(stderr, \"Please submit a defect report.\\nhttp://optipng.sourceforge.net/\\n\\n\");\n  fflush(stderr);\n  if (options.debug)\n  {\n    abort();\n  }\n  else\n  {\n    fprintf(stderr, \"The execution of this program has been terminated abnormally.\\n\");\n    exit(70);\n  }\n}\n\n",
            "calle": [
                "abort",
                "exit",
                "fflush",
                "fprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "msg",
                        "type": "const char *",
                        "definition": [
                            "const char *msg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_strcasecmp",
            "header": "",
            "params": [
                "const char *str1",
                "const char *str2"
            ],
            "definition": "static int opng_strcasecmp(const char *str1, const char *str2)\n{\n  unsigned int str2_idx = 0;\n  unsigned int str1_idx = 0;\n  int ch1;\n  int ch2;\n  for (;;)\n  {\n    ch1 = tolower(*(&str1[str1_idx]));\n    str1_idx += 1;\n    ch2 = tolower(*(&str2[str2_idx]));\n    str2_idx += 1;\n    if (ch1 != ch2)\n    {\n      return ch1 - ch2;\n    }\n    if (ch1 == '\\0')\n    {\n      return 0;\n    }\n  }\n\n}\n\n",
            "calle": [
                "tolower"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str1",
                        "type": "const char *",
                        "definition": [
                            "const char *str1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str2",
                        "type": "const char *",
                        "definition": [
                            "const char *str2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str2_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str2_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str1_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str1_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch1",
                        "type": "int",
                        "definition": [
                            "int ch1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ch2",
                        "type": "int",
                        "definition": [
                            "int ch2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_strltrim",
            "header": "",
            "params": [
                "const char *str"
            ],
            "definition": "static char *opng_strltrim(const char *str)\n{\n  unsigned int str_idx = 0;\n  while (isspace(*(&str[str_idx])))\n  {\n    str_idx += 1;\n  }\n\n  return (char *) str;\n}\n\n",
            "calle": [
                "isspace"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char *",
                        "definition": [
                            "const char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_strtail",
            "header": "",
            "params": [
                "const char *str",
                "size_t num"
            ],
            "definition": "static char *opng_strtail(const char *str, size_t num)\n{\n  size_t len;\n  len = strlen(str);\n  if (len <= num)\n  {\n    return (char *) str;\n  }\n  return (((char *) str) + len) - num;\n}\n\n",
            "calle": [
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char *",
                        "definition": [
                            "const char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num",
                        "type": "size_t",
                        "definition": [
                            "size_t num"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_strpbrk_digit",
            "header": "",
            "params": [
                "const char *str"
            ],
            "definition": "static char *opng_strpbrk_digit(const char *str)\n{\n  unsigned int str_idx = 0;\n  for (;;)\n  {\n    if (str[str_idx] == '\\0')\n    {\n      return 0;\n    }\n    if (isdigit(*(&str[str_idx])))\n    {\n      return (char *) str;\n    }\n    str_idx += 1;\n  }\n\n}\n\n",
            "calle": [
                "isdigit"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char *",
                        "definition": [
                            "const char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int str_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_str2ulong",
            "header": "",
            "params": [
                "unsigned long *out_val",
                "const char *in_str",
                "int allow_multiplier"
            ],
            "definition": "static int opng_str2ulong(unsigned long *out_val, const char *in_str, int allow_multiplier)\n{\n  const char *begin_ptr;\n  unsigned int begin_ptr_idx = 0;\n  char *end_ptr;\n  unsigned int end_ptr_idx = 0;\n  unsigned long multiplier;\n  begin_ptr_idx = (end_ptr = &end_ptr[end_ptr_idx + end_ptr_idx]);\n  if ((begin_ptr[begin_ptr_idx] >= '0') && (begin_ptr[begin_ptr_idx] <= '9'))\n  {\n    *out_val = strtoul(begin_ptr, &(&end_ptr[end_ptr_idx]), 10);\n  }\n  if ((&begin_ptr[begin_ptr_idx]) == (&end_ptr[end_ptr_idx]))\n  {\n    errno = EINVAL;\n    *out_val = 0;\n    return -1;\n  }\n  if (allow_multiplier)\n  {\n    if ((end_ptr[end_ptr_idx] == 'k') || (end_ptr[end_ptr_idx] == 'K'))\n    {\n      end_ptr_idx += 1;\n      multiplier = 1024UL;\n    }\n    else\n      if (end_ptr[end_ptr_idx] == 'M')\n    {\n      end_ptr_idx += 1;\n      multiplier = 1024UL * 1024UL;\n    }\n    else\n      if (end_ptr[end_ptr_idx] == 'G')\n    {\n      end_ptr_idx += 1;\n      multiplier = (1024UL * 1024UL) * 1024UL;\n    }\n    else\n      multiplier = 1;\n    if (multiplier > 1)\n    {\n      if ((*out_val) > (18446744073709551615UL / multiplier))\n      {\n        errno = ERANGE;\n        *out_val = 18446744073709551615UL;\n      }\n      else\n        *out_val *= multiplier;\n    }\n  }\n  if ((*opng_strltrim(end_ptr)) != '\\0')\n  {\n    errno = EINVAL;\n    return -1;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "opng_strltrim",
                "strtoul"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "out_val",
                        "type": "unsigned long *",
                        "definition": [
                            "unsigned long *out_val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_str",
                        "type": "const char *",
                        "definition": [
                            "const char *in_str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "allow_multiplier",
                        "type": "int",
                        "definition": [
                            "int allow_multiplier"
                        ]
                    },
                    {
                        "path": null,
                        "name": "begin_ptr",
                        "type": "const char *",
                        "definition": [
                            "const char *begin_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "begin_ptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int begin_ptr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end_ptr",
                        "type": "char *",
                        "definition": [
                            "char *end_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end_ptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int end_ptr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "multiplier",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long multiplier"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "err_option_arg",
            "header": "",
            "params": [
                "const char *opt",
                "const char *opt_arg"
            ],
            "definition": "static void err_option_arg(const char *opt, const char *opt_arg)\n{\n  if ((opt_arg == 0) || ((*opng_strltrim(opt_arg)) == '\\0'))\n  {\n    error(\"Missing argument for option %s\", opt);\n  }\n  else\n    error(\"Invalid argument for option %s: %s\", opt, opt_arg);\n}\n\n",
            "calle": [
                "error",
                "opng_strltrim"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opt",
                        "type": "const char *",
                        "definition": [
                            "const char *opt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_arg",
                        "type": "const char *",
                        "definition": [
                            "const char *opt_arg"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "check_num_option",
            "header": "",
            "params": [
                "const char *opt",
                "const char *opt_arg",
                "int lowest",
                "int highest"
            ],
            "definition": "static int check_num_option(const char *opt, const char *opt_arg, int lowest, int highest)\n{\n  unsigned long value;\n  if ((((opng_str2ulong(&value, opt_arg, 0) != 0) || (value > 2147483647)) || (((int) value) < lowest)) || (((int) value) > highest))\n  {\n    err_option_arg(opt, opt_arg);\n  }\n  return (int) value;\n}\n\n",
            "calle": [
                "err_option_arg",
                "opng_str2ulong"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opt",
                        "type": "const char *",
                        "definition": [
                            "const char *opt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_arg",
                        "type": "const char *",
                        "definition": [
                            "const char *opt_arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lowest",
                        "type": "int",
                        "definition": [
                            "int lowest"
                        ]
                    },
                    {
                        "path": null,
                        "name": "highest",
                        "type": "int",
                        "definition": [
                            "int highest"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long value"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "check_power2_option",
            "header": "",
            "params": [
                "const char *opt",
                "const char *opt_arg",
                "int lowest",
                "int highest"
            ],
            "definition": "static int check_power2_option(const char *opt, const char *opt_arg, int lowest, int highest)\n{\n  unsigned long value;\n  int result;\n  if (opng_str2ulong(&value, opt_arg, 1) == 0)\n  {\n    if (lowest < 0)\n    {\n      lowest = 0;\n    }\n    if (highest > ((int) ((8 * (sizeof(long))) - 2)))\n    {\n      highest = (int) ((8 * (sizeof(long))) - 2);\n    }\n    for (result = lowest; result <= highest; result += 1)\n    {\n      if ((1UL << result) == value)\n      {\n        return result;\n      }\n    }\n\n  }\n  err_option_arg(opt, opt_arg);\n  return -1;\n}\n\n",
            "calle": [
                "err_option_arg",
                "opng_str2ulong"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opt",
                        "type": "const char *",
                        "definition": [
                            "const char *opt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_arg",
                        "type": "const char *",
                        "definition": [
                            "const char *opt_arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lowest",
                        "type": "int",
                        "definition": [
                            "int lowest"
                        ]
                    },
                    {
                        "path": null,
                        "name": "highest",
                        "type": "int",
                        "definition": [
                            "int highest"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "int",
                        "definition": [
                            "int result"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "check_rangeset_option",
            "header": "",
            "params": [
                "const char *opt",
                "const char *opt_arg",
                "opng_bitset_t result_mask"
            ],
            "definition": "static opng_bitset_t check_rangeset_option(const char *opt, const char *opt_arg, opng_bitset_t result_mask)\n{\n  opng_bitset_t result;\n  if (opng_strparse_rangeset_to_bitset(&result, opt_arg, result_mask) != 0)\n  {\n    result = 0U;\n  }\n  if ((result & result_mask) != result)\n  {\n    result = 0U;\n  }\n  if (result == 0U)\n  {\n    err_option_arg(opt, opt_arg);\n  }\n  return result;\n}\n\n",
            "calle": [
                "err_option_arg",
                "opng_strparse_rangeset_to_bitset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opt",
                        "type": "const char *",
                        "definition": [
                            "const char *opt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_arg",
                        "type": "const char *",
                        "definition": [
                            "const char *opt_arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result_mask",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t result_mask"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t result"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "check_obj_option",
            "header": "",
            "params": [
                "const char *opt",
                "const char *opt_arg"
            ],
            "definition": "static void check_obj_option(const char *opt, const char *opt_arg)\n{\n  unsigned int i;\n  if (strcmp(\"all\", opt_arg) == 0)\n  {\n    return;\n  }\n  for (i = 0; i < 4; i += 1)\n  {\n    if (!(((opt_arg[i] >= 'A') && (opt_arg[i] <= 'Z')) || ((opt_arg[i] >= 'a') && (opt_arg[i] <= 'z'))))\n    {\n      break;\n    }\n  }\n\n  if ((i == 4) && (opt_arg[i] == '\\0'))\n  {\n    error(\"Manipulation of individual chunks is not implemented\");\n  }\n  else\n    err_option_arg(opt, opt_arg);\n}\n\n",
            "calle": [
                "err_option_arg",
                "error",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "opt",
                        "type": "const char *",
                        "definition": [
                            "const char *opt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_arg",
                        "type": "const char *",
                        "definition": [
                            "const char *opt_arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "scan_option",
            "header": "",
            "params": [
                "const char *str",
                "char opt_buf[]",
                "size_t opt_buf_size",
                "const char **opt_arg_ptr"
            ],
            "definition": "static int scan_option(const char *str, char opt_buf[], size_t opt_buf_size, const char **opt_arg_ptr)\n{\n  const char *ptr;\n  unsigned int ptr_idx = 0;\n  unsigned int opt_len;\n  if ((str[0] != '-') || (str[1] == '\\0'))\n  {\n    return 0;\n  }\n  opt_len = 0;\n  ptr_idx = str + 1;\n  while (ptr[ptr_idx] == '-')\n  {\n    ptr_idx += 1;\n  }\n\n  if (ptr[ptr_idx] == '\\0')\n  {\n    ptr_idx -= 1;\n  }\n  for (;;)\n  {\n    if (opt_len < opt_buf_size)\n    {\n      opt_buf[opt_len] = (char) tolower(*(&ptr[ptr_idx]));\n    }\n    opt_len += 1;\n    ptr_idx += 1;\n    if ((ptr[ptr_idx] == '\\0') || isspace(*(&ptr[ptr_idx])))\n    {\n      while (isspace(*(&ptr[ptr_idx])))\n      {\n        ptr_idx += 1;\n      }\n\n      *opt_arg_ptr = (ptr[ptr_idx] != '\\0') ? (ptr) : (0);\n      break;\n    }\n    if (ptr[ptr_idx] == '=')\n    {\n      ptr_idx += 1;\n      *opt_arg_ptr = &ptr[ptr_idx];\n      break;\n    }\n  }\n\n  if (opt_buf_size > 0)\n  {\n    if (opt_len < opt_buf_size)\n    {\n      opt_buf[opt_len] = '\\0';\n    }\n    else\n      opt_buf[opt_buf_size - 1] = '\\0';\n  }\n  return 1;\n}\n\n",
            "calle": [
                "isspace",
                "tolower"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char *",
                        "definition": [
                            "const char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_buf",
                        "type": "char []",
                        "definition": [
                            "char opt_buf[]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_buf_size",
                        "type": "size_t",
                        "definition": [
                            "size_t opt_buf_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_arg_ptr",
                        "type": "const char **",
                        "definition": [
                            "const char **opt_arg_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "const char *",
                        "definition": [
                            "const char *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ptr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_len",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int opt_len"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "parse_args",
            "header": "",
            "params": [
                "int argc",
                "char *argv[]"
            ],
            "definition": "static void parse_args(int argc, char *argv[])\n{\n  char *arg;\n  unsigned int arg_idx = 0;\n  char opt[16];\n  size_t opt_len;\n  const char *xopt;\n  unsigned int xopt_idx = 0;\n  int simple_opt;\n  int stop_switch;\n  opng_bitset_t set;\n  int val;\n  unsigned int file_count;\n  int i;\n  memset(&options, 0, sizeof(options));\n  options.optim_level = -1;\n  options.interlace = -1;\n  file_count = 0;\n  stop_switch = 0;\n  for (i = 1; i < argc; i += 1)\n  {\n    helper_parse_args_1(&arg_idx, &opt_len, &xopt_idx, &simple_opt, &stop_switch, &set, &val, &file_count, &i, argc, argv, arg, opt, xopt);\n  }\n\n  if (options.out_name != 0)\n  {\n    if (file_count > 1)\n    {\n      error(\"The option -out requires one input file\");\n    }\n    if (options.dir_name != 0)\n    {\n      error(\"The options -out and -dir are mutually exclusive\");\n    }\n  }\n  if (options.log_name != 0)\n  {\n    if (opng_strcasecmp(\".log\", opng_strtail(options.log_name, 4)) != 0)\n    {\n      error(\"To prevent accidental data corruption, the log file name must end with \\\".log\\\"\");\n    }\n  }\n  if (local_options.help)\n  {\n    operation = OP_SHOW_HELP;\n  }\n  else\n    if (file_count != 0)\n  {\n    operation = OP_RUN;\n  }\n  else\n    if (local_options.version)\n  {\n    operation = OP_SHOW_VERSION;\n  }\n  else\n    operation = OP_SHOW_HELP;\n}\n\n",
            "calle": [
                "error",
                "helper_parse_args_1",
                "memset",
                "opng_strcasecmp",
                "opng_strtail"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char *[]",
                        "definition": [
                            "char *argv[]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg",
                        "type": "char *",
                        "definition": [
                            "char *arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int arg_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt",
                        "type": "char [16]",
                        "definition": [
                            "char opt[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_len",
                        "type": "size_t",
                        "definition": [
                            "size_t opt_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xopt",
                        "type": "const char *",
                        "definition": [
                            "const char *xopt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xopt_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int xopt_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "simple_opt",
                        "type": "int",
                        "definition": [
                            "int simple_opt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stop_switch",
                        "type": "int",
                        "definition": [
                            "int stop_switch"
                        ]
                    },
                    {
                        "path": null,
                        "name": "set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int",
                        "definition": [
                            "int val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file_count",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int file_count"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "local_options",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "operation",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "app_printf",
            "header": "",
            "params": [
                "const char *fmt",
                "..."
            ],
            "definition": "static void app_printf(const char *fmt, ...)\n{\n  va_list arg_ptr;\n  if (fmt[0] == '\\0')\n  {\n    return;\n  }\n  start_of_line = (fmt[strlen(fmt) - 1] == '\\n') ? (1) : (0);\n  if (con_file != 0)\n  {\n    __builtin_va_start(arg_ptr);\n    vfprintf(con_file, fmt, arg_ptr);\n    ;\n  }\n  if (log_file != 0)\n  {\n    __builtin_va_start(arg_ptr);\n    vfprintf(log_file, fmt, arg_ptr);\n    ;\n  }\n}\n\n",
            "calle": [
                "__builtin_va_start",
                "strlen",
                "vfprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fmt",
                        "type": "const char *",
                        "definition": [
                            "const char *fmt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg_ptr",
                        "type": "va_list",
                        "definition": [
                            "va_list arg_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start_of_line",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "con_file",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "log_file",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "app_print_cntrl",
            "header": "",
            "params": [
                "int cntrl_code"
            ],
            "definition": "static void app_print_cntrl(int cntrl_code)\n{\n  const char *con_str;\n  unsigned int con_str_idx = 0;\n  const char *log_str;\n  unsigned int log_str_idx = 0;\n  int i;\n  if (cntrl_code == '\\r')\n  {\n    con_str_idx = \"\\r\";\n    log_str_idx = \"\\n\";\n    start_of_line = 1;\n  }\n  else\n    if (cntrl_code == '\\v')\n  {\n    if (!start_of_line)\n    {\n      con_str_idx = (log_str = &log_str[log_str_idx + log_str_idx]);\n      start_of_line = 1;\n    }\n    else\n      con_str_idx = (log_str = &log_str[log_str_idx + log_str_idx]);\n  }\n  else\n    if (((cntrl_code < 0) && (cntrl_code > (-80))) && start_of_line)\n  {\n    if (con_file != 0)\n    {\n      for (i = 0; i > cntrl_code; i -= 1)\n      {\n        fputc(' ', con_file);\n      }\n\n    }\n    con_str_idx = \"\\r\";\n    log_str_idx = \"\";\n  }\n  else\n  {\n    con_str_idx = (log_str = &log_str[log_str_idx + log_str_idx]);\n  }\n  if (con_file != 0)\n  {\n    fputs(con_str, con_file);\n  }\n  if (log_file != 0)\n  {\n    fputs(log_str, log_file);\n  }\n}\n\n",
            "calle": [
                "fputc",
                "fputs"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "cntrl_code",
                        "type": "int",
                        "definition": [
                            "int cntrl_code"
                        ]
                    },
                    {
                        "path": null,
                        "name": "con_str",
                        "type": "const char *",
                        "definition": [
                            "const char *con_str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "con_str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int con_str_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "log_str",
                        "type": "const char *",
                        "definition": [
                            "const char *log_str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "log_str_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int log_str_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start_of_line",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "con_file",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "log_file",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "app_progress",
            "header": "",
            "params": [
                "unsigned long current_step",
                "unsigned long total_steps"
            ],
            "definition": "static void app_progress(unsigned long current_step, unsigned long total_steps)\n{\n  if (con_file != 0)\n  {\n    fflush(con_file);\n  }\n  if (current_step && total_steps)\n  {\n    return;\n  }\n}\n\n",
            "calle": [
                "fflush"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "current_step",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long current_step"
                        ]
                    },
                    {
                        "path": null,
                        "name": "total_steps",
                        "type": "unsigned long",
                        "definition": [
                            "unsigned long total_steps"
                        ]
                    },
                    {
                        "path": null,
                        "name": "con_file",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "app_init",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "static void app_init(void)\n{\n  start_of_line = 1;\n  if ((operation == OP_SHOW_HELP) || (operation == OP_SHOW_VERSION))\n  {\n    con_file = stdout;\n  }\n  else\n    if (!options.quiet)\n  {\n    con_file = stderr;\n  }\n  else\n    con_file = 0;\n  if (options.log_name != 0)\n  {\n    if ((log_file = fopen(options.log_name, \"a\")) == 0)\n    {\n      error(\"Can't open log file: %s\\n\", options.log_name);\n    }\n    setvbuf(log_file, 0, _IOLBF, 1024);\n    app_printf(\"** Warning: %s\\n\\n\", \"The option -log is deprecated; use shell redirection\");\n  }\n}\n\n",
            "calle": [
                "app_printf",
                "error",
                "fopen",
                "setvbuf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start_of_line",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "operation",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "con_file",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "log_file",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "app_finish",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "static void app_finish(void)\n{\n  if (log_file != 0)\n  {\n    fclose(log_file);\n  }\n}\n\n",
            "calle": [
                "fclose"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "log_file",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "process_files",
            "header": "",
            "params": [
                "int argc",
                "char *argv[]"
            ],
            "definition": "static int process_files(int argc, char *argv[])\n{\n  int result;\n  struct opng_ui ui;\n  int i;\n  ui.printf_fn = app_printf;\n  ui.print_cntrl_fn = app_print_cntrl;\n  ui.progress_fn = app_progress;\n  ui.panic_fn = panic;\n  if (opng_initialize(&options, &ui) != 0)\n  {\n    panic(\"Can't initialize optimization engine\");\n  }\n  result = 0;\n  for (i = 1; i < argc; i += 1)\n  {\n    if ((argv[i] == 0) || (argv[i][0] == '\\0'))\n    {\n      continue;\n    }\n    if (opng_optimize(argv[i]) != 0)\n    {\n      result = 1;\n    }\n  }\n\n  if (opng_finalize() != 0)\n  {\n    panic(\"Can't finalize optimization engine\");\n  }\n  return result;\n}\n\n",
            "calle": [
                "app_print_cntrl",
                "app_printf",
                "app_progress",
                "opng_finalize",
                "opng_initialize",
                "opng_optimize",
                "panic"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char *[]",
                        "definition": [
                            "char *argv[]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "int",
                        "definition": [
                            "int result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ui",
                        "type": "struct opng_ui",
                        "definition": [
                            "struct opng_ui ui"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "main#optipng",
            "header": "",
            "params": [
                "int argc",
                "char *argv[]"
            ],
            "definition": "int main(int argc, char *argv[])\n{\n  int result;\n  parse_args(argc, argv);\n  app_init();\n  result = 0;\n  if (local_options.version)\n  {\n    app_printf(\"%s\\n\", msg_intro);\n  }\n  switch (operation)\n  {\n    case OP_RUN:\n      result = process_files(argc, argv);\n      break;\n\n    case OP_SHOW_HELP:\n      if (local_options.help)\n    {\n      app_printf(\"%s%s%s\", msg_help_synopsis, msg_help_options, msg_help_examples);\n    }\n    else\n    {\n      app_printf(\"%s%s%s%s\", msg_help_synopsis, msg_help_basic_options, msg_help_examples, msg_help_more);\n    }\n      break;\n\n    case OP_SHOW_VERSION:\n      app_printf(\"%s\\n\", msg_license);\n      app_printf(\"Using libpng version %s and zlib version %s\\n\", png_get_libpng_ver(0), zlibVersion());\n      break;\n\n    default:\n      result = -1;\n\n  }\n\n  app_finish();\n  return result;\n}\n\n",
            "calle": [
                "app_finish",
                "app_init",
                "app_printf",
                "parse_args",
                "png_get_libpng_ver",
                "process_files",
                "zlibVersion"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char *[]",
                        "definition": [
                            "char *argv[]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "int",
                        "definition": [
                            "int result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "local_options",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "msg_intro",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "operation",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "msg_help_synopsis",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "msg_help_options",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "msg_help_examples",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "msg_help_basic_options",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "msg_help_more",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "msg_license",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_parse_args_1",
            "header": "",
            "params": [
                "unsigned int * const arg_idx_ref",
                "size_t * const opt_len_ref",
                "unsigned int * const xopt_idx_ref",
                "int * const simple_opt_ref",
                "int * const stop_switch_ref",
                "opng_bitset_t * const set_ref",
                "int * const val_ref",
                "unsigned int * const file_count_ref",
                "int * const i_ref",
                "int argc",
                "char *argv[]",
                "char * const arg",
                "char opt[16]",
                "const char * const xopt"
            ],
            "definition": "void helper_parse_args_1(unsigned int * const arg_idx_ref, size_t * const opt_len_ref, unsigned int * const xopt_idx_ref, int * const simple_opt_ref, int * const stop_switch_ref, opng_bitset_t * const set_ref, int * const val_ref, unsigned int * const file_count_ref, int * const i_ref, int argc, char *argv[], char * const arg, char opt[16], const char * const xopt)\n{\n  unsigned int arg_idx = *arg_idx_ref;\n  size_t opt_len = *opt_len_ref;\n  unsigned int xopt_idx = *xopt_idx_ref;\n  int simple_opt = *simple_opt_ref;\n  int stop_switch = *stop_switch_ref;\n  opng_bitset_t set = *set_ref;\n  int val = *val_ref;\n  unsigned int file_count = *file_count_ref;\n  int i = *i_ref;\n  arg_idx = argv[i];\n  if (stop_switch || (scan_option(arg, opt, sizeof(opt), &(&xopt[xopt_idx])) < 1))\n  {\n    file_count += 1;\n    continue;\n  }\n  opt_len = strlen(opt);\n  argv[i] = 0;\n  if (((strchr(\"fio\", opt[0]) != 0) && isdigit(opt[1])) || (((opt[0] == 'z') && isalpha(opt[1])) && isdigit(opt[2])))\n  {\n    opt_len = (size_t) (opng_strpbrk_digit(opt) - opt);\n    opt[opt_len] = '\\0';\n    xopt_idx = opng_strpbrk_digit(arg);\n  }\n  simple_opt = 1;\n  if (strcmp(\"-\", opt) == 0)\n  {\n    stop_switch = 1;\n  }\n  else\n    if ((strcmp(\"?\", opt) == 0) || (strncmp(\"help\", opt, opt_len) == 0))\n  {\n    local_options.help = 1;\n  }\n  else\n    if ((strncmp(\"backup\", opt, opt_len) == 0) || (strncmp(\"keep\", opt, opt_len) == 0))\n  {\n    options.backup = 1;\n  }\n  else\n    if (strncmp(\"clobber\", opt, opt_len) == 0)\n  {\n    options.clobber = 1;\n  }\n  else\n    if (strcmp(\"debug\", opt) == 0)\n  {\n    options.debug = 1;\n  }\n  else\n    if ((strncmp(\"fix\", opt, opt_len) == 0) && (opt_len >= 2))\n  {\n    options.fix = 1;\n  }\n  else\n    if ((strncmp(\"force\", opt, opt_len) == 0) && (opt_len >= 2))\n  {\n    options.force = 1;\n  }\n  else\n    if ((strncmp(\"full\", opt, opt_len) == 0) && (opt_len >= 2))\n  {\n    options.full = 1;\n  }\n  else\n    if (strcmp(\"nb\", opt) == 0)\n  {\n    options.nb = 1;\n  }\n  else\n    if (strcmp(\"nc\", opt) == 0)\n  {\n    options.nc = 1;\n  }\n  else\n    if (strcmp(\"np\", opt) == 0)\n  {\n    options.np = 1;\n  }\n  else\n    if (strcmp(\"nx\", opt) == 0)\n  {\n    options.nb = (options.nc = (options.np = 1));\n  }\n  else\n    if (strcmp(\"nz\", opt) == 0)\n  {\n    options.nz = 1;\n  }\n  else\n    if (strncmp(\"preserve\", opt, opt_len) == 0)\n  {\n    options.preserve = 1;\n  }\n  else\n    if ((strncmp(\"quiet\", opt, opt_len) == 0) || ((strncmp(\"silent\", opt, opt_len) == 0) && (opt_len >= 3)))\n  {\n    options.quiet = 1;\n  }\n  else\n    if ((strncmp(\"simulate\", opt, opt_len) == 0) && (opt_len >= 3))\n  {\n    options.simulate = 1;\n  }\n  else\n    if ((strncmp(\"snip\", opt, opt_len) == 0) && (opt_len >= 2))\n  {\n    options.snip = 1;\n  }\n  else\n    if (strcmp(\"v\", opt) == 0)\n  {\n    options.verbose = 1;\n    local_options.version = 1;\n  }\n  else\n    if ((strncmp(\"verbose\", opt, opt_len) == 0) && (opt_len >= 4))\n  {\n    options.verbose = 1;\n  }\n  else\n    if ((strncmp(\"version\", opt, opt_len) == 0) && (opt_len >= 4))\n  {\n    local_options.version = 1;\n  }\n  else\n  {\n    simple_opt = 0;\n    if ((&xopt[xopt_idx]) == 0)\n    {\n      if ((++i) < argc)\n      {\n        xopt_idx = argv[i];\n        argv[i] = 0;\n      }\n      else\n      {\n        xopt_idx = \"\";\n      }\n    }\n  }\n  if (simple_opt)\n  {\n    if ((&xopt[xopt_idx]) != 0)\n    {\n      error(\"No argument allowed for option: %s\", arg);\n    }\n  }\n  else\n    if (strcmp(\"o\", opt) == 0)\n  {\n    val = check_num_option(\"-o\", xopt, 0, 2147483647);\n    if (options.optim_level < 0)\n    {\n      options.optim_level = val;\n    }\n    else\n      if (options.optim_level != val)\n    {\n      error(\"Multiple optimization levels are not permitted\");\n    }\n  }\n  else\n    if (strcmp(\"i\", opt) == 0)\n  {\n    val = check_num_option(\"-i\", xopt, 0, 1);\n    if (options.interlace < 0)\n    {\n      options.interlace = val;\n    }\n    else\n      if (options.interlace != val)\n    {\n      error(\"Multiple interlace types are not permitted\");\n    }\n  }\n  else\n    if (strcmp(\"f\", opt) == 0)\n  {\n    set = check_rangeset_option(\"-f\", xopt, (1 << (5 + 1)) - (1 << 0));\n    options.filter_set |= set;\n  }\n  else\n    if (strcmp(\"zc\", opt) == 0)\n  {\n    set = check_rangeset_option(\"-zc\", xopt, (1 << (9 + 1)) - (1 << 1));\n    options.compr_level_set |= set;\n  }\n  else\n    if (strcmp(\"zm\", opt) == 0)\n  {\n    set = check_rangeset_option(\"-zm\", xopt, (1 << (9 + 1)) - (1 << 1));\n    options.mem_level_set |= set;\n  }\n  else\n    if (strcmp(\"zs\", opt) == 0)\n  {\n    set = check_rangeset_option(\"-zs\", xopt, (1 << (3 + 1)) - (1 << 0));\n    options.strategy_set |= set;\n  }\n  else\n    if (strcmp(\"zw\", opt) == 0)\n  {\n    val = check_power2_option(\"-zw\", xopt, 8, 15);\n    if (options.window_bits == 0)\n    {\n      options.window_bits = val;\n    }\n    else\n      if (options.window_bits != val)\n    {\n      error(\"Multiple window sizes are not permitted\");\n    }\n  }\n  else\n    if ((strncmp(\"strip\", opt, opt_len) == 0) && (opt_len >= 2))\n  {\n    check_obj_option(\"-strip\", xopt);\n    options.strip_all = 1;\n  }\n  else\n    if ((strncmp(\"out\", opt, opt_len) == 0) && (opt_len >= 2))\n  {\n    if (options.out_name != 0)\n    {\n      error(\"Multiple output file names are not permitted\");\n    }\n    if (xopt[0 + xopt_idx] == '\\0')\n    {\n      err_option_arg(\"-out\", 0);\n    }\n    options.out_name = &xopt[xopt_idx];\n  }\n  else\n    if (strncmp(\"dir\", opt, opt_len) == 0)\n  {\n    if (options.dir_name != 0)\n    {\n      error(\"Multiple output dir names are not permitted\");\n    }\n    if (xopt[0 + xopt_idx] == '\\0')\n    {\n      err_option_arg(\"-dir\", 0);\n    }\n    options.dir_name = &xopt[xopt_idx];\n  }\n  else\n    if (strncmp(\"log\", opt, opt_len) == 0)\n  {\n    if (options.log_name != 0)\n    {\n      error(\"Multiple log file names are not permitted\");\n    }\n    if (xopt[0 + xopt_idx] == '\\0')\n    {\n      err_option_arg(\"-log\", 0);\n    }\n    options.log_name = &xopt[xopt_idx];\n  }\n  else\n  {\n    error(\"Unrecognized option: %s\", arg);\n  }\n  *arg_idx_ref = arg_idx;\n  *opt_len_ref = opt_len;\n  *xopt_idx_ref = xopt_idx;\n  *simple_opt_ref = simple_opt;\n  *stop_switch_ref = stop_switch;\n  *set_ref = set;\n  *val_ref = val;\n  *file_count_ref = file_count;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "check_num_option",
                "check_obj_option",
                "check_power2_option",
                "check_rangeset_option",
                "err_option_arg",
                "error",
                "isalpha",
                "isdigit",
                "opng_strpbrk_digit",
                "scan_option",
                "strchr",
                "strcmp",
                "strlen",
                "strncmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "arg_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const arg_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_len_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const opt_len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xopt_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const xopt_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "simple_opt_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const simple_opt_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stop_switch_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const stop_switch_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "set_ref",
                        "type": "opng_bitset_t * const",
                        "definition": [
                            "opng_bitset_t * const set_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file_count_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const file_count_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argc",
                        "type": "int",
                        "definition": [
                            "int argc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "argv",
                        "type": "char *[]",
                        "definition": [
                            "char *argv[]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg",
                        "type": "char * const",
                        "definition": [
                            "char * const arg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt",
                        "type": "char [16]",
                        "definition": [
                            "char opt[16]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xopt",
                        "type": "const char * const",
                        "definition": [
                            "const char * const xopt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int arg_idx = *arg_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opt_len",
                        "type": "size_t",
                        "definition": [
                            "size_t opt_len = *opt_len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "xopt_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int xopt_idx = *xopt_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "simple_opt",
                        "type": "int",
                        "definition": [
                            "int simple_opt = *simple_opt_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stop_switch",
                        "type": "int",
                        "definition": [
                            "int stop_switch = *stop_switch_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t set = *set_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "val",
                        "type": "int",
                        "definition": [
                            "int val = *val_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "file_count",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int file_count = *file_count_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "local_options",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_initialize",
            "header": "int opng_initialize(const struct opng_options *options, const struct opng_ui *ui)",
            "params": [
                "const struct opng_options *init_options",
                "const struct opng_ui *init_ui"
            ],
            "definition": "int opng_initialize(const struct opng_options *init_options, const struct opng_ui *init_ui)\n{\n  usr_printf = init_ui->printf_fn;\n  usr_print_cntrl = init_ui->print_cntrl_fn;\n  usr_progress = init_ui->progress_fn;\n  usr_panic = init_ui->panic_fn;\n  if ((((usr_printf == 0) || (usr_print_cntrl == 0)) || (usr_progress == 0)) || (usr_panic == 0))\n  {\n    return -1;\n  }\n  s_options = *init_options;\n  if (s_options.optim_level == 0)\n  {\n    s_options.nb = (s_options.nc = (s_options.np = 1));\n    s_options.nz = 1;\n  }\n  memset(&s_summary, 0, sizeof(s_summary));\n  s_engine.started = 1;\n  return 0;\n}\n\n",
            "calle": [
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct opng_options",
                        "type": "const struct opng_options *",
                        "definition": [
                            "const struct opng_options *init_options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct opng_ui",
                        "type": "const struct opng_ui *",
                        "definition": [
                            "const struct opng_ui *init_ui"
                        ]
                    },
                    {
                        "path": null,
                        "name": "usr_printf",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "usr_print_cntrl",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "usr_progress",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "usr_panic",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_options",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_summary",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_engine",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_optimize",
            "header": "int opng_optimize(const char *infile_name)",
            "params": [
                "const char *infile_name"
            ],
            "definition": "int opng_optimize(const char *infile_name)\n{\n  opng_status_t status;\n  volatile int result;\n  {\n    if (!s_engine.started)\n    {\n      usr_panic(\"The OptiPNG engine is not running\");\n    }\n  }\n  ;\n  usr_printf(\"** Processing: %s\\n\", infile_name);\n  s_summary.file_count += 1;\n  opng_clear_image_info();\n  {\n    helper_opng_optimize_1(&result, infile_name);\n  }\n  if ((!the_exception_context->caught) || ((status = the_exception_context->v.etmp, 0)))\n  {\n  }\n  else\n  {\n    {\n      if (!(status != OPNG_STATUS_OK))\n      {\n        usr_panic(\"opng_optimize_impl should throw errors only\");\n      }\n    }\n    ;\n    s_summary.err_count += 1;\n    result = -1;\n  }\n  opng_destroy_image_info();\n  usr_printf(\"\\n\");\n  return result;\n}\n\n",
            "calle": [
                "helper_opng_optimize_1",
                "opng_clear_image_info",
                "opng_destroy_image_info",
                "usr_panic",
                "usr_printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "infile_name",
                        "type": "const char *",
                        "definition": [
                            "const char *infile_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "status",
                        "type": "opng_status_t",
                        "definition": [
                            "opng_status_t status"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "volatile int",
                        "definition": [
                            "volatile int result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_engine",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "usr_panic",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "usr_printf",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_summary",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "the_exception_context",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_finalize",
            "header": "int opng_finalize(void)",
            "params": [
                "void"
            ],
            "definition": "int opng_finalize(void)\n{\n  if ((s_options.verbose || (s_summary.snip_count > 0)) || (s_summary.err_count > 0))\n  {\n    usr_printf(\"** Status report\\n\");\n    usr_printf(\"%u file(s) have been processed.\\n\", s_summary.file_count);\n    if (s_summary.snip_count > 0)\n    {\n      usr_printf(\"%u multi-image file(s) have been snipped.\\n\", s_summary.snip_count);\n    }\n    if (s_summary.err_count > 0)\n    {\n      usr_printf(\"%u error(s) have been encountered.\\n\", s_summary.err_count);\n      if (s_summary.fix_count > 0)\n      {\n        usr_printf(\"%u erroneous file(s) have been fixed.\\n\", s_summary.fix_count);\n      }\n    }\n  }\n  s_engine.started = 0;\n  return 0;\n}\n\n",
            "calle": [
                "usr_printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_options",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_summary",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "usr_printf",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_engine",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_print_fsize_ratio",
            "header": "",
            "params": [
                "opng_fsize_t num",
                "opng_fsize_t denom"
            ],
            "definition": "static void opng_print_fsize_ratio(opng_fsize_t num, opng_fsize_t denom)\n{\n  char buffer[32];\n  struct opng_ulratio ratio;\n  int result;\n  ratio.num = num;\n  ratio.denom = denom;\n  result = opng_ulratio_to_factor_string(buffer, sizeof(buffer), &ratio);\n  usr_printf(\"%s%s\", buffer, (result > 0) ? (\"\") : (\"...\"));\n}\n\n",
            "calle": [
                "opng_ulratio_to_factor_string",
                "usr_printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "num",
                        "type": "opng_fsize_t",
                        "definition": [
                            "opng_fsize_t num"
                        ]
                    },
                    {
                        "path": null,
                        "name": "denom",
                        "type": "opng_fsize_t",
                        "definition": [
                            "opng_fsize_t denom"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "char [32]",
                        "definition": [
                            "char buffer[32]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ratio",
                        "type": "struct opng_ulratio",
                        "definition": [
                            "struct opng_ulratio ratio"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "int",
                        "definition": [
                            "int result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "usr_printf",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_print_fsize_difference",
            "header": "",
            "params": [
                "opng_fsize_t init_size",
                "opng_fsize_t final_size",
                "int show_ratio"
            ],
            "definition": "static void opng_print_fsize_difference(opng_fsize_t init_size, opng_fsize_t final_size, int show_ratio)\n{\n  opng_fsize_t difference;\n  int sign;\n  if (init_size <= final_size)\n  {\n    sign = 0;\n    difference = final_size - init_size;\n  }\n  else\n  {\n    sign = 1;\n    difference = init_size - final_size;\n  }\n  if (difference == 0)\n  {\n    usr_printf(\"no change\");\n    return;\n  }\n  if (difference == 1)\n  {\n    usr_printf(\"1 byte\");\n  }\n  else\n    usr_printf(\"%lu bytes\", difference);\n  if (show_ratio && (init_size > 0))\n  {\n    usr_printf(\" = \");\n    opng_print_fsize_ratio(difference, init_size);\n  }\n  usr_printf((sign == 0) ? (\" increase\") : (\" decrease\"));\n}\n\n",
            "calle": [
                "opng_print_fsize_ratio",
                "usr_printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "init_size",
                        "type": "opng_fsize_t",
                        "definition": [
                            "opng_fsize_t init_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "final_size",
                        "type": "opng_fsize_t",
                        "definition": [
                            "opng_fsize_t final_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "show_ratio",
                        "type": "int",
                        "definition": [
                            "int show_ratio"
                        ]
                    },
                    {
                        "path": null,
                        "name": "difference",
                        "type": "opng_fsize_t",
                        "definition": [
                            "opng_fsize_t difference"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sign",
                        "type": "int",
                        "definition": [
                            "int sign"
                        ]
                    },
                    {
                        "path": null,
                        "name": "usr_printf",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_print_image_info",
            "header": "",
            "params": [
                "int show_dim",
                "int show_depth",
                "int show_type",
                "int show_interlaced"
            ],
            "definition": "static void opng_print_image_info(int show_dim, int show_depth, int show_type, int show_interlaced)\n{\n  static const int type_channels[8] = {1, 0, 3, 1, 2, 0, 4, 0};\n  int channels;\n  int printed;\n  printed = 0;\n  if (show_dim)\n  {\n    printed = 1;\n    usr_printf(\"%lux%lu pixels\", (unsigned long) s_image.width, (unsigned long) s_image.height);\n  }\n  if (show_depth)\n  {\n    if (printed)\n    {\n      usr_printf(\", \");\n    }\n    printed = 1;\n    channels = type_channels[s_image.color_type & 7];\n    if (channels != 1)\n    {\n      usr_printf(\"%dx%d bits/pixel\", channels, s_image.bit_depth);\n    }\n    else\n      if (s_image.bit_depth != 1)\n    {\n      usr_printf(\"%d bits/pixel\", s_image.bit_depth);\n    }\n    else\n      usr_printf(\"1 bit/pixel\");\n  }\n  if (show_type)\n  {\n    helper_opng_print_image_info_1(&printed);\n  }\n  if (show_interlaced)\n  {\n    if (s_image.interlace_type != 0)\n    {\n      if (printed)\n      {\n        usr_printf(\", \");\n      }\n      usr_printf(\"interlaced\");\n    }\n  }\n}\n\n",
            "calle": [
                "helper_opng_print_image_info_1",
                "usr_printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "show_dim",
                        "type": "int",
                        "definition": [
                            "int show_dim"
                        ]
                    },
                    {
                        "path": null,
                        "name": "show_depth",
                        "type": "int",
                        "definition": [
                            "int show_depth"
                        ]
                    },
                    {
                        "path": null,
                        "name": "show_type",
                        "type": "int",
                        "definition": [
                            "int show_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "show_interlaced",
                        "type": "int",
                        "definition": [
                            "int show_interlaced"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type_channels",
                        "type": "const int [8]",
                        "definition": [
                            "static const int type_channels[8] = {1, 0, 3, 1, 2, 0, 4, 0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "channels",
                        "type": "int",
                        "definition": [
                            "int channels"
                        ]
                    },
                    {
                        "path": null,
                        "name": "printed",
                        "type": "int",
                        "definition": [
                            "int printed"
                        ]
                    },
                    {
                        "path": null,
                        "name": "usr_printf",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_image",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_print_warning",
            "header": "",
            "params": [
                "const char *msg"
            ],
            "definition": "static void opng_print_warning(const char *msg)\n{\n  usr_print_cntrl('\\v');\n  usr_printf(\"Warning: %s\\n\", msg);\n}\n\n",
            "calle": [
                "usr_print_cntrl",
                "usr_printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "msg",
                        "type": "const char *",
                        "definition": [
                            "const char *msg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "usr_print_cntrl",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "usr_printf",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_print_error",
            "header": "",
            "params": [
                "const char *msg"
            ],
            "definition": "static void opng_print_error(const char *msg)\n{\n  usr_print_cntrl('\\v');\n  usr_printf(\"Error: %s\\n\", msg);\n}\n\n",
            "calle": [
                "usr_print_cntrl",
                "usr_printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "msg",
                        "type": "const char *",
                        "definition": [
                            "const char *msg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "usr_print_cntrl",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "usr_printf",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_throw_error",
            "header": "",
            "params": [
                "png_const_charp msg"
            ],
            "definition": "static void opng_throw_error(png_const_charp msg)\n{\n  opng_print_error(msg);\n  for (;; longjmp(*the_exception_context->penv, 1))\n  {\n    the_exception_context->v.etmp = OPNG_STATUS_ERR_OPTIPNG;\n  }\n\n}\n\n",
            "calle": [
                "longjmp",
                "opng_print_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "msg",
                        "type": "png_const_charp",
                        "definition": [
                            "png_const_charp msg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "the_exception_context",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_warning",
            "header": "",
            "params": [
                "png_structp png_ptr",
                "png_const_charp msg"
            ],
            "definition": "static void opng_warning(png_structp png_ptr, png_const_charp msg)\n{\n  if (png_ptr == s_read_ptr)\n  {\n    s_process.status |= INPUT_HAS_ERRORS | OUTPUT_NEEDS_NEW_IDAT;\n  }\n  opng_print_warning(msg);\n}\n\n",
            "calle": [
                "opng_print_warning"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg",
                        "type": "png_const_charp",
                        "definition": [
                            "png_const_charp msg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_read_ptr",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_process",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_error",
            "header": "",
            "params": [
                "png_structp png_ptr",
                "png_const_charp msg"
            ],
            "definition": "static void opng_error(png_structp png_ptr, png_const_charp msg)\n{\n  if (png_ptr == s_read_ptr)\n  {\n    s_process.status |= INPUT_HAS_ERRORS | OUTPUT_NEEDS_NEW_IDAT;\n    if (opng_validate_image(s_read_ptr, s_read_info_ptr))\n    {\n      opng_print_warning(msg);\n      for (;; longjmp(*the_exception_context->penv, 1))\n      {\n        the_exception_context->v.etmp = OPNG_STATUS_OK;\n      }\n\n    }\n  }\n  opng_print_error(msg);\n  for (;; longjmp(*the_exception_context->penv, 1))\n  {\n    the_exception_context->v.etmp = OPNG_STATUS_ERR_LIBPNG;\n  }\n\n}\n\n",
            "calle": [
                "longjmp",
                "opng_print_error",
                "opng_print_warning",
                "opng_validate_image"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "msg",
                        "type": "png_const_charp",
                        "definition": [
                            "png_const_charp msg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_read_ptr",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_process",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_read_info_ptr",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "the_exception_context",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_free",
            "header": "",
            "params": [
                "void *ptr"
            ],
            "definition": "static void opng_free(void *ptr)\n{\n  free(ptr);\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "void *",
                        "definition": [
                            "void *ptr"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_check_idat_size",
            "header": "",
            "params": [
                "opng_fsize_t size"
            ],
            "definition": "static void opng_check_idat_size(opng_fsize_t size)\n{\n  if (size > k_idat_size_max)\n  {\n    opng_throw_error(\"IDAT sizes larger than the maximum chunk size are currently unsupported\");\n  }\n}\n\n",
            "calle": [
                "opng_throw_error"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size",
                        "type": "opng_fsize_t",
                        "definition": [
                            "opng_fsize_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_idat_size_max",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_set_keep_unknown_chunk",
            "header": "",
            "params": [
                "png_structp png_ptr",
                "int keep",
                "png_bytep chunk_type"
            ],
            "definition": "static void opng_set_keep_unknown_chunk(png_structp png_ptr, int keep, png_bytep chunk_type)\n{\n  png_byte chunk_name[5];\n  memcpy(chunk_name, chunk_type, 4);\n  chunk_name[4] = 0;\n  if (!png_handle_as_unknown(png_ptr, chunk_name))\n  {\n    png_set_keep_unknown_chunks(png_ptr, keep, chunk_name, 1);\n  }\n}\n\n",
            "calle": [
                "memcpy",
                "png_handle_as_unknown",
                "png_set_keep_unknown_chunks"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "keep",
                        "type": "int",
                        "definition": [
                            "int keep"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chunk_type",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep chunk_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chunk_name",
                        "type": "png_byte [5]",
                        "definition": [
                            "png_byte chunk_name[5]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_is_image_chunk",
            "header": "",
            "params": [
                "png_bytep chunk_type"
            ],
            "definition": "static int opng_is_image_chunk(png_bytep chunk_type)\n{\n  if ((chunk_type[0] & 0x20) == 0)\n  {\n    return 1;\n  }\n  if (memcmp(chunk_type, k_sig_tRNS, 4) == 0)\n  {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "memcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "chunk_type",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep chunk_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_sig_tRNS",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_is_apng_chunk",
            "header": "",
            "params": [
                "png_bytep chunk_type"
            ],
            "definition": "static int opng_is_apng_chunk(png_bytep chunk_type)\n{\n  if (((memcmp(chunk_type, k_sig_acTL, 4) == 0) || (memcmp(chunk_type, k_sig_fcTL, 4) == 0)) || (memcmp(chunk_type, k_sig_fdAT, 4) == 0))\n  {\n    return 1;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "memcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "chunk_type",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep chunk_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k_sig_acTL",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "k_sig_fcTL",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "k_sig_fdAT",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_allow_chunk",
            "header": "",
            "params": [
                "png_bytep chunk_type"
            ],
            "definition": "static int opng_allow_chunk(png_bytep chunk_type)\n{\n  if (opng_is_image_chunk(chunk_type))\n  {\n    return 1;\n  }\n  if (s_options.strip_all)\n  {\n    return 0;\n  }\n  if (memcmp(chunk_type, k_sig_dSIG, 4) == 0)\n  {\n    return 0;\n  }\n  if (s_options.snip && opng_is_apng_chunk(chunk_type))\n  {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "calle": [
                "memcmp",
                "opng_is_apng_chunk",
                "opng_is_image_chunk"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "chunk_type",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep chunk_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_options",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "k_sig_dSIG",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_handle_chunk",
            "header": "",
            "params": [
                "png_structp png_ptr",
                "png_bytep chunk_type"
            ],
            "definition": "static void opng_handle_chunk(png_structp png_ptr, png_bytep chunk_type)\n{\n  int keep;\n  if (opng_is_image_chunk(chunk_type))\n  {\n    return;\n  }\n  if (s_options.strip_all)\n  {\n    s_process.status |= INPUT_HAS_STRIPPED_DATA | INPUT_HAS_JUNK;\n    opng_set_keep_unknown_chunk(png_ptr, 1, chunk_type);\n    return;\n  }\n  if (((memcmp(chunk_type, k_sig_bKGD, 4) == 0) || (memcmp(chunk_type, k_sig_hIST, 4) == 0)) || (memcmp(chunk_type, k_sig_sBIT, 4) == 0))\n  {\n    return;\n  }\n  keep = 3;\n  if (memcmp(chunk_type, k_sig_dSIG, 4) == 0)\n  {\n    s_process.status |= INPUT_HAS_DIGITAL_SIGNATURE;\n  }\n  else\n    if (opng_is_apng_chunk(chunk_type))\n  {\n    s_process.status |= INPUT_HAS_APNG;\n    if (memcmp(chunk_type, k_sig_fdAT, 4) == 0)\n    {\n      s_process.status |= INPUT_HAS_MULTIPLE_IMAGES;\n    }\n    if (s_options.snip)\n    {\n      s_process.status |= INPUT_HAS_JUNK;\n      keep = 1;\n    }\n  }\n  opng_set_keep_unknown_chunk(png_ptr, keep, chunk_type);\n}\n\n",
            "calle": [
                "memcmp",
                "opng_is_apng_chunk",
                "opng_is_image_chunk",
                "opng_set_keep_unknown_chunk"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chunk_type",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep chunk_type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "keep",
                        "type": "int",
                        "definition": [
                            "int keep"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_options",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_process",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "k_sig_bKGD",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "k_sig_hIST",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "k_sig_sBIT",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "k_sig_dSIG",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "k_sig_fdAT",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_init_read_data",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "static void opng_init_read_data(void)\n{\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_init_write_data",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "static void opng_init_write_data(void)\n{\n  s_process.out_file_size = 0;\n  s_process.out_plte_trns_size = 0;\n  s_process.out_idat_size = 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_process",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_read_data",
            "header": "",
            "params": [
                "png_structp png_ptr",
                "png_bytep data",
                "size_t length"
            ],
            "definition": "static void opng_read_data(png_structp png_ptr, png_bytep data, size_t length)\n{\n  FILE *stream = (FILE *) png_get_io_ptr(png_ptr);\n  int io_state = png_get_io_state(png_ptr);\n  int io_state_loc = io_state & 0x00f0;\n  png_bytep chunk_sig;\n  if (fread(data, 1, length, stream) != length)\n  {\n    png_error(png_ptr, \"Can't read the input file or unexpected end of file\");\n  }\n  if (s_process.in_file_size == 0)\n  {\n    helper_opng_read_data_1(png_ptr, length, stream, io_state_loc);\n  }\n  s_process.in_file_size += length;\n  {\n    if (!((io_state & 0x0001) && (io_state_loc != 0)))\n    {\n      usr_panic(\"Incorrect info in png_ptr->io_state\");\n    }\n  }\n  ;\n  if (io_state_loc == 0x0020)\n  {\n    helper_opng_read_data_2(&chunk_sig, png_ptr, data, length);\n  }\n  else\n    if (io_state_loc == 0x0080)\n  {\n    {\n      if (!(length == 4))\n      {\n        usr_panic(\"Reading chunk CRC, expecting 4 bytes\");\n      }\n    }\n    ;\n  }\n}\n\n",
            "calle": [
                "fread",
                "helper_opng_read_data_1",
                "helper_opng_read_data_2",
                "png_error",
                "png_get_io_ptr",
                "png_get_io_state",
                "usr_panic"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream = (FILE *) png_get_io_ptr(png_ptr)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "io_state",
                        "type": "int",
                        "definition": [
                            "int io_state = png_get_io_state(png_ptr)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "io_state_loc",
                        "type": "int",
                        "definition": [
                            "int io_state_loc = io_state & 0x00f0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chunk_sig",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep chunk_sig"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_process",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "usr_panic",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_write_data",
            "header": "",
            "params": [
                "png_structp png_ptr",
                "png_bytep data",
                "size_t length"
            ],
            "definition": "static void opng_write_data(png_structp png_ptr, png_bytep data, size_t length)\n{\n  static int allow_crt_chunk;\n  static int crt_chunk_is_idat;\n  static opng_foffset_t crt_idat_offset;\n  static opng_fsize_t crt_idat_size;\n  static png_uint_32 crt_idat_crc;\n  FILE *stream = (FILE *) png_get_io_ptr(png_ptr);\n  int io_state = png_get_io_state(png_ptr);\n  int io_state_loc = io_state & 0x00f0;\n  png_bytep chunk_sig;\n  png_byte buf[4];\n  {\n    if (!((io_state & 0x0002) && (io_state_loc != 0)))\n    {\n      usr_panic(\"Incorrect info in png_ptr->io_state\");\n    }\n  }\n  ;\n  if (io_state_loc == 0x0020)\n  {\n    helper_opng_write_data_1(&allow_crt_chunk, &crt_chunk_is_idat, &chunk_sig, data, length, stream);\n  }\n  else\n    if (io_state_loc == 0x0080)\n  {\n    {\n      if (!(length == 4))\n      {\n        usr_panic(\"Writing chunk CRC, expecting 4 bytes\");\n      }\n    }\n    ;\n  }\n  if (stream == 0)\n  {\n    return;\n  }\n  if ((io_state_loc != 0x0010) && (!allow_crt_chunk))\n  {\n    return;\n  }\n  switch (io_state_loc)\n  {\n    case 0x0020:\n    {\n      helper_opng_write_data_2(&crt_idat_offset, &crt_idat_size, &crt_idat_crc, &io_state, png_ptr, data, length, crt_chunk_is_idat, stream, buf);\n    }\n\n    case 0x0040:\n    {\n      if (crt_chunk_is_idat)\n      {\n        crt_idat_crc = crc32(crt_idat_crc, data, length);\n      }\n      break;\n    }\n\n    case 0x0080:\n    {\n      if (crt_chunk_is_idat)\n      {\n        return;\n      }\n      break;\n    }\n\n  }\n\n  if (fwrite(data, 1, length, stream) != length)\n  {\n    png_error(png_ptr, \"Can't write the output file\");\n  }\n  s_process.out_file_size += length;\n}\n\n",
            "calle": [
                "crc32",
                "fwrite",
                "helper_opng_write_data_1",
                "helper_opng_write_data_2",
                "png_error",
                "png_get_io_ptr",
                "png_get_io_state",
                "usr_panic"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "allow_crt_chunk",
                        "type": "int",
                        "definition": [
                            "static int allow_crt_chunk"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crt_chunk_is_idat",
                        "type": "int",
                        "definition": [
                            "static int crt_chunk_is_idat"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crt_idat_offset",
                        "type": "opng_foffset_t",
                        "definition": [
                            "static opng_foffset_t crt_idat_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crt_idat_size",
                        "type": "opng_fsize_t",
                        "definition": [
                            "static opng_fsize_t crt_idat_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crt_idat_crc",
                        "type": "png_uint_32",
                        "definition": [
                            "static png_uint_32 crt_idat_crc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream = (FILE *) png_get_io_ptr(png_ptr)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "io_state",
                        "type": "int",
                        "definition": [
                            "int io_state = png_get_io_state(png_ptr)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "io_state_loc",
                        "type": "int",
                        "definition": [
                            "int io_state_loc = io_state & 0x00f0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chunk_sig",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep chunk_sig"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "png_byte [4]",
                        "definition": [
                            "png_byte buf[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "usr_panic",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_process",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_clear_image_info",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "static void opng_clear_image_info(void)\n{\n  memset(&s_image, 0, sizeof(s_image));\n}\n\n",
            "calle": [
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_image",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_load_image_info",
            "header": "",
            "params": [
                "png_structp png_ptr",
                "png_infop info_ptr",
                "int load_meta"
            ],
            "definition": "static void opng_load_image_info(png_structp png_ptr, png_infop info_ptr, int load_meta)\n{\n  memset(&s_image, 0, sizeof(s_image));\n  png_get_IHDR(png_ptr, info_ptr, &s_image.width, &s_image.height, &s_image.bit_depth, &s_image.color_type, &s_image.interlace_type, &s_image.compression_type, &s_image.filter_type);\n  s_image.row_pointers = png_get_rows(png_ptr, info_ptr);\n  png_get_PLTE(png_ptr, info_ptr, &s_image.palette, &s_image.num_palette);\n  if (png_get_tRNS(png_ptr, info_ptr, &s_image.trans_alpha, &s_image.num_trans, &s_image.trans_color_ptr))\n  {\n    if (s_image.trans_color_ptr != 0)\n    {\n      s_image.trans_color = *s_image.trans_color_ptr;\n      s_image.trans_color_ptr = &s_image.trans_color;\n    }\n  }\n  if (!load_meta)\n  {\n    return;\n  }\n  if (png_get_bKGD(png_ptr, info_ptr, &s_image.background_ptr))\n  {\n    s_image.background = *s_image.background_ptr;\n    s_image.background_ptr = &s_image.background;\n  }\n  png_get_hIST(png_ptr, info_ptr, &s_image.hist);\n  if (png_get_sBIT(png_ptr, info_ptr, &s_image.sig_bit_ptr))\n  {\n    s_image.sig_bit = *s_image.sig_bit_ptr;\n    s_image.sig_bit_ptr = &s_image.sig_bit;\n  }\n  s_image.num_unknowns = png_get_unknown_chunks(png_ptr, info_ptr, &s_image.unknowns);\n}\n\n",
            "calle": [
                "memset",
                "png_get_IHDR",
                "png_get_PLTE",
                "png_get_bKGD",
                "png_get_hIST",
                "png_get_rows",
                "png_get_sBIT",
                "png_get_tRNS",
                "png_get_unknown_chunks"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_infop",
                        "definition": [
                            "png_infop info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "load_meta",
                        "type": "int",
                        "definition": [
                            "int load_meta"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_image",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_store_image_info",
            "header": "",
            "params": [
                "png_structp png_ptr",
                "png_infop info_ptr",
                "int store_meta"
            ],
            "definition": "static void opng_store_image_info(png_structp png_ptr, png_infop info_ptr, int store_meta)\n{\n  int i;\n  {\n    if (!(s_image.row_pointers != 0))\n    {\n      usr_panic(\"No info in image\");\n    }\n  }\n  ;\n  png_set_IHDR(png_ptr, info_ptr, s_image.width, s_image.height, s_image.bit_depth, s_image.color_type, s_image.interlace_type, s_image.compression_type, s_image.filter_type);\n  png_set_rows(s_write_ptr, s_write_info_ptr, s_image.row_pointers);\n  if (s_image.palette != 0)\n  {\n    png_set_PLTE(png_ptr, info_ptr, s_image.palette, s_image.num_palette);\n  }\n  if ((s_image.trans_alpha != 0) || (s_image.trans_color_ptr != 0))\n  {\n    png_set_tRNS(png_ptr, info_ptr, s_image.trans_alpha, s_image.num_trans, s_image.trans_color_ptr);\n  }\n  if (!store_meta)\n  {\n    return;\n  }\n  if (s_image.background_ptr != 0)\n  {\n    png_set_bKGD(png_ptr, info_ptr, s_image.background_ptr);\n  }\n  if (s_image.hist != 0)\n  {\n    png_set_hIST(png_ptr, info_ptr, s_image.hist);\n  }\n  if (s_image.sig_bit_ptr != 0)\n  {\n    png_set_sBIT(png_ptr, info_ptr, s_image.sig_bit_ptr);\n  }\n  if (s_image.num_unknowns != 0)\n  {\n    png_set_unknown_chunks(png_ptr, info_ptr, s_image.unknowns, s_image.num_unknowns);\n    for (i = 0; i < s_image.num_unknowns; i += 1)\n    {\n      png_set_unknown_chunk_location(png_ptr, info_ptr, i, s_image.unknowns[i].location);\n    }\n\n  }\n}\n\n",
            "calle": [
                "png_set_IHDR",
                "png_set_PLTE",
                "png_set_bKGD",
                "png_set_hIST",
                "png_set_rows",
                "png_set_sBIT",
                "png_set_tRNS",
                "png_set_unknown_chunk_location",
                "png_set_unknown_chunks",
                "usr_panic"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "info_ptr",
                        "type": "png_infop",
                        "definition": [
                            "png_infop info_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "store_meta",
                        "type": "int",
                        "definition": [
                            "int store_meta"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_image",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "usr_panic",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_write_ptr",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_write_info_ptr",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_destroy_image_info",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "static void opng_destroy_image_info(void)\n{\n  png_uint_32 i;\n  int j;\n  if (s_image.row_pointers == 0)\n  {\n    return;\n  }\n  for (i = 0; i < s_image.height; i += 1)\n  {\n    opng_free(s_image.row_pointers[i]);\n  }\n\n  opng_free(s_image.row_pointers);\n  opng_free(s_image.palette);\n  opng_free(s_image.trans_alpha);\n  opng_free(s_image.hist);\n  for (j = 0; j < s_image.num_unknowns; j += 1)\n  {\n    opng_free(s_image.unknowns[j].data);\n  }\n\n  opng_free(s_image.unknowns);\n  memset(&s_image, 0, sizeof(s_image));\n}\n\n",
            "calle": [
                "memset",
                "opng_free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "int",
                        "definition": [
                            "int j"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_image",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_read_file",
            "header": "",
            "params": [
                "FILE *infile"
            ],
            "definition": "static void opng_read_file(FILE *infile)\n{\n  const char *fmt_name;\n  unsigned int fmt_name_idx = 0;\n  int num_img;\n  png_uint_32 reductions;\n  volatile opng_status_t status;\n  status = OPNG_STATUS_OK;\n  {\n    helper_opng_read_file_1(&fmt_name_idx, &num_img, infile, fmt_name);\n  }\n  if ((!the_exception_context->caught) || ((status = the_exception_context->v.etmp, 0)))\n  {\n  }\n  else\n  {\n    if (opng_validate_image(s_read_ptr, s_read_info_ptr))\n    {\n      if (!(status == OPNG_STATUS_OK))\n      {\n        usr_panic(\"Mysterious error in validated image file\");\n      }\n    }\n    ;\n  }\n  {\n    helper_opng_read_file_2(&reductions, &status, fmt_name);\n  }\n  if ((!the_exception_context->caught) || ((status = the_exception_context->v.etmp, 0)))\n  {\n  }\n  else\n  {\n    png_data_freer(s_read_ptr, s_read_info_ptr, 1, 0xffffU);\n    png_destroy_read_struct(&s_read_ptr, &s_read_info_ptr, 0);\n    for (;; longjmp(*the_exception_context->penv, 1))\n    {\n      the_exception_context->v.etmp = status;\n    }\n\n  }\n  png_data_freer(s_read_ptr, s_read_info_ptr, 2, 0xffffU);\n  png_destroy_read_struct(&s_read_ptr, &s_read_info_ptr, 0);\n}\n\n",
            "calle": [
                "helper_opng_read_file_1",
                "helper_opng_read_file_2",
                "longjmp",
                "opng_validate_image",
                "png_data_freer",
                "png_destroy_read_struct",
                "usr_panic"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "infile",
                        "type": "FILE *",
                        "definition": [
                            "FILE *infile"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmt_name",
                        "type": "const char *",
                        "definition": [
                            "const char *fmt_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmt_name_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int fmt_name_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_img",
                        "type": "int",
                        "definition": [
                            "int num_img"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reductions",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 reductions"
                        ]
                    },
                    {
                        "path": null,
                        "name": "status",
                        "type": "volatile opng_status_t",
                        "definition": [
                            "volatile opng_status_t status"
                        ]
                    },
                    {
                        "path": null,
                        "name": "the_exception_context",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_read_ptr",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_read_info_ptr",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "usr_panic",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_write_file",
            "header": "",
            "params": [
                "FILE *outfile",
                "int compression_level",
                "int memory_level",
                "int compression_strategy",
                "int filter"
            ],
            "definition": "static void opng_write_file(FILE *outfile, int compression_level, int memory_level, int compression_strategy, int filter)\n{\n  volatile opng_status_t status;\n  {\n    if (!((((((((compression_level >= 1) && (compression_level <= 9)) && (memory_level >= 1)) && (memory_level <= 9)) && (compression_strategy >= 0)) && (compression_strategy <= 3)) && (filter >= 0)) && (filter <= 5)))\n    {\n      usr_panic(\"Invalid encoding parameters\");\n    }\n  }\n  ;\n  status = OPNG_STATUS_OK;\n  {\n    helper_opng_write_file_1(outfile, compression_level, memory_level, compression_strategy, filter);\n  }\n  if ((!the_exception_context->caught) || ((status = the_exception_context->v.etmp, 0)))\n  {\n  }\n  else\n  {\n    s_process.out_idat_size = k_idat_size_max + 1;\n  }\n  png_destroy_write_struct(&s_write_ptr, &s_write_info_ptr);\n  if (status != OPNG_STATUS_OK)\n  {\n    for (;; longjmp(*the_exception_context->penv, 1))\n    {\n      the_exception_context->v.etmp = status;\n    }\n\n  }\n}\n\n",
            "calle": [
                "helper_opng_write_file_1",
                "longjmp",
                "png_destroy_write_struct",
                "usr_panic"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "outfile",
                        "type": "FILE *",
                        "definition": [
                            "FILE *outfile"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compression_level",
                        "type": "int",
                        "definition": [
                            "int compression_level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "memory_level",
                        "type": "int",
                        "definition": [
                            "int memory_level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compression_strategy",
                        "type": "int",
                        "definition": [
                            "int compression_strategy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filter",
                        "type": "int",
                        "definition": [
                            "int filter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "status",
                        "type": "volatile opng_status_t",
                        "definition": [
                            "volatile opng_status_t status"
                        ]
                    },
                    {
                        "path": null,
                        "name": "usr_panic",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "the_exception_context",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_process",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "k_idat_size_max",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_write_ptr",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_write_info_ptr",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_copy_file",
            "header": "",
            "params": [
                "FILE *infile",
                "FILE *outfile"
            ],
            "definition": "static void opng_copy_file(FILE *infile, FILE *outfile)\n{\n  volatile png_bytep buf;\n  const png_uint_32 buf_size_incr = 0x1000;\n  png_uint_32 buf_size;\n  png_uint_32 length;\n  png_byte chunk_hdr[8];\n  volatile opng_status_t status;\n  s_write_ptr = png_create_write_struct(\"1.6.40\", 0, opng_error, opng_warning);\n  if (s_write_ptr == 0)\n  {\n    opng_throw_error(\"Can't create image encoder\");\n  }\n  opng_init_write_data();\n  png_set_write_fn(s_write_ptr, outfile, opng_write_data, 0);\n  status = OPNG_STATUS_OK;\n  {\n    helper_opng_copy_file_1(&buf, &buf_size, &length, infile, buf_size_incr, chunk_hdr);\n  }\n  if ((!the_exception_context->caught) || ((status = the_exception_context->v.etmp, 0)))\n  {\n  }\n  else\n  {\n  }\n  png_free(s_write_ptr, buf);\n  png_destroy_write_struct(&s_write_ptr, 0);\n  if (status != OPNG_STATUS_OK)\n  {\n    for (;; longjmp(*the_exception_context->penv, 1))\n    {\n      the_exception_context->v.etmp = status;\n    }\n\n  }\n}\n\n",
            "calle": [
                "helper_opng_copy_file_1",
                "longjmp",
                "opng_error",
                "opng_init_write_data",
                "opng_throw_error",
                "opng_warning",
                "opng_write_data",
                "png_create_write_struct",
                "png_destroy_write_struct",
                "png_free",
                "png_set_write_fn"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "infile",
                        "type": "FILE *",
                        "definition": [
                            "FILE *infile"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outfile",
                        "type": "FILE *",
                        "definition": [
                            "FILE *outfile"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "volatile png_bytep",
                        "definition": [
                            "volatile png_bytep buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_size_incr",
                        "type": "const png_uint_32",
                        "definition": [
                            "const png_uint_32 buf_size_incr = 0x1000"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_size",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 buf_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chunk_hdr",
                        "type": "png_byte [8]",
                        "definition": [
                            "png_byte chunk_hdr[8]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "status",
                        "type": "volatile opng_status_t",
                        "definition": [
                            "volatile opng_status_t status"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_write_ptr",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "the_exception_context",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_init_iteration",
            "header": "",
            "params": [
                "opng_bitset_t cmdline_set",
                "opng_bitset_t mask_set",
                "const char *preset",
                "opng_bitset_t *output_set"
            ],
            "definition": "static void opng_init_iteration(opng_bitset_t cmdline_set, opng_bitset_t mask_set, const char *preset, opng_bitset_t *output_set)\n{\n  opng_bitset_t preset_set;\n  int check;\n  *output_set = cmdline_set & mask_set;\n  if (((*output_set) == 0) && (cmdline_set != 0))\n  {\n    opng_throw_error(\"Iteration parameter(s) out of range\");\n  }\n  if ((s_options.optim_level >= 0) || ((*output_set) == 0))\n  {\n    check = opng_strparse_rangeset_to_bitset(&preset_set, preset, mask_set);\n    {\n      if (!(check == 0))\n      {\n        usr_panic(\"[internal] Invalid preset\");\n      }\n    }\n    ;\n    *output_set |= preset_set & mask_set;\n  }\n}\n\n",
            "calle": [
                "opng_strparse_rangeset_to_bitset",
                "opng_throw_error",
                "usr_panic"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "cmdline_set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t cmdline_set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask_set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t mask_set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "preset",
                        "type": "const char *",
                        "definition": [
                            "const char *preset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "output_set",
                        "type": "opng_bitset_t *",
                        "definition": [
                            "opng_bitset_t *output_set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "preset_set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t preset_set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "check",
                        "type": "int",
                        "definition": [
                            "int check"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_options",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "usr_panic",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_init_iterations",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "static void opng_init_iterations(void)\n{\n  opng_bitset_t compr_level_set;\n  opng_bitset_t mem_level_set;\n  opng_bitset_t strategy_set;\n  opng_bitset_t filter_set;\n  opng_bitset_t strategy_singles_set;\n  int preset_index;\n  int t1;\n  int t2;\n  if (s_options.full || (s_process.status & OUTPUT_NEEDS_NEW_IDAT))\n  {\n    s_process.max_idat_size = k_idat_size_max;\n  }\n  else\n  {\n    {\n      if (!(s_process.in_idat_size > 0))\n      {\n        usr_panic(\"No IDAT in input\");\n      }\n    }\n    ;\n    s_process.max_idat_size = s_process.in_idat_size + s_process.in_plte_trns_size;\n  }\n  preset_index = s_options.optim_level;\n  if (preset_index < 0)\n  {\n    preset_index = 2;\n  }\n  else\n    if (preset_index > 7)\n  {\n    preset_index = 7;\n  }\n  opng_init_iteration(s_options.compr_level_set, (1 << (9 + 1)) - (1 << 1), k_presets[preset_index].compr_level, &compr_level_set);\n  opng_init_iteration(s_options.mem_level_set, (1 << (9 + 1)) - (1 << 1), k_presets[preset_index].mem_level, &mem_level_set);\n  opng_init_iteration(s_options.strategy_set, (1 << (3 + 1)) - (1 << 0), k_presets[preset_index].strategy, &strategy_set);\n  opng_init_iteration(s_options.filter_set, (1 << (5 + 1)) - (1 << 0), k_presets[preset_index].filter, &filter_set);\n  if (compr_level_set == 0)\n  {\n    compr_level_set |= 1U << 9;\n  }\n  if (mem_level_set == 0)\n  {\n    mem_level_set |= 1U << 8;\n  }\n  if ((s_image.bit_depth < 8) || (s_image.palette != 0))\n  {\n    if (strategy_set == 0)\n    {\n      strategy_set |= 1U << 0;\n    }\n    if (filter_set == 0)\n    {\n      filter_set |= 1U << 0;\n    }\n  }\n  else\n  {\n    if (strategy_set == 0)\n    {\n      strategy_set |= 1U << 1;\n    }\n    if (filter_set == 0)\n    {\n      filter_set |= 1U << 5;\n    }\n  }\n  s_process.compr_level_set = compr_level_set;\n  s_process.mem_level_set = mem_level_set;\n  s_process.strategy_set = strategy_set;\n  s_process.filter_set = filter_set;\n  strategy_singles_set = (1 << 2) | (1 << 3);\n  t1 = opng_bitset_count(compr_level_set) * opng_bitset_count(strategy_set & (~strategy_singles_set));\n  t2 = opng_bitset_count(strategy_set & strategy_singles_set);\n  s_process.num_iterations = ((t1 + t2) * opng_bitset_count(mem_level_set)) * opng_bitset_count(filter_set);\n  {\n    if (!(s_process.num_iterations > 0))\n    {\n      usr_panic(\"Invalid iteration parameters\");\n    }\n  }\n  ;\n}\n\n",
            "calle": [
                "opng_bitset_count",
                "opng_init_iteration",
                "usr_panic"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compr_level_set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t compr_level_set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mem_level_set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t mem_level_set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strategy_set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t strategy_set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filter_set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t filter_set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strategy_singles_set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t strategy_singles_set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "preset_index",
                        "type": "int",
                        "definition": [
                            "int preset_index"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t1",
                        "type": "int",
                        "definition": [
                            "int t1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t2",
                        "type": "int",
                        "definition": [
                            "int t2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_options",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_process",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "k_idat_size_max",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "usr_panic",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "k_presets",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_image",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_iterate",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "static void opng_iterate(void)\n{\n  opng_bitset_t compr_level_set;\n  opng_bitset_t mem_level_set;\n  opng_bitset_t strategy_set;\n  opng_bitset_t filter_set;\n  int compr_level;\n  int mem_level;\n  int strategy;\n  int filter;\n  int counter;\n  int line_reused;\n  {\n    if (!(s_process.num_iterations > 0))\n    {\n      usr_panic(\"Iterations not initialized\");\n    }\n  }\n  ;\n  compr_level_set = s_process.compr_level_set;\n  mem_level_set = s_process.mem_level_set;\n  strategy_set = s_process.strategy_set;\n  filter_set = s_process.filter_set;\n  if ((s_process.num_iterations == 1) && (s_process.status & OUTPUT_NEEDS_NEW_IDAT))\n  {\n    s_process.best_idat_size = 0;\n    s_process.best_compr_level = opng_bitset_find_first(compr_level_set);\n    s_process.best_mem_level = opng_bitset_find_first(mem_level_set);\n    s_process.best_strategy = opng_bitset_find_first(strategy_set);\n    s_process.best_filter = opng_bitset_find_first(filter_set);\n    return;\n  }\n  s_process.best_idat_size = k_idat_size_max + 1;\n  s_process.best_compr_level = -1;\n  s_process.best_mem_level = -1;\n  s_process.best_strategy = -1;\n  s_process.best_filter = -1;\n  usr_printf(\"\\nTrying:\\n\");\n  line_reused = 0;\n  counter = 0;\n  for (filter = 0; filter <= 5; filter += 1)\n  {\n    helper_opng_iterate_1(&compr_level_set, &compr_level, &mem_level, &strategy, &counter, &line_reused, mem_level_set, strategy_set, filter_set, filter);\n  }\n\n  if (line_reused)\n  {\n    usr_print_cntrl(-31);\n  }\n  {\n    if (!(counter == s_process.num_iterations))\n    {\n      usr_panic(\"Inconsistent iteration counter\");\n    }\n  }\n  ;\n  usr_progress(counter, s_process.num_iterations);\n}\n\n",
            "calle": [
                "helper_opng_iterate_1",
                "opng_bitset_find_first",
                "usr_panic",
                "usr_print_cntrl",
                "usr_printf",
                "usr_progress"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compr_level_set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t compr_level_set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mem_level_set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t mem_level_set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strategy_set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t strategy_set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filter_set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t filter_set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compr_level",
                        "type": "int",
                        "definition": [
                            "int compr_level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mem_level",
                        "type": "int",
                        "definition": [
                            "int mem_level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strategy",
                        "type": "int",
                        "definition": [
                            "int strategy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filter",
                        "type": "int",
                        "definition": [
                            "int filter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "counter",
                        "type": "int",
                        "definition": [
                            "int counter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "line_reused",
                        "type": "int",
                        "definition": [
                            "int line_reused"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_process",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "usr_panic",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "k_idat_size_max",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "usr_printf",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "usr_print_cntrl",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "usr_progress",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_finish_iterations",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "static void opng_finish_iterations(void)\n{\n  if ((s_process.best_idat_size + s_process.out_plte_trns_size) < (s_process.in_idat_size + s_process.in_plte_trns_size))\n  {\n    s_process.status |= OUTPUT_NEEDS_NEW_IDAT;\n  }\n  if (s_process.status & OUTPUT_NEEDS_NEW_IDAT)\n  {\n    if (s_process.best_idat_size <= k_idat_size_max)\n    {\n      usr_printf(\"\\nSelecting parameters:\\n\");\n      usr_printf(\"  zc = %d  zm = %d  zs = %d  f = %d\", s_process.best_compr_level, s_process.best_mem_level, s_process.best_strategy, s_process.best_filter);\n      if (s_process.best_idat_size > 0)\n      {\n        usr_printf(\"\\t\\tIDAT size = %lu\", s_process.best_idat_size);\n      }\n      usr_printf(\"\\n\");\n    }\n    else\n    {\n      usr_printf(\"  zc = *  zm = *  zs = *  f = *\\t\\tIDAT size > %s\\n\", k_idat_size_max_string);\n    }\n  }\n}\n\n",
            "calle": [
                "usr_printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_process",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "k_idat_size_max",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "usr_printf",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "k_idat_size_max_string",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_optimize_impl",
            "header": "",
            "params": [
                "const char *infile_name"
            ],
            "definition": "static void opng_optimize_impl(const char *infile_name)\n{\n  static FILE *infile;\n  unsigned int infile_idx = 0;\n  static FILE *outfile;\n  unsigned int outfile_idx = 0;\n  static const char *infile_name_local;\n  unsigned int infile_name_local_idx = 0;\n  static const char *outfile_name;\n  unsigned int outfile_name_idx = 0;\n  static const char *bakfile_name;\n  unsigned int bakfile_name_idx = 0;\n  static int new_outfile;\n  static int has_backup;\n  char name_buf[1024];\n  char tmp_buf[1024];\n  volatile opng_status_t status;\n  memset(&s_process, 0, sizeof(s_process));\n  if (s_options.force)\n  {\n    s_process.status |= OUTPUT_NEEDS_NEW_IDAT;\n  }\n  infile_name_local_idx = infile_name;\n  if ((infile_idx = fopen(infile_name_local, \"rb\")) == 0)\n  {\n    opng_throw_error(\"Can't open the input file\");\n  }\n  status = OPNG_STATUS_OK;\n  {\n    jmp_buf *exception__prev[1];\n    jmp_buf exception__env;\n    exception__prev[0] = the_exception_context->penv;\n    the_exception_context->penv = &exception__env;\n    if (setjmp(exception__env) == 0)\n    {\n      do\n      {\n        opng_read_file(infile);\n      }\n      while (the_exception_context->caught = 0, the_exception_context->caught);\n    }\n    else\n    {\n      the_exception_context->caught = 1;\n    }\n    the_exception_context->penv = exception__prev[0];\n  }\n  if ((!the_exception_context->caught) || ((status = the_exception_context->v.etmp, 0)))\n  {\n  }\n  else\n  {\n    {\n      if (!(status != OPNG_STATUS_OK))\n      {\n        usr_panic(\"opng_read_file should throw errors only\");\n      }\n    }\n    ;\n  }\n  fclose(infile);\n  if (status != OPNG_STATUS_OK)\n  {\n    for (;; longjmp(*the_exception_context->penv, 1))\n    {\n      the_exception_context->v.etmp = status;\n    }\n\n  }\n  if (s_process.status & INPUT_HAS_ERRORS)\n  {\n    usr_printf(\"Recoverable errors found in input.\");\n    if (s_options.fix)\n    {\n      usr_printf(\" Fixing...\\n\");\n      s_process.status |= OUTPUT_NEEDS_NEW_FILE;\n    }\n    else\n    {\n      usr_printf(\" Rerun OptiPNG with -fix enabled.\\n\");\n      opng_throw_error(\"Previous error(s) not fixed\");\n    }\n  }\n  if (s_process.status & INPUT_HAS_JUNK)\n  {\n    s_process.status |= OUTPUT_NEEDS_NEW_FILE;\n  }\n  if (!(s_process.status & INPUT_HAS_PNG_SIGNATURE))\n  {\n    s_process.status |= OUTPUT_NEEDS_NEW_FILE;\n  }\n  if (s_process.status & INPUT_HAS_PNG_DATASTREAM)\n  {\n    if (s_options.nz && (s_process.status & OUTPUT_NEEDS_NEW_IDAT))\n    {\n      usr_printf(\"IDAT recoding is necessary, but is disabled by the user.\\n\");\n      opng_throw_error(\"Can't continue\");\n    }\n  }\n  else\n    s_process.status |= OUTPUT_NEEDS_NEW_IDAT;\n  if (s_process.status & INPUT_HAS_DIGITAL_SIGNATURE)\n  {\n    usr_printf(\"Digital signature found in input.\");\n    if (s_options.force)\n    {\n      usr_printf(\" Erasing...\\n\");\n      s_process.status |= OUTPUT_NEEDS_NEW_FILE;\n    }\n    else\n    {\n      usr_printf(\" Rerun OptiPNG with -force enabled.\\n\");\n      opng_throw_error(\"Can't optimize digitally-signed files\");\n    }\n  }\n  if (s_process.status & INPUT_HAS_MULTIPLE_IMAGES)\n  {\n    if ((!s_options.snip) && (!(s_process.status & INPUT_IS_PNG_FILE)))\n    {\n      usr_printf(\"Conversion to PNG requires snipping. Rerun OptiPNG with -snip enabled.\\n\");\n      opng_throw_error(\"Incompatible input format\");\n    }\n  }\n  if (s_options.snip && (s_process.status & INPUT_HAS_APNG))\n  {\n    s_process.status |= OUTPUT_NEEDS_NEW_FILE;\n  }\n  if (s_process.status & INPUT_HAS_STRIPPED_DATA)\n  {\n    usr_printf(\"Stripping metadata...\\n\");\n  }\n  outfile_name_idx = 0;\n  if (!(s_process.status & INPUT_IS_PNG_FILE))\n  {\n    if (opng_path_replace_ext(name_buf, sizeof(name_buf), infile_name_local, \".png\") == 0)\n    {\n      opng_throw_error(\"Can't create the output file (name too long)\");\n    }\n    outfile_name_idx = name_buf;\n  }\n  if (s_options.out_name != 0)\n  {\n    outfile_name_idx = s_options.out_name;\n  }\n  if (s_options.dir_name != 0)\n  {\n    const char *tmp_name;\n    unsigned int tmp_name_idx = 0;\n    if ((&outfile_name[outfile_name_idx]) != 0)\n    {\n      strcpy(tmp_buf, outfile_name);\n      tmp_name_idx = tmp_buf;\n    }\n    else\n      tmp_name_idx = &infile_name_local[infile_name_local_idx];\n    if (opng_path_replace_dir(name_buf, sizeof(name_buf), tmp_name, s_options.dir_name) == 0)\n    {\n      opng_throw_error(\"Can't create the output file (name too long)\");\n    }\n    outfile_name_idx = name_buf;\n  }\n  if ((&outfile_name[outfile_name_idx]) == 0)\n  {\n    outfile_name_idx = &infile_name_local[infile_name_local_idx];\n    new_outfile = 0;\n  }\n  else\n  {\n    int test_eq = opng_os_test_file_equiv(infile_name_local, outfile_name);\n    if (test_eq >= 0)\n    {\n      new_outfile = test_eq == 0;\n    }\n    else\n    {\n      new_outfile = strcmp(infile_name_local, outfile_name) != 0;\n    }\n  }\n  bakfile_name_idx = tmp_buf;\n  if (new_outfile)\n  {\n    if (opng_path_make_backup(tmp_buf, sizeof(tmp_buf), outfile_name) == 0)\n    {\n      bakfile_name_idx = 0;\n    }\n  }\n  else\n  {\n    if (opng_path_make_backup(tmp_buf, sizeof(tmp_buf), infile_name_local) == 0)\n    {\n      bakfile_name_idx = 0;\n    }\n  }\n  if ((&bakfile_name[bakfile_name_idx]) == 0)\n  {\n    opng_throw_error(\"Can't create backup file (name too long)\");\n  }\n  if ((!s_options.simulate) && (opng_os_test_file_access(outfile_name, \"e\") == 0))\n  {\n    if (((!s_options.backup) && (!s_options.clobber)) && new_outfile)\n    {\n      usr_printf(\"The output file exists. Rerun OptiPNG with -backup enabled.\\n\");\n      opng_throw_error(\"Can't overwrite the output file\");\n    }\n    if ((opng_os_test_file_access(outfile_name, \"fw\") != 0) || ((!s_options.clobber) && (opng_os_test_file_access(bakfile_name, \"e\") == 0)))\n    {\n      usr_printf(\"A backup file already exists. Rerun OptiPNG with -clobber enabled.\\n\");\n      opng_throw_error(\"Can't back up the existing output file\");\n    }\n  }\n  if (s_process.status & INPUT_HAS_PNG_DATASTREAM)\n  {\n    usr_printf(\"Input IDAT size = %lu bytes\\n\", s_process.in_idat_size);\n  }\n  usr_printf(\"Input file size = %lu bytes\\n\", s_process.in_file_size);\n  if ((!s_options.nz) || (s_process.status & OUTPUT_NEEDS_NEW_IDAT))\n  {\n    opng_init_iterations();\n    opng_iterate();\n    opng_finish_iterations();\n  }\n  if (s_process.status & OUTPUT_NEEDS_NEW_IDAT)\n  {\n    s_process.status |= OUTPUT_NEEDS_NEW_FILE;\n    opng_check_idat_size(s_process.best_idat_size);\n  }\n  if (!(s_process.status & OUTPUT_NEEDS_NEW_FILE))\n  {\n    usr_printf(\"\\n%s is already optimized.\\n\", infile_name_local);\n    if (!new_outfile)\n    {\n      return;\n    }\n  }\n  if (s_options.simulate)\n  {\n    usr_printf(\"\\nNo output: simulation mode.\\n\");\n    return;\n  }\n  if (new_outfile)\n  {\n    usr_printf(\"\\nOutput file: %s\\n\", outfile_name);\n    if (s_options.dir_name != 0)\n    {\n      opng_os_create_dir(s_options.dir_name);\n    }\n    has_backup = 0;\n    if (opng_os_test_file_access(outfile_name, \"e\") == 0)\n    {\n      if (opng_os_rename(outfile_name, bakfile_name, s_options.clobber) != 0)\n      {\n        opng_throw_error(\"Can't back up the output file\");\n      }\n      has_backup = 1;\n    }\n  }\n  else\n  {\n    if (opng_os_rename(infile_name_local, bakfile_name, s_options.clobber) != 0)\n    {\n      opng_throw_error(\"Can't back up the input file\");\n    }\n    has_backup = 1;\n  }\n  outfile_idx = fopen(outfile_name, \"wb\");\n  {\n    helper_opng_optimize_impl_2(&infile_idx, &status, infile, outfile, outfile_idx, infile_name_local, bakfile_name, new_outfile);\n  }\n  if ((!the_exception_context->caught) || ((status = the_exception_context->v.etmp, 0)))\n  {\n  }\n  else\n  {\n    helper_opng_optimize_impl_1(outfile, outfile_idx, infile_name_local, outfile_name, bakfile_name, new_outfile, has_backup, status);\n  }\n  fclose(outfile);\n  if (s_options.preserve)\n  {\n    opng_os_copy_file_attr((new_outfile) ? (infile_name_local) : (bakfile_name), outfile_name);\n  }\n  if ((!s_options.backup) && (!new_outfile))\n  {\n    if (opng_os_unlink(bakfile_name) != 0)\n    {\n      opng_print_warning(\"Can't remove the backup file\");\n    }\n  }\n  usr_printf(\"\\nOutput IDAT size = %lu bytes\", s_process.out_idat_size);\n  if (s_process.status & INPUT_HAS_PNG_DATASTREAM)\n  {\n    usr_printf(\" (\");\n    opng_print_fsize_difference(s_process.in_idat_size, s_process.out_idat_size, 0);\n    usr_printf(\")\");\n  }\n  usr_printf(\"\\nOutput file size = %lu bytes (\", s_process.out_file_size);\n  opng_print_fsize_difference(s_process.in_file_size, s_process.out_file_size, 1);\n  usr_printf(\")\\n\");\n}\n\n",
            "calle": [
                "fclose",
                "fopen",
                "helper_opng_optimize_impl_1",
                "helper_opng_optimize_impl_2",
                "longjmp",
                "memset",
                "opng_check_idat_size",
                "opng_finish_iterations",
                "opng_init_iterations",
                "opng_iterate",
                "opng_os_copy_file_attr",
                "opng_os_create_dir",
                "opng_os_rename",
                "opng_os_test_file_access",
                "opng_os_test_file_equiv",
                "opng_os_unlink",
                "opng_path_make_backup",
                "opng_path_replace_dir",
                "opng_path_replace_ext",
                "opng_print_fsize_difference",
                "opng_print_warning",
                "opng_read_file",
                "opng_throw_error",
                "setjmp",
                "strcmp",
                "strcpy",
                "usr_panic",
                "usr_printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "infile_name",
                        "type": "const char *",
                        "definition": [
                            "const char *infile_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "infile",
                        "type": "FILE *",
                        "definition": [
                            "static FILE *infile"
                        ]
                    },
                    {
                        "path": null,
                        "name": "infile_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int infile_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outfile",
                        "type": "FILE *",
                        "definition": [
                            "static FILE *outfile"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outfile_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int outfile_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "infile_name_local",
                        "type": "const char *",
                        "definition": [
                            "static const char *infile_name_local"
                        ]
                    },
                    {
                        "path": null,
                        "name": "infile_name_local_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int infile_name_local_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outfile_name",
                        "type": "const char *",
                        "definition": [
                            "static const char *outfile_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outfile_name_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int outfile_name_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bakfile_name",
                        "type": "const char *",
                        "definition": [
                            "static const char *bakfile_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bakfile_name_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int bakfile_name_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_outfile",
                        "type": "int",
                        "definition": [
                            "static int new_outfile"
                        ]
                    },
                    {
                        "path": null,
                        "name": "has_backup",
                        "type": "int",
                        "definition": [
                            "static int has_backup"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name_buf",
                        "type": "char [1024]",
                        "definition": [
                            "char name_buf[1024]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp_buf",
                        "type": "char [1024]",
                        "definition": [
                            "char tmp_buf[1024]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "status",
                        "type": "volatile opng_status_t",
                        "definition": [
                            "volatile opng_status_t status"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exception__prev",
                        "type": "jmp_buf *[1]",
                        "definition": [
                            "jmp_buf *exception__prev[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exception__env",
                        "type": "jmp_buf",
                        "definition": [
                            "jmp_buf exception__env"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp_name",
                        "type": "const char *",
                        "definition": [
                            "const char *tmp_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp_name_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int tmp_name_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "test_eq",
                        "type": "int",
                        "definition": [
                            "int test_eq = opng_os_test_file_equiv(infile_name_local, outfile_name)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_process",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_options",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "the_exception_context",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "usr_panic",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "usr_printf",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_opng_print_image_info_1",
            "header": "",
            "params": [
                "int * const printed_ref"
            ],
            "definition": "void helper_opng_print_image_info_1(int * const printed_ref)\n{\n  int printed = *printed_ref;\n  if (printed)\n  {\n    usr_printf(\", \");\n  }\n  printed = 1;\n  if (s_image.color_type & 1)\n  {\n    if (s_image.num_palette == 1)\n    {\n      usr_printf(\"1 color\");\n    }\n    else\n      usr_printf(\"%d colors\", s_image.num_palette);\n    if (s_image.num_trans > 0)\n    {\n      usr_printf(\" (%d transparent)\", s_image.num_trans);\n    }\n    usr_printf(\" in palette\");\n  }\n  else\n  {\n    usr_printf((s_image.color_type & 2) ? (\"RGB\") : (\"grayscale\"));\n    if (s_image.color_type & 4)\n    {\n      usr_printf(\"+alpha\");\n    }\n    else\n      if (s_image.trans_color_ptr != 0)\n    {\n      usr_printf(\"+transparency\");\n    }\n  }\n  *printed_ref = printed;\n}\n\n",
            "calle": [
                "usr_printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "printed_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const printed_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "printed",
                        "type": "int",
                        "definition": [
                            "int printed = *printed_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "usr_printf",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_image",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_opng_read_data_1",
            "header": "",
            "params": [
                "png_structp png_ptr",
                "size_t length",
                "FILE * const stream",
                "int io_state_loc"
            ],
            "definition": "void helper_opng_read_data_1(png_structp png_ptr, size_t length, FILE * const stream, int io_state_loc)\n{\n  {\n    if (!(length == 8))\n    {\n      usr_panic(\"PNG I/O must start with the first 8 bytes\");\n    }\n  }\n  ;\n  s_process.in_datastream_offset = opng_ftello(stream) - 8;\n  s_process.status |= INPUT_HAS_PNG_DATASTREAM;\n  if (io_state_loc == 0x0010)\n  {\n    s_process.status |= INPUT_HAS_PNG_SIGNATURE;\n  }\n  if (s_process.in_datastream_offset == 0)\n  {\n    s_process.status |= INPUT_IS_PNG_FILE;\n  }\n  else\n    if (s_process.in_datastream_offset < 0)\n  {\n    png_error(png_ptr, \"Can't get the file-position indicator in input file\");\n  }\n  s_process.in_file_size = (opng_fsize_t) s_process.in_datastream_offset;\n}\n\n",
            "calle": [
                "opng_ftello",
                "png_error",
                "usr_panic"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "io_state_loc",
                        "type": "int",
                        "definition": [
                            "int io_state_loc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "usr_panic",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_process",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_opng_read_data_2",
            "header": "",
            "params": [
                "png_bytep * const chunk_sig_ref",
                "png_structp png_ptr",
                "png_bytep data",
                "size_t length"
            ],
            "definition": "void helper_opng_read_data_2(png_bytep * const chunk_sig_ref, png_structp png_ptr, png_bytep data, size_t length)\n{\n  png_bytep chunk_sig = *chunk_sig_ref;\n  {\n    if (!(length == 8))\n    {\n      usr_panic(\"Reading chunk header, expecting 8 bytes\");\n    }\n  }\n  ;\n  chunk_sig = data + 4;\n  if (memcmp(chunk_sig, k_sig_IDAT, 4) == 0)\n  {\n    {\n      if (!(png_ptr == s_read_ptr))\n      {\n        usr_panic(\"Incorrect I/O handler setup\");\n      }\n    }\n    ;\n    if (png_get_rows(s_read_ptr, s_read_info_ptr) == 0)\n    {\n      {\n        if (!(s_process.in_idat_size == 0))\n        {\n          usr_panic(\"Found IDAT with no rows\");\n        }\n      }\n      ;\n      if (png_get_image_height(s_read_ptr, s_read_info_ptr) == 0)\n      {\n        return;\n      }\n      {\n        if (!(pngx_malloc_rows(s_read_ptr, s_read_info_ptr, 0) != 0))\n        {\n          usr_panic(\"Failed allocation of image rows; unsafe libpng allocator\");\n        }\n      }\n      ;\n      png_data_freer(s_read_ptr, s_read_info_ptr, 2, 0x0040U);\n    }\n    else\n    {\n      s_process.status |= INPUT_HAS_JUNK;\n    }\n    s_process.in_idat_size += (((((png_uint_32) (*data)) << 24) + (((png_uint_32) (*(data + 1))) << 16)) + (((png_uint_32) (*(data + 2))) << 8)) + ((png_uint_32) (*(data + 3)));\n  }\n  else\n    if ((memcmp(chunk_sig, k_sig_PLTE, 4) == 0) || (memcmp(chunk_sig, k_sig_tRNS, 4) == 0))\n  {\n    s_process.in_plte_trns_size += ((((((png_uint_32) (*data)) << 24) + (((png_uint_32) (*(data + 1))) << 16)) + (((png_uint_32) (*(data + 2))) << 8)) + ((png_uint_32) (*(data + 3)))) + 12;\n  }\n  else\n    opng_handle_chunk(png_ptr, chunk_sig);\n  *chunk_sig_ref = chunk_sig;\n}\n\n",
            "calle": [
                "memcmp",
                "opng_handle_chunk",
                "png_data_freer",
                "png_get_image_height",
                "png_get_rows",
                "pngx_malloc_rows",
                "usr_panic"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "chunk_sig_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const chunk_sig_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chunk_sig",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep chunk_sig = *chunk_sig_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "usr_panic",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "k_sig_IDAT",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_read_ptr",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_read_info_ptr",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_process",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "k_sig_PLTE",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "k_sig_tRNS",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_opng_write_data_1",
            "header": "",
            "params": [
                "static int * const allow_crt_chunk_ref",
                "static int * const crt_chunk_is_idat_ref",
                "png_bytep * const chunk_sig_ref",
                "png_bytep data",
                "size_t length",
                "FILE * const stream"
            ],
            "definition": "void helper_opng_write_data_1(static int * const allow_crt_chunk_ref, static int * const crt_chunk_is_idat_ref, png_bytep * const chunk_sig_ref, png_bytep data, size_t length, FILE * const stream)\n{\n  static int allow_crt_chunk = *allow_crt_chunk_ref;\n  static int crt_chunk_is_idat = *crt_chunk_is_idat_ref;\n  png_bytep chunk_sig = *chunk_sig_ref;\n  {\n    if (!(length == 8))\n    {\n      usr_panic(\"Writing chunk header, expecting 8 bytes\");\n    }\n  }\n  ;\n  chunk_sig = data + 4;\n  allow_crt_chunk = opng_allow_chunk(chunk_sig);\n  if (memcmp(chunk_sig, k_sig_IDAT, 4) == 0)\n  {\n    crt_chunk_is_idat = 1;\n    s_process.out_idat_size += (((((png_uint_32) (*data)) << 24) + (((png_uint_32) (*(data + 1))) << 16)) + (((png_uint_32) (*(data + 2))) << 8)) + ((png_uint_32) (*(data + 3)));\n    if (stream == 0)\n    {\n      if (s_process.out_idat_size > s_process.max_idat_size)\n      {\n        for (;; longjmp(*the_exception_context->penv, 1))\n        {\n          the_exception_context->v.etmp = OPNG_STATUS_OK;\n        }\n\n      }\n    }\n  }\n  else\n  {\n    crt_chunk_is_idat = 0;\n    if ((memcmp(chunk_sig, k_sig_PLTE, 4) == 0) || (memcmp(chunk_sig, k_sig_tRNS, 4) == 0))\n    {\n      s_process.out_plte_trns_size += ((((((png_uint_32) (*data)) << 24) + (((png_uint_32) (*(data + 1))) << 16)) + (((png_uint_32) (*(data + 2))) << 8)) + ((png_uint_32) (*(data + 3)))) + 12;\n    }\n  }\n  *allow_crt_chunk_ref = allow_crt_chunk;\n  *crt_chunk_is_idat_ref = crt_chunk_is_idat;\n  *chunk_sig_ref = chunk_sig;\n}\n\n",
            "calle": [
                "longjmp",
                "memcmp",
                "opng_allow_chunk",
                "usr_panic"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "allow_crt_chunk_ref",
                        "type": "int * const",
                        "definition": [
                            "static int * const allow_crt_chunk_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crt_chunk_is_idat_ref",
                        "type": "int * const",
                        "definition": [
                            "static int * const crt_chunk_is_idat_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chunk_sig_ref",
                        "type": "png_bytep * const",
                        "definition": [
                            "png_bytep * const chunk_sig_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "allow_crt_chunk",
                        "type": "int",
                        "definition": [
                            "static int allow_crt_chunk = *allow_crt_chunk_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crt_chunk_is_idat",
                        "type": "int",
                        "definition": [
                            "static int crt_chunk_is_idat = *crt_chunk_is_idat_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chunk_sig",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep chunk_sig = *chunk_sig_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "usr_panic",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "k_sig_IDAT",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_process",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "the_exception_context",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "k_sig_PLTE",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "k_sig_tRNS",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_opng_write_data_2",
            "header": "",
            "params": [
                "static opng_foffset_t * const crt_idat_offset_ref",
                "static opng_fsize_t * const crt_idat_size_ref",
                "static png_uint_32 * const crt_idat_crc_ref",
                "int * const io_state_ref",
                "png_structp png_ptr",
                "png_bytep data",
                "size_t length",
                "static int crt_chunk_is_idat",
                "FILE * const stream",
                "png_byte buf[4]"
            ],
            "definition": "void helper_opng_write_data_2(static opng_foffset_t * const crt_idat_offset_ref, static opng_fsize_t * const crt_idat_size_ref, static png_uint_32 * const crt_idat_crc_ref, int * const io_state_ref, png_structp png_ptr, png_bytep data, size_t length, static int crt_chunk_is_idat, FILE * const stream, png_byte buf[4])\n{\n  static opng_foffset_t crt_idat_offset = *crt_idat_offset_ref;\n  static opng_fsize_t crt_idat_size = *crt_idat_size_ref;\n  static png_uint_32 crt_idat_crc = *crt_idat_crc_ref;\n  int io_state = *io_state_ref;\n  if (crt_chunk_is_idat)\n  {\n    if (crt_idat_offset == 0)\n    {\n      crt_idat_offset = opng_ftello(stream);\n      if (s_process.best_idat_size > 0)\n      {\n        crt_idat_size = s_process.best_idat_size;\n      }\n      else\n      {\n        crt_idat_size = length;\n      }\n      png_save_uint_32(data, (png_uint_32) crt_idat_size);\n      crt_idat_crc = crc32(0, k_sig_IDAT, 4);\n    }\n    else\n    {\n      return;\n    }\n  }\n  else\n  {\n    helper_helper_opng_write_data_2_1(&crt_idat_offset, &io_state, png_ptr, stream, buf, crt_idat_size, crt_idat_crc);\n  }\n  break;\n  *crt_idat_offset_ref = crt_idat_offset;\n  *crt_idat_size_ref = crt_idat_size;\n  *crt_idat_crc_ref = crt_idat_crc;\n  *io_state_ref = io_state;\n}\n\n",
            "calle": [
                "crc32",
                "helper_helper_opng_write_data_2_1",
                "opng_ftello",
                "png_save_uint_32"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "crt_idat_offset_ref",
                        "type": "opng_foffset_t * const",
                        "definition": [
                            "static opng_foffset_t * const crt_idat_offset_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crt_idat_size_ref",
                        "type": "opng_fsize_t * const",
                        "definition": [
                            "static opng_fsize_t * const crt_idat_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crt_idat_crc_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "static png_uint_32 * const crt_idat_crc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "io_state_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const io_state_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "png_bytep",
                        "definition": [
                            "png_bytep data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crt_chunk_is_idat",
                        "type": "int",
                        "definition": [
                            "static int crt_chunk_is_idat"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "png_byte [4]",
                        "definition": [
                            "png_byte buf[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crt_idat_offset",
                        "type": "opng_foffset_t",
                        "definition": [
                            "static opng_foffset_t crt_idat_offset = *crt_idat_offset_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crt_idat_size",
                        "type": "opng_fsize_t",
                        "definition": [
                            "static opng_fsize_t crt_idat_size = *crt_idat_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crt_idat_crc",
                        "type": "png_uint_32",
                        "definition": [
                            "static png_uint_32 crt_idat_crc = *crt_idat_crc_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "io_state",
                        "type": "int",
                        "definition": [
                            "int io_state = *io_state_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_process",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "k_sig_IDAT",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_opng_read_file_1",
            "header": "",
            "params": [
                "unsigned int * const fmt_name_idx_ref",
                "int * const num_img_ref",
                "FILE * const infile",
                "const char * const fmt_name"
            ],
            "definition": "void helper_opng_read_file_1(unsigned int * const fmt_name_idx_ref, int * const num_img_ref, FILE * const infile, const char * const fmt_name)\n{\n  unsigned int fmt_name_idx = *fmt_name_idx_ref;\n  int num_img = *num_img_ref;\n  jmp_buf *exception__prev[1];\n  jmp_buf exception__env;\n  exception__prev[0] = the_exception_context->penv;\n  the_exception_context->penv = &exception__env;\n  if (setjmp(exception__env) == 0)\n  {\n    helper_helper_opng_read_file_1_1(&fmt_name_idx, &num_img, infile, fmt_name);\n  }\n  else\n  {\n    the_exception_context->caught = 1;\n  }\n  the_exception_context->penv = exception__prev[0];\n  *fmt_name_idx_ref = fmt_name_idx;\n  *num_img_ref = num_img;\n}\n\n",
            "calle": [
                "helper_helper_opng_read_file_1_1",
                "setjmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fmt_name_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const fmt_name_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_img_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const num_img_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "infile",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const infile"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmt_name",
                        "type": "const char * const",
                        "definition": [
                            "const char * const fmt_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmt_name_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int fmt_name_idx = *fmt_name_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_img",
                        "type": "int",
                        "definition": [
                            "int num_img = *num_img_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exception__prev",
                        "type": "jmp_buf *[1]",
                        "definition": [
                            "jmp_buf *exception__prev[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exception__env",
                        "type": "jmp_buf",
                        "definition": [
                            "jmp_buf exception__env"
                        ]
                    },
                    {
                        "path": null,
                        "name": "the_exception_context",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_opng_read_file_2",
            "header": "",
            "params": [
                "png_uint_32 * const reductions_ref",
                "volatile opng_status_t * const status_ref",
                "const char * const fmt_name"
            ],
            "definition": "void helper_opng_read_file_2(png_uint_32 * const reductions_ref, volatile opng_status_t * const status_ref, const char * const fmt_name)\n{\n  png_uint_32 reductions = *reductions_ref;\n  volatile opng_status_t status = *status_ref;\n  jmp_buf *exception__prev[1];\n  jmp_buf exception__env;\n  exception__prev[0] = the_exception_context->penv;\n  the_exception_context->penv = &exception__env;\n  if (setjmp(exception__env) == 0)\n  {\n    helper_helper_opng_read_file_2_1(&reductions, &status, fmt_name);\n  }\n  else\n  {\n    the_exception_context->caught = 1;\n  }\n  the_exception_context->penv = exception__prev[0];\n  *reductions_ref = reductions;\n  *status_ref = status;\n}\n\n",
            "calle": [
                "helper_helper_opng_read_file_2_1",
                "setjmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "reductions_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const reductions_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "status_ref",
                        "type": "volatile opng_status_t * const",
                        "definition": [
                            "volatile opng_status_t * const status_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmt_name",
                        "type": "const char * const",
                        "definition": [
                            "const char * const fmt_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reductions",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 reductions = *reductions_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "status",
                        "type": "volatile opng_status_t",
                        "definition": [
                            "volatile opng_status_t status = *status_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exception__prev",
                        "type": "jmp_buf *[1]",
                        "definition": [
                            "jmp_buf *exception__prev[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exception__env",
                        "type": "jmp_buf",
                        "definition": [
                            "jmp_buf exception__env"
                        ]
                    },
                    {
                        "path": null,
                        "name": "the_exception_context",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_opng_write_file_1",
            "header": "",
            "params": [
                "FILE * const outfile",
                "int compression_level",
                "int memory_level",
                "int compression_strategy",
                "int filter"
            ],
            "definition": "void helper_opng_write_file_1(FILE * const outfile, int compression_level, int memory_level, int compression_strategy, int filter)\n{\n  jmp_buf *exception__prev[1];\n  jmp_buf exception__env;\n  exception__prev[0] = the_exception_context->penv;\n  the_exception_context->penv = &exception__env;\n  if (setjmp(exception__env) == 0)\n  {\n    do\n    {\n      s_write_ptr = png_create_write_struct(\"1.6.40\", 0, opng_error, opng_warning);\n      s_write_info_ptr = png_create_info_struct(s_write_ptr);\n      if (s_write_info_ptr == 0)\n      {\n        opng_throw_error(\"Can't create image encoder\");\n      }\n      png_set_compression_level(s_write_ptr, compression_level);\n      png_set_compression_mem_level(s_write_ptr, memory_level);\n      png_set_compression_strategy(s_write_ptr, compression_strategy);\n      png_set_filter(s_write_ptr, 0, k_filter_table[filter]);\n      if ((compression_strategy != 2) && (compression_strategy != 3))\n      {\n        if (s_options.window_bits > 0)\n        {\n          png_set_compression_window_bits(s_write_ptr, s_options.window_bits);\n        }\n      }\n      else\n      {\n        png_set_compression_window_bits(s_write_ptr, 9);\n      }\n      png_set_keep_unknown_chunks(s_write_ptr, 3, 0, 0);\n      png_set_user_limits(s_write_ptr, (png_uint_32) 0x7fffffffL, (png_uint_32) 0x7fffffffL);\n      opng_store_image_info(s_write_ptr, s_write_info_ptr, outfile != 0);\n      opng_init_write_data();\n      png_set_write_fn(s_write_ptr, outfile, opng_write_data, 0);\n      png_write_png(s_write_ptr, s_write_info_ptr, 0, 0);\n    }\n    while (the_exception_context->caught = 0, the_exception_context->caught);\n  }\n  else\n  {\n    the_exception_context->caught = 1;\n  }\n  the_exception_context->penv = exception__prev[0];\n}\n\n",
            "calle": [
                "opng_error",
                "opng_init_write_data",
                "opng_store_image_info",
                "opng_throw_error",
                "opng_warning",
                "opng_write_data",
                "png_create_info_struct",
                "png_create_write_struct",
                "png_set_compression_level",
                "png_set_compression_mem_level",
                "png_set_compression_strategy",
                "png_set_compression_window_bits",
                "png_set_filter",
                "png_set_keep_unknown_chunks",
                "png_set_user_limits",
                "png_set_write_fn",
                "png_write_png",
                "setjmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "outfile",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const outfile"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compression_level",
                        "type": "int",
                        "definition": [
                            "int compression_level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "memory_level",
                        "type": "int",
                        "definition": [
                            "int memory_level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compression_strategy",
                        "type": "int",
                        "definition": [
                            "int compression_strategy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filter",
                        "type": "int",
                        "definition": [
                            "int filter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exception__prev",
                        "type": "jmp_buf *[1]",
                        "definition": [
                            "jmp_buf *exception__prev[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exception__env",
                        "type": "jmp_buf",
                        "definition": [
                            "jmp_buf exception__env"
                        ]
                    },
                    {
                        "path": null,
                        "name": "the_exception_context",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_write_ptr",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_write_info_ptr",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "k_filter_table",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_options",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_opng_copy_file_1",
            "header": "",
            "params": [
                "volatile png_bytep * const buf_ref",
                "png_uint_32 * const buf_size_ref",
                "png_uint_32 * const length_ref",
                "FILE * const infile",
                "const png_uint_32 buf_size_incr",
                "png_byte chunk_hdr[8]"
            ],
            "definition": "void helper_opng_copy_file_1(volatile png_bytep * const buf_ref, png_uint_32 * const buf_size_ref, png_uint_32 * const length_ref, FILE * const infile, const png_uint_32 buf_size_incr, png_byte chunk_hdr[8])\n{\n  volatile png_bytep buf = *buf_ref;\n  png_uint_32 buf_size = *buf_size_ref;\n  png_uint_32 length = *length_ref;\n  jmp_buf *exception__prev[1];\n  jmp_buf exception__env;\n  exception__prev[0] = the_exception_context->penv;\n  the_exception_context->penv = &exception__env;\n  if (setjmp(exception__env) == 0)\n  {\n    helper_helper_opng_copy_file_1_1(&buf, &buf_size, &length, infile, buf_size_incr, chunk_hdr);\n  }\n  else\n  {\n    the_exception_context->caught = 1;\n  }\n  the_exception_context->penv = exception__prev[0];\n  *buf_ref = buf;\n  *buf_size_ref = buf_size;\n  *length_ref = length;\n}\n\n",
            "calle": [
                "helper_helper_opng_copy_file_1_1",
                "setjmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buf_ref",
                        "type": "volatile png_bytep * const",
                        "definition": [
                            "volatile png_bytep * const buf_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_size_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const buf_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const length_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "infile",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const infile"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_size_incr",
                        "type": "const png_uint_32",
                        "definition": [
                            "const png_uint_32 buf_size_incr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chunk_hdr",
                        "type": "png_byte [8]",
                        "definition": [
                            "png_byte chunk_hdr[8]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "volatile png_bytep",
                        "definition": [
                            "volatile png_bytep buf = *buf_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_size",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 buf_size = *buf_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 length = *length_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exception__prev",
                        "type": "jmp_buf *[1]",
                        "definition": [
                            "jmp_buf *exception__prev[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exception__env",
                        "type": "jmp_buf",
                        "definition": [
                            "jmp_buf exception__env"
                        ]
                    },
                    {
                        "path": null,
                        "name": "the_exception_context",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_opng_iterate_1",
            "header": "",
            "params": [
                "opng_bitset_t * const compr_level_set_ref",
                "int * const compr_level_ref",
                "int * const mem_level_ref",
                "int * const strategy_ref",
                "int * const counter_ref",
                "int * const line_reused_ref",
                "opng_bitset_t mem_level_set",
                "opng_bitset_t strategy_set",
                "opng_bitset_t filter_set",
                "int filter"
            ],
            "definition": "void helper_opng_iterate_1(opng_bitset_t * const compr_level_set_ref, int * const compr_level_ref, int * const mem_level_ref, int * const strategy_ref, int * const counter_ref, int * const line_reused_ref, opng_bitset_t mem_level_set, opng_bitset_t strategy_set, opng_bitset_t filter_set, int filter)\n{\n  opng_bitset_t compr_level_set = *compr_level_set_ref;\n  int compr_level = *compr_level_ref;\n  int mem_level = *mem_level_ref;\n  int strategy = *strategy_ref;\n  int counter = *counter_ref;\n  int line_reused = *line_reused_ref;\n  if (!((filter_set & (1U << filter)) != 0))\n  {\n    continue;\n  }\n  for (strategy = 0; strategy <= 3; strategy += 1)\n  {\n    helper_helper_opng_iterate_1_1(&compr_level_set, &compr_level, &mem_level, &counter, &line_reused, mem_level_set, strategy_set, filter, strategy);\n  }\n\n  *compr_level_set_ref = compr_level_set;\n  *compr_level_ref = compr_level;\n  *mem_level_ref = mem_level;\n  *strategy_ref = strategy;\n  *counter_ref = counter;\n  *line_reused_ref = line_reused;\n}\n\n",
            "calle": [
                "helper_helper_opng_iterate_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "compr_level_set_ref",
                        "type": "opng_bitset_t * const",
                        "definition": [
                            "opng_bitset_t * const compr_level_set_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compr_level_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const compr_level_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mem_level_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const mem_level_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strategy_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const strategy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "counter_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const counter_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "line_reused_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const line_reused_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mem_level_set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t mem_level_set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strategy_set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t strategy_set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filter_set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t filter_set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filter",
                        "type": "int",
                        "definition": [
                            "int filter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compr_level_set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t compr_level_set = *compr_level_set_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compr_level",
                        "type": "int",
                        "definition": [
                            "int compr_level = *compr_level_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mem_level",
                        "type": "int",
                        "definition": [
                            "int mem_level = *mem_level_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strategy",
                        "type": "int",
                        "definition": [
                            "int strategy = *strategy_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "counter",
                        "type": "int",
                        "definition": [
                            "int counter = *counter_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "line_reused",
                        "type": "int",
                        "definition": [
                            "int line_reused = *line_reused_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_opng_optimize_impl_1",
            "header": "",
            "params": [
                "static FILE * const outfile",
                "unsigned int outfile_idx",
                "static const char * const infile_name_local",
                "static const char * const outfile_name",
                "static const char * const bakfile_name",
                "static int new_outfile",
                "static int has_backup",
                "volatile opng_status_t status"
            ],
            "definition": "void helper_opng_optimize_impl_1(static FILE * const outfile, unsigned int outfile_idx, static const char * const infile_name_local, static const char * const outfile_name, static const char * const bakfile_name, static int new_outfile, static int has_backup, volatile opng_status_t status)\n{\n  if ((&outfile[outfile_idx]) != 0)\n  {\n    fclose(outfile);\n  }\n  if (has_backup)\n  {\n    if (opng_os_rename(bakfile_name, (new_outfile) ? (outfile_name) : (infile_name_local), 1) != 0)\n    {\n      opng_print_warning(\"Can't recover the original file from backup\");\n    }\n  }\n  else\n  {\n    {\n      if (!new_outfile)\n      {\n        usr_panic(\"Overwrote input with no temporary backup\");\n      }\n    }\n    ;\n    if (opng_os_unlink(outfile_name) != 0)\n    {\n      opng_print_warning(\"Can't remove the broken output file\");\n    }\n  }\n  for (;; longjmp(*the_exception_context->penv, 1))\n  {\n    the_exception_context->v.etmp = status;\n  }\n\n}\n\n",
            "calle": [
                "fclose",
                "longjmp",
                "opng_os_rename",
                "opng_os_unlink",
                "opng_print_warning",
                "usr_panic"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "outfile",
                        "type": "FILE * const",
                        "definition": [
                            "static FILE * const outfile"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outfile_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int outfile_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "infile_name_local",
                        "type": "const char * const",
                        "definition": [
                            "static const char * const infile_name_local"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outfile_name",
                        "type": "const char * const",
                        "definition": [
                            "static const char * const outfile_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bakfile_name",
                        "type": "const char * const",
                        "definition": [
                            "static const char * const bakfile_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_outfile",
                        "type": "int",
                        "definition": [
                            "static int new_outfile"
                        ]
                    },
                    {
                        "path": null,
                        "name": "has_backup",
                        "type": "int",
                        "definition": [
                            "static int has_backup"
                        ]
                    },
                    {
                        "path": null,
                        "name": "status",
                        "type": "volatile opng_status_t",
                        "definition": [
                            "volatile opng_status_t status"
                        ]
                    },
                    {
                        "path": null,
                        "name": "usr_panic",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "the_exception_context",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_opng_optimize_impl_2",
            "header": "",
            "params": [
                "unsigned int * const infile_idx_ref",
                "volatile opng_status_t * const status_ref",
                "static FILE * const infile",
                "static FILE * const outfile",
                "unsigned int outfile_idx",
                "static const char * const infile_name_local",
                "static const char * const bakfile_name",
                "static int new_outfile"
            ],
            "definition": "void helper_opng_optimize_impl_2(unsigned int * const infile_idx_ref, volatile opng_status_t * const status_ref, static FILE * const infile, static FILE * const outfile, unsigned int outfile_idx, static const char * const infile_name_local, static const char * const bakfile_name, static int new_outfile)\n{\n  unsigned int infile_idx = *infile_idx_ref;\n  volatile opng_status_t status = *status_ref;\n  jmp_buf *exception__prev[1];\n  jmp_buf exception__env;\n  exception__prev[0] = the_exception_context->penv;\n  the_exception_context->penv = &exception__env;\n  if (setjmp(exception__env) == 0)\n  {\n    helper_helper_opng_optimize_impl_2_1(&infile_idx, &status, infile, outfile, outfile_idx, infile_name_local, bakfile_name, new_outfile);\n  }\n  else\n  {\n    the_exception_context->caught = 1;\n  }\n  the_exception_context->penv = exception__prev[0];\n  *infile_idx_ref = infile_idx;\n  *status_ref = status;\n}\n\n",
            "calle": [
                "helper_helper_opng_optimize_impl_2_1",
                "setjmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "infile_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const infile_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "status_ref",
                        "type": "volatile opng_status_t * const",
                        "definition": [
                            "volatile opng_status_t * const status_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "infile",
                        "type": "FILE * const",
                        "definition": [
                            "static FILE * const infile"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outfile",
                        "type": "FILE * const",
                        "definition": [
                            "static FILE * const outfile"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outfile_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int outfile_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "infile_name_local",
                        "type": "const char * const",
                        "definition": [
                            "static const char * const infile_name_local"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bakfile_name",
                        "type": "const char * const",
                        "definition": [
                            "static const char * const bakfile_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_outfile",
                        "type": "int",
                        "definition": [
                            "static int new_outfile"
                        ]
                    },
                    {
                        "path": null,
                        "name": "infile_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int infile_idx = *infile_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "status",
                        "type": "volatile opng_status_t",
                        "definition": [
                            "volatile opng_status_t status = *status_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exception__prev",
                        "type": "jmp_buf *[1]",
                        "definition": [
                            "jmp_buf *exception__prev[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exception__env",
                        "type": "jmp_buf",
                        "definition": [
                            "jmp_buf exception__env"
                        ]
                    },
                    {
                        "path": null,
                        "name": "the_exception_context",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_opng_optimize_1",
            "header": "",
            "params": [
                "volatile int * const result_ref",
                "const char * const infile_name"
            ],
            "definition": "void helper_opng_optimize_1(volatile int * const result_ref, const char * const infile_name)\n{\n  volatile int result = *result_ref;\n  jmp_buf *exception__prev[1];\n  jmp_buf exception__env;\n  exception__prev[0] = the_exception_context->penv;\n  the_exception_context->penv = &exception__env;\n  if (setjmp(exception__env) == 0)\n  {\n    do\n    {\n      opng_optimize_impl(infile_name);\n      if (s_process.status & INPUT_HAS_ERRORS)\n      {\n        s_summary.err_count += 1;\n        s_summary.fix_count += 1;\n      }\n      if (s_process.status & INPUT_HAS_MULTIPLE_IMAGES)\n      {\n        if (s_options.snip)\n        {\n          s_summary.snip_count += 1;\n        }\n      }\n      result = 0;\n    }\n    while (the_exception_context->caught = 0, the_exception_context->caught);\n  }\n  else\n  {\n    the_exception_context->caught = 1;\n  }\n  the_exception_context->penv = exception__prev[0];\n  *result_ref = result;\n}\n\n",
            "calle": [
                "opng_optimize_impl",
                "setjmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "result_ref",
                        "type": "volatile int * const",
                        "definition": [
                            "volatile int * const result_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "infile_name",
                        "type": "const char * const",
                        "definition": [
                            "const char * const infile_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "volatile int",
                        "definition": [
                            "volatile int result = *result_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exception__prev",
                        "type": "jmp_buf *[1]",
                        "definition": [
                            "jmp_buf *exception__prev[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exception__env",
                        "type": "jmp_buf",
                        "definition": [
                            "jmp_buf exception__env"
                        ]
                    },
                    {
                        "path": null,
                        "name": "the_exception_context",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_process",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_summary",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_options",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_opng_write_data_2_1",
            "header": "",
            "params": [
                "static opng_foffset_t * const crt_idat_offset_ref",
                "int * const io_state_ref",
                "png_structp png_ptr",
                "FILE * const stream",
                "png_byte buf[4]",
                "static opng_fsize_t crt_idat_size",
                "static png_uint_32 crt_idat_crc"
            ],
            "definition": "void helper_helper_opng_write_data_2_1(static opng_foffset_t * const crt_idat_offset_ref, int * const io_state_ref, png_structp png_ptr, FILE * const stream, png_byte buf[4], static opng_fsize_t crt_idat_size, static png_uint_32 crt_idat_crc)\n{\n  static opng_foffset_t crt_idat_offset = *crt_idat_offset_ref;\n  int io_state = *io_state_ref;\n  if (crt_idat_offset != 0)\n  {\n    png_save_uint_32(buf, crt_idat_crc);\n    if (fwrite(buf, 1, 4, stream) != 4)\n    {\n      io_state = 0;\n    }\n    s_process.out_file_size += 4;\n    if (s_process.out_idat_size != crt_idat_size)\n    {\n      {\n        if (!(s_process.best_idat_size == 0))\n        {\n          usr_panic(\"Wrong guess of the output IDAT size\");\n        }\n      }\n      ;\n      opng_check_idat_size(s_process.out_idat_size);\n      png_save_uint_32(buf, (png_uint_32) s_process.out_idat_size);\n      if (opng_fwriteo(stream, crt_idat_offset, 0, buf, 4) != 4)\n      {\n        io_state = 0;\n      }\n    }\n    if (io_state == 0)\n    {\n      png_error(png_ptr, \"Can't finalize IDAT\");\n    }\n    crt_idat_offset = 0;\n  }\n  *crt_idat_offset_ref = crt_idat_offset;\n  *io_state_ref = io_state;\n}\n\n",
            "calle": [
                "fwrite",
                "opng_check_idat_size",
                "opng_fwriteo",
                "png_error",
                "png_save_uint_32",
                "usr_panic"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "crt_idat_offset_ref",
                        "type": "opng_foffset_t * const",
                        "definition": [
                            "static opng_foffset_t * const crt_idat_offset_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "io_state_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const io_state_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "png_ptr",
                        "type": "png_structp",
                        "definition": [
                            "png_structp png_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "png_byte [4]",
                        "definition": [
                            "png_byte buf[4]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crt_idat_size",
                        "type": "opng_fsize_t",
                        "definition": [
                            "static opng_fsize_t crt_idat_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crt_idat_crc",
                        "type": "png_uint_32",
                        "definition": [
                            "static png_uint_32 crt_idat_crc"
                        ]
                    },
                    {
                        "path": null,
                        "name": "crt_idat_offset",
                        "type": "opng_foffset_t",
                        "definition": [
                            "static opng_foffset_t crt_idat_offset = *crt_idat_offset_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "io_state",
                        "type": "int",
                        "definition": [
                            "int io_state = *io_state_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_process",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "usr_panic",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_opng_read_file_1_1",
            "header": "",
            "params": [
                "unsigned int * const fmt_name_idx_ref",
                "int * const num_img_ref",
                "FILE * const infile",
                "const char * const fmt_name"
            ],
            "definition": "void helper_helper_opng_read_file_1_1(unsigned int * const fmt_name_idx_ref, int * const num_img_ref, FILE * const infile, const char * const fmt_name)\n{\n  unsigned int fmt_name_idx = *fmt_name_idx_ref;\n  int num_img = *num_img_ref;\n  do\n  {\n    s_read_ptr = png_create_read_struct(\"1.6.40\", 0, opng_error, opng_warning);\n    s_read_info_ptr = png_create_info_struct(s_read_ptr);\n    if (s_read_info_ptr == 0)\n    {\n      opng_throw_error(\"Can't create image decoder\");\n    }\n    png_set_keep_unknown_chunks(s_read_ptr, 3, 0, 0);\n    png_set_user_limits(s_read_ptr, (png_uint_32) 0x7fffffffL, (png_uint_32) 0x7fffffffL);\n    opng_init_read_data();\n    png_set_read_fn(s_read_ptr, infile, opng_read_data);\n    fmt_name_idx = 0;\n    num_img = pngx_read_image(s_read_ptr, s_read_info_ptr, &(&fmt_name[fmt_name_idx]), 0);\n    if (num_img <= 0)\n    {\n      opng_throw_error(\"Unrecognized image file format\");\n    }\n    if (num_img > 1)\n    {\n      s_process.status |= INPUT_HAS_MULTIPLE_IMAGES;\n    }\n    if ((s_process.status & INPUT_IS_PNG_FILE) && (s_process.status & INPUT_HAS_MULTIPLE_IMAGES))\n    {\n      fmt_name_idx = (s_process.status & INPUT_HAS_PNG_SIGNATURE) ? (\"APNG\") : (\"APNG datastream\");\n    }\n    {\n      if (!((&fmt_name[fmt_name_idx]) != 0))\n      {\n        usr_panic(\"No format name from pngxtern\");\n      }\n    }\n    ;\n    if (s_process.in_file_size == 0)\n    {\n      if (opng_fgetsize(infile, &s_process.in_file_size) < 0)\n      {\n        opng_print_warning(\"Can't get the correct file size\");\n        s_process.in_file_size = 0;\n      }\n    }\n  }\n  while (the_exception_context->caught = 0, the_exception_context->caught);\n  *fmt_name_idx_ref = fmt_name_idx;\n  *num_img_ref = num_img;\n}\n\n",
            "calle": [
                "opng_error",
                "opng_fgetsize",
                "opng_init_read_data",
                "opng_print_warning",
                "opng_read_data",
                "opng_throw_error",
                "opng_warning",
                "png_create_info_struct",
                "png_create_read_struct",
                "png_set_keep_unknown_chunks",
                "png_set_read_fn",
                "png_set_user_limits",
                "pngx_read_image",
                "usr_panic"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "fmt_name_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const fmt_name_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_img_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const num_img_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "infile",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const infile"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmt_name",
                        "type": "const char * const",
                        "definition": [
                            "const char * const fmt_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmt_name_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int fmt_name_idx = *fmt_name_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_img",
                        "type": "int",
                        "definition": [
                            "int num_img = *num_img_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "the_exception_context",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_read_ptr",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_read_info_ptr",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_process",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "usr_panic",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_opng_read_file_2_1",
            "header": "",
            "params": [
                "png_uint_32 * const reductions_ref",
                "volatile opng_status_t * const status_ref",
                "const char * const fmt_name"
            ],
            "definition": "void helper_helper_opng_read_file_2_1(png_uint_32 * const reductions_ref, volatile opng_status_t * const status_ref, const char * const fmt_name)\n{\n  png_uint_32 reductions = *reductions_ref;\n  volatile opng_status_t status = *status_ref;\n  do\n  {\n    helper_helper_helper_opng_read_file_2_1_1(&reductions, &status, fmt_name);\n  }\n  while (the_exception_context->caught = 0, the_exception_context->caught);\n  *reductions_ref = reductions;\n  *status_ref = status;\n}\n\n",
            "calle": [
                "helper_helper_helper_opng_read_file_2_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "reductions_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const reductions_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "status_ref",
                        "type": "volatile opng_status_t * const",
                        "definition": [
                            "volatile opng_status_t * const status_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmt_name",
                        "type": "const char * const",
                        "definition": [
                            "const char * const fmt_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reductions",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 reductions = *reductions_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "status",
                        "type": "volatile opng_status_t",
                        "definition": [
                            "volatile opng_status_t status = *status_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "the_exception_context",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_opng_copy_file_1_1",
            "header": "",
            "params": [
                "volatile png_bytep * const buf_ref",
                "png_uint_32 * const buf_size_ref",
                "png_uint_32 * const length_ref",
                "FILE * const infile",
                "const png_uint_32 buf_size_incr",
                "png_byte chunk_hdr[8]"
            ],
            "definition": "void helper_helper_opng_copy_file_1_1(volatile png_bytep * const buf_ref, png_uint_32 * const buf_size_ref, png_uint_32 * const length_ref, FILE * const infile, const png_uint_32 buf_size_incr, png_byte chunk_hdr[8])\n{\n  volatile png_bytep buf = *buf_ref;\n  png_uint_32 buf_size = *buf_size_ref;\n  png_uint_32 length = *length_ref;\n  do\n  {\n    buf = 0;\n    buf_size = 0;\n    png_write_sig(s_write_ptr);\n    do\n    {\n      if (fread(chunk_hdr, 8, 1, infile) != 1)\n      {\n        opng_throw_error(\"Read error\");\n      }\n      length = (((((png_uint_32) (*chunk_hdr)) << 24) + (((png_uint_32) (*(chunk_hdr + 1))) << 16)) + (((png_uint_32) (*(chunk_hdr + 2))) << 8)) + ((png_uint_32) (*(chunk_hdr + 3)));\n      if (length > ((png_uint_32) 0x7fffffffL))\n      {\n        if ((buf == 0) && (length == 0x89504e47UL))\n        {\n          continue;\n        }\n        opng_throw_error(\"Data error\");\n      }\n      if ((length + 4) > buf_size)\n      {\n        png_free(s_write_ptr, buf);\n        buf_size = (((length + 4) + (buf_size_incr - 1)) / buf_size_incr) * buf_size_incr;\n        buf = (png_bytep) png_malloc(s_write_ptr, buf_size);\n      }\n      if (fread(buf, length + 4, 1, infile) != 1)\n      {\n        opng_throw_error(\"Read error\");\n      }\n      png_write_chunk(s_write_ptr, chunk_hdr + 4, buf, length);\n    }\n    while (memcmp(chunk_hdr + 4, k_sig_IEND, 4) != 0);\n  }\n  while (the_exception_context->caught = 0, the_exception_context->caught);\n  *buf_ref = buf;\n  *buf_size_ref = buf_size;\n  *length_ref = length;\n}\n\n",
            "calle": [
                "fread",
                "memcmp",
                "opng_throw_error",
                "png_free",
                "png_malloc",
                "png_write_chunk",
                "png_write_sig"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buf_ref",
                        "type": "volatile png_bytep * const",
                        "definition": [
                            "volatile png_bytep * const buf_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_size_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const buf_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const length_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "infile",
                        "type": "FILE * const",
                        "definition": [
                            "FILE * const infile"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_size_incr",
                        "type": "const png_uint_32",
                        "definition": [
                            "const png_uint_32 buf_size_incr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "chunk_hdr",
                        "type": "png_byte [8]",
                        "definition": [
                            "png_byte chunk_hdr[8]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf",
                        "type": "volatile png_bytep",
                        "definition": [
                            "volatile png_bytep buf = *buf_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_size",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 buf_size = *buf_size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 length = *length_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "the_exception_context",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_write_ptr",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "k_sig_IEND",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_opng_iterate_1_1",
            "header": "",
            "params": [
                "opng_bitset_t * const compr_level_set_ref",
                "int * const compr_level_ref",
                "int * const mem_level_ref",
                "int * const counter_ref",
                "int * const line_reused_ref",
                "opng_bitset_t mem_level_set",
                "opng_bitset_t strategy_set",
                "int filter",
                "int strategy"
            ],
            "definition": "void helper_helper_opng_iterate_1_1(opng_bitset_t * const compr_level_set_ref, int * const compr_level_ref, int * const mem_level_ref, int * const counter_ref, int * const line_reused_ref, opng_bitset_t mem_level_set, opng_bitset_t strategy_set, int filter, int strategy)\n{\n  opng_bitset_t compr_level_set = *compr_level_set_ref;\n  int compr_level = *compr_level_ref;\n  int mem_level = *mem_level_ref;\n  int counter = *counter_ref;\n  int line_reused = *line_reused_ref;\n  if (!((strategy_set & (1U << strategy)) != 0))\n  {\n    continue;\n  }\n  if (strategy == 2)\n  {\n    compr_level_set = 0;\n    compr_level_set |= 1U << 1;\n  }\n  else\n    if (strategy == 3)\n  {\n    compr_level_set = 0;\n    compr_level_set |= 1U << 9;\n  }\n  else\n  {\n    compr_level_set = s_process.compr_level_set;\n  }\n  for (compr_level = 9; compr_level >= 1; compr_level -= 1)\n  {\n    helper_helper_helper_opng_iterate_1_1_1(&mem_level, &counter, &line_reused, mem_level_set, filter, strategy, compr_level_set, compr_level);\n  }\n\n  *compr_level_set_ref = compr_level_set;\n  *compr_level_ref = compr_level;\n  *mem_level_ref = mem_level;\n  *counter_ref = counter;\n  *line_reused_ref = line_reused;\n}\n\n",
            "calle": [
                "helper_helper_helper_opng_iterate_1_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "compr_level_set_ref",
                        "type": "opng_bitset_t * const",
                        "definition": [
                            "opng_bitset_t * const compr_level_set_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compr_level_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const compr_level_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mem_level_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const mem_level_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "counter_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const counter_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "line_reused_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const line_reused_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mem_level_set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t mem_level_set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strategy_set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t strategy_set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filter",
                        "type": "int",
                        "definition": [
                            "int filter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strategy",
                        "type": "int",
                        "definition": [
                            "int strategy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compr_level_set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t compr_level_set = *compr_level_set_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compr_level",
                        "type": "int",
                        "definition": [
                            "int compr_level = *compr_level_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mem_level",
                        "type": "int",
                        "definition": [
                            "int mem_level = *mem_level_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "counter",
                        "type": "int",
                        "definition": [
                            "int counter = *counter_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "line_reused",
                        "type": "int",
                        "definition": [
                            "int line_reused = *line_reused_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_process",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_opng_optimize_impl_2_1",
            "header": "",
            "params": [
                "unsigned int * const infile_idx_ref",
                "volatile opng_status_t * const status_ref",
                "static FILE * const infile",
                "static FILE * const outfile",
                "unsigned int outfile_idx",
                "static const char * const infile_name_local",
                "static const char * const bakfile_name",
                "static int new_outfile"
            ],
            "definition": "void helper_helper_opng_optimize_impl_2_1(unsigned int * const infile_idx_ref, volatile opng_status_t * const status_ref, static FILE * const infile, static FILE * const outfile, unsigned int outfile_idx, static const char * const infile_name_local, static const char * const bakfile_name, static int new_outfile)\n{\n  unsigned int infile_idx = *infile_idx_ref;\n  volatile opng_status_t status = *status_ref;\n  do\n  {\n    helper_helper_helper_opng_optimize_impl_2_1_1(&infile_idx, &status, infile, outfile, outfile_idx, infile_name_local, bakfile_name, new_outfile);\n  }\n  while (the_exception_context->caught = 0, the_exception_context->caught);\n  *infile_idx_ref = infile_idx;\n  *status_ref = status;\n}\n\n",
            "calle": [
                "helper_helper_helper_opng_optimize_impl_2_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "infile_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const infile_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "status_ref",
                        "type": "volatile opng_status_t * const",
                        "definition": [
                            "volatile opng_status_t * const status_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "infile",
                        "type": "FILE * const",
                        "definition": [
                            "static FILE * const infile"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outfile",
                        "type": "FILE * const",
                        "definition": [
                            "static FILE * const outfile"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outfile_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int outfile_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "infile_name_local",
                        "type": "const char * const",
                        "definition": [
                            "static const char * const infile_name_local"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bakfile_name",
                        "type": "const char * const",
                        "definition": [
                            "static const char * const bakfile_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_outfile",
                        "type": "int",
                        "definition": [
                            "static int new_outfile"
                        ]
                    },
                    {
                        "path": null,
                        "name": "infile_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int infile_idx = *infile_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "status",
                        "type": "volatile opng_status_t",
                        "definition": [
                            "volatile opng_status_t status = *status_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "the_exception_context",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_opng_read_file_2_1_1",
            "header": "",
            "params": [
                "png_uint_32 * const reductions_ref",
                "volatile opng_status_t * const status_ref",
                "const char * const fmt_name"
            ],
            "definition": "void helper_helper_helper_opng_read_file_2_1_1(png_uint_32 * const reductions_ref, volatile opng_status_t * const status_ref, const char * const fmt_name)\n{\n  png_uint_32 reductions = *reductions_ref;\n  volatile opng_status_t status = *status_ref;\n  if (status != OPNG_STATUS_OK)\n  {\n    for (;; longjmp(*the_exception_context->penv, 1))\n    {\n      the_exception_context->v.etmp = status;\n    }\n\n  }\n  if (strcmp(fmt_name, \"PNG\") != 0)\n  {\n    usr_printf(\"Importing %s\", fmt_name);\n    if (s_process.status & INPUT_HAS_MULTIPLE_IMAGES)\n    {\n      if (!(s_process.status & INPUT_IS_PNG_FILE))\n      {\n        usr_printf(\" (multi-image or animation)\");\n      }\n      if (s_options.snip)\n      {\n        usr_printf(\"; snipping...\");\n      }\n    }\n    usr_printf(\"\\n\");\n  }\n  opng_load_image_info(s_read_ptr, s_read_info_ptr, 1);\n  opng_print_image_info(1, 1, 1, 1);\n  usr_printf(\"\\n\");\n  reductions = ((((0x0001 | 0x0002) | (((((0x0004 | 0x0008) | 0x0010) | 0x0020) | 0x0040) | 0x0080)) | (0x0100 | 0x0200)) | 0x1000) & (~0x1000);\n  if (s_options.nb)\n  {\n    reductions &= ~(0x0001 | 0x0002);\n  }\n  if (s_options.nc)\n  {\n    reductions &= ~(((((0x0004 | 0x0008) | 0x0010) | 0x0020) | 0x0040) | 0x0080);\n  }\n  if (s_options.np)\n  {\n    reductions &= ~(0x0100 | 0x0200);\n  }\n  if (s_options.nz && (s_process.status & INPUT_HAS_PNG_DATASTREAM))\n  {\n    reductions = 0x0000;\n  }\n  if (s_process.status & INPUT_HAS_DIGITAL_SIGNATURE)\n  {\n    reductions = 0x0000;\n  }\n  if ((((s_process.status & INPUT_IS_PNG_FILE) && (s_process.status & INPUT_HAS_MULTIPLE_IMAGES)) && (reductions != 0x0000)) && (!s_options.snip))\n  {\n    usr_printf(\"Can't reliably reduce APNG file; disabling reductions.\\n(Did you want to -snip and optimize the first frame?)\\n\");\n    reductions = 0x0000;\n  }\n  s_process.reductions = opng_reduce_image(s_read_ptr, s_read_info_ptr, reductions);\n  if (s_process.reductions != 0x0000)\n  {\n    opng_load_image_info(s_read_ptr, s_read_info_ptr, 1);\n    usr_printf(\"Reducing image to \");\n    opng_print_image_info(0, 1, 1, 0);\n    usr_printf(\"\\n\");\n  }\n  if ((s_options.interlace >= 0) && (s_image.interlace_type != s_options.interlace))\n  {\n    s_image.interlace_type = s_options.interlace;\n    s_process.status |= OUTPUT_NEEDS_NEW_IDAT;\n  }\n  *reductions_ref = reductions;\n  *status_ref = status;\n}\n\n",
            "calle": [
                "longjmp",
                "opng_load_image_info",
                "opng_print_image_info",
                "opng_reduce_image",
                "strcmp",
                "usr_printf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "reductions_ref",
                        "type": "png_uint_32 * const",
                        "definition": [
                            "png_uint_32 * const reductions_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "status_ref",
                        "type": "volatile opng_status_t * const",
                        "definition": [
                            "volatile opng_status_t * const status_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmt_name",
                        "type": "const char * const",
                        "definition": [
                            "const char * const fmt_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reductions",
                        "type": "png_uint_32",
                        "definition": [
                            "png_uint_32 reductions = *reductions_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "status",
                        "type": "volatile opng_status_t",
                        "definition": [
                            "volatile opng_status_t status = *status_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "the_exception_context",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "usr_printf",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_process",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_options",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_read_ptr",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_read_info_ptr",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_image",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_opng_iterate_1_1_1",
            "header": "",
            "params": [
                "int * const mem_level_ref",
                "int * const counter_ref",
                "int * const line_reused_ref",
                "opng_bitset_t mem_level_set",
                "int filter",
                "int strategy",
                "opng_bitset_t compr_level_set",
                "int compr_level"
            ],
            "definition": "void helper_helper_helper_opng_iterate_1_1_1(int * const mem_level_ref, int * const counter_ref, int * const line_reused_ref, opng_bitset_t mem_level_set, int filter, int strategy, opng_bitset_t compr_level_set, int compr_level)\n{\n  int mem_level = *mem_level_ref;\n  int counter = *counter_ref;\n  int line_reused = *line_reused_ref;\n  if (!((compr_level_set & (1U << compr_level)) != 0))\n  {\n    continue;\n  }\n  for (mem_level = 9; mem_level >= 1; mem_level -= 1)\n  {\n    helper_helper_helper_helper_opng_iterate_1_1_1_1(&counter, &line_reused, mem_level_set, filter, strategy, compr_level, mem_level);\n  }\n\n  *mem_level_ref = mem_level;\n  *counter_ref = counter;\n  *line_reused_ref = line_reused;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_opng_iterate_1_1_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "mem_level_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const mem_level_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "counter_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const counter_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "line_reused_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const line_reused_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mem_level_set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t mem_level_set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filter",
                        "type": "int",
                        "definition": [
                            "int filter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strategy",
                        "type": "int",
                        "definition": [
                            "int strategy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compr_level_set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t compr_level_set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compr_level",
                        "type": "int",
                        "definition": [
                            "int compr_level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mem_level",
                        "type": "int",
                        "definition": [
                            "int mem_level = *mem_level_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "counter",
                        "type": "int",
                        "definition": [
                            "int counter = *counter_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "line_reused",
                        "type": "int",
                        "definition": [
                            "int line_reused = *line_reused_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_opng_optimize_impl_2_1_1",
            "header": "",
            "params": [
                "unsigned int * const infile_idx_ref",
                "volatile opng_status_t * const status_ref",
                "static FILE * const infile",
                "static FILE * const outfile",
                "unsigned int outfile_idx",
                "static const char * const infile_name_local",
                "static const char * const bakfile_name",
                "static int new_outfile"
            ],
            "definition": "void helper_helper_helper_opng_optimize_impl_2_1_1(unsigned int * const infile_idx_ref, volatile opng_status_t * const status_ref, static FILE * const infile, static FILE * const outfile, unsigned int outfile_idx, static const char * const infile_name_local, static const char * const bakfile_name, static int new_outfile)\n{\n  unsigned int infile_idx = *infile_idx_ref;\n  volatile opng_status_t status = *status_ref;\n  if ((&outfile[outfile_idx]) == 0)\n  {\n    opng_throw_error(\"Can't open the output file\");\n  }\n  if (s_process.status & OUTPUT_NEEDS_NEW_IDAT)\n  {\n    opng_write_file(outfile, s_process.best_compr_level, s_process.best_mem_level, s_process.best_strategy, s_process.best_filter);\n  }\n  else\n  {\n    helper_helper_helper_helper_opng_optimize_impl_2_1_1_1(&infile_idx, &status, infile, outfile, infile_name_local, bakfile_name, new_outfile);\n  }\n  *infile_idx_ref = infile_idx;\n  *status_ref = status;\n}\n\n",
            "calle": [
                "helper_helper_helper_helper_opng_optimize_impl_2_1_1_1",
                "opng_throw_error",
                "opng_write_file"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "infile_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const infile_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "status_ref",
                        "type": "volatile opng_status_t * const",
                        "definition": [
                            "volatile opng_status_t * const status_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "infile",
                        "type": "FILE * const",
                        "definition": [
                            "static FILE * const infile"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outfile",
                        "type": "FILE * const",
                        "definition": [
                            "static FILE * const outfile"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outfile_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int outfile_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "infile_name_local",
                        "type": "const char * const",
                        "definition": [
                            "static const char * const infile_name_local"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bakfile_name",
                        "type": "const char * const",
                        "definition": [
                            "static const char * const bakfile_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_outfile",
                        "type": "int",
                        "definition": [
                            "static int new_outfile"
                        ]
                    },
                    {
                        "path": null,
                        "name": "infile_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int infile_idx = *infile_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "status",
                        "type": "volatile opng_status_t",
                        "definition": [
                            "volatile opng_status_t status = *status_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s_process",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_opng_iterate_1_1_1_1",
            "header": "",
            "params": [
                "int * const counter_ref",
                "int * const line_reused_ref",
                "opng_bitset_t mem_level_set",
                "int filter",
                "int strategy",
                "int compr_level",
                "int mem_level"
            ],
            "definition": "void helper_helper_helper_helper_opng_iterate_1_1_1_1(int * const counter_ref, int * const line_reused_ref, opng_bitset_t mem_level_set, int filter, int strategy, int compr_level, int mem_level)\n{\n  int counter = *counter_ref;\n  int line_reused = *line_reused_ref;\n  if (!((mem_level_set & (1U << mem_level)) != 0))\n  {\n    continue;\n  }\n  usr_printf(\"  zc = %d  zm = %d  zs = %d  f = %d\", compr_level, mem_level, strategy, filter);\n  usr_progress(counter, s_process.num_iterations);\n  counter += 1;\n  opng_write_file(0, compr_level, mem_level, strategy, filter);\n  if (s_process.out_idat_size > k_idat_size_max)\n  {\n    if (s_options.verbose)\n    {\n      usr_printf(\"\\t\\tIDAT too big\\n\");\n      line_reused = 0;\n    }\n    else\n    {\n      usr_print_cntrl('\\r');\n      line_reused = 1;\n    }\n    continue;\n  }\n  usr_printf(\"\\t\\tIDAT size = %lu\\n\", s_process.out_idat_size);\n  line_reused = 0;\n  if (s_process.best_idat_size < s_process.out_idat_size)\n  {\n    continue;\n  }\n  if ((s_process.best_idat_size == s_process.out_idat_size) && ((s_process.best_strategy == 2) || (s_process.best_strategy == 3)))\n  {\n    continue;\n  }\n  s_process.best_compr_level = compr_level;\n  s_process.best_mem_level = mem_level;\n  s_process.best_strategy = strategy;\n  s_process.best_filter = filter;\n  s_process.best_idat_size = s_process.out_idat_size;\n  if (!s_options.full)\n  {\n    s_process.max_idat_size = s_process.out_idat_size;\n  }\n  *counter_ref = counter;\n  *line_reused_ref = line_reused;\n}\n\n",
            "calle": [
                "opng_write_file",
                "usr_print_cntrl",
                "usr_printf",
                "usr_progress"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "counter_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const counter_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "line_reused_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const line_reused_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mem_level_set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t mem_level_set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "filter",
                        "type": "int",
                        "definition": [
                            "int filter"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strategy",
                        "type": "int",
                        "definition": [
                            "int strategy"
                        ]
                    },
                    {
                        "path": null,
                        "name": "compr_level",
                        "type": "int",
                        "definition": [
                            "int compr_level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mem_level",
                        "type": "int",
                        "definition": [
                            "int mem_level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "counter",
                        "type": "int",
                        "definition": [
                            "int counter = *counter_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "line_reused",
                        "type": "int",
                        "definition": [
                            "int line_reused = *line_reused_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "usr_printf",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "usr_progress",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_process",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "k_idat_size_max",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_options",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "usr_print_cntrl",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_helper_helper_opng_optimize_impl_2_1_1_1",
            "header": "",
            "params": [
                "unsigned int * const infile_idx_ref",
                "volatile opng_status_t * const status_ref",
                "static FILE * const infile",
                "static FILE * const outfile",
                "static const char * const infile_name_local",
                "static const char * const bakfile_name",
                "static int new_outfile"
            ],
            "definition": "void helper_helper_helper_helper_opng_optimize_impl_2_1_1_1(unsigned int * const infile_idx_ref, volatile opng_status_t * const status_ref, static FILE * const infile, static FILE * const outfile, static const char * const infile_name_local, static const char * const bakfile_name, static int new_outfile)\n{\n  unsigned int infile_idx = *infile_idx_ref;\n  volatile opng_status_t status = *status_ref;\n  infile_idx = fopen((new_outfile) ? (infile_name_local) : (bakfile_name), \"rb\");\n  if ((&infile[infile_idx]) == 0)\n  {\n    opng_throw_error(\"Can't reopen the input file\");\n  }\n  {\n    jmp_buf *exception__prev[1];\n    jmp_buf exception__env;\n    exception__prev[0] = the_exception_context->penv;\n    the_exception_context->penv = &exception__env;\n    if (setjmp(exception__env) == 0)\n    {\n      do\n      {\n        if ((s_process.in_datastream_offset > 0) && (opng_fseeko(infile, s_process.in_datastream_offset, 0) != 0))\n        {\n          opng_throw_error(\"Can't reposition the input file\");\n        }\n        s_process.best_idat_size = s_process.in_idat_size;\n        opng_copy_file(infile, outfile);\n      }\n      while (the_exception_context->caught = 0, the_exception_context->caught);\n    }\n    else\n    {\n      the_exception_context->caught = 1;\n    }\n    the_exception_context->penv = exception__prev[0];\n  }\n  if ((!the_exception_context->caught) || ((status = the_exception_context->v.etmp, 0)))\n  {\n  }\n  else\n  {\n    {\n      if (!(status != OPNG_STATUS_OK))\n      {\n        usr_panic(\"opng_copy_file should throw errors only\");\n      }\n    }\n    ;\n  }\n  fclose(infile);\n  if (status != OPNG_STATUS_OK)\n  {\n    for (;; longjmp(*the_exception_context->penv, 1))\n    {\n      the_exception_context->v.etmp = status;\n    }\n\n  }\n  *infile_idx_ref = infile_idx;\n  *status_ref = status;\n}\n\n",
            "calle": [
                "fclose",
                "fopen",
                "longjmp",
                "opng_copy_file",
                "opng_fseeko",
                "opng_throw_error",
                "setjmp",
                "usr_panic"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "infile_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const infile_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "status_ref",
                        "type": "volatile opng_status_t * const",
                        "definition": [
                            "volatile opng_status_t * const status_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "infile",
                        "type": "FILE * const",
                        "definition": [
                            "static FILE * const infile"
                        ]
                    },
                    {
                        "path": null,
                        "name": "outfile",
                        "type": "FILE * const",
                        "definition": [
                            "static FILE * const outfile"
                        ]
                    },
                    {
                        "path": null,
                        "name": "infile_name_local",
                        "type": "const char * const",
                        "definition": [
                            "static const char * const infile_name_local"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bakfile_name",
                        "type": "const char * const",
                        "definition": [
                            "static const char * const bakfile_name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_outfile",
                        "type": "int",
                        "definition": [
                            "static int new_outfile"
                        ]
                    },
                    {
                        "path": null,
                        "name": "infile_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int infile_idx = *infile_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "status",
                        "type": "volatile opng_status_t",
                        "definition": [
                            "volatile opng_status_t status = *status_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exception__prev",
                        "type": "jmp_buf *[1]",
                        "definition": [
                            "jmp_buf *exception__prev[1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "exception__env",
                        "type": "jmp_buf",
                        "definition": [
                            "jmp_buf exception__env"
                        ]
                    },
                    {
                        "path": null,
                        "name": "the_exception_context",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "s_process",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "usr_panic",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_bitset_count",
            "header": "unsigned int opng_bitset_count(opng_bitset_t set)",
            "params": [
                "opng_bitset_t set"
            ],
            "definition": "unsigned int opng_bitset_count(opng_bitset_t set)\n{\n  unsigned int result;\n  result = 0;\n  while (set != 0)\n  {\n    set &= set - 1;\n    result += 1;\n  }\n\n  return result;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int result"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_bitset_find_first",
            "header": "int opng_bitset_find_first(opng_bitset_t set)",
            "params": [
                "opng_bitset_t set"
            ],
            "definition": "int opng_bitset_find_first(opng_bitset_t set)\n{\n  int i;\n  for (i = 0; i <= OPNG_BITSET_ELT_MAX; i += 1)\n  {\n    if ((set & (1U << i)) != 0)\n    {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_bitset_find_next",
            "header": "int opng_bitset_find_next(opng_bitset_t set, int elt)",
            "params": [
                "opng_bitset_t set",
                "int elt"
            ],
            "definition": "int opng_bitset_find_next(opng_bitset_t set, int elt)\n{\n  int i;\n  for (i = ((elt > (-1)) ? (elt) : (-1)) + 1; i <= OPNG_BITSET_ELT_MAX; i += 1)\n  {\n    if ((set & (1U << i)) != 0)\n    {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "elt",
                        "type": "int",
                        "definition": [
                            "int elt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_bitset_find_last",
            "header": "int opng_bitset_find_last(opng_bitset_t set)",
            "params": [
                "opng_bitset_t set"
            ],
            "definition": "int opng_bitset_find_last(opng_bitset_t set)\n{\n  int i;\n  for (i = OPNG_BITSET_ELT_MAX; i >= 0; i -= 1)\n  {\n    if ((set & (1U << i)) != 0)\n    {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_bitset_find_prev",
            "header": "int opng_bitset_find_prev(opng_bitset_t set, int elt)",
            "params": [
                "opng_bitset_t set",
                "int elt"
            ],
            "definition": "int opng_bitset_find_prev(opng_bitset_t set, int elt)\n{\n  int i;\n  for (i = ((elt < (OPNG_BITSET_ELT_MAX + 1)) ? (elt) : (OPNG_BITSET_ELT_MAX + 1)) - 1; i >= 0; i -= 1)\n  {\n    if ((set & (1U << i)) != 0)\n    {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "elt",
                        "type": "int",
                        "definition": [
                            "int elt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_strparse_rangeset_to_bitset",
            "header": "int opng_strparse_rangeset_to_bitset(opng_bitset_t *out_set, const char *rangeset_str, opng_bitset_t mask_set)",
            "params": [
                "opng_bitset_t *out_set",
                "const char *rangeset_str",
                "opng_bitset_t mask_set"
            ],
            "definition": "int opng_strparse_rangeset_to_bitset(opng_bitset_t *out_set, const char *rangeset_str, opng_bitset_t mask_set)\n{\n  opng_bitset_t result;\n  const char *ptr;\n  unsigned int ptr_idx = 0;\n  int state;\n  int num;\n  int num1;\n  int num2;\n  int err_invalid;\n  int err_range;\n  result = 0U;\n  ptr_idx = rangeset_str;\n  state = 0;\n  err_invalid = (err_range = 0);\n  num1 = (num2 = -1);\n  for (;;)\n  {\n    helper_opng_strparse_rangeset_to_bitset_1(&result, &ptr_idx, &state, &num, &num1, &num2, &err_invalid, &err_range, mask_set, ptr);\n  }\n\n  {\n    while (isspace(*(&ptr[ptr_idx])))\n    {\n      ptr_idx += 1;\n    }\n\n  }\n  ;\n  if (ptr[ptr_idx] != '\\0')\n  {\n    err_invalid = 1;\n  }\n  if (err_invalid)\n  {\n    *out_set = 0U;\n    return -1;\n  }\n  else\n    if (err_range)\n  {\n    *out_set = ~0U;\n    return -1;\n  }\n  else\n  {\n    *out_set = result;\n    return 0;\n  }\n}\n\n",
            "calle": [
                "helper_opng_strparse_rangeset_to_bitset_1",
                "isspace"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "out_set",
                        "type": "opng_bitset_t *",
                        "definition": [
                            "opng_bitset_t *out_set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rangeset_str",
                        "type": "const char *",
                        "definition": [
                            "const char *rangeset_str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask_set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t mask_set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "const char *",
                        "definition": [
                            "const char *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ptr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "int",
                        "definition": [
                            "int state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num",
                        "type": "int",
                        "definition": [
                            "int num"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num1",
                        "type": "int",
                        "definition": [
                            "int num1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num2",
                        "type": "int",
                        "definition": [
                            "int num2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err_invalid",
                        "type": "int",
                        "definition": [
                            "int err_invalid"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err_range",
                        "type": "int",
                        "definition": [
                            "int err_range"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_opng_strparse_rangeset_to_bitset_1",
            "header": "",
            "params": [
                "opng_bitset_t * const result_ref",
                "unsigned int * const ptr_idx_ref",
                "int * const state_ref",
                "int * const num_ref",
                "int * const num1_ref",
                "int * const num2_ref",
                "int * const err_invalid_ref",
                "int * const err_range_ref",
                "opng_bitset_t mask_set",
                "const char * const ptr"
            ],
            "definition": "void helper_opng_strparse_rangeset_to_bitset_1(opng_bitset_t * const result_ref, unsigned int * const ptr_idx_ref, int * const state_ref, int * const num_ref, int * const num1_ref, int * const num2_ref, int * const err_invalid_ref, int * const err_range_ref, opng_bitset_t mask_set, const char * const ptr)\n{\n  opng_bitset_t result = *result_ref;\n  unsigned int ptr_idx = *ptr_idx_ref;\n  int state = *state_ref;\n  int num = *num_ref;\n  int num1 = *num1_ref;\n  int num2 = *num2_ref;\n  int err_invalid = *err_invalid_ref;\n  int err_range = *err_range_ref;\n  {\n    while (isspace(*(&ptr[ptr_idx])))\n    {\n      ptr_idx += 1;\n    }\n\n  }\n  ;\n  switch (state)\n  {\n    case 0:\n\n    case 2:\n    {\n      helper_helper_opng_strparse_rangeset_to_bitset_1_1(&ptr_idx, &state, &num, &num1, &num2, &err_range, mask_set, ptr);\n    }\n\n    case 1:\n    {\n      if (ptr[ptr_idx] == '-')\n      {\n        ptr_idx += 1;\n        num2 = OPNG_BITSET_ELT_MAX;\n        state += 1;\n        continue;\n      }\n      break;\n    }\n\n  }\n\n  if (state > 0)\n  {\n    if (num1 <= num2)\n    {\n      result |= (num1 <= num2) ? ((((1U << (num2 - num1)) << 1) - 1) << num1) : (0U);\n      result &= mask_set;\n    }\n    else\n    {\n      err_range = 1;\n    }\n    state = 0;\n  }\n  if ((ptr[ptr_idx] == ',') || (ptr[ptr_idx] == ';'))\n  {\n    ptr_idx += 1;\n    continue;\n  }\n  else\n    if (ptr[ptr_idx] == '-')\n  {\n    err_invalid = 1;\n    break;\n  }\n  else\n  {\n    break;\n  }\n  *result_ref = result;\n  *ptr_idx_ref = ptr_idx;\n  *state_ref = state;\n  *num_ref = num;\n  *num1_ref = num1;\n  *num2_ref = num2;\n  *err_invalid_ref = err_invalid;\n  *err_range_ref = err_range;\n}\n\n",
            "calle": [
                "helper_helper_opng_strparse_rangeset_to_bitset_1_1",
                "isspace"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "result_ref",
                        "type": "opng_bitset_t * const",
                        "definition": [
                            "opng_bitset_t * const result_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const ptr_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const state_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const num_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const num1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const num2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err_invalid_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const err_invalid_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err_range_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const err_range_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask_set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t mask_set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "const char * const",
                        "definition": [
                            "const char * const ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t result = *result_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ptr_idx = *ptr_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "int",
                        "definition": [
                            "int state = *state_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num",
                        "type": "int",
                        "definition": [
                            "int num = *num_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num1",
                        "type": "int",
                        "definition": [
                            "int num1 = *num1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num2",
                        "type": "int",
                        "definition": [
                            "int num2 = *num2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err_invalid",
                        "type": "int",
                        "definition": [
                            "int err_invalid = *err_invalid_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err_range",
                        "type": "int",
                        "definition": [
                            "int err_range = *err_range_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_opng_strparse_rangeset_to_bitset_1_1",
            "header": "",
            "params": [
                "unsigned int * const ptr_idx_ref",
                "int * const state_ref",
                "int * const num_ref",
                "int * const num1_ref",
                "int * const num2_ref",
                "int * const err_range_ref",
                "opng_bitset_t mask_set",
                "const char * const ptr"
            ],
            "definition": "void helper_helper_opng_strparse_rangeset_to_bitset_1_1(unsigned int * const ptr_idx_ref, int * const state_ref, int * const num_ref, int * const num1_ref, int * const num2_ref, int * const err_range_ref, opng_bitset_t mask_set, const char * const ptr)\n{\n  unsigned int ptr_idx = *ptr_idx_ref;\n  int state = *state_ref;\n  int num = *num_ref;\n  int num1 = *num1_ref;\n  int num2 = *num2_ref;\n  int err_range = *err_range_ref;\n  if ((ptr[ptr_idx] >= '0') && (ptr[ptr_idx] <= '9'))\n  {\n    num = 0;\n    do\n    {\n      num = (10 * num) + (ptr[ptr_idx] - '0');\n      if (num > OPNG_BITSET_ELT_MAX)\n      {\n        num = OPNG_BITSET_ELT_MAX;\n        err_range = 1;\n      }\n      ptr_idx += 1;\n    }\n    while ((ptr[ptr_idx] >= '0') && (ptr[ptr_idx] <= '9'));\n    if (!((mask_set & (1U << num)) != 0))\n    {\n      err_range = 1;\n    }\n    if (state == 0)\n    {\n      num1 = num;\n    }\n    num2 = num;\n    state += 1;\n    continue;\n  }\n  break;\n  *ptr_idx_ref = ptr_idx;\n  *state_ref = state;\n  *num_ref = num;\n  *num1_ref = num1;\n  *num2_ref = num2;\n  *err_range_ref = err_range;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ptr_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const ptr_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const state_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const num_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num1_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const num1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num2_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const num2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err_range_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const err_range_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mask_set",
                        "type": "opng_bitset_t",
                        "definition": [
                            "opng_bitset_t mask_set"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "const char * const",
                        "definition": [
                            "const char * const ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ptr_idx = *ptr_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "state",
                        "type": "int",
                        "definition": [
                            "int state = *state_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num",
                        "type": "int",
                        "definition": [
                            "int num = *num_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num1",
                        "type": "int",
                        "definition": [
                            "int num1 = *num1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num2",
                        "type": "int",
                        "definition": [
                            "int num2 = *num2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "err_range",
                        "type": "int",
                        "definition": [
                            "int err_range = *err_range_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_ftello",
            "header": "opng_foffset_t opng_ftello(FILE *stream)",
            "params": [
                "FILE *stream"
            ],
            "definition": "opng_foffset_t opng_ftello(FILE *stream)\n{\n  return (opng_foffset_t) ftell(stream);\n}\n\n",
            "calle": [
                "ftell"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_fseeko",
            "header": "int opng_fseeko(FILE *stream, opng_foffset_t offset, int whence)",
            "params": [
                "FILE *stream",
                "opng_foffset_t offset",
                "int whence"
            ],
            "definition": "int opng_fseeko(FILE *stream, opng_foffset_t offset, int whence)\n{\n  return fseek(stream, (long) offset, whence);\n}\n\n",
            "calle": [
                "fseek"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offset",
                        "type": "opng_foffset_t",
                        "definition": [
                            "opng_foffset_t offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "whence",
                        "type": "int",
                        "definition": [
                            "int whence"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_freado",
            "header": "size_t opng_freado(FILE *stream, opng_foffset_t offset, int whence, void *block, size_t blocksize)",
            "params": [
                "FILE *stream",
                "opng_foffset_t offset",
                "int whence",
                "void *block",
                "size_t blocksize"
            ],
            "definition": "size_t opng_freado(FILE *stream, opng_foffset_t offset, int whence, void *block, size_t blocksize)\n{\n  fpos_t pos;\n  size_t result;\n  if (fgetpos(stream, &pos) != 0)\n  {\n    return 0;\n  }\n  if (opng_fseeko(stream, offset, whence) == 0)\n  {\n    result = fread(block, 1, blocksize, stream);\n  }\n  else\n    result = 0;\n  if (fsetpos(stream, &pos) != 0)\n  {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "calle": [
                "fgetpos",
                "fread",
                "fsetpos",
                "opng_fseeko"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offset",
                        "type": "opng_foffset_t",
                        "definition": [
                            "opng_foffset_t offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "whence",
                        "type": "int",
                        "definition": [
                            "int whence"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "void *",
                        "definition": [
                            "void *block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blocksize",
                        "type": "size_t",
                        "definition": [
                            "size_t blocksize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "fpos_t",
                        "definition": [
                            "fpos_t pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "size_t",
                        "definition": [
                            "size_t result"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_fwriteo",
            "header": "size_t opng_fwriteo(FILE *stream, opng_foffset_t offset, int whence, const void *block, size_t blocksize)",
            "params": [
                "FILE *stream",
                "opng_foffset_t offset",
                "int whence",
                "const void *block",
                "size_t blocksize"
            ],
            "definition": "size_t opng_fwriteo(FILE *stream, opng_foffset_t offset, int whence, const void *block, size_t blocksize)\n{\n  fpos_t pos;\n  size_t result;\n  if ((fgetpos(stream, &pos) != 0) || (fflush(stream) != 0))\n  {\n    return 0;\n  }\n  if (opng_fseeko(stream, offset, whence) == 0)\n  {\n    result = fwrite(block, 1, blocksize, stream);\n  }\n  else\n    result = 0;\n  if (fflush(stream) != 0)\n  {\n    result = 0;\n  }\n  if (fsetpos(stream, &pos) != 0)\n  {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "calle": [
                "fflush",
                "fgetpos",
                "fsetpos",
                "fwrite",
                "opng_fseeko"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offset",
                        "type": "opng_foffset_t",
                        "definition": [
                            "opng_foffset_t offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "whence",
                        "type": "int",
                        "definition": [
                            "int whence"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block",
                        "type": "const void *",
                        "definition": [
                            "const void *block"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blocksize",
                        "type": "size_t",
                        "definition": [
                            "size_t blocksize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "fpos_t",
                        "definition": [
                            "fpos_t pos"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "size_t",
                        "definition": [
                            "size_t result"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_fgetsize",
            "header": "int opng_fgetsize(FILE *stream, opng_fsize_t *size)",
            "params": [
                "FILE *stream",
                "opng_fsize_t *size"
            ],
            "definition": "int opng_fgetsize(FILE *stream, opng_fsize_t *size)\n{\n  struct stat sbuf;\n  if (fstat(fileno(stream), &sbuf) != 0)\n  {\n    return -1;\n  }\n  if (sbuf.st_size < 0)\n  {\n    return -1;\n  }\n  *size = (opng_fsize_t) sbuf.st_size;\n  return 0;\n}\n\n",
            "calle": [
                "fileno",
                "fstat"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "stream",
                        "type": "FILE *",
                        "definition": [
                            "FILE *stream"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "opng_fsize_t *",
                        "definition": [
                            "opng_fsize_t *size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sbuf",
                        "type": "struct stat",
                        "definition": [
                            "struct stat sbuf"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_path_replace_dir",
            "header": "char *opng_path_replace_dir(char *buffer, size_t bufsize, const char *old_path, const char *new_dirname)",
            "params": [
                "char *buffer",
                "size_t bufsize",
                "const char *old_path",
                "const char *new_dirname"
            ],
            "definition": "char *opng_path_replace_dir(char *buffer, size_t bufsize, const char *old_path, const char *new_dirname)\n{\n  const char *path;\n  unsigned int path_idx = 0;\n  const char *ptr;\n  unsigned int ptr_idx = 0;\n  size_t dirlen;\n  path_idx = old_path;\n  for (;;)\n  {\n    ptr_idx = strpbrk(path, \"/\");\n    if ((&ptr[ptr_idx]) == 0)\n    {\n      break;\n    }\n    path_idx = (&ptr[ptr_idx]) + 1;\n  }\n\n  dirlen = strlen(new_dirname);\n  if (((dirlen + strlen(path)) + 2) >= bufsize)\n  {\n    return 0;\n  }\n  if (dirlen > 0)\n  {\n    strcpy(buffer, new_dirname);\n    {\n      if (strchr(\"/\", buffer[dirlen - 1]) == 0)\n      {\n        buffer[dirlen] = '/';\n        dirlen += 1;\n      }\n    }\n  }\n  strcpy(buffer + dirlen, path);\n  return buffer;\n}\n\n",
            "calle": [
                "strchr",
                "strcpy",
                "strlen",
                "strpbrk"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "char *",
                        "definition": [
                            "char *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bufsize",
                        "type": "size_t",
                        "definition": [
                            "size_t bufsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "old_path",
                        "type": "const char *",
                        "definition": [
                            "const char *old_path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_dirname",
                        "type": "const char *",
                        "definition": [
                            "const char *new_dirname"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int path_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr",
                        "type": "const char *",
                        "definition": [
                            "const char *ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ptr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ptr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dirlen",
                        "type": "size_t",
                        "definition": [
                            "size_t dirlen"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_path_replace_ext",
            "header": "char *opng_path_replace_ext(char *buffer, size_t bufsize, const char *old_path, const char *new_extname)",
            "params": [
                "char *buffer",
                "size_t bufsize",
                "const char *old_path",
                "const char *new_extname"
            ],
            "definition": "char *opng_path_replace_ext(char *buffer, size_t bufsize, const char *old_path, const char *new_extname)\n{\n  unsigned int new_extname_idx = 0;\n  size_t i;\n  size_t pos;\n  if (new_extname[0 + new_extname_idx] != '.')\n  {\n    return 0;\n  }\n  for (i = 0, pos = (size_t) (-1); old_path[i] != '\\0'; i += 1)\n  {\n    if (i >= bufsize)\n    {\n      return 0;\n    }\n    if ((buffer[i] = old_path[i]) == '.')\n    {\n      pos = i;\n    }\n  }\n\n  if (i > pos)\n  {\n    i = pos;\n  }\n  for (;; i += 1, new_extname_idx += 1)\n  {\n    if (i >= bufsize)\n    {\n      return 0;\n    }\n    if ((buffer[i] = new_extname[new_extname_idx]) == '\\0')\n    {\n      return buffer;\n    }\n  }\n\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "char *",
                        "definition": [
                            "char *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bufsize",
                        "type": "size_t",
                        "definition": [
                            "size_t bufsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "old_path",
                        "type": "const char *",
                        "definition": [
                            "const char *old_path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_extname",
                        "type": "const char *",
                        "definition": [
                            "const char *new_extname"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_extname_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int new_extname_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pos",
                        "type": "size_t",
                        "definition": [
                            "size_t pos"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_path_make_backup",
            "header": "char *opng_path_make_backup(char *buffer, size_t bufsize, const char *path)",
            "params": [
                "char *buffer",
                "size_t bufsize",
                "const char *path"
            ],
            "definition": "char *opng_path_make_backup(char *buffer, size_t bufsize, const char *path)\n{\n  static const char bak_extname[] = \".bak\";\n  if ((strlen(path) + (sizeof(bak_extname))) > bufsize)\n  {\n    return 0;\n  }\n  strcpy(buffer, path);\n  strcat(buffer, bak_extname);\n  return buffer;\n}\n\n",
            "calle": [
                "strcat",
                "strcpy",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "char *",
                        "definition": [
                            "char *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bufsize",
                        "type": "size_t",
                        "definition": [
                            "size_t bufsize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bak_extname",
                        "type": "const char []",
                        "definition": [
                            "static const char bak_extname[] = \".bak\""
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_os_rename",
            "header": "int opng_os_rename(const char *src_path, const char *dest_path, int clobber)",
            "params": [
                "const char *src_path",
                "const char *dest_path",
                "int clobber"
            ],
            "definition": "int opng_os_rename(const char *src_path, const char *dest_path, int clobber)\n{\n  if (!clobber)\n  {\n    if (access(dest_path, 0) >= 0)\n    {\n      return -1;\n    }\n  }\n  return rename(src_path, dest_path);\n}\n\n",
            "calle": [
                "access",
                "rename"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "src_path",
                        "type": "const char *",
                        "definition": [
                            "const char *src_path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_path",
                        "type": "const char *",
                        "definition": [
                            "const char *dest_path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "clobber",
                        "type": "int",
                        "definition": [
                            "int clobber"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_os_create_dir",
            "header": "int opng_os_create_dir(const char *dirname)",
            "params": [
                "const char *dirname"
            ],
            "definition": "int opng_os_create_dir(const char *dirname)\n{\n  if (dirname[0] == '\\0')\n  {\n    return 0;\n  }\n  {\n    struct stat sbuf;\n    if (stat(dirname, &sbuf) == 0)\n    {\n      return (sbuf.st_mode & S_IFDIR) ? (0) : (-1);\n    }\n    return mkdir(dirname, 0777);\n  }\n}\n\n",
            "calle": [
                "mkdir",
                "stat"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "dirname",
                        "type": "const char *",
                        "definition": [
                            "const char *dirname"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sbuf",
                        "type": "struct stat",
                        "definition": [
                            "struct stat sbuf"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_os_copy_file_attr",
            "header": "int opng_os_copy_file_attr(const char *src_path, const char *dest_path)",
            "params": [
                "const char *src_path",
                "const char *dest_path"
            ],
            "definition": "int opng_os_copy_file_attr(const char *src_path, const char *dest_path)\n{\n  struct stat sbuf;\n  int result;\n  if (stat(src_path, &sbuf) != 0)\n  {\n    return -1;\n  }\n  result = 0;\n  if (chown(dest_path, sbuf.st_uid, sbuf.st_gid) != 0)\n  {\n  }\n  if (chmod(dest_path, sbuf.st_mode) != 0)\n  {\n    result = -1;\n  }\n  {\n    struct utimbuf utbuf;\n    utbuf.actime = sbuf.st_atime;\n    utbuf.modtime = sbuf.st_mtime;\n    if (utime(dest_path, &utbuf) != 0)\n    {\n      result = -1;\n    }\n  }\n  return result;\n}\n\n",
            "calle": [
                "chmod",
                "chown",
                "stat",
                "utime"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "src_path",
                        "type": "const char *",
                        "definition": [
                            "const char *src_path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dest_path",
                        "type": "const char *",
                        "definition": [
                            "const char *dest_path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sbuf",
                        "type": "struct stat",
                        "definition": [
                            "struct stat sbuf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "int",
                        "definition": [
                            "int result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "utbuf",
                        "type": "struct utimbuf",
                        "definition": [
                            "struct utimbuf utbuf"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_os_test_file_access",
            "header": "int opng_os_test_file_access(const char *path, const char *mode)",
            "params": [
                "const char *path",
                "const char *mode"
            ],
            "definition": "int opng_os_test_file_access(const char *path, const char *mode)\n{\n  int faccess;\n  int freg;\n  faccess = (freg = 0);\n  if (strchr(mode, 'f') != 0)\n  {\n    freg = 1;\n  }\n  if (strchr(mode, 'r') != 0)\n  {\n    faccess |= 4;\n  }\n  if (strchr(mode, 'w') != 0)\n  {\n    faccess |= 2;\n  }\n  if (strchr(mode, 'x') != 0)\n  {\n    faccess |= 1;\n  }\n  if ((faccess == 0) && (!freg))\n  {\n    if (strchr(mode, 'e') == 0)\n    {\n      return 0;\n    }\n  }\n  {\n    struct stat sbuf;\n    if (stat(path, &sbuf) != 0)\n    {\n      return -1;\n    }\n    if (freg && ((sbuf.st_mode & S_IFREG) != S_IFREG))\n    {\n      return -1;\n    }\n    if (faccess == 0)\n    {\n      return 0;\n    }\n    return access(path, faccess);\n  }\n}\n\n",
            "calle": [
                "access",
                "stat",
                "strchr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    },
                    {
                        "path": null,
                        "name": "mode",
                        "type": "const char *",
                        "definition": [
                            "const char *mode"
                        ]
                    },
                    {
                        "path": null,
                        "name": "faccess",
                        "type": "int",
                        "definition": [
                            "int faccess"
                        ]
                    },
                    {
                        "path": null,
                        "name": "freg",
                        "type": "int",
                        "definition": [
                            "int freg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sbuf",
                        "type": "struct stat",
                        "definition": [
                            "struct stat sbuf"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_os_test_file_equiv",
            "header": "int opng_os_test_file_equiv(const char *path1, const char *path2)",
            "params": [
                "const char *path1",
                "const char *path2"
            ],
            "definition": "int opng_os_test_file_equiv(const char *path1, const char *path2)\n{\n  struct stat sbuf1;\n  struct stat sbuf2;\n  if ((stat(path1, &sbuf1) != 0) || (stat(path2, &sbuf2) != 0))\n  {\n    return -1;\n  }\n  if ((sbuf1.st_dev == sbuf2.st_dev) && (sbuf1.st_ino == sbuf2.st_ino))\n  {\n    return (sbuf1.st_ino != 0) ? (1) : (-1);\n  }\n  else\n  {\n    return 0;\n  }\n}\n\n",
            "calle": [
                "stat"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "path1",
                        "type": "const char *",
                        "definition": [
                            "const char *path1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "path2",
                        "type": "const char *",
                        "definition": [
                            "const char *path2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sbuf1",
                        "type": "struct stat",
                        "definition": [
                            "struct stat sbuf1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sbuf2",
                        "type": "struct stat",
                        "definition": [
                            "struct stat sbuf2"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_os_unlink",
            "header": "int opng_os_unlink(const char *path)",
            "params": [
                "const char *path"
            ],
            "definition": "int opng_os_unlink(const char *path)\n{\n  return unlink(path);\n}\n\n",
            "calle": [
                "unlink"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "path",
                        "type": "const char *",
                        "definition": [
                            "const char *path"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_ulratio_to_factor_string",
            "header": "int opng_ulratio_to_factor_string(char *buffer, size_t buffer_size, const struct opng_ulratio *ratio)",
            "params": [
                "char *buffer",
                "size_t buffer_size",
                "const struct opng_ulratio *ratio"
            ],
            "definition": "int opng_ulratio_to_factor_string(char *buffer, size_t buffer_size, const struct opng_ulratio *ratio)\n{\n  opng_uxlong_impl_t num = ratio->num;\n  opng_uxlong_impl_t denom = ratio->denom;\n  return opng_sprint_uratio_impl(buffer, buffer_size, num, denom, 0);\n}\n\n",
            "calle": [
                "opng_sprint_uratio_impl"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "char *",
                        "definition": [
                            "char *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer_size",
                        "type": "size_t",
                        "definition": [
                            "size_t buffer_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct opng_ulratio",
                        "type": "const struct opng_ulratio *",
                        "definition": [
                            "const struct opng_ulratio *ratio"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num",
                        "type": "opng_uxlong_impl_t",
                        "definition": [
                            "opng_uxlong_impl_t num = ratio->num"
                        ]
                    },
                    {
                        "path": null,
                        "name": "denom",
                        "type": "opng_uxlong_impl_t",
                        "definition": [
                            "opng_uxlong_impl_t denom = ratio->denom"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_ulratio_to_percent_string",
            "header": "int opng_ulratio_to_percent_string(char *buffer, size_t buffer_size, const struct opng_ulratio *ratio)",
            "params": [
                "char *buffer",
                "size_t buffer_size",
                "const struct opng_ulratio *ratio"
            ],
            "definition": "int opng_ulratio_to_percent_string(char *buffer, size_t buffer_size, const struct opng_ulratio *ratio)\n{\n  opng_uxlong_impl_t num = ratio->num;\n  opng_uxlong_impl_t denom = ratio->denom;\n  return opng_sprint_uratio_impl(buffer, buffer_size, num, denom, 1);\n}\n\n",
            "calle": [
                "opng_sprint_uratio_impl"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "char *",
                        "definition": [
                            "char *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer_size",
                        "type": "size_t",
                        "definition": [
                            "size_t buffer_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct opng_ulratio",
                        "type": "const struct opng_ulratio *",
                        "definition": [
                            "const struct opng_ulratio *ratio"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num",
                        "type": "opng_uxlong_impl_t",
                        "definition": [
                            "opng_uxlong_impl_t num = ratio->num"
                        ]
                    },
                    {
                        "path": null,
                        "name": "denom",
                        "type": "opng_uxlong_impl_t",
                        "definition": [
                            "opng_uxlong_impl_t denom = ratio->denom"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_snprintf_impl",
            "header": "",
            "params": [
                "char *buffer",
                "size_t buffer_size",
                "const char *format",
                "..."
            ],
            "definition": "static int opng_snprintf_impl(char *buffer, size_t buffer_size, const char *format, ...)\n{\n  va_list arg_ptr;\n  int result;\n  __builtin_va_start(arg_ptr);\n  result = vsnprintf(buffer, buffer_size, format, arg_ptr);\n  ;\n  if ((result < 0) || (((size_t) result) >= buffer_size))\n  {\n    if (buffer_size > 0)\n    {\n      buffer[buffer_size - 1] = '\\0';\n    }\n    return -1;\n  }\n  return result;\n}\n\n",
            "calle": [
                "__builtin_va_start",
                "vsnprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "char *",
                        "definition": [
                            "char *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer_size",
                        "type": "size_t",
                        "definition": [
                            "size_t buffer_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "format",
                        "type": "const char *",
                        "definition": [
                            "const char *format"
                        ]
                    },
                    {
                        "path": null,
                        "name": "arg_ptr",
                        "type": "va_list",
                        "definition": [
                            "va_list arg_ptr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result",
                        "type": "int",
                        "definition": [
                            "int result"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "opng_sprint_uratio_impl",
            "header": "",
            "params": [
                "char *buffer",
                "size_t buffer_size",
                "opng_uxlong_impl_t num",
                "opng_uxlong_impl_t denom",
                "int always_percent"
            ],
            "definition": "static int opng_sprint_uratio_impl(char *buffer, size_t buffer_size, opng_uxlong_impl_t num, opng_uxlong_impl_t denom, int always_percent)\n{\n  opng_uxlong_impl_t integer_part;\n  opng_uxlong_impl_t remainder;\n  unsigned int fractional_part;\n  unsigned int scale;\n  double scaled_ratio;\n  if (denom == 0)\n  {\n    return opng_snprintf_impl(buffer, buffer_size, (num == 0) ? (\"??%%\") : (\"INFINITY%%\"));\n  }\n  if ((num < denom) && ((denom / (denom - num)) < 20000))\n  {\n    scale = 10000;\n    scaled_ratio = (((double) num) * ((double) scale)) / ((double) denom);\n    fractional_part = (unsigned int) (scaled_ratio + 0.5);\n    if (fractional_part >= scale)\n    {\n      fractional_part = scale - 1;\n    }\n    return opng_snprintf_impl(buffer, buffer_size, \"%u.%02u%%\", fractional_part / 100, fractional_part % 100);\n  }\n  integer_part = num / denom;\n  remainder = num % denom;\n  scale = 100;\n  scaled_ratio = (((double) remainder) * ((double) scale)) / ((double) denom);\n  fractional_part = (unsigned int) (scaled_ratio + 0.5);\n  if (fractional_part >= scale)\n  {\n    fractional_part = 0;\n    integer_part += 1;\n  }\n  if (always_percent)\n  {\n    return opng_snprintf_impl(buffer, buffer_size, \"%lu%02u%%\", integer_part, fractional_part);\n  }\n  if (integer_part < 100)\n  {\n    return opng_snprintf_impl(buffer, buffer_size, \"%lu.%02ux\", integer_part, fractional_part);\n  }\n  integer_part = num / denom;\n  if (remainder > ((denom - 1) / 2))\n  {\n    integer_part += 1;\n  }\n  return opng_snprintf_impl(buffer, buffer_size, \"%lux\", integer_part);\n}\n\n",
            "calle": [
                "opng_snprintf_impl"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buffer",
                        "type": "char *",
                        "definition": [
                            "char *buffer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buffer_size",
                        "type": "size_t",
                        "definition": [
                            "size_t buffer_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "num",
                        "type": "opng_uxlong_impl_t",
                        "definition": [
                            "opng_uxlong_impl_t num"
                        ]
                    },
                    {
                        "path": null,
                        "name": "denom",
                        "type": "opng_uxlong_impl_t",
                        "definition": [
                            "opng_uxlong_impl_t denom"
                        ]
                    },
                    {
                        "path": null,
                        "name": "always_percent",
                        "type": "int",
                        "definition": [
                            "int always_percent"
                        ]
                    },
                    {
                        "path": null,
                        "name": "integer_part",
                        "type": "opng_uxlong_impl_t",
                        "definition": [
                            "opng_uxlong_impl_t integer_part"
                        ]
                    },
                    {
                        "path": null,
                        "name": "remainder",
                        "type": "opng_uxlong_impl_t",
                        "definition": [
                            "opng_uxlong_impl_t remainder"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fractional_part",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int fractional_part"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scale",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int scale"
                        ]
                    },
                    {
                        "path": null,
                        "name": "scaled_ratio",
                        "type": "double",
                        "definition": [
                            "double scaled_ratio"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        }
    ],
    "typedefs": [
        "typedef size_t z_size_t",
        "typedef unsigned char Byte",
        "typedef unsigned int uInt",
        "typedef unsigned long uLong",
        "typedef Byte Bytef",
        "typedef char charf",
        "typedef int intf",
        "typedef uInt uIntf",
        "typedef uLong uLongf",
        "typedef const void *voidpc",
        "typedef void *voidpf",
        "typedef void *voidp",
        "typedef unsigned z_crc_t",
        "typedef z_stream *z_streamp",
        "typedef gz_header *gz_headerp",
        "typedef unsigned char uch",
        "typedef uch uchf",
        "typedef unsigned short ush",
        "typedef ush ushf",
        "typedef unsigned long ulg",
        "typedef unsigned long z_word_t",
        "typedef ush Pos",
        "typedef Pos Posf",
        "typedef unsigned IPos",
        "typedef gz_state *gz_statep",
        "typedef png_double *png_doublep",
        "typedef const png_double *png_const_doublep",
        "typedef png_double **png_doublepp",
        "typedef unsigned char png_byte",
        "typedef short png_int_16",
        "typedef unsigned short png_uint_16",
        "typedef int png_int_32",
        "typedef unsigned int png_uint_32",
        "typedef size_t png_size_t",
        "typedef ptrdiff_t png_ptrdiff_t",
        "typedef size_t png_alloc_size_t",
        "typedef png_int_32 png_fixed_point",
        "typedef void *png_voidp",
        "typedef const void *png_const_voidp",
        "typedef png_byte *png_bytep",
        "typedef const png_byte *png_const_bytep",
        "typedef png_uint_32 *png_uint_32p",
        "typedef const png_uint_32 *png_const_uint_32p",
        "typedef png_int_32 *png_int_32p",
        "typedef const png_int_32 *png_const_int_32p",
        "typedef png_uint_16 *png_uint_16p",
        "typedef const png_uint_16 *png_const_uint_16p",
        "typedef png_int_16 *png_int_16p",
        "typedef const png_int_16 *png_const_int_16p",
        "typedef char *png_charp",
        "typedef const char *png_const_charp",
        "typedef png_fixed_point *png_fixed_point_p",
        "typedef const png_fixed_point *png_const_fixed_point_p",
        "typedef size_t *png_size_tp",
        "typedef const size_t *png_const_size_tp",
        "typedef FILE *png_FILE_p",
        "typedef png_byte **png_bytepp",
        "typedef png_uint_32 **png_uint_32pp",
        "typedef png_int_32 **png_int_32pp",
        "typedef png_uint_16 **png_uint_16pp",
        "typedef png_int_16 **png_int_16pp",
        "typedef const char **png_const_charpp",
        "typedef char **png_charpp",
        "typedef png_fixed_point **png_fixed_point_pp",
        "typedef char ***png_charppp",
        "typedef char *png_libpng_version_1_6_40",
        "typedef const png_struct *png_const_structp",
        "typedef png_struct *png_structp",
        "typedef png_struct **png_structpp",
        "typedef png_info *png_infop",
        "typedef const png_info *png_const_infop",
        "typedef png_info **png_infopp",
        "typedef png_struct *png_structrp",
        "typedef const png_struct *png_const_structrp",
        "typedef png_info *png_inforp",
        "typedef const png_info *png_const_inforp",
        "typedef png_color *png_colorp",
        "typedef const png_color *png_const_colorp",
        "typedef png_color **png_colorpp",
        "typedef png_color_16 *png_color_16p",
        "typedef const png_color_16 *png_const_color_16p",
        "typedef png_color_16 **png_color_16pp",
        "typedef png_color_8 *png_color_8p",
        "typedef const png_color_8 *png_const_color_8p",
        "typedef png_color_8 **png_color_8pp",
        "typedef png_sPLT_entry *png_sPLT_entryp",
        "typedef const png_sPLT_entry *png_const_sPLT_entryp",
        "typedef png_sPLT_entry **png_sPLT_entrypp",
        "typedef png_sPLT_t *png_sPLT_tp",
        "typedef const png_sPLT_t *png_const_sPLT_tp",
        "typedef png_sPLT_t **png_sPLT_tpp",
        "typedef png_time *png_timep",
        "typedef const png_time *png_const_timep",
        "typedef png_time **png_timepp",
        "typedef png_unknown_chunk *png_unknown_chunkp",
        "typedef const png_unknown_chunk *png_const_unknown_chunkp",
        "typedef png_unknown_chunk **png_unknown_chunkpp",
        "typedef png_row_info *png_row_infop",
        "typedef png_row_info **png_row_infopp",
        "typedef const png_uint_16p *png_const_uint_16pp",
        "typedef char png_warning_parameters[8][32]",
        "typedef png_libpng_version_1_6_40 Your_png_h_is_not_version_1_6_40",
        "typedef png_alloc_size_t pngx_alloc_size_t",
        "typedef unsigned int opng_bitset_t",
        "typedef long opng_foffset_t",
        "typedef unsigned long opng_fsize_t",
        "typedef long opng_xlong_impl_t",
        "typedef unsigned long opng_uxlong_impl_t"
    ]
}