{
    "special_type": [
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "typedef enum \n{\n  BUF_OK = 0,\n  BUF_ENOMEM = -1,\n  BUF_EINVALIDIDX = -2\n} buferror_t",
            "name": "buferror_t",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct buf\n{\n  uint8_t *data;\n  size_t size;\n  size_t asize;\n  size_t unit;\n}",
            "name": "buf",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "asize",
                        "type": "size_t",
                        "definition": [
                            "size_t asize"
                        ]
                    },
                    {
                        "path": null,
                        "name": "unit",
                        "type": "size_t",
                        "definition": [
                            "size_t unit"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "enum \n{\n  SD_AUTOLINK_SHORT_DOMAINS = 1 << 0\n}",
            "name": null,
            "names": []
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "enum mkd_autolink\n{\n  MKDA_NOT_AUTOLINK,\n  MKDA_NORMAL,\n  MKDA_EMAIL\n}",
            "name": "mkd_autolink",
            "names": []
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "enum mkd_tableflags\n{\n  MKD_TABLE_ALIGN_L = 1,\n  MKD_TABLE_ALIGN_R = 2,\n  MKD_TABLE_ALIGN_CENTER = 3,\n  MKD_TABLE_ALIGNMASK = 3,\n  MKD_TABLE_HEADER = 4\n}",
            "name": "mkd_tableflags",
            "names": []
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "enum mkd_extensions\n{\n  MKDEXT_NO_INTRA_EMPHASIS = 1 << 0,\n  MKDEXT_TABLES = 1 << 1,\n  MKDEXT_FENCED_CODE = 1 << 2,\n  MKDEXT_AUTOLINK = 1 << 3,\n  MKDEXT_STRIKETHROUGH = 1 << 4,\n  MKDEXT_SPACE_HEADERS = 1 << 6,\n  MKDEXT_SUPERSCRIPT = 1 << 7,\n  MKDEXT_LAX_SPACING = 1 << 8,\n  MKDEXT_NO_EMAIL_AUTOLINK = 1 << 9\n}",
            "name": "mkd_extensions",
            "names": []
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct sd_callbacks\n{\n  void (*blockcode)(struct buf *ob, const struct buf *text, const struct buf *lang, void *opaque);\n  void (*blockquote)(struct buf *ob, const struct buf *text, void *opaque);\n  void (*blockspoiler)(struct buf *ob, const struct buf *text, void *opaque);\n  void (*blockhtml)(struct buf *ob, const struct buf *text, void *opaque);\n  void (*header)(struct buf *ob, const struct buf *text, int level, void *opaque);\n  void (*hrule)(struct buf *ob, void *opaque);\n  void (*list)(struct buf *ob, const struct buf *text, int flags, void *opaque);\n  void (*listitem)(struct buf *ob, const struct buf *text, int flags, void *opaque);\n  void (*paragraph)(struct buf *ob, const struct buf *text, void *opaque);\n  void (*table)(struct buf *ob, const struct buf *header, const struct buf *body, void *opaque);\n  void (*table_row)(struct buf *ob, const struct buf *text, void *opaque);\n  void (*table_cell)(struct buf *ob, const struct buf *text, int flags, void *opaque, int col_span);\n  int (*autolink)(struct buf *ob, const struct buf *link, enum mkd_autolink type, void *opaque);\n  int (*codespan)(struct buf *ob, const struct buf *text, void *opaque);\n  int (*spoilerspan)(struct buf *ob, const struct buf *text, void *opaque);\n  int (*double_emphasis)(struct buf *ob, const struct buf *text, void *opaque);\n  int (*emphasis)(struct buf *ob, const struct buf *text, void *opaque);\n  int (*image)(struct buf *ob, const struct buf *link, const struct buf *title, const struct buf *alt, void *opaque);\n  int (*linebreak)(struct buf *ob, void *opaque);\n  int (*link)(struct buf *ob, const struct buf *link, const struct buf *title, const struct buf *content, void *opaque);\n  int (*raw_html_tag)(struct buf *ob, const struct buf *tag, void *opaque);\n  int (*triple_emphasis)(struct buf *ob, const struct buf *text, void *opaque);\n  int (*strikethrough)(struct buf *ob, const struct buf *text, void *opaque);\n  int (*superscript)(struct buf *ob, const struct buf *text, void *opaque);\n  void (*entity)(struct buf *ob, const struct buf *entity, void *opaque);\n  void (*normal_text)(struct buf *ob, const struct buf *text, void *opaque);\n  void (*doc_header)(struct buf *ob, void *opaque);\n  void (*doc_footer)(struct buf *ob, void *opaque);\n}",
            "name": "sd_callbacks",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "blockcode",
                        "type": "void (*)(struct buf *ob, const struct buf *text, const struct buf *lang, void *opaque)",
                        "definition": [
                            "void (*blockcode)(struct buf *ob, const struct buf *text, const struct buf *lang, void *opaque)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blockquote",
                        "type": "void (*)(struct buf *ob, const struct buf *text, void *opaque)",
                        "definition": [
                            "void (*blockquote)(struct buf *ob, const struct buf *text, void *opaque)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blockspoiler",
                        "type": "void (*)(struct buf *ob, const struct buf *text, void *opaque)",
                        "definition": [
                            "void (*blockspoiler)(struct buf *ob, const struct buf *text, void *opaque)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "blockhtml",
                        "type": "void (*)(struct buf *ob, const struct buf *text, void *opaque)",
                        "definition": [
                            "void (*blockhtml)(struct buf *ob, const struct buf *text, void *opaque)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "header",
                        "type": "void (*)(struct buf *ob, const struct buf *text, int level, void *opaque)",
                        "definition": [
                            "void (*header)(struct buf *ob, const struct buf *text, int level, void *opaque)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hrule",
                        "type": "void (*)(struct buf *ob, void *opaque)",
                        "definition": [
                            "void (*hrule)(struct buf *ob, void *opaque)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "list",
                        "type": "void (*)(struct buf *ob, const struct buf *text, int flags, void *opaque)",
                        "definition": [
                            "void (*list)(struct buf *ob, const struct buf *text, int flags, void *opaque)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "listitem",
                        "type": "void (*)(struct buf *ob, const struct buf *text, int flags, void *opaque)",
                        "definition": [
                            "void (*listitem)(struct buf *ob, const struct buf *text, int flags, void *opaque)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "paragraph",
                        "type": "void (*)(struct buf *ob, const struct buf *text, void *opaque)",
                        "definition": [
                            "void (*paragraph)(struct buf *ob, const struct buf *text, void *opaque)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "table",
                        "type": "void (*)(struct buf *ob, const struct buf *header, const struct buf *body, void *opaque)",
                        "definition": [
                            "void (*table)(struct buf *ob, const struct buf *header, const struct buf *body, void *opaque)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "table_row",
                        "type": "void (*)(struct buf *ob, const struct buf *text, void *opaque)",
                        "definition": [
                            "void (*table_row)(struct buf *ob, const struct buf *text, void *opaque)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "table_cell",
                        "type": "void (*)(struct buf *ob, const struct buf *text, int flags, void *opaque, int col_span)",
                        "definition": [
                            "void (*table_cell)(struct buf *ob, const struct buf *text, int flags, void *opaque, int col_span)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "autolink",
                        "type": "int (*)(struct buf *ob, const struct buf *link, enum mkd_autolink type, void *opaque)",
                        "definition": [
                            "int (*autolink)(struct buf *ob, const struct buf *link, enum mkd_autolink type, void *opaque)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "codespan",
                        "type": "int (*)(struct buf *ob, const struct buf *text, void *opaque)",
                        "definition": [
                            "int (*codespan)(struct buf *ob, const struct buf *text, void *opaque)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "spoilerspan",
                        "type": "int (*)(struct buf *ob, const struct buf *text, void *opaque)",
                        "definition": [
                            "int (*spoilerspan)(struct buf *ob, const struct buf *text, void *opaque)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "double_emphasis",
                        "type": "int (*)(struct buf *ob, const struct buf *text, void *opaque)",
                        "definition": [
                            "int (*double_emphasis)(struct buf *ob, const struct buf *text, void *opaque)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "emphasis",
                        "type": "int (*)(struct buf *ob, const struct buf *text, void *opaque)",
                        "definition": [
                            "int (*emphasis)(struct buf *ob, const struct buf *text, void *opaque)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "image",
                        "type": "int (*)(struct buf *ob, const struct buf *link, const struct buf *title, const struct buf *alt, void *opaque)",
                        "definition": [
                            "int (*image)(struct buf *ob, const struct buf *link, const struct buf *title, const struct buf *alt, void *opaque)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "linebreak",
                        "type": "int (*)(struct buf *ob, void *opaque)",
                        "definition": [
                            "int (*linebreak)(struct buf *ob, void *opaque)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link",
                        "type": "int (*)(struct buf *ob, const struct buf *link, const struct buf *title, const struct buf *content, void *opaque)",
                        "definition": [
                            "int (*link)(struct buf *ob, const struct buf *link, const struct buf *title, const struct buf *content, void *opaque)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "raw_html_tag",
                        "type": "int (*)(struct buf *ob, const struct buf *tag, void *opaque)",
                        "definition": [
                            "int (*raw_html_tag)(struct buf *ob, const struct buf *tag, void *opaque)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "triple_emphasis",
                        "type": "int (*)(struct buf *ob, const struct buf *text, void *opaque)",
                        "definition": [
                            "int (*triple_emphasis)(struct buf *ob, const struct buf *text, void *opaque)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "strikethrough",
                        "type": "int (*)(struct buf *ob, const struct buf *text, void *opaque)",
                        "definition": [
                            "int (*strikethrough)(struct buf *ob, const struct buf *text, void *opaque)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "superscript",
                        "type": "int (*)(struct buf *ob, const struct buf *text, void *opaque)",
                        "definition": [
                            "int (*superscript)(struct buf *ob, const struct buf *text, void *opaque)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entity",
                        "type": "void (*)(struct buf *ob, const struct buf *entity, void *opaque)",
                        "definition": [
                            "void (*entity)(struct buf *ob, const struct buf *entity, void *opaque)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "normal_text",
                        "type": "void (*)(struct buf *ob, const struct buf *text, void *opaque)",
                        "definition": [
                            "void (*normal_text)(struct buf *ob, const struct buf *text, void *opaque)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "doc_header",
                        "type": "void (*)(struct buf *ob, void *opaque)",
                        "definition": [
                            "void (*doc_header)(struct buf *ob, void *opaque)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "doc_footer",
                        "type": "void (*)(struct buf *ob, void *opaque)",
                        "definition": [
                            "void (*doc_footer)(struct buf *ob, void *opaque)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct html_renderopt\n{\n  struct \n  {\n    int header_count;\n    int current_level;\n    int level_offset;\n  } toc_data;\n  char *toc_id_prefix;\n  unsigned int flags;\n  char **html_element_whitelist;\n  char **html_attr_whitelist;\n  void (*link_attributes)(struct buf *ob, const struct buf *url, void *self);\n}",
            "name": "html_renderopt",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "toc_data",
                        "type": "struct \n{\n  int header_count;\n  int current_level;\n  int level_offset;\n}",
                        "definition": [
                            "struct \n{\n  int header_count;\n  int current_level;\n  int level_offset;\n} toc_data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "toc_id_prefix",
                        "type": "char *",
                        "definition": [
                            "char *toc_id_prefix"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "html_element_whitelist",
                        "type": "char **",
                        "definition": [
                            "char **html_element_whitelist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "html_attr_whitelist",
                        "type": "char **",
                        "definition": [
                            "char **html_attr_whitelist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_attributes",
                        "type": "void (*)(struct buf *ob, const struct buf *url, void *self)",
                        "definition": [
                            "void (*link_attributes)(struct buf *ob, const struct buf *url, void *self)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "typedef enum \n{\n  HTML_SKIP_HTML = 1 << 0,\n  HTML_SKIP_STYLE = 1 << 1,\n  HTML_SKIP_IMAGES = 1 << 2,\n  HTML_SKIP_LINKS = 1 << 3,\n  HTML_EXPAND_TABS = 1 << 4,\n  HTML_SAFELINK = 1 << 5,\n  HTML_TOC = 1 << 6,\n  HTML_HARD_WRAP = 1 << 7,\n  HTML_USE_XHTML = 1 << 8,\n  HTML_ESCAPE = 1 << 9,\n  HTML_ALLOW_ELEMENT_WHITELIST = 1 << 10\n} html_render_mode",
            "name": "html_render_mode",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "typedef enum \n{\n  HTML_TAG_NONE = 0,\n  HTML_TAG_OPEN,\n  HTML_TAG_CLOSE\n} html_tag",
            "name": "html_tag",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct smartypants_data\n{\n  int in_squote;\n  int in_dquote;\n}",
            "name": "smartypants_data",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "in_squote",
                        "type": "int",
                        "definition": [
                            "int in_squote"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_dquote",
                        "type": "int",
                        "definition": [
                            "int in_dquote"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct sd_markdown\n{\n  struct sd_callbacks cb;\n  void *opaque;\n  struct link_ref *refs[8];\n  uint8_t active_char[256];\n  struct stack work_bufs[2];\n  unsigned int ext_flags;\n  size_t max_nesting;\n  size_t max_table_cols;\n  int in_link_body;\n}",
            "name": "sd_markdown",
            "names": [
                "struct sd_markdown"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "cb",
                        "type": "struct sd_callbacks",
                        "definition": [
                            "struct sd_callbacks cb"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    },
                    {
                        "path": null,
                        "name": "refs",
                        "type": "struct link_ref *[8]",
                        "definition": [
                            "struct link_ref *refs[8]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "active_char",
                        "type": "uint8_t [256]",
                        "definition": [
                            "uint8_t active_char[256]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "work_bufs",
                        "type": "struct stack [2]",
                        "definition": [
                            "struct stack work_bufs[2]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ext_flags",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ext_flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_nesting",
                        "type": "size_t",
                        "definition": [
                            "size_t max_nesting"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_table_cols",
                        "type": "size_t",
                        "definition": [
                            "size_t max_table_cols"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_link_body",
                        "type": "int",
                        "definition": [
                            "int in_link_body"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct stack\n{\n  void **item;\n  size_t size;\n  size_t asize;\n}",
            "name": "stack",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "item",
                        "type": "void **",
                        "definition": [
                            "void **item"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "asize",
                        "type": "size_t",
                        "definition": [
                            "size_t asize"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct link_ref\n{\n  unsigned int id;\n  struct buf *link;\n  struct buf *label;\n  struct buf *title;\n  struct link_ref *next;\n}",
            "name": "link_ref",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "id",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int id"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *link"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *label"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *title"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct link_ref",
                        "type": "struct link_ref *",
                        "definition": [
                            "struct link_ref *next"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef size_t (*char_trigger)(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t max_rewind, size_t max_lookbehind, size_t size)",
            "name": "char_trigger",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_rewind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_rewind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_lookbehind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_lookbehind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "enum markdown_char_t\n{\n  MD_CHAR_NONE = 0,\n  MD_CHAR_EMPHASIS,\n  MD_CHAR_CODESPAN,\n  MD_CHAR_LINEBREAK,\n  MD_CHAR_LINK,\n  MD_CHAR_LANGLE,\n  MD_CHAR_ESCAPE,\n  MD_CHAR_ENTITITY,\n  MD_CHAR_AUTOLINK_URL,\n  MD_CHAR_AUTOLINK_EMAIL,\n  MD_CHAR_AUTOLINK_WWW,\n  MD_CHAR_AUTOLINK_SUBREDDIT_OR_USERNAME,\n  MD_CHAR_SUPERSCRIPT\n}",
            "name": "markdown_char_t",
            "names": []
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct _object PyObject",
            "name": "PyObject",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "",
                        "name": "_object",
                        "names": [
                            "typedef struct _object PyObject"
                        ]
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "typedef struct PyMethodDef PyMethodDef",
            "name": "PyMethodDef",
            "names": [],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Struct'>",
                        "definition": "",
                        "name": "PyMethodDef",
                        "names": [
                            "typedef struct PyMethodDef PyMethodDef"
                        ]
                    }
                ],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.FuncDecl'>",
            "definition": "typedef PyObject *(*PyCFunction)(PyObject *, PyObject *)",
            "name": "PyCFunction",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Enum'>",
            "definition": "enum snudown_renderer_mode\n{\n  RENDERER_USERTEXT = 0,\n  RENDERER_WIKI,\n  RENDERER_COUNT\n}",
            "name": "snudown_renderer_mode",
            "names": []
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct snudown_renderopt\n{\n  struct html_renderopt html;\n  int nofollow;\n  const char *target;\n}",
            "name": "snudown_renderopt",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "html",
                        "type": "struct html_renderopt",
                        "definition": [
                            "struct html_renderopt html"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nofollow",
                        "type": "int",
                        "definition": [
                            "int nofollow"
                        ]
                    },
                    {
                        "path": null,
                        "name": "target",
                        "type": "const char *",
                        "definition": [
                            "const char *target"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct snudown_renderer\n{\n  struct sd_markdown *main_renderer;\n  struct sd_markdown *toc_renderer;\n  struct module_state *state;\n  struct module_state *toc_state;\n}",
            "name": "snudown_renderer",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *main_renderer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *toc_renderer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct module_state",
                        "type": "struct module_state *",
                        "definition": [
                            "struct module_state *state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct module_state",
                        "type": "struct module_state *",
                        "definition": [
                            "struct module_state *toc_state"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "type": "<class 'pycparser.c_ast.Struct'>",
            "definition": "struct module_state\n{\n  struct sd_callbacks callbacks;\n  struct snudown_renderopt options;\n}",
            "name": "module_state",
            "names": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "callbacks",
                        "type": "struct sd_callbacks",
                        "definition": [
                            "struct sd_callbacks callbacks"
                        ]
                    },
                    {
                        "path": null,
                        "name": "options",
                        "type": "struct snudown_renderopt",
                        "definition": [
                            "struct snudown_renderopt options"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        }
    ],
    "global_variable": [
        {
            "path": null,
            "name": "HREF_SAFE",
            "type": "const char []",
            "definition": [
                "static const char HREF_SAFE[] = {2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}"
            ]
        },
        {
            "path": null,
            "name": "HTML_ESCAPE_TABLE",
            "type": "const char []",
            "definition": [
                "static const char HTML_ESCAPE_TABLE[] = {7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 7, 7, 0, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 1, 0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}"
            ]
        },
        {
            "path": null,
            "name": "HTML_ESCAPES",
            "type": "const char *[]",
            "definition": [
                "static const char *HTML_ESCAPES[] = {\"\", \"&quot;\", \"&amp;\", \"&#39;\", \"&#47;\", \"&lt;\", \"&gt;\", \"\"}"
            ]
        },
        {
            "path": null,
            "name": "smartypants_cb_ptrs",
            "type": "size_t (*[])(struct buf *, struct smartypants_data *, uint8_t, const uint8_t *, size_t)",
            "definition": [
                "static size_t (*smartypants_cb_ptrs[])(struct buf *, struct smartypants_data *, uint8_t, const uint8_t *, size_t) = {0, smartypants_cb__dash, smartypants_cb__parens, smartypants_cb__squote, smartypants_cb__dquote, smartypants_cb__amp, smartypants_cb__period, smartypants_cb__number, smartypants_cb__ltag, smartypants_cb__backtick, smartypants_cb__escape}"
            ]
        },
        {
            "path": null,
            "name": "smartypants_cb_chars",
            "type": "const uint8_t []",
            "definition": [
                "static const uint8_t smartypants_cb_chars[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 5, 3, 2, 0, 0, 0, 0, 1, 6, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}"
            ]
        },
        {
            "path": null,
            "name": "MAX_NUM_ENTITY_VAL",
            "type": "const unsigned",
            "definition": [
                "const unsigned MAX_NUM_ENTITY_VAL = 0x10ffff"
            ]
        },
        {
            "path": null,
            "name": "MAX_NUM_ENTITY_LEN",
            "type": "const size_t",
            "definition": [
                "const size_t MAX_NUM_ENTITY_LEN = 7"
            ]
        },
        {
            "path": null,
            "name": "markdown_char_ptrs",
            "type": "char_trigger []",
            "definition": [
                "static char_trigger markdown_char_ptrs[] = {0, &char_emphasis, &char_codespan, &char_linebreak, &char_link, &char_langle_tag, &char_escape, &char_entity, &char_autolink_url, &char_autolink_email, &char_autolink_www, &char_autolink_subreddit_or_username, &char_superscript}"
            ]
        },
        {
            "path": null,
            "name": "sip_hash_key_init",
            "type": "int",
            "definition": [
                "int sip_hash_key_init = 0"
            ]
        },
        {
            "path": null,
            "name": "sip_hash_key",
            "type": "uint8_t [16]",
            "definition": [
                "uint8_t sip_hash_key[16]"
            ]
        },
        {
            "path": null,
            "name": "sundown",
            "type": "struct snudown_renderer [RENDERER_COUNT]",
            "definition": [
                "static struct snudown_renderer sundown[RENDERER_COUNT]"
            ]
        },
        {
            "path": null,
            "name": "html_element_whitelist",
            "type": "char *[]",
            "definition": [
                "static char *html_element_whitelist[] = {\"tr\", \"th\", \"td\", \"table\", \"tbody\", \"thead\", \"tfoot\", \"caption\", 0}"
            ]
        },
        {
            "path": null,
            "name": "html_attr_whitelist",
            "type": "char *[]",
            "definition": [
                "static char *html_attr_whitelist[] = {\"colspan\", \"rowspan\", \"cellspacing\", \"cellpadding\", \"scope\", 0}"
            ]
        },
        {
            "path": null,
            "name": "usertext_toc_state",
            "type": "struct module_state",
            "definition": [
                "static struct module_state usertext_toc_state"
            ]
        },
        {
            "path": null,
            "name": "wiki_toc_state",
            "type": "struct module_state",
            "definition": [
                "static struct module_state wiki_toc_state"
            ]
        },
        {
            "path": null,
            "name": "usertext_state",
            "type": "struct module_state",
            "definition": [
                "static struct module_state usertext_state"
            ]
        },
        {
            "path": null,
            "name": "wiki_state",
            "type": "struct module_state",
            "definition": [
                "static struct module_state wiki_state"
            ]
        },
        {
            "path": null,
            "name": "snudown_module__doc__",
            "type": "const char []",
            "definition": [
                "static const char snudown_module__doc__[] = \"When does the narwhal bacon? At Sundown.\""
            ]
        },
        {
            "path": null,
            "name": "snudown_md__doc__",
            "type": "const char []",
            "definition": [
                "static const char snudown_md__doc__[] = \"Render a Markdown document\""
            ]
        },
        {
            "path": null,
            "name": "snudown_default_md_flags",
            "type": "const unsigned int",
            "definition": [
                "static const unsigned int snudown_default_md_flags = (((MKDEXT_NO_INTRA_EMPHASIS | MKDEXT_SUPERSCRIPT) | MKDEXT_AUTOLINK) | MKDEXT_STRIKETHROUGH) | MKDEXT_TABLES"
            ]
        },
        {
            "path": null,
            "name": "snudown_default_render_flags",
            "type": "const unsigned int",
            "definition": [
                "static const unsigned int snudown_default_render_flags = (((HTML_SKIP_HTML | HTML_SKIP_IMAGES) | HTML_SAFELINK) | HTML_ESCAPE) | HTML_USE_XHTML"
            ]
        },
        {
            "path": null,
            "name": "snudown_wiki_render_flags",
            "type": "const unsigned int",
            "definition": [
                "static const unsigned int snudown_wiki_render_flags = (((HTML_SKIP_HTML | HTML_SAFELINK) | HTML_ALLOW_ELEMENT_WHITELIST) | HTML_ESCAPE) | HTML_USE_XHTML"
            ]
        },
        {
            "path": null,
            "name": "snudown_methods",
            "type": "PyMethodDef []",
            "definition": [
                "static PyMethodDef snudown_methods[] = {{\"markdown\", (PyCFunction) snudown_md, METH_VARARGS | METH_KEYWORDS, snudown_md__doc__}, {0, 0, 0, 0}}"
            ]
        }
    ],
    "function": [
        {
            "path": null,
            "name": "sd_autolink_issafe",
            "header": "int sd_autolink_issafe(const uint8_t *link, size_t link_len)",
            "params": [
                "const uint8_t *link",
                "size_t link_len"
            ],
            "definition": "int sd_autolink_issafe(const uint8_t *link, size_t link_len)\n{\n  static const size_t valid_uris_count = 14;\n  static const char *valid_uris[] = {\"http://\", \"https://\", \"ftp://\", \"mailto://\", \"/\", \"git://\", \"steam://\", \"irc://\", \"news://\", \"mumble://\", \"ssh://\", \"ircs://\", \"ts3server://\", \"#\"};\n  size_t i;\n  for (i = 0; i < valid_uris_count; i += 1)\n  {\n    size_t len = strlen(valid_uris[i]);\n    if (((link_len > len) && (strncasecmp((char *) link, valid_uris[i], len) == 0)) && (((isalnum(link[len]) || (link[len] == '#')) || (link[len] == '/')) || (link[len] == '?')))\n    {\n      return 1;\n    }\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "isalnum",
                "strlen",
                "strncasecmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "link",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *link"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_len",
                        "type": "size_t",
                        "definition": [
                            "size_t link_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "valid_uris_count",
                        "type": "const size_t",
                        "definition": [
                            "static const size_t valid_uris_count = 14"
                        ]
                    },
                    {
                        "path": null,
                        "name": "valid_uris",
                        "type": "const char *[]",
                        "definition": [
                            "static const char *valid_uris[] = {\"http://\", \"https://\", \"ftp://\", \"mailto://\", \"/\", \"git://\", \"steam://\", \"irc://\", \"news://\", \"mumble://\", \"ssh://\", \"ircs://\", \"ts3server://\", \"#\"}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len = strlen(valid_uris[i])"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "sd_autolink__www",
            "header": "size_t sd_autolink__www(size_t *rewind_p, struct buf *link, uint8_t *data, size_t max_rewind, size_t size, unsigned int flags)",
            "params": [
                "size_t *rewind_p",
                "struct buf *link",
                "uint8_t *data",
                "size_t max_rewind",
                "size_t size",
                "unsigned int flags"
            ],
            "definition": "size_t sd_autolink__www(size_t *rewind_p, struct buf *link, uint8_t *data, size_t max_rewind, size_t size, unsigned int flags)\n{\n  size_t link_end;\n  if (((max_rewind > 0) && (!ispunct(data[-1]))) && (!isspace(data[-1])))\n  {\n    return 0;\n  }\n  if ((size < 4) || (memcmp(data, \"www.\", strlen(\"www.\")) != 0))\n  {\n    return 0;\n  }\n  link_end = check_domain(data, size, 0);\n  if (link_end == 0)\n  {\n    return 0;\n  }\n  while ((link_end < size) && (!isspace(data[link_end])))\n    link_end++;\n\n  link_end += 1;\n  link_end = autolink_delim(data, link_end, max_rewind, size);\n  if (link_end == 0)\n  {\n    return 0;\n  }\n  bufput(link, data, link_end);\n  *rewind_p = 0;\n  return (int) link_end;\n}\n\n",
            "calle": [
                "autolink_delim",
                "bufput",
                "check_domain",
                "ispunct",
                "isspace",
                "memcmp",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "rewind_p",
                        "type": "size_t *",
                        "definition": [
                            "size_t *rewind_p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *link"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_rewind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_rewind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_end",
                        "type": "size_t",
                        "definition": [
                            "size_t link_end"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "sd_autolink__email",
            "header": "size_t sd_autolink__email(size_t *rewind_p, struct buf *link, uint8_t *data, size_t max_rewind, size_t size, unsigned int flags)",
            "params": [
                "size_t *rewind_p",
                "struct buf *link",
                "uint8_t *data",
                "size_t max_rewind",
                "size_t size",
                "unsigned int flags"
            ],
            "definition": "size_t sd_autolink__email(size_t *rewind_p, struct buf *link, uint8_t *data, size_t max_rewind, size_t size, unsigned int flags)\n{\n  size_t link_end;\n  size_t rewind;\n  int nb = 0;\n  int np = 0;\n  for (rewind = 0; rewind < max_rewind; rewind += 1)\n  {\n    uint8_t c = data[(-rewind) - 1];\n    if (c == 0)\n    {\n      break;\n    }\n    if (isalnum(c))\n    {\n      continue;\n    }\n    if (strchr(\".+-_\", c) != 0)\n    {\n      continue;\n    }\n    break;\n  }\n\n  if (rewind == 0)\n  {\n    return 0;\n  }\n  for (link_end = 0; link_end < size; link_end += 1)\n  {\n    uint8_t c = data[link_end];\n    if (isalnum(c))\n    {\n      continue;\n    }\n    if (c == '@')\n    {\n      nb += 1;\n    }\n    else\n      if ((c == '.') && (link_end < (size - 1)))\n    {\n      np += 1;\n    }\n    else\n      if ((c != '-') && (c != '_'))\n    {\n      break;\n    }\n  }\n\n  if (((link_end < 2) || (nb != 1)) || (np == 0))\n  {\n    return 0;\n  }\n  link_end = autolink_delim(data, link_end, max_rewind, size);\n  if (link_end == 0)\n  {\n    return 0;\n  }\n  bufput(link, data - rewind, link_end + rewind);\n  *rewind_p = rewind;\n  return link_end;\n}\n\n",
            "calle": [
                "autolink_delim",
                "bufput",
                "isalnum",
                "strchr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "rewind_p",
                        "type": "size_t *",
                        "definition": [
                            "size_t *rewind_p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *link"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_rewind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_rewind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_end",
                        "type": "size_t",
                        "definition": [
                            "size_t link_end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rewind",
                        "type": "size_t",
                        "definition": [
                            "size_t rewind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nb",
                        "type": "int",
                        "definition": [
                            "int nb = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "np",
                        "type": "int",
                        "definition": [
                            "int np = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t c = data[(-rewind) - 1]",
                            "uint8_t c = data[link_end]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "sd_autolink__url",
            "header": "size_t sd_autolink__url(size_t *rewind_p, struct buf *link, uint8_t *data, size_t max_rewind, size_t size, unsigned int flags)",
            "params": [
                "size_t *rewind_p",
                "struct buf *link",
                "uint8_t *data",
                "size_t max_rewind",
                "size_t size",
                "unsigned int flags"
            ],
            "definition": "size_t sd_autolink__url(size_t *rewind_p, struct buf *link, uint8_t *data, size_t max_rewind, size_t size, unsigned int flags)\n{\n  size_t link_end;\n  size_t rewind = 0;\n  size_t domain_len;\n  if (((size < 4) || (data[1] != '/')) || (data[2] != '/'))\n  {\n    return 0;\n  }\n  while ((rewind < max_rewind) && isalpha(data[(-rewind) - 1]))\n    rewind++;\n\n  rewind += 1;\n  if (!sd_autolink_issafe(data - rewind, size + rewind))\n  {\n    return 0;\n  }\n  link_end = strlen(\"://\");\n  domain_len = check_domain(data + link_end, size - link_end, flags & SD_AUTOLINK_SHORT_DOMAINS);\n  if (domain_len == 0)\n  {\n    return 0;\n  }\n  link_end += domain_len;\n  while ((link_end < size) && (!isspace(data[link_end])))\n    link_end++;\n\n  link_end += 1;\n  link_end = autolink_delim(data, link_end, max_rewind, size);\n  if (link_end == 0)\n  {\n    return 0;\n  }\n  bufput(link, data - rewind, link_end + rewind);\n  *rewind_p = rewind;\n  return link_end;\n}\n\n",
            "calle": [
                "autolink_delim",
                "bufput",
                "check_domain",
                "isalpha",
                "isspace",
                "sd_autolink_issafe",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "rewind_p",
                        "type": "size_t *",
                        "definition": [
                            "size_t *rewind_p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *link"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_rewind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_rewind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_end",
                        "type": "size_t",
                        "definition": [
                            "size_t link_end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rewind",
                        "type": "size_t",
                        "definition": [
                            "size_t rewind = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "domain_len",
                        "type": "size_t",
                        "definition": [
                            "size_t domain_len"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "sd_autolink__subreddit",
            "header": "extern size_t sd_autolink__subreddit(size_t *rewind_p, struct buf *link, uint8_t *data, size_t max_rewind, size_t max_lookbehind, size_t size, int *no_slash)",
            "params": [
                "size_t *rewind_p",
                "struct buf *link",
                "uint8_t *data",
                "size_t max_rewind",
                "size_t max_lookbehind",
                "size_t size",
                "int *no_slash"
            ],
            "definition": "size_t sd_autolink__subreddit(size_t *rewind_p, struct buf *link, uint8_t *data, size_t max_rewind, size_t max_lookbehind, size_t size, int *no_slash)\n{\n  size_t link_end;\n  size_t rewind;\n  int is_allminus = 0;\n  rewind = check_reddit_autolink_prefix(data, max_rewind, max_lookbehind, size, 'r');\n  if (!rewind)\n  {\n    return 0;\n  }\n  link_end = strlen(\"/\");\n  if ((size >= (link_end + 4)) && (strncasecmp(((char *) data) + link_end, \"all-\", 4) == 0))\n  {\n    is_allminus = 1;\n  }\n  do\n  {\n    size_t start = link_end;\n    int max_length = 24;\n    if ((size >= (link_end + 10)) && (strncasecmp(((char *) data) + link_end, \"reddit.com\", 10) == 0))\n    {\n      link_end += 10;\n      max_length = 10;\n    }\n    else\n    {\n      if ((size > (link_end + 2)) && (strncasecmp(((char *) data) + link_end, \"t:\", 2) == 0))\n      {\n        link_end += 2;\n      }\n      if (!isalnum(data[link_end]))\n      {\n        return 0;\n      }\n      link_end += 1;\n    }\n    while ((link_end < size) && (isalnum(data[link_end]) || (data[link_end] == '_')))\n      link_end++;\n\n    link_end += 1;\n    if (((link_end - start) < 2) || ((link_end - start) > max_length))\n      return 0;\n  }\n  while (((link_end < size) && ((data[link_end] == '+') || (is_allminus && (data[link_end] == '-')))) && (link_end++));\n  if ((link_end < size) && (data[link_end] == '/'))\n  {\n    while ((link_end < size) && (((isalnum(data[link_end]) || (data[link_end] == '_')) || (data[link_end] == '/')) || (data[link_end] == '-')))\n      link_end++;\n\n    link_end += 1;\n  }\n  bufput(link, data - rewind, link_end + rewind);\n  *no_slash = rewind == 1;\n  *rewind_p = rewind;\n  return link_end;\n}\n\n",
            "calle": [
                "bufput",
                "check_reddit_autolink_prefix",
                "isalnum",
                "strlen",
                "strncasecmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "rewind_p",
                        "type": "size_t *",
                        "definition": [
                            "size_t *rewind_p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *link"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_rewind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_rewind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_lookbehind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_lookbehind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "no_slash",
                        "type": "int *",
                        "definition": [
                            "int *no_slash"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_end",
                        "type": "size_t",
                        "definition": [
                            "size_t link_end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rewind",
                        "type": "size_t",
                        "definition": [
                            "size_t rewind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_allminus",
                        "type": "int",
                        "definition": [
                            "int is_allminus = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start",
                        "type": "size_t",
                        "definition": [
                            "size_t start = link_end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_length",
                        "type": "int",
                        "definition": [
                            "int max_length = 24"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "sd_autolink__username",
            "header": "extern size_t sd_autolink__username(size_t *rewind_p, struct buf *link, uint8_t *data, size_t max_rewind, size_t max_lookbehind, size_t size, int *no_slash)",
            "params": [
                "size_t *rewind_p",
                "struct buf *link",
                "uint8_t *data",
                "size_t max_rewind",
                "size_t max_lookbehind",
                "size_t size",
                "int *no_slash"
            ],
            "definition": "size_t sd_autolink__username(size_t *rewind_p, struct buf *link, uint8_t *data, size_t max_rewind, size_t max_lookbehind, size_t size, int *no_slash)\n{\n  size_t link_end;\n  size_t rewind;\n  if (size < 3)\n  {\n    return 0;\n  }\n  rewind = check_reddit_autolink_prefix(data, max_rewind, max_lookbehind, size, 'u');\n  if (!rewind)\n  {\n    return 0;\n  }\n  link_end = strlen(\"/\");\n  if (((!isalnum(data[link_end])) && (data[link_end] != '_')) && (data[link_end] != '-'))\n  {\n    return 0;\n  }\n  link_end += 1;\n  while ((link_end < size) && (((isalnum(data[link_end]) || (data[link_end] == '_')) || (data[link_end] == '/')) || (data[link_end] == '-')))\n    link_end++;\n\n  link_end += 1;\n  bufput(link, data - rewind, link_end + rewind);\n  *no_slash = rewind == 1;\n  *rewind_p = rewind;\n  return link_end;\n}\n\n",
            "calle": [
                "bufput",
                "check_reddit_autolink_prefix",
                "isalnum",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "rewind_p",
                        "type": "size_t *",
                        "definition": [
                            "size_t *rewind_p"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *link"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_rewind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_rewind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_lookbehind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_lookbehind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "no_slash",
                        "type": "int *",
                        "definition": [
                            "int *no_slash"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_end",
                        "type": "size_t",
                        "definition": [
                            "size_t link_end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rewind",
                        "type": "size_t",
                        "definition": [
                            "size_t rewind"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "autolink_delim",
            "header": "",
            "params": [
                "uint8_t *data",
                "size_t link_end",
                "size_t max_rewind",
                "size_t size"
            ],
            "definition": "static size_t autolink_delim(uint8_t *data, size_t link_end, size_t max_rewind, size_t size)\n{\n  uint8_t cclose;\n  uint8_t copen = 0;\n  size_t i;\n  for (i = 0; i < link_end; i += 1)\n    if (data[i] == '<')\n  {\n    link_end = i;\n    break;\n  }\n\n  while (link_end > 0)\n  {\n    uint8_t c = data[link_end - 1];\n    if (c == 0)\n    {\n      break;\n    }\n    if (strchr(\"?!.,\", c) != 0)\n    {\n      link_end -= 1;\n    }\n    else\n      if (c == ';')\n    {\n      size_t new_end = link_end - 2;\n      while ((new_end > 0) && isalpha(data[new_end]))\n        new_end--;\n\n      new_end -= 1;\n      if ((new_end < (link_end - 2)) && (data[new_end] == '&'))\n        link_end = new_end;\n      else\n        link_end--;\n    }\n    else\n      break;\n  }\n\n  if (link_end == 0)\n  {\n    return 0;\n  }\n  cclose = data[link_end - 1];\n  switch (cclose)\n  {\n    case '\"':\n    {\n      copen = '\"';\n      break;\n    }\n\n    case '\\'':\n    {\n      copen = '\\'';\n      break;\n    }\n\n    case ')':\n    {\n      copen = '(';\n      break;\n    }\n\n    case ']':\n    {\n      copen = '[';\n      break;\n    }\n\n    case '}':\n    {\n      copen = '{';\n      break;\n    }\n\n  }\n\n  if (copen != 0)\n  {\n    size_t closing = 0;\n    size_t opening = 0;\n    size_t i = 0;\n    while (i < link_end)\n    {\n      if (data[i] == copen)\n      {\n        opening += 1;\n      }\n      else\n        if (data[i] == cclose)\n      {\n        closing += 1;\n      }\n      i += 1;\n    }\n\n    if (closing != opening)\n    {\n      link_end -= 1;\n    }\n  }\n  return link_end;\n}\n\n",
            "calle": [
                "isalpha",
                "strchr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_end",
                        "type": "size_t",
                        "definition": [
                            "size_t link_end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_rewind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_rewind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cclose",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t cclose"
                        ]
                    },
                    {
                        "path": null,
                        "name": "copen",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t copen = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i",
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t c = data[link_end - 1]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_end",
                        "type": "size_t",
                        "definition": [
                            "size_t new_end = link_end - 2"
                        ]
                    },
                    {
                        "path": null,
                        "name": "closing",
                        "type": "size_t",
                        "definition": [
                            "size_t closing = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opening",
                        "type": "size_t",
                        "definition": [
                            "size_t opening = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "check_reddit_autolink_prefix",
            "header": "",
            "params": [
                "const uint8_t *data",
                "size_t max_rewind",
                "size_t max_lookbehind",
                "size_t size",
                "char prefix_char"
            ],
            "definition": "static int check_reddit_autolink_prefix(const uint8_t *data, size_t max_rewind, size_t max_lookbehind, size_t size, char prefix_char)\n{\n  if (((size < 2) || (max_rewind < 1)) || (data[-1] != prefix_char))\n  {\n    return 0;\n  }\n  if (max_rewind > 1)\n  {\n    const char boundary = data[-2];\n    if (boundary == '/')\n    {\n      return 2;\n    }\n    else\n      if (ispunct(boundary) || isspace(boundary))\n    {\n      return 1;\n    }\n    else\n      return 0;\n  }\n  else\n    if (max_lookbehind > 2)\n  {\n    if ((data[-2] == '/') && (data[-3] == '\\\\'))\n    {\n      return 0;\n    }\n  }\n  return 1;\n}\n\n",
            "calle": [
                "ispunct",
                "isspace"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_rewind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_rewind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_lookbehind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_lookbehind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prefix_char",
                        "type": "char",
                        "definition": [
                            "char prefix_char"
                        ]
                    },
                    {
                        "path": null,
                        "name": "boundary",
                        "type": "const char",
                        "definition": [
                            "const char boundary = data[-2]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "check_domain",
            "header": "",
            "params": [
                "uint8_t *data",
                "size_t size",
                "int allow_short"
            ],
            "definition": "static size_t check_domain(uint8_t *data, size_t size, int allow_short)\n{\n  size_t i;\n  size_t np = 0;\n  if (!isalnum(data[0]))\n  {\n    return 0;\n  }\n  for (i = 1; i < (size - 1); i += 1)\n  {\n    if (data[i] == '.')\n    {\n      np += 1;\n    }\n    else\n      if ((!isalnum(data[i])) && (data[i] != '-'))\n    {\n      break;\n    }\n  }\n\n  if (allow_short)\n  {\n    return i;\n  }\n  else\n  {\n    return (np) ? (i) : (0);\n  }\n}\n\n",
            "calle": [
                "isalnum"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "allow_short",
                        "type": "int",
                        "definition": [
                            "int allow_short"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "np",
                        "type": "size_t",
                        "definition": [
                            "size_t np = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bufgrow",
            "header": "int bufgrow(struct buf *, size_t)",
            "params": [
                "struct buf *buf",
                "size_t neosz"
            ],
            "definition": "int bufgrow(struct buf *buf, size_t neosz)\n{\n  size_t neoasz;\n  void *neodata;\n  unsigned int neodata_idx = 0;\n  assert(buf && buf->unit);\n  if (neosz > ((1024 * 1024) * 16))\n  {\n    return BUF_ENOMEM;\n  }\n  if (buf->asize >= neosz)\n  {\n    return BUF_OK;\n  }\n  neoasz = buf->asize + buf->unit;\n  while (neoasz < neosz)\n    neoasz += buf->unit;\n\n  neodata_idx = realloc(buf->data, neoasz);\n  if (!(&neodata[neodata_idx]))\n  {\n    return BUF_ENOMEM;\n  }\n  buf->data = &neodata[neodata_idx];\n  buf->asize = neoasz;\n  return BUF_OK;\n}\n\n",
            "calle": [
                "assert",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "neosz",
                        "type": "size_t",
                        "definition": [
                            "size_t neosz"
                        ]
                    },
                    {
                        "path": null,
                        "name": "neoasz",
                        "type": "size_t",
                        "definition": [
                            "size_t neoasz"
                        ]
                    },
                    {
                        "path": null,
                        "name": "neodata",
                        "type": "void *",
                        "definition": [
                            "void *neodata"
                        ]
                    },
                    {
                        "path": null,
                        "name": "neodata_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int neodata_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bufnew",
            "header": "struct buf *bufnew(size_t)",
            "params": [
                "size_t unit"
            ],
            "definition": "struct buf *bufnew(size_t unit)\n{\n  struct buf *ret;\n  unsigned int ret_idx = 0;\n  ret_idx = malloc(sizeof(struct buf));\n  if (ret)\n  {\n    ret->data = 0;\n    ret->size = (ret->asize = 0);\n    ret->unit = unit;\n  }\n  return ret;\n}\n\n",
            "calle": [
                "malloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "unit",
                        "type": "size_t",
                        "definition": [
                            "size_t unit"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ret"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ret_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bufcstr",
            "header": "const char *bufcstr(struct buf *)",
            "params": [
                "struct buf *buf"
            ],
            "definition": "const char *bufcstr(struct buf *buf)\n{\n  assert(buf && buf->unit);\n  if ((buf->size < buf->asize) && (buf->data[buf->size] == 0))\n  {\n    return (char *) buf->data;\n  }\n  if (((buf->size + 1) <= buf->asize) || (bufgrow(buf, buf->size + 1) == 0))\n  {\n    buf->data[buf->size] = 0;\n    return (char *) buf->data;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "assert",
                "bufgrow"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *buf"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bufprefix",
            "header": "int bufprefix(const struct buf *buf, const char *prefix)",
            "params": [
                "const struct buf *buf",
                "const char *prefix"
            ],
            "definition": "int bufprefix(const struct buf *buf, const char *prefix)\n{\n  size_t i;\n  assert(buf && buf->unit);\n  for (i = 0; i < buf->size; i += 1)\n  {\n    if (prefix[i] == 0)\n    {\n      return 0;\n    }\n    if (buf->data[i] != prefix[i])\n    {\n      return buf->data[i] - prefix[i];\n    }\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "assert"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "prefix",
                        "type": "const char *",
                        "definition": [
                            "const char *prefix"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bufput",
            "header": "void bufput(struct buf *, const void *, size_t)",
            "params": [
                "struct buf *buf",
                "const void *data",
                "size_t len"
            ],
            "definition": "void bufput(struct buf *buf, const void *data, size_t len)\n{\n  assert(buf && buf->unit);\n  if (((buf->size + len) > buf->asize) && (bufgrow(buf, buf->size + len) < 0))\n  {\n    return;\n  }\n  memcpy(buf->data + buf->size, data, len);\n  buf->size += len;\n}\n\n",
            "calle": [
                "assert",
                "bufgrow",
                "memcpy"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "const void *",
                        "definition": [
                            "const void *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bufputs",
            "header": "void bufputs(struct buf *, const char *)",
            "params": [
                "struct buf *buf",
                "const char *str"
            ],
            "definition": "void bufputs(struct buf *buf, const char *str)\n{\n  bufput(buf, str, strlen(str));\n}\n\n",
            "calle": [
                "bufput",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char *",
                        "definition": [
                            "const char *str"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bufputc",
            "header": "void bufputc(struct buf *, int)",
            "params": [
                "struct buf *buf",
                "int c"
            ],
            "definition": "void bufputc(struct buf *buf, int c)\n{\n  assert(buf && buf->unit);\n  if (((buf->size + 1) > buf->asize) && (bufgrow(buf, buf->size + 1) < 0))\n  {\n    return;\n  }\n  buf->data[buf->size] = c;\n  buf->size += 1;\n}\n\n",
            "calle": [
                "assert",
                "bufgrow"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bufrelease",
            "header": "void bufrelease(struct buf *)",
            "params": [
                "struct buf *buf"
            ],
            "definition": "void bufrelease(struct buf *buf)\n{\n  if (!buf)\n  {\n    return;\n  }\n  free(buf->data);\n  free(buf);\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *buf"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bufreset",
            "header": "void bufreset(struct buf *)",
            "params": [
                "struct buf *buf"
            ],
            "definition": "void bufreset(struct buf *buf)\n{\n  if (!buf)\n  {\n    return;\n  }\n  free(buf->data);\n  buf->data = 0;\n  buf->size = (buf->asize = 0);\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *buf"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bufslurp",
            "header": "void bufslurp(struct buf *, size_t)",
            "params": [
                "struct buf *buf",
                "size_t len"
            ],
            "definition": "void bufslurp(struct buf *buf, size_t len)\n{\n  assert(buf && buf->unit);\n  if (len >= buf->size)\n  {\n    buf->size = 0;\n    return;\n  }\n  buf->size -= len;\n  memmove(buf->data, buf->data + len, buf->size);\n}\n\n",
            "calle": [
                "assert",
                "memmove"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "bufprintf",
            "header": "void bufprintf(struct buf *, const char *, ...)",
            "params": [
                "struct buf *buf",
                "const char *fmt",
                "..."
            ],
            "definition": "void bufprintf(struct buf *buf, const char *fmt, ...)\n{\n  va_list ap;\n  int n;\n  assert(buf && buf->unit);\n  if ((buf->size >= buf->asize) && (bufgrow(buf, buf->size + 1) < 0))\n  {\n    return;\n  }\n  __builtin_va_start(ap);\n  n = vsnprintf(((char *) buf->data) + buf->size, buf->asize - buf->size, fmt, ap);\n  ;\n  if (n < 0)\n  {\n    return;\n  }\n  if (((size_t) n) >= (buf->asize - buf->size))\n  {\n    if (bufgrow(buf, (buf->size + n) + 1) < 0)\n    {\n      return;\n    }\n    __builtin_va_start(ap);\n    n = vsnprintf(((char *) buf->data) + buf->size, buf->asize - buf->size, fmt, ap);\n    ;\n  }\n  if (n < 0)\n  {\n    return;\n  }\n  buf->size += n;\n}\n\n",
            "calle": [
                "__builtin_va_start",
                "assert",
                "bufgrow",
                "vsnprintf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fmt",
                        "type": "const char *",
                        "definition": [
                            "const char *fmt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ap",
                        "type": "va_list",
                        "definition": [
                            "va_list ap"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "int",
                        "definition": [
                            "int n"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "buftruncate",
            "header": "int buftruncate(struct buf *buf, size_t size)",
            "params": [
                "struct buf *buf",
                "size_t size"
            ],
            "definition": "int buftruncate(struct buf *buf, size_t size)\n{\n  if ((buf->size < size) || (size < 0))\n  {\n    assert(0);\n    return BUF_EINVALIDIDX;\n  }\n  buf->size = size;\n  return BUF_OK;\n}\n\n",
            "calle": [
                "assert"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "houdini_escape_href",
            "header": "extern void houdini_escape_href(struct buf *ob, const uint8_t *src, size_t size)",
            "params": [
                "struct buf *ob",
                "const uint8_t *src",
                "size_t size"
            ],
            "definition": "void houdini_escape_href(struct buf *ob, const uint8_t *src, size_t size)\n{\n  static const char hex_chars[] = \"0123456789ABCDEF\";\n  size_t i = 0;\n  size_t org;\n  char hex_str[3];\n  bufgrow(ob, (size * 12) / 10);\n  hex_str[0] = '%';\n  while (i < size)\n  {\n    org = i;\n    while ((i < size) && (HREF_SAFE[src[i]] == 1))\n      i++;\n\n    i += 1;\n    if (i > org)\n    {\n      bufput(ob, src + org, i - org);\n    }\n    if (i >= size)\n    {\n      break;\n    }\n    if (HREF_SAFE[src[i]] == 2)\n    {\n      i += 1;\n      continue;\n    }\n    switch (src[i])\n    {\n      case '&':\n      {\n        bufput(ob, \"&amp;\", (sizeof(\"&amp;\")) - 1);\n        break;\n      }\n\n      case '\\'':\n      {\n        bufput(ob, \"&#x27;\", (sizeof(\"&#x27;\")) - 1);\n        break;\n      }\n\n      default:\n      {\n        hex_str[1] = hex_chars[(src[i] >> 4) & 0xF];\n        hex_str[2] = hex_chars[src[i] & 0xF];\n        bufput(ob, hex_str, 3);\n      }\n\n    }\n\n    i++;\n  }\n\n}\n\n",
            "calle": [
                "bufgrow",
                "bufput"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *src"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hex_chars",
                        "type": "const char []",
                        "definition": [
                            "static const char hex_chars[] = \"0123456789ABCDEF\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "org",
                        "type": "size_t",
                        "definition": [
                            "size_t org"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hex_str",
                        "type": "char [3]",
                        "definition": [
                            "char hex_str[3]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "HREF_SAFE",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "houdini_escape_html",
            "header": "extern void houdini_escape_html(struct buf *ob, const uint8_t *src, size_t size)",
            "params": [
                "struct buf *ob",
                "const uint8_t *src",
                "size_t size"
            ],
            "definition": "void houdini_escape_html(struct buf *ob, const uint8_t *src, size_t size)\n{\n  houdini_escape_html0(ob, src, size, 1);\n}\n\n",
            "calle": [
                "houdini_escape_html0"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *src"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "houdini_escape_html0",
            "header": "extern void houdini_escape_html0(struct buf *ob, const uint8_t *src, size_t size, int secure)",
            "params": [
                "struct buf *ob",
                "const uint8_t *src",
                "size_t size",
                "int secure"
            ],
            "definition": "void houdini_escape_html0(struct buf *ob, const uint8_t *src, size_t size, int secure)\n{\n  size_t i = 0;\n  size_t org;\n  size_t esc = 0;\n  bufgrow(ob, (size * 12) / 10);\n  while (i < size)\n  {\n    org = i;\n    while ((i < size) && ((esc = HTML_ESCAPE_TABLE[src[i]]) == 0))\n      i++;\n\n    i += 1;\n    if (i > org)\n    {\n      bufput(ob, src + org, i - org);\n    }\n    if (i >= size)\n    {\n      break;\n    }\n    if ((src[i] == '/') && (!secure))\n    {\n      bufputc(ob, '/');\n    }\n    else\n      if (HTML_ESCAPE_TABLE[src[i]] == 7)\n    {\n    }\n    else\n    {\n      bufputs(ob, HTML_ESCAPES[esc]);\n    }\n    i++;\n  }\n\n}\n\n",
            "calle": [
                "bufgrow",
                "bufput",
                "bufputc",
                "bufputs"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "src",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *src"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "secure",
                        "type": "int",
                        "definition": [
                            "int secure"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "org",
                        "type": "size_t",
                        "definition": [
                            "size_t org"
                        ]
                    },
                    {
                        "path": null,
                        "name": "esc",
                        "type": "size_t",
                        "definition": [
                            "size_t esc = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "HTML_ESCAPE_TABLE",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "HTML_ESCAPES",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "sdhtml_is_tag",
            "header": "int sdhtml_is_tag(const uint8_t *tag_data, size_t tag_size, const char *tagname)",
            "params": [
                "const uint8_t *tag_data",
                "size_t tag_size",
                "const char *tagname"
            ],
            "definition": "int sdhtml_is_tag(const uint8_t *tag_data, size_t tag_size, const char *tagname)\n{\n  unsigned int tagname_idx = 0;\n  size_t i;\n  int closed = 0;\n  if ((tag_size < 3) || (tag_data[0] != '<'))\n  {\n    return HTML_TAG_NONE;\n  }\n  i = 1;\n  if (tag_data[i] == '/')\n  {\n    closed = 1;\n    i += 1;\n  }\n  for (; i < tag_size; i += 1, tagname_idx += 1)\n  {\n    if (tagname[tagname_idx] == 0)\n    {\n      break;\n    }\n    if (tag_data[i] != tagname[tagname_idx])\n    {\n      return HTML_TAG_NONE;\n    }\n  }\n\n  if (i == tag_size)\n  {\n    return HTML_TAG_NONE;\n  }\n  if (isspace(tag_data[i]) || (tag_data[i] == '>'))\n  {\n    return (closed) ? (HTML_TAG_CLOSE) : (HTML_TAG_OPEN);\n  }\n  return HTML_TAG_NONE;\n}\n\n",
            "calle": [
                "isspace"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "tag_data",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *tag_data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag_size",
                        "type": "size_t",
                        "definition": [
                            "size_t tag_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tagname",
                        "type": "const char *",
                        "definition": [
                            "const char *tagname"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tagname_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int tagname_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "closed",
                        "type": "int",
                        "definition": [
                            "int closed = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "sdhtml_renderer",
            "header": "extern void sdhtml_renderer(struct sd_callbacks *callbacks, struct html_renderopt *options_ptr, unsigned int render_flags)",
            "params": [
                "struct sd_callbacks *callbacks",
                "struct html_renderopt *options",
                "unsigned int render_flags"
            ],
            "definition": "void sdhtml_renderer(struct sd_callbacks *callbacks, struct html_renderopt *options, unsigned int render_flags)\n{\n  static const struct sd_callbacks cb_default = {rndr_blockcode, rndr_blockquote, rndr_blockspoiler, rndr_raw_block, rndr_header, rndr_hrule, rndr_list, rndr_listitem, rndr_paragraph, rndr_table, rndr_tablerow, rndr_tablecell, rndr_autolink, rndr_codespan, rndr_spoilerspan, rndr_double_emphasis, rndr_emphasis, rndr_image, rndr_linebreak, rndr_link, rndr_raw_html, rndr_triple_emphasis, rndr_strikethrough, rndr_superscript, 0, rndr_normal_text, 0, reset_toc};\n  memset(options, 0x0, sizeof(struct html_renderopt));\n  options->flags = render_flags;\n  memcpy(callbacks, &cb_default, sizeof(struct sd_callbacks));\n  if (render_flags & HTML_SKIP_IMAGES)\n  {\n    callbacks->image = 0;\n  }\n  if (render_flags & HTML_SKIP_LINKS)\n  {\n    callbacks->link = 0;\n    callbacks->autolink = 0;\n  }\n  if ((render_flags & HTML_SKIP_HTML) || (render_flags & HTML_ESCAPE))\n  {\n    callbacks->blockhtml = 0;\n  }\n}\n\n",
            "calle": [
                "memcpy",
                "memset",
                "reset_toc",
                "rndr_autolink",
                "rndr_blockcode",
                "rndr_blockquote",
                "rndr_blockspoiler",
                "rndr_codespan",
                "rndr_double_emphasis",
                "rndr_emphasis",
                "rndr_header",
                "rndr_hrule",
                "rndr_image",
                "rndr_linebreak",
                "rndr_link",
                "rndr_list",
                "rndr_listitem",
                "rndr_normal_text",
                "rndr_paragraph",
                "rndr_raw_block",
                "rndr_raw_html",
                "rndr_spoilerspan",
                "rndr_strikethrough",
                "rndr_superscript",
                "rndr_table",
                "rndr_tablecell",
                "rndr_tablerow",
                "rndr_triple_emphasis"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct sd_callbacks",
                        "type": "struct sd_callbacks *",
                        "definition": [
                            "struct sd_callbacks *callbacks"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct html_renderopt",
                        "type": "struct html_renderopt *",
                        "definition": [
                            "struct html_renderopt *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "render_flags",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int render_flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb_default",
                        "type": "const struct sd_callbacks",
                        "definition": [
                            "static const struct sd_callbacks cb_default = {rndr_blockcode, rndr_blockquote, rndr_blockspoiler, rndr_raw_block, rndr_header, rndr_hrule, rndr_list, rndr_listitem, rndr_paragraph, rndr_table, rndr_tablerow, rndr_tablecell, rndr_autolink, rndr_codespan, rndr_spoilerspan, rndr_double_emphasis, rndr_emphasis, rndr_image, rndr_linebreak, rndr_link, rndr_raw_html, rndr_triple_emphasis, rndr_strikethrough, rndr_superscript, 0, rndr_normal_text, 0, reset_toc}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "sdhtml_toc_renderer",
            "header": "extern void sdhtml_toc_renderer(struct sd_callbacks *callbacks, struct html_renderopt *options_ptr)",
            "params": [
                "struct sd_callbacks *callbacks",
                "struct html_renderopt *options"
            ],
            "definition": "void sdhtml_toc_renderer(struct sd_callbacks *callbacks, struct html_renderopt *options)\n{\n  static const struct sd_callbacks cb_default = {0, 0, 0, toc_header, 0, 0, 0, 0, 0, 0, 0, 0, rndr_codespan, rndr_spoilerspan, rndr_double_emphasis, rndr_emphasis, 0, 0, toc_link, 0, rndr_triple_emphasis, rndr_strikethrough, rndr_superscript, 0, 0, 0, toc_finalize};\n  memset(options, 0x0, sizeof(struct html_renderopt));\n  options->flags = HTML_TOC | HTML_SKIP_HTML;\n  memcpy(callbacks, &cb_default, sizeof(struct sd_callbacks));\n}\n\n",
            "calle": [
                "memcpy",
                "memset",
                "rndr_codespan",
                "rndr_double_emphasis",
                "rndr_emphasis",
                "rndr_spoilerspan",
                "rndr_strikethrough",
                "rndr_superscript",
                "rndr_triple_emphasis",
                "toc_finalize",
                "toc_header",
                "toc_link"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct sd_callbacks",
                        "type": "struct sd_callbacks *",
                        "definition": [
                            "struct sd_callbacks *callbacks"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct html_renderopt",
                        "type": "struct html_renderopt *",
                        "definition": [
                            "struct html_renderopt *options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cb_default",
                        "type": "const struct sd_callbacks",
                        "definition": [
                            "static const struct sd_callbacks cb_default = {0, 0, 0, toc_header, 0, 0, 0, 0, 0, 0, 0, 0, rndr_codespan, rndr_spoilerspan, rndr_double_emphasis, rndr_emphasis, 0, 0, toc_link, 0, rndr_triple_emphasis, rndr_strikethrough, rndr_superscript, 0, 0, 0, toc_finalize}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "escape_html",
            "header": "",
            "params": [
                "struct buf *ob",
                "const uint8_t *source",
                "size_t length"
            ],
            "definition": "inline static void escape_html(struct buf *ob, const uint8_t *source, size_t length)\n{\n  houdini_escape_html0(ob, source, length, 0);\n}\n\n",
            "calle": [
                "houdini_escape_html0"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "source",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *source"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "escape_href",
            "header": "",
            "params": [
                "struct buf *ob",
                "const uint8_t *source",
                "size_t length"
            ],
            "definition": "inline static void escape_href(struct buf *ob, const uint8_t *source, size_t length)\n{\n  houdini_escape_href(ob, source, length);\n}\n\n",
            "calle": [
                "houdini_escape_href"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "source",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *source"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rndr_autolink",
            "header": "",
            "params": [
                "struct buf *ob",
                "const struct buf *link",
                "enum mkd_autolink type",
                "void *opaque"
            ],
            "definition": "static int rndr_autolink(struct buf *ob, const struct buf *link, enum mkd_autolink type, void *opaque)\n{\n  struct html_renderopt *options = opaque;\n  uint8_t offset = 0;\n  if ((!link) || (!link->size))\n  {\n    return 0;\n  }\n  if ((((options->flags & HTML_SAFELINK) != 0) && (!sd_autolink_issafe(link->data, link->size))) && (type != MKDA_EMAIL))\n  {\n    return 0;\n  }\n  bufput(ob, \"<a href=\\\"\", (sizeof(\"<a href=\\\"\")) - 1);\n  if (type == MKDA_EMAIL)\n  {\n    bufput(ob, \"mailto:\", (sizeof(\"mailto:\")) - 1);\n  }\n  escape_href(ob, link->data + offset, link->size - offset);\n  if (options->link_attributes)\n  {\n    bufputc(ob, '\\\"');\n    options->link_attributes(ob, link, opaque);\n    bufputc(ob, '>');\n  }\n  else\n  {\n    bufput(ob, \"\\\">\", (sizeof(\"\\\">\")) - 1);\n  }\n  if (bufprefix(link, \"mailto:\") == 0)\n  {\n    escape_html(ob, link->data + 7, link->size - 7);\n  }\n  else\n  {\n    escape_html(ob, link->data, link->size);\n  }\n  bufput(ob, \"</a>\", (sizeof(\"</a>\")) - 1);\n  return 1;\n}\n\n",
            "calle": [
                "bufprefix",
                "bufput",
                "bufputc",
                "escape_href",
                "escape_html",
                "options->link_attributes",
                "sd_autolink_issafe"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *link"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "enum mkd_autolink",
                        "definition": [
                            "enum mkd_autolink type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct html_renderopt",
                        "type": "struct html_renderopt *",
                        "definition": [
                            "struct html_renderopt *options = opaque"
                        ]
                    },
                    {
                        "path": null,
                        "name": "offset",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t offset = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rndr_blockcode",
            "header": "",
            "params": [
                "struct buf *ob",
                "const struct buf *text",
                "const struct buf *lang",
                "void *opaque"
            ],
            "definition": "static void rndr_blockcode(struct buf *ob, const struct buf *text, const struct buf *lang, void *opaque)\n{\n  if (ob->size)\n  {\n    bufputc(ob, '\\n');\n  }\n  if (lang && lang->size)\n  {\n    size_t i;\n    size_t cls;\n    bufput(ob, \"<pre><code class=\\\"\", (sizeof(\"<pre><code class=\\\"\")) - 1);\n    for (i = 0, cls = 0; i < lang->size; i += 1, cls += 1)\n    {\n      while ((i < lang->size) && isspace(lang->data[i]))\n        i++;\n\n      i += 1;\n      if (i < lang->size)\n      {\n        size_t org = i;\n        while ((i < lang->size) && (!isspace(lang->data[i])))\n          i++;\n\n        if (lang->data[org] == '.')\n          org++;\n        if (cls)\n          bufputc(ob, ' ');\n        escape_html(ob, lang->data + org, i - org);\n      }\n    }\n\n    bufput(ob, \"\\\">\", (sizeof(\"\\\">\")) - 1);\n  }\n  else\n    bufput(ob, \"<pre><code>\", (sizeof(\"<pre><code>\")) - 1);\n  if (text)\n  {\n    escape_html(ob, text->data, text->size);\n  }\n  bufput(ob, \"</code></pre>\\n\", (sizeof(\"</code></pre>\\n\")) - 1);\n}\n\n",
            "calle": [
                "bufput",
                "bufputc",
                "escape_html",
                "isspace"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *lang"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cls",
                        "type": "size_t",
                        "definition": [
                            "size_t cls"
                        ]
                    },
                    {
                        "path": null,
                        "name": "org",
                        "type": "size_t",
                        "definition": [
                            "size_t org = i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rndr_blockquote",
            "header": "",
            "params": [
                "struct buf *ob",
                "const struct buf *text",
                "void *opaque"
            ],
            "definition": "static void rndr_blockquote(struct buf *ob, const struct buf *text, void *opaque)\n{\n  if (ob->size)\n  {\n    bufputc(ob, '\\n');\n  }\n  bufput(ob, \"<blockquote>\\n\", (sizeof(\"<blockquote>\\n\")) - 1);\n  if (text)\n  {\n    bufput(ob, text->data, text->size);\n  }\n  bufput(ob, \"</blockquote>\\n\", (sizeof(\"</blockquote>\\n\")) - 1);\n}\n\n",
            "calle": [
                "bufput",
                "bufputc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rndr_blockspoiler",
            "header": "",
            "params": [
                "struct buf *ob",
                "const struct buf *text",
                "void *opaque"
            ],
            "definition": "static void rndr_blockspoiler(struct buf *ob, const struct buf *text, void *opaque)\n{\n  if (ob->size)\n  {\n    bufputc(ob, '\\n');\n  }\n  bufput(ob, \"<blockquote class=\\\"md-spoiler-text\\\">\\n\", (sizeof(\"<blockquote class=\\\"md-spoiler-text\\\">\\n\")) - 1);\n  if (text)\n  {\n    bufput(ob, text->data, text->size);\n  }\n  bufput(ob, \"</blockquote>\\n\", (sizeof(\"</blockquote>\\n\")) - 1);\n}\n\n",
            "calle": [
                "bufput",
                "bufputc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rndr_codespan",
            "header": "",
            "params": [
                "struct buf *ob",
                "const struct buf *text",
                "void *opaque"
            ],
            "definition": "static int rndr_codespan(struct buf *ob, const struct buf *text, void *opaque)\n{\n  bufput(ob, \"<code>\", (sizeof(\"<code>\")) - 1);\n  if (text)\n  {\n    escape_html(ob, text->data, text->size);\n  }\n  bufput(ob, \"</code>\", (sizeof(\"</code>\")) - 1);\n  return 1;\n}\n\n",
            "calle": [
                "bufput",
                "escape_html"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rndr_spoilerspan",
            "header": "",
            "params": [
                "struct buf *ob",
                "const struct buf *text",
                "void *opaque"
            ],
            "definition": "static int rndr_spoilerspan(struct buf *ob, const struct buf *text, void *opaque)\n{\n  if ((!text) || (!text->size))\n  {\n    return 0;\n  }\n  bufput(ob, \"<span class=\\\"md-spoiler-text\\\">\", (sizeof(\"<span class=\\\"md-spoiler-text\\\">\")) - 1);\n  bufput(ob, text->data, text->size);\n  bufput(ob, \"</span>\", (sizeof(\"</span>\")) - 1);\n  return 1;\n}\n\n",
            "calle": [
                "bufput"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rndr_strikethrough",
            "header": "",
            "params": [
                "struct buf *ob",
                "const struct buf *text",
                "void *opaque"
            ],
            "definition": "static int rndr_strikethrough(struct buf *ob, const struct buf *text, void *opaque)\n{\n  if ((!text) || (!text->size))\n  {\n    return 0;\n  }\n  bufput(ob, \"<del>\", (sizeof(\"<del>\")) - 1);\n  bufput(ob, text->data, text->size);\n  bufput(ob, \"</del>\", (sizeof(\"</del>\")) - 1);\n  return 1;\n}\n\n",
            "calle": [
                "bufput"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rndr_double_emphasis",
            "header": "",
            "params": [
                "struct buf *ob",
                "const struct buf *text",
                "void *opaque"
            ],
            "definition": "static int rndr_double_emphasis(struct buf *ob, const struct buf *text, void *opaque)\n{\n  if ((!text) || (!text->size))\n  {\n    return 0;\n  }\n  bufput(ob, \"<strong>\", (sizeof(\"<strong>\")) - 1);\n  bufput(ob, text->data, text->size);\n  bufput(ob, \"</strong>\", (sizeof(\"</strong>\")) - 1);\n  return 1;\n}\n\n",
            "calle": [
                "bufput"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rndr_emphasis",
            "header": "",
            "params": [
                "struct buf *ob",
                "const struct buf *text",
                "void *opaque"
            ],
            "definition": "static int rndr_emphasis(struct buf *ob, const struct buf *text, void *opaque)\n{\n  if ((!text) || (!text->size))\n  {\n    return 0;\n  }\n  bufput(ob, \"<em>\", (sizeof(\"<em>\")) - 1);\n  if (text)\n  {\n    bufput(ob, text->data, text->size);\n  }\n  bufput(ob, \"</em>\", (sizeof(\"</em>\")) - 1);\n  return 1;\n}\n\n",
            "calle": [
                "bufput"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rndr_linebreak",
            "header": "",
            "params": [
                "struct buf *ob",
                "void *opaque"
            ],
            "definition": "static int rndr_linebreak(struct buf *ob, void *opaque)\n{\n  struct html_renderopt *options = opaque;\n  bufputs(ob, (options->flags & HTML_USE_XHTML) ? (\"<br/>\\n\") : (\"<br>\\n\"));\n  return 1;\n}\n\n",
            "calle": [
                "bufputs"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct html_renderopt",
                        "type": "struct html_renderopt *",
                        "definition": [
                            "struct html_renderopt *options = opaque"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rndr_header",
            "header": "",
            "params": [
                "struct buf *ob",
                "const struct buf *text",
                "int level",
                "void *opaque"
            ],
            "definition": "static void rndr_header(struct buf *ob, const struct buf *text, int level, void *opaque)\n{\n  struct html_renderopt *options = opaque;\n  if (ob->size)\n  {\n    bufputc(ob, '\\n');\n  }\n  if (options->flags & HTML_TOC)\n  {\n    bufprintf(ob, \"<h%d id=\\\"\", level);\n    if (options->toc_id_prefix)\n    {\n      bufputs(ob, options->toc_id_prefix);\n    }\n    bufprintf(ob, \"toc_%d\\\">\", options->toc_data.header_count++);\n  }\n  else\n  {\n    bufprintf(ob, \"<h%d>\", level);\n  }\n  if (text)\n  {\n    bufput(ob, text->data, text->size);\n  }\n  bufprintf(ob, \"</h%d>\\n\", level);\n}\n\n",
            "calle": [
                "bufprintf",
                "bufput",
                "bufputc",
                "bufputs"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "int",
                        "definition": [
                            "int level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct html_renderopt",
                        "type": "struct html_renderopt *",
                        "definition": [
                            "struct html_renderopt *options = opaque"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rndr_link",
            "header": "",
            "params": [
                "struct buf *ob",
                "const struct buf *link",
                "const struct buf *title",
                "const struct buf *content",
                "void *opaque"
            ],
            "definition": "static int rndr_link(struct buf *ob, const struct buf *link, const struct buf *title, const struct buf *content, void *opaque)\n{\n  struct html_renderopt *options = opaque;\n  if (((link != 0) && ((options->flags & HTML_SAFELINK) != 0)) && (!sd_autolink_issafe(link->data, link->size)))\n  {\n    return 0;\n  }\n  bufput(ob, \"<a href=\\\"\", (sizeof(\"<a href=\\\"\")) - 1);\n  if (link && link->size)\n  {\n    escape_href(ob, link->data, link->size);\n  }\n  if (title && title->size)\n  {\n    bufput(ob, \"\\\" title=\\\"\", (sizeof(\"\\\" title=\\\"\")) - 1);\n    escape_html(ob, title->data, title->size);\n  }\n  if (options->link_attributes)\n  {\n    bufputc(ob, '\\\"');\n    options->link_attributes(ob, link, opaque);\n    bufputc(ob, '>');\n  }\n  else\n  {\n    bufput(ob, \"\\\">\", (sizeof(\"\\\">\")) - 1);\n  }\n  if (content && content->size)\n  {\n    bufput(ob, content->data, content->size);\n  }\n  bufput(ob, \"</a>\", (sizeof(\"</a>\")) - 1);\n  return 1;\n}\n\n",
            "calle": [
                "bufput",
                "bufputc",
                "escape_href",
                "escape_html",
                "options->link_attributes",
                "sd_autolink_issafe"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *link"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *title"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *content"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct html_renderopt",
                        "type": "struct html_renderopt *",
                        "definition": [
                            "struct html_renderopt *options = opaque"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rndr_list",
            "header": "",
            "params": [
                "struct buf *ob",
                "const struct buf *text",
                "int flags",
                "void *opaque"
            ],
            "definition": "static void rndr_list(struct buf *ob, const struct buf *text, int flags, void *opaque)\n{\n  if (ob->size)\n  {\n    bufputc(ob, '\\n');\n  }\n  bufput(ob, (flags & 1) ? (\"<ol>\\n\") : (\"<ul>\\n\"), 5);\n  if (text)\n  {\n    bufput(ob, text->data, text->size);\n  }\n  bufput(ob, (flags & 1) ? (\"</ol>\\n\") : (\"</ul>\\n\"), 6);\n}\n\n",
            "calle": [
                "bufput",
                "bufputc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rndr_listitem",
            "header": "",
            "params": [
                "struct buf *ob",
                "const struct buf *text",
                "int flags",
                "void *opaque"
            ],
            "definition": "static void rndr_listitem(struct buf *ob, const struct buf *text, int flags, void *opaque)\n{\n  bufput(ob, \"<li>\", (sizeof(\"<li>\")) - 1);\n  if (text)\n  {\n    size_t size = text->size;\n    while (size && (text->data[size - 1] == '\\n'))\n      size--;\n\n    size -= 1;\n    bufput(ob, text->data, size);\n  }\n  bufput(ob, \"</li>\\n\", (sizeof(\"</li>\\n\")) - 1);\n}\n\n",
            "calle": [
                "bufput"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size = text->size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rndr_paragraph",
            "header": "",
            "params": [
                "struct buf *ob",
                "const struct buf *text",
                "void *opaque"
            ],
            "definition": "static void rndr_paragraph(struct buf *ob, const struct buf *text, void *opaque)\n{\n  struct html_renderopt *options = opaque;\n  size_t i = 0;\n  if (ob->size)\n  {\n    bufputc(ob, '\\n');\n  }\n  if ((!text) || (!text->size))\n  {\n    return;\n  }\n  while ((i < text->size) && isspace(text->data[i]))\n    i++;\n\n  i += 1;\n  if (i == text->size)\n  {\n    return;\n  }\n  bufput(ob, \"<p>\", (sizeof(\"<p>\")) - 1);\n  if (options->flags & HTML_HARD_WRAP)\n  {\n    size_t org;\n    while (i < text->size)\n    {\n      org = i;\n      while ((i < text->size) && (text->data[i] != '\\n'))\n        i++;\n\n      i += 1;\n      if (i > org)\n      {\n        bufput(ob, text->data + org, i - org);\n      }\n      if (i >= (text->size - 1))\n      {\n        break;\n      }\n      rndr_linebreak(ob, opaque);\n      i++;\n    }\n\n  }\n  else\n  {\n    bufput(ob, &text->data[i], text->size - i);\n  }\n  bufput(ob, \"</p>\\n\", (sizeof(\"</p>\\n\")) - 1);\n}\n\n",
            "calle": [
                "bufput",
                "bufputc",
                "isspace",
                "rndr_linebreak"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct html_renderopt",
                        "type": "struct html_renderopt *",
                        "definition": [
                            "struct html_renderopt *options = opaque"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "org",
                        "type": "size_t",
                        "definition": [
                            "size_t org"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rndr_raw_block",
            "header": "",
            "params": [
                "struct buf *ob",
                "const struct buf *text",
                "void *opaque"
            ],
            "definition": "static void rndr_raw_block(struct buf *ob, const struct buf *text, void *opaque)\n{\n  size_t org;\n  size_t sz;\n  if (!text)\n  {\n    return;\n  }\n  sz = text->size;\n  while ((sz > 0) && (text->data[sz - 1] == '\\n'))\n    sz--;\n\n  sz -= 1;\n  org = 0;\n  while ((org < sz) && (text->data[org] == '\\n'))\n    org++;\n\n  org += 1;\n  if (org >= sz)\n  {\n    return;\n  }\n  if (ob->size)\n  {\n    bufputc(ob, '\\n');\n  }\n  bufput(ob, text->data + org, sz - org);\n  bufputc(ob, '\\n');\n}\n\n",
            "calle": [
                "bufput",
                "bufputc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    },
                    {
                        "path": null,
                        "name": "org",
                        "type": "size_t",
                        "definition": [
                            "size_t org"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sz",
                        "type": "size_t",
                        "definition": [
                            "size_t sz"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rndr_triple_emphasis",
            "header": "",
            "params": [
                "struct buf *ob",
                "const struct buf *text",
                "void *opaque"
            ],
            "definition": "static int rndr_triple_emphasis(struct buf *ob, const struct buf *text, void *opaque)\n{\n  if ((!text) || (!text->size))\n  {\n    return 0;\n  }\n  bufput(ob, \"<strong><em>\", (sizeof(\"<strong><em>\")) - 1);\n  bufput(ob, text->data, text->size);\n  bufput(ob, \"</em></strong>\", (sizeof(\"</em></strong>\")) - 1);\n  return 1;\n}\n\n",
            "calle": [
                "bufput"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rndr_hrule",
            "header": "",
            "params": [
                "struct buf *ob",
                "void *opaque"
            ],
            "definition": "static void rndr_hrule(struct buf *ob, void *opaque)\n{\n  struct html_renderopt *options = opaque;\n  if (ob->size)\n  {\n    bufputc(ob, '\\n');\n  }\n  bufputs(ob, (options->flags & HTML_USE_XHTML) ? (\"<hr/>\\n\") : (\"<hr>\\n\"));\n}\n\n",
            "calle": [
                "bufputc",
                "bufputs"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct html_renderopt",
                        "type": "struct html_renderopt *",
                        "definition": [
                            "struct html_renderopt *options = opaque"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rndr_image",
            "header": "",
            "params": [
                "struct buf *ob",
                "const struct buf *link",
                "const struct buf *title",
                "const struct buf *alt",
                "void *opaque"
            ],
            "definition": "static int rndr_image(struct buf *ob, const struct buf *link, const struct buf *title, const struct buf *alt, void *opaque)\n{\n  struct html_renderopt *options = opaque;\n  if ((!link) || (!link->size))\n  {\n    return 0;\n  }\n  bufput(ob, \"<img src=\\\"\", (sizeof(\"<img src=\\\"\")) - 1);\n  escape_href(ob, link->data, link->size);\n  bufput(ob, \"\\\" alt=\\\"\", (sizeof(\"\\\" alt=\\\"\")) - 1);\n  if (alt && alt->size)\n  {\n    escape_html(ob, alt->data, alt->size);\n  }\n  if (title && title->size)\n  {\n    bufput(ob, \"\\\" title=\\\"\", (sizeof(\"\\\" title=\\\"\")) - 1);\n    escape_html(ob, title->data, title->size);\n  }\n  bufputs(ob, (options->flags & HTML_USE_XHTML) ? (\"\\\"/>\") : (\"\\\">\"));\n  return 1;\n}\n\n",
            "calle": [
                "bufput",
                "bufputs",
                "escape_href",
                "escape_html"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *link"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *title"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *alt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct html_renderopt",
                        "type": "struct html_renderopt *",
                        "definition": [
                            "struct html_renderopt *options = opaque"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rndr_html_tag",
            "header": "",
            "params": [
                "struct buf *ob",
                "const struct buf *text",
                "void *opaque",
                "char *tagname",
                "char **whitelist",
                "int tagtype"
            ],
            "definition": "static void rndr_html_tag(struct buf *ob, const struct buf *text, void *opaque, char *tagname, char **whitelist, int tagtype)\n{\n  size_t i;\n  size_t x;\n  size_t z;\n  size_t in_str = 0;\n  size_t seen_equals = 0;\n  size_t done = 0;\n  size_t done_attr = 0;\n  size_t reset = 0;\n  struct buf *attr;\n  unsigned int attr_idx = 0;\n  struct buf *value;\n  unsigned int value_idx = 0;\n  char c;\n  bufputc(ob, '<');\n  if (tagtype == HTML_TAG_CLOSE)\n  {\n    bufputc(ob, '/');\n    bufputs(ob, tagname);\n    bufputc(ob, '>');\n    return;\n  }\n  bufputs(ob, tagname);\n  i = 1 + strlen(tagname);\n  attr_idx = bufnew(16);\n  value_idx = bufnew(16);\n  for (; (i < text->size) && (!done); i += 1)\n  {\n    helper_rndr_html_tag_1(&x, &z, &in_str, &seen_equals, &done, &done_attr, &reset, &c, ob, text, whitelist, i, attr, value);\n  }\n\n  bufrelease(attr);\n  bufrelease(value);\n  bufputc(ob, '>');\n}\n\n",
            "calle": [
                "bufnew",
                "bufputc",
                "bufputs",
                "bufrelease",
                "helper_rndr_html_tag_1",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tagname",
                        "type": "char *",
                        "definition": [
                            "char *tagname"
                        ]
                    },
                    {
                        "path": null,
                        "name": "whitelist",
                        "type": "char **",
                        "definition": [
                            "char **whitelist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tagtype",
                        "type": "int",
                        "definition": [
                            "int tagtype"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "size_t",
                        "definition": [
                            "size_t x"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z",
                        "type": "size_t",
                        "definition": [
                            "size_t z"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_str",
                        "type": "size_t",
                        "definition": [
                            "size_t in_str = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "seen_equals",
                        "type": "size_t",
                        "definition": [
                            "size_t seen_equals = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "done",
                        "type": "size_t",
                        "definition": [
                            "size_t done = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "done_attr",
                        "type": "size_t",
                        "definition": [
                            "size_t done_attr = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reset",
                        "type": "size_t",
                        "definition": [
                            "size_t reset = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *attr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "attr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int attr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "value_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int value_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rndr_raw_html",
            "header": "",
            "params": [
                "struct buf *ob",
                "const struct buf *text",
                "void *opaque"
            ],
            "definition": "static int rndr_raw_html(struct buf *ob, const struct buf *text, void *opaque)\n{\n  struct html_renderopt *options = opaque;\n  char **whitelist = options->html_element_whitelist;\n  int i;\n  int tagtype;\n  if (((options->flags & HTML_ALLOW_ELEMENT_WHITELIST) != 0) && whitelist)\n  {\n    for (i = 0; whitelist[i]; i += 1)\n    {\n      tagtype = sdhtml_is_tag(text->data, text->size, whitelist[i]);\n      if (tagtype != HTML_TAG_NONE)\n      {\n        rndr_html_tag(ob, text, opaque, whitelist[i], options->html_attr_whitelist, tagtype);\n        return 1;\n      }\n    }\n\n  }\n  if ((options->flags & HTML_ESCAPE) != 0)\n  {\n    escape_html(ob, text->data, text->size);\n    return 1;\n  }\n  if ((options->flags & HTML_SKIP_HTML) != 0)\n  {\n    return 1;\n  }\n  if (((options->flags & HTML_SKIP_STYLE) != 0) && sdhtml_is_tag(text->data, text->size, \"style\"))\n  {\n    return 1;\n  }\n  if (((options->flags & HTML_SKIP_LINKS) != 0) && sdhtml_is_tag(text->data, text->size, \"a\"))\n  {\n    return 1;\n  }\n  if (((options->flags & HTML_SKIP_IMAGES) != 0) && sdhtml_is_tag(text->data, text->size, \"img\"))\n  {\n    return 1;\n  }\n  bufput(ob, text->data, text->size);\n  return 1;\n}\n\n",
            "calle": [
                "bufput",
                "escape_html",
                "rndr_html_tag",
                "sdhtml_is_tag"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct html_renderopt",
                        "type": "struct html_renderopt *",
                        "definition": [
                            "struct html_renderopt *options = opaque"
                        ]
                    },
                    {
                        "path": null,
                        "name": "whitelist",
                        "type": "char **",
                        "definition": [
                            "char **whitelist = options->html_element_whitelist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "int",
                        "definition": [
                            "int i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tagtype",
                        "type": "int",
                        "definition": [
                            "int tagtype"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rndr_table",
            "header": "",
            "params": [
                "struct buf *ob",
                "const struct buf *header",
                "const struct buf *body",
                "void *opaque"
            ],
            "definition": "static void rndr_table(struct buf *ob, const struct buf *header, const struct buf *body, void *opaque)\n{\n  if (ob->size)\n  {\n    bufputc(ob, '\\n');\n  }\n  bufput(ob, \"<table><thead>\\n\", (sizeof(\"<table><thead>\\n\")) - 1);\n  if (header)\n  {\n    bufput(ob, header->data, header->size);\n  }\n  bufput(ob, \"</thead><tbody>\\n\", (sizeof(\"</thead><tbody>\\n\")) - 1);\n  if (body)\n  {\n    bufput(ob, body->data, body->size);\n  }\n  bufput(ob, \"</tbody></table>\\n\", (sizeof(\"</tbody></table>\\n\")) - 1);\n}\n\n",
            "calle": [
                "bufput",
                "bufputc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *header"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *body"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rndr_tablerow",
            "header": "",
            "params": [
                "struct buf *ob",
                "const struct buf *text",
                "void *opaque"
            ],
            "definition": "static void rndr_tablerow(struct buf *ob, const struct buf *text, void *opaque)\n{\n  bufput(ob, \"<tr>\\n\", (sizeof(\"<tr>\\n\")) - 1);\n  if (text)\n  {\n    bufput(ob, text->data, text->size);\n  }\n  bufput(ob, \"</tr>\\n\", (sizeof(\"</tr>\\n\")) - 1);\n}\n\n",
            "calle": [
                "bufput"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rndr_tablecell",
            "header": "",
            "params": [
                "struct buf *ob",
                "const struct buf *text",
                "int flags",
                "void *opaque",
                "int col_span"
            ],
            "definition": "static void rndr_tablecell(struct buf *ob, const struct buf *text, int flags, void *opaque, int col_span)\n{\n  if (flags & MKD_TABLE_HEADER)\n  {\n    bufput(ob, \"<th\", (sizeof(\"<th\")) - 1);\n  }\n  else\n  {\n    bufput(ob, \"<td\", (sizeof(\"<td\")) - 1);\n  }\n  if (col_span > 1)\n  {\n    bufprintf(ob, \" colspan=\\\"%d\\\" \", col_span);\n  }\n  switch (flags & MKD_TABLE_ALIGNMASK)\n  {\n    case MKD_TABLE_ALIGN_CENTER:\n    {\n      bufput(ob, \" align=\\\"center\\\">\", (sizeof(\" align=\\\"center\\\">\")) - 1);\n      break;\n    }\n\n    case MKD_TABLE_ALIGN_L:\n    {\n      bufput(ob, \" align=\\\"left\\\">\", (sizeof(\" align=\\\"left\\\">\")) - 1);\n      break;\n    }\n\n    case MKD_TABLE_ALIGN_R:\n    {\n      bufput(ob, \" align=\\\"right\\\">\", (sizeof(\" align=\\\"right\\\">\")) - 1);\n      break;\n    }\n\n    default:\n    {\n      bufput(ob, \">\", (sizeof(\">\")) - 1);\n    }\n\n  }\n\n  if (text)\n  {\n    bufput(ob, text->data, text->size);\n  }\n  if (flags & MKD_TABLE_HEADER)\n  {\n    bufput(ob, \"</th>\\n\", (sizeof(\"</th>\\n\")) - 1);\n  }\n  else\n  {\n    bufput(ob, \"</td>\\n\", (sizeof(\"</td>\\n\")) - 1);\n  }\n}\n\n",
            "calle": [
                "bufprintf",
                "bufput"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    },
                    {
                        "path": null,
                        "name": "col_span",
                        "type": "int",
                        "definition": [
                            "int col_span"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rndr_superscript",
            "header": "",
            "params": [
                "struct buf *ob",
                "const struct buf *text",
                "void *opaque"
            ],
            "definition": "static int rndr_superscript(struct buf *ob, const struct buf *text, void *opaque)\n{\n  if ((!text) || (!text->size))\n  {\n    return 0;\n  }\n  bufput(ob, \"<sup>\", (sizeof(\"<sup>\")) - 1);\n  bufput(ob, text->data, text->size);\n  bufput(ob, \"</sup>\", (sizeof(\"</sup>\")) - 1);\n  return 1;\n}\n\n",
            "calle": [
                "bufput"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rndr_normal_text",
            "header": "",
            "params": [
                "struct buf *ob",
                "const struct buf *text",
                "void *opaque"
            ],
            "definition": "static void rndr_normal_text(struct buf *ob, const struct buf *text, void *opaque)\n{\n  if (text)\n  {\n    escape_html(ob, text->data, text->size);\n  }\n}\n\n",
            "calle": [
                "escape_html"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "toc_header",
            "header": "",
            "params": [
                "struct buf *ob",
                "const struct buf *text",
                "int level",
                "void *opaque"
            ],
            "definition": "static void toc_header(struct buf *ob, const struct buf *text, int level, void *opaque)\n{\n  struct html_renderopt *options = opaque;\n  if (options->toc_data.current_level == 0)\n  {\n    bufput(ob, \"<div class=\\\"toc\\\">\\n\", (sizeof(\"<div class=\\\"toc\\\">\\n\")) - 1);\n    options->toc_data.level_offset = level - 1;\n  }\n  level -= options->toc_data.level_offset;\n  if (level > options->toc_data.current_level)\n  {\n    while (level > options->toc_data.current_level)\n    {\n      bufput(ob, \"<ul>\\n<li>\\n\", (sizeof(\"<ul>\\n<li>\\n\")) - 1);\n      options->toc_data.current_level += 1;\n    }\n\n  }\n  else\n    if (level < options->toc_data.current_level)\n  {\n    bufput(ob, \"</li>\\n\", (sizeof(\"</li>\\n\")) - 1);\n    while (level < options->toc_data.current_level)\n    {\n      bufput(ob, \"</ul>\\n</li>\\n\", (sizeof(\"</ul>\\n</li>\\n\")) - 1);\n      options->toc_data.current_level -= 1;\n    }\n\n    bufput(ob, \"<li>\\n\", (sizeof(\"<li>\\n\")) - 1);\n  }\n  else\n  {\n    bufput(ob, \"</li>\\n<li>\\n\", (sizeof(\"</li>\\n<li>\\n\")) - 1);\n  }\n  bufput(ob, \"<a href=\\\"#\", (sizeof(\"<a href=\\\"#\")) - 1);\n  if (options->toc_id_prefix)\n  {\n    bufputs(ob, options->toc_id_prefix);\n  }\n  bufprintf(ob, \"toc_%d\\\">\", options->toc_data.header_count++);\n  if (text)\n  {\n    escape_html(ob, text->data, text->size);\n  }\n  bufput(ob, \"</a>\\n\", (sizeof(\"</a>\\n\")) - 1);\n}\n\n",
            "calle": [
                "bufprintf",
                "bufput",
                "bufputs",
                "escape_html"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "int",
                        "definition": [
                            "int level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct html_renderopt",
                        "type": "struct html_renderopt *",
                        "definition": [
                            "struct html_renderopt *options = opaque"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "toc_link",
            "header": "",
            "params": [
                "struct buf *ob",
                "const struct buf *link",
                "const struct buf *title",
                "const struct buf *content",
                "void *opaque"
            ],
            "definition": "static int toc_link(struct buf *ob, const struct buf *link, const struct buf *title, const struct buf *content, void *opaque)\n{\n  if (content && content->size)\n  {\n    bufput(ob, content->data, content->size);\n  }\n  return 1;\n}\n\n",
            "calle": [
                "bufput"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *link"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *title"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *content"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "reset_toc",
            "header": "",
            "params": [
                "struct buf *ob",
                "void *opaque"
            ],
            "definition": "static void reset_toc(struct buf *ob, void *opaque)\n{\n  struct html_renderopt *options = opaque;\n  memset(&options->toc_data, 0, sizeof(options->toc_data));\n}\n\n",
            "calle": [
                "memset"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct html_renderopt",
                        "type": "struct html_renderopt *",
                        "definition": [
                            "struct html_renderopt *options = opaque"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "toc_finalize",
            "header": "",
            "params": [
                "struct buf *ob",
                "void *opaque"
            ],
            "definition": "static void toc_finalize(struct buf *ob, void *opaque)\n{\n  struct html_renderopt *options = opaque;\n  bool has_toc = 0;\n  while (options->toc_data.current_level > 0)\n  {\n    bufput(ob, \"</li>\\n</ul>\\n\", (sizeof(\"</li>\\n</ul>\\n\")) - 1);\n    options->toc_data.current_level -= 1;\n    has_toc = 1;\n  }\n\n  if (has_toc)\n  {\n    bufput(ob, \"</div>\\n\", (sizeof(\"</div>\\n\")) - 1);\n  }\n  reset_toc(ob, opaque);\n}\n\n",
            "calle": [
                "bufput",
                "reset_toc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct html_renderopt",
                        "type": "struct html_renderopt *",
                        "definition": [
                            "struct html_renderopt *options = opaque"
                        ]
                    },
                    {
                        "path": null,
                        "name": "has_toc",
                        "type": "bool",
                        "definition": [
                            "bool has_toc = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_rndr_html_tag_1",
            "header": "",
            "params": [
                "size_t * const x_ref",
                "size_t * const z_ref",
                "size_t * const in_str_ref",
                "size_t * const seen_equals_ref",
                "size_t * const done_ref",
                "size_t * const done_attr_ref",
                "size_t * const reset_ref",
                "char * const c_ref",
                "struct buf * const ob",
                "const struct buf * const text",
                "char ** const whitelist",
                "size_t i",
                "struct buf * const attr",
                "struct buf * const value"
            ],
            "definition": "void helper_rndr_html_tag_1(size_t * const x_ref, size_t * const z_ref, size_t * const in_str_ref, size_t * const seen_equals_ref, size_t * const done_ref, size_t * const done_attr_ref, size_t * const reset_ref, char * const c_ref, struct buf * const ob, const struct buf * const text, char ** const whitelist, size_t i, struct buf * const attr, struct buf * const value)\n{\n  size_t x = *x_ref;\n  size_t z = *z_ref;\n  size_t in_str = *in_str_ref;\n  size_t seen_equals = *seen_equals_ref;\n  size_t done = *done_ref;\n  size_t done_attr = *done_attr_ref;\n  size_t reset = *reset_ref;\n  char c = *c_ref;\n  c = text->data[i];\n  done = 0;\n  reset = 0;\n  done_attr = 0;\n  switch (c)\n  {\n    case '>':\n    {\n      done = 1;\n      break;\n    }\n\n    case '\\'':\n\n    case '\"':\n    {\n      if (!seen_equals)\n      {\n        reset = 1;\n      }\n      else\n        if (!in_str)\n      {\n        in_str = c;\n      }\n      else\n        if (in_str == c)\n      {\n        in_str = 0;\n        done_attr = 1;\n      }\n      else\n      {\n        bufputc(value, c);\n      }\n      break;\n    }\n\n    case ' ':\n    {\n      if (in_str)\n      {\n        bufputc(value, ' ');\n      }\n      else\n      {\n        reset = 1;\n      }\n      break;\n    }\n\n    case '=':\n    {\n      if (seen_equals)\n      {\n        reset = 1;\n        break;\n      }\n      seen_equals = 1;\n      break;\n    }\n\n    default:\n    {\n      if ((seen_equals && in_str) || (!seen_equals))\n      {\n        bufputc((seen_equals) ? (value) : (attr), c);\n      }\n      break;\n    }\n\n  }\n\n  if (done_attr)\n  {\n    helper_helper_rndr_html_tag_1_1(&x, &z, &reset, ob, whitelist, attr, value);\n  }\n  if (reset)\n  {\n    seen_equals = 0;\n    in_str = 0;\n    bufreset(attr);\n    bufreset(value);\n  }\n  *x_ref = x;\n  *z_ref = z;\n  *in_str_ref = in_str;\n  *seen_equals_ref = seen_equals;\n  *done_ref = done;\n  *done_attr_ref = done_attr;\n  *reset_ref = reset;\n  *c_ref = c;\n}\n\n",
            "calle": [
                "bufputc",
                "bufreset",
                "helper_helper_rndr_html_tag_1_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "x_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const x_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const z_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_str_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const in_str_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "seen_equals_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const seen_equals_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "done_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const done_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "done_attr_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const done_attr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reset_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const reset_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c_ref",
                        "type": "char * const",
                        "definition": [
                            "char * const c_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf * const",
                        "definition": [
                            "struct buf * const ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf * const",
                        "definition": [
                            "const struct buf * const text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "whitelist",
                        "type": "char ** const",
                        "definition": [
                            "char ** const whitelist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf * const",
                        "definition": [
                            "struct buf * const attr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf * const",
                        "definition": [
                            "struct buf * const value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "size_t",
                        "definition": [
                            "size_t x = *x_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z",
                        "type": "size_t",
                        "definition": [
                            "size_t z = *z_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_str",
                        "type": "size_t",
                        "definition": [
                            "size_t in_str = *in_str_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "seen_equals",
                        "type": "size_t",
                        "definition": [
                            "size_t seen_equals = *seen_equals_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "done",
                        "type": "size_t",
                        "definition": [
                            "size_t done = *done_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "done_attr",
                        "type": "size_t",
                        "definition": [
                            "size_t done_attr = *done_attr_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reset",
                        "type": "size_t",
                        "definition": [
                            "size_t reset = *reset_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "char",
                        "definition": [
                            "char c = *c_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_rndr_html_tag_1_1",
            "header": "",
            "params": [
                "size_t * const x_ref",
                "size_t * const z_ref",
                "size_t * const reset_ref",
                "struct buf * const ob",
                "char ** const whitelist",
                "struct buf * const attr",
                "struct buf * const value"
            ],
            "definition": "void helper_helper_rndr_html_tag_1_1(size_t * const x_ref, size_t * const z_ref, size_t * const reset_ref, struct buf * const ob, char ** const whitelist, struct buf * const attr, struct buf * const value)\n{\n  size_t x = *x_ref;\n  size_t z = *z_ref;\n  size_t reset = *reset_ref;\n  int valid = 0;\n  for (z = 0; whitelist[z]; z += 1)\n  {\n    if (strlen(whitelist[z]) != attr->size)\n    {\n      continue;\n    }\n    for (x = 0; x < attr->size; x += 1)\n    {\n      if (tolower(whitelist[z][x]) != tolower(attr->data[x]))\n      {\n        break;\n      }\n    }\n\n    if (x == attr->size)\n    {\n      valid = 1;\n      break;\n    }\n  }\n\n  if ((valid && value->size) && attr->size)\n  {\n    bufputc(ob, ' ');\n    escape_html(ob, attr->data, attr->size);\n    bufputs(ob, \"=\\\"\");\n    escape_html(ob, value->data, value->size);\n    bufputc(ob, '\"');\n  }\n  reset = 1;\n  *x_ref = x;\n  *z_ref = z;\n  *reset_ref = reset;\n}\n\n",
            "calle": [
                "bufputc",
                "bufputs",
                "escape_html",
                "strlen",
                "tolower"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "x_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const x_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const z_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reset_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const reset_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf * const",
                        "definition": [
                            "struct buf * const ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "whitelist",
                        "type": "char ** const",
                        "definition": [
                            "char ** const whitelist"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf * const",
                        "definition": [
                            "struct buf * const attr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf * const",
                        "definition": [
                            "struct buf * const value"
                        ]
                    },
                    {
                        "path": null,
                        "name": "x",
                        "type": "size_t",
                        "definition": [
                            "size_t x = *x_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "z",
                        "type": "size_t",
                        "definition": [
                            "size_t z = *z_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "reset",
                        "type": "size_t",
                        "definition": [
                            "size_t reset = *reset_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "valid",
                        "type": "int",
                        "definition": [
                            "int valid = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "sdhtml_smartypants",
            "header": "extern void sdhtml_smartypants(struct buf *ob, const uint8_t *text, size_t size)",
            "params": [
                "struct buf *ob",
                "const uint8_t *text",
                "size_t size"
            ],
            "definition": "void sdhtml_smartypants(struct buf *ob, const uint8_t *text, size_t size)\n{\n  size_t i;\n  struct smartypants_data smrt = {0, 0};\n  if (!text)\n  {\n    return;\n  }\n  bufgrow(ob, size);\n  for (i = 0; i < size; i += 1)\n  {\n    size_t org;\n    uint8_t action = 0;\n    org = i;\n    while ((i < size) && ((action = smartypants_cb_chars[text[i]]) == 0))\n      i++;\n\n    i += 1;\n    if (i > org)\n    {\n      bufput(ob, text + org, i - org);\n    }\n    if (i < size)\n    {\n      i += smartypants_cb_ptrs[(int) action](ob, &smrt, (i) ? (text[i - 1]) : (0), text + i, size - i);\n    }\n  }\n\n}\n\n",
            "calle": [
                "bufgrow",
                "bufput",
                "smartypants_cb_ptrs[(int) action]"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "text",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "smrt",
                        "type": "struct smartypants_data",
                        "definition": [
                            "struct smartypants_data smrt = {0, 0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "org",
                        "type": "size_t",
                        "definition": [
                            "size_t org"
                        ]
                    },
                    {
                        "path": null,
                        "name": "action",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t action = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "smartypants_cb_chars",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "smartypants_cb_ptrs",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "smartypants_cb__ltag",
            "header": "static size_t smartypants_cb__ltag(struct buf *ob, struct smartypants_data *smrt, uint8_t previous_char, const uint8_t *text, size_t size)",
            "params": [
                "struct buf *ob",
                "struct smartypants_data *smrt",
                "uint8_t previous_char",
                "const uint8_t *text",
                "size_t size"
            ],
            "definition": "static size_t smartypants_cb__ltag(struct buf *ob, struct smartypants_data *smrt, uint8_t previous_char, const uint8_t *text, size_t size)\n{\n  static const char *skip_tags[] = {\"pre\", \"code\", \"var\", \"samp\", \"kbd\", \"math\", \"script\", \"style\"};\n  static const size_t skip_tags_count = 8;\n  size_t tag;\n  size_t i = 0;\n  while ((i < size) && (text[i] != '>'))\n    i++;\n\n  i += 1;\n  for (tag = 0; tag < skip_tags_count; tag += 1)\n  {\n    if (sdhtml_is_tag(text, size, skip_tags[tag]) == HTML_TAG_OPEN)\n    {\n      break;\n    }\n  }\n\n  if (tag < skip_tags_count)\n  {\n    for (;;)\n    {\n      while ((i < size) && (text[i] != '<'))\n        i++;\n\n      i += 1;\n      if (i == size)\n      {\n        break;\n      }\n      if (sdhtml_is_tag(text + i, size - i, skip_tags[tag]) == HTML_TAG_CLOSE)\n      {\n        break;\n      }\n      i++;\n    }\n\n    while ((i < size) && (text[i] != '>'))\n      i++;\n\n    i += 1;\n  }\n  bufput(ob, text, i + 1);\n  return i;\n}\n\n",
            "calle": [
                "bufput",
                "sdhtml_is_tag"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct smartypants_data",
                        "type": "struct smartypants_data *",
                        "definition": [
                            "struct smartypants_data *smrt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "previous_char",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t previous_char"
                        ]
                    },
                    {
                        "path": null,
                        "name": "text",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "skip_tags",
                        "type": "const char *[]",
                        "definition": [
                            "static const char *skip_tags[] = {\"pre\", \"code\", \"var\", \"samp\", \"kbd\", \"math\", \"script\", \"style\"}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "skip_tags_count",
                        "type": "const size_t",
                        "definition": [
                            "static const size_t skip_tags_count = 8"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag",
                        "type": "size_t",
                        "definition": [
                            "size_t tag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "smartypants_cb__dquote",
            "header": "static size_t smartypants_cb__dquote(struct buf *ob, struct smartypants_data *smrt, uint8_t previous_char, const uint8_t *text, size_t size)",
            "params": [
                "struct buf *ob",
                "struct smartypants_data *smrt",
                "uint8_t previous_char",
                "const uint8_t *text",
                "size_t size"
            ],
            "definition": "static size_t smartypants_cb__dquote(struct buf *ob, struct smartypants_data *smrt, uint8_t previous_char, const uint8_t *text, size_t size)\n{\n  if (!smartypants_quotes(ob, previous_char, (size > 0) ? (text[1]) : (0), 'd', &smrt->in_dquote))\n  {\n    bufput(ob, \"&quot;\", (sizeof(\"&quot;\")) - 1);\n  }\n  return 0;\n}\n\n",
            "calle": [
                "bufput",
                "smartypants_quotes"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct smartypants_data",
                        "type": "struct smartypants_data *",
                        "definition": [
                            "struct smartypants_data *smrt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "previous_char",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t previous_char"
                        ]
                    },
                    {
                        "path": null,
                        "name": "text",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "smartypants_cb__amp",
            "header": "static size_t smartypants_cb__amp(struct buf *ob, struct smartypants_data *smrt, uint8_t previous_char, const uint8_t *text, size_t size)",
            "params": [
                "struct buf *ob",
                "struct smartypants_data *smrt",
                "uint8_t previous_char",
                "const uint8_t *text",
                "size_t size"
            ],
            "definition": "static size_t smartypants_cb__amp(struct buf *ob, struct smartypants_data *smrt, uint8_t previous_char, const uint8_t *text, size_t size)\n{\n  if ((size >= 6) && (memcmp(text, \"&quot;\", 6) == 0))\n  {\n    if (smartypants_quotes(ob, previous_char, (size >= 7) ? (text[6]) : (0), 'd', &smrt->in_dquote))\n    {\n      return 5;\n    }\n  }\n  if ((size >= 4) && (memcmp(text, \"&#0;\", 4) == 0))\n  {\n    return 3;\n  }\n  bufputc(ob, '&');\n  return 0;\n}\n\n",
            "calle": [
                "bufputc",
                "memcmp",
                "smartypants_quotes"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct smartypants_data",
                        "type": "struct smartypants_data *",
                        "definition": [
                            "struct smartypants_data *smrt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "previous_char",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t previous_char"
                        ]
                    },
                    {
                        "path": null,
                        "name": "text",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "smartypants_cb__period",
            "header": "static size_t smartypants_cb__period(struct buf *ob, struct smartypants_data *smrt, uint8_t previous_char, const uint8_t *text, size_t size)",
            "params": [
                "struct buf *ob",
                "struct smartypants_data *smrt",
                "uint8_t previous_char",
                "const uint8_t *text",
                "size_t size"
            ],
            "definition": "static size_t smartypants_cb__period(struct buf *ob, struct smartypants_data *smrt, uint8_t previous_char, const uint8_t *text, size_t size)\n{\n  if (((size >= 3) && (text[1] == '.')) && (text[2] == '.'))\n  {\n    bufput(ob, \"&hellip;\", (sizeof(\"&hellip;\")) - 1);\n    return 2;\n  }\n  if (((((size >= 5) && (text[1] == ' ')) && (text[2] == '.')) && (text[3] == ' ')) && (text[4] == '.'))\n  {\n    bufput(ob, \"&hellip;\", (sizeof(\"&hellip;\")) - 1);\n    return 4;\n  }\n  bufputc(ob, text[0]);\n  return 0;\n}\n\n",
            "calle": [
                "bufput",
                "bufputc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct smartypants_data",
                        "type": "struct smartypants_data *",
                        "definition": [
                            "struct smartypants_data *smrt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "previous_char",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t previous_char"
                        ]
                    },
                    {
                        "path": null,
                        "name": "text",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "smartypants_cb__number",
            "header": "static size_t smartypants_cb__number(struct buf *ob, struct smartypants_data *smrt, uint8_t previous_char, const uint8_t *text, size_t size)",
            "params": [
                "struct buf *ob",
                "struct smartypants_data *smrt",
                "uint8_t previous_char",
                "const uint8_t *text",
                "size_t size"
            ],
            "definition": "static size_t smartypants_cb__number(struct buf *ob, struct smartypants_data *smrt, uint8_t previous_char, const uint8_t *text, size_t size)\n{\n  if (word_boundary(previous_char) && (size >= 3))\n  {\n    if (((text[0] == '1') && (text[1] == '/')) && (text[2] == '2'))\n    {\n      if ((size == 3) || word_boundary(text[3]))\n      {\n        bufput(ob, \"&frac12;\", (sizeof(\"&frac12;\")) - 1);\n        return 2;\n      }\n    }\n    if (((text[0] == '1') && (text[1] == '/')) && (text[2] == '4'))\n    {\n      if (((size == 3) || word_boundary(text[3])) || (((size >= 5) && (tolower(text[3]) == 't')) && (tolower(text[4]) == 'h')))\n      {\n        bufput(ob, \"&frac14;\", (sizeof(\"&frac14;\")) - 1);\n        return 2;\n      }\n    }\n    if (((text[0] == '3') && (text[1] == '/')) && (text[2] == '4'))\n    {\n      if (((size == 3) || word_boundary(text[3])) || ((((size >= 6) && (tolower(text[3]) == 't')) && (tolower(text[4]) == 'h')) && (tolower(text[5]) == 's')))\n      {\n        bufput(ob, \"&frac34;\", (sizeof(\"&frac34;\")) - 1);\n        return 2;\n      }\n    }\n  }\n  bufputc(ob, text[0]);\n  return 0;\n}\n\n",
            "calle": [
                "bufput",
                "bufputc",
                "tolower",
                "word_boundary"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct smartypants_data",
                        "type": "struct smartypants_data *",
                        "definition": [
                            "struct smartypants_data *smrt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "previous_char",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t previous_char"
                        ]
                    },
                    {
                        "path": null,
                        "name": "text",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "smartypants_cb__dash",
            "header": "static size_t smartypants_cb__dash(struct buf *ob, struct smartypants_data *smrt, uint8_t previous_char, const uint8_t *text, size_t size)",
            "params": [
                "struct buf *ob",
                "struct smartypants_data *smrt",
                "uint8_t previous_char",
                "const uint8_t *text",
                "size_t size"
            ],
            "definition": "static size_t smartypants_cb__dash(struct buf *ob, struct smartypants_data *smrt, uint8_t previous_char, const uint8_t *text, size_t size)\n{\n  if (((size >= 3) && (text[1] == '-')) && (text[2] == '-'))\n  {\n    bufput(ob, \"&mdash;\", (sizeof(\"&mdash;\")) - 1);\n    return 2;\n  }\n  if ((size >= 2) && (text[1] == '-'))\n  {\n    bufput(ob, \"&ndash;\", (sizeof(\"&ndash;\")) - 1);\n    return 1;\n  }\n  bufputc(ob, text[0]);\n  return 0;\n}\n\n",
            "calle": [
                "bufput",
                "bufputc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct smartypants_data",
                        "type": "struct smartypants_data *",
                        "definition": [
                            "struct smartypants_data *smrt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "previous_char",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t previous_char"
                        ]
                    },
                    {
                        "path": null,
                        "name": "text",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "smartypants_cb__parens",
            "header": "static size_t smartypants_cb__parens(struct buf *ob, struct smartypants_data *smrt, uint8_t previous_char, const uint8_t *text, size_t size)",
            "params": [
                "struct buf *ob",
                "struct smartypants_data *smrt",
                "uint8_t previous_char",
                "const uint8_t *text",
                "size_t size"
            ],
            "definition": "static size_t smartypants_cb__parens(struct buf *ob, struct smartypants_data *smrt, uint8_t previous_char, const uint8_t *text, size_t size)\n{\n  if (size >= 3)\n  {\n    uint8_t t1 = tolower(text[1]);\n    uint8_t t2 = tolower(text[2]);\n    if ((t1 == 'c') && (t2 == ')'))\n    {\n      bufput(ob, \"&copy;\", (sizeof(\"&copy;\")) - 1);\n      return 2;\n    }\n    if ((t1 == 'r') && (t2 == ')'))\n    {\n      bufput(ob, \"&reg;\", (sizeof(\"&reg;\")) - 1);\n      return 2;\n    }\n    if ((((size >= 4) && (t1 == 't')) && (t2 == 'm')) && (text[3] == ')'))\n    {\n      bufput(ob, \"&trade;\", (sizeof(\"&trade;\")) - 1);\n      return 3;\n    }\n  }\n  bufputc(ob, text[0]);\n  return 0;\n}\n\n",
            "calle": [
                "bufput",
                "bufputc",
                "tolower"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct smartypants_data",
                        "type": "struct smartypants_data *",
                        "definition": [
                            "struct smartypants_data *smrt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "previous_char",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t previous_char"
                        ]
                    },
                    {
                        "path": null,
                        "name": "text",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t1",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t t1 = tolower(text[1])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t2",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t t2 = tolower(text[2])"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "smartypants_cb__squote",
            "header": "static size_t smartypants_cb__squote(struct buf *ob, struct smartypants_data *smrt, uint8_t previous_char, const uint8_t *text, size_t size)",
            "params": [
                "struct buf *ob",
                "struct smartypants_data *smrt",
                "uint8_t previous_char",
                "const uint8_t *text",
                "size_t size"
            ],
            "definition": "static size_t smartypants_cb__squote(struct buf *ob, struct smartypants_data *smrt, uint8_t previous_char, const uint8_t *text, size_t size)\n{\n  if (size >= 2)\n  {\n    uint8_t t1 = tolower(text[1]);\n    if (t1 == '\\'')\n    {\n      if (smartypants_quotes(ob, previous_char, (size >= 3) ? (text[2]) : (0), 'd', &smrt->in_dquote))\n      {\n        return 1;\n      }\n    }\n    if (((((t1 == 's') || (t1 == 't')) || (t1 == 'm')) || (t1 == 'd')) && ((size == 3) || word_boundary(text[2])))\n    {\n      bufput(ob, \"&rsquo;\", (sizeof(\"&rsquo;\")) - 1);\n      return 0;\n    }\n    if (size >= 3)\n    {\n      uint8_t t2 = tolower(text[2]);\n      if (((((t1 == 'r') && (t2 == 'e')) || ((t1 == 'l') && (t2 == 'l'))) || ((t1 == 'v') && (t2 == 'e'))) && ((size == 4) || word_boundary(text[3])))\n      {\n        bufput(ob, \"&rsquo;\", (sizeof(\"&rsquo;\")) - 1);\n        return 0;\n      }\n    }\n  }\n  if (smartypants_quotes(ob, previous_char, (size > 0) ? (text[1]) : (0), 's', &smrt->in_squote))\n  {\n    return 0;\n  }\n  bufputc(ob, text[0]);\n  return 0;\n}\n\n",
            "calle": [
                "bufput",
                "bufputc",
                "smartypants_quotes",
                "tolower",
                "word_boundary"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct smartypants_data",
                        "type": "struct smartypants_data *",
                        "definition": [
                            "struct smartypants_data *smrt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "previous_char",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t previous_char"
                        ]
                    },
                    {
                        "path": null,
                        "name": "text",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t1",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t t1 = tolower(text[1])"
                        ]
                    },
                    {
                        "path": null,
                        "name": "t2",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t t2 = tolower(text[2])"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "smartypants_cb__backtick",
            "header": "static size_t smartypants_cb__backtick(struct buf *ob, struct smartypants_data *smrt, uint8_t previous_char, const uint8_t *text, size_t size)",
            "params": [
                "struct buf *ob",
                "struct smartypants_data *smrt",
                "uint8_t previous_char",
                "const uint8_t *text",
                "size_t size"
            ],
            "definition": "static size_t smartypants_cb__backtick(struct buf *ob, struct smartypants_data *smrt, uint8_t previous_char, const uint8_t *text, size_t size)\n{\n  if ((size >= 2) && (text[1] == '`'))\n  {\n    if (smartypants_quotes(ob, previous_char, (size >= 3) ? (text[2]) : (0), 'd', &smrt->in_dquote))\n    {\n      return 1;\n    }\n  }\n  return 0;\n}\n\n",
            "calle": [
                "smartypants_quotes"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct smartypants_data",
                        "type": "struct smartypants_data *",
                        "definition": [
                            "struct smartypants_data *smrt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "previous_char",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t previous_char"
                        ]
                    },
                    {
                        "path": null,
                        "name": "text",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "smartypants_cb__escape",
            "header": "static size_t smartypants_cb__escape(struct buf *ob, struct smartypants_data *smrt, uint8_t previous_char, const uint8_t *text, size_t size)",
            "params": [
                "struct buf *ob",
                "struct smartypants_data *smrt",
                "uint8_t previous_char",
                "const uint8_t *text",
                "size_t size"
            ],
            "definition": "static size_t smartypants_cb__escape(struct buf *ob, struct smartypants_data *smrt, uint8_t previous_char, const uint8_t *text, size_t size)\n{\n  if (size < 2)\n  {\n    return 0;\n  }\n  switch (text[1])\n  {\n    case '\\\\':\n\n    case '\"':\n\n    case '\\'':\n\n    case '.':\n\n    case '-':\n\n    case '`':\n    {\n      bufputc(ob, text[1]);\n      return 1;\n    }\n\n    default:\n    {\n      bufputc(ob, '\\\\');\n      return 0;\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "bufputc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct smartypants_data",
                        "type": "struct smartypants_data *",
                        "definition": [
                            "struct smartypants_data *smrt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "previous_char",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t previous_char"
                        ]
                    },
                    {
                        "path": null,
                        "name": "text",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "word_boundary",
            "header": "",
            "params": [
                "uint8_t c"
            ],
            "definition": "inline static int word_boundary(uint8_t c)\n{\n  return ((c == 0) || isspace(c)) || ispunct(c);\n}\n\n",
            "calle": [
                "ispunct",
                "isspace"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "smartypants_quotes",
            "header": "",
            "params": [
                "struct buf *ob",
                "uint8_t previous_char",
                "uint8_t next_char",
                "uint8_t quote",
                "int *is_open"
            ],
            "definition": "static int smartypants_quotes(struct buf *ob, uint8_t previous_char, uint8_t next_char, uint8_t quote, int *is_open)\n{\n  char ent[8];\n  if ((*is_open) && (!word_boundary(next_char)))\n  {\n    return 0;\n  }\n  if ((!(*is_open)) && (!word_boundary(previous_char)))\n  {\n    return 0;\n  }\n  snprintf(ent, sizeof(ent), \"&%c%cquo;\", (*is_open) ? ('r') : ('l'), quote);\n  *is_open = !(*is_open);\n  bufputs(ob, ent);\n  return 1;\n}\n\n",
            "calle": [
                "bufputs",
                "snprintf",
                "word_boundary"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "previous_char",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t previous_char"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_char",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t next_char"
                        ]
                    },
                    {
                        "path": null,
                        "name": "quote",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t quote"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_open",
                        "type": "int *",
                        "definition": [
                            "int *is_open"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ent",
                        "type": "char [8]",
                        "definition": [
                            "char ent[8]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "sd_markdown_new",
            "header": "extern struct sd_markdown *sd_markdown_new(unsigned int extensions, size_t max_nesting, size_t max_table_cols, const struct sd_callbacks *callbacks, void *opaque)",
            "params": [
                "unsigned int extensions",
                "size_t max_nesting",
                "size_t max_table_cols",
                "const struct sd_callbacks *callbacks",
                "void *opaque"
            ],
            "definition": "struct sd_markdown *sd_markdown_new(unsigned int extensions, size_t max_nesting, size_t max_table_cols, const struct sd_callbacks *callbacks, void *opaque)\n{\n  struct sd_markdown *md = 0;\n  unsigned int md_idx = 0;\n  assert(((max_nesting > 0) && (max_table_cols > 0)) && callbacks);\n  md_idx = malloc(sizeof(struct sd_markdown));\n  if (!(&md[md_idx]))\n  {\n    return 0;\n  }\n  if (!sip_hash_key_init)\n  {\n    if (backport_getrandom(sip_hash_key, 16, 0) < 16)\n    {\n      return 0;\n    }\n    sip_hash_key_init = 1;\n  }\n  memcpy(&md->cb, callbacks, sizeof(struct sd_callbacks));\n  stack_init(&md->work_bufs[0], 4);\n  stack_init(&md->work_bufs[1], 8);\n  memset(md->active_char, 0x0, 256);\n  if ((md->cb.emphasis || md->cb.double_emphasis) || md->cb.triple_emphasis)\n  {\n    md->active_char['*'] = MD_CHAR_EMPHASIS;\n    md->active_char['_'] = MD_CHAR_EMPHASIS;\n    md->active_char['>'] = MD_CHAR_EMPHASIS;\n    if (extensions & MKDEXT_STRIKETHROUGH)\n    {\n      md->active_char['~'] = MD_CHAR_EMPHASIS;\n    }\n  }\n  if (md->cb.codespan)\n  {\n    md->active_char['`'] = MD_CHAR_CODESPAN;\n  }\n  if (md->cb.linebreak)\n  {\n    md->active_char['\\n'] = MD_CHAR_LINEBREAK;\n  }\n  if (md->cb.image || md->cb.link)\n  {\n    md->active_char['['] = MD_CHAR_LINK;\n  }\n  md->active_char['<'] = MD_CHAR_LANGLE;\n  md->active_char['\\\\'] = MD_CHAR_ESCAPE;\n  md->active_char['&'] = MD_CHAR_ENTITITY;\n  if (extensions & MKDEXT_AUTOLINK)\n  {\n    if (!(extensions & MKDEXT_NO_EMAIL_AUTOLINK))\n    {\n      md->active_char['@'] = MD_CHAR_AUTOLINK_EMAIL;\n    }\n    md->active_char[':'] = MD_CHAR_AUTOLINK_URL;\n    md->active_char['w'] = MD_CHAR_AUTOLINK_WWW;\n    md->active_char['/'] = MD_CHAR_AUTOLINK_SUBREDDIT_OR_USERNAME;\n  }\n  if (extensions & MKDEXT_SUPERSCRIPT)\n  {\n    md->active_char['^'] = MD_CHAR_SUPERSCRIPT;\n  }\n  md->ext_flags = extensions;\n  md->opaque = opaque;\n  md->max_nesting = max_nesting;\n  md->max_table_cols = max_table_cols;\n  md->in_link_body = 0;\n  return md;\n}\n\n",
            "calle": [
                "assert",
                "backport_getrandom",
                "malloc",
                "memcpy",
                "memset",
                "stack_init"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "extensions",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int extensions"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_nesting",
                        "type": "size_t",
                        "definition": [
                            "size_t max_nesting"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_table_cols",
                        "type": "size_t",
                        "definition": [
                            "size_t max_table_cols"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_callbacks",
                        "type": "const struct sd_callbacks *",
                        "definition": [
                            "const struct sd_callbacks *callbacks"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *md = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "md_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int md_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sip_hash_key_init",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "sip_hash_key",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "sd_markdown_render",
            "header": "extern void sd_markdown_render(struct buf *ob, const uint8_t *document, size_t doc_size, struct sd_markdown *md)",
            "params": [
                "struct buf *ob",
                "const uint8_t *document",
                "size_t doc_size",
                "struct sd_markdown *md"
            ],
            "definition": "void sd_markdown_render(struct buf *ob, const uint8_t *document, size_t doc_size, struct sd_markdown *md)\n{\n  static const char UTF8_BOM[] = {0xEF, 0xBB, 0xBF};\n  struct buf *text;\n  unsigned int text_idx = 0;\n  size_t beg;\n  size_t end;\n  text_idx = bufnew(64);\n  if (!(&text[text_idx]))\n  {\n    return;\n  }\n  bufgrow(text, doc_size);\n  memset(&md->refs, 0x0, 8 * (sizeof(void *)));\n  beg = 0;\n  if ((doc_size >= 3) && (memcmp(document, UTF8_BOM, 3) == 0))\n  {\n    beg += 3;\n  }\n  while (beg < doc_size)\n    if (is_ref(document, beg, doc_size, &end, md->refs))\n  {\n    beg = end;\n  }\n  else\n  {\n    end = beg;\n    while (((end < doc_size) && (document[end] != '\\n')) && (document[end] != '\\r'))\n      end++;\n\n    end += 1;\n    if (end > beg)\n    {\n      expand_tabs(text, document + beg, end - beg);\n    }\n    while ((end < doc_size) && ((document[end] == '\\n') || (document[end] == '\\r')))\n    {\n      if ((document[end] == '\\n') || (((end + 1) < doc_size) && (document[end + 1] != '\\n')))\n      {\n        bufputc(text, '\\n');\n      }\n      end += 1;\n    }\n\n    beg = end;\n  }\n\n  bufgrow(ob, text->size + (text->size >> 1));\n  if (md->cb.doc_header)\n  {\n    md->cb.doc_header(ob, md->opaque);\n  }\n  if (text->size)\n  {\n    if ((text->data[text->size - 1] != '\\n') && (text->data[text->size - 1] != '\\r'))\n    {\n      bufputc(text, '\\n');\n    }\n    parse_block(ob, md, text->data, text->size);\n  }\n  if (md->cb.doc_footer)\n  {\n    md->cb.doc_footer(ob, md->opaque);\n  }\n  bufrelease(text);\n  free_link_refs(md->refs);\n  assert(md->work_bufs[1].size == 0);\n  assert(md->work_bufs[0].size == 0);\n}\n\n",
            "calle": [
                "assert",
                "bufgrow",
                "bufnew",
                "bufputc",
                "bufrelease",
                "expand_tabs",
                "free_link_refs",
                "is_ref",
                "md->cb.doc_footer",
                "md->cb.doc_header",
                "memcmp",
                "memset",
                "parse_block"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "document",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *document"
                        ]
                    },
                    {
                        "path": null,
                        "name": "doc_size",
                        "type": "size_t",
                        "definition": [
                            "size_t doc_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *md"
                        ]
                    },
                    {
                        "path": null,
                        "name": "UTF8_BOM",
                        "type": "const char []",
                        "definition": [
                            "static const char UTF8_BOM[] = {0xEF, 0xBB, 0xBF}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "text_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int text_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "beg",
                        "type": "size_t",
                        "definition": [
                            "size_t beg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "size_t",
                        "definition": [
                            "size_t end"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "sd_markdown_free",
            "header": "extern void sd_markdown_free(struct sd_markdown *md)",
            "params": [
                "struct sd_markdown *md"
            ],
            "definition": "void sd_markdown_free(struct sd_markdown *md)\n{\n  size_t i;\n  for (i = 0; i < ((size_t) md->work_bufs[1].asize); i += 1)\n    bufrelease(md->work_bufs[1].item[i]);\n\n  for (i = 0; i < ((size_t) md->work_bufs[0].asize); i += 1)\n    bufrelease(md->work_bufs[0].item[i]);\n\n  stack_free(&md->work_bufs[1]);\n  stack_free(&md->work_bufs[0]);\n  free(md);\n}\n\n",
            "calle": [
                "bufrelease",
                "free",
                "stack_free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *md"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "sd_version",
            "header": "extern void sd_version(int *major, int *minor, int *revision)",
            "params": [
                "int *ver_major",
                "int *ver_minor",
                "int *ver_revision"
            ],
            "definition": "void sd_version(int *ver_major, int *ver_minor, int *ver_revision)\n{\n  *ver_major = 1;\n  *ver_minor = 16;\n  *ver_revision = 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "ver_major",
                        "type": "int *",
                        "definition": [
                            "int *ver_major"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ver_minor",
                        "type": "int *",
                        "definition": [
                            "int *ver_minor"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ver_revision",
                        "type": "int *",
                        "definition": [
                            "int *ver_revision"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "hash_block_tag",
            "header": "",
            "params": [
                "const char *str",
                "unsigned int len"
            ],
            "definition": "static unsigned int hash_block_tag(const char *str, unsigned int len)\n{\n  static const unsigned char asso_values[] = {38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 8, 30, 25, 20, 15, 10, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 0, 38, 0, 38, 5, 5, 5, 15, 0, 38, 38, 0, 15, 10, 0, 38, 38, 15, 0, 5, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 0, 38, 0, 38, 5, 5, 5, 15, 0, 38, 38, 0, 15, 10, 0, 38, 38, 15, 0, 5, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38};\n  int hval = len;\n  switch (hval)\n  {\n    default:\n    {\n      hval += asso_values[((unsigned char) str[1]) + 1];\n    }\n\n    case 1:\n    {\n      hval += asso_values[(unsigned char) str[0]];\n      break;\n    }\n\n  }\n\n  return hval;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char *",
                        "definition": [
                            "const char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "asso_values",
                        "type": "const unsigned char []",
                        "definition": [
                            "static const unsigned char asso_values[] = {38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 8, 30, 25, 20, 15, 10, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 0, 38, 0, 38, 5, 5, 5, 15, 0, 38, 38, 0, 15, 10, 0, 38, 38, 15, 0, 5, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 0, 38, 0, 38, 5, 5, 5, 15, 0, 38, 38, 0, 15, 10, 0, 38, 38, 15, 0, 5, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hval",
                        "type": "int",
                        "definition": [
                            "int hval = len"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "find_block_tag",
            "header": "",
            "params": [
                "const char *str",
                "unsigned int len"
            ],
            "definition": "const char *find_block_tag(const char *str, unsigned int len)\n{\n  enum \n  {\n    TOTAL_KEYWORDS = 24,\n    MIN_WORD_LENGTH = 1,\n    MAX_WORD_LENGTH = 10,\n    MIN_HASH_VALUE = 1,\n    MAX_HASH_VALUE = 37\n  };\n  static const char * const wordlist[] = {\"\", \"p\", \"dl\", \"div\", \"math\", \"table\", \"\", \"ul\", \"del\", \"form\", \"blockquote\", \"figure\", \"ol\", \"fieldset\", \"\", \"h1\", \"\", \"h6\", \"pre\", \"\", \"\", \"script\", \"h5\", \"noscript\", \"\", \"style\", \"iframe\", \"h4\", \"ins\", \"\", \"\", \"\", \"h3\", \"\", \"\", \"\", \"\", \"h2\", \"span\"};\n  if ((len <= MAX_WORD_LENGTH) && (len >= MIN_WORD_LENGTH))\n  {\n    int key = hash_block_tag(str, len);\n    if ((key <= MAX_HASH_VALUE) && (key >= 0))\n    {\n      const char *s = wordlist[key];\n      if (((((((unsigned char) (*str)) ^ ((unsigned char) (*s))) & (~32)) == 0) && (!strncasecmp(str, s, len))) && (s[len] == '\\0'))\n      {\n        return s;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "calle": [
                "hash_block_tag",
                "strncasecmp"
            ],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Enum'>",
                        "definition": "enum \n{\n  TOTAL_KEYWORDS = 24,\n  MIN_WORD_LENGTH = 1,\n  MAX_WORD_LENGTH = 10,\n  MIN_HASH_VALUE = 1,\n  MAX_HASH_VALUE = 37\n}",
                        "name": null,
                        "names": []
                    }
                ],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char *",
                        "definition": [
                            "const char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wordlist",
                        "type": "const char * const []",
                        "definition": [
                            "static const char * const wordlist[] = {\"\", \"p\", \"dl\", \"div\", \"math\", \"table\", \"\", \"ul\", \"del\", \"form\", \"blockquote\", \"figure\", \"ol\", \"fieldset\", \"\", \"h1\", \"\", \"h6\", \"pre\", \"\", \"\", \"script\", \"h5\", \"noscript\", \"\", \"style\", \"iframe\", \"h4\", \"ins\", \"\", \"\", \"\", \"h3\", \"\", \"\", \"\", \"\", \"h2\", \"span\"}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "int",
                        "definition": [
                            "int key = hash_block_tag(str, len)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "const char *",
                        "definition": [
                            "const char *s = wordlist[key]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "is_valid_numeric_entity",
            "header": "",
            "params": [
                "uint32_t entity_val"
            ],
            "definition": "inline int is_valid_numeric_entity(uint32_t entity_val)\n{\n  return (((((entity_val > 8) && ((entity_val != 11) && (entity_val != 12))) && ((entity_val < 14) || (entity_val > 31))) && ((entity_val < 55296) || (entity_val > 57343))) && ((entity_val != 65534) && (entity_val != 65535))) && (entity_val <= MAX_NUM_ENTITY_VAL);\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "entity_val",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t entity_val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "MAX_NUM_ENTITY_VAL",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "hash_html_entity",
            "header": "",
            "params": [
                "register const char *str",
                "register size_t len"
            ],
            "definition": "static unsigned int hash_html_entity(register const char *str, register size_t len)\n{\n  static const unsigned short asso_values[] = {771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 0, 95, 90, 0, 771, 771, 771, 771, 771, 771, 0, 771, 771, 771, 771, 771, 115, 94, 55, 0, 150, 25, 0, 30, 195, 771, 30, 30, 5, 35, 45, 45, 771, 10, 0, 50, 125, 771, 771, 5, 85, 75, 771, 771, 771, 771, 771, 771, 40, 65, 20, 25, 60, 240, 240, 223, 10, 102, 20, 35, 135, 0, 5, 10, 183, 20, 5, 0, 50, 75, 10, 75, 175, 85, 15, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771};\n  register unsigned int hval = len;\n  switch (hval)\n  {\n    default:\n    {\n      hval += asso_values[(unsigned char) str[6]];\n    }\n\n    case 6:\n    {\n      hval += asso_values[(unsigned char) str[5]];\n    }\n\n    case 5:\n    {\n      hval += asso_values[(unsigned char) str[4]];\n    }\n\n    case 4:\n    {\n      hval += asso_values[(unsigned char) str[3]];\n    }\n\n    case 3:\n    {\n      hval += asso_values[((unsigned char) str[2]) + 1];\n    }\n\n    case 2:\n    {\n      hval += asso_values[(unsigned char) str[1]];\n      break;\n    }\n\n  }\n\n  return hval;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char *",
                        "definition": [
                            "register const char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "register size_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "asso_values",
                        "type": "const unsigned short []",
                        "definition": [
                            "static const unsigned short asso_values[] = {771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 0, 95, 90, 0, 771, 771, 771, 771, 771, 771, 0, 771, 771, 771, 771, 771, 115, 94, 55, 0, 150, 25, 0, 30, 195, 771, 30, 30, 5, 35, 45, 45, 771, 10, 0, 50, 125, 771, 771, 5, 85, 75, 771, 771, 771, 771, 771, 771, 40, 65, 20, 25, 60, 240, 240, 223, 10, 102, 20, 35, 135, 0, 5, 10, 183, 20, 5, 0, 50, 75, 10, 75, 175, 85, 15, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771, 771}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hval",
                        "type": "unsigned int",
                        "definition": [
                            "register unsigned int hval = len"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "is_allowed_named_entity",
            "header": "",
            "params": [
                "register const char *str",
                "register size_t len"
            ],
            "definition": "const char *is_allowed_named_entity(register const char *str, register size_t len)\n{\n  enum \n  {\n    TOTAL_KEYWORDS = 253,\n    MIN_WORD_LENGTH = 4,\n    MAX_WORD_LENGTH = 10,\n    MIN_HASH_VALUE = 14,\n    MAX_HASH_VALUE = 770\n  };\n  static const char * const wordlist[] = {\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"&or;\", \"&not;\", \"\", \"\", \"\", \"\", \"&int;\", \"\", \"\", \"\", \"\", \"&psi;\", \"&isin;\", \"&notin;\", \"\", \"\", \"&Rho;\", \"\", \"\", \"\", \"\", \"&phi;\", \"&prop;\", \"\", \"\", \"\", \"&rho;\", \"&nbsp;\", \"&thorn;\", \"&thinsp;\", \"\", \"&chi;\", \"\", \"\", \"\", \"\", \"\", \"&prod;\", \"\", \"\", \"\", \"&amp;\", \"\", \"\", \"\", \"\", \"&Psi;\", \"\", \"\", \"\", \"\", \"\", \"&iota;\", \"\", \"\", \"&omicron;\", \"&Phi;\", \"\", \"\", \"\", \"\", \"&and;\", \"&sdot;\", \"\", \"\", \"&nu;\", \"&Chi;\", \"&emsp;\", \"\", \"\", \"&Mu;\", \"\", \"&ensp;\", \"&ocirc;\", \"\", \"&lt;\", \"&uml;\", \"\", \"&icirc;\", \"\", \"\", \"&sup;\", \"&sup1;\", \"\", \"&Scaron;\", \"\", \"&cap;\", \"&part;\", \"&pound;\", \"&scaron;\", \"\", \"\", \"&ni;\", \"\", \"&lowast;\", \"&Omicron;\", \"&cup;\", \"&Xi;\", \"&crarr;\", \"\", \"&Nu;\", \"\", \"&pi;\", \"&theta;\", \"\", \"\", \"&tau;\", \"&nsub;\", \"&acirc;\", \"\", \"\", \"&thetasym;\", \"\", \"&Ocirc;\", \"\", \"\", \"\", \"&rarr;\", \"&ucirc;\", \"\", \"\", \"&loz;\", \"&darr;\", \"&trade;\", \"\", \"\", \"\", \"&para;\", \"&ecirc;\", \"\", \"\", \"\", \"&larr;\", \"&radic;\", \"\", \"\", \"&sub;\", \"&Pi;\", \"&kappa;\", \"&iquest;\", \"\", \"&eta;\", \"&supe;\", \"&rceil;\", \"&there4;\", \"\", \"&rArr;\", \"&uarr;\", \"&Kappa;\", \"\", \"\", \"&dArr;\", \"&euro;\", \"&Theta;\", \"&circ;\", \"\", \"&Tau;\", \"\", \"&lceil;\", \"\", \"\", \"&lArr;\", \"&ordm;\", \"\", \"\", \"\", \"&lrm;\", \"&xi;\", \"&acute;\", \"&ccedil;\", \"\", \"\", \"&sup3;\", \"\", \"&ntilde;\", \"\", \"&uArr;\", \"&sup2;\", \"&piv;\", \"&otilde;\", \"\", \"&shy;\", \"\", \"&Acirc;\", \"\", \"\", \"\", \"\", \"\", \"&curren;\", \"\", \"\", \"\", \"&Ucirc;\", \"&oacute;\", \"\", \"\", \"&sube;\", \"&nabla;\", \"&iacute;\", \"&mu;\", \"\", \"&bull;\", \"&oline;\", \"&Ccedil;\", \"\", \"&sum;\", \"&copy;\", \"&equiv;\", \"&Ntilde;\", \"\", \"\", \"\", \"&prime;\", \"&atilde;\", \"&tilde;\", \"\", \"\", \"&Ecirc;\", \"&Otilde;\", \"\", \"\", \"\", \"\", \"\", \"&apos;\", \"\", \"\", \"\", \"&aacute;\", \"&ne;\", \"&Eta;\", \"&macr;\", \"&sim;\", \"&Oacute;\", \"\", \"\", \"&Iota;\", \"&empty;\", \"&uacute;\", \"\", \"\", \"&ouml;\", \"&exist;\", \"\", \"\", \"\", \"&iuml;\", \"&Prime;\", \"&eacute;\", \"\", \"&rsquo;\", \"&cent;\", \"&zwj;\", \"&zwnj;\", \"&quot;\", \"&sbquo;\", \"&sect;\", \"&infin;\", \"&otimes;\", \"\", \"\", \"&cong;\", \"&Icirc;\", \"&brvbar;\", \"&le;\", \"&lsquo;\", \"&ordf;\", \"&clubs;\", \"\", \"\", \"&oplus;\", \"&perp;\", \"\", \"&Yacute;\", \"&micro;\", \"&ang;\", \"&auml;\", \"\", \"\", \"&gt;\", \"&rlm;\", \"&Ouml;\", \"&upsilon;\", \"\", \"&minus;\", \"&middot;\", \"&uuml;\", \"&aring;\", \"&Atilde;\", \"\", \"&divide;\", \"&rsaquo;\", \"&epsilon;\", \"\", \"&times;\", \"&ETH;\", \"&euml;\", \"&szlig;\", \"&frac14;\", \"&diams;\", \"\", \"&oslash;\", \"\", \"&Aacute;\", \"\", \"\", \"&lsaquo;\", \"&Delta;\", \"\", \"\", \"&rdquo;\", \"&spades;\", \"\", \"&Uacute;\", \"\", \"&raquo;\", \"&rang;\", \"&frasl;\", \"&rfloor;\", \"&harr;\", \"&ndash;\", \"&Yuml;\", \"&cedil;\", \"&eth;\", \"\", \"&ldquo;\", \"&real;\", \"&THORN;\", \"&plusmn;\", \"\", \"&laquo;\", \"&lang;\", \"&delta;\", \"&lfloor;\", \"\", \"\", \"&beta;\", \"&omega;\", \"&Eacute;\", \"\", \"\", \"&Oslash;\", \"&image;\", \"&weierp;\", \"\", \"\", \"&Zeta;\", \"&OElig;\", \"&hArr;\", \"\", \"\", \"&Auml;\", \"&asymp;\", \"&Lambda;\", \"\", \"&bdquo;\", \"&zeta;\", \"&Upsilon;\", \"&lambda;\", \"\", \"\", \"&Uuml;\", \"&Aring;\", \"&yacute;\", \"\", \"&Beta;\", \"\", \"&Gamma;\", \"\", \"\", \"\", \"\", \"&iexcl;\", \"&forall;\", \"\", \"\", \"\", \"&Omega;\", \"\", \"\", \"\", \"\", \"&Epsilon;\", \"&Iacute;\", \"\", \"\", \"&Euml;\", \"\", \"&frac34;\", \"\", \"\", \"\", \"\", \"&frac12;\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"&yen;\", \"\", \"\", \"\", \"\", \"\", \"&yuml;\", \"\", \"\", \"\", \"\", \"&ograve;\", \"&AElig;\", \"\", \"\", \"\", \"&igrave;\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"&Iuml;\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"&alpha;\", \"\", \"\", \"&permil;\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"&agrave;\", \"\", \"\", \"\", \"&mdash;\", \"&Ograve;\", \"\", \"\", \"\", \"\", \"&ugrave;\", \"\", \"&upsih;\", \"\", \"\", \"\", \"\", \"\", \"&ge;\", \"\", \"&egrave;\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"&fnof;\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"&reg;\", \"\", \"\", \"\", \"\", \"&deg;\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"&Sigma;\", \"\", \"\", \"\", \"\", \"&sigma;\", \"&Alpha;\", \"\", \"\", \"\", \"\", \"\", \"&hearts;\", \"&oelig;\", \"\", \"\", \"\", \"&Agrave;\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"&Ugrave;\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"&hellip;\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"&aelig;\", \"\", \"\", \"\", \"&Egrave;\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"&Igrave;\", \"&gamma;\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"&Dagger;\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"&dagger;\", \"\", \"\", \"\", \"\", \"\", \"&alefsymsigmaf;\"};\n  if ((len <= MAX_WORD_LENGTH) && (len >= MIN_WORD_LENGTH))\n  {\n    register unsigned int key = hash_html_entity(str, len);\n    if (key <= MAX_HASH_VALUE)\n    {\n      register const char *s = wordlist[key];\n      if ((((*str) == (*s)) && (!strncmp(str + 1, s + 1, len - 1))) && (s[len] == '\\0'))\n      {\n        return s;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "calle": [
                "hash_html_entity",
                "strncmp"
            ],
            "inner": {
                "special_type": [
                    {
                        "path": null,
                        "type": "<class 'pycparser.c_ast.Enum'>",
                        "definition": "enum \n{\n  TOTAL_KEYWORDS = 253,\n  MIN_WORD_LENGTH = 4,\n  MAX_WORD_LENGTH = 10,\n  MIN_HASH_VALUE = 14,\n  MAX_HASH_VALUE = 770\n}",
                        "name": null,
                        "names": []
                    }
                ],
                "global_variable": [
                    {
                        "path": null,
                        "name": "str",
                        "type": "const char *",
                        "definition": [
                            "register const char *str"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "register size_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "wordlist",
                        "type": "const char * const []",
                        "definition": [
                            "static const char * const wordlist[] = {\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"&or;\", \"&not;\", \"\", \"\", \"\", \"\", \"&int;\", \"\", \"\", \"\", \"\", \"&psi;\", \"&isin;\", \"&notin;\", \"\", \"\", \"&Rho;\", \"\", \"\", \"\", \"\", \"&phi;\", \"&prop;\", \"\", \"\", \"\", \"&rho;\", \"&nbsp;\", \"&thorn;\", \"&thinsp;\", \"\", \"&chi;\", \"\", \"\", \"\", \"\", \"\", \"&prod;\", \"\", \"\", \"\", \"&amp;\", \"\", \"\", \"\", \"\", \"&Psi;\", \"\", \"\", \"\", \"\", \"\", \"&iota;\", \"\", \"\", \"&omicron;\", \"&Phi;\", \"\", \"\", \"\", \"\", \"&and;\", \"&sdot;\", \"\", \"\", \"&nu;\", \"&Chi;\", \"&emsp;\", \"\", \"\", \"&Mu;\", \"\", \"&ensp;\", \"&ocirc;\", \"\", \"&lt;\", \"&uml;\", \"\", \"&icirc;\", \"\", \"\", \"&sup;\", \"&sup1;\", \"\", \"&Scaron;\", \"\", \"&cap;\", \"&part;\", \"&pound;\", \"&scaron;\", \"\", \"\", \"&ni;\", \"\", \"&lowast;\", \"&Omicron;\", \"&cup;\", \"&Xi;\", \"&crarr;\", \"\", \"&Nu;\", \"\", \"&pi;\", \"&theta;\", \"\", \"\", \"&tau;\", \"&nsub;\", \"&acirc;\", \"\", \"\", \"&thetasym;\", \"\", \"&Ocirc;\", \"\", \"\", \"\", \"&rarr;\", \"&ucirc;\", \"\", \"\", \"&loz;\", \"&darr;\", \"&trade;\", \"\", \"\", \"\", \"&para;\", \"&ecirc;\", \"\", \"\", \"\", \"&larr;\", \"&radic;\", \"\", \"\", \"&sub;\", \"&Pi;\", \"&kappa;\", \"&iquest;\", \"\", \"&eta;\", \"&supe;\", \"&rceil;\", \"&there4;\", \"\", \"&rArr;\", \"&uarr;\", \"&Kappa;\", \"\", \"\", \"&dArr;\", \"&euro;\", \"&Theta;\", \"&circ;\", \"\", \"&Tau;\", \"\", \"&lceil;\", \"\", \"\", \"&lArr;\", \"&ordm;\", \"\", \"\", \"\", \"&lrm;\", \"&xi;\", \"&acute;\", \"&ccedil;\", \"\", \"\", \"&sup3;\", \"\", \"&ntilde;\", \"\", \"&uArr;\", \"&sup2;\", \"&piv;\", \"&otilde;\", \"\", \"&shy;\", \"\", \"&Acirc;\", \"\", \"\", \"\", \"\", \"\", \"&curren;\", \"\", \"\", \"\", \"&Ucirc;\", \"&oacute;\", \"\", \"\", \"&sube;\", \"&nabla;\", \"&iacute;\", \"&mu;\", \"\", \"&bull;\", \"&oline;\", \"&Ccedil;\", \"\", \"&sum;\", \"&copy;\", \"&equiv;\", \"&Ntilde;\", \"\", \"\", \"\", \"&prime;\", \"&atilde;\", \"&tilde;\", \"\", \"\", \"&Ecirc;\", \"&Otilde;\", \"\", \"\", \"\", \"\", \"\", \"&apos;\", \"\", \"\", \"\", \"&aacute;\", \"&ne;\", \"&Eta;\", \"&macr;\", \"&sim;\", \"&Oacute;\", \"\", \"\", \"&Iota;\", \"&empty;\", \"&uacute;\", \"\", \"\", \"&ouml;\", \"&exist;\", \"\", \"\", \"\", \"&iuml;\", \"&Prime;\", \"&eacute;\", \"\", \"&rsquo;\", \"&cent;\", \"&zwj;\", \"&zwnj;\", \"&quot;\", \"&sbquo;\", \"&sect;\", \"&infin;\", \"&otimes;\", \"\", \"\", \"&cong;\", \"&Icirc;\", \"&brvbar;\", \"&le;\", \"&lsquo;\", \"&ordf;\", \"&clubs;\", \"\", \"\", \"&oplus;\", \"&perp;\", \"\", \"&Yacute;\", \"&micro;\", \"&ang;\", \"&auml;\", \"\", \"\", \"&gt;\", \"&rlm;\", \"&Ouml;\", \"&upsilon;\", \"\", \"&minus;\", \"&middot;\", \"&uuml;\", \"&aring;\", \"&Atilde;\", \"\", \"&divide;\", \"&rsaquo;\", \"&epsilon;\", \"\", \"&times;\", \"&ETH;\", \"&euml;\", \"&szlig;\", \"&frac14;\", \"&diams;\", \"\", \"&oslash;\", \"\", \"&Aacute;\", \"\", \"\", \"&lsaquo;\", \"&Delta;\", \"\", \"\", \"&rdquo;\", \"&spades;\", \"\", \"&Uacute;\", \"\", \"&raquo;\", \"&rang;\", \"&frasl;\", \"&rfloor;\", \"&harr;\", \"&ndash;\", \"&Yuml;\", \"&cedil;\", \"&eth;\", \"\", \"&ldquo;\", \"&real;\", \"&THORN;\", \"&plusmn;\", \"\", \"&laquo;\", \"&lang;\", \"&delta;\", \"&lfloor;\", \"\", \"\", \"&beta;\", \"&omega;\", \"&Eacute;\", \"\", \"\", \"&Oslash;\", \"&image;\", \"&weierp;\", \"\", \"\", \"&Zeta;\", \"&OElig;\", \"&hArr;\", \"\", \"\", \"&Auml;\", \"&asymp;\", \"&Lambda;\", \"\", \"&bdquo;\", \"&zeta;\", \"&Upsilon;\", \"&lambda;\", \"\", \"\", \"&Uuml;\", \"&Aring;\", \"&yacute;\", \"\", \"&Beta;\", \"\", \"&Gamma;\", \"\", \"\", \"\", \"\", \"&iexcl;\", \"&forall;\", \"\", \"\", \"\", \"&Omega;\", \"\", \"\", \"\", \"\", \"&Epsilon;\", \"&Iacute;\", \"\", \"\", \"&Euml;\", \"\", \"&frac34;\", \"\", \"\", \"\", \"\", \"&frac12;\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"&yen;\", \"\", \"\", \"\", \"\", \"\", \"&yuml;\", \"\", \"\", \"\", \"\", \"&ograve;\", \"&AElig;\", \"\", \"\", \"\", \"&igrave;\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"&Iuml;\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"&alpha;\", \"\", \"\", \"&permil;\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"&agrave;\", \"\", \"\", \"\", \"&mdash;\", \"&Ograve;\", \"\", \"\", \"\", \"\", \"&ugrave;\", \"\", \"&upsih;\", \"\", \"\", \"\", \"\", \"\", \"&ge;\", \"\", \"&egrave;\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"&fnof;\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"&reg;\", \"\", \"\", \"\", \"\", \"&deg;\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"&Sigma;\", \"\", \"\", \"\", \"\", \"&sigma;\", \"&Alpha;\", \"\", \"\", \"\", \"\", \"\", \"&hearts;\", \"&oelig;\", \"\", \"\", \"\", \"&Agrave;\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"&Ugrave;\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"&hellip;\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"&aelig;\", \"\", \"\", \"\", \"&Egrave;\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"&Igrave;\", \"&gamma;\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"&Dagger;\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"&dagger;\", \"\", \"\", \"\", \"\", \"\", \"&alefsymsigmaf;\"}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "key",
                        "type": "unsigned int",
                        "definition": [
                            "register unsigned int key = hash_html_entity(str, len)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "s",
                        "type": "const char *",
                        "definition": [
                            "register const char *s = wordlist[key]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "char_emphasis",
            "header": "static size_t char_emphasis(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t max_rewind, size_t max_lookbehind, size_t size)",
            "params": [
                "struct buf *ob",
                "struct sd_markdown *rndr",
                "uint8_t *data",
                "size_t max_rewind",
                "size_t max_lookbehind",
                "size_t size"
            ],
            "definition": "static size_t char_emphasis(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t max_rewind, size_t max_lookbehind, size_t size)\n{\n  uint8_t c = data[0];\n  size_t ret;\n  if (((size > 3) && (c == '>')) && (data[1] == '!'))\n  {\n    if (_isspace(data[2]) || ((ret = parse_spoilerspan(ob, rndr, data + 2, size - 2)) == 0))\n    {\n      return 0;\n    }\n    return ret + 2;\n  }\n  if ((size > 2) && (data[1] != c))\n  {\n    if ((((c == '~') || (c == '>')) || _isspace(data[1])) || ((ret = parse_emph1(ob, rndr, data + 1, size - 1, c)) == 0))\n    {\n      return 0;\n    }\n    return ret + 1;\n  }\n  if (((size > 3) && (data[1] == c)) && (data[2] != c))\n  {\n    if (_isspace(data[2]) || ((ret = parse_emph2(ob, rndr, data + 2, size - 2, c)) == 0))\n    {\n      return 0;\n    }\n    return ret + 2;\n  }\n  if ((((size > 4) && (data[1] == c)) && (data[2] == c)) && (data[3] != c))\n  {\n    if ((((c == '~') || (c == '>')) || _isspace(data[3])) || ((ret = parse_emph3(ob, rndr, data + 3, size - 3, c)) == 0))\n    {\n      return 0;\n    }\n    return ret + 3;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "_isspace",
                "parse_emph1",
                "parse_emph2",
                "parse_emph3",
                "parse_spoilerspan"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_rewind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_rewind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_lookbehind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_lookbehind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t c = data[0]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "size_t",
                        "definition": [
                            "size_t ret"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "char_linebreak",
            "header": "static size_t char_linebreak(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t max_rewind, size_t max_lookbehind, size_t size)",
            "params": [
                "struct buf *ob",
                "struct sd_markdown *rndr",
                "uint8_t *data",
                "size_t max_rewind",
                "size_t max_lookbehind",
                "size_t size"
            ],
            "definition": "static size_t char_linebreak(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t max_rewind, size_t max_lookbehind, size_t size)\n{\n  if (((max_rewind < 2) || (data[-1] != ' ')) || (data[-2] != ' '))\n  {\n    return 0;\n  }\n  while (ob->size && (ob->data[ob->size - 1] == ' '))\n    ob->size--;\n\n  return (rndr->cb.linebreak(ob, rndr->opaque)) ? (1) : (0);\n}\n\n",
            "calle": [
                "rndr->cb.linebreak"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_rewind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_rewind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_lookbehind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_lookbehind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "char_codespan",
            "header": "static size_t char_codespan(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t max_rewind, size_t max_lookbehind, size_t size)",
            "params": [
                "struct buf *ob",
                "struct sd_markdown *rndr",
                "uint8_t *data",
                "size_t max_rewind",
                "size_t max_lookbehind",
                "size_t size"
            ],
            "definition": "static size_t char_codespan(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t max_rewind, size_t max_lookbehind, size_t size)\n{\n  size_t end;\n  size_t nb = 0;\n  size_t i;\n  size_t f_begin;\n  size_t f_end;\n  while ((nb < size) && (data[nb] == '`'))\n    nb++;\n\n  nb += 1;\n  i = 0;\n  for (end = nb; (end < size) && (i < nb); end += 1)\n  {\n    if (data[end] == '`')\n    {\n      i += 1;\n    }\n    else\n      i = 0;\n  }\n\n  if ((i < nb) && (end >= size))\n  {\n    return 0;\n  }\n  f_begin = nb;\n  while ((f_begin < end) && (data[f_begin] == ' '))\n    f_begin++;\n\n  f_begin += 1;\n  f_end = end - nb;\n  while ((f_end > nb) && (data[f_end - 1] == ' '))\n    f_end--;\n\n  f_end -= 1;\n  if (f_begin < f_end)\n  {\n    struct buf work = {data + f_begin, f_end - f_begin, 0, 0};\n    if (!rndr->cb.codespan(ob, &work, rndr->opaque))\n      end = 0;\n  }\n  else\n  {\n    if (!rndr->cb.codespan(ob, 0, rndr->opaque))\n      end = 0;\n  }\n  return end;\n}\n\n",
            "calle": [
                "rndr->cb.codespan"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_rewind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_rewind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_lookbehind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_lookbehind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "size_t",
                        "definition": [
                            "size_t end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nb",
                        "type": "size_t",
                        "definition": [
                            "size_t nb = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f_begin",
                        "type": "size_t",
                        "definition": [
                            "size_t f_begin"
                        ]
                    },
                    {
                        "path": null,
                        "name": "f_end",
                        "type": "size_t",
                        "definition": [
                            "size_t f_end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "work",
                        "type": "struct buf",
                        "definition": [
                            "struct buf work = {data + f_begin, f_end - f_begin, 0, 0}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "char_escape",
            "header": "static size_t char_escape(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t max_rewind, size_t max_lookbehind, size_t size)",
            "params": [
                "struct buf *ob",
                "struct sd_markdown *rndr",
                "uint8_t *data",
                "size_t max_rewind",
                "size_t max_lookbehind",
                "size_t size"
            ],
            "definition": "static size_t char_escape(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t max_rewind, size_t max_lookbehind, size_t size)\n{\n  static const char *escape_chars = \"\\\\`*_{}[]()#+-.!:|&<>/^~\";\n  struct buf work = {0, 0, 0, 0};\n  if (size > 1)\n  {\n    if (strchr(escape_chars, data[1]) == 0)\n    {\n      return 0;\n    }\n    if (rndr->cb.normal_text)\n    {\n      work.data = data + 1;\n      work.size = 1;\n      rndr->cb.normal_text(ob, &work, rndr->opaque);\n    }\n    else\n      bufputc(ob, data[1]);\n  }\n  else\n    if (size == 1)\n  {\n    bufputc(ob, data[0]);\n  }\n  return 2;\n}\n\n",
            "calle": [
                "bufputc",
                "rndr->cb.normal_text",
                "strchr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_rewind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_rewind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_lookbehind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_lookbehind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "escape_chars",
                        "type": "const char *",
                        "definition": [
                            "static const char *escape_chars = \"\\\\`*_{}[]()#+-.!:|&<>/^~\""
                        ]
                    },
                    {
                        "path": null,
                        "name": "work",
                        "type": "struct buf",
                        "definition": [
                            "struct buf work = {0, 0, 0, 0}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "char_entity",
            "header": "static size_t char_entity(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t max_rewind, size_t max_lookbehind, size_t size)",
            "params": [
                "struct buf *ob",
                "struct sd_markdown *rndr",
                "uint8_t *data",
                "size_t max_rewind",
                "size_t max_lookbehind",
                "size_t size"
            ],
            "definition": "static size_t char_entity(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t max_rewind, size_t max_lookbehind, size_t size)\n{\n  size_t end = 1;\n  size_t content_start;\n  size_t content_end;\n  struct buf work = {0, 0, 0, 0};\n  int numeric = 0;\n  int hex = 0;\n  int entity_base;\n  uint32_t entity_val;\n  if ((end < size) && (data[end] == '#'))\n  {\n    numeric = 1;\n    end += 1;\n  }\n  if (((end < size) && numeric) && (tolower(data[end]) == 'x'))\n  {\n    hex = 1;\n    end += 1;\n  }\n  content_start = end;\n  while (end < size)\n  {\n    const char c = data[end];\n    if (hex)\n    {\n      if (!isxdigit(c))\n      {\n        break;\n      }\n    }\n    else\n      if (numeric)\n    {\n      if (!isdigit(c))\n      {\n        break;\n      }\n    }\n    else\n      if (!isalnum(c))\n    {\n      break;\n    }\n    end += 1;\n  }\n\n  content_end = end;\n  if (((end > content_start) && (end < size)) && (data[end] == ';'))\n  {\n    end += 1;\n  }\n  else\n    return 0;\n  if (numeric && ((content_end - content_start) > MAX_NUM_ENTITY_LEN))\n  {\n    return 0;\n  }\n  if (numeric)\n  {\n    if (hex)\n    {\n      entity_base = 16;\n    }\n    else\n      entity_base = 10;\n    entity_val = strtol(((char *) data) + content_start, 0, entity_base);\n    if (!is_valid_numeric_entity(entity_val))\n    {\n      return 0;\n    }\n  }\n  else\n  {\n    if (!is_allowed_named_entity((const char *) data, end))\n    {\n      return 0;\n    }\n  }\n  if (rndr->cb.entity)\n  {\n    work.data = data;\n    work.size = end;\n    rndr->cb.entity(ob, &work, rndr->opaque);\n  }\n  else\n  {\n    bufputc(ob, '&');\n    if (numeric)\n    {\n      bufputc(ob, '#');\n    }\n    if (hex)\n    {\n      bufputc(ob, 'x');\n    }\n    bufput(ob, data + content_start, end - content_start);\n  }\n  return end;\n}\n\n",
            "calle": [
                "bufput",
                "bufputc",
                "is_allowed_named_entity",
                "is_valid_numeric_entity",
                "isalnum",
                "isdigit",
                "isxdigit",
                "rndr->cb.entity",
                "strtol",
                "tolower"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_rewind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_rewind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_lookbehind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_lookbehind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "size_t",
                        "definition": [
                            "size_t end = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "content_start",
                        "type": "size_t",
                        "definition": [
                            "size_t content_start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "content_end",
                        "type": "size_t",
                        "definition": [
                            "size_t content_end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "work",
                        "type": "struct buf",
                        "definition": [
                            "struct buf work = {0, 0, 0, 0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "numeric",
                        "type": "int",
                        "definition": [
                            "int numeric = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hex",
                        "type": "int",
                        "definition": [
                            "int hex = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entity_base",
                        "type": "int",
                        "definition": [
                            "int entity_base"
                        ]
                    },
                    {
                        "path": null,
                        "name": "entity_val",
                        "type": "uint32_t",
                        "definition": [
                            "uint32_t entity_val"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "const char",
                        "definition": [
                            "const char c = data[end]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "MAX_NUM_ENTITY_LEN",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "char_langle_tag",
            "header": "static size_t char_langle_tag(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t max_rewind, size_t max_lookbehind, size_t size)",
            "params": [
                "struct buf *ob",
                "struct sd_markdown *rndr",
                "uint8_t *data",
                "size_t max_rewind",
                "size_t max_lookbehind",
                "size_t size"
            ],
            "definition": "static size_t char_langle_tag(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t max_rewind, size_t max_lookbehind, size_t size)\n{\n  enum mkd_autolink altype = MKDA_NOT_AUTOLINK;\n  size_t end = tag_length(data, size, &altype);\n  struct buf work = {data, end, 0, 0};\n  int ret = 0;\n  if (end > 2)\n  {\n    if (rndr->cb.autolink && (altype != MKDA_NOT_AUTOLINK))\n    {\n      struct buf *u_link = rndr_newbuf(rndr, 1);\n      work.data = data + 1;\n      work.size = end - 2;\n      unscape_text(u_link, &work);\n      ret = rndr->cb.autolink(ob, u_link, altype, rndr->opaque);\n      rndr_popbuf(rndr, 1);\n    }\n    else\n      if (rndr->cb.raw_html_tag)\n    {\n      ret = rndr->cb.raw_html_tag(ob, &work, rndr->opaque);\n    }\n  }\n  if (!ret)\n  {\n    return 0;\n  }\n  else\n    return end;\n}\n\n",
            "calle": [
                "rndr->cb.autolink",
                "rndr->cb.raw_html_tag",
                "rndr_newbuf",
                "rndr_popbuf",
                "tag_length",
                "unscape_text"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_rewind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_rewind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_lookbehind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_lookbehind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "altype",
                        "type": "enum mkd_autolink",
                        "definition": [
                            "enum mkd_autolink altype = MKDA_NOT_AUTOLINK"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "size_t",
                        "definition": [
                            "size_t end = tag_length(data, size, &altype)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "work",
                        "type": "struct buf",
                        "definition": [
                            "struct buf work = {data, end, 0, 0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *u_link = rndr_newbuf(rndr, 1)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "char_autolink_url",
            "header": "static size_t char_autolink_url(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t max_rewind, size_t max_lookbehind, size_t size)",
            "params": [
                "struct buf *ob",
                "struct sd_markdown *rndr",
                "uint8_t *data",
                "size_t max_rewind",
                "size_t max_lookbehind",
                "size_t size"
            ],
            "definition": "static size_t char_autolink_url(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t max_rewind, size_t max_lookbehind, size_t size)\n{\n  struct buf *link;\n  unsigned int link_idx = 0;\n  size_t link_len;\n  size_t rewind;\n  if ((!rndr->cb.autolink) || rndr->in_link_body)\n  {\n    return 0;\n  }\n  link_idx = rndr_newbuf(rndr, 1);\n  if ((link_len = sd_autolink__url(&rewind, link, data, max_rewind, size, 0)) > 0)\n  {\n    buftruncate(ob, ob->size - rewind);\n    rndr->cb.autolink(ob, link, MKDA_NORMAL, rndr->opaque);\n  }\n  rndr_popbuf(rndr, 1);\n  return link_len;\n}\n\n",
            "calle": [
                "buftruncate",
                "rndr->cb.autolink",
                "rndr_newbuf",
                "rndr_popbuf",
                "sd_autolink__url"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_rewind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_rewind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_lookbehind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_lookbehind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *link"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int link_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_len",
                        "type": "size_t",
                        "definition": [
                            "size_t link_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rewind",
                        "type": "size_t",
                        "definition": [
                            "size_t rewind"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "char_autolink_email",
            "header": "static size_t char_autolink_email(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t max_rewind, size_t max_lookbehind, size_t size)",
            "params": [
                "struct buf *ob",
                "struct sd_markdown *rndr",
                "uint8_t *data",
                "size_t max_rewind",
                "size_t max_lookbehind",
                "size_t size"
            ],
            "definition": "static size_t char_autolink_email(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t max_rewind, size_t max_lookbehind, size_t size)\n{\n  struct buf *link;\n  unsigned int link_idx = 0;\n  size_t link_len;\n  size_t rewind;\n  if ((!rndr->cb.autolink) || rndr->in_link_body)\n  {\n    return 0;\n  }\n  link_idx = rndr_newbuf(rndr, 1);\n  if ((link_len = sd_autolink__email(&rewind, link, data, max_rewind, size, 0)) > 0)\n  {\n    buftruncate(ob, ob->size - rewind);\n    rndr->cb.autolink(ob, link, MKDA_EMAIL, rndr->opaque);\n  }\n  rndr_popbuf(rndr, 1);\n  return link_len;\n}\n\n",
            "calle": [
                "buftruncate",
                "rndr->cb.autolink",
                "rndr_newbuf",
                "rndr_popbuf",
                "sd_autolink__email"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_rewind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_rewind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_lookbehind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_lookbehind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *link"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int link_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_len",
                        "type": "size_t",
                        "definition": [
                            "size_t link_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rewind",
                        "type": "size_t",
                        "definition": [
                            "size_t rewind"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "char_autolink_www",
            "header": "static size_t char_autolink_www(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t max_rewind, size_t max_lookbehind, size_t size)",
            "params": [
                "struct buf *ob",
                "struct sd_markdown *rndr",
                "uint8_t *data",
                "size_t max_rewind",
                "size_t max_lookbehind",
                "size_t size"
            ],
            "definition": "static size_t char_autolink_www(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t max_rewind, size_t max_lookbehind, size_t size)\n{\n  struct buf *link;\n  unsigned int link_idx = 0;\n  struct buf *link_url;\n  unsigned int link_url_idx = 0;\n  struct buf *link_text;\n  unsigned int link_text_idx = 0;\n  size_t link_len;\n  size_t rewind;\n  if ((!rndr->cb.link) || rndr->in_link_body)\n  {\n    return 0;\n  }\n  link_idx = rndr_newbuf(rndr, 1);\n  if ((link_len = sd_autolink__www(&rewind, link, data, max_rewind, size, 0)) > 0)\n  {\n    link_url_idx = rndr_newbuf(rndr, 1);\n    bufput(link_url, \"http://\", (sizeof(\"http://\")) - 1);\n    bufput(link_url, link->data, link->size);\n    buftruncate(ob, ob->size - rewind);\n    if (rndr->cb.normal_text)\n    {\n      link_text_idx = rndr_newbuf(rndr, 1);\n      rndr->cb.normal_text(link_text, link, rndr->opaque);\n      rndr->cb.link(ob, link_url, 0, link_text, rndr->opaque);\n      rndr_popbuf(rndr, 1);\n    }\n    else\n    {\n      rndr->cb.link(ob, link_url, 0, link, rndr->opaque);\n    }\n    rndr_popbuf(rndr, 1);\n  }\n  rndr_popbuf(rndr, 1);\n  return link_len;\n}\n\n",
            "calle": [
                "bufput",
                "buftruncate",
                "rndr->cb.link",
                "rndr->cb.normal_text",
                "rndr_newbuf",
                "rndr_popbuf",
                "sd_autolink__www"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_rewind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_rewind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_lookbehind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_lookbehind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *link"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int link_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *link_url"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_url_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int link_url_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *link_text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_text_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int link_text_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_len",
                        "type": "size_t",
                        "definition": [
                            "size_t link_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rewind",
                        "type": "size_t",
                        "definition": [
                            "size_t rewind"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "char_autolink_subreddit_or_username",
            "header": "static size_t char_autolink_subreddit_or_username(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t max_rewind, size_t max_lookbehind, size_t size)",
            "params": [
                "struct buf *ob",
                "struct sd_markdown *rndr",
                "uint8_t *data",
                "size_t max_rewind",
                "size_t max_lookbehind",
                "size_t size"
            ],
            "definition": "static size_t char_autolink_subreddit_or_username(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t max_rewind, size_t max_lookbehind, size_t size)\n{\n  struct buf *link;\n  unsigned int link_idx = 0;\n  struct buf *link_text;\n  unsigned int link_text_idx = 0;\n  struct buf *link_url;\n  unsigned int link_url_idx = 0;\n  size_t link_len;\n  size_t rewind;\n  int no_slash;\n  if ((!rndr->cb.autolink) || rndr->in_link_body)\n  {\n    return 0;\n  }\n  link_idx = rndr_newbuf(rndr, 1);\n  link_len = sd_autolink__subreddit(&rewind, link, data, max_rewind, max_lookbehind, size, &no_slash);\n  if (link_len == 0)\n  {\n    link_len = sd_autolink__username(&rewind, link, data, max_rewind, max_lookbehind, size, &no_slash);\n  }\n  if (link_len > 0)\n  {\n    link_url_idx = rndr_newbuf(rndr, 1);\n    if (no_slash)\n    {\n      bufputc(link_url, '/');\n    }\n    bufput(link_url, link->data, link->size);\n    buftruncate(ob, ob->size - rewind);\n    if (rndr->cb.normal_text)\n    {\n      link_text_idx = rndr_newbuf(rndr, 1);\n      rndr->cb.normal_text(link_text, link, rndr->opaque);\n      rndr->cb.link(ob, link_url, 0, link_text, rndr->opaque);\n      rndr_popbuf(rndr, 1);\n    }\n    else\n    {\n      rndr->cb.link(ob, link_url, 0, link, rndr->opaque);\n    }\n    rndr_popbuf(rndr, 1);\n  }\n  rndr_popbuf(rndr, 1);\n  return link_len;\n}\n\n",
            "calle": [
                "bufput",
                "bufputc",
                "buftruncate",
                "rndr->cb.link",
                "rndr->cb.normal_text",
                "rndr_newbuf",
                "rndr_popbuf",
                "sd_autolink__subreddit",
                "sd_autolink__username"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_rewind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_rewind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_lookbehind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_lookbehind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *link"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int link_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *link_text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_text_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int link_text_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *link_url"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_url_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int link_url_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_len",
                        "type": "size_t",
                        "definition": [
                            "size_t link_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "rewind",
                        "type": "size_t",
                        "definition": [
                            "size_t rewind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "no_slash",
                        "type": "int",
                        "definition": [
                            "int no_slash"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "char_link",
            "header": "static size_t char_link(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t max_rewind, size_t max_lookbehind, size_t size)",
            "params": [
                "struct buf *ob",
                "struct sd_markdown *rndr",
                "uint8_t *data",
                "size_t max_rewind",
                "size_t max_lookbehind",
                "size_t size"
            ],
            "definition": "static size_t char_link(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t max_rewind, size_t max_lookbehind, size_t size)\n{\n  int is_img = max_rewind && (data[-1] == '!');\n  int level;\n  size_t i = 1;\n  size_t txt_e;\n  size_t link_b = 0;\n  size_t link_e = 0;\n  size_t title_b = 0;\n  size_t title_e = 0;\n  struct buf *content = 0;\n  unsigned int content_idx = 0;\n  struct buf *link = 0;\n  unsigned int link_idx = 0;\n  struct buf *title = 0;\n  unsigned int title_idx = 0;\n  struct buf *u_link = 0;\n  unsigned int u_link_idx = 0;\n  size_t org_work_size = rndr->work_bufs[1].size;\n  int text_has_nl = 0;\n  int ret = 0;\n  int in_title = 0;\n  int qtype = 0;\n  if ((is_img && (!rndr->cb.image)) || ((!is_img) && (!rndr->cb.link)))\n  {\n    goto cleanup;\n  }\n  for (level = 1; i < size; i += 1)\n  {\n    if (data[i] == '\\n')\n    {\n      text_has_nl = 1;\n    }\n    else\n      if (data[i - 1] == '\\\\')\n    {\n      continue;\n    }\n    else\n      if (data[i] == '[')\n    {\n      level += 1;\n    }\n    else\n      if (data[i] == ']')\n    {\n      level -= 1;\n      if (level <= 0)\n      {\n        break;\n      }\n    }\n  }\n\n  if (i >= size)\n  {\n    goto cleanup;\n  }\n  txt_e = i;\n  i += 1;\n  while ((i < size) && _isspace(data[i]))\n    i++;\n\n  i += 1;\n  if ((i < size) && (data[i] == '('))\n  {\n    helper_char_link_3(&i, &link_b, &link_e, &title_b, &title_e, &link_idx, &title_idx, &in_title, &qtype, rndr, data, size, link, title);\n  }\n  else\n    if ((i < size) && (data[i] == '['))\n  {\n    helper_char_link_2(&size, &i, &link_b, &link_e, &link_idx, &title_idx, rndr, data, txt_e, text_has_nl);\n  }\n  else\n  {\n    helper_char_link_1(&i, &link_idx, &title_idx, rndr, data, txt_e, text_has_nl);\n  }\n  if (txt_e > 1)\n  {\n    content_idx = rndr_newbuf(rndr, 1);\n    if (is_img)\n    {\n      bufput(content, data + 1, txt_e - 1);\n    }\n    else\n    {\n      rndr->in_link_body = 1;\n      parse_inline(content, rndr, data + 1, txt_e - 1);\n      rndr->in_link_body = 0;\n    }\n  }\n  if (link)\n  {\n    u_link_idx = rndr_newbuf(rndr, 1);\n    unscape_text(u_link, link);\n  }\n  else\n  {\n    goto cleanup;\n  }\n  if (is_img)\n  {\n    if (ob->size && (ob->data[ob->size - 1] == '!'))\n    {\n      ob->size -= 1;\n    }\n    ret = rndr->cb.image(ob, u_link, title, content, rndr->opaque);\n  }\n  else\n  {\n    ret = rndr->cb.link(ob, u_link, title, content, rndr->opaque);\n  }\n  cleanup:\n  rndr->work_bufs[1].size = (int) org_work_size;\n\n  return (ret) ? (i) : (0);\n}\n\n",
            "calle": [
                "_isspace",
                "bufput",
                "helper_char_link_1",
                "helper_char_link_2",
                "helper_char_link_3",
                "parse_inline",
                "rndr->cb.image",
                "rndr->cb.link",
                "rndr_newbuf",
                "unscape_text"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_rewind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_rewind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_lookbehind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_lookbehind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "is_img",
                        "type": "int",
                        "definition": [
                            "int is_img = max_rewind && (data[-1] == '!')"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "int",
                        "definition": [
                            "int level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "txt_e",
                        "type": "size_t",
                        "definition": [
                            "size_t txt_e"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_b",
                        "type": "size_t",
                        "definition": [
                            "size_t link_b = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_e",
                        "type": "size_t",
                        "definition": [
                            "size_t link_e = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "title_b",
                        "type": "size_t",
                        "definition": [
                            "size_t title_b = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "title_e",
                        "type": "size_t",
                        "definition": [
                            "size_t title_e = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *content = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "content_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int content_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *link = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int link_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *title = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "title_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int title_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *u_link = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "u_link_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int u_link_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "org_work_size",
                        "type": "size_t",
                        "definition": [
                            "size_t org_work_size = rndr->work_bufs[1].size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "text_has_nl",
                        "type": "int",
                        "definition": [
                            "int text_has_nl = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ret",
                        "type": "int",
                        "definition": [
                            "int ret = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_title",
                        "type": "int",
                        "definition": [
                            "int in_title = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "qtype",
                        "type": "int",
                        "definition": [
                            "int qtype = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "char_superscript",
            "header": "static size_t char_superscript(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t max_rewind, size_t max_lookbehind, size_t size)",
            "params": [
                "struct buf *ob",
                "struct sd_markdown *rndr",
                "uint8_t *data",
                "size_t max_rewind",
                "size_t max_lookbehind",
                "size_t size"
            ],
            "definition": "static size_t char_superscript(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t max_rewind, size_t max_lookbehind, size_t size)\n{\n  size_t sup_start;\n  size_t sup_len;\n  struct buf *sup;\n  unsigned int sup_idx = 0;\n  if (!rndr->cb.superscript)\n  {\n    return 0;\n  }\n  if (size < 2)\n  {\n    return 0;\n  }\n  if (data[1] == '(')\n  {\n    sup_start = (sup_len = 2);\n    while (((sup_len < size) && (data[sup_len] != ')')) && (data[sup_len - 1] != '\\\\'))\n      sup_len++;\n\n    sup_len += 1;\n    if (sup_len == size)\n      return 0;\n  }\n  else\n  {\n    sup_start = (sup_len = 1);\n    while ((sup_len < size) && (!_isspace(data[sup_len])))\n      sup_len++;\n\n    sup_len += 1;\n  }\n  if ((sup_len - sup_start) == 0)\n  {\n    return (sup_start == 2) ? (3) : (0);\n  }\n  sup_idx = rndr_newbuf(rndr, 1);\n  parse_inline(sup, rndr, data + sup_start, sup_len - sup_start);\n  rndr->cb.superscript(ob, sup, rndr->opaque);\n  rndr_popbuf(rndr, 1);\n  return (sup_start == 2) ? (sup_len + 1) : (sup_len);\n}\n\n",
            "calle": [
                "_isspace",
                "parse_inline",
                "rndr->cb.superscript",
                "rndr_newbuf",
                "rndr_popbuf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_rewind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_rewind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "max_lookbehind",
                        "type": "size_t",
                        "definition": [
                            "size_t max_lookbehind"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sup_start",
                        "type": "size_t",
                        "definition": [
                            "size_t sup_start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sup_len",
                        "type": "size_t",
                        "definition": [
                            "size_t sup_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *sup"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sup_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int sup_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "backport_getrandom",
            "header": "",
            "params": [
                "void *buf",
                "size_t buflen",
                "unsigned int flags"
            ],
            "definition": "int backport_getrandom(void *buf, size_t buflen, unsigned int flags)\n{\n  return (int) syscall(SYS_getrandom, buf, buflen, flags);\n}\n\n",
            "calle": [
                "syscall"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "buf",
                        "type": "void *",
                        "definition": [
                            "void *buf"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buflen",
                        "type": "size_t",
                        "definition": [
                            "size_t buflen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int flags"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rndr_newbuf",
            "header": "",
            "params": [
                "struct sd_markdown *rndr",
                "int type"
            ],
            "definition": "inline static struct buf *rndr_newbuf(struct sd_markdown *rndr, int type)\n{\n  static const size_t buf_size[2] = {256, 64};\n  struct buf *work = 0;\n  unsigned int work_idx = 0;\n  struct stack *pool = &rndr->work_bufs[type];\n  if ((pool->size < pool->asize) && (pool->item[pool->size] != 0))\n  {\n    work_idx = pool->item[pool->size++];\n    work->size = 0;\n  }\n  else\n  {\n    work_idx = bufnew(buf_size[type]);\n    stack_push(pool, work);\n  }\n  return work;\n}\n\n",
            "calle": [
                "bufnew",
                "stack_push"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    },
                    {
                        "path": null,
                        "name": "buf_size",
                        "type": "const size_t [2]",
                        "definition": [
                            "static const size_t buf_size[2] = {256, 64}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *work = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "work_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int work_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct stack",
                        "type": "struct stack *",
                        "definition": [
                            "struct stack *pool = &rndr->work_bufs[type]"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "rndr_popbuf",
            "header": "",
            "params": [
                "struct sd_markdown *rndr",
                "int type"
            ],
            "definition": "inline static void rndr_popbuf(struct sd_markdown *rndr, int type)\n{\n  rndr->work_bufs[type].size -= 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "type",
                        "type": "int",
                        "definition": [
                            "int type"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "unscape_text",
            "header": "",
            "params": [
                "struct buf *ob",
                "struct buf *src"
            ],
            "definition": "static void unscape_text(struct buf *ob, struct buf *src)\n{\n  size_t i = 0;\n  size_t org;\n  while (i < src->size)\n  {\n    org = i;\n    while ((i < src->size) && (src->data[i] != '\\\\'))\n      i++;\n\n    i += 1;\n    if (i > org)\n    {\n      bufput(ob, src->data + org, i - org);\n    }\n    if ((i + 1) >= src->size)\n    {\n      break;\n    }\n    bufputc(ob, src->data[i + 1]);\n    i += 2;\n  }\n\n}\n\n",
            "calle": [
                "bufput",
                "bufputc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *src"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "org",
                        "type": "size_t",
                        "definition": [
                            "size_t org"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "hash_link_ref",
            "header": "",
            "params": [
                "const uint8_t *link_ref",
                "size_t length"
            ],
            "definition": "static unsigned int hash_link_ref(const uint8_t *link_ref, size_t length)\n{\n  return siphash_nocase(link_ref, length, sip_hash_key);\n}\n\n",
            "calle": [
                "siphash_nocase"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "link_ref",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *link_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sip_hash_key",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "add_link_ref",
            "header": "",
            "params": [
                "struct link_ref **references",
                "const uint8_t *name",
                "size_t name_size"
            ],
            "definition": "static struct link_ref *add_link_ref(struct link_ref **references, const uint8_t *name, size_t name_size)\n{\n  unsigned int hash;\n  struct link_ref *ref;\n  unsigned int ref_idx = 0;\n  hash = hash_link_ref(name, name_size);\n  ref_idx = references[hash % 8];\n  while ((&ref[ref_idx]) != 0)\n  {\n    if ((ref->id == hash) && (ref->label->size == name_size))\n    {\n      if (strncasecmp((char *) ref->label->data, (char *) name, name_size) == 0)\n      {\n        bufrelease(ref->label);\n        bufrelease(ref->link);\n        bufrelease(ref->title);\n        return ref;\n      }\n    }\n    ref_idx = ref_idx->next;\n  }\n\n  ref_idx = calloc(1, sizeof(struct link_ref));\n  if (!(&ref[ref_idx]))\n  {\n    return 0;\n  }\n  ref->id = hash;\n  ref->next = references[ref->id % 8];\n  references[ref->id % 8] = &ref[ref_idx];\n  return ref;\n}\n\n",
            "calle": [
                "bufrelease",
                "calloc",
                "hash_link_ref",
                "strncasecmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "references",
                        "type": "struct link_ref **",
                        "definition": [
                            "struct link_ref **references"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name_size",
                        "type": "size_t",
                        "definition": [
                            "size_t name_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hash",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int hash"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct link_ref",
                        "type": "struct link_ref *",
                        "definition": [
                            "struct link_ref *ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ref_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ref_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "find_link_ref",
            "header": "",
            "params": [
                "struct link_ref **references",
                "uint8_t *name",
                "size_t length"
            ],
            "definition": "static struct link_ref *find_link_ref(struct link_ref **references, uint8_t *name, size_t length)\n{\n  unsigned int hash = hash_link_ref(name, length);\n  struct link_ref *ref = 0;\n  unsigned int ref_idx = 0;\n  ref_idx = references[hash % 8];\n  while ((&ref[ref_idx]) != 0)\n  {\n    if ((ref->id == hash) && (ref->label->size == length))\n    {\n      if (strncasecmp((char *) ref->label->data, (char *) name, length) == 0)\n      {\n        return ref;\n      }\n    }\n    ref_idx = ref_idx->next;\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "hash_link_ref",
                "strncasecmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "references",
                        "type": "struct link_ref **",
                        "definition": [
                            "struct link_ref **references"
                        ]
                    },
                    {
                        "path": null,
                        "name": "name",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *name"
                        ]
                    },
                    {
                        "path": null,
                        "name": "length",
                        "type": "size_t",
                        "definition": [
                            "size_t length"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hash",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int hash = hash_link_ref(name, length)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct link_ref",
                        "type": "struct link_ref *",
                        "definition": [
                            "struct link_ref *ref = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ref_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ref_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "free_link_refs",
            "header": "",
            "params": [
                "struct link_ref **references"
            ],
            "definition": "static void free_link_refs(struct link_ref **references)\n{\n  size_t i;\n  for (i = 0; i < 8; i += 1)\n  {\n    struct link_ref *r = references[i];\n    unsigned int r_idx = 0;\n    struct link_ref *next;\n    unsigned int next_idx = 0;\n    while (r)\n    {\n      next_idx = r->next_idx;\n      bufrelease(r->label);\n      bufrelease(r->link);\n      bufrelease(r->title);\n      free(r);\n      r_idx = &next[next_idx];\n    }\n\n  }\n\n}\n\n",
            "calle": [
                "bufrelease",
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "references",
                        "type": "struct link_ref **",
                        "definition": [
                            "struct link_ref **references"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct link_ref",
                        "type": "struct link_ref *",
                        "definition": [
                            "struct link_ref *r = references[i]"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int r_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct link_ref",
                        "type": "struct link_ref *",
                        "definition": [
                            "struct link_ref *next"
                        ]
                    },
                    {
                        "path": null,
                        "name": "next_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int next_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "_isspace",
            "header": "",
            "params": [
                "int c"
            ],
            "definition": "inline static int _isspace(int c)\n{\n  return (c == ' ') || (c == '\\n');\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "c",
                        "type": "int",
                        "definition": [
                            "int c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "is_mail_autolink",
            "header": "",
            "params": [
                "uint8_t *data",
                "size_t size"
            ],
            "definition": "static size_t is_mail_autolink(uint8_t *data, size_t size)\n{\n  size_t i = 0;\n  size_t nb = 0;\n  for (i = 0; i < size; i += 1)\n  {\n    if (isalnum(data[i]))\n    {\n      continue;\n    }\n    switch (data[i])\n    {\n      case '@':\n      {\n        nb += 1;\n      }\n\n      case '-':\n\n      case '.':\n\n      case '_':\n      {\n        break;\n      }\n\n      case '>':\n      {\n        return (nb == 1) ? (i + 1) : (0);\n      }\n\n      default:\n      {\n        return 0;\n      }\n\n    }\n\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "isalnum"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nb",
                        "type": "size_t",
                        "definition": [
                            "size_t nb = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "tag_length",
            "header": "",
            "params": [
                "uint8_t *data",
                "size_t size",
                "enum mkd_autolink *autolink"
            ],
            "definition": "static size_t tag_length(uint8_t *data, size_t size, enum mkd_autolink *autolink)\n{\n  size_t i;\n  size_t j;\n  if (size < 3)\n  {\n    return 0;\n  }\n  if (data[0] != '<')\n  {\n    return 0;\n  }\n  i = (data[1] == '/') ? (2) : (1);\n  if (!isalnum(data[i]))\n  {\n    return 0;\n  }\n  *autolink = MKDA_NOT_AUTOLINK;\n  while ((i < size) && (((isalnum(data[i]) || (data[i] == '.')) || (data[i] == '+')) || (data[i] == '-')))\n    i++;\n\n  i += 1;\n  if ((i > 1) && (data[i] == '@'))\n  {\n    if ((j = is_mail_autolink(data + i, size - i)) != 0)\n    {\n      *autolink = MKDA_EMAIL;\n      return i + j;\n    }\n  }\n  if ((i > 2) && (data[i] == ':'))\n  {\n    *autolink = MKDA_NORMAL;\n    i += 1;\n  }\n  if (i >= size)\n  {\n    *autolink = MKDA_NOT_AUTOLINK;\n  }\n  else\n    if (*autolink)\n  {\n    helper_tag_length_1(&i, &j, data, size, autolink);\n  }\n  while ((i < size) && (data[i] != '>'))\n    i++;\n\n  i += 1;\n  if (i >= size)\n    return 0;\n  return i + 1;\n}\n\n",
            "calle": [
                "helper_tag_length_1",
                "is_mail_autolink",
                "isalnum"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "autolink",
                        "type": "enum mkd_autolink *",
                        "definition": [
                            "enum mkd_autolink *autolink"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "parse_inline",
            "header": "",
            "params": [
                "struct buf *ob",
                "struct sd_markdown *rndr",
                "uint8_t *data",
                "size_t size"
            ],
            "definition": "static void parse_inline(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t size)\n{\n  size_t i = 0;\n  size_t end = 0;\n  size_t last_special = 0;\n  uint8_t action = 0;\n  struct buf work = {0, 0, 0, 0};\n  if ((rndr->work_bufs[1].size + rndr->work_bufs[0].size) > rndr->max_nesting)\n  {\n    return;\n  }\n  while (i < size)\n  {\n    while ((end < size) && ((action = rndr->active_char[data[end]]) == 0))\n    {\n      end += 1;\n    }\n\n    if (rndr->cb.normal_text)\n    {\n      work.data = data + i;\n      work.size = end - i;\n      rndr->cb.normal_text(ob, &work, rndr->opaque);\n    }\n    else\n      bufput(ob, data + i, end - i);\n    if (end >= size)\n    {\n      break;\n    }\n    i = end;\n    end = markdown_char_ptrs[(int) action](ob, rndr, data + i, i - last_special, i, size - i);\n    if (!end)\n    {\n      end = i + 1;\n    }\n    else\n    {\n      i += end;\n      last_special = (end = i);\n    }\n  }\n\n}\n\n",
            "calle": [
                "bufput",
                "markdown_char_ptrs[(int) action]",
                "rndr->cb.normal_text"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "size_t",
                        "definition": [
                            "size_t end = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last_special",
                        "type": "size_t",
                        "definition": [
                            "size_t last_special = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "action",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t action = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "work",
                        "type": "struct buf",
                        "definition": [
                            "struct buf work = {0, 0, 0, 0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "markdown_char_ptrs",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "find_emph_char",
            "header": "",
            "params": [
                "uint8_t *data",
                "size_t size",
                "uint8_t c"
            ],
            "definition": "static size_t find_emph_char(uint8_t *data, size_t size, uint8_t c)\n{\n  size_t i = 1;\n  while (i < size)\n  {\n    helper_find_emph_char_1(&i, data, size, c);\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "helper_find_emph_char_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 1"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "parse_emph1",
            "header": "",
            "params": [
                "struct buf *ob",
                "struct sd_markdown *rndr",
                "uint8_t *data",
                "size_t size",
                "uint8_t c"
            ],
            "definition": "static size_t parse_emph1(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t size, uint8_t c)\n{\n  size_t i = 0;\n  size_t len;\n  struct buf *work = 0;\n  unsigned int work_idx = 0;\n  int r;\n  if (!rndr->cb.emphasis)\n  {\n    return 0;\n  }\n  if (((size > 1) && (data[0] == c)) && (data[1] == c))\n  {\n    i = 1;\n  }\n  while (i < size)\n  {\n    len = find_emph_char(data + i, size - i, c);\n    if (!len)\n    {\n      return 0;\n    }\n    i += len;\n    if (i >= size)\n    {\n      return 0;\n    }\n    if ((data[i] == c) && (!_isspace(data[i - 1])))\n    {\n      if ((rndr->ext_flags & MKDEXT_NO_INTRA_EMPHASIS) && (c == '_'))\n      {\n        if (!((((i + 1) == size) || _isspace(data[i + 1])) || ispunct(data[i + 1])))\n        {\n          continue;\n        }\n      }\n      work_idx = rndr_newbuf(rndr, 1);\n      parse_inline(work, rndr, data, i);\n      r = rndr->cb.emphasis(ob, work, rndr->opaque);\n      rndr_popbuf(rndr, 1);\n      return (r) ? (i + 1) : (0);\n    }\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "_isspace",
                "find_emph_char",
                "ispunct",
                "parse_inline",
                "rndr->cb.emphasis",
                "rndr_newbuf",
                "rndr_popbuf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *work = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "work_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int work_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "int",
                        "definition": [
                            "int r"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "parse_emph2",
            "header": "",
            "params": [
                "struct buf *ob",
                "struct sd_markdown *rndr",
                "uint8_t *data",
                "size_t size",
                "uint8_t c"
            ],
            "definition": "static size_t parse_emph2(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t size, uint8_t c)\n{\n  int (*render_method)(struct buf *ob, const struct buf *text, void *opaque);\n  unsigned int render_method_idx = 0;\n  size_t i = 0;\n  size_t len;\n  struct buf *work = 0;\n  unsigned int work_idx = 0;\n  int r;\n  render_method_idx = (c == '~') ? (rndr->cb.strikethrough) : (rndr->cb.double_emphasis);\n  if (!(&render_method[render_method_idx]))\n  {\n    return 0;\n  }\n  while (i < size)\n  {\n    len = find_emph_char(data + i, size - i, c);\n    if (!len)\n    {\n      return 0;\n    }\n    i += len;\n    if ((((((i + 1) < size) && (data[i] == c)) && (data[i + 1] == c)) && i) && (!_isspace(data[i - 1])))\n    {\n      work_idx = rndr_newbuf(rndr, 1);\n      parse_inline(work, rndr, data, i);\n      r = render_method(ob, work, rndr->opaque);\n      rndr_popbuf(rndr, 1);\n      return (r) ? (i + 2) : (0);\n    }\n    i += 1;\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "_isspace",
                "find_emph_char",
                "parse_inline",
                "render_method",
                "rndr_newbuf",
                "rndr_popbuf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "render_method",
                        "type": "int (*)(struct buf *ob, const struct buf *text, void *opaque)",
                        "definition": [
                            "int (*render_method)(struct buf *ob, const struct buf *text, void *opaque)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "render_method_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int render_method_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *work = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "work_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int work_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "int",
                        "definition": [
                            "int r"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "parse_emph3",
            "header": "",
            "params": [
                "struct buf *ob",
                "struct sd_markdown *rndr",
                "uint8_t *data",
                "size_t size",
                "uint8_t c"
            ],
            "definition": "static size_t parse_emph3(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t size, uint8_t c)\n{\n  size_t i = 0;\n  size_t len;\n  int r;\n  while (i < size)\n  {\n    len = find_emph_char(data + i, size - i, c);\n    if (!len)\n    {\n      return 0;\n    }\n    i += len;\n    if ((data[i] != c) || _isspace(data[i - 1]))\n    {\n      continue;\n    }\n    if (((((i + 2) < size) && (data[i + 1] == c)) && (data[i + 2] == c)) && rndr->cb.triple_emphasis)\n    {\n      struct buf *work = rndr_newbuf(rndr, 1);\n      parse_inline(work, rndr, data, i);\n      r = rndr->cb.triple_emphasis(ob, work, rndr->opaque);\n      rndr_popbuf(rndr, 1);\n      return (r) ? (i + 3) : (0);\n    }\n    else\n      if (((i + 1) < size) && (data[i + 1] == c))\n    {\n      len = parse_emph1(ob, rndr, data - 2, size + 2, c);\n      if (!len)\n      {\n        return 0;\n      }\n      else\n        return len - 2;\n    }\n    else\n    {\n      len = parse_emph2(ob, rndr, data - 1, size + 1, c);\n      if (!len)\n      {\n        return 0;\n      }\n      else\n        return len - 1;\n    }\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "_isspace",
                "find_emph_char",
                "parse_emph1",
                "parse_emph2",
                "parse_inline",
                "rndr->cb.triple_emphasis",
                "rndr_newbuf",
                "rndr_popbuf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "int",
                        "definition": [
                            "int r"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *work = rndr_newbuf(rndr, 1)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "parse_spoilerspan",
            "header": "",
            "params": [
                "struct buf *ob",
                "struct sd_markdown *rndr",
                "uint8_t *data",
                "size_t size"
            ],
            "definition": "static size_t parse_spoilerspan(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t size)\n{\n  int (*render_method)(struct buf *ob, const struct buf *text, void *opaque);\n  unsigned int render_method_idx = 0;\n  size_t len;\n  size_t i = 0;\n  struct buf *work = 0;\n  unsigned int work_idx = 0;\n  int r;\n  render_method_idx = rndr->cb.spoilerspan;\n  if (!(&render_method[render_method_idx]))\n  {\n    return 0;\n  }\n  while (i < size)\n  {\n    len = find_emph_char(data + i, size - i, '<');\n    if (!len)\n    {\n      return 0;\n    }\n    i += len;\n    if (((i < size) && (data[i] == '<')) && (data[i - 1] == '!'))\n    {\n      work_idx = rndr_newbuf(rndr, 1);\n      parse_inline(work, rndr, data, i - 1);\n      r = render_method(ob, work, rndr->opaque);\n      rndr_popbuf(rndr, 1);\n      if (!r)\n      {\n        return 0;\n      }\n      return i + 1;\n    }\n    i += 1;\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "find_emph_char",
                "parse_inline",
                "render_method",
                "rndr_newbuf",
                "rndr_popbuf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "render_method",
                        "type": "int (*)(struct buf *ob, const struct buf *text, void *opaque)",
                        "definition": [
                            "int (*render_method)(struct buf *ob, const struct buf *text, void *opaque)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "render_method_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int render_method_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "len",
                        "type": "size_t",
                        "definition": [
                            "size_t len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *work = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "work_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int work_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "r",
                        "type": "int",
                        "definition": [
                            "int r"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "is_empty",
            "header": "",
            "params": [
                "uint8_t *data",
                "size_t size"
            ],
            "definition": "static size_t is_empty(uint8_t *data, size_t size)\n{\n  size_t i;\n  for (i = 0; (i < size) && (data[i] != '\\n'); i += 1)\n    if (data[i] != ' ')\n  {\n    return 0;\n  }\n\n  return i + 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "is_hrule",
            "header": "",
            "params": [
                "uint8_t *data",
                "size_t size"
            ],
            "definition": "static int is_hrule(uint8_t *data, size_t size)\n{\n  size_t i = 0;\n  size_t n = 0;\n  uint8_t c;\n  if (size < 3)\n  {\n    return 0;\n  }\n  if (data[0] == ' ')\n  {\n    i += 1;\n    if (data[1] == ' ')\n    {\n      i += 1;\n      if (data[2] == ' ')\n      {\n        i += 1;\n      }\n    }\n  }\n  if (((i + 2) >= size) || (((data[i] != '*') && (data[i] != '-')) && (data[i] != '_')))\n  {\n    return 0;\n  }\n  c = data[i];\n  while ((i < size) && (data[i] != '\\n'))\n  {\n    if (data[i] == c)\n    {\n      n += 1;\n    }\n    else\n      if (data[i] != ' ')\n    {\n      return 0;\n    }\n    i += 1;\n  }\n\n  return n >= 3;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "size_t",
                        "definition": [
                            "size_t n = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "prefix_codefence",
            "header": "",
            "params": [
                "uint8_t *data",
                "size_t size"
            ],
            "definition": "static size_t prefix_codefence(uint8_t *data, size_t size)\n{\n  size_t i = 0;\n  size_t n = 0;\n  uint8_t c;\n  if (size < 3)\n  {\n    return 0;\n  }\n  if (data[0] == ' ')\n  {\n    i += 1;\n    if (data[1] == ' ')\n    {\n      i += 1;\n      if (data[2] == ' ')\n      {\n        i += 1;\n      }\n    }\n  }\n  if (((i + 2) >= size) || (!((data[i] == '~') || (data[i] == '`'))))\n  {\n    return 0;\n  }\n  c = data[i];\n  while ((i < size) && (data[i] == c))\n  {\n    n += 1;\n    i += 1;\n  }\n\n  if (n < 3)\n  {\n    return 0;\n  }\n  return i;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "n",
                        "type": "size_t",
                        "definition": [
                            "size_t n = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t c"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "is_codefence",
            "header": "",
            "params": [
                "uint8_t *data",
                "size_t size",
                "struct buf *syntax"
            ],
            "definition": "static size_t is_codefence(uint8_t *data, size_t size, struct buf *syntax)\n{\n  size_t i = 0;\n  size_t syn_len = 0;\n  uint8_t *syn_start;\n  unsigned int syn_start_idx = 0;\n  i = prefix_codefence(data, size);\n  if (i == 0)\n  {\n    return 0;\n  }\n  while ((i < size) && (data[i] == ' '))\n    i++;\n\n  i += 1;\n  syn_start_idx = data + i;\n  if ((i < size) && (data[i] == '{'))\n  {\n    helper_is_codefence_1(&i, &syn_len, &syn_start_idx, data, size, syn_start);\n  }\n  else\n  {\n    while ((i < size) && (!_isspace(data[i])))\n    {\n      syn_len += 1;\n      i += 1;\n    }\n\n  }\n  if (syntax)\n  {\n    syntax->data = &syn_start[syn_start_idx];\n    syntax->size = syn_len;\n  }\n  while ((i < size) && (data[i] != '\\n'))\n  {\n    if (!_isspace(data[i]))\n    {\n      return 0;\n    }\n    i += 1;\n  }\n\n  return i + 1;\n}\n\n",
            "calle": [
                "_isspace",
                "helper_is_codefence_1",
                "prefix_codefence"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *syntax"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "syn_len",
                        "type": "size_t",
                        "definition": [
                            "size_t syn_len = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "syn_start",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *syn_start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "syn_start_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int syn_start_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "is_atxheader",
            "header": "",
            "params": [
                "struct sd_markdown *rndr",
                "uint8_t *data",
                "size_t size"
            ],
            "definition": "static int is_atxheader(struct sd_markdown *rndr, uint8_t *data, size_t size)\n{\n  if (data[0] != '#')\n  {\n    return 0;\n  }\n  if (rndr->ext_flags & MKDEXT_SPACE_HEADERS)\n  {\n    size_t level = 0;\n    while (((level < size) && (level < 6)) && (data[level] == '#'))\n      level++;\n\n    level += 1;\n    if ((level < size) && (data[level] != ' '))\n      return 0;\n  }\n  return 1;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "size_t",
                        "definition": [
                            "size_t level = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "is_headerline",
            "header": "",
            "params": [
                "uint8_t *data",
                "size_t size"
            ],
            "definition": "static int is_headerline(uint8_t *data, size_t size)\n{\n  size_t i = 0;\n  if (data[i] == '=')\n  {\n    for (i = 1; (i < size) && (data[i] == '='); i += 1)\n      ;\n\n    while ((i < size) && (data[i] == ' '))\n      i++;\n\n    i += 1;\n    return ((i >= size) || (data[i] == '\\n')) ? (1) : (0);\n  }\n  if (data[i] == '-')\n  {\n    for (i = 1; (i < size) && (data[i] == '-'); i += 1)\n      ;\n\n    while ((i < size) && (data[i] == ' '))\n      i++;\n\n    i += 1;\n    return ((i >= size) || (data[i] == '\\n')) ? (2) : (0);\n  }\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "is_next_headerline",
            "header": "",
            "params": [
                "uint8_t *data",
                "size_t size"
            ],
            "definition": "static int is_next_headerline(uint8_t *data, size_t size)\n{\n  size_t i = 0;\n  while ((i < size) && (data[i] != '\\n'))\n    i++;\n\n  i += 1;\n  if ((++i) >= size)\n  {\n    return 0;\n  }\n  return is_headerline(data + i, size - i);\n}\n\n",
            "calle": [
                "is_headerline"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "prefix_quote",
            "header": "",
            "params": [
                "uint8_t *data",
                "size_t size"
            ],
            "definition": "static size_t prefix_quote(uint8_t *data, size_t size)\n{\n  size_t i = 0;\n  if ((i < size) && (data[i] == ' '))\n  {\n    i += 1;\n  }\n  if ((i < size) && (data[i] == ' '))\n  {\n    i += 1;\n  }\n  if ((i < size) && (data[i] == ' '))\n  {\n    i += 1;\n  }\n  if (((i < size) && (data[i] == '>')) && (((i + 1) < size) && (data[i + 1] != '!')))\n  {\n    if (((i + 1) < size) && (data[i + 1] == ' '))\n    {\n      return i + 2;\n    }\n    return i + 1;\n  }\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "prefix_blockspoiler",
            "header": "",
            "params": [
                "uint8_t *data",
                "size_t size"
            ],
            "definition": "static size_t prefix_blockspoiler(uint8_t *data, size_t size)\n{\n  size_t i = 0;\n  if ((i < size) && (data[i] == ' '))\n  {\n    i += 1;\n  }\n  if ((i < size) && (data[i] == ' '))\n  {\n    i += 1;\n  }\n  if ((i < size) && (data[i] == ' '))\n  {\n    i += 1;\n  }\n  if ((((i + 1) < size) && (data[i] == '>')) && (data[i + 1] == '!'))\n  {\n    size_t spoilerspan = find_emph_char((data + i) + 1, (size - i) - 1, '<');\n    if ((((i + spoilerspan) < size) && (spoilerspan > 0)) && (data[i + spoilerspan] == '!'))\n    {\n      return 0;\n    }\n    if (((i + 2) < size) && (data[i + 2] == ' '))\n    {\n      return i + 3;\n    }\n    return i + 2;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "find_emph_char"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "spoilerspan",
                        "type": "size_t",
                        "definition": [
                            "size_t spoilerspan = find_emph_char((data + i) + 1, (size - i) - 1, '<')"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "prefix_code",
            "header": "",
            "params": [
                "uint8_t *data",
                "size_t size"
            ],
            "definition": "static size_t prefix_code(uint8_t *data, size_t size)\n{\n  if (((((size > 3) && (data[0] == ' ')) && (data[1] == ' ')) && (data[2] == ' ')) && (data[3] == ' '))\n  {\n    return 4;\n  }\n  return 0;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "prefix_oli",
            "header": "",
            "params": [
                "uint8_t *data",
                "size_t size"
            ],
            "definition": "static size_t prefix_oli(uint8_t *data, size_t size)\n{\n  size_t i = 0;\n  if ((i < size) && (data[i] == ' '))\n  {\n    i += 1;\n  }\n  if ((i < size) && (data[i] == ' '))\n  {\n    i += 1;\n  }\n  if ((i < size) && (data[i] == ' '))\n  {\n    i += 1;\n  }\n  if (((i >= size) || (data[i] < '0')) || (data[i] > '9'))\n  {\n    return 0;\n  }\n  while (((i < size) && (data[i] >= '0')) && (data[i] <= '9'))\n    i++;\n\n  i += 1;\n  if ((((i + 1) >= size) || (data[i] != '.')) || (data[i + 1] != ' '))\n  {\n    return 0;\n  }\n  if (is_next_headerline(data + i, size - i))\n  {\n    return 0;\n  }\n  return i + 2;\n}\n\n",
            "calle": [
                "is_next_headerline"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "prefix_uli",
            "header": "",
            "params": [
                "uint8_t *data",
                "size_t size"
            ],
            "definition": "static size_t prefix_uli(uint8_t *data, size_t size)\n{\n  size_t i = 0;\n  if ((i < size) && (data[i] == ' '))\n  {\n    i += 1;\n  }\n  if ((i < size) && (data[i] == ' '))\n  {\n    i += 1;\n  }\n  if ((i < size) && (data[i] == ' '))\n  {\n    i += 1;\n  }\n  if ((((i + 1) >= size) || (((data[i] != '*') && (data[i] != '+')) && (data[i] != '-'))) || (data[i + 1] != ' '))\n  {\n    return 0;\n  }\n  if (is_next_headerline(data + i, size - i))\n  {\n    return 0;\n  }\n  return i + 2;\n}\n\n",
            "calle": [
                "is_next_headerline"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "parse_block",
            "header": "static void parse_block(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t size)",
            "params": [
                "struct buf *ob",
                "struct sd_markdown *rndr",
                "uint8_t *data",
                "size_t size"
            ],
            "definition": "static void parse_block(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t size)\n{\n  size_t beg;\n  size_t end;\n  size_t i;\n  uint8_t *txt_data;\n  unsigned int txt_data_idx = 0;\n  beg = 0;\n  if ((rndr->work_bufs[1].size + rndr->work_bufs[0].size) > rndr->max_nesting)\n  {\n    return;\n  }\n  while (beg < size)\n  {\n    txt_data_idx = data + beg;\n    end = size - beg;\n    if (is_atxheader(rndr, txt_data, end))\n    {\n      beg += parse_atxheader(ob, rndr, txt_data, end);\n    }\n    else\n      if (((data[beg] == '<') && rndr->cb.blockhtml) && ((i = parse_htmlblock(ob, rndr, txt_data, end, 1)) != 0))\n    {\n      beg += i;\n    }\n    else\n      if ((i = is_empty(txt_data, end)) != 0)\n    {\n      beg += i;\n    }\n    else\n      if (is_hrule(txt_data, end))\n    {\n      if (rndr->cb.hrule)\n      {\n        rndr->cb.hrule(ob, rndr->opaque);\n      }\n      while ((beg < size) && (data[beg] != '\\n'))\n        beg++;\n\n      beg += 1;\n      beg++;\n    }\n    else\n      if (((rndr->ext_flags & MKDEXT_FENCED_CODE) != 0) && ((i = parse_fencedcode(ob, rndr, txt_data, end)) != 0))\n    {\n      beg += i;\n    }\n    else\n      if (((rndr->ext_flags & MKDEXT_TABLES) != 0) && ((i = parse_table(ob, rndr, txt_data, end)) != 0))\n    {\n      beg += i;\n    }\n    else\n      if (prefix_quote(txt_data, end))\n    {\n      beg += parse_blockquote(ob, rndr, txt_data, end);\n    }\n    else\n      if (prefix_blockspoiler(txt_data, end))\n    {\n      beg += parse_blockspoiler(ob, rndr, txt_data, end);\n    }\n    else\n      if (prefix_code(txt_data, end))\n    {\n      beg += parse_blockcode(ob, rndr, txt_data, end);\n    }\n    else\n      if (prefix_uli(txt_data, end))\n    {\n      beg += parse_list(ob, rndr, txt_data, end, 0);\n    }\n    else\n      if (prefix_oli(txt_data, end))\n    {\n      beg += parse_list(ob, rndr, txt_data, end, 1);\n    }\n    else\n      beg += parse_paragraph(ob, rndr, txt_data, end);\n  }\n\n}\n\n",
            "calle": [
                "is_atxheader",
                "is_empty",
                "is_hrule",
                "parse_atxheader",
                "parse_blockcode",
                "parse_blockquote",
                "parse_blockspoiler",
                "parse_fencedcode",
                "parse_htmlblock",
                "parse_list",
                "parse_paragraph",
                "parse_table",
                "prefix_blockspoiler",
                "prefix_code",
                "prefix_oli",
                "prefix_quote",
                "prefix_uli",
                "rndr->cb.hrule"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "beg",
                        "type": "size_t",
                        "definition": [
                            "size_t beg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "size_t",
                        "definition": [
                            "size_t end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "txt_data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *txt_data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "txt_data_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int txt_data_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "parse_blockquote",
            "header": "",
            "params": [
                "struct buf *ob",
                "struct sd_markdown *rndr",
                "uint8_t *data",
                "size_t size"
            ],
            "definition": "static size_t parse_blockquote(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t size)\n{\n  size_t beg;\n  size_t end = 0;\n  size_t pre;\n  size_t work_size = 0;\n  uint8_t *work_data = 0;\n  unsigned int work_data_idx = 0;\n  struct buf *out = 0;\n  unsigned int out_idx = 0;\n  out_idx = rndr_newbuf(rndr, 0);\n  beg = 0;\n  while (beg < size)\n  {\n    for (end = beg + 1; (end < size) && (data[end - 1] != '\\n'); end += 1)\n      ;\n\n    pre = prefix_quote(data + beg, end - beg);\n    if (pre)\n    {\n      beg += pre;\n    }\n    else\n      if (is_empty(data + beg, end - beg) && ((end >= size) || ((prefix_quote(data + end, size - end) == 0) && (!is_empty(data + end, size - end)))))\n    {\n      break;\n    }\n    if (beg < end)\n    {\n      if (!(&work_data[work_data_idx]))\n      {\n        work_data_idx = data + beg;\n      }\n      else\n        if ((data + beg) != ((&work_data[work_data_idx]) + work_size))\n      {\n        memmove((&work_data[work_data_idx]) + work_size, data + beg, end - beg);\n      }\n      work_size += end - beg;\n    }\n    beg = end;\n  }\n\n  parse_block(out, rndr, work_data, work_size);\n  if (rndr->cb.blockquote)\n  {\n    rndr->cb.blockquote(ob, out, rndr->opaque);\n  }\n  rndr_popbuf(rndr, 0);\n  return end;\n}\n\n",
            "calle": [
                "is_empty",
                "memmove",
                "parse_block",
                "prefix_quote",
                "rndr->cb.blockquote",
                "rndr_newbuf",
                "rndr_popbuf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "beg",
                        "type": "size_t",
                        "definition": [
                            "size_t beg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "size_t",
                        "definition": [
                            "size_t end = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pre",
                        "type": "size_t",
                        "definition": [
                            "size_t pre"
                        ]
                    },
                    {
                        "path": null,
                        "name": "work_size",
                        "type": "size_t",
                        "definition": [
                            "size_t work_size = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "work_data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *work_data = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "work_data_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int work_data_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *out = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int out_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "parse_blockspoiler",
            "header": "",
            "params": [
                "struct buf *ob",
                "struct sd_markdown *rndr",
                "uint8_t *data",
                "size_t size"
            ],
            "definition": "static size_t parse_blockspoiler(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t size)\n{\n  size_t beg;\n  size_t end = 0;\n  size_t pre;\n  size_t work_size = 0;\n  uint8_t *work_data = 0;\n  unsigned int work_data_idx = 0;\n  struct buf *out = 0;\n  unsigned int out_idx = 0;\n  out_idx = rndr_newbuf(rndr, 0);\n  beg = 0;\n  while (beg < size)\n  {\n    for (end = beg + 1; (end < size) && (data[end - 1] != '\\n'); end += 1)\n      ;\n\n    pre = prefix_blockspoiler(data + beg, end - beg);\n    if (pre)\n    {\n      beg += pre;\n    }\n    else\n      if (is_empty(data + beg, end - beg) && ((end >= size) || ((prefix_blockspoiler(data + end, size - end) == 0) && (!is_empty(data + end, size - end)))))\n    {\n      break;\n    }\n    if (beg < end)\n    {\n      if (!(&work_data[work_data_idx]))\n      {\n        work_data_idx = data + beg;\n      }\n      else\n        if ((data + beg) != ((&work_data[work_data_idx]) + work_size))\n      {\n        memmove((&work_data[work_data_idx]) + work_size, data + beg, end - beg);\n      }\n      work_size += end - beg;\n    }\n    beg = end;\n  }\n\n  parse_block(out, rndr, work_data, work_size);\n  if (rndr->cb.blockspoiler)\n  {\n    rndr->cb.blockspoiler(ob, out, rndr->opaque);\n  }\n  rndr_popbuf(rndr, 0);\n  return end;\n}\n\n",
            "calle": [
                "is_empty",
                "memmove",
                "parse_block",
                "prefix_blockspoiler",
                "rndr->cb.blockspoiler",
                "rndr_newbuf",
                "rndr_popbuf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "beg",
                        "type": "size_t",
                        "definition": [
                            "size_t beg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "size_t",
                        "definition": [
                            "size_t end = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pre",
                        "type": "size_t",
                        "definition": [
                            "size_t pre"
                        ]
                    },
                    {
                        "path": null,
                        "name": "work_size",
                        "type": "size_t",
                        "definition": [
                            "size_t work_size = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "work_data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *work_data = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "work_data_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int work_data_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *out = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int out_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "parse_htmlblock",
            "header": "static size_t parse_htmlblock(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t size, int do_render)",
            "params": [
                "struct buf *ob",
                "struct sd_markdown *rndr",
                "uint8_t *data",
                "size_t size",
                "int do_render"
            ],
            "definition": "static size_t parse_htmlblock(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t size, int do_render)\n{\n  size_t i;\n  size_t j = 0;\n  size_t tag_end;\n  const char *curtag = 0;\n  unsigned int curtag_idx = 0;\n  struct buf work = {data, 0, 0, 0};\n  if ((size < 2) || (data[0] != '<'))\n  {\n    return 0;\n  }\n  i = 1;\n  while (((i < size) && (data[i] != '>')) && (data[i] != ' '))\n    i++;\n\n  i += 1;\n  if (i < size)\n  {\n    curtag_idx = find_block_tag(((char *) data) + 1, ((int) i) - 1);\n  }\n  if (!(&curtag[curtag_idx]))\n  {\n    helper_parse_htmlblock_1(&size, &i, &j, &work, ob, rndr, data, do_render);\n  }\n  tag_end = htmlblock_end(curtag, rndr, data, size, 1);\n  if (((!tag_end) && (strcmp(curtag, \"ins\") != 0)) && (strcmp(curtag, \"del\") != 0))\n  {\n    tag_end = htmlblock_end(curtag, rndr, data, size, 0);\n  }\n  if (!tag_end)\n  {\n    return 0;\n  }\n  work.size = tag_end;\n  if (do_render && rndr->cb.blockhtml)\n  {\n    rndr->cb.blockhtml(ob, &work, rndr->opaque);\n  }\n  return tag_end;\n}\n\n",
            "calle": [
                "find_block_tag",
                "helper_parse_htmlblock_1",
                "htmlblock_end",
                "rndr->cb.blockhtml",
                "strcmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "do_render",
                        "type": "int",
                        "definition": [
                            "int do_render"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag_end",
                        "type": "size_t",
                        "definition": [
                            "size_t tag_end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curtag",
                        "type": "const char *",
                        "definition": [
                            "const char *curtag = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "curtag_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int curtag_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "work",
                        "type": "struct buf",
                        "definition": [
                            "struct buf work = {data, 0, 0, 0}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "parse_paragraph",
            "header": "",
            "params": [
                "struct buf *ob",
                "struct sd_markdown *rndr",
                "uint8_t *data",
                "size_t size"
            ],
            "definition": "static size_t parse_paragraph(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t size)\n{\n  size_t i = 0;\n  size_t end = 0;\n  int level = 0;\n  struct buf work = {data, 0, 0, 0};\n  while (i < size)\n  {\n    helper_parse_paragraph_1(&i, &end, &level, ob, rndr, data, size);\n  }\n\n  work.size = i;\n  while (work.size && (data[work.size - 1] == '\\n'))\n    work.size--;\n\n  if (!level)\n  {\n    struct buf *tmp = rndr_newbuf(rndr, 0);\n    parse_inline(tmp, rndr, work.data, work.size);\n    if (rndr->cb.paragraph)\n    {\n      rndr->cb.paragraph(ob, tmp, rndr->opaque);\n    }\n    rndr_popbuf(rndr, 0);\n  }\n  else\n  {\n    helper_parse_paragraph_2(&i, &work, ob, rndr, data, level);\n  }\n  return end;\n}\n\n",
            "calle": [
                "helper_parse_paragraph_1",
                "helper_parse_paragraph_2",
                "parse_inline",
                "rndr->cb.paragraph",
                "rndr_newbuf",
                "rndr_popbuf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "size_t",
                        "definition": [
                            "size_t end = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "int",
                        "definition": [
                            "int level = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "work",
                        "type": "struct buf",
                        "definition": [
                            "struct buf work = {data, 0, 0, 0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *tmp = rndr_newbuf(rndr, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "parse_fencedcode",
            "header": "",
            "params": [
                "struct buf *ob",
                "struct sd_markdown *rndr",
                "uint8_t *data",
                "size_t size"
            ],
            "definition": "static size_t parse_fencedcode(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t size)\n{\n  size_t beg;\n  size_t end;\n  struct buf *work = 0;\n  unsigned int work_idx = 0;\n  struct buf lang = {0, 0, 0, 0};\n  beg = is_codefence(data, size, &lang);\n  if (beg == 0)\n  {\n    return 0;\n  }\n  work_idx = rndr_newbuf(rndr, 0);\n  while (beg < size)\n  {\n    size_t fence_end;\n    struct buf fence_trail = {0, 0, 0, 0};\n    fence_end = is_codefence(data + beg, size - beg, &fence_trail);\n    if ((fence_end != 0) && (fence_trail.size == 0))\n    {\n      beg += fence_end;\n      break;\n    }\n    for (end = beg + 1; (end < size) && (data[end - 1] != '\\n'); end += 1)\n      ;\n\n    if (beg < end)\n    {\n      if (is_empty(data + beg, end - beg))\n      {\n        bufputc(work, '\\n');\n      }\n      else\n        bufput(work, data + beg, end - beg);\n    }\n    beg = end;\n  }\n\n  if (work->size && (work->data[work->size - 1] != '\\n'))\n  {\n    bufputc(work, '\\n');\n  }\n  if (rndr->cb.blockcode)\n  {\n    rndr->cb.blockcode(ob, work, (lang.size) ? (&lang) : (0), rndr->opaque);\n  }\n  rndr_popbuf(rndr, 0);\n  return beg;\n}\n\n",
            "calle": [
                "bufput",
                "bufputc",
                "is_codefence",
                "is_empty",
                "rndr->cb.blockcode",
                "rndr_newbuf",
                "rndr_popbuf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "beg",
                        "type": "size_t",
                        "definition": [
                            "size_t beg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "size_t",
                        "definition": [
                            "size_t end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *work = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "work_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int work_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lang",
                        "type": "struct buf",
                        "definition": [
                            "struct buf lang = {0, 0, 0, 0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fence_end",
                        "type": "size_t",
                        "definition": [
                            "size_t fence_end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "fence_trail",
                        "type": "struct buf",
                        "definition": [
                            "struct buf fence_trail = {0, 0, 0, 0}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "parse_blockcode",
            "header": "",
            "params": [
                "struct buf *ob",
                "struct sd_markdown *rndr",
                "uint8_t *data",
                "size_t size"
            ],
            "definition": "static size_t parse_blockcode(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t size)\n{\n  size_t beg;\n  size_t end;\n  size_t pre;\n  struct buf *work = 0;\n  unsigned int work_idx = 0;\n  work_idx = rndr_newbuf(rndr, 0);\n  beg = 0;\n  while (beg < size)\n  {\n    for (end = beg + 1; (end < size) && (data[end - 1] != '\\n'); end += 1)\n    {\n    }\n\n    ;\n    pre = prefix_code(data + beg, end - beg);\n    if (pre)\n    {\n      beg += pre;\n    }\n    else\n      if (!is_empty(data + beg, end - beg))\n    {\n      break;\n    }\n    if (beg < end)\n    {\n      if (is_empty(data + beg, end - beg))\n      {\n        bufputc(work, '\\n');\n      }\n      else\n        bufput(work, data + beg, end - beg);\n    }\n    beg = end;\n  }\n\n  while (work->size && (work->data[work->size - 1] == '\\n'))\n    work->size -= 1;\n\n  bufputc(work, '\\n');\n  if (rndr->cb.blockcode)\n  {\n    rndr->cb.blockcode(ob, work, 0, rndr->opaque);\n  }\n  rndr_popbuf(rndr, 0);\n  return beg;\n}\n\n",
            "calle": [
                "bufput",
                "bufputc",
                "is_empty",
                "prefix_code",
                "rndr->cb.blockcode",
                "rndr_newbuf",
                "rndr_popbuf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "beg",
                        "type": "size_t",
                        "definition": [
                            "size_t beg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "size_t",
                        "definition": [
                            "size_t end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pre",
                        "type": "size_t",
                        "definition": [
                            "size_t pre"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *work = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "work_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int work_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "parse_listitem",
            "header": "",
            "params": [
                "struct buf *ob",
                "struct sd_markdown *rndr",
                "uint8_t *data",
                "size_t size",
                "int *flags"
            ],
            "definition": "static size_t parse_listitem(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t size, int *flags)\n{\n  struct buf *work = 0;\n  unsigned int work_idx = 0;\n  struct buf *inter = 0;\n  unsigned int inter_idx = 0;\n  size_t beg = 0;\n  size_t end;\n  size_t pre;\n  size_t sublist = 0;\n  size_t orgpre = 0;\n  size_t i;\n  int in_empty = 0;\n  int has_inside_empty = 0;\n  int in_fence = 0;\n  while (((orgpre < 3) && (orgpre < size)) && (data[orgpre] == ' '))\n    orgpre++;\n\n  orgpre += 1;\n  beg = prefix_uli(data, size);\n  if (!beg)\n  {\n    beg = prefix_oli(data, size);\n  }\n  if (!beg)\n  {\n    return 0;\n  }\n  end = beg;\n  while ((end < size) && (data[end - 1] != '\\n'))\n    end++;\n\n  end += 1;\n  work_idx = rndr_newbuf(rndr, 1);\n  inter_idx = rndr_newbuf(rndr, 1);\n  bufput(work, data + beg, end - beg);\n  beg = end;\n  while (beg < size)\n  {\n    helper_parse_listitem_1(&beg, &end, &pre, &sublist, &i, &in_empty, &has_inside_empty, &in_fence, rndr, data, size, flags, work, orgpre);\n  }\n\n  if (has_inside_empty)\n  {\n    *flags |= 2;\n  }\n  if ((*flags) & 2)\n  {\n    if (sublist && (sublist < work->size))\n    {\n      parse_block(inter, rndr, work->data, sublist);\n      parse_block(inter, rndr, work->data + sublist, work->size - sublist);\n    }\n    else\n      parse_block(inter, rndr, work->data, work->size);\n  }\n  else\n  {\n    if (sublist && (sublist < work->size))\n    {\n      parse_inline(inter, rndr, work->data, sublist);\n      parse_block(inter, rndr, work->data + sublist, work->size - sublist);\n    }\n    else\n      parse_inline(inter, rndr, work->data, work->size);\n  }\n  if (rndr->cb.listitem)\n  {\n    rndr->cb.listitem(ob, inter, *flags, rndr->opaque);\n  }\n  rndr_popbuf(rndr, 1);\n  rndr_popbuf(rndr, 1);\n  return beg;\n}\n\n",
            "calle": [
                "bufput",
                "helper_parse_listitem_1",
                "parse_block",
                "parse_inline",
                "prefix_oli",
                "prefix_uli",
                "rndr->cb.listitem",
                "rndr_newbuf",
                "rndr_popbuf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int *",
                        "definition": [
                            "int *flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *work = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "work_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int work_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *inter = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inter_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int inter_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "beg",
                        "type": "size_t",
                        "definition": [
                            "size_t beg = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "size_t",
                        "definition": [
                            "size_t end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pre",
                        "type": "size_t",
                        "definition": [
                            "size_t pre"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sublist",
                        "type": "size_t",
                        "definition": [
                            "size_t sublist = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "orgpre",
                        "type": "size_t",
                        "definition": [
                            "size_t orgpre = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_empty",
                        "type": "int",
                        "definition": [
                            "int in_empty = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "has_inside_empty",
                        "type": "int",
                        "definition": [
                            "int has_inside_empty = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_fence",
                        "type": "int",
                        "definition": [
                            "int in_fence = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "parse_list",
            "header": "",
            "params": [
                "struct buf *ob",
                "struct sd_markdown *rndr",
                "uint8_t *data",
                "size_t size",
                "int flags"
            ],
            "definition": "static size_t parse_list(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t size, int flags)\n{\n  struct buf *work = 0;\n  unsigned int work_idx = 0;\n  size_t i = 0;\n  size_t j;\n  work_idx = rndr_newbuf(rndr, 0);\n  while (i < size)\n  {\n    j = parse_listitem(work, rndr, data + i, size - i, &flags);\n    i += j;\n    if ((!j) || (flags & 8))\n    {\n      break;\n    }\n  }\n\n  if (rndr->cb.list)\n  {\n    rndr->cb.list(ob, work, flags, rndr->opaque);\n  }\n  rndr_popbuf(rndr, 0);\n  return i;\n}\n\n",
            "calle": [
                "parse_listitem",
                "rndr->cb.list",
                "rndr_newbuf",
                "rndr_popbuf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int",
                        "definition": [
                            "int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *work = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "work_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int work_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "parse_atxheader",
            "header": "",
            "params": [
                "struct buf *ob",
                "struct sd_markdown *rndr",
                "uint8_t *data",
                "size_t size"
            ],
            "definition": "static size_t parse_atxheader(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t size)\n{\n  size_t level = 0;\n  size_t i;\n  size_t end;\n  size_t skip;\n  while (((level < size) && (level < 6)) && (data[level] == '#'))\n    level++;\n\n  level += 1;\n  for (i = level; (i < size) && (data[i] == ' '); i += 1)\n    ;\n\n  for (end = i; (end < size) && (data[end] != '\\n'); end += 1)\n    ;\n\n  skip = end;\n  while (end && (data[end - 1] == '#'))\n    end--;\n\n  end -= 1;\n  while (end && (data[end - 1] == ' '))\n    end--;\n\n  end -= 1;\n  if (end > i)\n  {\n    struct buf *work = rndr_newbuf(rndr, 1);\n    parse_inline(work, rndr, data + i, end - i);\n    if (rndr->cb.header)\n      rndr->cb.header(ob, work, (int) level, rndr->opaque);\n    rndr_popbuf(rndr, 1);\n  }\n  return skip;\n}\n\n",
            "calle": [
                "parse_inline",
                "rndr->cb.header",
                "rndr_newbuf",
                "rndr_popbuf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "size_t",
                        "definition": [
                            "size_t level = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "size_t",
                        "definition": [
                            "size_t end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "skip",
                        "type": "size_t",
                        "definition": [
                            "size_t skip"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *work = rndr_newbuf(rndr, 1)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "htmlblock_end_tag",
            "header": "",
            "params": [
                "const char *tag",
                "size_t tag_len",
                "struct sd_markdown *rndr",
                "uint8_t *data",
                "size_t size"
            ],
            "definition": "static size_t htmlblock_end_tag(const char *tag, size_t tag_len, struct sd_markdown *rndr, uint8_t *data, size_t size)\n{\n  size_t i;\n  size_t w;\n  if ((((tag_len + 3) >= size) || (strncasecmp(((char *) data) + 2, tag, tag_len) != 0)) || (data[tag_len + 2] != '>'))\n  {\n    return 0;\n  }\n  i = tag_len + 3;\n  w = 0;\n  if ((i < size) && ((w = is_empty(data + i, size - i)) == 0))\n  {\n    return 0;\n  }\n  i += w;\n  w = 0;\n  if (i < size)\n  {\n    w = is_empty(data + i, size - i);\n  }\n  return i + w;\n}\n\n",
            "calle": [
                "is_empty",
                "strncasecmp"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "tag",
                        "type": "const char *",
                        "definition": [
                            "const char *tag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag_len",
                        "type": "size_t",
                        "definition": [
                            "size_t tag_len"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "w",
                        "type": "size_t",
                        "definition": [
                            "size_t w"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "htmlblock_end",
            "header": "",
            "params": [
                "const char *curtag",
                "struct sd_markdown *rndr",
                "uint8_t *data",
                "size_t size",
                "int start_of_line"
            ],
            "definition": "static size_t htmlblock_end(const char *curtag, struct sd_markdown *rndr, uint8_t *data, size_t size, int start_of_line)\n{\n  size_t tag_size = strlen(curtag);\n  size_t i = 1;\n  size_t end_tag;\n  int block_lines = 0;\n  while (i < size)\n  {\n    i += 1;\n    while ((i < size) && (!((data[i - 1] == '<') && (data[i] == '/'))))\n    {\n      if (data[i] == '\\n')\n      {\n        block_lines += 1;\n      }\n      i += 1;\n    }\n\n    if ((start_of_line && (block_lines > 0)) && (data[i - 2] != '\\n'))\n    {\n      continue;\n    }\n    if (((i + 2) + tag_size) >= size)\n    {\n      break;\n    }\n    end_tag = htmlblock_end_tag(curtag, tag_size, rndr, (data + i) - 1, (size - i) + 1);\n    if (end_tag)\n    {\n      return (i + end_tag) - 1;\n    }\n  }\n\n  return 0;\n}\n\n",
            "calle": [
                "htmlblock_end_tag",
                "strlen"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "curtag",
                        "type": "const char *",
                        "definition": [
                            "const char *curtag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "start_of_line",
                        "type": "int",
                        "definition": [
                            "int start_of_line"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tag_size",
                        "type": "size_t",
                        "definition": [
                            "size_t tag_size = strlen(curtag)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 1"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end_tag",
                        "type": "size_t",
                        "definition": [
                            "size_t end_tag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "block_lines",
                        "type": "int",
                        "definition": [
                            "int block_lines = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "parse_table_row",
            "header": "",
            "params": [
                "struct buf *ob",
                "struct sd_markdown *rndr",
                "uint8_t *data",
                "size_t size",
                "size_t columns",
                "int *col_data",
                "int header_flag"
            ],
            "definition": "static void parse_table_row(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t size, size_t columns, int *col_data, int header_flag)\n{\n  size_t i = 0;\n  size_t col;\n  size_t cols_left;\n  struct buf *row_work = 0;\n  unsigned int row_work_idx = 0;\n  if ((!rndr->cb.table_cell) || (!rndr->cb.table_row))\n  {\n    return;\n  }\n  row_work_idx = rndr_newbuf(rndr, 1);\n  if ((i < size) && (data[i] == '|'))\n  {\n    i += 1;\n  }\n  for (col = 0; (col < columns) && (i < size); col += 1)\n  {\n    helper_parse_table_row_1(&i, rndr, data, size, col_data, header_flag, col, row_work);\n  }\n\n  cols_left = columns - col;\n  if (cols_left > 0)\n  {\n    struct buf empty_cell = {0, 0, 0, 0};\n    rndr->cb.table_cell(row_work, &empty_cell, col_data[col] | header_flag, rndr->opaque, cols_left);\n  }\n  rndr->cb.table_row(ob, row_work, rndr->opaque);\n  rndr_popbuf(rndr, 1);\n}\n\n",
            "calle": [
                "helper_parse_table_row_1",
                "rndr->cb.table_cell",
                "rndr->cb.table_row",
                "rndr_newbuf",
                "rndr_popbuf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "columns",
                        "type": "size_t",
                        "definition": [
                            "size_t columns"
                        ]
                    },
                    {
                        "path": null,
                        "name": "col_data",
                        "type": "int *",
                        "definition": [
                            "int *col_data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "header_flag",
                        "type": "int",
                        "definition": [
                            "int header_flag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "col",
                        "type": "size_t",
                        "definition": [
                            "size_t col"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cols_left",
                        "type": "size_t",
                        "definition": [
                            "size_t cols_left"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *row_work = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_work_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int row_work_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "empty_cell",
                        "type": "struct buf",
                        "definition": [
                            "struct buf empty_cell = {0, 0, 0, 0}"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "parse_table_header",
            "header": "",
            "params": [
                "struct buf *ob",
                "struct sd_markdown *rndr",
                "uint8_t *data",
                "size_t size",
                "size_t *columns",
                "int **column_data"
            ],
            "definition": "static size_t parse_table_header(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t size, size_t *columns, int **column_data)\n{\n  int pipes;\n  size_t i = 0;\n  size_t col;\n  size_t header_end;\n  size_t under_end;\n  pipes = 0;\n  while ((i < size) && (data[i] != '\\n'))\n    if (data[i++] == '|')\n  {\n    pipes += 1;\n  }\n\n  if ((i == size) || (pipes == 0))\n  {\n    return 0;\n  }\n  header_end = i;\n  while ((header_end > 0) && _isspace(data[header_end - 1]))\n    header_end--;\n\n  header_end -= 1;\n  if (data[0] == '|')\n  {\n    pipes -= 1;\n  }\n  if (header_end && (data[header_end - 1] == '|'))\n  {\n    pipes -= 1;\n  }\n  if ((pipes + 1) > rndr->max_table_cols)\n  {\n    return 0;\n  }\n  *columns = pipes + 1;\n  *column_data = calloc(*columns, sizeof(int));\n  i += 1;\n  if ((i < size) && (data[i] == '|'))\n  {\n    i += 1;\n  }\n  under_end = i;\n  while ((under_end < size) && (data[under_end] != '\\n'))\n    under_end++;\n\n  under_end += 1;\n  for (col = 0; (col < (*columns)) && (i < under_end); col += 1)\n  {\n    helper_parse_table_header_1(&i, &col, data, column_data, under_end);\n  }\n\n  if (col < (*columns))\n  {\n    return 0;\n  }\n  parse_table_row(ob, rndr, data, header_end, *columns, *column_data, MKD_TABLE_HEADER);\n  return under_end + 1;\n}\n\n",
            "calle": [
                "_isspace",
                "calloc",
                "helper_parse_table_header_1",
                "parse_table_row"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "columns",
                        "type": "size_t *",
                        "definition": [
                            "size_t *columns"
                        ]
                    },
                    {
                        "path": null,
                        "name": "column_data",
                        "type": "int **",
                        "definition": [
                            "int **column_data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pipes",
                        "type": "int",
                        "definition": [
                            "int pipes"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "col",
                        "type": "size_t",
                        "definition": [
                            "size_t col"
                        ]
                    },
                    {
                        "path": null,
                        "name": "header_end",
                        "type": "size_t",
                        "definition": [
                            "size_t header_end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "under_end",
                        "type": "size_t",
                        "definition": [
                            "size_t under_end"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "parse_table",
            "header": "",
            "params": [
                "struct buf *ob",
                "struct sd_markdown *rndr",
                "uint8_t *data",
                "size_t size"
            ],
            "definition": "static size_t parse_table(struct buf *ob, struct sd_markdown *rndr, uint8_t *data, size_t size)\n{\n  size_t i;\n  struct buf *header_work = 0;\n  unsigned int header_work_idx = 0;\n  struct buf *body_work = 0;\n  unsigned int body_work_idx = 0;\n  size_t columns;\n  int *col_data = 0;\n  header_work_idx = rndr_newbuf(rndr, 1);\n  body_work_idx = rndr_newbuf(rndr, 0);\n  i = parse_table_header(header_work, rndr, data, size, &columns, &col_data);\n  if (i > 0)\n  {\n    while (i < size)\n    {\n      size_t row_start;\n      int pipes = 0;\n      row_start = i;\n      while ((i < size) && (data[i] != '\\n'))\n        if (data[i++] == '|')\n      {\n        pipes += 1;\n      }\n\n      if ((pipes == 0) || (i == size))\n      {\n        i = row_start;\n        break;\n      }\n      parse_table_row(body_work, rndr, data + row_start, i - row_start, columns, col_data, 0);\n      i += 1;\n    }\n\n    if (rndr->cb.table)\n    {\n      rndr->cb.table(ob, header_work, body_work, rndr->opaque);\n    }\n  }\n  free(col_data);\n  rndr_popbuf(rndr, 1);\n  rndr_popbuf(rndr, 0);\n  return i;\n}\n\n",
            "calle": [
                "free",
                "parse_table_header",
                "parse_table_row",
                "rndr->cb.table",
                "rndr_newbuf",
                "rndr_popbuf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown *",
                        "definition": [
                            "struct sd_markdown *rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *header_work = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "header_work_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int header_work_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *body_work = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "body_work_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int body_work_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "columns",
                        "type": "size_t",
                        "definition": [
                            "size_t columns"
                        ]
                    },
                    {
                        "path": null,
                        "name": "col_data",
                        "type": "int *",
                        "definition": [
                            "int *col_data = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "row_start",
                        "type": "size_t",
                        "definition": [
                            "size_t row_start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pipes",
                        "type": "int",
                        "definition": [
                            "int pipes = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "is_ref",
            "header": "",
            "params": [
                "const uint8_t *data",
                "size_t beg",
                "size_t end",
                "size_t *last",
                "struct link_ref **refs"
            ],
            "definition": "static int is_ref(const uint8_t *data, size_t beg, size_t end, size_t *last, struct link_ref **refs)\n{\n  size_t i = 0;\n  size_t id_offset;\n  size_t id_end;\n  size_t link_offset;\n  size_t link_end;\n  size_t title_offset;\n  size_t title_end;\n  size_t line_end;\n  if ((beg + 3) >= end)\n  {\n    return 0;\n  }\n  if (data[beg] == ' ')\n  {\n    i = 1;\n    if (data[beg + 1] == ' ')\n    {\n      i = 2;\n      if (data[beg + 2] == ' ')\n      {\n        i = 3;\n        if (data[beg + 3] == ' ')\n        {\n          return 0;\n        }\n      }\n    }\n  }\n  i += beg;\n  if (data[i] != '[')\n  {\n    return 0;\n  }\n  i += 1;\n  id_offset = i;\n  while ((((i < end) && (data[i] != '\\n')) && (data[i] != '\\r')) && (data[i] != ']'))\n    i++;\n\n  i += 1;\n  if ((i >= end) || (data[i] != ']'))\n  {\n    return 0;\n  }\n  id_end = i;\n  i += 1;\n  if ((i >= end) || (data[i] != ':'))\n  {\n    return 0;\n  }\n  i += 1;\n  while ((i < end) && (data[i] == ' '))\n    i++;\n\n  i += 1;\n  if ((i < end) && ((data[i] == '\\n') || (data[i] == '\\r')))\n  {\n    i += 1;\n    if (((i < end) && (data[i] == '\\r')) && (data[i - 1] == '\\n'))\n    {\n      i += 1;\n    }\n  }\n  while ((i < end) && (data[i] == ' '))\n    i++;\n\n  i += 1;\n  if (i >= end)\n  {\n    return 0;\n  }\n  if (data[i] == '<')\n  {\n    i += 1;\n  }\n  link_offset = i;\n  while ((((i < end) && (data[i] != ' ')) && (data[i] != '\\n')) && (data[i] != '\\r'))\n    i++;\n\n  i += 1;\n  if (data[i - 1] == '>')\n  {\n    link_end = i - 1;\n  }\n  else\n    link_end = i;\n  while ((i < end) && (data[i] == ' '))\n    i++;\n\n  i += 1;\n  if ((((((i < end) && (data[i] != '\\n')) && (data[i] != '\\r')) && (data[i] != '\\'')) && (data[i] != '\"')) && (data[i] != '('))\n  {\n    return 0;\n  }\n  line_end = 0;\n  if (((i >= end) || (data[i] == '\\r')) || (data[i] == '\\n'))\n  {\n    line_end = i;\n  }\n  if ((((i + 1) < end) && (data[i] == '\\n')) && (data[i + 1] == '\\r'))\n  {\n    line_end = i + 1;\n  }\n  if (line_end)\n  {\n    i = line_end + 1;\n    while ((i < end) && (data[i] == ' '))\n      i++;\n\n    i += 1;\n  }\n  title_offset = (title_end = 0);\n  if (((i + 1) < end) && (((data[i] == '\\'') || (data[i] == '\"')) || (data[i] == '(')))\n  {\n    i++;\n    title_offset = i;\n    while (((i < end) && (data[i] != '\\n')) && (data[i] != '\\r'))\n      i++;\n\n    if ((((i + 1) < end) && (data[i] == '\\n')) && (data[i + 1] == '\\r'))\n      title_end = i + 1;\n    else\n      title_end = i;\n    i -= 1;\n    while ((i > title_offset) && (data[i] == ' '))\n      i -= 1;\n\n    if ((i > title_offset) && (((data[i] == '\\'') || (data[i] == '\"')) || (data[i] == ')')))\n    {\n      line_end = title_end;\n      title_end = i;\n    }\n  }\n  if ((!line_end) || (link_end == link_offset))\n    return 0;\n  if (last)\n    *last = line_end;\n  if (refs)\n  {\n    helper_is_ref_1(data, refs, id_offset, id_end, link_offset, link_end, title_offset, title_end);\n  }\n  return 1;\n}\n\n",
            "calle": [
                "helper_is_ref_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "beg",
                        "type": "size_t",
                        "definition": [
                            "size_t beg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "size_t",
                        "definition": [
                            "size_t end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "last",
                        "type": "size_t *",
                        "definition": [
                            "size_t *last"
                        ]
                    },
                    {
                        "path": null,
                        "name": "refs",
                        "type": "struct link_ref **",
                        "definition": [
                            "struct link_ref **refs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id_offset",
                        "type": "size_t",
                        "definition": [
                            "size_t id_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id_end",
                        "type": "size_t",
                        "definition": [
                            "size_t id_end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_offset",
                        "type": "size_t",
                        "definition": [
                            "size_t link_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_end",
                        "type": "size_t",
                        "definition": [
                            "size_t link_end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "title_offset",
                        "type": "size_t",
                        "definition": [
                            "size_t title_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "title_end",
                        "type": "size_t",
                        "definition": [
                            "size_t title_end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "line_end",
                        "type": "size_t",
                        "definition": [
                            "size_t line_end"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "expand_tabs",
            "header": "",
            "params": [
                "struct buf *ob",
                "const uint8_t *line",
                "size_t size"
            ],
            "definition": "static void expand_tabs(struct buf *ob, const uint8_t *line, size_t size)\n{\n  size_t i = 0;\n  size_t tab = 0;\n  while (i < size)\n  {\n    size_t org = i;\n    while ((i < size) && (line[i] != '\\t'))\n    {\n      i += 1;\n      tab += 1;\n    }\n\n    if (i > org)\n    {\n      bufput(ob, line + org, i - org);\n    }\n    if (i >= size)\n    {\n      break;\n    }\n    do\n    {\n      bufputc(ob, ' ');\n      tab += 1;\n    }\n    while (tab % 4);\n    i += 1;\n  }\n\n}\n\n",
            "calle": [
                "bufput",
                "bufputc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "line",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *line"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tab",
                        "type": "size_t",
                        "definition": [
                            "size_t tab = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "org",
                        "type": "size_t",
                        "definition": [
                            "size_t org = i"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_tag_length_1",
            "header": "",
            "params": [
                "size_t * const i_ref",
                "size_t * const j_ref",
                "uint8_t * const data",
                "size_t size",
                "enum mkd_autolink * const autolink"
            ],
            "definition": "size_t helper_tag_length_1(size_t * const i_ref, size_t * const j_ref, uint8_t * const data, size_t size, enum mkd_autolink * const autolink)\n{\n  size_t i = *i_ref;\n  size_t j = *j_ref;\n  j = i;\n  while (i < size)\n  {\n    if (data[i] == '\\\\')\n    {\n      i += 2;\n    }\n    else\n      if (((((data[i] == '>') || (data[i] == '\\'')) || (data[i] == '\"')) || (data[i] == ' ')) || (data[i] == '\\n'))\n    {\n      break;\n    }\n    else\n      i++;\n    i += 1;\n  }\n\n  if (i >= size)\n  {\n    return 0;\n  }\n  if ((i > j) && (data[i] == '>'))\n  {\n    return i + 1;\n  }\n  *autolink = MKDA_NOT_AUTOLINK;\n  *i_ref = i;\n  *j_ref = j;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t * const",
                        "definition": [
                            "uint8_t * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "autolink",
                        "type": "enum mkd_autolink * const",
                        "definition": [
                            "enum mkd_autolink * const autolink"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j = *j_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_find_emph_char_1",
            "header": "",
            "params": [
                "size_t * const i_ref",
                "uint8_t * const data",
                "size_t size",
                "uint8_t c"
            ],
            "definition": "size_t helper_find_emph_char_1(size_t * const i_ref, uint8_t * const data, size_t size, uint8_t c)\n{\n  size_t i = *i_ref;\n  while ((((i < size) && (data[i] != c)) && (data[i] != '`')) && (data[i] != '['))\n    i++;\n\n  i += 1;\n  if (i == size)\n  {\n    return 0;\n  }\n  if ((((i < size) && (c == '<')) && (data[i] == c)) && (data[i - 1] == '!'))\n  {\n    return i;\n  }\n  if (data[i] == c)\n  {\n    return i;\n  }\n  if (i && (data[i - 1] == '\\\\'))\n  {\n    i += 1;\n    continue;\n  }\n  if (data[i] == '`')\n  {\n    helper_helper_find_emph_char_1_1(data, size, c, i);\n  }\n  else\n    if (data[i] == '[')\n  {\n    helper_helper_find_emph_char_1_2(data, size, c, i);\n  }\n  *i_ref = i;\n}\n\n",
            "calle": [
                "helper_helper_find_emph_char_1_1",
                "helper_helper_find_emph_char_1_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t * const",
                        "definition": [
                            "uint8_t * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_char_link_1",
            "header": "",
            "params": [
                "size_t * const i_ref",
                "unsigned int * const link_idx_ref",
                "unsigned int * const title_idx_ref",
                "struct sd_markdown * const rndr",
                "uint8_t * const data",
                "size_t txt_e",
                "int text_has_nl"
            ],
            "definition": "void helper_char_link_1(size_t * const i_ref, unsigned int * const link_idx_ref, unsigned int * const title_idx_ref, struct sd_markdown * const rndr, uint8_t * const data, size_t txt_e, int text_has_nl)\n{\n  size_t i = *i_ref;\n  unsigned int link_idx = *link_idx_ref;\n  unsigned int title_idx = *title_idx_ref;\n  struct buf id = {0, 0, 0, 0};\n  struct link_ref *lr;\n  unsigned int lr_idx = 0;\n  if (text_has_nl)\n  {\n    struct buf *b = rndr_newbuf(rndr, 1);\n    size_t j;\n    for (j = 1; j < txt_e; j += 1)\n    {\n      if (data[j] != '\\n')\n      {\n        bufputc(b, data[j]);\n      }\n      else\n        if (data[j - 1] != ' ')\n      {\n        bufputc(b, ' ');\n      }\n    }\n\n    id.data = b->data;\n    id.size = b->size;\n  }\n  else\n  {\n    id.data = data + 1;\n    id.size = txt_e - 1;\n  }\n  lr_idx = find_link_ref(rndr->refs, id.data, id.size);\n  if (!(&lr[lr_idx]))\n  {\n    goto cleanup;\n  }\n  link_idx = lr->link_idx;\n  title_idx = lr->title_idx;\n  i = txt_e + 1;\n  *i_ref = i;\n  *link_idx_ref = link_idx;\n  *title_idx_ref = title_idx;\n}\n\n",
            "calle": [
                "bufputc",
                "find_link_ref",
                "rndr_newbuf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const link_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "title_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const title_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown * const",
                        "definition": [
                            "struct sd_markdown * const rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t * const",
                        "definition": [
                            "uint8_t * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "txt_e",
                        "type": "size_t",
                        "definition": [
                            "size_t txt_e"
                        ]
                    },
                    {
                        "path": null,
                        "name": "text_has_nl",
                        "type": "int",
                        "definition": [
                            "int text_has_nl"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int link_idx = *link_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "title_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int title_idx = *title_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "struct buf",
                        "definition": [
                            "struct buf id = {0, 0, 0, 0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct link_ref",
                        "type": "struct link_ref *",
                        "definition": [
                            "struct link_ref *lr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int lr_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *b = rndr_newbuf(rndr, 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_char_link_2",
            "header": "",
            "params": [
                "size_t * const size_ref",
                "size_t * const i_ref",
                "size_t * const link_b_ref",
                "size_t * const link_e_ref",
                "unsigned int * const link_idx_ref",
                "unsigned int * const title_idx_ref",
                "struct sd_markdown * const rndr",
                "uint8_t * const data",
                "size_t txt_e",
                "int text_has_nl"
            ],
            "definition": "void helper_char_link_2(size_t * const size_ref, size_t * const i_ref, size_t * const link_b_ref, size_t * const link_e_ref, unsigned int * const link_idx_ref, unsigned int * const title_idx_ref, struct sd_markdown * const rndr, uint8_t * const data, size_t txt_e, int text_has_nl)\n{\n  size_t size = *size_ref;\n  size_t i = *i_ref;\n  size_t link_b = *link_b_ref;\n  size_t link_e = *link_e_ref;\n  unsigned int link_idx = *link_idx_ref;\n  unsigned int title_idx = *title_idx_ref;\n  struct buf id = {0, 0, 0, 0};\n  struct link_ref *lr;\n  unsigned int lr_idx = 0;\n  i += 1;\n  link_b = i;\n  while ((i < size) && (data[i] != ']'))\n    i++;\n\n  i += 1;\n  if (i >= size)\n  {\n    goto cleanup;\n  }\n  link_e = i;\n  if (link_b == link_e)\n  {\n    helper_helper_char_link_2_1(&id, rndr, data, txt_e, text_has_nl);\n  }\n  else\n  {\n    id.data = data + link_b;\n    id.size = link_e - link_b;\n  }\n  lr_idx = find_link_ref(rndr->refs, id.data, id.size);\n  if (!(&lr[lr_idx]))\n  {\n    goto cleanup;\n  }\n  link_idx = lr->link_idx;\n  title_idx = lr->title_idx;\n  i++;\n  *size_ref = size;\n  *i_ref = i;\n  *link_b_ref = link_b;\n  *link_e_ref = link_e;\n  *link_idx_ref = link_idx;\n  *title_idx_ref = title_idx;\n}\n\n",
            "calle": [
                "find_link_ref",
                "helper_helper_char_link_2_1"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_b_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const link_b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_e_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const link_e_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const link_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "title_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const title_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown * const",
                        "definition": [
                            "struct sd_markdown * const rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t * const",
                        "definition": [
                            "uint8_t * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "txt_e",
                        "type": "size_t",
                        "definition": [
                            "size_t txt_e"
                        ]
                    },
                    {
                        "path": null,
                        "name": "text_has_nl",
                        "type": "int",
                        "definition": [
                            "int text_has_nl"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size = *size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_b",
                        "type": "size_t",
                        "definition": [
                            "size_t link_b = *link_b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_e",
                        "type": "size_t",
                        "definition": [
                            "size_t link_e = *link_e_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int link_idx = *link_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "title_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int title_idx = *title_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "struct buf",
                        "definition": [
                            "struct buf id = {0, 0, 0, 0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct link_ref",
                        "type": "struct link_ref *",
                        "definition": [
                            "struct link_ref *lr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "lr_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int lr_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_char_link_3",
            "header": "",
            "params": [
                "size_t * const i_ref",
                "size_t * const link_b_ref",
                "size_t * const link_e_ref",
                "size_t * const title_b_ref",
                "size_t * const title_e_ref",
                "unsigned int * const link_idx_ref",
                "unsigned int * const title_idx_ref",
                "int * const in_title_ref",
                "int * const qtype_ref",
                "struct sd_markdown * const rndr",
                "uint8_t * const data",
                "size_t size",
                "struct buf * const link",
                "struct buf * const title"
            ],
            "definition": "void helper_char_link_3(size_t * const i_ref, size_t * const link_b_ref, size_t * const link_e_ref, size_t * const title_b_ref, size_t * const title_e_ref, unsigned int * const link_idx_ref, unsigned int * const title_idx_ref, int * const in_title_ref, int * const qtype_ref, struct sd_markdown * const rndr, uint8_t * const data, size_t size, struct buf * const link, struct buf * const title)\n{\n  size_t i = *i_ref;\n  size_t link_b = *link_b_ref;\n  size_t link_e = *link_e_ref;\n  size_t title_b = *title_b_ref;\n  size_t title_e = *title_e_ref;\n  unsigned int link_idx = *link_idx_ref;\n  unsigned int title_idx = *title_idx_ref;\n  int in_title = *in_title_ref;\n  int qtype = *qtype_ref;\n  i += 1;\n  while ((i < size) && _isspace(data[i]))\n    i++;\n\n  i += 1;\n  link_b = i;\n  while (i < size)\n  {\n    if (data[i] == '\\\\')\n    {\n      i += 2;\n    }\n    else\n      if (data[i] == ')')\n    {\n      break;\n    }\n    else\n      if (((i >= 1) && _isspace(data[i - 1])) && ((data[i] == '\\'') || (data[i] == '\"')))\n    {\n      break;\n    }\n    else\n      i++;\n    i += 1;\n  }\n\n  if (i >= size)\n  {\n    goto cleanup;\n  }\n  link_e = i;\n  if ((data[i] == '\\'') || (data[i] == '\"'))\n  {\n    helper_helper_char_link_3_1(&i, &link_e, &title_b, &title_e, &in_title, &qtype, data, size);\n  }\n  while ((link_e > link_b) && _isspace(data[link_e - 1]))\n    link_e--;\n\n  link_e -= 1;\n  if (data[link_b] == '<')\n  {\n    link_b += 1;\n  }\n  if (data[link_e - 1] == '>')\n  {\n    link_e -= 1;\n  }\n  if (link_e > link_b)\n  {\n    link_idx = rndr_newbuf(rndr, 1);\n    bufput(link, data + link_b, link_e - link_b);\n  }\n  if (title_e > title_b)\n  {\n    title_idx = rndr_newbuf(rndr, 1);\n    bufput(title, data + title_b, title_e - title_b);\n  }\n  i++;\n  *i_ref = i;\n  *link_b_ref = link_b;\n  *link_e_ref = link_e;\n  *title_b_ref = title_b;\n  *title_e_ref = title_e;\n  *link_idx_ref = link_idx;\n  *title_idx_ref = title_idx;\n  *in_title_ref = in_title;\n  *qtype_ref = qtype;\n}\n\n",
            "calle": [
                "_isspace",
                "bufput",
                "helper_helper_char_link_3_1",
                "rndr_newbuf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_b_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const link_b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_e_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const link_e_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "title_b_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const title_b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "title_e_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const title_e_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const link_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "title_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const title_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_title_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const in_title_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "qtype_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const qtype_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown * const",
                        "definition": [
                            "struct sd_markdown * const rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t * const",
                        "definition": [
                            "uint8_t * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf * const",
                        "definition": [
                            "struct buf * const link"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf * const",
                        "definition": [
                            "struct buf * const title"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_b",
                        "type": "size_t",
                        "definition": [
                            "size_t link_b = *link_b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_e",
                        "type": "size_t",
                        "definition": [
                            "size_t link_e = *link_e_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "title_b",
                        "type": "size_t",
                        "definition": [
                            "size_t title_b = *title_b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "title_e",
                        "type": "size_t",
                        "definition": [
                            "size_t title_e = *title_e_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int link_idx = *link_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "title_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int title_idx = *title_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_title",
                        "type": "int",
                        "definition": [
                            "int in_title = *in_title_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "qtype",
                        "type": "int",
                        "definition": [
                            "int qtype = *qtype_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_is_codefence_1",
            "header": "",
            "params": [
                "size_t * const i_ref",
                "size_t * const syn_len_ref",
                "unsigned int * const syn_start_idx_ref",
                "uint8_t * const data",
                "size_t size",
                "uint8_t * const syn_start"
            ],
            "definition": "size_t helper_is_codefence_1(size_t * const i_ref, size_t * const syn_len_ref, unsigned int * const syn_start_idx_ref, uint8_t * const data, size_t size, uint8_t * const syn_start)\n{\n  size_t i = *i_ref;\n  size_t syn_len = *syn_len_ref;\n  unsigned int syn_start_idx = *syn_start_idx_ref;\n  i += 1;\n  syn_start_idx += 1;\n  while (((i < size) && (data[i] != '}')) && (data[i] != '\\n'))\n  {\n    syn_len += 1;\n    i += 1;\n  }\n\n  if ((i == size) || (data[i] != '}'))\n  {\n    return 0;\n  }\n  while ((syn_len > 0) && _isspace(syn_start[0 + syn_start_idx]))\n  {\n    syn_start_idx += 1;\n    syn_len -= 1;\n  }\n\n  while ((syn_len > 0) && _isspace(syn_start[(syn_len - 1) + syn_start_idx]))\n    syn_len--;\n\n  syn_len -= 1;\n  i++;\n  *i_ref = i;\n  *syn_len_ref = syn_len;\n  *syn_start_idx_ref = syn_start_idx;\n}\n\n",
            "calle": [
                "_isspace"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "syn_len_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const syn_len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "syn_start_idx_ref",
                        "type": "unsigned int * const",
                        "definition": [
                            "unsigned int * const syn_start_idx_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t * const",
                        "definition": [
                            "uint8_t * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "syn_start",
                        "type": "uint8_t * const",
                        "definition": [
                            "uint8_t * const syn_start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "syn_len",
                        "type": "size_t",
                        "definition": [
                            "size_t syn_len = *syn_len_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "syn_start_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int syn_start_idx = *syn_start_idx_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_parse_paragraph_1",
            "header": "",
            "params": [
                "size_t * const i_ref",
                "size_t * const end_ref",
                "int * const level_ref",
                "struct buf * const ob",
                "struct sd_markdown * const rndr",
                "uint8_t * const data",
                "size_t size"
            ],
            "definition": "void helper_parse_paragraph_1(size_t * const i_ref, size_t * const end_ref, int * const level_ref, struct buf * const ob, struct sd_markdown * const rndr, uint8_t * const data, size_t size)\n{\n  size_t i = *i_ref;\n  size_t end = *end_ref;\n  int level = *level_ref;\n  for (end = i + 1; (end < size) && (data[end - 1] != '\\n'); end += 1)\n    ;\n\n  if (prefix_quote(data + i, end - i) != 0)\n  {\n    end = i;\n    break;\n  }\n  if (is_empty(data + i, size - i))\n  {\n    break;\n  }\n  if ((level = is_headerline(data + i, size - i)) != 0)\n  {\n    break;\n  }\n  if ((is_atxheader(rndr, data + i, size - i) || is_hrule(data + i, size - i)) || prefix_quote(data + i, size - i))\n  {\n    end = i;\n    break;\n  }\n  if ((rndr->ext_flags & MKDEXT_LAX_SPACING) && (!isalnum(data[i])))\n  {\n    if (prefix_oli(data + i, size - i) || prefix_uli(data + i, size - i))\n    {\n      end = i;\n      break;\n    }\n    if (((data[i] == '<') && rndr->cb.blockhtml) && parse_htmlblock(ob, rndr, data + i, size - i, 0))\n    {\n      end = i;\n      break;\n    }\n    if (((rndr->ext_flags & MKDEXT_FENCED_CODE) != 0) && (is_codefence(data + i, size - i, 0) != 0))\n    {\n      end = i;\n      break;\n    }\n  }\n  i = end;\n  *i_ref = i;\n  *end_ref = end;\n  *level_ref = level;\n}\n\n",
            "calle": [
                "is_atxheader",
                "is_codefence",
                "is_empty",
                "is_headerline",
                "is_hrule",
                "isalnum",
                "parse_htmlblock",
                "prefix_oli",
                "prefix_quote",
                "prefix_uli"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const level_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf * const",
                        "definition": [
                            "struct buf * const ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown * const",
                        "definition": [
                            "struct sd_markdown * const rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t * const",
                        "definition": [
                            "uint8_t * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "size_t",
                        "definition": [
                            "size_t end = *end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "int",
                        "definition": [
                            "int level = *level_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_parse_paragraph_2",
            "header": "",
            "params": [
                "size_t * const i_ref",
                "struct buf * const work_ref",
                "struct buf * const ob",
                "struct sd_markdown * const rndr",
                "uint8_t * const data",
                "int level"
            ],
            "definition": "void helper_parse_paragraph_2(size_t * const i_ref, struct buf * const work_ref, struct buf * const ob, struct sd_markdown * const rndr, uint8_t * const data, int level)\n{\n  size_t i = *i_ref;\n  struct buf work = *work_ref;\n  struct buf *header_work;\n  unsigned int header_work_idx = 0;\n  if (work.size)\n  {\n    size_t beg;\n    i = work.size;\n    work.size -= 1;\n    while (work.size && (data[work.size] != '\\n'))\n      work.size -= 1;\n\n    beg = work.size + 1;\n    while (work.size && (data[work.size - 1] == '\\n'))\n      work.size -= 1;\n\n    if (work.size > 0)\n    {\n      struct buf *tmp = rndr_newbuf(rndr, 0);\n      parse_inline(tmp, rndr, work.data, work.size);\n      if (rndr->cb.paragraph)\n      {\n        rndr->cb.paragraph(ob, tmp, rndr->opaque);\n      }\n      rndr_popbuf(rndr, 0);\n      work.data += beg;\n      work.size = i - beg;\n    }\n    else\n      work.size = i;\n  }\n  header_work_idx = rndr_newbuf(rndr, 1);\n  parse_inline(header_work, rndr, work.data, work.size);\n  if (rndr->cb.header)\n  {\n    rndr->cb.header(ob, header_work, (int) level, rndr->opaque);\n  }\n  rndr_popbuf(rndr, 1);\n  *i_ref = i;\n  *work_ref = work;\n}\n\n",
            "calle": [
                "parse_inline",
                "rndr->cb.header",
                "rndr->cb.paragraph",
                "rndr_newbuf",
                "rndr_popbuf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf * const",
                        "definition": [
                            "struct buf * const work_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf * const",
                        "definition": [
                            "struct buf * const ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown * const",
                        "definition": [
                            "struct sd_markdown * const rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t * const",
                        "definition": [
                            "uint8_t * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "level",
                        "type": "int",
                        "definition": [
                            "int level"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "work",
                        "type": "struct buf",
                        "definition": [
                            "struct buf work = *work_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *header_work"
                        ]
                    },
                    {
                        "path": null,
                        "name": "header_work_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int header_work_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "beg",
                        "type": "size_t",
                        "definition": [
                            "size_t beg"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *tmp = rndr_newbuf(rndr, 0)"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_parse_listitem_1",
            "header": "",
            "params": [
                "size_t * const beg_ref",
                "size_t * const end_ref",
                "size_t * const pre_ref",
                "size_t * const sublist_ref",
                "size_t * const i_ref",
                "int * const in_empty_ref",
                "int * const has_inside_empty_ref",
                "int * const in_fence_ref",
                "struct sd_markdown * const rndr",
                "uint8_t * const data",
                "size_t size",
                "int * const flags",
                "struct buf * const work",
                "size_t orgpre"
            ],
            "definition": "void helper_parse_listitem_1(size_t * const beg_ref, size_t * const end_ref, size_t * const pre_ref, size_t * const sublist_ref, size_t * const i_ref, int * const in_empty_ref, int * const has_inside_empty_ref, int * const in_fence_ref, struct sd_markdown * const rndr, uint8_t * const data, size_t size, int * const flags, struct buf * const work, size_t orgpre)\n{\n  size_t beg = *beg_ref;\n  size_t end = *end_ref;\n  size_t pre = *pre_ref;\n  size_t sublist = *sublist_ref;\n  size_t i = *i_ref;\n  int in_empty = *in_empty_ref;\n  int has_inside_empty = *has_inside_empty_ref;\n  int in_fence = *in_fence_ref;\n  size_t has_next_uli = 0;\n  size_t has_next_oli = 0;\n  end += 1;\n  while ((end < size) && (data[end - 1] != '\\n'))\n    end++;\n\n  end += 1;\n  if (is_empty(data + beg, end - beg))\n  {\n    in_empty = 1;\n    beg = end;\n    continue;\n  }\n  i = 0;\n  while (((i < 4) && ((beg + i) < end)) && (data[beg + i] == ' '))\n    i++;\n\n  i += 1;\n  pre = i;\n  if (rndr->ext_flags & MKDEXT_FENCED_CODE)\n  {\n    if (is_codefence((data + beg) + i, (end - beg) - i, 0) != 0)\n    {\n      in_fence = !in_fence;\n    }\n  }\n  if (!in_fence)\n  {\n    has_next_uli = prefix_uli((data + beg) + i, (end - beg) - i);\n    has_next_oli = prefix_oli((data + beg) + i, (end - beg) - i);\n  }\n  if (in_empty && ((((*flags) & 1) && has_next_uli) || ((!((*flags) & 1)) && has_next_oli)))\n  {\n    *flags |= 8;\n    break;\n  }\n  if ((has_next_uli && (!is_hrule((data + beg) + i, (end - beg) - i))) || has_next_oli)\n  {\n    if (in_empty)\n    {\n      has_inside_empty = 1;\n    }\n    if (pre == orgpre)\n    {\n      break;\n    }\n    if (!sublist)\n    {\n      sublist = work->size;\n    }\n  }\n  else\n    if (in_empty && (pre == 0))\n  {\n    *flags |= 8;\n    break;\n  }\n  else\n    if (in_empty)\n  {\n    bufputc(work, '\\n');\n    has_inside_empty = 1;\n  }\n  in_empty = 0;\n  bufput(work, (data + beg) + i, (end - beg) - i);\n  beg = end;\n  *beg_ref = beg;\n  *end_ref = end;\n  *pre_ref = pre;\n  *sublist_ref = sublist;\n  *i_ref = i;\n  *in_empty_ref = in_empty;\n  *has_inside_empty_ref = has_inside_empty;\n  *in_fence_ref = in_fence;\n}\n\n",
            "calle": [
                "bufput",
                "bufputc",
                "is_codefence",
                "is_empty",
                "is_hrule",
                "prefix_oli",
                "prefix_uli"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "beg_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const beg_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pre_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const pre_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sublist_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const sublist_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_empty_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const in_empty_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "has_inside_empty_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const has_inside_empty_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_fence_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const in_fence_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown * const",
                        "definition": [
                            "struct sd_markdown * const rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t * const",
                        "definition": [
                            "uint8_t * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "int * const",
                        "definition": [
                            "int * const flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf * const",
                        "definition": [
                            "struct buf * const work"
                        ]
                    },
                    {
                        "path": null,
                        "name": "orgpre",
                        "type": "size_t",
                        "definition": [
                            "size_t orgpre"
                        ]
                    },
                    {
                        "path": null,
                        "name": "beg",
                        "type": "size_t",
                        "definition": [
                            "size_t beg = *beg_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "size_t",
                        "definition": [
                            "size_t end = *end_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "pre",
                        "type": "size_t",
                        "definition": [
                            "size_t pre = *pre_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sublist",
                        "type": "size_t",
                        "definition": [
                            "size_t sublist = *sublist_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_empty",
                        "type": "int",
                        "definition": [
                            "int in_empty = *in_empty_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "has_inside_empty",
                        "type": "int",
                        "definition": [
                            "int has_inside_empty = *has_inside_empty_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_fence",
                        "type": "int",
                        "definition": [
                            "int in_fence = *in_fence_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "has_next_uli",
                        "type": "size_t",
                        "definition": [
                            "size_t has_next_uli = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "has_next_oli",
                        "type": "size_t",
                        "definition": [
                            "size_t has_next_oli = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_parse_htmlblock_1",
            "header": "",
            "params": [
                "size_t * const size_ref",
                "size_t * const i_ref",
                "size_t * const j_ref",
                "struct buf * const work_ref",
                "struct buf * const ob",
                "struct sd_markdown * const rndr",
                "uint8_t * const data",
                "int do_render"
            ],
            "definition": "size_t helper_parse_htmlblock_1(size_t * const size_ref, size_t * const i_ref, size_t * const j_ref, struct buf * const work_ref, struct buf * const ob, struct sd_markdown * const rndr, uint8_t * const data, int do_render)\n{\n  size_t size = *size_ref;\n  size_t i = *i_ref;\n  size_t j = *j_ref;\n  struct buf work = *work_ref;\n  if ((((size > 5) && (data[1] == '!')) && (data[2] == '-')) && (data[3] == '-'))\n  {\n    i = 5;\n    while ((i < size) && (!(((data[i - 2] == '-') && (data[i - 1] == '-')) && (data[i] == '>'))))\n      i++;\n\n    i += 1;\n    i += 1;\n    if (i < size)\n    {\n      j = is_empty(data + i, size - i);\n    }\n    if (j)\n    {\n      work.size = i + j;\n      if (do_render && rndr->cb.blockhtml)\n        rndr->cb.blockhtml(ob, &work, rndr->opaque);\n      return work.size;\n    }\n  }\n  if (((size > 4) && ((data[1] == 'h') || (data[1] == 'H'))) && ((data[2] == 'r') || (data[2] == 'R')))\n  {\n    i = 3;\n    while ((i < size) && (data[i] != '>'))\n      i++;\n\n    i += 1;\n    if ((i + 1) < size)\n    {\n      i++;\n      j = is_empty(data + i, size - i);\n      if (j)\n      {\n        work.size = i + j;\n        if (do_render && rndr->cb.blockhtml)\n          rndr->cb.blockhtml(ob, &work, rndr->opaque);\n        return work.size;\n      }\n    }\n  }\n  return 0;\n  *size_ref = size;\n  *i_ref = i;\n  *j_ref = j;\n  *work_ref = work;\n}\n\n",
            "calle": [
                "is_empty",
                "rndr->cb.blockhtml"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "size_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf * const",
                        "definition": [
                            "struct buf * const work_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf * const",
                        "definition": [
                            "struct buf * const ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown * const",
                        "definition": [
                            "struct sd_markdown * const rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t * const",
                        "definition": [
                            "uint8_t * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "do_render",
                        "type": "int",
                        "definition": [
                            "int do_render"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size = *size_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j = *j_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "work",
                        "type": "struct buf",
                        "definition": [
                            "struct buf work = *work_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_parse_table_row_1",
            "header": "",
            "params": [
                "size_t * const i_ref",
                "struct sd_markdown * const rndr",
                "uint8_t * const data",
                "size_t size",
                "int * const col_data",
                "int header_flag",
                "size_t col",
                "struct buf * const row_work"
            ],
            "definition": "void helper_parse_table_row_1(size_t * const i_ref, struct sd_markdown * const rndr, uint8_t * const data, size_t size, int * const col_data, int header_flag, size_t col, struct buf * const row_work)\n{\n  size_t i = *i_ref;\n  size_t cell_start;\n  size_t cell_end;\n  struct buf *cell_work;\n  unsigned int cell_work_idx = 0;\n  cell_work_idx = rndr_newbuf(rndr, 1);\n  while ((i < size) && _isspace(data[i]))\n    i++;\n\n  i += 1;\n  cell_start = i;\n  while ((i < size) && (data[i] != '|'))\n    i++;\n\n  i += 1;\n  cell_end = i - 1;\n  while ((cell_end > cell_start) && _isspace(data[cell_end]))\n    cell_end--;\n\n  cell_end -= 1;\n  parse_inline(cell_work, rndr, data + cell_start, (1 + cell_end) - cell_start);\n  rndr->cb.table_cell(row_work, cell_work, col_data[col] | header_flag, rndr->opaque, 0);\n  rndr_popbuf(rndr, 1);\n  i++;\n  *i_ref = i;\n}\n\n",
            "calle": [
                "_isspace",
                "parse_inline",
                "rndr->cb.table_cell",
                "rndr_newbuf",
                "rndr_popbuf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown * const",
                        "definition": [
                            "struct sd_markdown * const rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t * const",
                        "definition": [
                            "uint8_t * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "col_data",
                        "type": "int * const",
                        "definition": [
                            "int * const col_data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "header_flag",
                        "type": "int",
                        "definition": [
                            "int header_flag"
                        ]
                    },
                    {
                        "path": null,
                        "name": "col",
                        "type": "size_t",
                        "definition": [
                            "size_t col"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf * const",
                        "definition": [
                            "struct buf * const row_work"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cell_start",
                        "type": "size_t",
                        "definition": [
                            "size_t cell_start"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cell_end",
                        "type": "size_t",
                        "definition": [
                            "size_t cell_end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *cell_work"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cell_work_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int cell_work_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_parse_table_header_1",
            "header": "",
            "params": [
                "size_t * const i_ref",
                "size_t * const col_ref",
                "uint8_t * const data",
                "int ** const column_data",
                "size_t under_end"
            ],
            "definition": "void helper_parse_table_header_1(size_t * const i_ref, size_t * const col_ref, uint8_t * const data, int ** const column_data, size_t under_end)\n{\n  size_t i = *i_ref;\n  size_t col = *col_ref;\n  size_t dashes = 0;\n  while ((i < under_end) && (data[i] == ' '))\n    i++;\n\n  i += 1;\n  if (data[i] == ':')\n  {\n    i += 1;\n    (*column_data)[col] |= MKD_TABLE_ALIGN_L;\n    dashes += 1;\n  }\n  while ((i < under_end) && (data[i] == '-'))\n  {\n    i += 1;\n    dashes += 1;\n  }\n\n  if ((i < under_end) && (data[i] == ':'))\n  {\n    i += 1;\n    (*column_data)[col] |= MKD_TABLE_ALIGN_R;\n    dashes += 1;\n  }\n  while ((i < under_end) && (data[i] == ' '))\n    i++;\n\n  i += 1;\n  if ((i < under_end) && (data[i] != '|'))\n  {\n    break;\n  }\n  if (dashes < 1)\n    break;\n  i++;\n  *i_ref = i;\n  *col_ref = col;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "col_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const col_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t * const",
                        "definition": [
                            "uint8_t * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "column_data",
                        "type": "int ** const",
                        "definition": [
                            "int ** const column_data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "under_end",
                        "type": "size_t",
                        "definition": [
                            "size_t under_end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "col",
                        "type": "size_t",
                        "definition": [
                            "size_t col = *col_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "dashes",
                        "type": "size_t",
                        "definition": [
                            "size_t dashes = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_is_ref_1",
            "header": "",
            "params": [
                "const uint8_t * const data",
                "struct link_ref ** const refs",
                "size_t id_offset",
                "size_t id_end",
                "size_t link_offset",
                "size_t link_end",
                "size_t title_offset",
                "size_t title_end"
            ],
            "definition": "int helper_is_ref_1(const uint8_t * const data, struct link_ref ** const refs, size_t id_offset, size_t id_end, size_t link_offset, size_t link_end, size_t title_offset, size_t title_end)\n{\n  struct link_ref *ref;\n  unsigned int ref_idx = 0;\n  ref_idx = add_link_ref(refs, data + id_offset, id_end - id_offset);\n  if (!(&ref[ref_idx]))\n    return 0;\n  ref->label = bufnew(id_end - id_offset);\n  bufput(ref->label, data + id_offset, id_end - id_offset);\n  ref->link = bufnew(link_end - link_offset);\n  bufput(ref->link, data + link_offset, link_end - link_offset);\n  if (title_end > title_offset)\n  {\n    ref->title = bufnew(title_end - title_offset);\n    bufput(ref->title, data + title_offset, title_end - title_offset);\n  }\n}\n\n",
            "calle": [
                "add_link_ref",
                "bufnew",
                "bufput"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "const uint8_t * const",
                        "definition": [
                            "const uint8_t * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "refs",
                        "type": "struct link_ref ** const",
                        "definition": [
                            "struct link_ref ** const refs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id_offset",
                        "type": "size_t",
                        "definition": [
                            "size_t id_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id_end",
                        "type": "size_t",
                        "definition": [
                            "size_t id_end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_offset",
                        "type": "size_t",
                        "definition": [
                            "size_t link_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_end",
                        "type": "size_t",
                        "definition": [
                            "size_t link_end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "title_offset",
                        "type": "size_t",
                        "definition": [
                            "size_t title_offset"
                        ]
                    },
                    {
                        "path": null,
                        "name": "title_end",
                        "type": "size_t",
                        "definition": [
                            "size_t title_end"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct link_ref",
                        "type": "struct link_ref *",
                        "definition": [
                            "struct link_ref *ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ref_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ref_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_find_emph_char_1_1",
            "header": "",
            "params": [
                "uint8_t * const data",
                "size_t size",
                "uint8_t c",
                "size_t i"
            ],
            "definition": "size_t helper_helper_find_emph_char_1_1(uint8_t * const data, size_t size, uint8_t c, size_t i)\n{\n  size_t span_nb = 0;\n  size_t bt;\n  size_t tmp_i = 0;\n  while ((i < size) && (data[i] == '`'))\n  {\n    i++;\n    span_nb++;\n  }\n\n  if (i >= size)\n    return 0;\n  bt = 0;\n  while ((i < size) && (bt < span_nb))\n  {\n    if ((!tmp_i) && (data[i] == c))\n      tmp_i = i;\n    if (data[i] == '`')\n      bt++;\n    else\n      bt = 0;\n    i++;\n  }\n\n  if (i >= size)\n    return tmp_i;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t * const",
                        "definition": [
                            "uint8_t * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "span_nb",
                        "type": "size_t",
                        "definition": [
                            "size_t span_nb = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "bt",
                        "type": "size_t",
                        "definition": [
                            "size_t bt"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp_i",
                        "type": "size_t",
                        "definition": [
                            "size_t tmp_i = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_find_emph_char_1_2",
            "header": "",
            "params": [
                "uint8_t * const data",
                "size_t size",
                "uint8_t c",
                "size_t i"
            ],
            "definition": "size_t helper_helper_find_emph_char_1_2(uint8_t * const data, size_t size, uint8_t c, size_t i)\n{\n  size_t tmp_i = 0;\n  uint8_t cc;\n  i++;\n  while ((i < size) && (data[i] != ']'))\n  {\n    if ((!tmp_i) && (data[i] == c))\n      tmp_i = i;\n    i++;\n  }\n\n  i++;\n  while ((i < size) && ((data[i] == ' ') || (data[i] == '\\n')))\n    i++;\n\n  if (i >= size)\n    return tmp_i;\n  switch (data[i])\n  {\n    case '[':\n    {\n      cc = ']';\n      break;\n    }\n\n    case '(':\n    {\n      cc = ')';\n      break;\n    }\n\n    default:\n    {\n      if (tmp_i)\n        return tmp_i;\n      else\n        continue;\n    }\n\n  }\n\n  i++;\n  while ((i < size) && (data[i] != cc))\n  {\n    if ((!tmp_i) && (data[i] == c))\n      tmp_i = i;\n    i++;\n  }\n\n  if (i >= size)\n    return tmp_i;\n  i++;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t * const",
                        "definition": [
                            "uint8_t * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "c",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t c"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i"
                        ]
                    },
                    {
                        "path": null,
                        "name": "tmp_i",
                        "type": "size_t",
                        "definition": [
                            "size_t tmp_i = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "cc",
                        "type": "uint8_t",
                        "definition": [
                            "uint8_t cc"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_char_link_2_1",
            "header": "",
            "params": [
                "struct buf * const id_ref",
                "struct sd_markdown * const rndr",
                "uint8_t * const data",
                "size_t txt_e",
                "int text_has_nl"
            ],
            "definition": "void helper_helper_char_link_2_1(struct buf * const id_ref, struct sd_markdown * const rndr, uint8_t * const data, size_t txt_e, int text_has_nl)\n{\n  struct buf id = *id_ref;\n  if (text_has_nl)\n  {\n    struct buf *b = rndr_newbuf(rndr, 1);\n    size_t j;\n    for (j = 1; j < txt_e; j += 1)\n    {\n      if (data[j] != '\\n')\n      {\n        bufputc(b, data[j]);\n      }\n      else\n        if (data[j - 1] != ' ')\n      {\n        bufputc(b, ' ');\n      }\n    }\n\n    id.data = b->data;\n    id.size = b->size;\n  }\n  else\n  {\n    id.data = data + 1;\n    id.size = txt_e - 1;\n  }\n  *id_ref = id;\n}\n\n",
            "calle": [
                "bufputc",
                "rndr_newbuf"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf * const",
                        "definition": [
                            "struct buf * const id_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct sd_markdown",
                        "type": "struct sd_markdown * const",
                        "definition": [
                            "struct sd_markdown * const rndr"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t * const",
                        "definition": [
                            "uint8_t * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "txt_e",
                        "type": "size_t",
                        "definition": [
                            "size_t txt_e"
                        ]
                    },
                    {
                        "path": null,
                        "name": "text_has_nl",
                        "type": "int",
                        "definition": [
                            "int text_has_nl"
                        ]
                    },
                    {
                        "path": null,
                        "name": "id",
                        "type": "struct buf",
                        "definition": [
                            "struct buf id = *id_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *b = rndr_newbuf(rndr, 1)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "j",
                        "type": "size_t",
                        "definition": [
                            "size_t j"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_char_link_3_1",
            "header": "",
            "params": [
                "size_t * const i_ref",
                "size_t * const link_e_ref",
                "size_t * const title_b_ref",
                "size_t * const title_e_ref",
                "int * const in_title_ref",
                "int * const qtype_ref",
                "uint8_t * const data",
                "size_t size"
            ],
            "definition": "void helper_helper_char_link_3_1(size_t * const i_ref, size_t * const link_e_ref, size_t * const title_b_ref, size_t * const title_e_ref, int * const in_title_ref, int * const qtype_ref, uint8_t * const data, size_t size)\n{\n  size_t i = *i_ref;\n  size_t link_e = *link_e_ref;\n  size_t title_b = *title_b_ref;\n  size_t title_e = *title_e_ref;\n  int in_title = *in_title_ref;\n  int qtype = *qtype_ref;\n  qtype = data[i];\n  in_title = 1;\n  i += 1;\n  title_b = i;\n  while (i < size)\n  {\n    if (data[i] == '\\\\')\n    {\n      i += 2;\n    }\n    else\n      if (data[i] == qtype)\n    {\n      in_title = 0;\n      i += 1;\n    }\n    else\n      if ((data[i] == ')') && (!in_title))\n    {\n      break;\n    }\n    else\n      i++;\n    i += 1;\n  }\n\n  if (i >= size)\n  {\n    goto cleanup;\n  }\n  title_e = i - 1;\n  while ((title_e > title_b) && _isspace(data[title_e]))\n    title_e--;\n\n  title_e -= 1;\n  if ((data[title_e] != '\\'') && (data[title_e] != '\"'))\n  {\n    title_b = (title_e = 0);\n    link_e = i;\n  }\n  *i_ref = i;\n  *link_e_ref = link_e;\n  *title_b_ref = title_b;\n  *title_e_ref = title_e;\n  *in_title_ref = in_title;\n  *qtype_ref = qtype;\n}\n\n",
            "calle": [
                "_isspace"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "i_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_e_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const link_e_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "title_b_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const title_b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "title_e_ref",
                        "type": "size_t * const",
                        "definition": [
                            "size_t * const title_e_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_title_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const in_title_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "qtype_ref",
                        "type": "int * const",
                        "definition": [
                            "int * const qtype_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "data",
                        "type": "uint8_t * const",
                        "definition": [
                            "uint8_t * const data"
                        ]
                    },
                    {
                        "path": null,
                        "name": "size",
                        "type": "size_t",
                        "definition": [
                            "size_t size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "i",
                        "type": "size_t",
                        "definition": [
                            "size_t i = *i_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "link_e",
                        "type": "size_t",
                        "definition": [
                            "size_t link_e = *link_e_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "title_b",
                        "type": "size_t",
                        "definition": [
                            "size_t title_b = *title_b_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "title_e",
                        "type": "size_t",
                        "definition": [
                            "size_t title_e = *title_e_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_title",
                        "type": "int",
                        "definition": [
                            "int in_title = *in_title_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "qtype",
                        "type": "int",
                        "definition": [
                            "int qtype = *qtype_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "siphash",
            "header": "",
            "params": [
                "const uint8_t *in",
                "const size_t inlen",
                "const uint8_t *k"
            ],
            "definition": "uint64_t siphash(const uint8_t *in, const size_t inlen, const uint8_t *k)\n{\n  unsigned int in_idx = 0;\n  uint64_t hash;\n  uint8_t *out = (uint8_t *) (&hash);\n  uint64_t v0 = 0x736f6d6570736575ULL;\n  uint64_t v1 = 0x646f72616e646f6dULL;\n  uint64_t v2 = 0x6c7967656e657261ULL;\n  uint64_t v3 = 0x7465646279746573ULL;\n  uint64_t k0 = ((((((((uint64_t) k[0]) | (((uint64_t) k[1]) << 8)) | (((uint64_t) k[2]) << 16)) | (((uint64_t) k[3]) << 24)) | (((uint64_t) k[4]) << 32)) | (((uint64_t) k[5]) << 40)) | (((uint64_t) k[6]) << 48)) | (((uint64_t) k[7]) << 56);\n  uint64_t k1 = ((((((((uint64_t) (k + 8)[0]) | (((uint64_t) (k + 8)[1]) << 8)) | (((uint64_t) (k + 8)[2]) << 16)) | (((uint64_t) (k + 8)[3]) << 24)) | (((uint64_t) (k + 8)[4]) << 32)) | (((uint64_t) (k + 8)[5]) << 40)) | (((uint64_t) (k + 8)[6]) << 48)) | (((uint64_t) (k + 8)[7]) << 56);\n  uint64_t m;\n  const uint8_t *end = ((&in[in_idx]) + inlen) - (inlen % (sizeof(uint64_t)));\n  const int left = inlen & 7;\n  uint64_t b = ((uint64_t) inlen) << 56;\n  v3 ^= k1;\n  v2 ^= k0;\n  v1 ^= k1;\n  v0 ^= k0;\n  for (; (&in[in_idx]) != end; in_idx += 8)\n  {\n    helper_siphash_7(&v0, &v1, &v2, &v3, &m, in, in_idx);\n  }\n\n  switch (left)\n  {\n    case 7:\n    {\n      b |= ((uint64_t) in[6 + in_idx]) << 48;\n    }\n\n    case 6:\n    {\n      b |= ((uint64_t) in[5 + in_idx]) << 40;\n    }\n\n    case 5:\n    {\n      b |= ((uint64_t) in[4 + in_idx]) << 32;\n    }\n\n    case 4:\n    {\n      b |= ((uint64_t) in[3 + in_idx]) << 24;\n    }\n\n    case 3:\n    {\n      b |= ((uint64_t) in[2 + in_idx]) << 16;\n    }\n\n    case 2:\n    {\n      b |= ((uint64_t) in[1 + in_idx]) << 8;\n    }\n\n    case 1:\n    {\n      b |= (uint64_t) in[0 + in_idx];\n      break;\n    }\n\n    case 0:\n    {\n      break;\n    }\n\n  }\n\n  v3 ^= b;\n  do\n  {\n    helper_siphash_1(&v0, &v1, &v2, &v3);\n  }\n  while (0);\n  do\n  {\n    helper_siphash_2(&v0, &v1, &v2, &v3);\n  }\n  while (0);\n  v0 ^= b;\n  v2 ^= 0xff;\n  do\n  {\n    helper_siphash_3(&v0, &v1, &v2, &v3);\n  }\n  while (0);\n  do\n  {\n    helper_siphash_4(&v0, &v1, &v2, &v3);\n  }\n  while (0);\n  do\n  {\n    helper_siphash_5(&v0, &v1, &v2, &v3);\n  }\n  while (0);\n  do\n  {\n    helper_siphash_6(&v0, &v1, &v2, &v3);\n  }\n  while (0);\n  b = ((v0 ^ v1) ^ v2) ^ v3;\n  out[0] = (uint8_t) ((uint32_t) b);\n  out[1] = (uint8_t) (((uint32_t) b) >> 8);\n  out[2] = (uint8_t) (((uint32_t) b) >> 16);\n  out[3] = (uint8_t) (((uint32_t) b) >> 24);\n  ;\n  (out + 4)[0] = (uint8_t) ((uint32_t) (b >> 32));\n  (out + 4)[1] = (uint8_t) (((uint32_t) (b >> 32)) >> 8);\n  (out + 4)[2] = (uint8_t) (((uint32_t) (b >> 32)) >> 16);\n  (out + 4)[3] = (uint8_t) (((uint32_t) (b >> 32)) >> 24);\n  ;\n  ;\n  return hash;\n}\n\n",
            "calle": [
                "helper_siphash_1",
                "helper_siphash_2",
                "helper_siphash_3",
                "helper_siphash_4",
                "helper_siphash_5",
                "helper_siphash_6",
                "helper_siphash_7"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "in",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inlen",
                        "type": "const size_t",
                        "definition": [
                            "const size_t inlen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int in_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hash",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t hash"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *out = (uint8_t *) (&hash)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v0",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v0 = 0x736f6d6570736575ULL"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v1 = 0x646f72616e646f6dULL"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v2 = 0x6c7967656e657261ULL"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v3 = 0x7465646279746573ULL"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k0",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t k0 = ((((((((uint64_t) k[0]) | (((uint64_t) k[1]) << 8)) | (((uint64_t) k[2]) << 16)) | (((uint64_t) k[3]) << 24)) | (((uint64_t) k[4]) << 32)) | (((uint64_t) k[5]) << 40)) | (((uint64_t) k[6]) << 48)) | (((uint64_t) k[7]) << 56)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k1",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t k1 = ((((((((uint64_t) (k + 8)[0]) | (((uint64_t) (k + 8)[1]) << 8)) | (((uint64_t) (k + 8)[2]) << 16)) | (((uint64_t) (k + 8)[3]) << 24)) | (((uint64_t) (k + 8)[4]) << 32)) | (((uint64_t) (k + 8)[5]) << 40)) | (((uint64_t) (k + 8)[6]) << 48)) | (((uint64_t) (k + 8)[7]) << 56)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t m"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *end = ((&in[in_idx]) + inlen) - (inlen % (sizeof(uint64_t)))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left",
                        "type": "const int",
                        "definition": [
                            "const int left = inlen & 7"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t b = ((uint64_t) inlen) << 56"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "siphash_nocase",
            "header": "",
            "params": [
                "const uint8_t *in",
                "const size_t inlen",
                "const uint8_t *k"
            ],
            "definition": "uint64_t siphash_nocase(const uint8_t *in, const size_t inlen, const uint8_t *k)\n{\n  unsigned int in_idx = 0;\n  uint64_t hash;\n  uint8_t *out = (uint8_t *) (&hash);\n  uint64_t v0 = 0x736f6d6570736575ULL;\n  uint64_t v1 = 0x646f72616e646f6dULL;\n  uint64_t v2 = 0x6c7967656e657261ULL;\n  uint64_t v3 = 0x7465646279746573ULL;\n  uint64_t k0 = ((((((((uint64_t) k[0]) | (((uint64_t) k[1]) << 8)) | (((uint64_t) k[2]) << 16)) | (((uint64_t) k[3]) << 24)) | (((uint64_t) k[4]) << 32)) | (((uint64_t) k[5]) << 40)) | (((uint64_t) k[6]) << 48)) | (((uint64_t) k[7]) << 56);\n  uint64_t k1 = ((((((((uint64_t) (k + 8)[0]) | (((uint64_t) (k + 8)[1]) << 8)) | (((uint64_t) (k + 8)[2]) << 16)) | (((uint64_t) (k + 8)[3]) << 24)) | (((uint64_t) (k + 8)[4]) << 32)) | (((uint64_t) (k + 8)[5]) << 40)) | (((uint64_t) (k + 8)[6]) << 48)) | (((uint64_t) (k + 8)[7]) << 56);\n  uint64_t m;\n  const uint8_t *end = ((&in[in_idx]) + inlen) - (inlen % (sizeof(uint64_t)));\n  const int left = inlen & 7;\n  uint64_t b = ((uint64_t) inlen) << 56;\n  v3 ^= k1;\n  v2 ^= k0;\n  v1 ^= k1;\n  v0 ^= k0;\n  for (; (&in[in_idx]) != end; in_idx += 8)\n  {\n    helper_siphash_nocase_7(&v0, &v1, &v2, &v3, &m, in, in_idx);\n  }\n\n  switch (left)\n  {\n    case 7:\n    {\n      b |= ((uint64_t) tolower(in[6 + in_idx])) << 48;\n    }\n\n    case 6:\n    {\n      b |= ((uint64_t) tolower(in[5 + in_idx])) << 40;\n    }\n\n    case 5:\n    {\n      b |= ((uint64_t) tolower(in[4 + in_idx])) << 32;\n    }\n\n    case 4:\n    {\n      b |= ((uint64_t) tolower(in[3 + in_idx])) << 24;\n    }\n\n    case 3:\n    {\n      b |= ((uint64_t) tolower(in[2 + in_idx])) << 16;\n    }\n\n    case 2:\n    {\n      b |= ((uint64_t) tolower(in[1 + in_idx])) << 8;\n    }\n\n    case 1:\n    {\n      b |= (uint64_t) tolower(in[0 + in_idx]);\n      break;\n    }\n\n    case 0:\n    {\n      break;\n    }\n\n  }\n\n  v3 ^= b;\n  do\n  {\n    helper_siphash_nocase_1(&v0, &v1, &v2, &v3);\n  }\n  while (0);\n  do\n  {\n    helper_siphash_nocase_2(&v0, &v1, &v2, &v3);\n  }\n  while (0);\n  v0 ^= b;\n  v2 ^= 0xff;\n  do\n  {\n    helper_siphash_nocase_3(&v0, &v1, &v2, &v3);\n  }\n  while (0);\n  do\n  {\n    helper_siphash_nocase_4(&v0, &v1, &v2, &v3);\n  }\n  while (0);\n  do\n  {\n    helper_siphash_nocase_5(&v0, &v1, &v2, &v3);\n  }\n  while (0);\n  do\n  {\n    helper_siphash_nocase_6(&v0, &v1, &v2, &v3);\n  }\n  while (0);\n  b = ((v0 ^ v1) ^ v2) ^ v3;\n  out[0] = (uint8_t) ((uint32_t) b);\n  out[1] = (uint8_t) (((uint32_t) b) >> 8);\n  out[2] = (uint8_t) (((uint32_t) b) >> 16);\n  out[3] = (uint8_t) (((uint32_t) b) >> 24);\n  ;\n  (out + 4)[0] = (uint8_t) ((uint32_t) (b >> 32));\n  (out + 4)[1] = (uint8_t) (((uint32_t) (b >> 32)) >> 8);\n  (out + 4)[2] = (uint8_t) (((uint32_t) (b >> 32)) >> 16);\n  (out + 4)[3] = (uint8_t) (((uint32_t) (b >> 32)) >> 24);\n  ;\n  ;\n  return hash;\n}\n\n",
            "calle": [
                "helper_siphash_nocase_1",
                "helper_siphash_nocase_2",
                "helper_siphash_nocase_3",
                "helper_siphash_nocase_4",
                "helper_siphash_nocase_5",
                "helper_siphash_nocase_6",
                "helper_siphash_nocase_7",
                "tolower"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "in",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "inlen",
                        "type": "const size_t",
                        "definition": [
                            "const size_t inlen"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *k"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int in_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "hash",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t hash"
                        ]
                    },
                    {
                        "path": null,
                        "name": "out",
                        "type": "uint8_t *",
                        "definition": [
                            "uint8_t *out = (uint8_t *) (&hash)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v0",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v0 = 0x736f6d6570736575ULL"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v1 = 0x646f72616e646f6dULL"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v2 = 0x6c7967656e657261ULL"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v3 = 0x7465646279746573ULL"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k0",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t k0 = ((((((((uint64_t) k[0]) | (((uint64_t) k[1]) << 8)) | (((uint64_t) k[2]) << 16)) | (((uint64_t) k[3]) << 24)) | (((uint64_t) k[4]) << 32)) | (((uint64_t) k[5]) << 40)) | (((uint64_t) k[6]) << 48)) | (((uint64_t) k[7]) << 56)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "k1",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t k1 = ((((((((uint64_t) (k + 8)[0]) | (((uint64_t) (k + 8)[1]) << 8)) | (((uint64_t) (k + 8)[2]) << 16)) | (((uint64_t) (k + 8)[3]) << 24)) | (((uint64_t) (k + 8)[4]) << 32)) | (((uint64_t) (k + 8)[5]) << 40)) | (((uint64_t) (k + 8)[6]) << 48)) | (((uint64_t) (k + 8)[7]) << 56)"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t m"
                        ]
                    },
                    {
                        "path": null,
                        "name": "end",
                        "type": "const uint8_t *",
                        "definition": [
                            "const uint8_t *end = ((&in[in_idx]) + inlen) - (inlen % (sizeof(uint64_t)))"
                        ]
                    },
                    {
                        "path": null,
                        "name": "left",
                        "type": "const int",
                        "definition": [
                            "const int left = inlen & 7"
                        ]
                    },
                    {
                        "path": null,
                        "name": "b",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t b = ((uint64_t) inlen) << 56"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_siphash_1",
            "header": "",
            "params": [
                "uint64_t * const v0_ref",
                "uint64_t * const v1_ref",
                "uint64_t * const v2_ref",
                "uint64_t * const v3_ref"
            ],
            "definition": "void helper_siphash_1(uint64_t * const v0_ref, uint64_t * const v1_ref, uint64_t * const v2_ref, uint64_t * const v3_ref)\n{\n  uint64_t v0 = *v0_ref;\n  uint64_t v1 = *v1_ref;\n  uint64_t v2 = *v2_ref;\n  uint64_t v3 = *v3_ref;\n  v0 += v1;\n  v1 = (uint64_t) ((v1 << 13) | (v1 >> (64 - 13)));\n  v1 ^= v0;\n  v0 = (uint64_t) ((v0 << 32) | (v0 >> (64 - 32)));\n  v2 += v3;\n  v3 = (uint64_t) ((v3 << 16) | (v3 >> (64 - 16)));\n  v3 ^= v2;\n  v0 += v3;\n  v3 = (uint64_t) ((v3 << 21) | (v3 >> (64 - 21)));\n  v3 ^= v0;\n  v2 += v1;\n  v1 = (uint64_t) ((v1 << 17) | (v1 >> (64 - 17)));\n  v1 ^= v2;\n  v2 = (uint64_t) ((v2 << 32) | (v2 >> (64 - 32)));\n  *v0_ref = v0;\n  *v1_ref = v1;\n  *v2_ref = v2;\n  *v3_ref = v3;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "v0_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v3_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v0",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v0 = *v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v1 = *v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v2 = *v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v3 = *v3_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_siphash_2",
            "header": "",
            "params": [
                "uint64_t * const v0_ref",
                "uint64_t * const v1_ref",
                "uint64_t * const v2_ref",
                "uint64_t * const v3_ref"
            ],
            "definition": "void helper_siphash_2(uint64_t * const v0_ref, uint64_t * const v1_ref, uint64_t * const v2_ref, uint64_t * const v3_ref)\n{\n  uint64_t v0 = *v0_ref;\n  uint64_t v1 = *v1_ref;\n  uint64_t v2 = *v2_ref;\n  uint64_t v3 = *v3_ref;\n  v0 += v1;\n  v1 = (uint64_t) ((v1 << 13) | (v1 >> (64 - 13)));\n  v1 ^= v0;\n  v0 = (uint64_t) ((v0 << 32) | (v0 >> (64 - 32)));\n  v2 += v3;\n  v3 = (uint64_t) ((v3 << 16) | (v3 >> (64 - 16)));\n  v3 ^= v2;\n  v0 += v3;\n  v3 = (uint64_t) ((v3 << 21) | (v3 >> (64 - 21)));\n  v3 ^= v0;\n  v2 += v1;\n  v1 = (uint64_t) ((v1 << 17) | (v1 >> (64 - 17)));\n  v1 ^= v2;\n  v2 = (uint64_t) ((v2 << 32) | (v2 >> (64 - 32)));\n  *v0_ref = v0;\n  *v1_ref = v1;\n  *v2_ref = v2;\n  *v3_ref = v3;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "v0_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v3_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v0",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v0 = *v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v1 = *v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v2 = *v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v3 = *v3_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_siphash_3",
            "header": "",
            "params": [
                "uint64_t * const v0_ref",
                "uint64_t * const v1_ref",
                "uint64_t * const v2_ref",
                "uint64_t * const v3_ref"
            ],
            "definition": "void helper_siphash_3(uint64_t * const v0_ref, uint64_t * const v1_ref, uint64_t * const v2_ref, uint64_t * const v3_ref)\n{\n  uint64_t v0 = *v0_ref;\n  uint64_t v1 = *v1_ref;\n  uint64_t v2 = *v2_ref;\n  uint64_t v3 = *v3_ref;\n  v0 += v1;\n  v1 = (uint64_t) ((v1 << 13) | (v1 >> (64 - 13)));\n  v1 ^= v0;\n  v0 = (uint64_t) ((v0 << 32) | (v0 >> (64 - 32)));\n  v2 += v3;\n  v3 = (uint64_t) ((v3 << 16) | (v3 >> (64 - 16)));\n  v3 ^= v2;\n  v0 += v3;\n  v3 = (uint64_t) ((v3 << 21) | (v3 >> (64 - 21)));\n  v3 ^= v0;\n  v2 += v1;\n  v1 = (uint64_t) ((v1 << 17) | (v1 >> (64 - 17)));\n  v1 ^= v2;\n  v2 = (uint64_t) ((v2 << 32) | (v2 >> (64 - 32)));\n  *v0_ref = v0;\n  *v1_ref = v1;\n  *v2_ref = v2;\n  *v3_ref = v3;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "v0_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v3_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v0",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v0 = *v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v1 = *v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v2 = *v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v3 = *v3_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_siphash_4",
            "header": "",
            "params": [
                "uint64_t * const v0_ref",
                "uint64_t * const v1_ref",
                "uint64_t * const v2_ref",
                "uint64_t * const v3_ref"
            ],
            "definition": "void helper_siphash_4(uint64_t * const v0_ref, uint64_t * const v1_ref, uint64_t * const v2_ref, uint64_t * const v3_ref)\n{\n  uint64_t v0 = *v0_ref;\n  uint64_t v1 = *v1_ref;\n  uint64_t v2 = *v2_ref;\n  uint64_t v3 = *v3_ref;\n  v0 += v1;\n  v1 = (uint64_t) ((v1 << 13) | (v1 >> (64 - 13)));\n  v1 ^= v0;\n  v0 = (uint64_t) ((v0 << 32) | (v0 >> (64 - 32)));\n  v2 += v3;\n  v3 = (uint64_t) ((v3 << 16) | (v3 >> (64 - 16)));\n  v3 ^= v2;\n  v0 += v3;\n  v3 = (uint64_t) ((v3 << 21) | (v3 >> (64 - 21)));\n  v3 ^= v0;\n  v2 += v1;\n  v1 = (uint64_t) ((v1 << 17) | (v1 >> (64 - 17)));\n  v1 ^= v2;\n  v2 = (uint64_t) ((v2 << 32) | (v2 >> (64 - 32)));\n  *v0_ref = v0;\n  *v1_ref = v1;\n  *v2_ref = v2;\n  *v3_ref = v3;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "v0_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v3_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v0",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v0 = *v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v1 = *v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v2 = *v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v3 = *v3_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_siphash_5",
            "header": "",
            "params": [
                "uint64_t * const v0_ref",
                "uint64_t * const v1_ref",
                "uint64_t * const v2_ref",
                "uint64_t * const v3_ref"
            ],
            "definition": "void helper_siphash_5(uint64_t * const v0_ref, uint64_t * const v1_ref, uint64_t * const v2_ref, uint64_t * const v3_ref)\n{\n  uint64_t v0 = *v0_ref;\n  uint64_t v1 = *v1_ref;\n  uint64_t v2 = *v2_ref;\n  uint64_t v3 = *v3_ref;\n  v0 += v1;\n  v1 = (uint64_t) ((v1 << 13) | (v1 >> (64 - 13)));\n  v1 ^= v0;\n  v0 = (uint64_t) ((v0 << 32) | (v0 >> (64 - 32)));\n  v2 += v3;\n  v3 = (uint64_t) ((v3 << 16) | (v3 >> (64 - 16)));\n  v3 ^= v2;\n  v0 += v3;\n  v3 = (uint64_t) ((v3 << 21) | (v3 >> (64 - 21)));\n  v3 ^= v0;\n  v2 += v1;\n  v1 = (uint64_t) ((v1 << 17) | (v1 >> (64 - 17)));\n  v1 ^= v2;\n  v2 = (uint64_t) ((v2 << 32) | (v2 >> (64 - 32)));\n  *v0_ref = v0;\n  *v1_ref = v1;\n  *v2_ref = v2;\n  *v3_ref = v3;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "v0_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v3_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v0",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v0 = *v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v1 = *v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v2 = *v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v3 = *v3_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_siphash_6",
            "header": "",
            "params": [
                "uint64_t * const v0_ref",
                "uint64_t * const v1_ref",
                "uint64_t * const v2_ref",
                "uint64_t * const v3_ref"
            ],
            "definition": "void helper_siphash_6(uint64_t * const v0_ref, uint64_t * const v1_ref, uint64_t * const v2_ref, uint64_t * const v3_ref)\n{\n  uint64_t v0 = *v0_ref;\n  uint64_t v1 = *v1_ref;\n  uint64_t v2 = *v2_ref;\n  uint64_t v3 = *v3_ref;\n  v0 += v1;\n  v1 = (uint64_t) ((v1 << 13) | (v1 >> (64 - 13)));\n  v1 ^= v0;\n  v0 = (uint64_t) ((v0 << 32) | (v0 >> (64 - 32)));\n  v2 += v3;\n  v3 = (uint64_t) ((v3 << 16) | (v3 >> (64 - 16)));\n  v3 ^= v2;\n  v0 += v3;\n  v3 = (uint64_t) ((v3 << 21) | (v3 >> (64 - 21)));\n  v3 ^= v0;\n  v2 += v1;\n  v1 = (uint64_t) ((v1 << 17) | (v1 >> (64 - 17)));\n  v1 ^= v2;\n  v2 = (uint64_t) ((v2 << 32) | (v2 >> (64 - 32)));\n  *v0_ref = v0;\n  *v1_ref = v1;\n  *v2_ref = v2;\n  *v3_ref = v3;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "v0_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v3_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v0",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v0 = *v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v1 = *v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v2 = *v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v3 = *v3_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_siphash_7",
            "header": "",
            "params": [
                "uint64_t * const v0_ref",
                "uint64_t * const v1_ref",
                "uint64_t * const v2_ref",
                "uint64_t * const v3_ref",
                "uint64_t * const m_ref",
                "const uint8_t * const in",
                "unsigned int in_idx"
            ],
            "definition": "void helper_siphash_7(uint64_t * const v0_ref, uint64_t * const v1_ref, uint64_t * const v2_ref, uint64_t * const v3_ref, uint64_t * const m_ref, const uint8_t * const in, unsigned int in_idx)\n{\n  uint64_t v0 = *v0_ref;\n  uint64_t v1 = *v1_ref;\n  uint64_t v2 = *v2_ref;\n  uint64_t v3 = *v3_ref;\n  uint64_t m = *m_ref;\n  m = ((((((((uint64_t) in[0 + in_idx]) | (((uint64_t) in[1 + in_idx]) << 8)) | (((uint64_t) in[2 + in_idx]) << 16)) | (((uint64_t) in[3 + in_idx]) << 24)) | (((uint64_t) in[4 + in_idx]) << 32)) | (((uint64_t) in[5 + in_idx]) << 40)) | (((uint64_t) in[6 + in_idx]) << 48)) | (((uint64_t) in[7 + in_idx]) << 56);\n  v3 ^= m;\n  do\n  {\n    helper_helper_siphash_7_1(&v0, &v1, &v2, &v3);\n  }\n  while (0);\n  do\n  {\n    helper_helper_siphash_7_2(&v0, &v1, &v2, &v3);\n  }\n  while (0);\n  v0 ^= m;\n  *v0_ref = v0;\n  *v1_ref = v1;\n  *v2_ref = v2;\n  *v3_ref = v3;\n  *m_ref = m;\n}\n\n",
            "calle": [
                "helper_helper_siphash_7_1",
                "helper_helper_siphash_7_2"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "v0_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v3_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const m_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const uint8_t * const",
                        "definition": [
                            "const uint8_t * const in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int in_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v0",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v0 = *v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v1 = *v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v2 = *v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v3 = *v3_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t m = *m_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_siphash_nocase_1",
            "header": "",
            "params": [
                "uint64_t * const v0_ref",
                "uint64_t * const v1_ref",
                "uint64_t * const v2_ref",
                "uint64_t * const v3_ref"
            ],
            "definition": "void helper_siphash_nocase_1(uint64_t * const v0_ref, uint64_t * const v1_ref, uint64_t * const v2_ref, uint64_t * const v3_ref)\n{\n  uint64_t v0 = *v0_ref;\n  uint64_t v1 = *v1_ref;\n  uint64_t v2 = *v2_ref;\n  uint64_t v3 = *v3_ref;\n  v0 += v1;\n  v1 = (uint64_t) ((v1 << 13) | (v1 >> (64 - 13)));\n  v1 ^= v0;\n  v0 = (uint64_t) ((v0 << 32) | (v0 >> (64 - 32)));\n  v2 += v3;\n  v3 = (uint64_t) ((v3 << 16) | (v3 >> (64 - 16)));\n  v3 ^= v2;\n  v0 += v3;\n  v3 = (uint64_t) ((v3 << 21) | (v3 >> (64 - 21)));\n  v3 ^= v0;\n  v2 += v1;\n  v1 = (uint64_t) ((v1 << 17) | (v1 >> (64 - 17)));\n  v1 ^= v2;\n  v2 = (uint64_t) ((v2 << 32) | (v2 >> (64 - 32)));\n  *v0_ref = v0;\n  *v1_ref = v1;\n  *v2_ref = v2;\n  *v3_ref = v3;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "v0_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v3_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v0",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v0 = *v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v1 = *v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v2 = *v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v3 = *v3_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_siphash_nocase_2",
            "header": "",
            "params": [
                "uint64_t * const v0_ref",
                "uint64_t * const v1_ref",
                "uint64_t * const v2_ref",
                "uint64_t * const v3_ref"
            ],
            "definition": "void helper_siphash_nocase_2(uint64_t * const v0_ref, uint64_t * const v1_ref, uint64_t * const v2_ref, uint64_t * const v3_ref)\n{\n  uint64_t v0 = *v0_ref;\n  uint64_t v1 = *v1_ref;\n  uint64_t v2 = *v2_ref;\n  uint64_t v3 = *v3_ref;\n  v0 += v1;\n  v1 = (uint64_t) ((v1 << 13) | (v1 >> (64 - 13)));\n  v1 ^= v0;\n  v0 = (uint64_t) ((v0 << 32) | (v0 >> (64 - 32)));\n  v2 += v3;\n  v3 = (uint64_t) ((v3 << 16) | (v3 >> (64 - 16)));\n  v3 ^= v2;\n  v0 += v3;\n  v3 = (uint64_t) ((v3 << 21) | (v3 >> (64 - 21)));\n  v3 ^= v0;\n  v2 += v1;\n  v1 = (uint64_t) ((v1 << 17) | (v1 >> (64 - 17)));\n  v1 ^= v2;\n  v2 = (uint64_t) ((v2 << 32) | (v2 >> (64 - 32)));\n  *v0_ref = v0;\n  *v1_ref = v1;\n  *v2_ref = v2;\n  *v3_ref = v3;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "v0_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v3_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v0",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v0 = *v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v1 = *v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v2 = *v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v3 = *v3_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_siphash_nocase_3",
            "header": "",
            "params": [
                "uint64_t * const v0_ref",
                "uint64_t * const v1_ref",
                "uint64_t * const v2_ref",
                "uint64_t * const v3_ref"
            ],
            "definition": "void helper_siphash_nocase_3(uint64_t * const v0_ref, uint64_t * const v1_ref, uint64_t * const v2_ref, uint64_t * const v3_ref)\n{\n  uint64_t v0 = *v0_ref;\n  uint64_t v1 = *v1_ref;\n  uint64_t v2 = *v2_ref;\n  uint64_t v3 = *v3_ref;\n  v0 += v1;\n  v1 = (uint64_t) ((v1 << 13) | (v1 >> (64 - 13)));\n  v1 ^= v0;\n  v0 = (uint64_t) ((v0 << 32) | (v0 >> (64 - 32)));\n  v2 += v3;\n  v3 = (uint64_t) ((v3 << 16) | (v3 >> (64 - 16)));\n  v3 ^= v2;\n  v0 += v3;\n  v3 = (uint64_t) ((v3 << 21) | (v3 >> (64 - 21)));\n  v3 ^= v0;\n  v2 += v1;\n  v1 = (uint64_t) ((v1 << 17) | (v1 >> (64 - 17)));\n  v1 ^= v2;\n  v2 = (uint64_t) ((v2 << 32) | (v2 >> (64 - 32)));\n  *v0_ref = v0;\n  *v1_ref = v1;\n  *v2_ref = v2;\n  *v3_ref = v3;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "v0_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v3_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v0",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v0 = *v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v1 = *v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v2 = *v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v3 = *v3_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_siphash_nocase_4",
            "header": "",
            "params": [
                "uint64_t * const v0_ref",
                "uint64_t * const v1_ref",
                "uint64_t * const v2_ref",
                "uint64_t * const v3_ref"
            ],
            "definition": "void helper_siphash_nocase_4(uint64_t * const v0_ref, uint64_t * const v1_ref, uint64_t * const v2_ref, uint64_t * const v3_ref)\n{\n  uint64_t v0 = *v0_ref;\n  uint64_t v1 = *v1_ref;\n  uint64_t v2 = *v2_ref;\n  uint64_t v3 = *v3_ref;\n  v0 += v1;\n  v1 = (uint64_t) ((v1 << 13) | (v1 >> (64 - 13)));\n  v1 ^= v0;\n  v0 = (uint64_t) ((v0 << 32) | (v0 >> (64 - 32)));\n  v2 += v3;\n  v3 = (uint64_t) ((v3 << 16) | (v3 >> (64 - 16)));\n  v3 ^= v2;\n  v0 += v3;\n  v3 = (uint64_t) ((v3 << 21) | (v3 >> (64 - 21)));\n  v3 ^= v0;\n  v2 += v1;\n  v1 = (uint64_t) ((v1 << 17) | (v1 >> (64 - 17)));\n  v1 ^= v2;\n  v2 = (uint64_t) ((v2 << 32) | (v2 >> (64 - 32)));\n  *v0_ref = v0;\n  *v1_ref = v1;\n  *v2_ref = v2;\n  *v3_ref = v3;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "v0_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v3_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v0",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v0 = *v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v1 = *v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v2 = *v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v3 = *v3_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_siphash_nocase_5",
            "header": "",
            "params": [
                "uint64_t * const v0_ref",
                "uint64_t * const v1_ref",
                "uint64_t * const v2_ref",
                "uint64_t * const v3_ref"
            ],
            "definition": "void helper_siphash_nocase_5(uint64_t * const v0_ref, uint64_t * const v1_ref, uint64_t * const v2_ref, uint64_t * const v3_ref)\n{\n  uint64_t v0 = *v0_ref;\n  uint64_t v1 = *v1_ref;\n  uint64_t v2 = *v2_ref;\n  uint64_t v3 = *v3_ref;\n  v0 += v1;\n  v1 = (uint64_t) ((v1 << 13) | (v1 >> (64 - 13)));\n  v1 ^= v0;\n  v0 = (uint64_t) ((v0 << 32) | (v0 >> (64 - 32)));\n  v2 += v3;\n  v3 = (uint64_t) ((v3 << 16) | (v3 >> (64 - 16)));\n  v3 ^= v2;\n  v0 += v3;\n  v3 = (uint64_t) ((v3 << 21) | (v3 >> (64 - 21)));\n  v3 ^= v0;\n  v2 += v1;\n  v1 = (uint64_t) ((v1 << 17) | (v1 >> (64 - 17)));\n  v1 ^= v2;\n  v2 = (uint64_t) ((v2 << 32) | (v2 >> (64 - 32)));\n  *v0_ref = v0;\n  *v1_ref = v1;\n  *v2_ref = v2;\n  *v3_ref = v3;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "v0_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v3_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v0",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v0 = *v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v1 = *v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v2 = *v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v3 = *v3_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_siphash_nocase_6",
            "header": "",
            "params": [
                "uint64_t * const v0_ref",
                "uint64_t * const v1_ref",
                "uint64_t * const v2_ref",
                "uint64_t * const v3_ref"
            ],
            "definition": "void helper_siphash_nocase_6(uint64_t * const v0_ref, uint64_t * const v1_ref, uint64_t * const v2_ref, uint64_t * const v3_ref)\n{\n  uint64_t v0 = *v0_ref;\n  uint64_t v1 = *v1_ref;\n  uint64_t v2 = *v2_ref;\n  uint64_t v3 = *v3_ref;\n  v0 += v1;\n  v1 = (uint64_t) ((v1 << 13) | (v1 >> (64 - 13)));\n  v1 ^= v0;\n  v0 = (uint64_t) ((v0 << 32) | (v0 >> (64 - 32)));\n  v2 += v3;\n  v3 = (uint64_t) ((v3 << 16) | (v3 >> (64 - 16)));\n  v3 ^= v2;\n  v0 += v3;\n  v3 = (uint64_t) ((v3 << 21) | (v3 >> (64 - 21)));\n  v3 ^= v0;\n  v2 += v1;\n  v1 = (uint64_t) ((v1 << 17) | (v1 >> (64 - 17)));\n  v1 ^= v2;\n  v2 = (uint64_t) ((v2 << 32) | (v2 >> (64 - 32)));\n  *v0_ref = v0;\n  *v1_ref = v1;\n  *v2_ref = v2;\n  *v3_ref = v3;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "v0_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v3_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v0",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v0 = *v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v1 = *v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v2 = *v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v3 = *v3_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_siphash_nocase_7",
            "header": "",
            "params": [
                "uint64_t * const v0_ref",
                "uint64_t * const v1_ref",
                "uint64_t * const v2_ref",
                "uint64_t * const v3_ref",
                "uint64_t * const m_ref",
                "const uint8_t * const in",
                "unsigned int in_idx"
            ],
            "definition": "void helper_siphash_nocase_7(uint64_t * const v0_ref, uint64_t * const v1_ref, uint64_t * const v2_ref, uint64_t * const v3_ref, uint64_t * const m_ref, const uint8_t * const in, unsigned int in_idx)\n{\n  uint64_t v0 = *v0_ref;\n  uint64_t v1 = *v1_ref;\n  uint64_t v2 = *v2_ref;\n  uint64_t v3 = *v3_ref;\n  uint64_t m = *m_ref;\n  m = ((((((((uint64_t) tolower(in[0 + in_idx])) | (((uint64_t) tolower(in[1 + in_idx])) << 8)) | (((uint64_t) tolower(in[2 + in_idx])) << 16)) | (((uint64_t) tolower(in[3 + in_idx])) << 24)) | (((uint64_t) tolower(in[4 + in_idx])) << 32)) | (((uint64_t) tolower(in[5 + in_idx])) << 40)) | (((uint64_t) tolower(in[6 + in_idx])) << 48)) | (((uint64_t) tolower(in[7 + in_idx])) << 56);\n  v3 ^= m;\n  do\n  {\n    helper_helper_siphash_nocase_7_1(&v0, &v1, &v2, &v3);\n  }\n  while (0);\n  do\n  {\n    helper_helper_siphash_nocase_7_2(&v0, &v1, &v2, &v3);\n  }\n  while (0);\n  v0 ^= m;\n  *v0_ref = v0;\n  *v1_ref = v1;\n  *v2_ref = v2;\n  *v3_ref = v3;\n  *m_ref = m;\n}\n\n",
            "calle": [
                "helper_helper_siphash_nocase_7_1",
                "helper_helper_siphash_nocase_7_2",
                "tolower"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "v0_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v3_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const m_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in",
                        "type": "const uint8_t * const",
                        "definition": [
                            "const uint8_t * const in"
                        ]
                    },
                    {
                        "path": null,
                        "name": "in_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int in_idx"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v0",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v0 = *v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v1 = *v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v2 = *v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v3 = *v3_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "m",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t m = *m_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_siphash_7_1",
            "header": "",
            "params": [
                "uint64_t * const v0_ref",
                "uint64_t * const v1_ref",
                "uint64_t * const v2_ref",
                "uint64_t * const v3_ref"
            ],
            "definition": "void helper_helper_siphash_7_1(uint64_t * const v0_ref, uint64_t * const v1_ref, uint64_t * const v2_ref, uint64_t * const v3_ref)\n{\n  uint64_t v0 = *v0_ref;\n  uint64_t v1 = *v1_ref;\n  uint64_t v2 = *v2_ref;\n  uint64_t v3 = *v3_ref;\n  v0 += v1;\n  v1 = (uint64_t) ((v1 << 13) | (v1 >> (64 - 13)));\n  v1 ^= v0;\n  v0 = (uint64_t) ((v0 << 32) | (v0 >> (64 - 32)));\n  v2 += v3;\n  v3 = (uint64_t) ((v3 << 16) | (v3 >> (64 - 16)));\n  v3 ^= v2;\n  v0 += v3;\n  v3 = (uint64_t) ((v3 << 21) | (v3 >> (64 - 21)));\n  v3 ^= v0;\n  v2 += v1;\n  v1 = (uint64_t) ((v1 << 17) | (v1 >> (64 - 17)));\n  v1 ^= v2;\n  v2 = (uint64_t) ((v2 << 32) | (v2 >> (64 - 32)));\n  *v0_ref = v0;\n  *v1_ref = v1;\n  *v2_ref = v2;\n  *v3_ref = v3;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "v0_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v3_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v0",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v0 = *v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v1 = *v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v2 = *v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v3 = *v3_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_siphash_7_2",
            "header": "",
            "params": [
                "uint64_t * const v0_ref",
                "uint64_t * const v1_ref",
                "uint64_t * const v2_ref",
                "uint64_t * const v3_ref"
            ],
            "definition": "void helper_helper_siphash_7_2(uint64_t * const v0_ref, uint64_t * const v1_ref, uint64_t * const v2_ref, uint64_t * const v3_ref)\n{\n  uint64_t v0 = *v0_ref;\n  uint64_t v1 = *v1_ref;\n  uint64_t v2 = *v2_ref;\n  uint64_t v3 = *v3_ref;\n  v0 += v1;\n  v1 = (uint64_t) ((v1 << 13) | (v1 >> (64 - 13)));\n  v1 ^= v0;\n  v0 = (uint64_t) ((v0 << 32) | (v0 >> (64 - 32)));\n  v2 += v3;\n  v3 = (uint64_t) ((v3 << 16) | (v3 >> (64 - 16)));\n  v3 ^= v2;\n  v0 += v3;\n  v3 = (uint64_t) ((v3 << 21) | (v3 >> (64 - 21)));\n  v3 ^= v0;\n  v2 += v1;\n  v1 = (uint64_t) ((v1 << 17) | (v1 >> (64 - 17)));\n  v1 ^= v2;\n  v2 = (uint64_t) ((v2 << 32) | (v2 >> (64 - 32)));\n  *v0_ref = v0;\n  *v1_ref = v1;\n  *v2_ref = v2;\n  *v3_ref = v3;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "v0_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v3_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v0",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v0 = *v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v1 = *v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v2 = *v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v3 = *v3_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_siphash_nocase_7_1",
            "header": "",
            "params": [
                "uint64_t * const v0_ref",
                "uint64_t * const v1_ref",
                "uint64_t * const v2_ref",
                "uint64_t * const v3_ref"
            ],
            "definition": "void helper_helper_siphash_nocase_7_1(uint64_t * const v0_ref, uint64_t * const v1_ref, uint64_t * const v2_ref, uint64_t * const v3_ref)\n{\n  uint64_t v0 = *v0_ref;\n  uint64_t v1 = *v1_ref;\n  uint64_t v2 = *v2_ref;\n  uint64_t v3 = *v3_ref;\n  v0 += v1;\n  v1 = (uint64_t) ((v1 << 13) | (v1 >> (64 - 13)));\n  v1 ^= v0;\n  v0 = (uint64_t) ((v0 << 32) | (v0 >> (64 - 32)));\n  v2 += v3;\n  v3 = (uint64_t) ((v3 << 16) | (v3 >> (64 - 16)));\n  v3 ^= v2;\n  v0 += v3;\n  v3 = (uint64_t) ((v3 << 21) | (v3 >> (64 - 21)));\n  v3 ^= v0;\n  v2 += v1;\n  v1 = (uint64_t) ((v1 << 17) | (v1 >> (64 - 17)));\n  v1 ^= v2;\n  v2 = (uint64_t) ((v2 << 32) | (v2 >> (64 - 32)));\n  *v0_ref = v0;\n  *v1_ref = v1;\n  *v2_ref = v2;\n  *v3_ref = v3;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "v0_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v3_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v0",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v0 = *v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v1 = *v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v2 = *v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v3 = *v3_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "helper_helper_siphash_nocase_7_2",
            "header": "",
            "params": [
                "uint64_t * const v0_ref",
                "uint64_t * const v1_ref",
                "uint64_t * const v2_ref",
                "uint64_t * const v3_ref"
            ],
            "definition": "void helper_helper_siphash_nocase_7_2(uint64_t * const v0_ref, uint64_t * const v1_ref, uint64_t * const v2_ref, uint64_t * const v3_ref)\n{\n  uint64_t v0 = *v0_ref;\n  uint64_t v1 = *v1_ref;\n  uint64_t v2 = *v2_ref;\n  uint64_t v3 = *v3_ref;\n  v0 += v1;\n  v1 = (uint64_t) ((v1 << 13) | (v1 >> (64 - 13)));\n  v1 ^= v0;\n  v0 = (uint64_t) ((v0 << 32) | (v0 >> (64 - 32)));\n  v2 += v3;\n  v3 = (uint64_t) ((v3 << 16) | (v3 >> (64 - 16)));\n  v3 ^= v2;\n  v0 += v3;\n  v3 = (uint64_t) ((v3 << 21) | (v3 >> (64 - 21)));\n  v3 ^= v0;\n  v2 += v1;\n  v1 = (uint64_t) ((v1 << 17) | (v1 >> (64 - 17)));\n  v1 ^= v2;\n  v2 = (uint64_t) ((v2 << 32) | (v2 >> (64 - 32)));\n  *v0_ref = v0;\n  *v1_ref = v1;\n  *v2_ref = v2;\n  *v3_ref = v3;\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "v0_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3_ref",
                        "type": "uint64_t * const",
                        "definition": [
                            "uint64_t * const v3_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v0",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v0 = *v0_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v1",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v1 = *v1_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v2",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v2 = *v2_ref"
                        ]
                    },
                    {
                        "path": null,
                        "name": "v3",
                        "type": "uint64_t",
                        "definition": [
                            "uint64_t v3 = *v3_ref"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "snudown_link_attr",
            "header": "",
            "params": [
                "struct buf *ob",
                "const struct buf *link",
                "void *opaque"
            ],
            "definition": "static void snudown_link_attr(struct buf *ob, const struct buf *link, void *opaque)\n{\n  struct snudown_renderopt *options = opaque;\n  if (options->nofollow)\n  {\n    bufput(ob, \" rel=\\\"nofollow\\\"\", (sizeof(\" rel=\\\"nofollow\\\"\")) - 1);\n  }\n  if (options->target != 0)\n  {\n    bufput(ob, \" target=\\\"\", (sizeof(\" target=\\\"\")) - 1);\n    bufputs(ob, options->target);\n    bufputc(ob, '\\\"');\n  }\n}\n\n",
            "calle": [
                "bufput",
                "bufputc",
                "bufputs"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "const struct buf *",
                        "definition": [
                            "const struct buf *link"
                        ]
                    },
                    {
                        "path": null,
                        "name": "opaque",
                        "type": "void *",
                        "definition": [
                            "void *opaque"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct snudown_renderopt",
                        "type": "struct snudown_renderopt *",
                        "definition": [
                            "struct snudown_renderopt *options = opaque"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "make_custom_renderer",
            "header": "",
            "params": [
                "struct module_state *state",
                "const unsigned int renderflags",
                "const unsigned int markdownflags",
                "int toc_renderer"
            ],
            "definition": "static struct sd_markdown *make_custom_renderer(struct module_state *state, const unsigned int renderflags, const unsigned int markdownflags, int toc_renderer)\n{\n  if (toc_renderer)\n  {\n    sdhtml_toc_renderer(&state->callbacks, (struct html_renderopt *) (&state->options));\n  }\n  else\n  {\n    sdhtml_renderer(&state->callbacks, (struct html_renderopt *) (&state->options), renderflags);\n  }\n  state->options.html.link_attributes = &snudown_link_attr;\n  state->options.html.html_element_whitelist = html_element_whitelist;\n  state->options.html.html_attr_whitelist = html_attr_whitelist;\n  return sd_markdown_new(markdownflags, 16, 64, &state->callbacks, &state->options);\n}\n\n",
            "calle": [
                "sd_markdown_new",
                "sdhtml_renderer",
                "sdhtml_toc_renderer",
                "snudown_link_attr"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct module_state",
                        "type": "struct module_state *",
                        "definition": [
                            "struct module_state *state"
                        ]
                    },
                    {
                        "path": null,
                        "name": "renderflags",
                        "type": "const unsigned int",
                        "definition": [
                            "const unsigned int renderflags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "markdownflags",
                        "type": "const unsigned int",
                        "definition": [
                            "const unsigned int markdownflags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "toc_renderer",
                        "type": "int",
                        "definition": [
                            "int toc_renderer"
                        ]
                    },
                    {
                        "path": null,
                        "name": "html_element_whitelist",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "html_attr_whitelist",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "init_default_renderer",
            "header": "",
            "params": [
                "PyObject *module"
            ],
            "definition": "void init_default_renderer(PyObject *module)\n{\n  PyModule_AddIntConstant(module, \"RENDERER_USERTEXT\", RENDERER_USERTEXT);\n  sundown[RENDERER_USERTEXT].main_renderer = make_custom_renderer(&usertext_state, snudown_default_render_flags, snudown_default_md_flags, 0);\n  sundown[RENDERER_USERTEXT].toc_renderer = make_custom_renderer(&usertext_toc_state, snudown_default_render_flags, snudown_default_md_flags, 1);\n  sundown[RENDERER_USERTEXT].state = &usertext_state;\n  sundown[RENDERER_USERTEXT].toc_state = &usertext_toc_state;\n}\n\n",
            "calle": [
                "PyModule_AddIntConstant",
                "make_custom_renderer"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "module",
                        "type": "PyObject *",
                        "definition": [
                            "PyObject *module"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sundown",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "usertext_state",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "snudown_default_render_flags",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "snudown_default_md_flags",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "usertext_toc_state",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "init_wiki_renderer",
            "header": "",
            "params": [
                "PyObject *module"
            ],
            "definition": "void init_wiki_renderer(PyObject *module)\n{\n  PyModule_AddIntConstant(module, \"RENDERER_WIKI\", RENDERER_WIKI);\n  sundown[RENDERER_WIKI].main_renderer = make_custom_renderer(&wiki_state, snudown_wiki_render_flags, snudown_default_md_flags, 0);\n  sundown[RENDERER_WIKI].toc_renderer = make_custom_renderer(&wiki_toc_state, snudown_wiki_render_flags, snudown_default_md_flags, 1);\n  sundown[RENDERER_WIKI].state = &wiki_state;\n  sundown[RENDERER_WIKI].toc_state = &wiki_toc_state;\n}\n\n",
            "calle": [
                "PyModule_AddIntConstant",
                "make_custom_renderer"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "module",
                        "type": "PyObject *",
                        "definition": [
                            "PyObject *module"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sundown",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "wiki_state",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "snudown_wiki_render_flags",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "snudown_default_md_flags",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "wiki_toc_state",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "snudown_md",
            "header": "",
            "params": [
                "PyObject *self",
                "PyObject *args",
                "PyObject *kwargs"
            ],
            "definition": "static PyObject *snudown_md(PyObject *self, PyObject *args, PyObject *kwargs)\n{\n  static char *kwlist[] = {\"text\", \"nofollow\", \"target\", \"toc_id_prefix\", \"renderer\", \"enable_toc\", 0};\n  struct buf ib;\n  struct buf *ob;\n  unsigned int ob_idx = 0;\n  PyObject *py_result;\n  unsigned int py_result_idx = 0;\n  const char *result_text;\n  unsigned int result_text_idx = 0;\n  int renderer = RENDERER_USERTEXT;\n  int enable_toc = 0;\n  struct snudown_renderer _snudown;\n  int nofollow = 0;\n  char *target = 0;\n  char *toc_id_prefix = 0;\n  unsigned int flags;\n  memset(&ib, 0x0, sizeof(struct buf));\n  if (!PyArg_ParseTupleAndKeywords(args, kwargs, \"s#|izzii\", kwlist, &ib.data, &ib.size, &nofollow, &target, &toc_id_prefix, &renderer, &enable_toc))\n  {\n    return 0;\n  }\n  if ((renderer < 0) || (renderer >= RENDERER_COUNT))\n  {\n    PyErr_SetString(PyExc_ValueError, \"Invalid renderer\");\n    return 0;\n  }\n  _snudown = sundown[renderer];\n  struct snudown_renderopt *options = &_snudown.state->options;\n  options->nofollow = nofollow;\n  options->target = target;\n  ob_idx = bufnew(128);\n  flags = options->html.flags;\n  if (enable_toc)\n  {\n    _snudown.toc_state->options.html.toc_id_prefix = toc_id_prefix;\n    sd_markdown_render(ob, ib.data, ib.size, _snudown.toc_renderer);\n    _snudown.toc_state->options.html.toc_id_prefix = 0;\n    options->html.flags |= HTML_TOC;\n  }\n  options->html.toc_id_prefix = toc_id_prefix;\n  sd_markdown_render(ob, ib.data, ib.size, _snudown.main_renderer);\n  options->html.toc_id_prefix = 0;\n  options->html.flags = flags;\n  result_text_idx = \"\";\n  if (ob->data)\n  {\n    result_text_idx = (const char *) ob->data;\n  }\n  py_result_idx = Py_BuildValue(\"s#\", result_text, (int) ob->size);\n  bufrelease(ob);\n  return py_result;\n}\n\n",
            "calle": [
                "PyArg_ParseTupleAndKeywords",
                "PyErr_SetString",
                "Py_BuildValue",
                "bufnew",
                "bufrelease",
                "memset",
                "sd_markdown_render"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "self",
                        "type": "PyObject *",
                        "definition": [
                            "PyObject *self"
                        ]
                    },
                    {
                        "path": null,
                        "name": "args",
                        "type": "PyObject *",
                        "definition": [
                            "PyObject *args"
                        ]
                    },
                    {
                        "path": null,
                        "name": "kwargs",
                        "type": "PyObject *",
                        "definition": [
                            "PyObject *kwargs"
                        ]
                    },
                    {
                        "path": null,
                        "name": "kwlist",
                        "type": "char *[]",
                        "definition": [
                            "static char *kwlist[] = {\"text\", \"nofollow\", \"target\", \"toc_id_prefix\", \"renderer\", \"enable_toc\", 0}"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ib",
                        "type": "struct buf",
                        "definition": [
                            "struct buf ib"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct buf",
                        "type": "struct buf *",
                        "definition": [
                            "struct buf *ob"
                        ]
                    },
                    {
                        "path": null,
                        "name": "ob_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int ob_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "py_result",
                        "type": "PyObject *",
                        "definition": [
                            "PyObject *py_result"
                        ]
                    },
                    {
                        "path": null,
                        "name": "py_result_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int py_result_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result_text",
                        "type": "const char *",
                        "definition": [
                            "const char *result_text"
                        ]
                    },
                    {
                        "path": null,
                        "name": "result_text_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int result_text_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "renderer",
                        "type": "int",
                        "definition": [
                            "int renderer = RENDERER_USERTEXT"
                        ]
                    },
                    {
                        "path": null,
                        "name": "enable_toc",
                        "type": "int",
                        "definition": [
                            "int enable_toc = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "_snudown",
                        "type": "struct snudown_renderer",
                        "definition": [
                            "struct snudown_renderer _snudown"
                        ]
                    },
                    {
                        "path": null,
                        "name": "nofollow",
                        "type": "int",
                        "definition": [
                            "int nofollow = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "target",
                        "type": "char *",
                        "definition": [
                            "char *target = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "toc_id_prefix",
                        "type": "char *",
                        "definition": [
                            "char *toc_id_prefix = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "flags",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int flags"
                        ]
                    },
                    {
                        "path": null,
                        "name": "struct snudown_renderopt",
                        "type": "struct snudown_renderopt *",
                        "definition": [
                            "struct snudown_renderopt *options = &_snudown.state->options"
                        ]
                    },
                    {
                        "path": null,
                        "name": "sundown",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "initsnudown",
            "header": "",
            "params": [
                "void"
            ],
            "definition": "PyObject *initsnudown(void)\n{\n  PyObject *module;\n  unsigned int module_idx = 0;\n  module_idx = Py_InitModule3(\"snudown\", snudown_methods, snudown_module__doc__);\n  if ((&module[module_idx]) == 0)\n  {\n    return;\n  }\n  init_default_renderer(module);\n  init_wiki_renderer(module);\n  PyModule_AddStringConstant(module, \"__version__\", \"1.7.0\");\n}\n\n",
            "calle": [
                "PyModule_AddStringConstant",
                "Py_InitModule3",
                "init_default_renderer",
                "init_wiki_renderer"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": null,
                        "type": "void",
                        "definition": [
                            "void"
                        ]
                    },
                    {
                        "path": null,
                        "name": "module",
                        "type": "PyObject *",
                        "definition": [
                            "PyObject *module"
                        ]
                    },
                    {
                        "path": null,
                        "name": "module_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int module_idx = 0"
                        ]
                    },
                    {
                        "path": null,
                        "name": "snudown_methods",
                        "type": "None",
                        "definition": []
                    },
                    {
                        "path": null,
                        "name": "snudown_module__doc__",
                        "type": "None",
                        "definition": []
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "stack_free",
            "header": "void stack_free(struct stack *)",
            "params": [
                "struct stack *st"
            ],
            "definition": "void stack_free(struct stack *st)\n{\n  if (!st)\n  {\n    return;\n  }\n  free(st->item);\n  st->item = 0;\n  st->size = 0;\n  st->asize = 0;\n}\n\n",
            "calle": [
                "free"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct stack",
                        "type": "struct stack *",
                        "definition": [
                            "struct stack *st"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "stack_grow",
            "header": "int stack_grow(struct stack *, size_t)",
            "params": [
                "struct stack *st",
                "size_t new_size"
            ],
            "definition": "int stack_grow(struct stack *st, size_t new_size)\n{\n  void **new_st;\n  unsigned int new_st_idx = 0;\n  if (st->asize >= new_size)\n  {\n    return 0;\n  }\n  new_st_idx = realloc(st->item, new_size * (sizeof(void *)));\n  if ((&new_st[new_st_idx]) == 0)\n  {\n    return -1;\n  }\n  memset((&new_st[new_st_idx]) + st->asize, 0x0, (new_size - st->asize) * (sizeof(void *)));\n  st->item = &new_st[new_st_idx];\n  st->asize = new_size;\n  if (st->size > new_size)\n  {\n    st->size = new_size;\n  }\n  return 0;\n}\n\n",
            "calle": [
                "memset",
                "realloc"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct stack",
                        "type": "struct stack *",
                        "definition": [
                            "struct stack *st"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_size",
                        "type": "size_t",
                        "definition": [
                            "size_t new_size"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_st",
                        "type": "void **",
                        "definition": [
                            "void **new_st"
                        ]
                    },
                    {
                        "path": null,
                        "name": "new_st_idx",
                        "type": "unsigned int",
                        "definition": [
                            "unsigned int new_st_idx = 0"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "stack_init",
            "header": "int stack_init(struct stack *, size_t)",
            "params": [
                "struct stack *st",
                "size_t initial_size"
            ],
            "definition": "int stack_init(struct stack *st, size_t initial_size)\n{\n  st->item = 0;\n  st->size = 0;\n  st->asize = 0;\n  if (!initial_size)\n  {\n    initial_size = 8;\n  }\n  return stack_grow(st, initial_size);\n}\n\n",
            "calle": [
                "stack_grow"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct stack",
                        "type": "struct stack *",
                        "definition": [
                            "struct stack *st"
                        ]
                    },
                    {
                        "path": null,
                        "name": "initial_size",
                        "type": "size_t",
                        "definition": [
                            "size_t initial_size"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "stack_push",
            "header": "int stack_push(struct stack *, void *)",
            "params": [
                "struct stack *st",
                "void *item"
            ],
            "definition": "int stack_push(struct stack *st, void *item)\n{\n  if (stack_grow(st, st->size * 2) < 0)\n  {\n    return -1;\n  }\n  st->item[st->size++] = item;\n  return 0;\n}\n\n",
            "calle": [
                "stack_grow"
            ],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct stack",
                        "type": "struct stack *",
                        "definition": [
                            "struct stack *st"
                        ]
                    },
                    {
                        "path": null,
                        "name": "item",
                        "type": "void *",
                        "definition": [
                            "void *item"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "stack_pop",
            "header": "void *stack_pop(struct stack *)",
            "params": [
                "struct stack *st"
            ],
            "definition": "void *stack_pop(struct stack *st)\n{\n  if (!st->size)\n  {\n    return 0;\n  }\n  return st->item[--st->size];\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct stack",
                        "type": "struct stack *",
                        "definition": [
                            "struct stack *st"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        },
        {
            "path": null,
            "name": "stack_top",
            "header": "void *stack_top(struct stack *)",
            "params": [
                "struct stack *st"
            ],
            "definition": "void *stack_top(struct stack *st)\n{\n  if (!st->size)\n  {\n    return 0;\n  }\n  return st->item[st->size - 1];\n}\n\n",
            "calle": [],
            "inner": {
                "special_type": [],
                "global_variable": [
                    {
                        "path": null,
                        "name": "struct stack",
                        "type": "struct stack *",
                        "definition": [
                            "struct stack *st"
                        ]
                    }
                ],
                "function": [],
                "typedefs": []
            }
        }
    ],
    "typedefs": []
}