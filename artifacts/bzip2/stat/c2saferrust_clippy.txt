warning: the feature `core_intrinsics` is internal to the compiler or standard library
warning: operator precedence might not be obvious
warning: operator precedence might not be obvious
warning: operator precedence might not be obvious
warning: operator precedence might not be obvious
warning: operator precedence might not be obvious
warning: unnecessary parentheses around assigned value
warning: unnecessary parentheses around assigned value
warning: operator precedence might not be obvious
warning: unused import: `std::ffi::CString`
warning: unused import: `std::os::raw::c_long`
warning: unused import: `std::alloc`
warning: unused import: `std::io`
warning: unused import: `std::ffi::c_void`
warning: unused import: `std::io::Error`
warning: unused import: `std::fmt::Write`
warning: unused import: `std::os::raw::c_int`
warning: unused import: `std::ptr`
warning: unused import: `std::ffi`
warning: unused import: `std::env`
warning: unused import: `std::os::raw::c_char`
warning: unused import: `std::ffi`
warning: unused import: `std::ffi::CStr`
warning: unused import: `std::io::Write`
warning: unused import: `std::ffi::CString`
warning: unused import: `std::ffi`
warning: unused import: `std::ptr`
warning: unused label
warning: operator precedence might not be obvious
warning: unused import: `std::slice`
warning: operator precedence might not be obvious
warning: denote infinite loops with `loop { ... }`
warning: operator precedence might not be obvious
warning: operator precedence might not be obvious
warning: operator precedence might not be obvious
warning: operator precedence might not be obvious
warning: denote infinite loops with `loop { ... }`
warning: `#[no_mangle]` has no effect on a foreign static
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[inline]` is ignored on externally exported functions
warning: `#[no_mangle]` has no effect on a foreign static
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign static
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign static
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign static
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign static
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[inline]` is ignored on externally exported functions
warning: `#[inline]` is ignored on externally exported functions
warning: `#[no_mangle]` has no effect on a foreign static
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign static
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign static
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign static
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign static
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign static
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: `#[no_mangle]` has no effect on a foreign function
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
warning: the feature `const_mut_refs` has been stable since 1.83.0 and no longer requires an attribute to enable
warning: the feature `const_fn_fn_ptr_basics` has been stable since 1.61.0 and no longer requires an attribute to enable
warning: the feature `ptr_offset_from` has been stable since 1.47.0 and no longer requires an attribute to enable
warning: unreachable call
warning: unreachable expression
warning: unreachable statement
warning: unused variable: `l`
warning: unused variable: `r`
warning: unused variable: `cc`
warning: unused variable: `cc1`
warning: unused variable: `nNotDone`
warning: unused variable: `s1`
warning: unused variable: `s2`
warning: unused variable: `med`
warning: unused variable: `k`
warning: unused variable: `ss`
warning: unused variable: `sb`
warning: unused variable: `c1`
warning: unused variable: `i`
warning: unnecessary `unsafe` block
warning: unused variable: `bzf`
warning: unused variable: `bzerr`
warning: unused variable: `current_block`
warning: unused variable: `ret`
warning: unused variable: `i`
warning: unused variable: `unusedTmp`
warning: unused variable: `result`
warning: unnecessary `unsafe` block
warning: unnecessary `unsafe` block
warning: unnecessary `unsafe` block
warning: unnecessary `unsafe` block
warning: unnecessary `unsafe` block
warning: unnecessary `unsafe` block
warning: unnecessary `unsafe` block
warning: unnecessary `unsafe` block
warning: unnecessary `unsafe` block
warning: unnecessary `unsafe` block
warning: unnecessary `unsafe` block
warning: unnecessary `unsafe` block
warning: unnecessary `unsafe` block
warning: unnecessary `unsafe` block
warning: unnecessary `unsafe` block
warning: unnecessary `unsafe` block
warning: unnecessary `unsafe` block
warning: unnecessary `unsafe` block
warning: unnecessary `unsafe` block
warning: unnecessary `unsafe` block
warning: unnecessary `unsafe` block
warning: unnecessary `unsafe` block
warning: unnecessary `unsafe` block
warning: unused variable: `bzerr_dummy`
warning: unused variable: `i`
warning: unused variable: `unusedTmp`
warning: unused variable: `n`
warning: unused variable: `n`
warning: unused variable: `name`
warning: unnecessary `unsafe` block
warning: unused variable: `magicNumberOK`
warning: unused variable: `bsIn`
warning: unused variable: `opaque`
warning: unused variable: `opaque`
warning: unnecessary `unsafe` block
warning: unnecessary `unsafe` block
warning: unnecessary `unsafe` block
warning: unnecessary `unsafe` block
warning: unnecessary `unsafe` block
warning: unnecessary `unsafe` block
warning: unnecessary `unsafe` block
warning: unnecessary `unsafe` block
warning: unnecessary `unsafe` block
warning: unnecessary `unsafe` block
warning: unused variable: `ret`
warning: unused variable: `b`
warning: unused variable: `totc`
warning: unused variable: `i`
warning: unnecessary `unsafe` block
warning: unnecessary `unsafe` block
warning: unnecessary `unsafe` block
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
warning: variables can be used directly in the `format!` string
warning: variables can be used directly in the `format!` string
warning: unneeded `return` statement
warning: variables in the condition are not mutated in the loop body
warning: manual implementation of an assign operation
warning: manual implementation of an assign operation
warning: manual implementation of an assign operation
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
warning: manual implementation of an assign operation
warning: manual implementation of an assign operation
warning: clamp-like pattern without using clamp function
warning: casting raw pointers to the same type and constness is unnecessary (`*mut u8` -> `*mut u8`)
warning: unneeded `return` statement
warning: unneeded `return` statement
warning: unneeded `return` statement
warning: the function `uInt64_isZero` doesn't need a mutable reference
warning: unneeded `return` statement
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: `0 as *mut _` detected
warning: this `if` statement can be collapsed
warning: the function `uInt64_to_double` doesn't need a mutable reference
warning: the function `uInt64_to_double` doesn't need a mutable reference
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: this `if` statement can be collapsed
warning: creating a `Box` from a void raw pointer
warning: you seem to be trying to use `match` for an equality check. Consider using `if`
warning: this let-binding has unit value
warning: creating a `Box` from a void raw pointer
warning: casting raw pointers to the same type and constness is unnecessary (`*mut std::ffi::c_void` -> `*mut std::ffi::c_void`)
warning: this `if` statement can be collapsed
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: creating a `Box` from a void raw pointer
warning: comparing with null is better expressed by the `.is_null()` method
warning: `0 as *const _` detected
warning: unneeded `return` statement
warning: `0 as *mut _` detected
warning: unneeded `return` statement
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: unneeded `return` statement
warning: unneeded `return` statement
warning: the function `utime` doesn't need a mutable reference
warning: sub-expression diverges
warning: redundant pattern matching, consider using `is_err()`
warning: unneeded `return` statement
warning: unneeded `return` statement
warning: unneeded `return` statement
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: variables can be used directly in the `format!` string
warning: this boolean expression can be simplified
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: this `if` statement can be collapsed
warning: `0 as *mut _` detected
warning: variables can be used directly in the `format!` string
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: variables can be used directly in the `format!` string
warning: unneeded `return` statement
warning: unneeded `return` statement
warning: casting integer literal to `usize` is unnecessary
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: this `if` has identical blocks
warning: this `if` has identical blocks
warning: this `else { if .. }` block can be collapsed
warning: variables can be used directly in the `format!` string
warning: variables can be used directly in the `format!` string
156 |     eprintln!("{}: warning: output file(s) may be incomplete.", prog_name_str);
156 -     eprintln!("{}: warning: output file(s) may be incomplete.", prog_name_str);
156 +     eprintln!("{prog_name_str}: warning: output file(s) may be incomplete.");
warning: unneeded `return` statement
warning: unneeded `return` statement
warning: unneeded `return` statement
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: variables in the condition are not mutated in the loop body
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: variables in the condition are not mutated in the loop body
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: manual `!Range::contains` implementation
warning: variables can be used directly in the `format!` string
warning: variables can be used directly in the `format!` string
warning: unneeded `return` statement
warning: unneeded `return` statement
warning: unneeded `return` statement
warning: unsafe function's docs are missing a `# Safety` section
warning: unneeded `return` statement
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: unneeded `return` statement
warning: variables in the condition are not mutated in the loop body
warning: variables in the condition are not mutated in the loop body
warning: unneeded `return` statement
warning: variables in the condition are not mutated in the loop body
warning: this boolean expression can be simplified
warning: unneeded `return` statement
warning: variables in the condition are not mutated in the loop body
warning: unsafe function's docs are missing a `# Safety` section
warning: `0 as *mut _` detected
warning: unsafe function's docs are missing a `# Safety` section
warning: unneeded `return` statement
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: unneeded `return` statement
warning: unneeded `return` statement
warning: variables in the condition are not mutated in the loop body
warning: variables in the condition are not mutated in the loop body
warning: unsafe function's docs are missing a `# Safety` section
warning: this boolean expression can be simplified
warning: unneeded `return` statement
warning: variables in the condition are not mutated in the loop body
warning: variables in the condition are not mutated in the loop body
warning: variables in the condition are not mutated in the loop body
warning: variables in the condition are not mutated in the loop body
warning: there is no need to manually implement bit rotation
warning: unneeded `return` statement
warning: unsafe function's docs are missing a `# Safety` section
warning: unneeded `return` statement
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: unsafe function's docs are missing a `# Safety` section
warning: variables in the condition are not mutated in the loop body
warning: this public function might dereference a raw pointer but is not marked `unsafe`
warning: unsafe function's docs are missing a `# Safety` section
warning: variables in the condition are not mutated in the loop body
warning: unsafe function's docs are missing a `# Safety` section
warning: unneeded `return` statement
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: unsafe function's docs are missing a `# Safety` section
warning: unneeded `return` statement
warning: variables in the condition are not mutated in the loop body
warning: unsafe function's docs are missing a `# Safety` section
warning: unneeded `return` statement
warning: manual `!RangeInclusive::contains` implementation
warning: manual `!RangeInclusive::contains` implementation
warning: manual `!RangeInclusive::contains` implementation
warning: unneeded `return` statement
warning: unneeded `return` statement
warning: manual `!RangeInclusive::contains` implementation
warning: unneeded `return` statement
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: unneeded `return` statement
warning: unneeded `return` statement
warning: this public function might dereference a raw pointer but is not marked `unsafe`
warning: unneeded `return` statement
warning: unneeded `return` statement
warning: unsafe function's docs are missing a `# Safety` section
warning: `0 as *mut _` detected
warning: variables in the condition are not mutated in the loop body
warning: `0 as *mut _` detected
warning: variables in the condition are not mutated in the loop body
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: casting raw pointers to the same type and constness is unnecessary (`*mut u8` -> `*mut u8`)
warning: casting raw pointers to the same type and constness is unnecessary (`*mut i32` -> `*mut i32`)
warning: unsafe function's docs are missing a `# Safety` section
warning: unsafe function's docs are missing a `# Safety` section
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: `0 as *mut _` detected
warning: you seem to be trying to use `match` for an equality check. Consider using `if`
warning: you seem to be trying to use `match` for an equality check. Consider using `if`
warning: you seem to be trying to use `match` for an equality check. Consider using `if`
warning: you seem to be trying to use `match` for an equality check. Consider using `if`
warning: you seem to be trying to use `match` for an equality check. Consider using `if`
warning: you seem to be trying to use `match` for an equality check. Consider using `if`
warning: you seem to be trying to use `match` for an equality check. Consider using `if`
warning: you seem to be trying to use `match` for an equality check. Consider using `if`
warning: this `if` has identical blocks
warning: manual `RangeInclusive::contains` implementation
warning: manual `!Range::contains` implementation
warning: manual `!Range::contains` implementation
warning: manual `!Range::contains` implementation
warning: you seem to be trying to use `match` for an equality check. Consider using `if`
warning: casting to the same type is unnecessary (`u8` -> `u8`)
warning: casting to the same type is unnecessary (`u8` -> `u8`)
warning: casting to the same type is unnecessary (`u8` -> `u8`)
warning: casting to the same type is unnecessary (`u8` -> `u8`)
warning: you seem to be trying to use `match` for an equality check. Consider using `if`
warning: this operation has no effect
warning: this operation has no effect
warning: manual `!RangeInclusive::contains` implementation
warning: unsafe function's docs are missing a `# Safety` section
warning: this boolean expression can be simplified
warning: this boolean expression can be simplified
warning: variables in the condition are not mutated in the loop body
warning: variables in the condition are not mutated in the loop body
warning: variables in the condition are not mutated in the loop body
warning: unsafe function's docs are missing a `# Safety` section
warning: unsafe function's docs are missing a `# Safety` section
warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a shared reference to mutable static
warning: creating a shared reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a shared reference to mutable static
warning: creating a shared reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a shared reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a shared reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a shared reference to mutable static
warning: creating a shared reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a shared reference to mutable static
warning: creating a shared reference to mutable static
warning: creating a shared reference to mutable static
warning: creating a shared reference to mutable static
warning: creating a shared reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
warning: creating a mutable reference to mutable static
