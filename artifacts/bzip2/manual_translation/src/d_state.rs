use crate::*;


pub struct DState {
    pub strm: Option<Box<BzStream>>,
    pub state: Int32,
    pub state_out_ch: UChar,
    pub state_out_len: Int32,
    pub block_randomised: Bool,
    pub r_n_to_go: Int32,
    pub r_t_pos: Int32,
    pub bs_buff: UInt32,
    pub bs_live: Int32,
    pub block_size100k: Int32,
    pub small_decompress: Bool,
    pub curr_block_no: Int32,
    pub verbosity: Int32,
    pub orig_ptr: Int32,
    pub t_pos: UInt32,
    pub k0: Int32,
    pub unzftab: [Int32; 256],
    pub nblock_used: Int32,
    pub cftab: [Int32; 257],
    pub cftab_copy: [Int32; 257],
    pub tt: Option<Box<[UInt32]>>,
    pub ll16: Option<Box<[UInt16]>>,
    pub ll4: Option<Box<[UChar]>>,
    pub stored_block_crc: UInt32,
    pub stored_combined_crc: UInt32,
    pub calculated_block_crc: UInt32,
    pub calculated_combined_crc: UInt32,
    pub n_in_use: Int32,
    pub in_use: [Bool; 256],
    pub in_use16: [Bool; 16],
    pub seq_to_unseq: [UChar; 256],
    pub mtfa: [UChar; 4096],
    pub mtfbase: [Int32; 16],  // 256/16 = 16
    pub selector: [UChar; 18002],  // 2 + (900000/50) = 18002
    pub selector_mtf: [UChar; 18002],
    pub len: [[UChar; 258]; 6],
    pub limit: [[Int32; 258]; 6],
    pub base: [[Int32; 258]; 6],
    pub perm: [[Int32; 258]; 6],
    pub min_lens: [Int32; 6],
    pub save_i: Int32,
    pub save_j: Int32,
    pub save_t: Int32,
    pub save_alpha_size: Int32,
    pub save_n_groups: Int32,
    pub save_n_selectors: Int32,
    pub save_eob: Int32,
    pub save_group_no: Int32,
    pub save_group_pos: Int32,
    pub save_next_sym: Int32,
    pub save_nblock_max: Int32,
    pub save_nblock: Int32,
    pub save_es: Int32,
    pub save_n: Int32,
    pub save_curr: Int32,
    pub save_zt: Int32,
    pub save_zn: Int32,
    pub save_zvec: Int32,
    pub save_zj: Int32,
    pub save_g_sel: Int32,
    pub save_g_minlen: Int32,
    pub save_g_limit: Option<Box<[Int32]>>,
    pub save_g_base: Option<Box<[Int32]>>,
    pub save_g_perm: Option<Box<[Int32]>>,
}

